
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d08  0800dd18  0800dd18  0001dd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea20  0800ea20  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea20  0800ea20  0001ea20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea28  0800ea28  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea28  0800ea28  0001ea28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea2c  0800ea2c  0001ea2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800ea30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a0  2**0
                  CONTENTS
 10 .bss          00005200  200001a0  200001a0  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200053a0  200053a0  000201a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ca5b  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c67  00000000  00000000  0003cc6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019a8  00000000  00000000  000408d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001422  00000000  00000000  00042280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005207  00000000  00000000  000436a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d76f  00000000  00000000  000488a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc8ea  00000000  00000000  00066018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007424  00000000  00000000  00142904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00149d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd00 	.word	0x0800dd00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800dd00 	.word	0x0800dd00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f004 faaf 	bl	8005460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f967 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fc5d 	bl	80017c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fc31 	bl	8001770 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 f9bf 	bl	8001290 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fb83 	bl	800161c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fa87 	bl	8001428 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 f9e7 	bl	80012ec <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1e:	f000 fad7 	bl	80014d0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f22:	f000 fb45 	bl	80015b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f26:	f00c f9a7 	bl	800d278 <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	486f      	ldr	r0, [pc, #444]	; (80010f0 <main+0x1f8>)
 8000f32:	f00b ff54 	bl	800cdde <ICM20948_init>

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f36:	210c      	movs	r1, #12
 8000f38:	486e      	ldr	r0, [pc, #440]	; (80010f4 <main+0x1fc>)
 8000f3a:	f006 fc15 	bl	8007768 <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	486d      	ldr	r0, [pc, #436]	; (80010f8 <main+0x200>)
 8000f42:	f006 fc11 	bl	8007768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f46:	2104      	movs	r1, #4
 8000f48:	486b      	ldr	r0, [pc, #428]	; (80010f8 <main+0x200>)
 8000f4a:	f006 fc0d 	bl	8007768 <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f4e:	213c      	movs	r1, #60	; 0x3c
 8000f50:	486a      	ldr	r0, [pc, #424]	; (80010fc <main+0x204>)
 8000f52:	f006 ffa7 	bl	8007ea4 <HAL_TIM_Encoder_Start>

  // uart
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000f56:	4b6a      	ldr	r3, [pc, #424]	; (8001100 <main+0x208>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4969      	ldr	r1, [pc, #420]	; (8001104 <main+0x20c>)
 8000f60:	4869      	ldr	r0, [pc, #420]	; (8001108 <main+0x210>)
 8000f62:	f008 f9b8 	bl	80092d6 <HAL_UART_Receive_IT>

  // ultrasonic
  HAL_TIM_Base_Start(&htim6);
 8000f66:	4869      	ldr	r0, [pc, #420]	; (800110c <main+0x214>)
 8000f68:	f006 facc 	bl	8007504 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4868      	ldr	r0, [pc, #416]	; (8001110 <main+0x218>)
 8000f70:	f006 fd1c 	bl	80079ac <HAL_TIM_IC_Start_IT>

  // HAL_TIM_Base_Start(&htim1);

  __RESET_SERVO_TURN(&htim1);
 8000f74:	4b5f      	ldr	r3, [pc, #380]	; (80010f4 <main+0x1fc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2291      	movs	r2, #145	; 0x91
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f80:	f004 fab0 	bl	80054e4 <HAL_Delay>

  // command queue initialization
  curCmd.index = 100;
 8000f84:	4b63      	ldr	r3, [pc, #396]	; (8001114 <main+0x21c>)
 8000f86:	2264      	movs	r2, #100	; 0x64
 8000f88:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f8a:	4b62      	ldr	r3, [pc, #392]	; (8001114 <main+0x21c>)
 8000f8c:	220a      	movs	r2, #10
 8000f8e:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8000f90:	4b61      	ldr	r3, [pc, #388]	; (8001118 <main+0x220>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <main+0x220>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	; (800111c <main+0x224>)
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <main+0x220>)
 8000fa2:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	e00c      	b.n	8000fc4 <main+0xcc>
  {
    Command cmd;
    cmd.index = 100;
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000fb2:	4a59      	ldr	r2, [pc, #356]	; (8001118 <main+0x220>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b55      	ldr	r3, [pc, #340]	; (800111c <main+0x224>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	dbec      	blt.n	8000faa <main+0xb2>
  }
  PIDConfigInit(&pidTSlow, 2.1, 0.045, 0.8);
 8000fd0:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8001120 <main+0x228>
 8000fd4:	eddf 0a53 	vldr	s1, [pc, #332]	; 8001124 <main+0x22c>
 8000fd8:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001128 <main+0x230>
 8000fdc:	4853      	ldr	r0, [pc, #332]	; (800112c <main+0x234>)
 8000fde:	f001 f98f 	bl	8002300 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.1, 0.045, 0.8);
 8000fe2:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8001120 <main+0x228>
 8000fe6:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001124 <main+0x22c>
 8000fea:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001128 <main+0x230>
 8000fee:	4850      	ldr	r0, [pc, #320]	; (8001130 <main+0x238>)
 8000ff0:	f001 f986 	bl	8002300 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.1, 0.05, 0.3);
 8000ff4:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8001134 <main+0x23c>
 8000ff8:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001138 <main+0x240>
 8000ffc:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800113c <main+0x244>
 8001000:	484f      	ldr	r0, [pc, #316]	; (8001140 <main+0x248>)
 8001002:	f001 f97d 	bl	8002300 <PIDConfigInit>
  // TODO:overwrite curCmd for debugging individual task
  // curCmd.index = 1;
  // curCmd.val = 30;

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8001006:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <main+0x208>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	493d      	ldr	r1, [pc, #244]	; (8001104 <main+0x20c>)
 8001010:	483d      	ldr	r0, [pc, #244]	; (8001108 <main+0x210>)
 8001012:	f008 f960 	bl	80092d6 <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <main+0x1fc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2291      	movs	r2, #145	; 0x91
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
 800101e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001022:	f004 fa5f 	bl	80054e4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001026:	f009 f933 	bl	800a290 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 800102a:	4a46      	ldr	r2, [pc, #280]	; (8001144 <main+0x24c>)
 800102c:	2100      	movs	r1, #0
 800102e:	4846      	ldr	r0, [pc, #280]	; (8001148 <main+0x250>)
 8001030:	f009 f978 	bl	800a324 <osThreadNew>
 8001034:	4603      	mov	r3, r0
 8001036:	4a45      	ldr	r2, [pc, #276]	; (800114c <main+0x254>)
 8001038:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 800103a:	4a45      	ldr	r2, [pc, #276]	; (8001150 <main+0x258>)
 800103c:	2100      	movs	r1, #0
 800103e:	4845      	ldr	r0, [pc, #276]	; (8001154 <main+0x25c>)
 8001040:	f009 f970 	bl	800a324 <osThreadNew>
 8001044:	4603      	mov	r3, r0
 8001046:	4a44      	ldr	r2, [pc, #272]	; (8001158 <main+0x260>)
 8001048:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 800104a:	4a44      	ldr	r2, [pc, #272]	; (800115c <main+0x264>)
 800104c:	2100      	movs	r1, #0
 800104e:	4844      	ldr	r0, [pc, #272]	; (8001160 <main+0x268>)
 8001050:	f009 f968 	bl	800a324 <osThreadNew>
 8001054:	4603      	mov	r3, r0
 8001056:	4a43      	ldr	r2, [pc, #268]	; (8001164 <main+0x26c>)
 8001058:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 800105a:	4a43      	ldr	r2, [pc, #268]	; (8001168 <main+0x270>)
 800105c:	2100      	movs	r1, #0
 800105e:	4843      	ldr	r0, [pc, #268]	; (800116c <main+0x274>)
 8001060:	f009 f960 	bl	800a324 <osThreadNew>
 8001064:	4603      	mov	r3, r0
 8001066:	4a42      	ldr	r2, [pc, #264]	; (8001170 <main+0x278>)
 8001068:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 800106a:	4a42      	ldr	r2, [pc, #264]	; (8001174 <main+0x27c>)
 800106c:	2100      	movs	r1, #0
 800106e:	4842      	ldr	r0, [pc, #264]	; (8001178 <main+0x280>)
 8001070:	f009 f958 	bl	800a324 <osThreadNew>
 8001074:	4603      	mov	r3, r0
 8001076:	4a41      	ldr	r2, [pc, #260]	; (800117c <main+0x284>)
 8001078:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 800107a:	4a41      	ldr	r2, [pc, #260]	; (8001180 <main+0x288>)
 800107c:	2100      	movs	r1, #0
 800107e:	4841      	ldr	r0, [pc, #260]	; (8001184 <main+0x28c>)
 8001080:	f009 f950 	bl	800a324 <osThreadNew>
 8001084:	4603      	mov	r3, r0
 8001086:	4a40      	ldr	r2, [pc, #256]	; (8001188 <main+0x290>)
 8001088:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 800108a:	4a40      	ldr	r2, [pc, #256]	; (800118c <main+0x294>)
 800108c:	2100      	movs	r1, #0
 800108e:	4840      	ldr	r0, [pc, #256]	; (8001190 <main+0x298>)
 8001090:	f009 f948 	bl	800a324 <osThreadNew>
 8001094:	4603      	mov	r3, r0
 8001096:	4a3f      	ldr	r2, [pc, #252]	; (8001194 <main+0x29c>)
 8001098:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 800109a:	4a3f      	ldr	r2, [pc, #252]	; (8001198 <main+0x2a0>)
 800109c:	2100      	movs	r1, #0
 800109e:	483f      	ldr	r0, [pc, #252]	; (800119c <main+0x2a4>)
 80010a0:	f009 f940 	bl	800a324 <osThreadNew>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <main+0x2a8>)
 80010a8:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 80010aa:	4a3e      	ldr	r2, [pc, #248]	; (80011a4 <main+0x2ac>)
 80010ac:	2100      	movs	r1, #0
 80010ae:	483e      	ldr	r0, [pc, #248]	; (80011a8 <main+0x2b0>)
 80010b0:	f009 f938 	bl	800a324 <osThreadNew>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a3d      	ldr	r2, [pc, #244]	; (80011ac <main+0x2b4>)
 80010b8:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80010ba:	4a3d      	ldr	r2, [pc, #244]	; (80011b0 <main+0x2b8>)
 80010bc:	2100      	movs	r1, #0
 80010be:	483d      	ldr	r0, [pc, #244]	; (80011b4 <main+0x2bc>)
 80010c0:	f009 f930 	bl	800a324 <osThreadNew>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <main+0x2c0>)
 80010c8:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80010ca:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <main+0x2c4>)
 80010cc:	2100      	movs	r1, #0
 80010ce:	483c      	ldr	r0, [pc, #240]	; (80011c0 <main+0x2c8>)
 80010d0:	f009 f928 	bl	800a324 <osThreadNew>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a3b      	ldr	r2, [pc, #236]	; (80011c4 <main+0x2cc>)
 80010d8:	6013      	str	r3, [r2, #0]

  /* creation of navArdObsTask */
  navArdObsTaskHandle = osThreadNew(runNavArdObsTask, NULL, &navArdObsTask_attributes);
 80010da:	4a3b      	ldr	r2, [pc, #236]	; (80011c8 <main+0x2d0>)
 80010dc:	2100      	movs	r1, #0
 80010de:	483b      	ldr	r0, [pc, #236]	; (80011cc <main+0x2d4>)
 80010e0:	f009 f920 	bl	800a324 <osThreadNew>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a3a      	ldr	r2, [pc, #232]	; (80011d0 <main+0x2d8>)
 80010e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010ea:	f009 f8f5 	bl	800a2d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <main+0x1f6>
 80010f0:	200001bc 	.word	0x200001bc
 80010f4:	20000210 	.word	0x20000210
 80010f8:	20000330 	.word	0x20000330
 80010fc:	20000258 	.word	0x20000258
 8001100:	20000000 	.word	0x20000000
 8001104:	200003ec 	.word	0x200003ec
 8001108:	20000378 	.word	0x20000378
 800110c:	200002e8 	.word	0x200002e8
 8001110:	200002a0 	.word	0x200002a0
 8001114:	2000042c 	.word	0x2000042c
 8001118:	200003f8 	.word	0x200003f8
 800111c:	20000001 	.word	0x20000001
 8001120:	3f4ccccd 	.word	0x3f4ccccd
 8001124:	3d3851ec 	.word	0x3d3851ec
 8001128:	40066666 	.word	0x40066666
 800112c:	20000478 	.word	0x20000478
 8001130:	20000464 	.word	0x20000464
 8001134:	3e99999a 	.word	0x3e99999a
 8001138:	3d4ccccd 	.word	0x3d4ccccd
 800113c:	3f8ccccd 	.word	0x3f8ccccd
 8001140:	2000048c 	.word	0x2000048c
 8001144:	0800ddc0 	.word	0x0800ddc0
 8001148:	08003151 	.word	0x08003151
 800114c:	200003bc 	.word	0x200003bc
 8001150:	0800dde4 	.word	0x0800dde4
 8001154:	08003161 	.word	0x08003161
 8001158:	200003c0 	.word	0x200003c0
 800115c:	0800de08 	.word	0x0800de08
 8001160:	08003185 	.word	0x08003185
 8001164:	200003c4 	.word	0x200003c4
 8001168:	0800de2c 	.word	0x0800de2c
 800116c:	080033ad 	.word	0x080033ad
 8001170:	200003c8 	.word	0x200003c8
 8001174:	0800de50 	.word	0x0800de50
 8001178:	080035d5 	.word	0x080035d5
 800117c:	200003cc 	.word	0x200003cc
 8001180:	0800de74 	.word	0x0800de74
 8001184:	080039e1 	.word	0x080039e1
 8001188:	200003d0 	.word	0x200003d0
 800118c:	0800de98 	.word	0x0800de98
 8001190:	08003df9 	.word	0x08003df9
 8001194:	200003d4 	.word	0x200003d4
 8001198:	0800debc 	.word	0x0800debc
 800119c:	080041f1 	.word	0x080041f1
 80011a0:	200003d8 	.word	0x200003d8
 80011a4:	0800dee0 	.word	0x0800dee0
 80011a8:	080045fd 	.word	0x080045fd
 80011ac:	200003dc 	.word	0x200003dc
 80011b0:	0800df04 	.word	0x0800df04
 80011b4:	080046d1 	.word	0x080046d1
 80011b8:	200003e0 	.word	0x200003e0
 80011bc:	0800df28 	.word	0x0800df28
 80011c0:	08004ce5 	.word	0x08004ce5
 80011c4:	200003e4 	.word	0x200003e4
 80011c8:	0800df4c 	.word	0x0800df4c
 80011cc:	08004dd5 	.word	0x08004dd5
 80011d0:	200003e8 	.word	0x200003e8

080011d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b094      	sub	sp, #80	; 0x50
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2230      	movs	r2, #48	; 0x30
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00c f908 	bl	800d3f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <SystemClock_Config+0xb4>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <SystemClock_Config+0xb4>)
 8001202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <SystemClock_Config+0xb4>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <SystemClock_Config+0xb8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <SystemClock_Config+0xb8>)
 800121e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <SystemClock_Config+0xb8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001238:	2310      	movs	r3, #16
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4618      	mov	r0, r3
 8001246:	f005 fc83 	bl	8006b50 <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001250:	f003 fdda 	bl	8004e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001254:	230f      	movs	r3, #15
 8001256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fee6 	bl	8007040 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800127a:	f003 fdc5 	bl	8004e08 <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	; 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C1_Init+0x50>)
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <MX_I2C1_Init+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_I2C1_Init+0x50>)
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x58>)
 800129e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ce:	f004 fc57 	bl	8005b80 <HAL_I2C_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d8:	f003 fd96 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200001bc 	.word	0x200001bc
 80012e4:	40005400 	.word	0x40005400
 80012e8:	000186a0 	.word	0x000186a0

080012ec <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b096      	sub	sp, #88	; 0x58
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2220      	movs	r2, #32
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f00c f867 	bl	800d3f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <MX_TIM1_Init+0x134>)
 800132c:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <MX_TIM1_Init+0x138>)
 800132e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001330:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <MX_TIM1_Init+0x134>)
 8001332:	22a0      	movs	r2, #160	; 0xa0
 8001334:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <MX_TIM1_Init+0x134>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800133c:	4b38      	ldr	r3, [pc, #224]	; (8001420 <MX_TIM1_Init+0x134>)
 800133e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001342:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <MX_TIM1_Init+0x134>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800134a:	4b35      	ldr	r3, [pc, #212]	; (8001420 <MX_TIM1_Init+0x134>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001350:	4b33      	ldr	r3, [pc, #204]	; (8001420 <MX_TIM1_Init+0x134>)
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001356:	4832      	ldr	r0, [pc, #200]	; (8001420 <MX_TIM1_Init+0x134>)
 8001358:	f006 f884 	bl	8007464 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001362:	f003 fd51 	bl	8004e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001370:	4619      	mov	r1, r3
 8001372:	482b      	ldr	r0, [pc, #172]	; (8001420 <MX_TIM1_Init+0x134>)
 8001374:	f007 f88a 	bl	800848c <HAL_TIM_ConfigClockSource>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800137e:	f003 fd43 	bl	8004e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001382:	4827      	ldr	r0, [pc, #156]	; (8001420 <MX_TIM1_Init+0x134>)
 8001384:	f006 f996 	bl	80076b4 <HAL_TIM_PWM_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800138e:	f003 fd3b 	bl	8004e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800139a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800139e:	4619      	mov	r1, r3
 80013a0:	481f      	ldr	r0, [pc, #124]	; (8001420 <MX_TIM1_Init+0x134>)
 80013a2:	f007 fdd7 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013ac:	f003 fd2c 	bl	8004e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b0:	2360      	movs	r3, #96	; 0x60
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	220c      	movs	r2, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	4813      	ldr	r0, [pc, #76]	; (8001420 <MX_TIM1_Init+0x134>)
 80013d2:	f006 ff99 	bl	8008308 <HAL_TIM_PWM_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80013dc:	f003 fd14 	bl	8004e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_TIM1_Init+0x134>)
 8001404:	f007 fe22 	bl	800904c <HAL_TIMEx_ConfigBreakDeadTime>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800140e:	f003 fcfb 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_TIM1_Init+0x134>)
 8001414:	f003 fe92 	bl	800513c <HAL_TIM_MspPostInit>
}
 8001418:	bf00      	nop
 800141a:	3758      	adds	r7, #88	; 0x58
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000210 	.word	0x20000210
 8001424:	40010000 	.word	0x40010000

08001428 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f00b ffde 	bl	800d3f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_TIM2_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_TIM2_Init+0xa4>)
 800145a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800146c:	2303      	movs	r3, #3
 800146e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800147c:	230a      	movs	r3, #10
 800147e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001484:	2301      	movs	r3, #1
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800148c:	230a      	movs	r3, #10
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001498:	f006 fc5e 	bl	8007d58 <HAL_TIM_Encoder_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014a2:	f003 fcb1 	bl	8004e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_TIM2_Init+0xa4>)
 80014b4:	f007 fd4e 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014be:	f003 fca3 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 80014c2:	bf00      	nop
 80014c4:	3730      	adds	r7, #48	; 0x30
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000258 	.word	0x20000258

080014d0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_TIM3_Init+0xd8>)
 80014fc:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <MX_TIM3_Init+0xdc>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001502:	220f      	movs	r2, #15
 8001504:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001512:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001520:	4821      	ldr	r0, [pc, #132]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001522:	f005 ff9f 	bl	8007464 <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800152c:	f003 fc6c 	bl	8004e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001534:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001536:	f107 0318 	add.w	r3, r7, #24
 800153a:	4619      	mov	r1, r3
 800153c:	481a      	ldr	r0, [pc, #104]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800153e:	f006 ffa5 	bl	800848c <HAL_TIM_ConfigClockSource>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001548:	f003 fc5e 	bl	8004e08 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800154c:	4816      	ldr	r0, [pc, #88]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800154e:	f006 f9d3 	bl	80078f8 <HAL_TIM_IC_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001558:	f003 fc56 	bl	8004e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	480f      	ldr	r0, [pc, #60]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800156c:	f007 fcf2 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001576:	f003 fc47 	bl	8004e08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800157a:	230a      	movs	r3, #10
 800157c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800157e:	2301      	movs	r3, #1
 8001580:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	2204      	movs	r2, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001592:	f006 fe1d 	bl	80081d0 <HAL_TIM_IC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800159c:	f003 fc34 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002a0 	.word	0x200002a0
 80015ac:	40000400 	.word	0x40000400

080015b0 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_TIM6_Init+0x68>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c6:	220f      	movs	r2, #15
 80015c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_TIM6_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_TIM6_Init+0x64>)
 80015d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM6_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_TIM6_Init+0x64>)
 80015e0:	f005 ff40 	bl	8007464 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015ea:	f003 fc0d 	bl	8004e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_TIM6_Init+0x64>)
 80015fc:	f007 fcaa 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001606:	f003 fbff 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002e8 	.word	0x200002e8
 8001618:	40001000 	.word	0x40001000

0800161c <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b096      	sub	sp, #88	; 0x58
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2220      	movs	r2, #32
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f00b fecf 	bl	800d3f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <MX_TIM8_Init+0x14c>)
 800165c:	4a43      	ldr	r2, [pc, #268]	; (800176c <MX_TIM8_Init+0x150>)
 800165e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <MX_TIM8_Init+0x14c>)
 800166e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001672:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <MX_TIM8_Init+0x14c>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001686:	4838      	ldr	r0, [pc, #224]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001688:	f005 feec 	bl	8007464 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001692:	f003 fbb9 	bl	8004e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016a0:	4619      	mov	r1, r3
 80016a2:	4831      	ldr	r0, [pc, #196]	; (8001768 <MX_TIM8_Init+0x14c>)
 80016a4:	f006 fef2 	bl	800848c <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016ae:	f003 fbab 	bl	8004e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016b2:	482d      	ldr	r0, [pc, #180]	; (8001768 <MX_TIM8_Init+0x14c>)
 80016b4:	f005 fffe 	bl	80076b4 <HAL_TIM_PWM_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016be:	f003 fba3 	bl	8004e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016ce:	4619      	mov	r1, r3
 80016d0:	4825      	ldr	r0, [pc, #148]	; (8001768 <MX_TIM8_Init+0x14c>)
 80016d2:	f007 fc3f 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016dc:	f003 fb94 	bl	8004e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e0:	2360      	movs	r3, #96	; 0x60
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	4818      	ldr	r0, [pc, #96]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001706:	f006 fdff 	bl	8008308 <HAL_TIM_PWM_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001710:	f003 fb7a 	bl	8004e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	2204      	movs	r2, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4812      	ldr	r0, [pc, #72]	; (8001768 <MX_TIM8_Init+0x14c>)
 800171e:	f006 fdf3 	bl	8008308 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001728:	f003 fb6e 	bl	8004e08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001750:	f007 fc7c 	bl	800904c <HAL_TIMEx_ConfigBreakDeadTime>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800175a:	f003 fb55 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 800175e:	bf00      	nop
 8001760:	3758      	adds	r7, #88	; 0x58
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000330 	.word	0x20000330
 800176c:	40010400 	.word	0x40010400

08001770 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_USART3_UART_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a8:	f007 fcb6 	bl	8009118 <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017b2:	f003 fb29 	bl	8004e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000378 	.word	0x20000378
 80017c0:	40004800 	.word	0x40004800

080017c4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <MX_GPIO_Init+0xfc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a37      	ldr	r2, [pc, #220]	; (80018c0 <MX_GPIO_Init+0xfc>)
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <MX_GPIO_Init+0xfc>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <MX_GPIO_Init+0xfc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <MX_GPIO_Init+0xfc>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <MX_GPIO_Init+0x100>)
 8001852:	f004 f97b 	bl	8005b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	213c      	movs	r1, #60	; 0x3c
 800185a:	481b      	ldr	r0, [pc, #108]	; (80018c8 <MX_GPIO_Init+0x104>)
 800185c:	f004 f976 	bl	8005b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin US_Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin;
 8001860:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4812      	ldr	r0, [pc, #72]	; (80018c4 <MX_GPIO_Init+0x100>)
 800187a:	f003 ffcb 	bl	8005814 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 800187e:	230c      	movs	r3, #12
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188a:	2302      	movs	r3, #2
 800188c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <MX_GPIO_Init+0x104>)
 8001896:	f003 ffbd 	bl	8005814 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 800189a:	2330      	movs	r3, #48	; 0x30
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_GPIO_Init+0x104>)
 80018b2:	f003 ffaf 	bl	8005814 <HAL_GPIO_Init>
}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40020000 	.word	0x40020000
 80018cc:	00000000 	.word	0x00000000

080018d0 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t US_diff = 0;
uint8_t Is_First_Captured = 0; // is the first value captured ?

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // if the interrupt source is channel2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7f1b      	ldrb	r3, [r3, #28]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	f040 808c 	bne.w	80019fa <HAL_TIM_IC_CaptureCallback+0x12a>
  {
    if (Is_First_Captured == 0) // if the first value is not captured
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x140>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11a      	bne.n	8001920 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 80018ea:	2104      	movs	r1, #4
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f006 fe95 	bl	800861c <HAL_TIM_ReadCapturedValue>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a47      	ldr	r2, [pc, #284]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 80018f6:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;                                    // set the first captured as true
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x140>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
      // Now change the polarity to falling edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800190c:	621a      	str	r2, [r3, #32]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	621a      	str	r2, [r3, #32]
      // set polarity to rising edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
    }
  }
}
 800191e:	e06c      	b.n	80019fa <HAL_TIM_IC_CaptureCallback+0x12a>
    else if (Is_First_Captured == 1) // if the first is already captured
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d168      	bne.n	80019fa <HAL_TIM_IC_CaptureCallback+0x12a>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001928:	2104      	movs	r1, #4
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f006 fe76 	bl	800861c <HAL_TIM_ReadCapturedValue>
 8001930:	4603      	mov	r3, r0
 8001932:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001934:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);                           // reset the counter
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
      if (IC_Val2 > IC_Val1)
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d90c      	bls.n	8001964 <HAL_TIM_IC_CaptureCallback+0x94>
        obsDist_US = IC_Val2 - IC_Val1;
 800194a:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800195e:	edc3 7a00 	vstr	s15, [r3]
 8001962:	e014      	b.n	800198e <HAL_TIM_IC_CaptureCallback+0xbe>
      else if (IC_Val1 > IC_Val2)
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d90e      	bls.n	800198e <HAL_TIM_IC_CaptureCallback+0xbe>
        obsDist_US = (0xffff - IC_Val1) + IC_Val2;
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800197e:	33ff      	adds	r3, #255	; 0xff
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800198a:	edc3 7a00 	vstr	s15, [r3]
      obsDist_US = obsDist_US * .034 / 2;
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdd0 	bl	8000538 <__aeabi_f2d>
 8001998:	a31b      	add	r3, pc, #108	; (adr r3, 8001a08 <HAL_TIM_IC_CaptureCallback+0x138>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe23 	bl	80005e8 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b2:	f7fe ff43 	bl	800083c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f8cd 	bl	8000b5c <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80019c6:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 0; // set it back to false
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x140>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a1a      	ldr	r2, [r3, #32]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019dc:	621a      	str	r2, [r3, #32]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a12      	ldr	r2, [r2, #32]
 80019e8:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x150>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x150>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0204 	bic.w	r2, r2, #4
 80019f8:	60da      	str	r2, [r3, #12]
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	b020c49c 	.word	0xb020c49c
 8001a0c:	3fa16872 	.word	0x3fa16872
 8001a10:	200004ac 	.word	0x200004ac
 8001a14:	200004a4 	.word	0x200004a4
 8001a18:	200004a8 	.word	0x200004a8
 8001a1c:	200004a0 	.word	0x200004a0
 8001a20:	200002a0 	.word	0x200002a0

08001a24 <HAL_UART_RxCpltCallback>:
int targetD = 5;
uint8_t tempDir = 1;
int8_t step = 0;
uint8_t turnMode = 2;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  // TODO: add delimeter at end of command
  //  prevent unused argument(s) compilation warning
  UNUSED(huart);
  int val;

  val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001a2c:	4b94      	ldr	r3, [pc, #592]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a2e:	789b      	ldrb	r3, [r3, #2]
 8001a30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b90      	ldr	r3, [pc, #576]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	3b30      	subs	r3, #48	; 0x30
 8001a44:	4413      	add	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
  if (aRxBuffer[4] >= '0' && aRxBuffer[4] <= '9')
 8001a48:	4b8d      	ldr	r3, [pc, #564]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a4a:	791b      	ldrb	r3, [r3, #4]
 8001a4c:	2b2f      	cmp	r3, #47	; 0x2f
 8001a4e:	d90e      	bls.n	8001a6e <HAL_UART_RxCpltCallback+0x4a>
 8001a50:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	2b39      	cmp	r3, #57	; 0x39
 8001a56:	d80a      	bhi.n	8001a6e <HAL_UART_RxCpltCallback+0x4a>
    // val += (aRxBuffer[4] - 48) * 100;
    val = val * 10 + (aRxBuffer[4] - 48);
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b86      	ldr	r3, [pc, #536]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	3b30      	subs	r3, #48	; 0x30
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]

  manualMode = 0;
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_UART_RxCpltCallback+0x260>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

  if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T')
 8001a74:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b53      	cmp	r3, #83	; 0x53
 8001a7a:	d159      	bne.n	8001b30 <HAL_UART_RxCpltCallback+0x10c>
 8001a7c:	4b80      	ldr	r3, [pc, #512]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2b54      	cmp	r3, #84	; 0x54
 8001a82:	d155      	bne.n	8001b30 <HAL_UART_RxCpltCallback+0x10c>
  { // only STOP can preempt any greedy task
    //		__ADD_COMMAND(cQueue, 0, 0); // stop
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001a84:	4b80      	ldr	r3, [pc, #512]	; (8001c88 <HAL_UART_RxCpltCallback+0x264>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a8c:	4b7e      	ldr	r3, [pc, #504]	; (8001c88 <HAL_UART_RxCpltCallback+0x264>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
 8001a94:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <HAL_UART_RxCpltCallback+0x268>)
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <HAL_UART_RxCpltCallback+0x26c>)
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_UART_RxCpltCallback+0x268>)
 8001a9e:	220b      	movs	r2, #11
 8001aa0:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001aa2:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <HAL_UART_RxCpltCallback+0x270>)
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001aaa:	4b7b      	ldr	r3, [pc, #492]	; (8001c98 <HAL_UART_RxCpltCallback+0x274>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 8001ab0:	487a      	ldr	r0, [pc, #488]	; (8001c9c <HAL_UART_RxCpltCallback+0x278>)
 8001ab2:	f000 fc46 	bl	8002342 <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001ab6:	487a      	ldr	r0, [pc, #488]	; (8001ca0 <HAL_UART_RxCpltCallback+0x27c>)
 8001ab8:	f000 fc43 	bl	8002342 <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001abc:	4879      	ldr	r0, [pc, #484]	; (8001ca4 <HAL_UART_RxCpltCallback+0x280>)
 8001abe:	f000 fc40 	bl	8002342 <PIDConfigReset>
    curDistTick = 0;
 8001ac2:	4b79      	ldr	r3, [pc, #484]	; (8001ca8 <HAL_UART_RxCpltCallback+0x284>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001ac8:	4b78      	ldr	r3, [pc, #480]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b77      	ldr	r3, [pc, #476]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d112      	bne.n	8001afa <HAL_UART_RxCpltCallback+0xd6>
    {
      __CLEAR_CURCMD(curCmd);
 8001ad4:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001ad6:	2264      	movs	r2, #100	; 0x64
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	4b75      	ldr	r3, [pc, #468]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001ae0:	4a74      	ldr	r2, [pc, #464]	; (8001cb4 <HAL_UART_RxCpltCallback+0x290>)
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	4874      	ldr	r0, [pc, #464]	; (8001cb8 <HAL_UART_RxCpltCallback+0x294>)
 8001ae6:	f00b fc53 	bl	800d390 <sniprintf>
 8001aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aee:	2206      	movs	r2, #6
 8001af0:	4972      	ldr	r1, [pc, #456]	; (8001cbc <HAL_UART_RxCpltCallback+0x298>)
 8001af2:	4873      	ldr	r0, [pc, #460]	; (8001cc0 <HAL_UART_RxCpltCallback+0x29c>)
 8001af4:	f007 fb5d 	bl	80091b2 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001af8:	e3c5      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001afa:	4b6c      	ldr	r3, [pc, #432]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001b00:	496a      	ldr	r1, [pc, #424]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a66      	ldr	r2, [pc, #408]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b12:	7892      	ldrb	r2, [r2, #2]
 8001b14:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b18:	fb01 f202 	mul.w	r2, r1, r2
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b62      	ldr	r3, [pc, #392]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b22:	705a      	strb	r2, [r3, #1]
 8001b24:	4a67      	ldr	r2, [pc, #412]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001b26:	210f      	movs	r1, #15
 8001b28:	4863      	ldr	r0, [pc, #396]	; (8001cb8 <HAL_UART_RxCpltCallback+0x294>)
 8001b2a:	f00b fc31 	bl	800d390 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001b2e:	e3aa      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
    }
  }
  else if (aRxBuffer[0] == 'R' && aRxBuffer[1] == 'S')
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b52      	cmp	r3, #82	; 0x52
 8001b36:	d161      	bne.n	8001bfc <HAL_UART_RxCpltCallback+0x1d8>
 8001b38:	4b51      	ldr	r3, [pc, #324]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001b3a:	785b      	ldrb	r3, [r3, #1]
 8001b3c:	2b53      	cmp	r3, #83	; 0x53
 8001b3e:	d15d      	bne.n	8001bfc <HAL_UART_RxCpltCallback+0x1d8>
  {
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001b40:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <HAL_UART_RxCpltCallback+0x264>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
 8001b48:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <HAL_UART_RxCpltCallback+0x264>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b50:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <HAL_UART_RxCpltCallback+0x268>)
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	4b4e      	ldr	r3, [pc, #312]	; (8001c90 <HAL_UART_RxCpltCallback+0x26c>)
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_UART_RxCpltCallback+0x268>)
 8001b5a:	220b      	movs	r2, #11
 8001b5c:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <HAL_UART_RxCpltCallback+0x270>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001b66:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_UART_RxCpltCallback+0x274>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	801a      	strh	r2, [r3, #0]
    __RESET_SERVO_TURN(&htim1);
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2291      	movs	r2, #145	; 0x91
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
 8001b74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b78:	f003 fcb4 	bl	80054e4 <HAL_Delay>
    PIDConfigReset(&pidTSlow);
 8001b7c:	4847      	ldr	r0, [pc, #284]	; (8001c9c <HAL_UART_RxCpltCallback+0x278>)
 8001b7e:	f000 fbe0 	bl	8002342 <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001b82:	4847      	ldr	r0, [pc, #284]	; (8001ca0 <HAL_UART_RxCpltCallback+0x27c>)
 8001b84:	f000 fbdd 	bl	8002342 <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001b88:	4846      	ldr	r0, [pc, #280]	; (8001ca4 <HAL_UART_RxCpltCallback+0x280>)
 8001b8a:	f000 fbda 	bl	8002342 <PIDConfigReset>
    curDistTick = 0;
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_UART_RxCpltCallback+0x284>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d112      	bne.n	8001bc6 <HAL_UART_RxCpltCallback+0x1a2>
    {
      __CLEAR_CURCMD(curCmd);
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001ba2:	2264      	movs	r2, #100	; 0x64
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001bac:	4a41      	ldr	r2, [pc, #260]	; (8001cb4 <HAL_UART_RxCpltCallback+0x290>)
 8001bae:	210f      	movs	r1, #15
 8001bb0:	4841      	ldr	r0, [pc, #260]	; (8001cb8 <HAL_UART_RxCpltCallback+0x294>)
 8001bb2:	f00b fbed 	bl	800d390 <sniprintf>
 8001bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bba:	2206      	movs	r2, #6
 8001bbc:	493f      	ldr	r1, [pc, #252]	; (8001cbc <HAL_UART_RxCpltCallback+0x298>)
 8001bbe:	4840      	ldr	r0, [pc, #256]	; (8001cc0 <HAL_UART_RxCpltCallback+0x29c>)
 8001bc0:	f007 faf7 	bl	80091b2 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001bc4:	e35f      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	4a39      	ldr	r2, [pc, #228]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001bcc:	4937      	ldr	r1, [pc, #220]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bd8:	785b      	ldrb	r3, [r3, #1]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a33      	ldr	r2, [pc, #204]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bde:	7892      	ldrb	r2, [r2, #2]
 8001be0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001be4:	fb01 f202 	mul.w	r2, r1, r2
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bee:	705a      	strb	r2, [r3, #1]
 8001bf0:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	4830      	ldr	r0, [pc, #192]	; (8001cb8 <HAL_UART_RxCpltCallback+0x294>)
 8001bf6:	f00b fbcb 	bl	800d390 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001bfa:	e344      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
    }
  }
  else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b46      	cmp	r3, #70	; 0x46
 8001c02:	d165      	bne.n	8001cd0 <HAL_UART_RxCpltCallback+0x2ac>
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	2b57      	cmp	r3, #87	; 0x57
 8001c0a:	d003      	beq.n	8001c14 <HAL_UART_RxCpltCallback+0x1f0>
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	2b53      	cmp	r3, #83	; 0x53
 8001c12:	d15d      	bne.n	8001cd0 <HAL_UART_RxCpltCallback+0x2ac>
  { // FW or FS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c16:	789b      	ldrb	r3, [r3, #2]
 8001c18:	2b2d      	cmp	r3, #45	; 0x2d
 8001c1a:	d105      	bne.n	8001c28 <HAL_UART_RxCpltCallback+0x204>
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c1e:	78db      	ldrb	r3, [r3, #3]
 8001c20:	2b2d      	cmp	r3, #45	; 0x2d
 8001c22:	d101      	bne.n	8001c28 <HAL_UART_RxCpltCallback+0x204>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x206>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_UART_RxCpltCallback+0x260>)
 8001c2e:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	2b53      	cmp	r3, #83	; 0x53
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_UART_RxCpltCallback+0x2a8>)
 8001c42:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 1, val);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2201      	movs	r2, #1
 8001c50:	711a      	strb	r2, [r3, #4]
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	b291      	uxth	r1, r2
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	460a      	mov	r2, r1
 8001c62:	80da      	strh	r2, [r3, #6]
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c6c:	7892      	ldrb	r2, [r2, #2]
 8001c6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c72:	fb01 f202 	mul.w	r2, r1, r2
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e302      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
 8001c80:	200003ec 	.word	0x200003ec
 8001c84:	20000440 	.word	0x20000440
 8001c88:	20000330 	.word	0x20000330
 8001c8c:	20000134 	.word	0x20000134
 8001c90:	20000135 	.word	0x20000135
 8001c94:	20000448 	.word	0x20000448
 8001c98:	2000044e 	.word	0x2000044e
 8001c9c:	20000478 	.word	0x20000478
 8001ca0:	20000464 	.word	0x20000464
 8001ca4:	2000048c 	.word	0x2000048c
 8001ca8:	2000045c 	.word	0x2000045c
 8001cac:	200003f8 	.word	0x200003f8
 8001cb0:	2000042c 	.word	0x2000042c
 8001cb4:	0800dd90 	.word	0x0800dd90
 8001cb8:	20000430 	.word	0x20000430
 8001cbc:	0800dd98 	.word	0x0800dd98
 8001cc0:	20000378 	.word	0x20000378
 8001cc4:	0800dda0 	.word	0x0800dda0
 8001cc8:	20000210 	.word	0x20000210
 8001ccc:	20000136 	.word	0x20000136
  }
  else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001cd0:	4b96      	ldr	r3, [pc, #600]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b42      	cmp	r3, #66	; 0x42
 8001cd6:	d13d      	bne.n	8001d54 <HAL_UART_RxCpltCallback+0x330>
 8001cd8:	4b94      	ldr	r3, [pc, #592]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	2b57      	cmp	r3, #87	; 0x57
 8001cde:	d003      	beq.n	8001ce8 <HAL_UART_RxCpltCallback+0x2c4>
 8001ce0:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ce2:	785b      	ldrb	r3, [r3, #1]
 8001ce4:	2b53      	cmp	r3, #83	; 0x53
 8001ce6:	d135      	bne.n	8001d54 <HAL_UART_RxCpltCallback+0x330>
  { // BW or BS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ce8:	4b90      	ldr	r3, [pc, #576]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001cea:	789b      	ldrb	r3, [r3, #2]
 8001cec:	2b2d      	cmp	r3, #45	; 0x2d
 8001cee:	d105      	bne.n	8001cfc <HAL_UART_RxCpltCallback+0x2d8>
 8001cf0:	4b8e      	ldr	r3, [pc, #568]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001cf2:	78db      	ldrb	r3, [r3, #3]
 8001cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8001cf6:	d101      	bne.n	8001cfc <HAL_UART_RxCpltCallback+0x2d8>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_UART_RxCpltCallback+0x2da>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001d02:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001d04:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	2b53      	cmp	r3, #83	; 0x53
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <HAL_UART_RxCpltCallback+0x510>)
 8001d16:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 2, val);
 8001d18:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4a86      	ldr	r2, [pc, #536]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	2202      	movs	r2, #2
 8001d24:	711a      	strb	r2, [r3, #4]
 8001d26:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	b291      	uxth	r1, r2
 8001d2e:	4a82      	ldr	r2, [pc, #520]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	460a      	mov	r2, r1
 8001d36:	80da      	strh	r2, [r3, #6]
 8001d38:	4b7f      	ldr	r3, [pc, #508]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	4a7e      	ldr	r2, [pc, #504]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d40:	7892      	ldrb	r2, [r2, #2]
 8001d42:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d46:	fb01 f202 	mul.w	r2, r1, r2
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b7a      	ldr	r3, [pc, #488]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e298      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  }

  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L')
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b46      	cmp	r3, #70	; 0x46
 8001d5a:	d136      	bne.n	8001dca <HAL_UART_RxCpltCallback+0x3a6>
 8001d5c:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	2b4c      	cmp	r3, #76	; 0x4c
 8001d62:	d132      	bne.n	8001dca <HAL_UART_RxCpltCallback+0x3a6>
  { // FL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001d64:	4b71      	ldr	r3, [pc, #452]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d66:	789b      	ldrb	r3, [r3, #2]
 8001d68:	2b2d      	cmp	r3, #45	; 0x2d
 8001d6a:	d105      	bne.n	8001d78 <HAL_UART_RxCpltCallback+0x354>
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d6e:	78db      	ldrb	r3, [r3, #3]
 8001d70:	2b2d      	cmp	r3, #45	; 0x2d
 8001d72:	d101      	bne.n	8001d78 <HAL_UART_RxCpltCallback+0x354>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_UART_RxCpltCallback+0x356>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001d7e:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x368>
 8001d88:	2103      	movs	r1, #3
 8001d8a:	e000      	b.n	8001d8e <HAL_UART_RxCpltCallback+0x36a>
 8001d8c:	2107      	movs	r1, #7
 8001d8e:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4a69      	ldr	r2, [pc, #420]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	460a      	mov	r2, r1
 8001d9a:	711a      	strb	r2, [r3, #4]
 8001d9c:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	b291      	uxth	r1, r2
 8001da4:	4a64      	ldr	r2, [pc, #400]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	460a      	mov	r2, r1
 8001dac:	80da      	strh	r2, [r3, #6]
 8001dae:	4b62      	ldr	r3, [pc, #392]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a60      	ldr	r2, [pc, #384]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001db6:	7892      	ldrb	r2, [r2, #2]
 8001db8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dbc:	fb01 f202 	mul.w	r2, r1, r2
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e25d      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  }
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R')
 8001dca:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b46      	cmp	r3, #70	; 0x46
 8001dd0:	d136      	bne.n	8001e40 <HAL_UART_RxCpltCallback+0x41c>
 8001dd2:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001dd4:	785b      	ldrb	r3, [r3, #1]
 8001dd6:	2b52      	cmp	r3, #82	; 0x52
 8001dd8:	d132      	bne.n	8001e40 <HAL_UART_RxCpltCallback+0x41c>
  { // FR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001dda:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ddc:	789b      	ldrb	r3, [r3, #2]
 8001dde:	2b2d      	cmp	r3, #45	; 0x2d
 8001de0:	d105      	bne.n	8001dee <HAL_UART_RxCpltCallback+0x3ca>
 8001de2:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001de4:	78db      	ldrb	r3, [r3, #3]
 8001de6:	2b2d      	cmp	r3, #45	; 0x2d
 8001de8:	d101      	bne.n	8001dee <HAL_UART_RxCpltCallback+0x3ca>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_UART_RxCpltCallback+0x3cc>
 8001dee:	2300      	movs	r3, #0
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001df4:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001df6:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_RxCpltCallback+0x3de>
 8001dfe:	2104      	movs	r1, #4
 8001e00:	e000      	b.n	8001e04 <HAL_UART_RxCpltCallback+0x3e0>
 8001e02:	2108      	movs	r1, #8
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	460a      	mov	r2, r1
 8001e10:	711a      	strb	r2, [r3, #4]
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	b291      	uxth	r1, r2
 8001e1a:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	460a      	mov	r2, r1
 8001e22:	80da      	strh	r2, [r3, #6]
 8001e24:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e2c:	7892      	ldrb	r2, [r2, #2]
 8001e2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e32:	fb01 f202 	mul.w	r2, r1, r2
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e222      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L')
 8001e40:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b42      	cmp	r3, #66	; 0x42
 8001e46:	d136      	bne.n	8001eb6 <HAL_UART_RxCpltCallback+0x492>
 8001e48:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	2b4c      	cmp	r3, #76	; 0x4c
 8001e4e:	d132      	bne.n	8001eb6 <HAL_UART_RxCpltCallback+0x492>
  { // BL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001e52:	789b      	ldrb	r3, [r3, #2]
 8001e54:	2b2d      	cmp	r3, #45	; 0x2d
 8001e56:	d105      	bne.n	8001e64 <HAL_UART_RxCpltCallback+0x440>
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001e5a:	78db      	ldrb	r3, [r3, #3]
 8001e5c:	2b2d      	cmp	r3, #45	; 0x2d
 8001e5e:	d101      	bne.n	8001e64 <HAL_UART_RxCpltCallback+0x440>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x442>
 8001e64:	2300      	movs	r3, #0
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001e6a:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8001e6c:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_UART_RxCpltCallback+0x454>
 8001e74:	2105      	movs	r1, #5
 8001e76:	e000      	b.n	8001e7a <HAL_UART_RxCpltCallback+0x456>
 8001e78:	2109      	movs	r1, #9
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	460a      	mov	r2, r1
 8001e86:	711a      	strb	r2, [r3, #4]
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b291      	uxth	r1, r2
 8001e90:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	460a      	mov	r2, r1
 8001e98:	80da      	strh	r2, [r3, #6]
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001ea2:	7892      	ldrb	r2, [r2, #2]
 8001ea4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ea8:	fb01 f202 	mul.w	r2, r1, r2
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e1e7      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R')
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b42      	cmp	r3, #66	; 0x42
 8001ebc:	d13e      	bne.n	8001f3c <HAL_UART_RxCpltCallback+0x518>
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	2b52      	cmp	r3, #82	; 0x52
 8001ec4:	d13a      	bne.n	8001f3c <HAL_UART_RxCpltCallback+0x518>
  { // BR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ec8:	789b      	ldrb	r3, [r3, #2]
 8001eca:	2b2d      	cmp	r3, #45	; 0x2d
 8001ecc:	d105      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x4b6>
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ed0:	78db      	ldrb	r3, [r3, #3]
 8001ed2:	2b2d      	cmp	r3, #45	; 0x2d
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x4b6>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_UART_RxCpltCallback+0x4b8>
 8001eda:	2300      	movs	r3, #0
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001ee0:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_UART_RxCpltCallback+0x4ca>
 8001eea:	2106      	movs	r1, #6
 8001eec:	e000      	b.n	8001ef0 <HAL_UART_RxCpltCallback+0x4cc>
 8001eee:	210a      	movs	r1, #10
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	460a      	mov	r2, r1
 8001efc:	711a      	strb	r2, [r3, #4]
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	b291      	uxth	r1, r2
 8001f06:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	80da      	strh	r2, [r3, #6]
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f18:	7892      	ldrb	r2, [r2, #2]
 8001f1a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f1e:	fb01 f202 	mul.w	r2, r1, r2
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e1ac      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
 8001f2c:	200003ec 	.word	0x200003ec
 8001f30:	20000440 	.word	0x20000440
 8001f34:	20000136 	.word	0x20000136
 8001f38:	200003f8 	.word	0x200003f8
  }
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L')
 8001f3c:	4b97      	ldr	r3, [pc, #604]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b54      	cmp	r3, #84	; 0x54
 8001f42:	d121      	bne.n	8001f88 <HAL_UART_RxCpltCallback+0x564>
 8001f44:	4b95      	ldr	r3, [pc, #596]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8001f46:	785b      	ldrb	r3, [r3, #1]
 8001f48:	2b4c      	cmp	r3, #76	; 0x4c
 8001f4a:	d11d      	bne.n	8001f88 <HAL_UART_RxCpltCallback+0x564>
    __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 8001f4c:	4b94      	ldr	r3, [pc, #592]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4a93      	ldr	r2, [pc, #588]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	220b      	movs	r2, #11
 8001f58:	711a      	strb	r2, [r3, #4]
 8001f5a:	4b91      	ldr	r3, [pc, #580]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	b291      	uxth	r1, r2
 8001f62:	4a8f      	ldr	r2, [pc, #572]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	460a      	mov	r2, r1
 8001f6a:	80da      	strh	r2, [r3, #6]
 8001f6c:	4b8c      	ldr	r3, [pc, #560]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	4a8b      	ldr	r2, [pc, #556]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001f74:	7892      	ldrb	r2, [r2, #2]
 8001f76:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f7a:	fb01 f202 	mul.w	r2, r1, r2
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b87      	ldr	r3, [pc, #540]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e17e      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R')
 8001f88:	4b84      	ldr	r3, [pc, #528]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b54      	cmp	r3, #84	; 0x54
 8001f8e:	d121      	bne.n	8001fd4 <HAL_UART_RxCpltCallback+0x5b0>
 8001f90:	4b82      	ldr	r3, [pc, #520]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	2b52      	cmp	r3, #82	; 0x52
 8001f96:	d11d      	bne.n	8001fd4 <HAL_UART_RxCpltCallback+0x5b0>
    __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 8001f98:	4b81      	ldr	r3, [pc, #516]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4a80      	ldr	r2, [pc, #512]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	711a      	strb	r2, [r3, #4]
 8001fa6:	4b7e      	ldr	r3, [pc, #504]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	b291      	uxth	r1, r2
 8001fae:	4a7c      	ldr	r2, [pc, #496]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	80da      	strh	r2, [r3, #6]
 8001fb8:	4b79      	ldr	r3, [pc, #484]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4a78      	ldr	r2, [pc, #480]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001fc0:	7892      	ldrb	r2, [r2, #2]
 8001fc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fc6:	fb01 f202 	mul.w	r2, r1, r2
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b74      	ldr	r3, [pc, #464]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e158      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R')
 8001fd4:	4b71      	ldr	r3, [pc, #452]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b49      	cmp	r3, #73	; 0x49
 8001fda:	d121      	bne.n	8002020 <HAL_UART_RxCpltCallback+0x5fc>
 8001fdc:	4b6f      	ldr	r3, [pc, #444]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	2b52      	cmp	r3, #82	; 0x52
 8001fe2:	d11d      	bne.n	8002020 <HAL_UART_RxCpltCallback+0x5fc>
    __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 8001fe4:	4b6e      	ldr	r3, [pc, #440]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4a6d      	ldr	r2, [pc, #436]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	220d      	movs	r2, #13
 8001ff0:	711a      	strb	r2, [r3, #4]
 8001ff2:	4b6b      	ldr	r3, [pc, #428]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	b291      	uxth	r1, r2
 8001ffa:	4a69      	ldr	r2, [pc, #420]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	460a      	mov	r2, r1
 8002002:	80da      	strh	r2, [r3, #6]
 8002004:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 800200c:	7892      	ldrb	r2, [r2, #2]
 800200e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002012:	fb01 f202 	mul.w	r2, r1, r2
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e132      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T')
 8002020:	4b5e      	ldr	r3, [pc, #376]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b44      	cmp	r3, #68	; 0x44
 8002026:	d121      	bne.n	800206c <HAL_UART_RxCpltCallback+0x648>
 8002028:	4b5c      	ldr	r3, [pc, #368]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b54      	cmp	r3, #84	; 0x54
 800202e:	d11d      	bne.n	800206c <HAL_UART_RxCpltCallback+0x648>
    __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 8002030:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4a5a      	ldr	r2, [pc, #360]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	220e      	movs	r2, #14
 800203c:	711a      	strb	r2, [r3, #4]
 800203e:	4b58      	ldr	r3, [pc, #352]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	b291      	uxth	r1, r2
 8002046:	4a56      	ldr	r2, [pc, #344]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	460a      	mov	r2, r1
 800204e:	80da      	strh	r2, [r3, #6]
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002058:	7892      	ldrb	r2, [r2, #2]
 800205a:	fb93 f1f2 	sdiv	r1, r3, r2
 800205e:	fb01 f202 	mul.w	r2, r1, r2
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e10c      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z')
 800206c:	4b4b      	ldr	r3, [pc, #300]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b5a      	cmp	r3, #90	; 0x5a
 8002072:	d121      	bne.n	80020b8 <HAL_UART_RxCpltCallback+0x694>
 8002074:	4b49      	ldr	r3, [pc, #292]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8002076:	785b      	ldrb	r3, [r3, #1]
 8002078:	2b5a      	cmp	r3, #90	; 0x5a
 800207a:	d11d      	bne.n	80020b8 <HAL_UART_RxCpltCallback+0x694>
    __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
 800207c:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4a47      	ldr	r2, [pc, #284]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	220f      	movs	r2, #15
 8002088:	711a      	strb	r2, [r3, #4]
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	b291      	uxth	r1, r2
 8002092:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	460a      	mov	r2, r1
 800209a:	80da      	strh	r2, [r3, #6]
 800209c:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	4a3f      	ldr	r2, [pc, #252]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 80020a4:	7892      	ldrb	r2, [r2, #2]
 80020a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80020aa:	fb01 f202 	mul.w	r2, r1, r2
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e0e6      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X')
 80020b8:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b57      	cmp	r3, #87	; 0x57
 80020be:	d121      	bne.n	8002104 <HAL_UART_RxCpltCallback+0x6e0>
 80020c0:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 80020c2:	785b      	ldrb	r3, [r3, #1]
 80020c4:	2b58      	cmp	r3, #88	; 0x58
 80020c6:	d11d      	bne.n	8002104 <HAL_UART_RxCpltCallback+0x6e0>
    __ADD_COMMAND(cQueue, 16, val); // WN fastest path
 80020c8:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	2210      	movs	r2, #16
 80020d4:	711a      	strb	r2, [r3, #4]
 80020d6:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	b291      	uxth	r1, r2
 80020de:	4a30      	ldr	r2, [pc, #192]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	460a      	mov	r2, r1
 80020e6:	80da      	strh	r2, [r3, #6]
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	4a2c      	ldr	r2, [pc, #176]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 80020f0:	7892      	ldrb	r2, [r2, #2]
 80020f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80020f6:	fb01 f202 	mul.w	r2, r1, r2
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e0c0      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N')
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b57      	cmp	r3, #87	; 0x57
 800210a:	d121      	bne.n	8002150 <HAL_UART_RxCpltCallback+0x72c>
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b4e      	cmp	r3, #78	; 0x4e
 8002112:	d11d      	bne.n	8002150 <HAL_UART_RxCpltCallback+0x72c>
    __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	2211      	movs	r2, #17
 8002120:	711a      	strb	r2, [r3, #4]
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	b291      	uxth	r1, r2
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	460a      	mov	r2, r1
 8002132:	80da      	strh	r2, [r3, #6]
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 800213c:	7892      	ldrb	r2, [r2, #2]
 800213e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002142:	fb01 f202 	mul.w	r2, r1, r2
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e09a      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'A')
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b46      	cmp	r3, #70	; 0x46
 8002156:	d125      	bne.n	80021a4 <HAL_UART_RxCpltCallback+0x780>
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_UART_RxCpltCallback+0x778>)
 800215a:	785b      	ldrb	r3, [r3, #1]
 800215c:	2b41      	cmp	r3, #65	; 0x41
 800215e:	d121      	bne.n	80021a4 <HAL_UART_RxCpltCallback+0x780>
    __ADD_COMMAND(cQueue, 88, val); // forward anti-clockwise rotation with variable
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	2258      	movs	r2, #88	; 0x58
 800216c:	711a      	strb	r2, [r3, #4]
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	b291      	uxth	r1, r2
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	460a      	mov	r2, r1
 800217e:	80da      	strh	r2, [r3, #6]
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3301      	adds	r3, #1
 8002186:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002188:	7892      	ldrb	r2, [r2, #2]
 800218a:	fb93 f1f2 	sdiv	r1, r3, r2
 800218e:	fb01 f202 	mul.w	r2, r1, r2
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <HAL_UART_RxCpltCallback+0x77c>)
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	e074      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
 800219c:	200003ec 	.word	0x200003ec
 80021a0:	200003f8 	.word	0x200003f8
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'C')
 80021a4:	4b4f      	ldr	r3, [pc, #316]	; (80022e4 <HAL_UART_RxCpltCallback+0x8c0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b46      	cmp	r3, #70	; 0x46
 80021aa:	d121      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0x7cc>
 80021ac:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <HAL_UART_RxCpltCallback+0x8c0>)
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	2b43      	cmp	r3, #67	; 0x43
 80021b2:	d11d      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0x7cc>
    __ADD_COMMAND(cQueue, 89, val); // forward clockwise rotation with variable
 80021b4:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	2259      	movs	r2, #89	; 0x59
 80021c0:	711a      	strb	r2, [r3, #4]
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	b291      	uxth	r1, r2
 80021ca:	4a47      	ldr	r2, [pc, #284]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	460a      	mov	r2, r1
 80021d2:	80da      	strh	r2, [r3, #6]
 80021d4:	4b44      	ldr	r3, [pc, #272]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3301      	adds	r3, #1
 80021da:	4a43      	ldr	r2, [pc, #268]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80021dc:	7892      	ldrb	r2, [r2, #2]
 80021de:	fb93 f1f2 	sdiv	r1, r3, r2
 80021e2:	fb01 f202 	mul.w	r2, r1, r2
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e04a      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'A')
 80021f0:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <HAL_UART_RxCpltCallback+0x8c0>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b42      	cmp	r3, #66	; 0x42
 80021f6:	d121      	bne.n	800223c <HAL_UART_RxCpltCallback+0x818>
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_UART_RxCpltCallback+0x8c0>)
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	2b41      	cmp	r3, #65	; 0x41
 80021fe:	d11d      	bne.n	800223c <HAL_UART_RxCpltCallback+0x818>
    __ADD_COMMAND(cQueue, 90, val); // backward anti-clockwise rotation with variable
 8002200:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4a38      	ldr	r2, [pc, #224]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	225a      	movs	r2, #90	; 0x5a
 800220c:	711a      	strb	r2, [r3, #4]
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	b291      	uxth	r1, r2
 8002216:	4a34      	ldr	r2, [pc, #208]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	460a      	mov	r2, r1
 800221e:	80da      	strh	r2, [r3, #6]
 8002220:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	4a30      	ldr	r2, [pc, #192]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002228:	7892      	ldrb	r2, [r2, #2]
 800222a:	fb93 f1f2 	sdiv	r1, r3, r2
 800222e:	fb01 f202 	mul.w	r2, r1, r2
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e024      	b.n	8002286 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'C')
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <HAL_UART_RxCpltCallback+0x8c0>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b42      	cmp	r3, #66	; 0x42
 8002242:	d120      	bne.n	8002286 <HAL_UART_RxCpltCallback+0x862>
 8002244:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <HAL_UART_RxCpltCallback+0x8c0>)
 8002246:	785b      	ldrb	r3, [r3, #1]
 8002248:	2b43      	cmp	r3, #67	; 0x43
 800224a:	d11c      	bne.n	8002286 <HAL_UART_RxCpltCallback+0x862>
    __ADD_COMMAND(cQueue, 91, val); // backward clockwise rotation with variable
 800224c:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	225b      	movs	r2, #91	; 0x5b
 8002258:	711a      	strb	r2, [r3, #4]
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	b291      	uxth	r1, r2
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	460a      	mov	r2, r1
 800226a:	80da      	strh	r2, [r3, #6]
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002274:	7892      	ldrb	r2, [r2, #2]
 8002276:	fb93 f1f2 	sdiv	r1, r3, r2
 800227a:	fb01 f202 	mul.w	r2, r1, r2
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002284:	701a      	strb	r2, [r3, #0]

  if (!__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002288:	781a      	ldrb	r2, [r3, #0]
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	429a      	cmp	r2, r3
 8002290:	d019      	beq.n	80022c6 <HAL_UART_RxCpltCallback+0x8a2>
  {
    __READ_COMMAND(cQueue, curCmd, rxMsg);
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_UART_RxCpltCallback+0x8c8>)
 8002298:	4913      	ldr	r1, [pc, #76]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80022a4:	785b      	ldrb	r3, [r3, #1]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80022aa:	7892      	ldrb	r2, [r2, #2]
 80022ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80022b0:	fb01 f202 	mul.w	r2, r1, r2
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_UART_RxCpltCallback+0x8c4>)
 80022ba:	705a      	strb	r2, [r3, #1]
 80022bc:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <HAL_UART_RxCpltCallback+0x8cc>)
 80022be:	210f      	movs	r1, #15
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <HAL_UART_RxCpltCallback+0x8d0>)
 80022c2:	f00b f865 	bl	800d390 <sniprintf>
  }

  // clear aRx buffer
  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <HAL_UART_RxCpltCallback+0x8d4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_UART_RxCpltCallback+0x8d8>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <HAL_UART_RxCpltCallback+0x8c0>)
 80022d6:	4808      	ldr	r0, [pc, #32]	; (80022f8 <HAL_UART_RxCpltCallback+0x8d4>)
 80022d8:	f006 fffd 	bl	80092d6 <HAL_UART_Receive_IT>
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200003ec 	.word	0x200003ec
 80022e8:	200003f8 	.word	0x200003f8
 80022ec:	2000042c 	.word	0x2000042c
 80022f0:	0800dda0 	.word	0x0800dda0
 80022f4:	20000430 	.word	0x20000430
 80022f8:	20000378 	.word	0x20000378
 80022fc:	20000000 	.word	0x20000000

08002300 <PIDConfigInit>:

// pid
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	ed87 0a02 	vstr	s0, [r7, #8]
 800230c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002310:	ed87 1a00 	vstr	s2, [r7]
  cfg->Kp = Kp;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	601a      	str	r2, [r3, #0]
  cfg->Ki = Ki;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	605a      	str	r2, [r3, #4]
  cfg->Kd = Kd;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	609a      	str	r2, [r3, #8]
  cfg->ek1 = 0;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <PIDConfigReset>:

void PIDConfigReset(PIDConfig *cfg)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HCSR04_Read>:

void HCSR04_Read(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET);
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002372:	481a      	ldr	r0, [pc, #104]	; (80023dc <HCSR04_Read+0x74>)
 8002374:	f003 fbea 	bl	8005b4c <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HCSR04_Read+0x78>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HCSR04_Read+0x78>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	2b31      	cmp	r3, #49	; 0x31
 8002388:	d9fa      	bls.n	8002380 <HCSR04_Read+0x18>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 800238a:	2201      	movs	r2, #1
 800238c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002390:	4812      	ldr	r0, [pc, #72]	; (80023dc <HCSR04_Read+0x74>)
 8002392:	f003 fbdb 	bl	8005b4c <HAL_GPIO_WritePin>
  __delay_us(&htim6, 10);                                            // wait for 10 us
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HCSR04_Read+0x78>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2200      	movs	r2, #0
 800239c:	625a      	str	r2, [r3, #36]	; 0x24
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HCSR04_Read+0x78>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d9fa      	bls.n	800239e <HCSR04_Read+0x36>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
 80023a8:	2200      	movs	r2, #0
 80023aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ae:	480b      	ldr	r0, [pc, #44]	; (80023dc <HCSR04_Read+0x74>)
 80023b0:	f003 fbcc 	bl	8005b4c <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HCSR04_Read+0x78>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HCSR04_Read+0x78>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b31      	cmp	r3, #49	; 0x31
 80023c4:	d9fa      	bls.n	80023bc <HCSR04_Read+0x54>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <HCSR04_Read+0x7c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HCSR04_Read+0x7c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0204 	orr.w	r2, r2, #4
 80023d4:	60da      	str	r2, [r3, #12]
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	200002e8 	.word	0x200002e8
 80023e4:	200002a0 	.word	0x200002a0

080023e8 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;

void StraightLineMove(const uint8_t speedMode)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af04      	add	r7, sp, #16
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]

  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 80023f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f6:	9302      	str	r3, [sp, #8]
 80023f8:	2302      	movs	r3, #2
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	4ba9      	ldr	r3, [pc, #676]	; (80026a4 <StraightLineMove+0x2bc>)
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2301      	movs	r3, #1
 8002402:	2237      	movs	r2, #55	; 0x37
 8002404:	21d0      	movs	r1, #208	; 0xd0
 8002406:	48a8      	ldr	r0, [pc, #672]	; (80026a8 <StraightLineMove+0x2c0>)
 8002408:	f003 fdf8 	bl	8005ffc <HAL_I2C_Mem_Read>
 800240c:	4ba5      	ldr	r3, [pc, #660]	; (80026a4 <StraightLineMove+0x2bc>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	b21a      	sxth	r2, r3
 8002414:	4ba3      	ldr	r3, [pc, #652]	; (80026a4 <StraightLineMove+0x2bc>)
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b21a      	sxth	r2, r3
 800241e:	4ba3      	ldr	r3, [pc, #652]	; (80026ac <StraightLineMove+0x2c4>)
 8002420:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8002422:	4ba3      	ldr	r3, [pc, #652]	; (80026b0 <StraightLineMove+0x2c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b10      	cmp	r3, #16
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	b25a      	sxtb	r2, r3
 8002438:	4b9e      	ldr	r3, [pc, #632]	; (80026b4 <StraightLineMove+0x2cc>)
 800243a:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 800243c:	4b9b      	ldr	r3, [pc, #620]	; (80026ac <StraightLineMove+0x2c4>)
 800243e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002442:	f113 0f04 	cmn.w	r3, #4
 8002446:	db04      	blt.n	8002452 <StraightLineMove+0x6a>
 8002448:	4b98      	ldr	r3, [pc, #608]	; (80026ac <StraightLineMove+0x2c4>)
 800244a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244e:	2b0b      	cmp	r3, #11
 8002450:	dd07      	ble.n	8002462 <StraightLineMove+0x7a>
 8002452:	4b96      	ldr	r3, [pc, #600]	; (80026ac <StraightLineMove+0x2c4>)
 8002454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002460:	e001      	b.n	8002466 <StraightLineMove+0x7e>
 8002462:	eddf 7a95 	vldr	s15, [pc, #596]	; 80026b8 <StraightLineMove+0x2d0>
 8002466:	4b95      	ldr	r3, [pc, #596]	; (80026bc <StraightLineMove+0x2d4>)
 8002468:	ed93 7a00 	vldr	s14, [r3]
 800246c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002470:	4b92      	ldr	r3, [pc, #584]	; (80026bc <StraightLineMove+0x2d4>)
 8002472:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d164      	bne.n	8002546 <StraightLineMove+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 800247c:	4b90      	ldr	r3, [pc, #576]	; (80026c0 <StraightLineMove+0x2d8>)
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	4b8e      	ldr	r3, [pc, #568]	; (80026bc <StraightLineMove+0x2d4>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248c:	4b8c      	ldr	r3, [pc, #560]	; (80026c0 <StraightLineMove+0x2d8>)
 800248e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002492:	4b8b      	ldr	r3, [pc, #556]	; (80026c0 <StraightLineMove+0x2d8>)
 8002494:	edd3 7a04 	vldr	s15, [r3, #16]
 8002498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800249c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a0:	4b87      	ldr	r3, [pc, #540]	; (80026c0 <StraightLineMove+0x2d8>)
 80024a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80024a6:	4b86      	ldr	r3, [pc, #536]	; (80026c0 <StraightLineMove+0x2d8>)
 80024a8:	ed93 6a03 	vldr	s12, [r3, #12]
 80024ac:	4b83      	ldr	r3, [pc, #524]	; (80026bc <StraightLineMove+0x2d4>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c2:	ee17 2a90 	vmov	r2, s15
 80024c6:	4b7f      	ldr	r3, [pc, #508]	; (80026c4 <StraightLineMove+0x2dc>)
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	4b7c      	ldr	r3, [pc, #496]	; (80026bc <StraightLineMove+0x2d4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7c      	ldr	r2, [pc, #496]	; (80026c0 <StraightLineMove+0x2d8>)
 80024d0:	60d3      	str	r3, [r2, #12]
 80024d2:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <StraightLineMove+0x2d8>)
 80024d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80024d8:	4b78      	ldr	r3, [pc, #480]	; (80026bc <StraightLineMove+0x2d4>)
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e2:	4b77      	ldr	r3, [pc, #476]	; (80026c0 <StraightLineMove+0x2d8>)
 80024e4:	edc3 7a04 	vstr	s15, [r3, #16]
 80024e8:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <StraightLineMove+0x2dc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80024f0:	dc06      	bgt.n	8002500 <StraightLineMove+0x118>
 80024f2:	4b74      	ldr	r3, [pc, #464]	; (80026c4 <StraightLineMove+0x2dc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a74      	ldr	r2, [pc, #464]	; (80026c8 <StraightLineMove+0x2e0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	bfb8      	it	lt
 80024fc:	4613      	movlt	r3, r2
 80024fe:	e001      	b.n	8002504 <StraightLineMove+0x11c>
 8002500:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002504:	4a6f      	ldr	r2, [pc, #444]	; (80026c4 <StraightLineMove+0x2dc>)
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <StraightLineMove+0x2cc>)
 800250a:	f993 3000 	ldrsb.w	r3, [r3]
 800250e:	b29a      	uxth	r2, r3
 8002510:	4b6c      	ldr	r3, [pc, #432]	; (80026c4 <StraightLineMove+0x2dc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b29b      	uxth	r3, r3
 8002516:	fb12 f303 	smulbb	r3, r2, r3
 800251a:	b29b      	uxth	r3, r3
 800251c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002520:	b29a      	uxth	r2, r3
 8002522:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <StraightLineMove+0x2e4>)
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <StraightLineMove+0x2cc>)
 8002528:	f993 3000 	ldrsb.w	r3, [r3]
 800252c:	b29a      	uxth	r2, r3
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <StraightLineMove+0x2dc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	fb12 f303 	smulbb	r3, r2, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <StraightLineMove+0x2e8>)
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e0ef      	b.n	8002726 <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_2)
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d165      	bne.n	8002618 <StraightLineMove+0x230>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 800254c:	4b61      	ldr	r3, [pc, #388]	; (80026d4 <StraightLineMove+0x2ec>)
 800254e:	ed93 7a00 	vldr	s14, [r3]
 8002552:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <StraightLineMove+0x2d4>)
 8002554:	edd3 7a00 	vldr	s15, [r3]
 8002558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800255c:	4b5d      	ldr	r3, [pc, #372]	; (80026d4 <StraightLineMove+0x2ec>)
 800255e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002562:	4b5c      	ldr	r3, [pc, #368]	; (80026d4 <StraightLineMove+0x2ec>)
 8002564:	edd3 7a04 	vldr	s15, [r3, #16]
 8002568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002570:	4b58      	ldr	r3, [pc, #352]	; (80026d4 <StraightLineMove+0x2ec>)
 8002572:	edd3 6a02 	vldr	s13, [r3, #8]
 8002576:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <StraightLineMove+0x2ec>)
 8002578:	ed93 6a03 	vldr	s12, [r3, #12]
 800257c:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <StraightLineMove+0x2d4>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800258a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002592:	ee17 2a90 	vmov	r2, s15
 8002596:	4b4b      	ldr	r3, [pc, #300]	; (80026c4 <StraightLineMove+0x2dc>)
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	4b48      	ldr	r3, [pc, #288]	; (80026bc <StraightLineMove+0x2d4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <StraightLineMove+0x2ec>)
 80025a0:	60d3      	str	r3, [r2, #12]
 80025a2:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <StraightLineMove+0x2ec>)
 80025a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80025a8:	4b44      	ldr	r3, [pc, #272]	; (80026bc <StraightLineMove+0x2d4>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b2:	4b48      	ldr	r3, [pc, #288]	; (80026d4 <StraightLineMove+0x2ec>)
 80025b4:	edc3 7a04 	vstr	s15, [r3, #16]
 80025b8:	4b42      	ldr	r3, [pc, #264]	; (80026c4 <StraightLineMove+0x2dc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80025c0:	dc06      	bgt.n	80025d0 <StraightLineMove+0x1e8>
 80025c2:	4b40      	ldr	r3, [pc, #256]	; (80026c4 <StraightLineMove+0x2dc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a44      	ldr	r2, [pc, #272]	; (80026d8 <StraightLineMove+0x2f0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	bfb8      	it	lt
 80025cc:	4613      	movlt	r3, r2
 80025ce:	e001      	b.n	80025d4 <StraightLineMove+0x1ec>
 80025d0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80025d4:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <StraightLineMove+0x2dc>)
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <StraightLineMove+0x2cc>)
 80025da:	f993 3000 	ldrsb.w	r3, [r3]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <StraightLineMove+0x2dc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	fb12 f303 	smulbb	r3, r2, r3
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <StraightLineMove+0x2e4>)
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <StraightLineMove+0x2cc>)
 80025f8:	f993 3000 	ldrsb.w	r3, [r3]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <StraightLineMove+0x2dc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	fb12 f303 	smulbb	r3, r2, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 800260e:	3308      	adds	r3, #8
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <StraightLineMove+0x2e8>)
 8002614:	801a      	strh	r2, [r3, #0]
 8002616:	e086      	b.n	8002726 <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_1)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	2b01      	cmp	r3, #1
 800261c:	f040 8083 	bne.w	8002726 <StraightLineMove+0x33e>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002620:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <StraightLineMove+0x2f4>)
 8002622:	ed93 7a00 	vldr	s14, [r3]
 8002626:	4b25      	ldr	r3, [pc, #148]	; (80026bc <StraightLineMove+0x2d4>)
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <StraightLineMove+0x2f4>)
 8002632:	edd3 6a01 	vldr	s13, [r3, #4]
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <StraightLineMove+0x2f4>)
 8002638:	edd3 7a04 	vldr	s15, [r3, #16]
 800263c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <StraightLineMove+0x2f4>)
 8002646:	edd3 6a02 	vldr	s13, [r3, #8]
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <StraightLineMove+0x2f4>)
 800264c:	ed93 6a03 	vldr	s12, [r3, #12]
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <StraightLineMove+0x2d4>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ee76 7a67 	vsub.f32	s15, s12, s15
 800265a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800265e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	ee17 2a90 	vmov	r2, s15
 800266a:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <StraightLineMove+0x2dc>)
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <StraightLineMove+0x2d4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <StraightLineMove+0x2f4>)
 8002674:	60d3      	str	r3, [r2, #12]
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <StraightLineMove+0x2f4>)
 8002678:	ed93 7a04 	vldr	s14, [r3, #16]
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <StraightLineMove+0x2d4>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <StraightLineMove+0x2f4>)
 8002688:	edc3 7a04 	vstr	s15, [r3, #16]
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <StraightLineMove+0x2dc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002694:	dc24      	bgt.n	80026e0 <StraightLineMove+0x2f8>
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <StraightLineMove+0x2dc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a0f      	ldr	r2, [pc, #60]	; (80026d8 <StraightLineMove+0x2f0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	bfb8      	it	lt
 80026a0:	4613      	movlt	r3, r2
 80026a2:	e01f      	b.n	80026e4 <StraightLineMove+0x2fc>
 80026a4:	2000044c 	.word	0x2000044c
 80026a8:	200001bc 	.word	0x200001bc
 80026ac:	2000044e 	.word	0x2000044e
 80026b0:	20000258 	.word	0x20000258
 80026b4:	2000013c 	.word	0x2000013c
 80026b8:	00000000 	.word	0x00000000
 80026bc:	20000448 	.word	0x20000448
 80026c0:	20000478 	.word	0x20000478
 80026c4:	200004b4 	.word	0x200004b4
 80026c8:	fffffda8 	.word	0xfffffda8
 80026cc:	20000450 	.word	0x20000450
 80026d0:	20000452 	.word	0x20000452
 80026d4:	2000048c 	.word	0x2000048c
 80026d8:	fffffd44 	.word	0xfffffd44
 80026dc:	20000464 	.word	0x20000464
 80026e0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80026e4:	4a17      	ldr	r2, [pc, #92]	; (8002744 <StraightLineMove+0x35c>)
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <StraightLineMove+0x360>)
 80026ea:	f993 3000 	ldrsb.w	r3, [r3]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <StraightLineMove+0x35c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	fb12 f303 	smulbb	r3, r2, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002700:	b29a      	uxth	r2, r3
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <StraightLineMove+0x364>)
 8002704:	801a      	strh	r2, [r3, #0]
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <StraightLineMove+0x360>)
 8002708:	f993 3000 	ldrsb.w	r3, [r3]
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <StraightLineMove+0x35c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	fb12 f303 	smulbb	r3, r2, r3
 8002718:	b29b      	uxth	r3, r3
 800271a:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 800271e:	330c      	adds	r3, #12
 8002720:	b29a      	uxth	r2, r3
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <StraightLineMove+0x368>)
 8002724:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <StraightLineMove+0x364>)
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <StraightLineMove+0x36c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	635a      	str	r2, [r3, #52]	; 0x34
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <StraightLineMove+0x368>)
 8002732:	881a      	ldrh	r2, [r3, #0]
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <StraightLineMove+0x36c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200004b4 	.word	0x200004b4
 8002748:	2000013c 	.word	0x2000013c
 800274c:	20000450 	.word	0x20000450
 8002750:	20000452 	.word	0x20000452
 8002754:	20000330 	.word	0x20000330

08002758 <RobotMoveDist>:

void RobotMoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
 8002764:	4613      	mov	r3, r2
 8002766:	70bb      	strb	r3, [r7, #2]
  angleNow = 0;
 8002768:	4ba3      	ldr	r3, [pc, #652]	; (80029f8 <RobotMoveDist+0x2a0>)
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
  gyroZ = 0; // reset angle for PID
 8002770:	4ba2      	ldr	r3, [pc, #648]	; (80029fc <RobotMoveDist+0x2a4>)
 8002772:	2200      	movs	r2, #0
 8002774:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 8002776:	48a2      	ldr	r0, [pc, #648]	; (8002a00 <RobotMoveDist+0x2a8>)
 8002778:	f7ff fde3 	bl	8002342 <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 800277c:	48a1      	ldr	r0, [pc, #644]	; (8002a04 <RobotMoveDist+0x2ac>)
 800277e:	f7ff fde0 	bl	8002342 <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8002782:	48a1      	ldr	r0, [pc, #644]	; (8002a08 <RobotMoveDist+0x2b0>)
 8002784:	f7ff fddd 	bl	8002342 <PIDConfigReset>
  curDistTick = 0;
 8002788:	4ba0      	ldr	r3, [pc, #640]	; (8002a0c <RobotMoveDist+0x2b4>)
 800278a:	2200      	movs	r2, #0
 800278c:	801a      	strh	r2, [r3, #0]
  dist_dL = 0;
 800278e:	4ba0      	ldr	r3, [pc, #640]	; (8002a10 <RobotMoveDist+0x2b8>)
 8002790:	2200      	movs	r2, #0
 8002792:	801a      	strh	r2, [r3, #0]
  curDistTick = 0;
 8002794:	4b9d      	ldr	r3, [pc, #628]	; (8002a0c <RobotMoveDist+0x2b4>)
 8002796:	2200      	movs	r2, #0
 8002798:	801a      	strh	r2, [r3, #0]

  // char distBuf[70];

  __GET_TARGETTICK(*targetDist, targetDistTick);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd feca 	bl	8000538 <__aeabi_f2d>
 80027a4:	a38e      	add	r3, pc, #568	; (adr r3, 80029e0 <RobotMoveDist+0x288>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fd ff1d 	bl	80005e8 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	a38c      	add	r3, pc, #560	; (adr r3, 80029e8 <RobotMoveDist+0x290>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fd fd5c 	bl	8000278 <__aeabi_dsub>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	4b91      	ldr	r3, [pc, #580]	; (8002a14 <RobotMoveDist+0x2bc>)
 80027ce:	f7fe f835 	bl	800083c <__aeabi_ddiv>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b8e      	ldr	r3, [pc, #568]	; (8002a18 <RobotMoveDist+0x2c0>)
 80027e0:	f7fd ff02 	bl	80005e8 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	4b8a      	ldr	r3, [pc, #552]	; (8002a1c <RobotMoveDist+0x2c4>)
 80027f2:	f7fd fd41 	bl	8000278 <__aeabi_dsub>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7fe f98d 	bl	8000b1c <__aeabi_d2uiz>
 8002802:	4603      	mov	r3, r0
 8002804:	b29a      	uxth	r2, r3
 8002806:	4b86      	ldr	r3, [pc, #536]	; (8002a20 <RobotMoveDist+0x2c8>)
 8002808:	801a      	strh	r2, [r3, #0]

  last_curTask_tick = HAL_GetTick();
 800280a:	f002 fe5f 	bl	80054cc <HAL_GetTick>
 800280e:	4603      	mov	r3, r0
 8002810:	4a84      	ldr	r2, [pc, #528]	; (8002a24 <RobotMoveDist+0x2cc>)
 8002812:	6013      	str	r3, [r2, #0]
  __SET_MOTOR_DIRECTION(dir);
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf0c      	ite	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	2300      	movne	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	2104      	movs	r1, #4
 8002824:	4880      	ldr	r0, [pc, #512]	; (8002a28 <RobotMoveDist+0x2d0>)
 8002826:	f003 f991 	bl	8005b4c <HAL_GPIO_WritePin>
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	2108      	movs	r1, #8
 800283a:	487b      	ldr	r0, [pc, #492]	; (8002a28 <RobotMoveDist+0x2d0>)
 800283c:	f003 f986 	bl	8005b4c <HAL_GPIO_WritePin>
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	2120      	movs	r1, #32
 8002850:	4875      	ldr	r0, [pc, #468]	; (8002a28 <RobotMoveDist+0x2d0>)
 8002852:	f003 f97b 	bl	8005b4c <HAL_GPIO_WritePin>
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf14      	ite	ne
 800285c:	2301      	movne	r3, #1
 800285e:	2300      	moveq	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	2110      	movs	r1, #16
 8002866:	4870      	ldr	r0, [pc, #448]	; (8002a28 <RobotMoveDist+0x2d0>)
 8002868:	f003 f970 	bl	8005b4c <HAL_GPIO_WritePin>
  __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 800286c:	4b6f      	ldr	r3, [pc, #444]	; (8002a2c <RobotMoveDist+0x2d4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b6e      	ldr	r3, [pc, #440]	; (8002a30 <RobotMoveDist+0x2d8>)
 8002876:	801a      	strh	r2, [r3, #0]
  do
  {

    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002878:	4b6c      	ldr	r3, [pc, #432]	; (8002a2c <RobotMoveDist+0x2d4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <RobotMoveDist+0x2d4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b10      	cmp	r3, #16
 800288c:	d117      	bne.n	80028be <RobotMoveDist+0x166>
 800288e:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <RobotMoveDist+0x2d8>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4293      	cmp	r3, r2
 8002898:	d806      	bhi.n	80028a8 <RobotMoveDist+0x150>
 800289a:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <RobotMoveDist+0x2d8>)
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	e007      	b.n	80028b8 <RobotMoveDist+0x160>
 80028a8:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <RobotMoveDist+0x2d8>)
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <RobotMoveDist+0x2b8>)
 80028ba:	8013      	strh	r3, [r2, #0]
 80028bc:	e016      	b.n	80028ec <RobotMoveDist+0x194>
 80028be:	4b5c      	ldr	r3, [pc, #368]	; (8002a30 <RobotMoveDist+0x2d8>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d306      	bcc.n	80028d8 <RobotMoveDist+0x180>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <RobotMoveDist+0x2d8>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	e007      	b.n	80028e8 <RobotMoveDist+0x190>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <RobotMoveDist+0x2d8>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4a49      	ldr	r2, [pc, #292]	; (8002a10 <RobotMoveDist+0x2b8>)
 80028ea:	8013      	strh	r3, [r2, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <RobotMoveDist+0x2d8>)
 80028f2:	801a      	strh	r2, [r3, #0]
    curDistTick += dist_dL;
 80028f4:	4b45      	ldr	r3, [pc, #276]	; (8002a0c <RobotMoveDist+0x2b4>)
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <RobotMoveDist+0x2b8>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	b29a      	uxth	r2, r3
 8002900:	4b42      	ldr	r3, [pc, #264]	; (8002a0c <RobotMoveDist+0x2b4>)
 8002902:	801a      	strh	r2, [r3, #0]

    // sprintf(distBuf, "curtick: %d lasttick: %d dl: %d tar: %d cur: %d \r\n", 0, lastDistTick_L, dist_dL, targetDistTick, curDistTick);

    // HAL_UART_Transmit(&huart3, distBuf, strlen(distBuf), 0xFFFF);

    if (curDistTick >= targetDistTick)
 8002904:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <RobotMoveDist+0x2b4>)
 8002906:	881a      	ldrh	r2, [r3, #0]
 8002908:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <RobotMoveDist+0x2c8>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	f080 80a6 	bcs.w	8002a5e <RobotMoveDist+0x306>
      break;

    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002912:	f002 fddb 	bl	80054cc <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <RobotMoveDist+0x2cc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b09      	cmp	r3, #9
 8002920:	d9aa      	bls.n	8002878 <RobotMoveDist+0x120>
    {
      if (speedMode == SPEED_MODE_T)
 8002922:	78bb      	ldrb	r3, [r7, #2]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <RobotMoveDist+0x1d8>
      {
        StraightLineMove(SPEED_MODE_T);
 8002928:	2000      	movs	r0, #0
 800292a:	f7ff fd5d 	bl	80023e8 <StraightLineMove>
 800292e:	e090      	b.n	8002a52 <RobotMoveDist+0x2fa>
      }
      else
      {
        speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <RobotMoveDist+0x2b4>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b3a      	ldr	r3, [pc, #232]	; (8002a20 <RobotMoveDist+0x2c8>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	bfb8      	it	lt
 8002940:	425b      	neglt	r3, r3
 8002942:	4a3c      	ldr	r2, [pc, #240]	; (8002a34 <RobotMoveDist+0x2dc>)
 8002944:	fb82 1203 	smull	r1, r2, r2, r3
 8002948:	11d2      	asrs	r2, r2, #7
 800294a:	17db      	asrs	r3, r3, #31
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002956:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <RobotMoveDist+0x2e0>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
        if (speedMode == SPEED_MODE_1)
 800295c:	78bb      	ldrb	r3, [r7, #2]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d11e      	bne.n	80029a0 <RobotMoveDist+0x248>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002962:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <RobotMoveDist+0x2e0>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800296c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002974:	dd02      	ble.n	800297c <RobotMoveDist+0x224>
 8002976:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800297a:	e00e      	b.n	800299a <RobotMoveDist+0x242>
 800297c:	4b2e      	ldr	r3, [pc, #184]	; (8002a38 <RobotMoveDist+0x2e0>)
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	d502      	bpl.n	8002996 <RobotMoveDist+0x23e>
 8002990:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002994:	e001      	b.n	800299a <RobotMoveDist+0x242>
 8002996:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <RobotMoveDist+0x2e0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a27      	ldr	r2, [pc, #156]	; (8002a38 <RobotMoveDist+0x2e0>)
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e053      	b.n	8002a48 <RobotMoveDist+0x2f0>
        else if (speedMode == SPEED_MODE_2)
 80029a0:	78bb      	ldrb	r3, [r7, #2]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d150      	bne.n	8002a48 <RobotMoveDist+0x2f0>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <RobotMoveDist+0x2e0>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b8:	dd02      	ble.n	80029c0 <RobotMoveDist+0x268>
 80029ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029be:	e041      	b.n	8002a44 <RobotMoveDist+0x2ec>
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <RobotMoveDist+0x2e0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fdb7 	bl	8000538 <__aeabi_f2d>
 80029ca:	a309      	add	r3, pc, #36	; (adr r3, 80029f0 <RobotMoveDist+0x298>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f7fe f87c 	bl	8000acc <__aeabi_dcmplt>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d032      	beq.n	8002a40 <RobotMoveDist+0x2e8>
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <RobotMoveDist+0x2e4>)
 80029dc:	e032      	b.n	8002a44 <RobotMoveDist+0x2ec>
 80029de:	bf00      	nop
 80029e0:	fc66b22a 	.word	0xfc66b22a
 80029e4:	3ff266ac 	.word	0x3ff266ac
 80029e8:	bb2526f8 	.word	0xbb2526f8
 80029ec:	3feee3d4 	.word	0x3feee3d4
 80029f0:	9999999a 	.word	0x9999999a
 80029f4:	3fd99999 	.word	0x3fd99999
 80029f8:	20000448 	.word	0x20000448
 80029fc:	2000044e 	.word	0x2000044e
 8002a00:	20000478 	.word	0x20000478
 8002a04:	20000464 	.word	0x20000464
 8002a08:	2000048c 	.word	0x2000048c
 8002a0c:	2000045c 	.word	0x2000045c
 8002a10:	20000460 	.word	0x20000460
 8002a14:	40340000 	.word	0x40340000
 8002a18:	4094a000 	.word	0x4094a000
 8002a1c:	40240000 	.word	0x40240000
 8002a20:	2000045e 	.word	0x2000045e
 8002a24:	20000454 	.word	0x20000454
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	20000258 	.word	0x20000258
 8002a30:	20000462 	.word	0x20000462
 8002a34:	21195767 	.word	0x21195767
 8002a38:	20000138 	.word	0x20000138
 8002a3c:	3ecccccd 	.word	0x3ecccccd
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <RobotMoveDist+0x320>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <RobotMoveDist+0x320>)
 8002a46:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002a48:	78bb      	ldrb	r3, [r7, #2]
 8002a4a:	490b      	ldr	r1, [pc, #44]	; (8002a78 <RobotMoveDist+0x320>)
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f819 	bl	8002a84 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8002a52:	f002 fd3b 	bl	80054cc <HAL_GetTick>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <RobotMoveDist+0x324>)
 8002a5a:	6013      	str	r3, [r2, #0]
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002a5c:	e70c      	b.n	8002878 <RobotMoveDist+0x120>
      break;
 8002a5e:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <RobotMoveDist+0x328>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2200      	movs	r2, #0
 8002a66:	635a      	str	r2, [r3, #52]	; 0x34
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <RobotMoveDist+0x328>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000138 	.word	0x20000138
 8002a7c:	20000454 	.word	0x20000454
 8002a80:	20000330 	.word	0x20000330

08002a84 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float *speedScale)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af04      	add	r7, sp, #16
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 8002a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a94:	9302      	str	r3, [sp, #8]
 8002a96:	2302      	movs	r3, #2
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	4b9b      	ldr	r3, [pc, #620]	; (8002d08 <StraightLineMoveSpeedScale+0x284>)
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	2237      	movs	r2, #55	; 0x37
 8002aa2:	21d0      	movs	r1, #208	; 0xd0
 8002aa4:	4899      	ldr	r0, [pc, #612]	; (8002d0c <StraightLineMoveSpeedScale+0x288>)
 8002aa6:	f003 faa9 	bl	8005ffc <HAL_I2C_Mem_Read>
 8002aaa:	4b97      	ldr	r3, [pc, #604]	; (8002d08 <StraightLineMoveSpeedScale+0x284>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	b21a      	sxth	r2, r3
 8002ab2:	4b95      	ldr	r3, [pc, #596]	; (8002d08 <StraightLineMoveSpeedScale+0x284>)
 8002ab4:	785b      	ldrb	r3, [r3, #1]
 8002ab6:	b21b      	sxth	r3, r3
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	b21a      	sxth	r2, r3
 8002abc:	4b94      	ldr	r3, [pc, #592]	; (8002d10 <StraightLineMoveSpeedScale+0x28c>)
 8002abe:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 8002ac0:	4b94      	ldr	r3, [pc, #592]	; (8002d14 <StraightLineMoveSpeedScale+0x290>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d101      	bne.n	8002ad2 <StraightLineMoveSpeedScale+0x4e>
 8002ace:	2201      	movs	r2, #1
 8002ad0:	e001      	b.n	8002ad6 <StraightLineMoveSpeedScale+0x52>
 8002ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ad6:	4b90      	ldr	r3, [pc, #576]	; (8002d18 <StraightLineMoveSpeedScale+0x294>)
 8002ad8:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002ada:	4b8d      	ldr	r3, [pc, #564]	; (8002d10 <StraightLineMoveSpeedScale+0x28c>)
 8002adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae0:	f113 0f04 	cmn.w	r3, #4
 8002ae4:	db04      	blt.n	8002af0 <StraightLineMoveSpeedScale+0x6c>
 8002ae6:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <StraightLineMoveSpeedScale+0x28c>)
 8002ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aec:	2b0b      	cmp	r3, #11
 8002aee:	dd07      	ble.n	8002b00 <StraightLineMoveSpeedScale+0x7c>
 8002af0:	4b87      	ldr	r3, [pc, #540]	; (8002d10 <StraightLineMoveSpeedScale+0x28c>)
 8002af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afe:	e001      	b.n	8002b04 <StraightLineMoveSpeedScale+0x80>
 8002b00:	eddf 7a86 	vldr	s15, [pc, #536]	; 8002d1c <StraightLineMoveSpeedScale+0x298>
 8002b04:	4b86      	ldr	r3, [pc, #536]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002b06:	ed93 7a00 	vldr	s14, [r3]
 8002b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b0e:	4b84      	ldr	r3, [pc, #528]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002b10:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d165      	bne.n	8002be6 <StraightLineMoveSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002b1a:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <StraightLineMoveSpeedScale+0x2a0>)
 8002b1c:	ed93 7a00 	vldr	s14, [r3]
 8002b20:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b2a:	4b7e      	ldr	r3, [pc, #504]	; (8002d24 <StraightLineMoveSpeedScale+0x2a0>)
 8002b2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b30:	4b7c      	ldr	r3, [pc, #496]	; (8002d24 <StraightLineMoveSpeedScale+0x2a0>)
 8002b32:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3e:	4b79      	ldr	r3, [pc, #484]	; (8002d24 <StraightLineMoveSpeedScale+0x2a0>)
 8002b40:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b44:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <StraightLineMoveSpeedScale+0x2a0>)
 8002b46:	ed93 6a03 	vldr	s12, [r3, #12]
 8002b4a:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b60:	ee17 2a90 	vmov	r2, s15
 8002b64:	4b70      	ldr	r3, [pc, #448]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6d      	ldr	r2, [pc, #436]	; (8002d24 <StraightLineMoveSpeedScale+0x2a0>)
 8002b6e:	60d3      	str	r3, [r2, #12]
 8002b70:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <StraightLineMoveSpeedScale+0x2a0>)
 8002b72:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <StraightLineMoveSpeedScale+0x2a0>)
 8002b82:	edc3 7a04 	vstr	s15, [r3, #16]
 8002b86:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002b8e:	dc06      	bgt.n	8002b9e <StraightLineMoveSpeedScale+0x11a>
 8002b90:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a65      	ldr	r2, [pc, #404]	; (8002d2c <StraightLineMoveSpeedScale+0x2a8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	bfb8      	it	lt
 8002b9a:	4613      	movlt	r3, r2
 8002b9c:	e001      	b.n	8002ba2 <StraightLineMoveSpeedScale+0x11e>
 8002b9e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002ba2:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <StraightLineMoveSpeedScale+0x294>)
 8002ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	fb12 f303 	smulbb	r3, r2, r3
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <StraightLineMoveSpeedScale+0x2ac>)
 8002bc2:	801a      	strh	r2, [r3, #0]
 8002bc4:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <StraightLineMoveSpeedScale+0x294>)
 8002bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b56      	ldr	r3, [pc, #344]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	fb12 f303 	smulbb	r3, r2, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002bdc:	330c      	adds	r3, #12
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <StraightLineMoveSpeedScale+0x2b0>)
 8002be2:	801a      	strh	r2, [r3, #0]
 8002be4:	e067      	b.n	8002cb6 <StraightLineMoveSpeedScale+0x232>
  else if (speedMode == SPEED_MODE_2)
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d164      	bne.n	8002cb6 <StraightLineMoveSpeedScale+0x232>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002bec:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <StraightLineMoveSpeedScale+0x2b4>)
 8002bee:	ed93 7a00 	vldr	s14, [r3]
 8002bf2:	4b4b      	ldr	r3, [pc, #300]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfc:	4b4e      	ldr	r3, [pc, #312]	; (8002d38 <StraightLineMoveSpeedScale+0x2b4>)
 8002bfe:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c02:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <StraightLineMoveSpeedScale+0x2b4>)
 8002c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c10:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <StraightLineMoveSpeedScale+0x2b4>)
 8002c12:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c16:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <StraightLineMoveSpeedScale+0x2b4>)
 8002c18:	ed93 6a03 	vldr	s12, [r3, #12]
 8002c1c:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c32:	ee17 2a90 	vmov	r2, s15
 8002c36:	4b3c      	ldr	r3, [pc, #240]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a3e      	ldr	r2, [pc, #248]	; (8002d38 <StraightLineMoveSpeedScale+0x2b4>)
 8002c40:	60d3      	str	r3, [r2, #12]
 8002c42:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <StraightLineMoveSpeedScale+0x2b4>)
 8002c44:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <StraightLineMoveSpeedScale+0x29c>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c52:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <StraightLineMoveSpeedScale+0x2b4>)
 8002c54:	edc3 7a04 	vstr	s15, [r3, #16]
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002c60:	dc06      	bgt.n	8002c70 <StraightLineMoveSpeedScale+0x1ec>
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a31      	ldr	r2, [pc, #196]	; (8002d2c <StraightLineMoveSpeedScale+0x2a8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	bfb8      	it	lt
 8002c6c:	4613      	movlt	r3, r2
 8002c6e:	e001      	b.n	8002c74 <StraightLineMoveSpeedScale+0x1f0>
 8002c70:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002c74:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <StraightLineMoveSpeedScale+0x294>)
 8002c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	fb12 f303 	smulbb	r3, r2, r3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <StraightLineMoveSpeedScale+0x2ac>)
 8002c94:	801a      	strh	r2, [r3, #0]
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <StraightLineMoveSpeedScale+0x294>)
 8002c98:	f993 3000 	ldrsb.w	r3, [r3]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <StraightLineMoveSpeedScale+0x2a4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	fb12 f303 	smulbb	r3, r2, r3
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002cae:	3308      	adds	r3, #8
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <StraightLineMoveSpeedScale+0x2b0>)
 8002cb4:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <StraightLineMoveSpeedScale+0x2ac>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <StraightLineMoveSpeedScale+0x2b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cd4:	ee17 2a90 	vmov	r2, s15
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <StraightLineMoveSpeedScale+0x2b0>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <StraightLineMoveSpeedScale+0x2b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf8:	ee17 2a90 	vmov	r2, s15
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	2000044c 	.word	0x2000044c
 8002d0c:	200001bc 	.word	0x200001bc
 8002d10:	2000044e 	.word	0x2000044e
 8002d14:	20000258 	.word	0x20000258
 8002d18:	2000013c 	.word	0x2000013c
 8002d1c:	00000000 	.word	0x00000000
 8002d20:	20000448 	.word	0x20000448
 8002d24:	20000464 	.word	0x20000464
 8002d28:	200004b4 	.word	0x200004b4
 8002d2c:	fffffd44 	.word	0xfffffd44
 8002d30:	20000450 	.word	0x20000450
 8002d34:	20000452 	.word	0x20000452
 8002d38:	2000048c 	.word	0x2000048c
 8002d3c:	20000330 	.word	0x20000330

08002d40 <RobotTurn>:

void RobotTurn(float *targetAngle)
{
 8002d40:	b5b0      	push	{r4, r5, r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af04      	add	r7, sp, #16
 8002d46:	6078      	str	r0, [r7, #4]
  angleNow = 0;
 8002d48:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <RobotTurn+0x138>)
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8002d50:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <RobotTurn+0x13c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8002d56:	f002 fbb9 	bl	80054cc <HAL_GetTick>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a48      	ldr	r2, [pc, #288]	; (8002e80 <RobotTurn+0x140>)
 8002d5e:	6013      	str	r3, [r2, #0]
  do
  {
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002d60:	f002 fbb4 	bl	80054cc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <RobotTurn+0x140>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d9f7      	bls.n	8002d60 <RobotTurn+0x20>
    { // sample gyro every 5ms
      __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8002d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d74:	9302      	str	r3, [sp, #8]
 8002d76:	2302      	movs	r3, #2
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <RobotTurn+0x144>)
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	2301      	movs	r3, #1
 8002d80:	2237      	movs	r2, #55	; 0x37
 8002d82:	21d0      	movs	r1, #208	; 0xd0
 8002d84:	4840      	ldr	r0, [pc, #256]	; (8002e88 <RobotTurn+0x148>)
 8002d86:	f003 f939 	bl	8005ffc <HAL_I2C_Mem_Read>
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <RobotTurn+0x144>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	b21a      	sxth	r2, r3
 8002d92:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <RobotTurn+0x144>)
 8002d94:	785b      	ldrb	r3, [r3, #1]
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b21a      	sxth	r2, r3
 8002d9c:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <RobotTurn+0x13c>)
 8002d9e:	801a      	strh	r2, [r3, #0]
      angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002da0:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <RobotTurn+0x138>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fbc7 	bl	8000538 <__aeabi_f2d>
 8002daa:	4604      	mov	r4, r0
 8002dac:	460d      	mov	r5, r1
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <RobotTurn+0x13c>)
 8002db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fbad 	bl	8000514 <__aeabi_i2d>
 8002dba:	a32b      	add	r3, pc, #172	; (adr r3, 8002e68 <RobotTurn+0x128>)
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f7fd fd3c 	bl	800083c <__aeabi_ddiv>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	a328      	add	r3, pc, #160	; (adr r3, 8002e70 <RobotTurn+0x130>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	f7fd fc09 	bl	80005e8 <__aeabi_dmul>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4620      	mov	r0, r4
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f7fd fa4d 	bl	800027c <__adddf3>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fd feb7 	bl	8000b5c <__aeabi_d2f>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <RobotTurn+0x138>)
 8002df2:	6013      	str	r3, [r2, #0]
      if (abs(angleNow - *targetAngle) < 0.01)
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <RobotTurn+0x138>)
 8002df6:	ed93 7a00 	vldr	s14, [r3]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e08:	ee17 3a90 	vmov	r3, s15
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0d      	blt.n	8002e2c <RobotTurn+0xec>
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <RobotTurn+0x138>)
 8002e12:	ed93 7a00 	vldr	s14, [r3]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e24:	ee17 3a90 	vmov	r3, s15
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	dd05      	ble.n	8002e38 <RobotTurn+0xf8>
        break;
      last_curTask_tick = HAL_GetTick();
 8002e2c:	f002 fb4e 	bl	80054cc <HAL_GetTick>
 8002e30:	4603      	mov	r3, r0
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <RobotTurn+0x140>)
 8002e34:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002e36:	e793      	b.n	8002d60 <RobotTurn+0x20>
        break;
 8002e38:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <RobotTurn+0x14c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <RobotTurn+0x14c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2200      	movs	r2, #0
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
  __RESET_SERVO_TURN(&htim1);
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <RobotTurn+0x150>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2291      	movs	r2, #145	; 0x91
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
 8002e52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e56:	f002 fb45 	bl	80054e4 <HAL_Delay>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bdb0      	pop	{r4, r5, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	f3af 8000 	nop.w
 8002e68:	66666666 	.word	0x66666666
 8002e6c:	40306666 	.word	0x40306666
 8002e70:	47ae147b 	.word	0x47ae147b
 8002e74:	3f847ae1 	.word	0x3f847ae1
 8002e78:	20000448 	.word	0x20000448
 8002e7c:	2000044e 	.word	0x2000044e
 8002e80:	20000454 	.word	0x20000454
 8002e84:	2000044c 	.word	0x2000044c
 8002e88:	200001bc 	.word	0x200001bc
 8002e8c:	20000330 	.word	0x20000330
 8002e90:	20000210 	.word	0x20000210
 8002e94:	00000000 	.word	0x00000000

08002e98 <RobotMoveDistObstacle>:
}

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float *targetDist, const uint8_t speedMode)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	70fb      	strb	r3, [r7, #3]
  angleNow = 0;
 8002ea4:	4b9c      	ldr	r3, [pc, #624]	; (8003118 <RobotMoveDistObstacle+0x280>)
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8002eac:	4b9b      	ldr	r3, [pc, #620]	; (800311c <RobotMoveDistObstacle+0x284>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 8002eb2:	489b      	ldr	r0, [pc, #620]	; (8003120 <RobotMoveDistObstacle+0x288>)
 8002eb4:	f7ff fa45 	bl	8002342 <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8002eb8:	489a      	ldr	r0, [pc, #616]	; (8003124 <RobotMoveDistObstacle+0x28c>)
 8002eba:	f7ff fa42 	bl	8002342 <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8002ebe:	489a      	ldr	r0, [pc, #616]	; (8003128 <RobotMoveDistObstacle+0x290>)
 8002ec0:	f7ff fa3f 	bl	8002342 <PIDConfigReset>
  obsDist_US = 1000;
 8002ec4:	4b99      	ldr	r3, [pc, #612]	; (800312c <RobotMoveDistObstacle+0x294>)
 8002ec6:	4a9a      	ldr	r2, [pc, #616]	; (8003130 <RobotMoveDistObstacle+0x298>)
 8002ec8:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002eca:	2104      	movs	r1, #4
 8002ecc:	4899      	ldr	r0, [pc, #612]	; (8003134 <RobotMoveDistObstacle+0x29c>)
 8002ece:	f004 fd6d 	bl	80079ac <HAL_TIM_IC_Start_IT>
  last_curTask_tick = HAL_GetTick();
 8002ed2:	f002 fafb 	bl	80054cc <HAL_GetTick>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4a97      	ldr	r2, [pc, #604]	; (8003138 <RobotMoveDistObstacle+0x2a0>)
 8002eda:	6013      	str	r3, [r2, #0]
    // HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
    // __delay_us(&htim6, 10);                                            // wait for 10us
    // HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
    // __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);

    HCSR04_Read();
 8002edc:	f7ff fa44 	bl	8002368 <HCSR04_Read>

    osDelay(10); // give timer interrupt chance to update obsDist_US value
 8002ee0:	200a      	movs	r0, #10
 8002ee2:	f007 fab1 	bl	800a448 <osDelay>
    if (abs(*targetDist - obsDist_US) < 0.1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	ed93 7a00 	vldr	s14, [r3]
 8002eec:	4b8f      	ldr	r3, [pc, #572]	; (800312c <RobotMoveDistObstacle+0x294>)
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002efa:	ee17 3a90 	vmov	r3, s15
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0e      	blt.n	8002f20 <RobotMoveDistObstacle+0x88>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	ed93 7a00 	vldr	s14, [r3]
 8002f08:	4b88      	ldr	r3, [pc, #544]	; (800312c <RobotMoveDistObstacle+0x294>)
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f16:	ee17 3a90 	vmov	r3, s15
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f340 80e6 	ble.w	80030ec <RobotMoveDistObstacle+0x254>
      break;
    __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	ed93 7a00 	vldr	s14, [r3]
 8002f26:	4b81      	ldr	r3, [pc, #516]	; (800312c <RobotMoveDistObstacle+0x294>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f34:	bf94      	ite	ls
 8002f36:	2301      	movls	r3, #1
 8002f38:	2300      	movhi	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f083 0301 	eor.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	2104      	movs	r1, #4
 8002f48:	487c      	ldr	r0, [pc, #496]	; (800313c <RobotMoveDistObstacle+0x2a4>)
 8002f4a:	f002 fdff 	bl	8005b4c <HAL_GPIO_WritePin>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	ed93 7a00 	vldr	s14, [r3]
 8002f54:	4b75      	ldr	r3, [pc, #468]	; (800312c <RobotMoveDistObstacle+0x294>)
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f62:	bf94      	ite	ls
 8002f64:	2301      	movls	r3, #1
 8002f66:	2300      	movhi	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2108      	movs	r1, #8
 8002f6e:	4873      	ldr	r0, [pc, #460]	; (800313c <RobotMoveDistObstacle+0x2a4>)
 8002f70:	f002 fdec 	bl	8005b4c <HAL_GPIO_WritePin>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	ed93 7a00 	vldr	s14, [r3]
 8002f7a:	4b6c      	ldr	r3, [pc, #432]	; (800312c <RobotMoveDistObstacle+0x294>)
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f88:	bf94      	ite	ls
 8002f8a:	2301      	movls	r3, #1
 8002f8c:	2300      	movhi	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f083 0301 	eor.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2120      	movs	r1, #32
 8002f9c:	4867      	ldr	r0, [pc, #412]	; (800313c <RobotMoveDistObstacle+0x2a4>)
 8002f9e:	f002 fdd5 	bl	8005b4c <HAL_GPIO_WritePin>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	ed93 7a00 	vldr	s14, [r3]
 8002fa8:	4b60      	ldr	r3, [pc, #384]	; (800312c <RobotMoveDistObstacle+0x294>)
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	485e      	ldr	r0, [pc, #376]	; (800313c <RobotMoveDistObstacle+0x2a4>)
 8002fc4:	f002 fdc2 	bl	8005b4c <HAL_GPIO_WritePin>
    if (HAL_GetTick() - last_curTask_tick >= 20)
 8002fc8:	f002 fa80 	bl	80054cc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <RobotMoveDistObstacle+0x2a0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b13      	cmp	r3, #19
 8002fd6:	d981      	bls.n	8002edc <RobotMoveDistObstacle+0x44>
    {
      //		  speedScale = 1;
      if (speedMode == SPEED_MODE_1)
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d13f      	bne.n	800305e <RobotMoveDistObstacle+0x1c6>
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8002fde:	4b53      	ldr	r3, [pc, #332]	; (800312c <RobotMoveDistObstacle+0x294>)
 8002fe0:	ed93 7a00 	vldr	s14, [r3]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ff2:	ee17 3a90 	vmov	r3, s15
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bfb8      	it	lt
 8002ffa:	425b      	neglt	r3, r3
 8002ffc:	4a50      	ldr	r2, [pc, #320]	; (8003140 <RobotMoveDistObstacle+0x2a8>)
 8002ffe:	fb82 1203 	smull	r1, r2, r2, r3
 8003002:	441a      	add	r2, r3
 8003004:	10d2      	asrs	r2, r2, #3
 8003006:	17db      	asrs	r3, r3, #31
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003012:	4b4c      	ldr	r3, [pc, #304]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 8003014:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8003018:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 800301a:	edd3 7a00 	vldr	s15, [r3]
 800301e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	dd02      	ble.n	8003032 <RobotMoveDistObstacle+0x19a>
 800302c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003030:	e00e      	b.n	8003050 <RobotMoveDistObstacle+0x1b8>
 8003032:	4b44      	ldr	r3, [pc, #272]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800303c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003044:	d502      	bpl.n	800304c <RobotMoveDistObstacle+0x1b4>
 8003046:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 800304a:	e001      	b.n	8003050 <RobotMoveDistObstacle+0x1b8>
 800304c:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 8003052:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 8003054:	493b      	ldr	r1, [pc, #236]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 8003056:	2001      	movs	r0, #1
 8003058:	f7ff fd14 	bl	8002a84 <StraightLineMoveSpeedScale>
 800305c:	e040      	b.n	80030e0 <RobotMoveDistObstacle+0x248>
      }
      else
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 800305e:	4b33      	ldr	r3, [pc, #204]	; (800312c <RobotMoveDistObstacle+0x294>)
 8003060:	ed93 7a00 	vldr	s14, [r3]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003072:	ee17 3a90 	vmov	r3, s15
 8003076:	2b00      	cmp	r3, #0
 8003078:	bfb8      	it	lt
 800307a:	425b      	neglt	r3, r3
 800307c:	4a30      	ldr	r2, [pc, #192]	; (8003140 <RobotMoveDistObstacle+0x2a8>)
 800307e:	fb82 1203 	smull	r1, r2, r2, r3
 8003082:	441a      	add	r2, r3
 8003084:	10d2      	asrs	r2, r2, #3
 8003086:	17db      	asrs	r3, r3, #31
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003092:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 8003094:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8003098:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030aa:	dd02      	ble.n	80030b2 <RobotMoveDistObstacle+0x21a>
 80030ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80030b0:	e010      	b.n	80030d4 <RobotMoveDistObstacle+0x23c>
 80030b2:	4b24      	ldr	r3, [pc, #144]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd fa3e 	bl	8000538 <__aeabi_f2d>
 80030bc:	a314      	add	r3, pc, #80	; (adr r3, 8003110 <RobotMoveDistObstacle+0x278>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f7fd fd03 	bl	8000acc <__aeabi_dcmplt>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <RobotMoveDistObstacle+0x238>
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <RobotMoveDistObstacle+0x2b0>)
 80030ce:	e001      	b.n	80030d4 <RobotMoveDistObstacle+0x23c>
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 80030d6:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 80030d8:	491a      	ldr	r1, [pc, #104]	; (8003144 <RobotMoveDistObstacle+0x2ac>)
 80030da:	2002      	movs	r0, #2
 80030dc:	f7ff fcd2 	bl	8002a84 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 80030e0:	f002 f9f4 	bl	80054cc <HAL_GetTick>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4a14      	ldr	r2, [pc, #80]	; (8003138 <RobotMoveDistObstacle+0x2a0>)
 80030e8:	6013      	str	r3, [r2, #0]
    HCSR04_Read();
 80030ea:	e6f7      	b.n	8002edc <RobotMoveDistObstacle+0x44>
      break;
 80030ec:	bf00      	nop
    }

  } while (1);

  __SET_MOTOR_DUTY(&htim8, 0, 0);
 80030ee:	4b17      	ldr	r3, [pc, #92]	; (800314c <RobotMoveDistObstacle+0x2b4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2200      	movs	r2, #0
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <RobotMoveDistObstacle+0x2b4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 80030fe:	2104      	movs	r1, #4
 8003100:	480c      	ldr	r0, [pc, #48]	; (8003134 <RobotMoveDistObstacle+0x29c>)
 8003102:	f004 fd7b 	bl	8007bfc <HAL_TIM_IC_Stop_IT>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	9999999a 	.word	0x9999999a
 8003114:	3fd99999 	.word	0x3fd99999
 8003118:	20000448 	.word	0x20000448
 800311c:	2000044e 	.word	0x2000044e
 8003120:	20000478 	.word	0x20000478
 8003124:	20000464 	.word	0x20000464
 8003128:	2000048c 	.word	0x2000048c
 800312c:	200004a0 	.word	0x200004a0
 8003130:	447a0000 	.word	0x447a0000
 8003134:	200002a0 	.word	0x200002a0
 8003138:	20000454 	.word	0x20000454
 800313c:	40020000 	.word	0x40020000
 8003140:	88888889 	.word	0x88888889
 8003144:	20000138 	.word	0x20000138
 8003148:	3ecccccd 	.word	0x3ecccccd
 800314c:	20000330 	.word	0x20000330

08003150 <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  // dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);

  // /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8003158:	2064      	movs	r0, #100	; 0x64
 800315a:	f007 f975 	bl	800a448 <osDelay>
 800315e:	e7fb      	b.n	8003158 <runEncoder+0x8>

08003160 <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    //  OLED_ShowString(0, 40, (char *)ch);

    // uart received cmd
    // __ACK_TASK_DONE(&huart3, rxMsg);
    // HAL_UART_Transmit(&huart3, aRxBuffer, RX_BUFFER_SIZE, 0xFFFF);
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 8003168:	4a05      	ldr	r2, [pc, #20]	; (8003180 <runOledTask+0x20>)
 800316a:	2128      	movs	r1, #40	; 0x28
 800316c:	2000      	movs	r0, #0
 800316e:	f00a f851 	bl	800d214 <OLED_ShowString>

    // HCSR04_Read();
    // OLED_ShowNumber(0, 0, obsDist_US, 5, 12);

    OLED_Refresh_Gram();
 8003172:	f009 fedb 	bl	800cf2c <OLED_Refresh_Gram>
    osDelay(100);
 8003176:	2064      	movs	r0, #100	; 0x64
 8003178:	f007 f966 	bl	800a448 <osDelay>
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 800317c:	e7f4      	b.n	8003168 <runOledTask+0x8>
 800317e:	bf00      	nop
 8003180:	200003ec 	.word	0x200003ec

08003184 <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFWTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_FORWARD)
 800318c:	4b71      	ldr	r3, [pc, #452]	; (8003354 <runFWTask+0x1d0>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <runFWTask+0x1a>
      osDelay(1000);
 8003194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003198:	f007 f956 	bl	800a448 <osDelay>
 800319c:	e7f6      	b.n	800318c <runFWTask+0x8>
    else
    {
      targetDist = 0;
 800319e:	4b6e      	ldr	r3, [pc, #440]	; (8003358 <runFWTask+0x1d4>)
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 80031a6:	4b6d      	ldr	r3, [pc, #436]	; (800335c <runFWTask+0x1d8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 80031ac:	4b6c      	ldr	r3, [pc, #432]	; (8003360 <runFWTask+0x1dc>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d061      	beq.n	8003278 <runFWTask+0xf4>
      {

        angleNow = 0;
 80031b4:	4b6b      	ldr	r3, [pc, #428]	; (8003364 <runFWTask+0x1e0>)
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 80031bc:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <runFWTask+0x1e4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 80031c2:	486a      	ldr	r0, [pc, #424]	; (800336c <runFWTask+0x1e8>)
 80031c4:	f7ff f8bd 	bl	8002342 <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 80031c8:	4869      	ldr	r0, [pc, #420]	; (8003370 <runFWTask+0x1ec>)
 80031ca:	f7ff f8ba 	bl	8002342 <PIDConfigReset>
        PIDConfigReset(&pidFast);
 80031ce:	4869      	ldr	r0, [pc, #420]	; (8003374 <runFWTask+0x1f0>)
 80031d0:	f7ff f8b7 	bl	8002342 <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2104      	movs	r1, #4
 80031d8:	4867      	ldr	r0, [pc, #412]	; (8003378 <runFWTask+0x1f4>)
 80031da:	f002 fcb7 	bl	8005b4c <HAL_GPIO_WritePin>
 80031de:	2201      	movs	r2, #1
 80031e0:	2108      	movs	r1, #8
 80031e2:	4865      	ldr	r0, [pc, #404]	; (8003378 <runFWTask+0x1f4>)
 80031e4:	f002 fcb2 	bl	8005b4c <HAL_GPIO_WritePin>
 80031e8:	2200      	movs	r2, #0
 80031ea:	2120      	movs	r1, #32
 80031ec:	4862      	ldr	r0, [pc, #392]	; (8003378 <runFWTask+0x1f4>)
 80031ee:	f002 fcad 	bl	8005b4c <HAL_GPIO_WritePin>
 80031f2:	2201      	movs	r2, #1
 80031f4:	2110      	movs	r1, #16
 80031f6:	4860      	ldr	r0, [pc, #384]	; (8003378 <runFWTask+0x1f4>)
 80031f8:	f002 fca8 	bl	8005b4c <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 80031fc:	4b5f      	ldr	r3, [pc, #380]	; (800337c <runFWTask+0x1f8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2200      	movs	r2, #0
 8003202:	635a      	str	r2, [r3, #52]	; 0x34
 8003204:	4b5d      	ldr	r3, [pc, #372]	; (800337c <runFWTask+0x1f8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
 800320c:	4b51      	ldr	r3, [pc, #324]	; (8003354 <runFWTask+0x1d0>)
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <runFWTask+0x1fc>)
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <runFWTask+0x1d0>)
 8003216:	220b      	movs	r2, #11
 8003218:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 800321a:	4b5a      	ldr	r3, [pc, #360]	; (8003384 <runFWTask+0x200>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <runFWTask+0x204>)
 8003222:	2264      	movs	r2, #100	; 0x64
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	4b58      	ldr	r3, [pc, #352]	; (8003388 <runFWTask+0x204>)
 8003228:	2200      	movs	r2, #0
 800322a:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800322c:	4a57      	ldr	r2, [pc, #348]	; (800338c <runFWTask+0x208>)
 800322e:	210f      	movs	r1, #15
 8003230:	4857      	ldr	r0, [pc, #348]	; (8003390 <runFWTask+0x20c>)
 8003232:	f00a f8ad 	bl	800d390 <sniprintf>
 8003236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800323a:	2206      	movs	r2, #6
 800323c:	4955      	ldr	r1, [pc, #340]	; (8003394 <runFWTask+0x210>)
 800323e:	4856      	ldr	r0, [pc, #344]	; (8003398 <runFWTask+0x214>)
 8003240:	f005 ffb7 	bl	80091b2 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 8003244:	f002 f942 	bl	80054cc <HAL_GetTick>
 8003248:	4603      	mov	r3, r0
 800324a:	4a54      	ldr	r2, [pc, #336]	; (800339c <runFWTask+0x218>)
 800324c:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 800324e:	4b44      	ldr	r3, [pc, #272]	; (8003360 <runFWTask+0x1dc>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d07b      	beq.n	800334e <runFWTask+0x1ca>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 8003256:	f002 f939 	bl	80054cc <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	4b4f      	ldr	r3, [pc, #316]	; (800339c <runFWTask+0x218>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b09      	cmp	r3, #9
 8003264:	d9f3      	bls.n	800324e <runFWTask+0xca>
          {

            StraightLineMove(SPEED_MODE_T);
 8003266:	2000      	movs	r0, #0
 8003268:	f7ff f8be 	bl	80023e8 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 800326c:	f002 f92e 	bl	80054cc <HAL_GetTick>
 8003270:	4603      	mov	r3, r0
 8003272:	4a4a      	ldr	r2, [pc, #296]	; (800339c <runFWTask+0x218>)
 8003274:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 8003276:	e7ea      	b.n	800324e <runFWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 8003278:	4b43      	ldr	r3, [pc, #268]	; (8003388 <runFWTask+0x204>)
 800327a:	885b      	ldrh	r3, [r3, #2]
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003284:	4b34      	ldr	r3, [pc, #208]	; (8003358 <runFWTask+0x1d4>)
 8003286:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 10, move mode must be forced to SLOW
        if (targetDist <= 15)
 800328a:	4b33      	ldr	r3, [pc, #204]	; (8003358 <runFWTask+0x1d4>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329c:	d802      	bhi.n	80032a4 <runFWTask+0x120>
          moveMode = SLOW;
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <runFWTask+0x21c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]

        if (moveMode == SLOW)
 80032a4:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <runFWTask+0x21c>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <runFWTask+0x134>
        {
          // HAL_UART_Transmit(&huart3, (uint8_t *)("FW10\r\n"), 6, 0xFFFF);
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2101      	movs	r1, #1
 80032b0:	4829      	ldr	r0, [pc, #164]	; (8003358 <runFWTask+0x1d4>)
 80032b2:	f7ff fa51 	bl	8002758 <RobotMoveDist>
 80032b6:	e004      	b.n	80032c2 <runFWTask+0x13e>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_2);
 80032b8:	2202      	movs	r2, #2
 80032ba:	2101      	movs	r1, #1
 80032bc:	4826      	ldr	r0, [pc, #152]	; (8003358 <runFWTask+0x1d4>)
 80032be:	f7ff fa4b 	bl	8002758 <RobotMoveDist>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 80032c2:	4b2e      	ldr	r3, [pc, #184]	; (800337c <runFWTask+0x1f8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ca:	4b2c      	ldr	r3, [pc, #176]	; (800337c <runFWTask+0x1f8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2200      	movs	r2, #0
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
 80032d2:	4b20      	ldr	r3, [pc, #128]	; (8003354 <runFWTask+0x1d0>)
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <runFWTask+0x1fc>)
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <runFWTask+0x1d0>)
 80032dc:	220b      	movs	r2, #11
 80032de:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <runFWTask+0x200>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80032e6:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <runFWTask+0x220>)
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <runFWTask+0x220>)
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d112      	bne.n	8003318 <runFWTask+0x194>
        {
          __CLEAR_CURCMD(curCmd);
 80032f2:	4b25      	ldr	r3, [pc, #148]	; (8003388 <runFWTask+0x204>)
 80032f4:	2264      	movs	r2, #100	; 0x64
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <runFWTask+0x204>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 80032fe:	4a23      	ldr	r2, [pc, #140]	; (800338c <runFWTask+0x208>)
 8003300:	210f      	movs	r1, #15
 8003302:	4823      	ldr	r0, [pc, #140]	; (8003390 <runFWTask+0x20c>)
 8003304:	f00a f844 	bl	800d390 <sniprintf>
 8003308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800330c:	2206      	movs	r2, #6
 800330e:	4921      	ldr	r1, [pc, #132]	; (8003394 <runFWTask+0x210>)
 8003310:	4821      	ldr	r0, [pc, #132]	; (8003398 <runFWTask+0x214>)
 8003312:	f005 ff4e 	bl	80091b2 <HAL_UART_Transmit>
 8003316:	e739      	b.n	800318c <runFWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003318:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <runFWTask+0x220>)
 800331a:	785b      	ldrb	r3, [r3, #1]
 800331c:	4a1a      	ldr	r2, [pc, #104]	; (8003388 <runFWTask+0x204>)
 800331e:	4921      	ldr	r1, [pc, #132]	; (80033a4 <runFWTask+0x220>)
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <runFWTask+0x220>)
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	3301      	adds	r3, #1
 800332e:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <runFWTask+0x220>)
 8003330:	7892      	ldrb	r2, [r2, #2]
 8003332:	fb93 f1f2 	sdiv	r1, r3, r2
 8003336:	fb01 f202 	mul.w	r2, r1, r2
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <runFWTask+0x220>)
 8003340:	705a      	strb	r2, [r3, #1]
 8003342:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <runFWTask+0x224>)
 8003344:	210f      	movs	r1, #15
 8003346:	4812      	ldr	r0, [pc, #72]	; (8003390 <runFWTask+0x20c>)
 8003348:	f00a f822 	bl	800d390 <sniprintf>
 800334c:	e71e      	b.n	800318c <runFWTask+0x8>
            break;
 800334e:	bf00      	nop
    if (curTask != TASK_MOVE_FORWARD)
 8003350:	e71c      	b.n	800318c <runFWTask+0x8>
 8003352:	bf00      	nop
 8003354:	20000134 	.word	0x20000134
 8003358:	20000458 	.word	0x20000458
 800335c:	2000045e 	.word	0x2000045e
 8003360:	20000440 	.word	0x20000440
 8003364:	20000448 	.word	0x20000448
 8003368:	2000044e 	.word	0x2000044e
 800336c:	20000478 	.word	0x20000478
 8003370:	20000464 	.word	0x20000464
 8003374:	2000048c 	.word	0x2000048c
 8003378:	40020000 	.word	0x40020000
 800337c:	20000330 	.word	0x20000330
 8003380:	20000135 	.word	0x20000135
 8003384:	200004b0 	.word	0x200004b0
 8003388:	2000042c 	.word	0x2000042c
 800338c:	0800dd90 	.word	0x0800dd90
 8003390:	20000430 	.word	0x20000430
 8003394:	0800dd98 	.word	0x0800dd98
 8003398:	20000378 	.word	0x20000378
 800339c:	20000454 	.word	0x20000454
 80033a0:	20000136 	.word	0x20000136
 80033a4:	200003f8 	.word	0x200003f8
 80033a8:	0800dda0 	.word	0x0800dda0

080033ac <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 80033b4:	4b71      	ldr	r3, [pc, #452]	; (800357c <runBWTask+0x1d0>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d004      	beq.n	80033c6 <runBWTask+0x1a>
      osDelay(1000);
 80033bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033c0:	f007 f842 	bl	800a448 <osDelay>
 80033c4:	e7f6      	b.n	80033b4 <runBWTask+0x8>
    else
    {
      targetDist = 0;
 80033c6:	4b6e      	ldr	r3, [pc, #440]	; (8003580 <runBWTask+0x1d4>)
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <runBWTask+0x1d8>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 80033d4:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <runBWTask+0x1dc>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d061      	beq.n	80034a0 <runBWTask+0xf4>
      {

        angleNow = 0;
 80033dc:	4b6b      	ldr	r3, [pc, #428]	; (800358c <runBWTask+0x1e0>)
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 80033e4:	4b6a      	ldr	r3, [pc, #424]	; (8003590 <runBWTask+0x1e4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 80033ea:	486a      	ldr	r0, [pc, #424]	; (8003594 <runBWTask+0x1e8>)
 80033ec:	f7fe ffa9 	bl	8002342 <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 80033f0:	4869      	ldr	r0, [pc, #420]	; (8003598 <runBWTask+0x1ec>)
 80033f2:	f7fe ffa6 	bl	8002342 <PIDConfigReset>
        PIDConfigReset(&pidFast);
 80033f6:	4869      	ldr	r0, [pc, #420]	; (800359c <runBWTask+0x1f0>)
 80033f8:	f7fe ffa3 	bl	8002342 <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 80033fc:	2201      	movs	r2, #1
 80033fe:	2104      	movs	r1, #4
 8003400:	4867      	ldr	r0, [pc, #412]	; (80035a0 <runBWTask+0x1f4>)
 8003402:	f002 fba3 	bl	8005b4c <HAL_GPIO_WritePin>
 8003406:	2200      	movs	r2, #0
 8003408:	2108      	movs	r1, #8
 800340a:	4865      	ldr	r0, [pc, #404]	; (80035a0 <runBWTask+0x1f4>)
 800340c:	f002 fb9e 	bl	8005b4c <HAL_GPIO_WritePin>
 8003410:	2201      	movs	r2, #1
 8003412:	2120      	movs	r1, #32
 8003414:	4862      	ldr	r0, [pc, #392]	; (80035a0 <runBWTask+0x1f4>)
 8003416:	f002 fb99 	bl	8005b4c <HAL_GPIO_WritePin>
 800341a:	2200      	movs	r2, #0
 800341c:	2110      	movs	r1, #16
 800341e:	4860      	ldr	r0, [pc, #384]	; (80035a0 <runBWTask+0x1f4>)
 8003420:	f002 fb94 	bl	8005b4c <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 8003424:	4b5f      	ldr	r3, [pc, #380]	; (80035a4 <runBWTask+0x1f8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2200      	movs	r2, #0
 800342a:	635a      	str	r2, [r3, #52]	; 0x34
 800342c:	4b5d      	ldr	r3, [pc, #372]	; (80035a4 <runBWTask+0x1f8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
 8003434:	4b51      	ldr	r3, [pc, #324]	; (800357c <runBWTask+0x1d0>)
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <runBWTask+0x1fc>)
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	4b4f      	ldr	r3, [pc, #316]	; (800357c <runBWTask+0x1d0>)
 800343e:	220b      	movs	r2, #11
 8003440:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8003442:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <runBWTask+0x200>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 8003448:	4b59      	ldr	r3, [pc, #356]	; (80035b0 <runBWTask+0x204>)
 800344a:	2264      	movs	r2, #100	; 0x64
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	4b58      	ldr	r3, [pc, #352]	; (80035b0 <runBWTask+0x204>)
 8003450:	2200      	movs	r2, #0
 8003452:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8003454:	4a57      	ldr	r2, [pc, #348]	; (80035b4 <runBWTask+0x208>)
 8003456:	210f      	movs	r1, #15
 8003458:	4857      	ldr	r0, [pc, #348]	; (80035b8 <runBWTask+0x20c>)
 800345a:	f009 ff99 	bl	800d390 <sniprintf>
 800345e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003462:	2206      	movs	r2, #6
 8003464:	4955      	ldr	r1, [pc, #340]	; (80035bc <runBWTask+0x210>)
 8003466:	4856      	ldr	r0, [pc, #344]	; (80035c0 <runBWTask+0x214>)
 8003468:	f005 fea3 	bl	80091b2 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 800346c:	f002 f82e 	bl	80054cc <HAL_GetTick>
 8003470:	4603      	mov	r3, r0
 8003472:	4a54      	ldr	r2, [pc, #336]	; (80035c4 <runBWTask+0x218>)
 8003474:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 8003476:	4b44      	ldr	r3, [pc, #272]	; (8003588 <runBWTask+0x1dc>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d07b      	beq.n	8003576 <runBWTask+0x1ca>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 800347e:	f002 f825 	bl	80054cc <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <runBWTask+0x218>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b09      	cmp	r3, #9
 800348c:	d9f3      	bls.n	8003476 <runBWTask+0xca>
          {
            StraightLineMove(SPEED_MODE_T);
 800348e:	2000      	movs	r0, #0
 8003490:	f7fe ffaa 	bl	80023e8 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 8003494:	f002 f81a 	bl	80054cc <HAL_GetTick>
 8003498:	4603      	mov	r3, r0
 800349a:	4a4a      	ldr	r2, [pc, #296]	; (80035c4 <runBWTask+0x218>)
 800349c:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 800349e:	e7ea      	b.n	8003476 <runBWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 80034a0:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <runBWTask+0x204>)
 80034a2:	885b      	ldrh	r3, [r3, #2]
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ac:	4b34      	ldr	r3, [pc, #208]	; (8003580 <runBWTask+0x1d4>)
 80034ae:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 80034b2:	4b33      	ldr	r3, [pc, #204]	; (8003580 <runBWTask+0x1d4>)
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80034bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c4:	d802      	bhi.n	80034cc <runBWTask+0x120>
          moveMode = SLOW;
 80034c6:	4b40      	ldr	r3, [pc, #256]	; (80035c8 <runBWTask+0x21c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]

        if (moveMode == SLOW)
 80034cc:	4b3e      	ldr	r3, [pc, #248]	; (80035c8 <runBWTask+0x21c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <runBWTask+0x134>
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_1);
 80034d4:	2201      	movs	r2, #1
 80034d6:	2100      	movs	r1, #0
 80034d8:	4829      	ldr	r0, [pc, #164]	; (8003580 <runBWTask+0x1d4>)
 80034da:	f7ff f93d 	bl	8002758 <RobotMoveDist>
 80034de:	e004      	b.n	80034ea <runBWTask+0x13e>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_2);
 80034e0:	2202      	movs	r2, #2
 80034e2:	2100      	movs	r1, #0
 80034e4:	4826      	ldr	r0, [pc, #152]	; (8003580 <runBWTask+0x1d4>)
 80034e6:	f7ff f937 	bl	8002758 <RobotMoveDist>
          // OLED_ShowString(40, 40, (uint8_t *)"BW");
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 80034ea:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <runBWTask+0x1f8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34
 80034f2:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <runBWTask+0x1f8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2200      	movs	r2, #0
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <runBWTask+0x1d0>)
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <runBWTask+0x1fc>)
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <runBWTask+0x1d0>)
 8003504:	220b      	movs	r2, #11
 8003506:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8003508:	4b28      	ldr	r3, [pc, #160]	; (80035ac <runBWTask+0x200>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800350e:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <runBWTask+0x220>)
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	4b2e      	ldr	r3, [pc, #184]	; (80035cc <runBWTask+0x220>)
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	429a      	cmp	r2, r3
 8003518:	d112      	bne.n	8003540 <runBWTask+0x194>
        {
          __CLEAR_CURCMD(curCmd);
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <runBWTask+0x204>)
 800351c:	2264      	movs	r2, #100	; 0x64
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <runBWTask+0x204>)
 8003522:	2200      	movs	r2, #0
 8003524:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 8003526:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <runBWTask+0x208>)
 8003528:	210f      	movs	r1, #15
 800352a:	4823      	ldr	r0, [pc, #140]	; (80035b8 <runBWTask+0x20c>)
 800352c:	f009 ff30 	bl	800d390 <sniprintf>
 8003530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003534:	2206      	movs	r2, #6
 8003536:	4921      	ldr	r1, [pc, #132]	; (80035bc <runBWTask+0x210>)
 8003538:	4821      	ldr	r0, [pc, #132]	; (80035c0 <runBWTask+0x214>)
 800353a:	f005 fe3a 	bl	80091b2 <HAL_UART_Transmit>
 800353e:	e739      	b.n	80033b4 <runBWTask+0x8>
          // HAL_UART_Transmit(&huart3, (uint8_t *)(curTask), 6, 0xFFFF);
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <runBWTask+0x220>)
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	4a1a      	ldr	r2, [pc, #104]	; (80035b0 <runBWTask+0x204>)
 8003546:	4921      	ldr	r1, [pc, #132]	; (80035cc <runBWTask+0x220>)
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <runBWTask+0x220>)
 8003552:	785b      	ldrb	r3, [r3, #1]
 8003554:	3301      	adds	r3, #1
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <runBWTask+0x220>)
 8003558:	7892      	ldrb	r2, [r2, #2]
 800355a:	fb93 f1f2 	sdiv	r1, r3, r2
 800355e:	fb01 f202 	mul.w	r2, r1, r2
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4b19      	ldr	r3, [pc, #100]	; (80035cc <runBWTask+0x220>)
 8003568:	705a      	strb	r2, [r3, #1]
 800356a:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <runBWTask+0x224>)
 800356c:	210f      	movs	r1, #15
 800356e:	4812      	ldr	r0, [pc, #72]	; (80035b8 <runBWTask+0x20c>)
 8003570:	f009 ff0e 	bl	800d390 <sniprintf>
 8003574:	e71e      	b.n	80033b4 <runBWTask+0x8>
            break;
 8003576:	bf00      	nop
    if (curTask != TASK_MOVE_BACKWARD)
 8003578:	e71c      	b.n	80033b4 <runBWTask+0x8>
 800357a:	bf00      	nop
 800357c:	20000134 	.word	0x20000134
 8003580:	20000458 	.word	0x20000458
 8003584:	2000045e 	.word	0x2000045e
 8003588:	20000440 	.word	0x20000440
 800358c:	20000448 	.word	0x20000448
 8003590:	2000044e 	.word	0x2000044e
 8003594:	20000478 	.word	0x20000478
 8003598:	20000464 	.word	0x20000464
 800359c:	2000048c 	.word	0x2000048c
 80035a0:	40020000 	.word	0x40020000
 80035a4:	20000330 	.word	0x20000330
 80035a8:	20000135 	.word	0x20000135
 80035ac:	200004b0 	.word	0x200004b0
 80035b0:	2000042c 	.word	0x2000042c
 80035b4:	0800dd90 	.word	0x0800dd90
 80035b8:	20000430 	.word	0x20000430
 80035bc:	0800dd98 	.word	0x0800dd98
 80035c0:	20000378 	.word	0x20000378
 80035c4:	20000454 	.word	0x20000454
 80035c8:	20000136 	.word	0x20000136
 80035cc:	200003f8 	.word	0x200003f8
 80035d0:	0800dda0 	.word	0x0800dda0

080035d4 <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  // osDelay(100);

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 80035dc:	4b94      	ldr	r3, [pc, #592]	; (8003830 <runFLTask+0x25c>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d004      	beq.n	80035ee <runFLTask+0x1a>
      osDelay(1000);
 80035e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035e8:	f006 ff2e 	bl	800a448 <osDelay>
 80035ec:	e7f6      	b.n	80035dc <runFLTask+0x8>
    else
    {

      switch (curCmd.val)
 80035ee:	4b91      	ldr	r3, [pc, #580]	; (8003834 <runFLTask+0x260>)
 80035f0:	885b      	ldrh	r3, [r3, #2]
 80035f2:	2b14      	cmp	r3, #20
 80035f4:	f000 8083 	beq.w	80036fe <runFLTask+0x12a>
 80035f8:	2b1e      	cmp	r3, #30
 80035fa:	f040 80f8 	bne.w	80037ee <runFLTask+0x21a>
      {
      case 30: // FL30 (3x2)
        targetDist = 5;
 80035fe:	4b8e      	ldr	r3, [pc, #568]	; (8003838 <runFLTask+0x264>)
 8003600:	4a8e      	ldr	r2, [pc, #568]	; (800383c <runFLTask+0x268>)
 8003602:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003604:	2200      	movs	r2, #0
 8003606:	2101      	movs	r1, #1
 8003608:	488b      	ldr	r0, [pc, #556]	; (8003838 <runFLTask+0x264>)
 800360a:	f7ff f8a5 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 800360e:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <runFLTask+0x26c>)
 8003610:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003614:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003844 <runFLTask+0x270>
 8003618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003620:	dd02      	ble.n	8003628 <runFLTask+0x54>
 8003622:	f240 1309 	movw	r3, #265	; 0x109
 8003626:	e012      	b.n	800364e <runFLTask+0x7a>
 8003628:	4b85      	ldr	r3, [pc, #532]	; (8003840 <runFLTask+0x26c>)
 800362a:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800362e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003848 <runFLTask+0x274>
 8003632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363a:	d501      	bpl.n	8003640 <runFLTask+0x6c>
 800363c:	2346      	movs	r3, #70	; 0x46
 800363e:	e006      	b.n	800364e <runFLTask+0x7a>
 8003640:	4b7f      	ldr	r3, [pc, #508]	; (8003840 <runFLTask+0x26c>)
 8003642:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364a:	ee17 3a90 	vmov	r3, s15
 800364e:	4a7f      	ldr	r2, [pc, #508]	; (800384c <runFLTask+0x278>)
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	6413      	str	r3, [r2, #64]	; 0x40
 8003654:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003658:	f001 ff44 	bl	80054e4 <HAL_Delay>
 800365c:	4b78      	ldr	r3, [pc, #480]	; (8003840 <runFLTask+0x26c>)
 800365e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003662:	4a7b      	ldr	r2, [pc, #492]	; (8003850 <runFLTask+0x27c>)
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <runFLTask+0x26c>)
 8003668:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	2104      	movs	r1, #4
 800367a:	4876      	ldr	r0, [pc, #472]	; (8003854 <runFLTask+0x280>)
 800367c:	f002 fa66 	bl	8005b4c <HAL_GPIO_WritePin>
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <runFLTask+0x26c>)
 8003682:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	2108      	movs	r1, #8
 8003694:	486f      	ldr	r0, [pc, #444]	; (8003854 <runFLTask+0x280>)
 8003696:	f002 fa59 	bl	8005b4c <HAL_GPIO_WritePin>
 800369a:	4b69      	ldr	r3, [pc, #420]	; (8003840 <runFLTask+0x26c>)
 800369c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	2120      	movs	r1, #32
 80036ae:	4869      	ldr	r0, [pc, #420]	; (8003854 <runFLTask+0x280>)
 80036b0:	f002 fa4c 	bl	8005b4c <HAL_GPIO_WritePin>
 80036b4:	4b62      	ldr	r3, [pc, #392]	; (8003840 <runFLTask+0x26c>)
 80036b6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	2110      	movs	r1, #16
 80036c8:	4862      	ldr	r0, [pc, #392]	; (8003854 <runFLTask+0x280>)
 80036ca:	f002 fa3f 	bl	8005b4c <HAL_GPIO_WritePin>
 80036ce:	4b5c      	ldr	r3, [pc, #368]	; (8003840 <runFLTask+0x26c>)
 80036d0:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 80036d4:	4b60      	ldr	r3, [pc, #384]	; (8003858 <runFLTask+0x284>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	635a      	str	r2, [r3, #52]	; 0x34
 80036da:	4b59      	ldr	r3, [pc, #356]	; (8003840 <runFLTask+0x26c>)
 80036dc:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 80036e0:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <runFLTask+0x284>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80036e6:	485a      	ldr	r0, [pc, #360]	; (8003850 <runFLTask+0x27c>)
 80036e8:	f7ff fb2a 	bl	8002d40 <RobotTurn>
        // osDelay(10);
        targetDist = 3;
 80036ec:	4b52      	ldr	r3, [pc, #328]	; (8003838 <runFLTask+0x264>)
 80036ee:	4a5b      	ldr	r2, [pc, #364]	; (800385c <runFLTask+0x288>)
 80036f0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80036f2:	2200      	movs	r2, #0
 80036f4:	2100      	movs	r1, #0
 80036f6:	4850      	ldr	r0, [pc, #320]	; (8003838 <runFLTask+0x264>)
 80036f8:	f7ff f82e 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        break;
 80036fc:	e111      	b.n	8003922 <runFLTask+0x34e>
      case 20: // FL20 (outdoor 3x1)
        targetDist = 5;
 80036fe:	4b4e      	ldr	r3, [pc, #312]	; (8003838 <runFLTask+0x264>)
 8003700:	4a4e      	ldr	r2, [pc, #312]	; (800383c <runFLTask+0x268>)
 8003702:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003704:	2200      	movs	r2, #0
 8003706:	2101      	movs	r1, #1
 8003708:	484b      	ldr	r0, [pc, #300]	; (8003838 <runFLTask+0x264>)
 800370a:	f7ff f825 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 800370e:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <runFLTask+0x26c>)
 8003710:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003714:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003844 <runFLTask+0x270>
 8003718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003720:	dd02      	ble.n	8003728 <runFLTask+0x154>
 8003722:	f240 1309 	movw	r3, #265	; 0x109
 8003726:	e012      	b.n	800374e <runFLTask+0x17a>
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <runFLTask+0x26c>)
 800372a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800372e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003848 <runFLTask+0x274>
 8003732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373a:	d501      	bpl.n	8003740 <runFLTask+0x16c>
 800373c:	2346      	movs	r3, #70	; 0x46
 800373e:	e006      	b.n	800374e <runFLTask+0x17a>
 8003740:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <runFLTask+0x26c>)
 8003742:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800374a:	ee17 3a90 	vmov	r3, s15
 800374e:	4a3f      	ldr	r2, [pc, #252]	; (800384c <runFLTask+0x278>)
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	6413      	str	r3, [r2, #64]	; 0x40
 8003754:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003758:	f001 fec4 	bl	80054e4 <HAL_Delay>
 800375c:	4b38      	ldr	r3, [pc, #224]	; (8003840 <runFLTask+0x26c>)
 800375e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003762:	4a3b      	ldr	r2, [pc, #236]	; (8003850 <runFLTask+0x27c>)
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b36      	ldr	r3, [pc, #216]	; (8003840 <runFLTask+0x26c>)
 8003768:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	2104      	movs	r1, #4
 800377a:	4836      	ldr	r0, [pc, #216]	; (8003854 <runFLTask+0x280>)
 800377c:	f002 f9e6 	bl	8005b4c <HAL_GPIO_WritePin>
 8003780:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <runFLTask+0x26c>)
 8003782:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	2108      	movs	r1, #8
 8003794:	482f      	ldr	r0, [pc, #188]	; (8003854 <runFLTask+0x280>)
 8003796:	f002 f9d9 	bl	8005b4c <HAL_GPIO_WritePin>
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <runFLTask+0x26c>)
 800379c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	2120      	movs	r1, #32
 80037ae:	4829      	ldr	r0, [pc, #164]	; (8003854 <runFLTask+0x280>)
 80037b0:	f002 f9cc 	bl	8005b4c <HAL_GPIO_WritePin>
 80037b4:	4b22      	ldr	r3, [pc, #136]	; (8003840 <runFLTask+0x26c>)
 80037b6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	2110      	movs	r1, #16
 80037c8:	4822      	ldr	r0, [pc, #136]	; (8003854 <runFLTask+0x280>)
 80037ca:	f002 f9bf 	bl	8005b4c <HAL_GPIO_WritePin>
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <runFLTask+0x26c>)
 80037d0:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 80037d4:	4b20      	ldr	r3, [pc, #128]	; (8003858 <runFLTask+0x284>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	635a      	str	r2, [r3, #52]	; 0x34
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <runFLTask+0x26c>)
 80037dc:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <runFLTask+0x284>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80037e6:	481a      	ldr	r0, [pc, #104]	; (8003850 <runFLTask+0x27c>)
 80037e8:	f7ff faaa 	bl	8002d40 <RobotTurn>
        // osDelay(10);
        // targetDist = 7;
        // RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
        // osDelay(10);
        break;
 80037ec:	e099      	b.n	8003922 <runFLTask+0x34e>
      default: // FL00 (indoor 3x1)
        targetDist = 9;
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <runFLTask+0x264>)
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <runFLTask+0x28c>)
 80037f2:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2101      	movs	r1, #1
 80037f8:	480f      	ldr	r0, [pc, #60]	; (8003838 <runFLTask+0x264>)
 80037fa:	f7fe ffad 	bl	8002758 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <runFLTask+0x26c>)
 8003800:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003804:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003844 <runFLTask+0x270>
 8003808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	dd02      	ble.n	8003818 <runFLTask+0x244>
 8003812:	f240 1309 	movw	r3, #265	; 0x109
 8003816:	e02c      	b.n	8003872 <runFLTask+0x29e>
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <runFLTask+0x26c>)
 800381a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800381e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003848 <runFLTask+0x274>
 8003822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	d51b      	bpl.n	8003864 <runFLTask+0x290>
 800382c:	2346      	movs	r3, #70	; 0x46
 800382e:	e020      	b.n	8003872 <runFLTask+0x29e>
 8003830:	20000134 	.word	0x20000134
 8003834:	2000042c 	.word	0x2000042c
 8003838:	20000458 	.word	0x20000458
 800383c:	40a00000 	.word	0x40a00000
 8003840:	20000004 	.word	0x20000004
 8003844:	43848000 	.word	0x43848000
 8003848:	428c0000 	.word	0x428c0000
 800384c:	20000210 	.word	0x20000210
 8003850:	20000444 	.word	0x20000444
 8003854:	40020000 	.word	0x40020000
 8003858:	20000330 	.word	0x20000330
 800385c:	40400000 	.word	0x40400000
 8003860:	41100000 	.word	0x41100000
 8003864:	4b4e      	ldr	r3, [pc, #312]	; (80039a0 <runFLTask+0x3cc>)
 8003866:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800386a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800386e:	ee17 3a90 	vmov	r3, s15
 8003872:	4a4c      	ldr	r2, [pc, #304]	; (80039a4 <runFLTask+0x3d0>)
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	6413      	str	r3, [r2, #64]	; 0x40
 8003878:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800387c:	f001 fe32 	bl	80054e4 <HAL_Delay>
 8003880:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <runFLTask+0x3cc>)
 8003882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003884:	4a48      	ldr	r2, [pc, #288]	; (80039a8 <runFLTask+0x3d4>)
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b45      	ldr	r3, [pc, #276]	; (80039a0 <runFLTask+0x3cc>)
 800388a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	2104      	movs	r1, #4
 800389c:	4843      	ldr	r0, [pc, #268]	; (80039ac <runFLTask+0x3d8>)
 800389e:	f002 f955 	bl	8005b4c <HAL_GPIO_WritePin>
 80038a2:	4b3f      	ldr	r3, [pc, #252]	; (80039a0 <runFLTask+0x3cc>)
 80038a4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	2108      	movs	r1, #8
 80038b6:	483d      	ldr	r0, [pc, #244]	; (80039ac <runFLTask+0x3d8>)
 80038b8:	f002 f948 	bl	8005b4c <HAL_GPIO_WritePin>
 80038bc:	4b38      	ldr	r3, [pc, #224]	; (80039a0 <runFLTask+0x3cc>)
 80038be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	2120      	movs	r1, #32
 80038d0:	4836      	ldr	r0, [pc, #216]	; (80039ac <runFLTask+0x3d8>)
 80038d2:	f002 f93b 	bl	8005b4c <HAL_GPIO_WritePin>
 80038d6:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <runFLTask+0x3cc>)
 80038d8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	2110      	movs	r1, #16
 80038ea:	4830      	ldr	r0, [pc, #192]	; (80039ac <runFLTask+0x3d8>)
 80038ec:	f002 f92e 	bl	8005b4c <HAL_GPIO_WritePin>
 80038f0:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <runFLTask+0x3cc>)
 80038f2:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 80038f6:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <runFLTask+0x3dc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	635a      	str	r2, [r3, #52]	; 0x34
 80038fc:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <runFLTask+0x3cc>)
 80038fe:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8003902:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <runFLTask+0x3dc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003908:	4827      	ldr	r0, [pc, #156]	; (80039a8 <runFLTask+0x3d4>)
 800390a:	f7ff fa19 	bl	8002d40 <RobotTurn>

        targetDist = 1;
 800390e:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <runFLTask+0x3e0>)
 8003910:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003914:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003916:	2200      	movs	r2, #0
 8003918:	2101      	movs	r1, #1
 800391a:	4826      	ldr	r0, [pc, #152]	; (80039b4 <runFLTask+0x3e0>)
 800391c:	f7fe ff1c 	bl	8002758 <RobotMoveDist>

        break;
 8003920:	bf00      	nop
      }
      clickOnce = 0;
 8003922:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <runFLTask+0x3e4>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <runFLTask+0x3e8>)
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <runFLTask+0x3ec>)
 800392e:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8003930:	4b22      	ldr	r3, [pc, #136]	; (80039bc <runFLTask+0x3e8>)
 8003932:	220b      	movs	r2, #11
 8003934:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8003936:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <runFLTask+0x3f0>)
 8003938:	781a      	ldrb	r2, [r3, #0]
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <runFLTask+0x3f0>)
 800393c:	785b      	ldrb	r3, [r3, #1]
 800393e:	429a      	cmp	r2, r3
 8003940:	d112      	bne.n	8003968 <runFLTask+0x394>
      {
        __CLEAR_CURCMD(curCmd);
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <runFLTask+0x3f4>)
 8003944:	2264      	movs	r2, #100	; 0x64
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <runFLTask+0x3f4>)
 800394a:	2200      	movs	r2, #0
 800394c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800394e:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <runFLTask+0x3f8>)
 8003950:	210f      	movs	r1, #15
 8003952:	481f      	ldr	r0, [pc, #124]	; (80039d0 <runFLTask+0x3fc>)
 8003954:	f009 fd1c 	bl	800d390 <sniprintf>
 8003958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800395c:	2206      	movs	r2, #6
 800395e:	491d      	ldr	r1, [pc, #116]	; (80039d4 <runFLTask+0x400>)
 8003960:	481d      	ldr	r0, [pc, #116]	; (80039d8 <runFLTask+0x404>)
 8003962:	f005 fc26 	bl	80091b2 <HAL_UART_Transmit>
 8003966:	e639      	b.n	80035dc <runFLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <runFLTask+0x3f0>)
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <runFLTask+0x3f4>)
 800396e:	4915      	ldr	r1, [pc, #84]	; (80039c4 <runFLTask+0x3f0>)
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <runFLTask+0x3f0>)
 800397a:	785b      	ldrb	r3, [r3, #1]
 800397c:	3301      	adds	r3, #1
 800397e:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <runFLTask+0x3f0>)
 8003980:	7892      	ldrb	r2, [r2, #2]
 8003982:	fb93 f1f2 	sdiv	r1, r3, r2
 8003986:	fb01 f202 	mul.w	r2, r1, r2
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <runFLTask+0x3f0>)
 8003990:	705a      	strb	r2, [r3, #1]
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <runFLTask+0x408>)
 8003994:	210f      	movs	r1, #15
 8003996:	480e      	ldr	r0, [pc, #56]	; (80039d0 <runFLTask+0x3fc>)
 8003998:	f009 fcfa 	bl	800d390 <sniprintf>
    if (curTask != TASK_FL)
 800399c:	e61e      	b.n	80035dc <runFLTask+0x8>
 800399e:	bf00      	nop
 80039a0:	20000004 	.word	0x20000004
 80039a4:	20000210 	.word	0x20000210
 80039a8:	20000444 	.word	0x20000444
 80039ac:	40020000 	.word	0x40020000
 80039b0:	20000330 	.word	0x20000330
 80039b4:	20000458 	.word	0x20000458
 80039b8:	200004b0 	.word	0x200004b0
 80039bc:	20000134 	.word	0x20000134
 80039c0:	20000135 	.word	0x20000135
 80039c4:	200003f8 	.word	0x200003f8
 80039c8:	2000042c 	.word	0x2000042c
 80039cc:	0800dd90 	.word	0x0800dd90
 80039d0:	20000430 	.word	0x20000430
 80039d4:	0800dd98 	.word	0x0800dd98
 80039d8:	20000378 	.word	0x20000378
 80039dc:	0800dda0 	.word	0x0800dda0

080039e0 <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 80039e8:	4b99      	ldr	r3, [pc, #612]	; (8003c50 <runFRTask+0x270>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d004      	beq.n	80039fa <runFRTask+0x1a>
      osDelay(1000);
 80039f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039f4:	f006 fd28 	bl	800a448 <osDelay>
 80039f8:	e7f6      	b.n	80039e8 <runFRTask+0x8>
    else
    {

      switch (curCmd.val)
 80039fa:	4b96      	ldr	r3, [pc, #600]	; (8003c54 <runFRTask+0x274>)
 80039fc:	885b      	ldrh	r3, [r3, #2]
 80039fe:	2b14      	cmp	r3, #20
 8003a00:	f000 8085 	beq.w	8003b0e <runFRTask+0x12e>
 8003a04:	2b1e      	cmp	r3, #30
 8003a06:	f040 8101 	bne.w	8003c0c <runFRTask+0x22c>
      {
      case 30: // FR30 (outdoor)
        targetDist = 4;
 8003a0a:	4b93      	ldr	r3, [pc, #588]	; (8003c58 <runFRTask+0x278>)
 8003a0c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003a10:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003a12:	2200      	movs	r2, #0
 8003a14:	2101      	movs	r1, #1
 8003a16:	4890      	ldr	r0, [pc, #576]	; (8003c58 <runFRTask+0x278>)
 8003a18:	f7fe fe9e 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8003a1c:	4b8f      	ldr	r3, [pc, #572]	; (8003c5c <runFRTask+0x27c>)
 8003a1e:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003a22:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8003c60 <runFRTask+0x280>
 8003a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2e:	dd02      	ble.n	8003a36 <runFRTask+0x56>
 8003a30:	f240 1309 	movw	r3, #265	; 0x109
 8003a34:	e012      	b.n	8003a5c <runFRTask+0x7c>
 8003a36:	4b89      	ldr	r3, [pc, #548]	; (8003c5c <runFRTask+0x27c>)
 8003a38:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003a3c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003c64 <runFRTask+0x284>
 8003a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a48:	d501      	bpl.n	8003a4e <runFRTask+0x6e>
 8003a4a:	2346      	movs	r3, #70	; 0x46
 8003a4c:	e006      	b.n	8003a5c <runFRTask+0x7c>
 8003a4e:	4b83      	ldr	r3, [pc, #524]	; (8003c5c <runFRTask+0x27c>)
 8003a50:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a58:	ee17 3a90 	vmov	r3, s15
 8003a5c:	4a82      	ldr	r2, [pc, #520]	; (8003c68 <runFRTask+0x288>)
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
 8003a62:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a66:	f001 fd3d 	bl	80054e4 <HAL_Delay>
 8003a6a:	4b7c      	ldr	r3, [pc, #496]	; (8003c5c <runFRTask+0x27c>)
 8003a6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a70:	4a7e      	ldr	r2, [pc, #504]	; (8003c6c <runFRTask+0x28c>)
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b79      	ldr	r3, [pc, #484]	; (8003c5c <runFRTask+0x27c>)
 8003a76:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	2104      	movs	r1, #4
 8003a88:	4879      	ldr	r0, [pc, #484]	; (8003c70 <runFRTask+0x290>)
 8003a8a:	f002 f85f 	bl	8005b4c <HAL_GPIO_WritePin>
 8003a8e:	4b73      	ldr	r3, [pc, #460]	; (8003c5c <runFRTask+0x27c>)
 8003a90:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2108      	movs	r1, #8
 8003aa2:	4873      	ldr	r0, [pc, #460]	; (8003c70 <runFRTask+0x290>)
 8003aa4:	f002 f852 	bl	8005b4c <HAL_GPIO_WritePin>
 8003aa8:	4b6c      	ldr	r3, [pc, #432]	; (8003c5c <runFRTask+0x27c>)
 8003aaa:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2120      	movs	r1, #32
 8003abc:	486c      	ldr	r0, [pc, #432]	; (8003c70 <runFRTask+0x290>)
 8003abe:	f002 f845 	bl	8005b4c <HAL_GPIO_WritePin>
 8003ac2:	4b66      	ldr	r3, [pc, #408]	; (8003c5c <runFRTask+0x27c>)
 8003ac4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2110      	movs	r1, #16
 8003ad6:	4866      	ldr	r0, [pc, #408]	; (8003c70 <runFRTask+0x290>)
 8003ad8:	f002 f838 	bl	8005b4c <HAL_GPIO_WritePin>
 8003adc:	4b5f      	ldr	r3, [pc, #380]	; (8003c5c <runFRTask+0x27c>)
 8003ade:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8003ae2:	4b64      	ldr	r3, [pc, #400]	; (8003c74 <runFRTask+0x294>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	635a      	str	r2, [r3, #52]	; 0x34
 8003ae8:	4b5c      	ldr	r3, [pc, #368]	; (8003c5c <runFRTask+0x27c>)
 8003aea:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8003aee:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <runFRTask+0x294>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003af4:	485d      	ldr	r0, [pc, #372]	; (8003c6c <runFRTask+0x28c>)
 8003af6:	f7ff f923 	bl	8002d40 <RobotTurn>
        // osDelay(10);
        targetDist = 2;
 8003afa:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <runFRTask+0x278>)
 8003afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b00:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2100      	movs	r1, #0
 8003b06:	4854      	ldr	r0, [pc, #336]	; (8003c58 <runFRTask+0x278>)
 8003b08:	f7fe fe26 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        break;
 8003b0c:	e116      	b.n	8003d3c <runFRTask+0x35c>
      case 20: // FR20 (outdoor 3x1)
        targetDist = 4;
 8003b0e:	4b52      	ldr	r3, [pc, #328]	; (8003c58 <runFRTask+0x278>)
 8003b10:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003b14:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2101      	movs	r1, #1
 8003b1a:	484f      	ldr	r0, [pc, #316]	; (8003c58 <runFRTask+0x278>)
 8003b1c:	f7fe fe1c 	bl	8002758 <RobotMoveDist>
        osDelay(10);
 8003b20:	200a      	movs	r0, #10
 8003b22:	f006 fc91 	bl	800a448 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 8003b26:	4b4d      	ldr	r3, [pc, #308]	; (8003c5c <runFRTask+0x27c>)
 8003b28:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003b2c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003c60 <runFRTask+0x280>
 8003b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	dd02      	ble.n	8003b40 <runFRTask+0x160>
 8003b3a:	f240 1309 	movw	r3, #265	; 0x109
 8003b3e:	e012      	b.n	8003b66 <runFRTask+0x186>
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <runFRTask+0x27c>)
 8003b42:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003b46:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003c64 <runFRTask+0x284>
 8003b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b52:	d501      	bpl.n	8003b58 <runFRTask+0x178>
 8003b54:	2346      	movs	r3, #70	; 0x46
 8003b56:	e006      	b.n	8003b66 <runFRTask+0x186>
 8003b58:	4b40      	ldr	r3, [pc, #256]	; (8003c5c <runFRTask+0x27c>)
 8003b5a:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b62:	ee17 3a90 	vmov	r3, s15
 8003b66:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <runFRTask+0x288>)
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003b70:	f001 fcb8 	bl	80054e4 <HAL_Delay>
 8003b74:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <runFRTask+0x27c>)
 8003b76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003b7a:	4a3c      	ldr	r2, [pc, #240]	; (8003c6c <runFRTask+0x28c>)
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <runFRTask+0x27c>)
 8003b80:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2104      	movs	r1, #4
 8003b92:	4837      	ldr	r0, [pc, #220]	; (8003c70 <runFRTask+0x290>)
 8003b94:	f001 ffda 	bl	8005b4c <HAL_GPIO_WritePin>
 8003b98:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <runFRTask+0x27c>)
 8003b9a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2108      	movs	r1, #8
 8003bac:	4830      	ldr	r0, [pc, #192]	; (8003c70 <runFRTask+0x290>)
 8003bae:	f001 ffcd 	bl	8005b4c <HAL_GPIO_WritePin>
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <runFRTask+0x27c>)
 8003bb4:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2120      	movs	r1, #32
 8003bc6:	482a      	ldr	r0, [pc, #168]	; (8003c70 <runFRTask+0x290>)
 8003bc8:	f001 ffc0 	bl	8005b4c <HAL_GPIO_WritePin>
 8003bcc:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <runFRTask+0x27c>)
 8003bce:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf14      	ite	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	2300      	moveq	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2110      	movs	r1, #16
 8003be0:	4823      	ldr	r0, [pc, #140]	; (8003c70 <runFRTask+0x290>)
 8003be2:	f001 ffb3 	bl	8005b4c <HAL_GPIO_WritePin>
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <runFRTask+0x27c>)
 8003be8:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8003bec:	4b21      	ldr	r3, [pc, #132]	; (8003c74 <runFRTask+0x294>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <runFRTask+0x27c>)
 8003bf4:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <runFRTask+0x294>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003bfe:	481b      	ldr	r0, [pc, #108]	; (8003c6c <runFRTask+0x28c>)
 8003c00:	f7ff f89e 	bl	8002d40 <RobotTurn>
        osDelay(10);
 8003c04:	200a      	movs	r0, #10
 8003c06:	f006 fc1f 	bl	800a448 <osDelay>
        // targetDist = 7;
        // RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
        // osDelay(10);
        break;
 8003c0a:	e097      	b.n	8003d3c <runFRTask+0x35c>
      default: // FR00 (indoor 3x2)
        targetDist = 3;
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <runFRTask+0x278>)
 8003c0e:	4a1a      	ldr	r2, [pc, #104]	; (8003c78 <runFRTask+0x298>)
 8003c10:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2101      	movs	r1, #1
 8003c16:	4810      	ldr	r0, [pc, #64]	; (8003c58 <runFRTask+0x278>)
 8003c18:	f7fe fd9e 	bl	8002758 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <runFRTask+0x27c>)
 8003c1e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003c22:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003c60 <runFRTask+0x280>
 8003c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2e:	dd02      	ble.n	8003c36 <runFRTask+0x256>
 8003c30:	f240 1309 	movw	r3, #265	; 0x109
 8003c34:	e029      	b.n	8003c8a <runFRTask+0x2aa>
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <runFRTask+0x27c>)
 8003c38:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003c3c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003c64 <runFRTask+0x284>
 8003c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c48:	d518      	bpl.n	8003c7c <runFRTask+0x29c>
 8003c4a:	2346      	movs	r3, #70	; 0x46
 8003c4c:	e01d      	b.n	8003c8a <runFRTask+0x2aa>
 8003c4e:	bf00      	nop
 8003c50:	20000134 	.word	0x20000134
 8003c54:	2000042c 	.word	0x2000042c
 8003c58:	20000458 	.word	0x20000458
 8003c5c:	20000004 	.word	0x20000004
 8003c60:	43848000 	.word	0x43848000
 8003c64:	428c0000 	.word	0x428c0000
 8003c68:	20000210 	.word	0x20000210
 8003c6c:	20000444 	.word	0x20000444
 8003c70:	40020000 	.word	0x40020000
 8003c74:	20000330 	.word	0x20000330
 8003c78:	40400000 	.word	0x40400000
 8003c7c:	4b4e      	ldr	r3, [pc, #312]	; (8003db8 <runFRTask+0x3d8>)
 8003c7e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c86:	ee17 3a90 	vmov	r3, s15
 8003c8a:	4a4c      	ldr	r2, [pc, #304]	; (8003dbc <runFRTask+0x3dc>)
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c94:	f001 fc26 	bl	80054e4 <HAL_Delay>
 8003c98:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <runFRTask+0x3d8>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	4a48      	ldr	r2, [pc, #288]	; (8003dc0 <runFRTask+0x3e0>)
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b45      	ldr	r3, [pc, #276]	; (8003db8 <runFRTask+0x3d8>)
 8003ca4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2104      	movs	r1, #4
 8003cb6:	4843      	ldr	r0, [pc, #268]	; (8003dc4 <runFRTask+0x3e4>)
 8003cb8:	f001 ff48 	bl	8005b4c <HAL_GPIO_WritePin>
 8003cbc:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <runFRTask+0x3d8>)
 8003cbe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2108      	movs	r1, #8
 8003cd0:	483c      	ldr	r0, [pc, #240]	; (8003dc4 <runFRTask+0x3e4>)
 8003cd2:	f001 ff3b 	bl	8005b4c <HAL_GPIO_WritePin>
 8003cd6:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <runFRTask+0x3d8>)
 8003cd8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2120      	movs	r1, #32
 8003cea:	4836      	ldr	r0, [pc, #216]	; (8003dc4 <runFRTask+0x3e4>)
 8003cec:	f001 ff2e 	bl	8005b4c <HAL_GPIO_WritePin>
 8003cf0:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <runFRTask+0x3d8>)
 8003cf2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	2110      	movs	r1, #16
 8003d04:	482f      	ldr	r0, [pc, #188]	; (8003dc4 <runFRTask+0x3e4>)
 8003d06:	f001 ff21 	bl	8005b4c <HAL_GPIO_WritePin>
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <runFRTask+0x3d8>)
 8003d0c:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8003d10:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <runFRTask+0x3e8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	635a      	str	r2, [r3, #52]	; 0x34
 8003d16:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <runFRTask+0x3d8>)
 8003d18:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <runFRTask+0x3e8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003d22:	4827      	ldr	r0, [pc, #156]	; (8003dc0 <runFRTask+0x3e0>)
 8003d24:	f7ff f80c 	bl	8002d40 <RobotTurn>

        targetDist = 4;
 8003d28:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <runFRTask+0x3ec>)
 8003d2a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003d2e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003d30:	2200      	movs	r2, #0
 8003d32:	2100      	movs	r1, #0
 8003d34:	4825      	ldr	r0, [pc, #148]	; (8003dcc <runFRTask+0x3ec>)
 8003d36:	f7fe fd0f 	bl	8002758 <RobotMoveDist>

        break;
 8003d3a:	bf00      	nop
      }
      clickOnce = 0;
 8003d3c:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <runFRTask+0x3f0>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <runFRTask+0x3f4>)
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <runFRTask+0x3f8>)
 8003d48:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <runFRTask+0x3f4>)
 8003d4c:	220b      	movs	r2, #11
 8003d4e:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8003d50:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <runFRTask+0x3fc>)
 8003d52:	781a      	ldrb	r2, [r3, #0]
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <runFRTask+0x3fc>)
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d112      	bne.n	8003d82 <runFRTask+0x3a2>
      {
        __CLEAR_CURCMD(curCmd);
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <runFRTask+0x400>)
 8003d5e:	2264      	movs	r2, #100	; 0x64
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <runFRTask+0x400>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8003d68:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <runFRTask+0x404>)
 8003d6a:	210f      	movs	r1, #15
 8003d6c:	481e      	ldr	r0, [pc, #120]	; (8003de8 <runFRTask+0x408>)
 8003d6e:	f009 fb0f 	bl	800d390 <sniprintf>
 8003d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d76:	2206      	movs	r2, #6
 8003d78:	491c      	ldr	r1, [pc, #112]	; (8003dec <runFRTask+0x40c>)
 8003d7a:	481d      	ldr	r0, [pc, #116]	; (8003df0 <runFRTask+0x410>)
 8003d7c:	f005 fa19 	bl	80091b2 <HAL_UART_Transmit>
 8003d80:	e632      	b.n	80039e8 <runFRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <runFRTask+0x3fc>)
 8003d84:	785b      	ldrb	r3, [r3, #1]
 8003d86:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <runFRTask+0x400>)
 8003d88:	4914      	ldr	r1, [pc, #80]	; (8003ddc <runFRTask+0x3fc>)
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <runFRTask+0x3fc>)
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	3301      	adds	r3, #1
 8003d98:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <runFRTask+0x3fc>)
 8003d9a:	7892      	ldrb	r2, [r2, #2]
 8003d9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8003da0:	fb01 f202 	mul.w	r2, r1, r2
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <runFRTask+0x3fc>)
 8003daa:	705a      	strb	r2, [r3, #1]
 8003dac:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <runFRTask+0x414>)
 8003dae:	210f      	movs	r1, #15
 8003db0:	480d      	ldr	r0, [pc, #52]	; (8003de8 <runFRTask+0x408>)
 8003db2:	f009 faed 	bl	800d390 <sniprintf>
    if (curTask != TASK_FR)
 8003db6:	e617      	b.n	80039e8 <runFRTask+0x8>
 8003db8:	20000004 	.word	0x20000004
 8003dbc:	20000210 	.word	0x20000210
 8003dc0:	20000444 	.word	0x20000444
 8003dc4:	40020000 	.word	0x40020000
 8003dc8:	20000330 	.word	0x20000330
 8003dcc:	20000458 	.word	0x20000458
 8003dd0:	200004b0 	.word	0x200004b0
 8003dd4:	20000134 	.word	0x20000134
 8003dd8:	20000135 	.word	0x20000135
 8003ddc:	200003f8 	.word	0x200003f8
 8003de0:	2000042c 	.word	0x2000042c
 8003de4:	0800dd90 	.word	0x0800dd90
 8003de8:	20000430 	.word	0x20000430
 8003dec:	0800dd98 	.word	0x0800dd98
 8003df0:	20000378 	.word	0x20000378
 8003df4:	0800dda0 	.word	0x0800dda0

08003df8 <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 8003e00:	4b91      	ldr	r3, [pc, #580]	; (8004048 <runBLTask+0x250>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d004      	beq.n	8003e12 <runBLTask+0x1a>
      osDelay(1000);
 8003e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e0c:	f006 fb1c 	bl	800a448 <osDelay>
 8003e10:	e7f6      	b.n	8003e00 <runBLTask+0x8>
    else
    {

      switch (curCmd.val)
 8003e12:	4b8e      	ldr	r3, [pc, #568]	; (800404c <runBLTask+0x254>)
 8003e14:	885b      	ldrh	r3, [r3, #2]
 8003e16:	2b14      	cmp	r3, #20
 8003e18:	f000 8084 	beq.w	8003f24 <runBLTask+0x12c>
 8003e1c:	2b1e      	cmp	r3, #30
 8003e1e:	f040 80fa 	bne.w	8004016 <runBLTask+0x21e>
      {
      case 30: // BL30 (outdoor 3x2)
        targetDist = 1;
 8003e22:	4b8b      	ldr	r3, [pc, #556]	; (8004050 <runBLTask+0x258>)
 8003e24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e28:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4888      	ldr	r0, [pc, #544]	; (8004050 <runBLTask+0x258>)
 8003e30:	f7fe fc92 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 8003e34:	4b87      	ldr	r3, [pc, #540]	; (8004054 <runBLTask+0x25c>)
 8003e36:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8003e3a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8004058 <runBLTask+0x260>
 8003e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	dd02      	ble.n	8003e4e <runBLTask+0x56>
 8003e48:	f240 1309 	movw	r3, #265	; 0x109
 8003e4c:	e012      	b.n	8003e74 <runBLTask+0x7c>
 8003e4e:	4b81      	ldr	r3, [pc, #516]	; (8004054 <runBLTask+0x25c>)
 8003e50:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8003e54:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800405c <runBLTask+0x264>
 8003e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e60:	d501      	bpl.n	8003e66 <runBLTask+0x6e>
 8003e62:	2346      	movs	r3, #70	; 0x46
 8003e64:	e006      	b.n	8003e74 <runBLTask+0x7c>
 8003e66:	4b7b      	ldr	r3, [pc, #492]	; (8004054 <runBLTask+0x25c>)
 8003e68:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8003e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e70:	ee17 3a90 	vmov	r3, s15
 8003e74:	4a7a      	ldr	r2, [pc, #488]	; (8004060 <runBLTask+0x268>)
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003e7e:	f001 fb31 	bl	80054e4 <HAL_Delay>
 8003e82:	4b74      	ldr	r3, [pc, #464]	; (8004054 <runBLTask+0x25c>)
 8003e84:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003e88:	4a76      	ldr	r2, [pc, #472]	; (8004064 <runBLTask+0x26c>)
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b71      	ldr	r3, [pc, #452]	; (8004054 <runBLTask+0x25c>)
 8003e8e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2104      	movs	r1, #4
 8003ea0:	4871      	ldr	r0, [pc, #452]	; (8004068 <runBLTask+0x270>)
 8003ea2:	f001 fe53 	bl	8005b4c <HAL_GPIO_WritePin>
 8003ea6:	4b6b      	ldr	r3, [pc, #428]	; (8004054 <runBLTask+0x25c>)
 8003ea8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2108      	movs	r1, #8
 8003eba:	486b      	ldr	r0, [pc, #428]	; (8004068 <runBLTask+0x270>)
 8003ebc:	f001 fe46 	bl	8005b4c <HAL_GPIO_WritePin>
 8003ec0:	4b64      	ldr	r3, [pc, #400]	; (8004054 <runBLTask+0x25c>)
 8003ec2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf0c      	ite	eq
 8003eca:	2301      	moveq	r3, #1
 8003ecc:	2300      	movne	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2120      	movs	r1, #32
 8003ed4:	4864      	ldr	r0, [pc, #400]	; (8004068 <runBLTask+0x270>)
 8003ed6:	f001 fe39 	bl	8005b4c <HAL_GPIO_WritePin>
 8003eda:	4b5e      	ldr	r3, [pc, #376]	; (8004054 <runBLTask+0x25c>)
 8003edc:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	2110      	movs	r1, #16
 8003eee:	485e      	ldr	r0, [pc, #376]	; (8004068 <runBLTask+0x270>)
 8003ef0:	f001 fe2c 	bl	8005b4c <HAL_GPIO_WritePin>
 8003ef4:	4b57      	ldr	r3, [pc, #348]	; (8004054 <runBLTask+0x25c>)
 8003ef6:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 8003efa:	4b5c      	ldr	r3, [pc, #368]	; (800406c <runBLTask+0x274>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	635a      	str	r2, [r3, #52]	; 0x34
 8003f00:	4b54      	ldr	r3, [pc, #336]	; (8004054 <runBLTask+0x25c>)
 8003f02:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8003f06:	4b59      	ldr	r3, [pc, #356]	; (800406c <runBLTask+0x274>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003f0c:	4855      	ldr	r0, [pc, #340]	; (8004064 <runBLTask+0x26c>)
 8003f0e:	f7fe ff17 	bl	8002d40 <RobotTurn>
        // osDelay(10);
        targetDist = 6;
 8003f12:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <runBLTask+0x258>)
 8003f14:	4a56      	ldr	r2, [pc, #344]	; (8004070 <runBLTask+0x278>)
 8003f16:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	484c      	ldr	r0, [pc, #304]	; (8004050 <runBLTask+0x258>)
 8003f1e:	f7fe fc1b 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        break;
 8003f22:	e107      	b.n	8004134 <runBLTask+0x33c>
      case 20: // BL20 (outdoor 3x1)
        // targetDist = 4;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <runBLTask+0x25c>)
 8003f26:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003f2a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004058 <runBLTask+0x260>
 8003f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f36:	dd02      	ble.n	8003f3e <runBLTask+0x146>
 8003f38:	f240 1309 	movw	r3, #265	; 0x109
 8003f3c:	e012      	b.n	8003f64 <runBLTask+0x16c>
 8003f3e:	4b45      	ldr	r3, [pc, #276]	; (8004054 <runBLTask+0x25c>)
 8003f40:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003f44:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800405c <runBLTask+0x264>
 8003f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f50:	d501      	bpl.n	8003f56 <runBLTask+0x15e>
 8003f52:	2346      	movs	r3, #70	; 0x46
 8003f54:	e006      	b.n	8003f64 <runBLTask+0x16c>
 8003f56:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <runBLTask+0x25c>)
 8003f58:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f60:	ee17 3a90 	vmov	r3, s15
 8003f64:	4a3e      	ldr	r2, [pc, #248]	; (8004060 <runBLTask+0x268>)
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003f6e:	f001 fab9 	bl	80054e4 <HAL_Delay>
 8003f72:	4b38      	ldr	r3, [pc, #224]	; (8004054 <runBLTask+0x25c>)
 8003f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003f78:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <runBLTask+0x26c>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b35      	ldr	r3, [pc, #212]	; (8004054 <runBLTask+0x25c>)
 8003f7e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2104      	movs	r1, #4
 8003f90:	4835      	ldr	r0, [pc, #212]	; (8004068 <runBLTask+0x270>)
 8003f92:	f001 fddb 	bl	8005b4c <HAL_GPIO_WritePin>
 8003f96:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <runBLTask+0x25c>)
 8003f98:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2108      	movs	r1, #8
 8003faa:	482f      	ldr	r0, [pc, #188]	; (8004068 <runBLTask+0x270>)
 8003fac:	f001 fdce 	bl	8005b4c <HAL_GPIO_WritePin>
 8003fb0:	4b28      	ldr	r3, [pc, #160]	; (8004054 <runBLTask+0x25c>)
 8003fb2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf0c      	ite	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	2300      	movne	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2120      	movs	r1, #32
 8003fc4:	4828      	ldr	r0, [pc, #160]	; (8004068 <runBLTask+0x270>)
 8003fc6:	f001 fdc1 	bl	8005b4c <HAL_GPIO_WritePin>
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <runBLTask+0x25c>)
 8003fcc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2110      	movs	r1, #16
 8003fde:	4822      	ldr	r0, [pc, #136]	; (8004068 <runBLTask+0x270>)
 8003fe0:	f001 fdb4 	bl	8005b4c <HAL_GPIO_WritePin>
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <runBLTask+0x25c>)
 8003fe6:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8003fea:	4b20      	ldr	r3, [pc, #128]	; (800406c <runBLTask+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	635a      	str	r2, [r3, #52]	; 0x34
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <runBLTask+0x25c>)
 8003ff2:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	; (800406c <runBLTask+0x274>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003ffc:	4819      	ldr	r0, [pc, #100]	; (8004064 <runBLTask+0x26c>)
 8003ffe:	f7fe fe9f 	bl	8002d40 <RobotTurn>
        // osDelay(10);
        targetDist = 4;
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <runBLTask+0x258>)
 8004004:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004008:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800400a:	2200      	movs	r2, #0
 800400c:	2100      	movs	r1, #0
 800400e:	4810      	ldr	r0, [pc, #64]	; (8004050 <runBLTask+0x258>)
 8004010:	f7fe fba2 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        break;
 8004014:	e08e      	b.n	8004134 <runBLTask+0x33c>
      default: // BL00 (indoor 3x2)
        // targetDist = 2;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);

        __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <runBLTask+0x25c>)
 8004018:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800401c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004058 <runBLTask+0x260>
 8004020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004028:	dd02      	ble.n	8004030 <runBLTask+0x238>
 800402a:	f240 1309 	movw	r3, #265	; 0x109
 800402e:	e028      	b.n	8004082 <runBLTask+0x28a>
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <runBLTask+0x25c>)
 8004032:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004036:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800405c <runBLTask+0x264>
 800403a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004042:	d517      	bpl.n	8004074 <runBLTask+0x27c>
 8004044:	2346      	movs	r3, #70	; 0x46
 8004046:	e01c      	b.n	8004082 <runBLTask+0x28a>
 8004048:	20000134 	.word	0x20000134
 800404c:	2000042c 	.word	0x2000042c
 8004050:	20000458 	.word	0x20000458
 8004054:	20000004 	.word	0x20000004
 8004058:	43848000 	.word	0x43848000
 800405c:	428c0000 	.word	0x428c0000
 8004060:	20000210 	.word	0x20000210
 8004064:	20000444 	.word	0x20000444
 8004068:	40020000 	.word	0x40020000
 800406c:	20000330 	.word	0x20000330
 8004070:	40c00000 	.word	0x40c00000
 8004074:	4b4e      	ldr	r3, [pc, #312]	; (80041b0 <runBLTask+0x3b8>)
 8004076:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800407a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800407e:	ee17 3a90 	vmov	r3, s15
 8004082:	4a4c      	ldr	r2, [pc, #304]	; (80041b4 <runBLTask+0x3bc>)
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	6413      	str	r3, [r2, #64]	; 0x40
 8004088:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800408c:	f001 fa2a 	bl	80054e4 <HAL_Delay>
 8004090:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <runBLTask+0x3b8>)
 8004092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004096:	4a48      	ldr	r2, [pc, #288]	; (80041b8 <runBLTask+0x3c0>)
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b45      	ldr	r3, [pc, #276]	; (80041b0 <runBLTask+0x3b8>)
 800409c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	2104      	movs	r1, #4
 80040ae:	4843      	ldr	r0, [pc, #268]	; (80041bc <runBLTask+0x3c4>)
 80040b0:	f001 fd4c 	bl	8005b4c <HAL_GPIO_WritePin>
 80040b4:	4b3e      	ldr	r3, [pc, #248]	; (80041b0 <runBLTask+0x3b8>)
 80040b6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2301      	movne	r3, #1
 80040c0:	2300      	moveq	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	2108      	movs	r1, #8
 80040c8:	483c      	ldr	r0, [pc, #240]	; (80041bc <runBLTask+0x3c4>)
 80040ca:	f001 fd3f 	bl	8005b4c <HAL_GPIO_WritePin>
 80040ce:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <runBLTask+0x3b8>)
 80040d0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	2120      	movs	r1, #32
 80040e2:	4836      	ldr	r0, [pc, #216]	; (80041bc <runBLTask+0x3c4>)
 80040e4:	f001 fd32 	bl	8005b4c <HAL_GPIO_WritePin>
 80040e8:	4b31      	ldr	r3, [pc, #196]	; (80041b0 <runBLTask+0x3b8>)
 80040ea:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	2110      	movs	r1, #16
 80040fc:	482f      	ldr	r0, [pc, #188]	; (80041bc <runBLTask+0x3c4>)
 80040fe:	f001 fd25 	bl	8005b4c <HAL_GPIO_WritePin>
 8004102:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <runBLTask+0x3b8>)
 8004104:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <runBLTask+0x3c8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	635a      	str	r2, [r3, #52]	; 0x34
 800410e:	4b28      	ldr	r3, [pc, #160]	; (80041b0 <runBLTask+0x3b8>)
 8004110:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 8004114:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <runBLTask+0x3c8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 800411a:	4827      	ldr	r0, [pc, #156]	; (80041b8 <runBLTask+0x3c0>)
 800411c:	f7fe fe10 	bl	8002d40 <RobotTurn>

        targetDist = 8;
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <runBLTask+0x3cc>)
 8004122:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8004126:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004128:	2200      	movs	r2, #0
 800412a:	2100      	movs	r1, #0
 800412c:	4825      	ldr	r0, [pc, #148]	; (80041c4 <runBLTask+0x3cc>)
 800412e:	f7fe fb13 	bl	8002758 <RobotMoveDist>

        break;
 8004132:	bf00      	nop
      }
      clickOnce = 0;
 8004134:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <runBLTask+0x3d0>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <runBLTask+0x3d4>)
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <runBLTask+0x3d8>)
 8004140:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <runBLTask+0x3d4>)
 8004144:	220b      	movs	r2, #11
 8004146:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <runBLTask+0x3dc>)
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <runBLTask+0x3dc>)
 800414e:	785b      	ldrb	r3, [r3, #1]
 8004150:	429a      	cmp	r2, r3
 8004152:	d112      	bne.n	800417a <runBLTask+0x382>
      {
        __CLEAR_CURCMD(curCmd);
 8004154:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <runBLTask+0x3e0>)
 8004156:	2264      	movs	r2, #100	; 0x64
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <runBLTask+0x3e0>)
 800415c:	2200      	movs	r2, #0
 800415e:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004160:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <runBLTask+0x3e4>)
 8004162:	210f      	movs	r1, #15
 8004164:	481e      	ldr	r0, [pc, #120]	; (80041e0 <runBLTask+0x3e8>)
 8004166:	f009 f913 	bl	800d390 <sniprintf>
 800416a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800416e:	2206      	movs	r2, #6
 8004170:	491c      	ldr	r1, [pc, #112]	; (80041e4 <runBLTask+0x3ec>)
 8004172:	481d      	ldr	r0, [pc, #116]	; (80041e8 <runBLTask+0x3f0>)
 8004174:	f005 f81d 	bl	80091b2 <HAL_UART_Transmit>
 8004178:	e642      	b.n	8003e00 <runBLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 800417a:	4b16      	ldr	r3, [pc, #88]	; (80041d4 <runBLTask+0x3dc>)
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <runBLTask+0x3e0>)
 8004180:	4914      	ldr	r1, [pc, #80]	; (80041d4 <runBLTask+0x3dc>)
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <runBLTask+0x3dc>)
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	3301      	adds	r3, #1
 8004190:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <runBLTask+0x3dc>)
 8004192:	7892      	ldrb	r2, [r2, #2]
 8004194:	fb93 f1f2 	sdiv	r1, r3, r2
 8004198:	fb01 f202 	mul.w	r2, r1, r2
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <runBLTask+0x3dc>)
 80041a2:	705a      	strb	r2, [r3, #1]
 80041a4:	4a11      	ldr	r2, [pc, #68]	; (80041ec <runBLTask+0x3f4>)
 80041a6:	210f      	movs	r1, #15
 80041a8:	480d      	ldr	r0, [pc, #52]	; (80041e0 <runBLTask+0x3e8>)
 80041aa:	f009 f8f1 	bl	800d390 <sniprintf>
    if (curTask != TASK_BL)
 80041ae:	e627      	b.n	8003e00 <runBLTask+0x8>
 80041b0:	20000004 	.word	0x20000004
 80041b4:	20000210 	.word	0x20000210
 80041b8:	20000444 	.word	0x20000444
 80041bc:	40020000 	.word	0x40020000
 80041c0:	20000330 	.word	0x20000330
 80041c4:	20000458 	.word	0x20000458
 80041c8:	200004b0 	.word	0x200004b0
 80041cc:	20000134 	.word	0x20000134
 80041d0:	20000135 	.word	0x20000135
 80041d4:	200003f8 	.word	0x200003f8
 80041d8:	2000042c 	.word	0x2000042c
 80041dc:	0800dd90 	.word	0x0800dd90
 80041e0:	20000430 	.word	0x20000430
 80041e4:	0800dd98 	.word	0x0800dd98
 80041e8:	20000378 	.word	0x20000378
 80041ec:	0800dda0 	.word	0x0800dda0

080041f0 <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 80041f8:	4b95      	ldr	r3, [pc, #596]	; (8004450 <runBRTask+0x260>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b05      	cmp	r3, #5
 80041fe:	d004      	beq.n	800420a <runBRTask+0x1a>
      osDelay(1000);
 8004200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004204:	f006 f920 	bl	800a448 <osDelay>
 8004208:	e7f6      	b.n	80041f8 <runBRTask+0x8>
    else
    {

      switch (curCmd.val)
 800420a:	4b92      	ldr	r3, [pc, #584]	; (8004454 <runBRTask+0x264>)
 800420c:	885b      	ldrh	r3, [r3, #2]
 800420e:	2b14      	cmp	r3, #20
 8004210:	f000 8084 	beq.w	800431c <runBRTask+0x12c>
 8004214:	2b1e      	cmp	r3, #30
 8004216:	f040 80fa 	bne.w	800440e <runBRTask+0x21e>
      {
      case 30: // BR30 (4x2)
        targetDist = 2;
 800421a:	4b8f      	ldr	r3, [pc, #572]	; (8004458 <runBRTask+0x268>)
 800421c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004220:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004222:	2200      	movs	r2, #0
 8004224:	2100      	movs	r1, #0
 8004226:	488c      	ldr	r0, [pc, #560]	; (8004458 <runBRTask+0x268>)
 8004228:	f7fe fa96 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 800422c:	4b8b      	ldr	r3, [pc, #556]	; (800445c <runBRTask+0x26c>)
 800422e:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8004232:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004460 <runBRTask+0x270>
 8004236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423e:	dd02      	ble.n	8004246 <runBRTask+0x56>
 8004240:	f240 1309 	movw	r3, #265	; 0x109
 8004244:	e012      	b.n	800426c <runBRTask+0x7c>
 8004246:	4b85      	ldr	r3, [pc, #532]	; (800445c <runBRTask+0x26c>)
 8004248:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 800424c:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8004464 <runBRTask+0x274>
 8004250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004258:	d501      	bpl.n	800425e <runBRTask+0x6e>
 800425a:	2346      	movs	r3, #70	; 0x46
 800425c:	e006      	b.n	800426c <runBRTask+0x7c>
 800425e:	4b7f      	ldr	r3, [pc, #508]	; (800445c <runBRTask+0x26c>)
 8004260:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8004264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004268:	ee17 3a90 	vmov	r3, s15
 800426c:	4a7e      	ldr	r2, [pc, #504]	; (8004468 <runBRTask+0x278>)
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	6413      	str	r3, [r2, #64]	; 0x40
 8004272:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004276:	f001 f935 	bl	80054e4 <HAL_Delay>
 800427a:	4b78      	ldr	r3, [pc, #480]	; (800445c <runBRTask+0x26c>)
 800427c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004280:	4a7a      	ldr	r2, [pc, #488]	; (800446c <runBRTask+0x27c>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b75      	ldr	r3, [pc, #468]	; (800445c <runBRTask+0x26c>)
 8004286:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	2104      	movs	r1, #4
 8004298:	4875      	ldr	r0, [pc, #468]	; (8004470 <runBRTask+0x280>)
 800429a:	f001 fc57 	bl	8005b4c <HAL_GPIO_WritePin>
 800429e:	4b6f      	ldr	r3, [pc, #444]	; (800445c <runBRTask+0x26c>)
 80042a0:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	2108      	movs	r1, #8
 80042b2:	486f      	ldr	r0, [pc, #444]	; (8004470 <runBRTask+0x280>)
 80042b4:	f001 fc4a 	bl	8005b4c <HAL_GPIO_WritePin>
 80042b8:	4b68      	ldr	r3, [pc, #416]	; (800445c <runBRTask+0x26c>)
 80042ba:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	2120      	movs	r1, #32
 80042cc:	4868      	ldr	r0, [pc, #416]	; (8004470 <runBRTask+0x280>)
 80042ce:	f001 fc3d 	bl	8005b4c <HAL_GPIO_WritePin>
 80042d2:	4b62      	ldr	r3, [pc, #392]	; (800445c <runBRTask+0x26c>)
 80042d4:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf14      	ite	ne
 80042dc:	2301      	movne	r3, #1
 80042de:	2300      	moveq	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	2110      	movs	r1, #16
 80042e6:	4862      	ldr	r0, [pc, #392]	; (8004470 <runBRTask+0x280>)
 80042e8:	f001 fc30 	bl	8005b4c <HAL_GPIO_WritePin>
 80042ec:	4b5b      	ldr	r3, [pc, #364]	; (800445c <runBRTask+0x26c>)
 80042ee:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 80042f2:	4b60      	ldr	r3, [pc, #384]	; (8004474 <runBRTask+0x284>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	635a      	str	r2, [r3, #52]	; 0x34
 80042f8:	4b58      	ldr	r3, [pc, #352]	; (800445c <runBRTask+0x26c>)
 80042fa:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 80042fe:	4b5d      	ldr	r3, [pc, #372]	; (8004474 <runBRTask+0x284>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004304:	4859      	ldr	r0, [pc, #356]	; (800446c <runBRTask+0x27c>)
 8004306:	f7fe fd1b 	bl	8002d40 <RobotTurn>
        // osDelay(10);
        targetDist = 7;
 800430a:	4b53      	ldr	r3, [pc, #332]	; (8004458 <runBRTask+0x268>)
 800430c:	4a5a      	ldr	r2, [pc, #360]	; (8004478 <runBRTask+0x288>)
 800430e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004310:	2200      	movs	r2, #0
 8004312:	2100      	movs	r1, #0
 8004314:	4850      	ldr	r0, [pc, #320]	; (8004458 <runBRTask+0x268>)
 8004316:	f7fe fa1f 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        break;
 800431a:	e111      	b.n	8004540 <runBRTask+0x350>
      case 20: // BR20 (outdoor 3x1)
        // targetDist = 4;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 800431c:	4b4f      	ldr	r3, [pc, #316]	; (800445c <runBRTask+0x26c>)
 800431e:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8004322:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004460 <runBRTask+0x270>
 8004326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	dd02      	ble.n	8004336 <runBRTask+0x146>
 8004330:	f240 1309 	movw	r3, #265	; 0x109
 8004334:	e012      	b.n	800435c <runBRTask+0x16c>
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <runBRTask+0x26c>)
 8004338:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800433c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8004464 <runBRTask+0x274>
 8004340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004348:	d501      	bpl.n	800434e <runBRTask+0x15e>
 800434a:	2346      	movs	r3, #70	; 0x46
 800434c:	e006      	b.n	800435c <runBRTask+0x16c>
 800434e:	4b43      	ldr	r3, [pc, #268]	; (800445c <runBRTask+0x26c>)
 8004350:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8004354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004358:	ee17 3a90 	vmov	r3, s15
 800435c:	4a42      	ldr	r2, [pc, #264]	; (8004468 <runBRTask+0x278>)
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	6413      	str	r3, [r2, #64]	; 0x40
 8004362:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004366:	f001 f8bd 	bl	80054e4 <HAL_Delay>
 800436a:	4b3c      	ldr	r3, [pc, #240]	; (800445c <runBRTask+0x26c>)
 800436c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004370:	4a3e      	ldr	r2, [pc, #248]	; (800446c <runBRTask+0x27c>)
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b39      	ldr	r3, [pc, #228]	; (800445c <runBRTask+0x26c>)
 8004376:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	2104      	movs	r1, #4
 8004388:	4839      	ldr	r0, [pc, #228]	; (8004470 <runBRTask+0x280>)
 800438a:	f001 fbdf 	bl	8005b4c <HAL_GPIO_WritePin>
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <runBRTask+0x26c>)
 8004390:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	2108      	movs	r1, #8
 80043a2:	4833      	ldr	r0, [pc, #204]	; (8004470 <runBRTask+0x280>)
 80043a4:	f001 fbd2 	bl	8005b4c <HAL_GPIO_WritePin>
 80043a8:	4b2c      	ldr	r3, [pc, #176]	; (800445c <runBRTask+0x26c>)
 80043aa:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	2120      	movs	r1, #32
 80043bc:	482c      	ldr	r0, [pc, #176]	; (8004470 <runBRTask+0x280>)
 80043be:	f001 fbc5 	bl	8005b4c <HAL_GPIO_WritePin>
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <runBRTask+0x26c>)
 80043c4:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	2110      	movs	r1, #16
 80043d6:	4826      	ldr	r0, [pc, #152]	; (8004470 <runBRTask+0x280>)
 80043d8:	f001 fbb8 	bl	8005b4c <HAL_GPIO_WritePin>
 80043dc:	4b1f      	ldr	r3, [pc, #124]	; (800445c <runBRTask+0x26c>)
 80043de:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <runBRTask+0x284>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	635a      	str	r2, [r3, #52]	; 0x34
 80043e8:	4b1c      	ldr	r3, [pc, #112]	; (800445c <runBRTask+0x26c>)
 80043ea:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <runBRTask+0x284>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80043f4:	481d      	ldr	r0, [pc, #116]	; (800446c <runBRTask+0x27c>)
 80043f6:	f7fe fca3 	bl	8002d40 <RobotTurn>
        // osDelay(10);
        targetDist = 4;
 80043fa:	4b17      	ldr	r3, [pc, #92]	; (8004458 <runBRTask+0x268>)
 80043fc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004400:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004402:	2200      	movs	r2, #0
 8004404:	2100      	movs	r1, #0
 8004406:	4814      	ldr	r0, [pc, #80]	; (8004458 <runBRTask+0x268>)
 8004408:	f7fe f9a6 	bl	8002758 <RobotMoveDist>
        // osDelay(10);
        break;
 800440c:	e098      	b.n	8004540 <runBRTask+0x350>
      default: // BR00 (indoor 3x1)
        targetDist = 3;
 800440e:	4b12      	ldr	r3, [pc, #72]	; (8004458 <runBRTask+0x268>)
 8004410:	4a1a      	ldr	r2, [pc, #104]	; (800447c <runBRTask+0x28c>)
 8004412:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004414:	2200      	movs	r2, #0
 8004416:	2101      	movs	r1, #1
 8004418:	480f      	ldr	r0, [pc, #60]	; (8004458 <runBRTask+0x268>)
 800441a:	f7fe f99d 	bl	8002758 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 800441e:	4b0f      	ldr	r3, [pc, #60]	; (800445c <runBRTask+0x26c>)
 8004420:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004424:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004460 <runBRTask+0x270>
 8004428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004430:	dd02      	ble.n	8004438 <runBRTask+0x248>
 8004432:	f240 1309 	movw	r3, #265	; 0x109
 8004436:	e02a      	b.n	800448e <runBRTask+0x29e>
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <runBRTask+0x26c>)
 800443a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800443e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004464 <runBRTask+0x274>
 8004442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444a:	d519      	bpl.n	8004480 <runBRTask+0x290>
 800444c:	2346      	movs	r3, #70	; 0x46
 800444e:	e01e      	b.n	800448e <runBRTask+0x29e>
 8004450:	20000134 	.word	0x20000134
 8004454:	2000042c 	.word	0x2000042c
 8004458:	20000458 	.word	0x20000458
 800445c:	20000004 	.word	0x20000004
 8004460:	43848000 	.word	0x43848000
 8004464:	428c0000 	.word	0x428c0000
 8004468:	20000210 	.word	0x20000210
 800446c:	20000444 	.word	0x20000444
 8004470:	40020000 	.word	0x40020000
 8004474:	20000330 	.word	0x20000330
 8004478:	40e00000 	.word	0x40e00000
 800447c:	40400000 	.word	0x40400000
 8004480:	4b4e      	ldr	r3, [pc, #312]	; (80045bc <runBRTask+0x3cc>)
 8004482:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448a:	ee17 3a90 	vmov	r3, s15
 800448e:	4a4c      	ldr	r2, [pc, #304]	; (80045c0 <runBRTask+0x3d0>)
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	6413      	str	r3, [r2, #64]	; 0x40
 8004494:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004498:	f001 f824 	bl	80054e4 <HAL_Delay>
 800449c:	4b47      	ldr	r3, [pc, #284]	; (80045bc <runBRTask+0x3cc>)
 800449e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044a2:	4a48      	ldr	r2, [pc, #288]	; (80045c4 <runBRTask+0x3d4>)
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b45      	ldr	r3, [pc, #276]	; (80045bc <runBRTask+0x3cc>)
 80044a8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	2104      	movs	r1, #4
 80044ba:	4843      	ldr	r0, [pc, #268]	; (80045c8 <runBRTask+0x3d8>)
 80044bc:	f001 fb46 	bl	8005b4c <HAL_GPIO_WritePin>
 80044c0:	4b3e      	ldr	r3, [pc, #248]	; (80045bc <runBRTask+0x3cc>)
 80044c2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	2108      	movs	r1, #8
 80044d4:	483c      	ldr	r0, [pc, #240]	; (80045c8 <runBRTask+0x3d8>)
 80044d6:	f001 fb39 	bl	8005b4c <HAL_GPIO_WritePin>
 80044da:	4b38      	ldr	r3, [pc, #224]	; (80045bc <runBRTask+0x3cc>)
 80044dc:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	2120      	movs	r1, #32
 80044ee:	4836      	ldr	r0, [pc, #216]	; (80045c8 <runBRTask+0x3d8>)
 80044f0:	f001 fb2c 	bl	8005b4c <HAL_GPIO_WritePin>
 80044f4:	4b31      	ldr	r3, [pc, #196]	; (80045bc <runBRTask+0x3cc>)
 80044f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	2110      	movs	r1, #16
 8004508:	482f      	ldr	r0, [pc, #188]	; (80045c8 <runBRTask+0x3d8>)
 800450a:	f001 fb1f 	bl	8005b4c <HAL_GPIO_WritePin>
 800450e:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <runBRTask+0x3cc>)
 8004510:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8004514:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <runBRTask+0x3dc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	635a      	str	r2, [r3, #52]	; 0x34
 800451a:	4b28      	ldr	r3, [pc, #160]	; (80045bc <runBRTask+0x3cc>)
 800451c:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8004520:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <runBRTask+0x3dc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004526:	4827      	ldr	r0, [pc, #156]	; (80045c4 <runBRTask+0x3d4>)
 8004528:	f7fe fc0a 	bl	8002d40 <RobotTurn>

        targetDist = 8;
 800452c:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <runBRTask+0x3e0>)
 800452e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8004532:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004534:	2200      	movs	r2, #0
 8004536:	2100      	movs	r1, #0
 8004538:	4825      	ldr	r0, [pc, #148]	; (80045d0 <runBRTask+0x3e0>)
 800453a:	f7fe f90d 	bl	8002758 <RobotMoveDist>

        break;
 800453e:	bf00      	nop
      }
      clickOnce = 0;
 8004540:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <runBRTask+0x3e4>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <runBRTask+0x3e8>)
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <runBRTask+0x3ec>)
 800454c:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 800454e:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <runBRTask+0x3e8>)
 8004550:	220b      	movs	r2, #11
 8004552:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <runBRTask+0x3f0>)
 8004556:	781a      	ldrb	r2, [r3, #0]
 8004558:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <runBRTask+0x3f0>)
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	429a      	cmp	r2, r3
 800455e:	d112      	bne.n	8004586 <runBRTask+0x396>
      {
        __CLEAR_CURCMD(curCmd);
 8004560:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <runBRTask+0x3f4>)
 8004562:	2264      	movs	r2, #100	; 0x64
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <runBRTask+0x3f4>)
 8004568:	2200      	movs	r2, #0
 800456a:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800456c:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <runBRTask+0x3f8>)
 800456e:	210f      	movs	r1, #15
 8004570:	481e      	ldr	r0, [pc, #120]	; (80045ec <runBRTask+0x3fc>)
 8004572:	f008 ff0d 	bl	800d390 <sniprintf>
 8004576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800457a:	2206      	movs	r2, #6
 800457c:	491c      	ldr	r1, [pc, #112]	; (80045f0 <runBRTask+0x400>)
 800457e:	481d      	ldr	r0, [pc, #116]	; (80045f4 <runBRTask+0x404>)
 8004580:	f004 fe17 	bl	80091b2 <HAL_UART_Transmit>
 8004584:	e638      	b.n	80041f8 <runBRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004586:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <runBRTask+0x3f0>)
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <runBRTask+0x3f4>)
 800458c:	4914      	ldr	r1, [pc, #80]	; (80045e0 <runBRTask+0x3f0>)
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <runBRTask+0x3f0>)
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	3301      	adds	r3, #1
 800459c:	4a10      	ldr	r2, [pc, #64]	; (80045e0 <runBRTask+0x3f0>)
 800459e:	7892      	ldrb	r2, [r2, #2]
 80045a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80045a4:	fb01 f202 	mul.w	r2, r1, r2
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <runBRTask+0x3f0>)
 80045ae:	705a      	strb	r2, [r3, #1]
 80045b0:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <runBRTask+0x408>)
 80045b2:	210f      	movs	r1, #15
 80045b4:	480d      	ldr	r0, [pc, #52]	; (80045ec <runBRTask+0x3fc>)
 80045b6:	f008 feeb 	bl	800d390 <sniprintf>
    if (curTask != TASK_BR)
 80045ba:	e61d      	b.n	80041f8 <runBRTask+0x8>
 80045bc:	20000004 	.word	0x20000004
 80045c0:	20000210 	.word	0x20000210
 80045c4:	20000444 	.word	0x20000444
 80045c8:	40020000 	.word	0x40020000
 80045cc:	20000330 	.word	0x20000330
 80045d0:	20000458 	.word	0x20000458
 80045d4:	200004b0 	.word	0x200004b0
 80045d8:	20000134 	.word	0x20000134
 80045dc:	20000135 	.word	0x20000135
 80045e0:	200003f8 	.word	0x200003f8
 80045e4:	2000042c 	.word	0x2000042c
 80045e8:	0800dd90 	.word	0x0800dd90
 80045ec:	20000430 	.word	0x20000430
 80045f0:	0800dd98 	.word	0x0800dd98
 80045f4:	20000378 	.word	0x20000378
 80045f8:	0800dda0 	.word	0x0800dda0

080045fc <runADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
  for (;;)
  {
    if (curTask != TASK_ADC)
 8004604:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <runADCTask+0xa4>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d004      	beq.n	8004616 <runADCTask+0x1a>
      osDelay(1000);
 800460c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004610:	f005 ff1a 	bl	800a448 <osDelay>
 8004614:	e7f6      	b.n	8004604 <runADCTask+0x8>
    else
    {
      //			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
      //			last_curTask_tick = HAL_GetTick();
      __PEND_CURCMD(curCmd);
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <runADCTask+0xa8>)
 8004618:	2263      	movs	r2, #99	; 0x63
 800461a:	701a      	strb	r2, [r3, #0]
      targetDist = 40;
 800461c:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <runADCTask+0xac>)
 800461e:	4a23      	ldr	r2, [pc, #140]	; (80046ac <runADCTask+0xb0>)
 8004620:	601a      	str	r2, [r3, #0]
      //			  osDelay(5);
      //			} while (1);
      //
      //		  __ON_TASK_END(&htim8, prevTask, curTask);
      //		  HAL_ADC_Stop(&hadc1);
      clickOnce = 0;
 8004622:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <runADCTask+0xb4>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004628:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <runADCTask+0xa4>)
 800462a:	781a      	ldrb	r2, [r3, #0]
 800462c:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <runADCTask+0xb8>)
 800462e:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <runADCTask+0xa4>)
 8004632:	220b      	movs	r2, #11
 8004634:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <runADCTask+0xbc>)
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	4b1f      	ldr	r3, [pc, #124]	; (80046b8 <runADCTask+0xbc>)
 800463c:	785b      	ldrb	r3, [r3, #1]
 800463e:	429a      	cmp	r2, r3
 8004640:	d112      	bne.n	8004668 <runADCTask+0x6c>
      {
        __CLEAR_CURCMD(curCmd);
 8004642:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <runADCTask+0xa8>)
 8004644:	2264      	movs	r2, #100	; 0x64
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <runADCTask+0xa8>)
 800464a:	2200      	movs	r2, #0
 800464c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800464e:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <runADCTask+0xc0>)
 8004650:	210f      	movs	r1, #15
 8004652:	481b      	ldr	r0, [pc, #108]	; (80046c0 <runADCTask+0xc4>)
 8004654:	f008 fe9c 	bl	800d390 <sniprintf>
 8004658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800465c:	2206      	movs	r2, #6
 800465e:	4919      	ldr	r1, [pc, #100]	; (80046c4 <runADCTask+0xc8>)
 8004660:	4819      	ldr	r0, [pc, #100]	; (80046c8 <runADCTask+0xcc>)
 8004662:	f004 fda6 	bl	80091b2 <HAL_UART_Transmit>
 8004666:	e7cd      	b.n	8004604 <runADCTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <runADCTask+0xbc>)
 800466a:	785b      	ldrb	r3, [r3, #1]
 800466c:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <runADCTask+0xa8>)
 800466e:	4912      	ldr	r1, [pc, #72]	; (80046b8 <runADCTask+0xbc>)
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <runADCTask+0xbc>)
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	3301      	adds	r3, #1
 800467e:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <runADCTask+0xbc>)
 8004680:	7892      	ldrb	r2, [r2, #2]
 8004682:	fb93 f1f2 	sdiv	r1, r3, r2
 8004686:	fb01 f202 	mul.w	r2, r1, r2
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <runADCTask+0xbc>)
 8004690:	705a      	strb	r2, [r3, #1]
 8004692:	4a0e      	ldr	r2, [pc, #56]	; (80046cc <runADCTask+0xd0>)
 8004694:	210f      	movs	r1, #15
 8004696:	480a      	ldr	r0, [pc, #40]	; (80046c0 <runADCTask+0xc4>)
 8004698:	f008 fe7a 	bl	800d390 <sniprintf>
    if (curTask != TASK_ADC)
 800469c:	e7b2      	b.n	8004604 <runADCTask+0x8>
 800469e:	bf00      	nop
 80046a0:	20000134 	.word	0x20000134
 80046a4:	2000042c 	.word	0x2000042c
 80046a8:	20000458 	.word	0x20000458
 80046ac:	42200000 	.word	0x42200000
 80046b0:	200004b0 	.word	0x200004b0
 80046b4:	20000135 	.word	0x20000135
 80046b8:	200003f8 	.word	0x200003f8
 80046bc:	0800dd90 	.word	0x0800dd90
 80046c0:	20000430 	.word	0x20000430
 80046c4:	0800dd98 	.word	0x0800dd98
 80046c8:	20000378 	.word	0x20000378
 80046cc:	0800dda0 	.word	0x0800dda0

080046d0 <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 80046d8:	4bc7      	ldr	r3, [pc, #796]	; (80049f8 <runCmdTask+0x328>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	3b01      	subs	r3, #1
 80046de:	2b63      	cmp	r3, #99	; 0x63
 80046e0:	f200 82e2 	bhi.w	8004ca8 <runCmdTask+0x5d8>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <runCmdTask+0x1c>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	0800487d 	.word	0x0800487d
 80046f0:	0800488b 	.word	0x0800488b
 80046f4:	08004899 	.word	0x08004899
 80046f8:	08004899 	.word	0x08004899
 80046fc:	08004899 	.word	0x08004899
 8004700:	08004899 	.word	0x08004899
 8004704:	08004a6d 	.word	0x08004a6d
 8004708:	08004a7b 	.word	0x08004a7b
 800470c:	08004a89 	.word	0x08004a89
 8004710:	08004a97 	.word	0x08004a97
 8004714:	08004aa5 	.word	0x08004aa5
 8004718:	08004aa5 	.word	0x08004aa5
 800471c:	08004ca9 	.word	0x08004ca9
 8004720:	08004aef 	.word	0x08004aef
 8004724:	08004ca9 	.word	0x08004ca9
 8004728:	08004ca9 	.word	0x08004ca9
 800472c:	08004ca9 	.word	0x08004ca9
 8004730:	08004ca9 	.word	0x08004ca9
 8004734:	08004ca9 	.word	0x08004ca9
 8004738:	08004ca9 	.word	0x08004ca9
 800473c:	08004ca9 	.word	0x08004ca9
 8004740:	08004ca9 	.word	0x08004ca9
 8004744:	08004ca9 	.word	0x08004ca9
 8004748:	08004ca9 	.word	0x08004ca9
 800474c:	08004ca9 	.word	0x08004ca9
 8004750:	08004ca9 	.word	0x08004ca9
 8004754:	08004ca9 	.word	0x08004ca9
 8004758:	08004ca9 	.word	0x08004ca9
 800475c:	08004ca9 	.word	0x08004ca9
 8004760:	08004ca9 	.word	0x08004ca9
 8004764:	08004ca9 	.word	0x08004ca9
 8004768:	08004ca9 	.word	0x08004ca9
 800476c:	08004ca9 	.word	0x08004ca9
 8004770:	08004ca9 	.word	0x08004ca9
 8004774:	08004ca9 	.word	0x08004ca9
 8004778:	08004ca9 	.word	0x08004ca9
 800477c:	08004ca9 	.word	0x08004ca9
 8004780:	08004ca9 	.word	0x08004ca9
 8004784:	08004ca9 	.word	0x08004ca9
 8004788:	08004ca9 	.word	0x08004ca9
 800478c:	08004ca9 	.word	0x08004ca9
 8004790:	08004ca9 	.word	0x08004ca9
 8004794:	08004ca9 	.word	0x08004ca9
 8004798:	08004ca9 	.word	0x08004ca9
 800479c:	08004ca9 	.word	0x08004ca9
 80047a0:	08004ca9 	.word	0x08004ca9
 80047a4:	08004ca9 	.word	0x08004ca9
 80047a8:	08004ca9 	.word	0x08004ca9
 80047ac:	08004ca9 	.word	0x08004ca9
 80047b0:	08004ca9 	.word	0x08004ca9
 80047b4:	08004ca9 	.word	0x08004ca9
 80047b8:	08004ca9 	.word	0x08004ca9
 80047bc:	08004ca9 	.word	0x08004ca9
 80047c0:	08004ca9 	.word	0x08004ca9
 80047c4:	08004ca9 	.word	0x08004ca9
 80047c8:	08004ca9 	.word	0x08004ca9
 80047cc:	08004ca9 	.word	0x08004ca9
 80047d0:	08004ca9 	.word	0x08004ca9
 80047d4:	08004ca9 	.word	0x08004ca9
 80047d8:	08004ca9 	.word	0x08004ca9
 80047dc:	08004ca9 	.word	0x08004ca9
 80047e0:	08004ca9 	.word	0x08004ca9
 80047e4:	08004ca9 	.word	0x08004ca9
 80047e8:	08004ca9 	.word	0x08004ca9
 80047ec:	08004ca9 	.word	0x08004ca9
 80047f0:	08004ca9 	.word	0x08004ca9
 80047f4:	08004ca9 	.word	0x08004ca9
 80047f8:	08004ca9 	.word	0x08004ca9
 80047fc:	08004ca9 	.word	0x08004ca9
 8004800:	08004ca9 	.word	0x08004ca9
 8004804:	08004ca9 	.word	0x08004ca9
 8004808:	08004ca9 	.word	0x08004ca9
 800480c:	08004ca9 	.word	0x08004ca9
 8004810:	08004ca9 	.word	0x08004ca9
 8004814:	08004ca9 	.word	0x08004ca9
 8004818:	08004ca9 	.word	0x08004ca9
 800481c:	08004ca9 	.word	0x08004ca9
 8004820:	08004ca9 	.word	0x08004ca9
 8004824:	08004ca9 	.word	0x08004ca9
 8004828:	08004ca9 	.word	0x08004ca9
 800482c:	08004ca9 	.word	0x08004ca9
 8004830:	08004ca9 	.word	0x08004ca9
 8004834:	08004ca9 	.word	0x08004ca9
 8004838:	08004ca9 	.word	0x08004ca9
 800483c:	08004ca9 	.word	0x08004ca9
 8004840:	08004ca9 	.word	0x08004ca9
 8004844:	08004ca9 	.word	0x08004ca9
 8004848:	08004afd 	.word	0x08004afd
 800484c:	08004afd 	.word	0x08004afd
 8004850:	08004bd3 	.word	0x08004bd3
 8004854:	08004bd3 	.word	0x08004bd3
 8004858:	08004ca9 	.word	0x08004ca9
 800485c:	08004ca9 	.word	0x08004ca9
 8004860:	08004ca9 	.word	0x08004ca9
 8004864:	08004ca9 	.word	0x08004ca9
 8004868:	08004ca9 	.word	0x08004ca9
 800486c:	08004ca9 	.word	0x08004ca9
 8004870:	08004ca9 	.word	0x08004ca9
 8004874:	08004ca9 	.word	0x08004ca9
 8004878:	08004ca9 	.word	0x08004ca9
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
      curTask = TASK_MOVE_FORWARD;
 800487c:	4b5f      	ldr	r3, [pc, #380]	; (80049fc <runCmdTask+0x32c>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004882:	4b5d      	ldr	r3, [pc, #372]	; (80049f8 <runCmdTask+0x328>)
 8004884:	2263      	movs	r2, #99	; 0x63
 8004886:	701a      	strb	r2, [r3, #0]
      break;
 8004888:	e20f      	b.n	8004caa <runCmdTask+0x5da>
    case 2: // BW
      curTask = TASK_MOVE_BACKWARD;
 800488a:	4b5c      	ldr	r3, [pc, #368]	; (80049fc <runCmdTask+0x32c>)
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004890:	4b59      	ldr	r3, [pc, #356]	; (80049f8 <runCmdTask+0x328>)
 8004892:	2263      	movs	r2, #99	; 0x63
 8004894:	701a      	strb	r2, [r3, #0]
      break;
 8004896:	e208      	b.n	8004caa <runCmdTask+0x5da>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8004898:	4b57      	ldr	r3, [pc, #348]	; (80049f8 <runCmdTask+0x328>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	4a58      	ldr	r2, [pc, #352]	; (8004a00 <runCmdTask+0x330>)
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	4413      	add	r3, r2
 80048a2:	3304      	adds	r3, #4
 80048a4:	edd3 7a00 	vldr	s15, [r3]
 80048a8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004a04 <runCmdTask+0x334>
 80048ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b4:	dd02      	ble.n	80048bc <runCmdTask+0x1ec>
 80048b6:	f240 1309 	movw	r3, #265	; 0x109
 80048ba:	e01c      	b.n	80048f6 <runCmdTask+0x226>
 80048bc:	4b4e      	ldr	r3, [pc, #312]	; (80049f8 <runCmdTask+0x328>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	4a4f      	ldr	r2, [pc, #316]	; (8004a00 <runCmdTask+0x330>)
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	4413      	add	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	edd3 7a00 	vldr	s15, [r3]
 80048cc:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004a08 <runCmdTask+0x338>
 80048d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d8:	d501      	bpl.n	80048de <runCmdTask+0x20e>
 80048da:	2346      	movs	r3, #70	; 0x46
 80048dc:	e00b      	b.n	80048f6 <runCmdTask+0x226>
 80048de:	4b46      	ldr	r3, [pc, #280]	; (80049f8 <runCmdTask+0x328>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	4a47      	ldr	r2, [pc, #284]	; (8004a00 <runCmdTask+0x330>)
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	4413      	add	r3, r2
 80048e8:	3304      	adds	r3, #4
 80048ea:	edd3 7a00 	vldr	s15, [r3]
 80048ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f2:	ee17 3a90 	vmov	r3, s15
 80048f6:	4a45      	ldr	r2, [pc, #276]	; (8004a0c <runCmdTask+0x33c>)
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	6413      	str	r3, [r2, #64]	; 0x40
 80048fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004900:	f000 fdf0 	bl	80054e4 <HAL_Delay>
 8004904:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <runCmdTask+0x328>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <runCmdTask+0x330>)
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	4413      	add	r3, r2
 800490e:	3308      	adds	r3, #8
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3f      	ldr	r2, [pc, #252]	; (8004a10 <runCmdTask+0x340>)
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b38      	ldr	r3, [pc, #224]	; (80049f8 <runCmdTask+0x328>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	4a39      	ldr	r2, [pc, #228]	; (8004a00 <runCmdTask+0x330>)
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	4413      	add	r3, r2
 8004920:	330c      	adds	r3, #12
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	2104      	movs	r1, #4
 8004932:	4838      	ldr	r0, [pc, #224]	; (8004a14 <runCmdTask+0x344>)
 8004934:	f001 f90a 	bl	8005b4c <HAL_GPIO_WritePin>
 8004938:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <runCmdTask+0x328>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	4a30      	ldr	r2, [pc, #192]	; (8004a00 <runCmdTask+0x330>)
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	4413      	add	r3, r2
 8004942:	330c      	adds	r3, #12
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	2108      	movs	r1, #8
 8004954:	482f      	ldr	r0, [pc, #188]	; (8004a14 <runCmdTask+0x344>)
 8004956:	f001 f8f9 	bl	8005b4c <HAL_GPIO_WritePin>
 800495a:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <runCmdTask+0x328>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <runCmdTask+0x330>)
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	4413      	add	r3, r2
 8004964:	330c      	adds	r3, #12
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	2120      	movs	r1, #32
 8004976:	4827      	ldr	r0, [pc, #156]	; (8004a14 <runCmdTask+0x344>)
 8004978:	f001 f8e8 	bl	8005b4c <HAL_GPIO_WritePin>
 800497c:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <runCmdTask+0x328>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	4a1f      	ldr	r2, [pc, #124]	; (8004a00 <runCmdTask+0x330>)
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4413      	add	r3, r2
 8004986:	330c      	adds	r3, #12
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf14      	ite	ne
 800498e:	2301      	movne	r3, #1
 8004990:	2300      	moveq	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	2110      	movs	r1, #16
 8004998:	481e      	ldr	r0, [pc, #120]	; (8004a14 <runCmdTask+0x344>)
 800499a:	f001 f8d7 	bl	8005b4c <HAL_GPIO_WritePin>
 800499e:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <runCmdTask+0x328>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	4a17      	ldr	r2, [pc, #92]	; (8004a00 <runCmdTask+0x330>)
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	4413      	add	r3, r2
 80049a8:	881a      	ldrh	r2, [r3, #0]
 80049aa:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <runCmdTask+0x348>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	635a      	str	r2, [r3, #52]	; 0x34
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <runCmdTask+0x328>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <runCmdTask+0x330>)
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	4413      	add	r3, r2
 80049ba:	3302      	adds	r3, #2
 80049bc:	881a      	ldrh	r2, [r3, #0]
 80049be:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <runCmdTask+0x348>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80049c4:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <runCmdTask+0x34c>)
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <runCmdTask+0x34c>)
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d12f      	bne.n	8004a30 <runCmdTask+0x360>
      {
        __CLEAR_CURCMD(curCmd);
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <runCmdTask+0x328>)
 80049d2:	2264      	movs	r2, #100	; 0x64
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <runCmdTask+0x328>)
 80049d8:	2200      	movs	r2, #0
 80049da:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80049dc:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <runCmdTask+0x350>)
 80049de:	210f      	movs	r1, #15
 80049e0:	4810      	ldr	r0, [pc, #64]	; (8004a24 <runCmdTask+0x354>)
 80049e2:	f008 fcd5 	bl	800d390 <sniprintf>
 80049e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ea:	2206      	movs	r2, #6
 80049ec:	490e      	ldr	r1, [pc, #56]	; (8004a28 <runCmdTask+0x358>)
 80049ee:	480f      	ldr	r0, [pc, #60]	; (8004a2c <runCmdTask+0x35c>)
 80049f0:	f004 fbdf 	bl	80091b2 <HAL_UART_Transmit>
 80049f4:	e036      	b.n	8004a64 <runCmdTask+0x394>
 80049f6:	bf00      	nop
 80049f8:	2000042c 	.word	0x2000042c
 80049fc:	20000134 	.word	0x20000134
 8004a00:	20000004 	.word	0x20000004
 8004a04:	43848000 	.word	0x43848000
 8004a08:	428c0000 	.word	0x428c0000
 8004a0c:	20000210 	.word	0x20000210
 8004a10:	20000444 	.word	0x20000444
 8004a14:	40020000 	.word	0x40020000
 8004a18:	20000330 	.word	0x20000330
 8004a1c:	200003f8 	.word	0x200003f8
 8004a20:	0800dd90 	.word	0x0800dd90
 8004a24:	20000430 	.word	0x20000430
 8004a28:	0800dd98 	.word	0x0800dd98
 8004a2c:	20000378 	.word	0x20000378
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004a30:	4ba0      	ldr	r3, [pc, #640]	; (8004cb4 <runCmdTask+0x5e4>)
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	4aa0      	ldr	r2, [pc, #640]	; (8004cb8 <runCmdTask+0x5e8>)
 8004a36:	499f      	ldr	r1, [pc, #636]	; (8004cb4 <runCmdTask+0x5e4>)
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b9c      	ldr	r3, [pc, #624]	; (8004cb4 <runCmdTask+0x5e4>)
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a9b      	ldr	r2, [pc, #620]	; (8004cb4 <runCmdTask+0x5e4>)
 8004a48:	7892      	ldrb	r2, [r2, #2]
 8004a4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a4e:	fb01 f202 	mul.w	r2, r1, r2
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	4b97      	ldr	r3, [pc, #604]	; (8004cb4 <runCmdTask+0x5e4>)
 8004a58:	705a      	strb	r2, [r3, #1]
 8004a5a:	4a98      	ldr	r2, [pc, #608]	; (8004cbc <runCmdTask+0x5ec>)
 8004a5c:	210f      	movs	r1, #15
 8004a5e:	4898      	ldr	r0, [pc, #608]	; (8004cc0 <runCmdTask+0x5f0>)
 8004a60:	f008 fc96 	bl	800d390 <sniprintf>
      __PEND_CURCMD(curCmd);
 8004a64:	4b94      	ldr	r3, [pc, #592]	; (8004cb8 <runCmdTask+0x5e8>)
 8004a66:	2263      	movs	r2, #99	; 0x63
 8004a68:	701a      	strb	r2, [r3, #0]
      break;
 8004a6a:	e11e      	b.n	8004caa <runCmdTask+0x5da>
    case 7: // FL
      curTask = TASK_FL;
 8004a6c:	4b95      	ldr	r3, [pc, #596]	; (8004cc4 <runCmdTask+0x5f4>)
 8004a6e:	2202      	movs	r2, #2
 8004a70:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004a72:	4b91      	ldr	r3, [pc, #580]	; (8004cb8 <runCmdTask+0x5e8>)
 8004a74:	2263      	movs	r2, #99	; 0x63
 8004a76:	701a      	strb	r2, [r3, #0]
      break;
 8004a78:	e117      	b.n	8004caa <runCmdTask+0x5da>
    case 8: // FR
      curTask = TASK_FR;
 8004a7a:	4b92      	ldr	r3, [pc, #584]	; (8004cc4 <runCmdTask+0x5f4>)
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004a80:	4b8d      	ldr	r3, [pc, #564]	; (8004cb8 <runCmdTask+0x5e8>)
 8004a82:	2263      	movs	r2, #99	; 0x63
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	e110      	b.n	8004caa <runCmdTask+0x5da>
    case 9: // BL
      curTask = TASK_BL;
 8004a88:	4b8e      	ldr	r3, [pc, #568]	; (8004cc4 <runCmdTask+0x5f4>)
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004a8e:	4b8a      	ldr	r3, [pc, #552]	; (8004cb8 <runCmdTask+0x5e8>)
 8004a90:	2263      	movs	r2, #99	; 0x63
 8004a92:	701a      	strb	r2, [r3, #0]
      break;
 8004a94:	e109      	b.n	8004caa <runCmdTask+0x5da>
    case 10: // BR
      curTask = TASK_BR;
 8004a96:	4b8b      	ldr	r3, [pc, #556]	; (8004cc4 <runCmdTask+0x5f4>)
 8004a98:	2205      	movs	r2, #5
 8004a9a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004a9c:	4b86      	ldr	r3, [pc, #536]	; (8004cb8 <runCmdTask+0x5e8>)
 8004a9e:	2263      	movs	r2, #99	; 0x63
 8004aa0:	701a      	strb	r2, [r3, #0]
      break;
 8004aa2:	e102      	b.n	8004caa <runCmdTask+0x5da>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8004aa4:	4b84      	ldr	r3, [pc, #528]	; (8004cb8 <runCmdTask+0x5e8>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b0b      	cmp	r3, #11
 8004aaa:	d005      	beq.n	8004ab8 <runCmdTask+0x3e8>
 8004aac:	4b86      	ldr	r3, [pc, #536]	; (8004cc8 <runCmdTask+0x5f8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f240 1209 	movw	r2, #265	; 0x109
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ab6:	e003      	b.n	8004ac0 <runCmdTask+0x3f0>
 8004ab8:	4b83      	ldr	r3, [pc, #524]	; (8004cc8 <runCmdTask+0x5f8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2246      	movs	r2, #70	; 0x46
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
 8004ac0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004ac4:	f000 fd0e 	bl	80054e4 <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 8004ac8:	4b7b      	ldr	r3, [pc, #492]	; (8004cb8 <runCmdTask+0x5e8>)
 8004aca:	2264      	movs	r2, #100	; 0x64
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	4b7a      	ldr	r3, [pc, #488]	; (8004cb8 <runCmdTask+0x5e8>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8004ad4:	4a7d      	ldr	r2, [pc, #500]	; (8004ccc <runCmdTask+0x5fc>)
 8004ad6:	210f      	movs	r1, #15
 8004ad8:	4879      	ldr	r0, [pc, #484]	; (8004cc0 <runCmdTask+0x5f0>)
 8004ada:	f008 fc59 	bl	800d390 <sniprintf>
 8004ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ae2:	2206      	movs	r2, #6
 8004ae4:	497a      	ldr	r1, [pc, #488]	; (8004cd0 <runCmdTask+0x600>)
 8004ae6:	487b      	ldr	r0, [pc, #492]	; (8004cd4 <runCmdTask+0x604>)
 8004ae8:	f004 fb63 	bl	80091b2 <HAL_UART_Transmit>
      break;
 8004aec:	e0dd      	b.n	8004caa <runCmdTask+0x5da>
    case 13: // debug IR sensor
      // curTask = TASK_ADC;
      break;
    case 14: // DT move until specified distance from obstacle
      curTask = TASK_MOVE_OBS;
 8004aee:	4b75      	ldr	r3, [pc, #468]	; (8004cc4 <runCmdTask+0x5f4>)
 8004af0:	2209      	movs	r2, #9
 8004af2:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004af4:	4b70      	ldr	r3, [pc, #448]	; (8004cb8 <runCmdTask+0x5e8>)
 8004af6:	2263      	movs	r2, #99	; 0x63
 8004af8:	701a      	strb	r2, [r3, #0]
      break;
 8004afa:	e0d6      	b.n	8004caa <runCmdTask+0x5da>

      // FIXME:find the motor duty combination to balance between speed and accuracy

    case 88: // FAxxx, forward rotate left by xxx degree
    case 89: // FCxxx, forward rotate right by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 8004afc:	4b6e      	ldr	r3, [pc, #440]	; (8004cb8 <runCmdTask+0x5e8>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b58      	cmp	r3, #88	; 0x58
 8004b02:	d005      	beq.n	8004b10 <runCmdTask+0x440>
 8004b04:	4b70      	ldr	r3, [pc, #448]	; (8004cc8 <runCmdTask+0x5f8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f240 1209 	movw	r2, #265	; 0x109
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b0e:	e003      	b.n	8004b18 <runCmdTask+0x448>
 8004b10:	4b6d      	ldr	r3, [pc, #436]	; (8004cc8 <runCmdTask+0x5f8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2246      	movs	r2, #70	; 0x46
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40
 8004b18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004b1c:	f000 fce2 	bl	80054e4 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004b20:	2200      	movs	r2, #0
 8004b22:	2104      	movs	r1, #4
 8004b24:	486c      	ldr	r0, [pc, #432]	; (8004cd8 <runCmdTask+0x608>)
 8004b26:	f001 f811 	bl	8005b4c <HAL_GPIO_WritePin>
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	2108      	movs	r1, #8
 8004b2e:	486a      	ldr	r0, [pc, #424]	; (8004cd8 <runCmdTask+0x608>)
 8004b30:	f001 f80c 	bl	8005b4c <HAL_GPIO_WritePin>
 8004b34:	2200      	movs	r2, #0
 8004b36:	2120      	movs	r1, #32
 8004b38:	4867      	ldr	r0, [pc, #412]	; (8004cd8 <runCmdTask+0x608>)
 8004b3a:	f001 f807 	bl	8005b4c <HAL_GPIO_WritePin>
 8004b3e:	2201      	movs	r2, #1
 8004b40:	2110      	movs	r1, #16
 8004b42:	4865      	ldr	r0, [pc, #404]	; (8004cd8 <runCmdTask+0x608>)
 8004b44:	f001 f802 	bl	8005b4c <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 8004b48:	4b5b      	ldr	r3, [pc, #364]	; (8004cb8 <runCmdTask+0x5e8>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b58      	cmp	r3, #88	; 0x58
 8004b4e:	d113      	bne.n	8004b78 <runCmdTask+0x4a8>
      {
        targetAngle = curCmd.val;
 8004b50:	4b59      	ldr	r3, [pc, #356]	; (8004cb8 <runCmdTask+0x5e8>)
 8004b52:	885b      	ldrh	r3, [r3, #2]
 8004b54:	ee07 3a90 	vmov	s15, r3
 8004b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5c:	4b5f      	ldr	r3, [pc, #380]	; (8004cdc <runCmdTask+0x60c>)
 8004b5e:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8004b62:	4b5f      	ldr	r3, [pc, #380]	; (8004ce0 <runCmdTask+0x610>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f240 5235 	movw	r2, #1333	; 0x535
 8004b6a:	635a      	str	r2, [r3, #52]	; 0x34
 8004b6c:	4b5c      	ldr	r3, [pc, #368]	; (8004ce0 <runCmdTask+0x610>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
 8004b76:	e013      	b.n	8004ba0 <runCmdTask+0x4d0>
      }
      else
      {
        targetAngle = -curCmd.val;
 8004b78:	4b4f      	ldr	r3, [pc, #316]	; (8004cb8 <runCmdTask+0x5e8>)
 8004b7a:	885b      	ldrh	r3, [r3, #2]
 8004b7c:	425b      	negs	r3, r3
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b86:	4b55      	ldr	r3, [pc, #340]	; (8004cdc <runCmdTask+0x60c>)
 8004b88:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8004b8c:	4b54      	ldr	r3, [pc, #336]	; (8004ce0 <runCmdTask+0x610>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b94:	635a      	str	r2, [r3, #52]	; 0x34
 8004b96:	4b52      	ldr	r3, [pc, #328]	; (8004ce0 <runCmdTask+0x610>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f240 5235 	movw	r2, #1333	; 0x535
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8004ba0:	4b45      	ldr	r3, [pc, #276]	; (8004cb8 <runCmdTask+0x5e8>)
 8004ba2:	2263      	movs	r2, #99	; 0x63
 8004ba4:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8004ba6:	484d      	ldr	r0, [pc, #308]	; (8004cdc <runCmdTask+0x60c>)
 8004ba8:	f7fe f8ca 	bl	8002d40 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 8004bac:	4b42      	ldr	r3, [pc, #264]	; (8004cb8 <runCmdTask+0x5e8>)
 8004bae:	2264      	movs	r2, #100	; 0x64
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	4b41      	ldr	r3, [pc, #260]	; (8004cb8 <runCmdTask+0x5e8>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8004bb8:	4a44      	ldr	r2, [pc, #272]	; (8004ccc <runCmdTask+0x5fc>)
 8004bba:	210f      	movs	r1, #15
 8004bbc:	4840      	ldr	r0, [pc, #256]	; (8004cc0 <runCmdTask+0x5f0>)
 8004bbe:	f008 fbe7 	bl	800d390 <sniprintf>
 8004bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bc6:	2206      	movs	r2, #6
 8004bc8:	4941      	ldr	r1, [pc, #260]	; (8004cd0 <runCmdTask+0x600>)
 8004bca:	4842      	ldr	r0, [pc, #264]	; (8004cd4 <runCmdTask+0x604>)
 8004bcc:	f004 faf1 	bl	80091b2 <HAL_UART_Transmit>
      break;
 8004bd0:	e06b      	b.n	8004caa <runCmdTask+0x5da>
    case 90: // BAxxx, backward rotate right by xxx degree
    case 91: // BCxxx, backward rotate left by xxx degree

      // To offset the stm and robot center difference:

      __SET_SERVO_TURN_MAX(&htim1, (int)(!(curCmd.index - 90)));
 8004bd2:	4b39      	ldr	r3, [pc, #228]	; (8004cb8 <runCmdTask+0x5e8>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b5a      	cmp	r3, #90	; 0x5a
 8004bd8:	d105      	bne.n	8004be6 <runCmdTask+0x516>
 8004bda:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <runCmdTask+0x5f8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f240 1209 	movw	r2, #265	; 0x109
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
 8004be4:	e003      	b.n	8004bee <runCmdTask+0x51e>
 8004be6:	4b38      	ldr	r3, [pc, #224]	; (8004cc8 <runCmdTask+0x5f8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2246      	movs	r2, #70	; 0x46
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
 8004bee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004bf2:	f000 fc77 	bl	80054e4 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	2104      	movs	r1, #4
 8004bfa:	4837      	ldr	r0, [pc, #220]	; (8004cd8 <runCmdTask+0x608>)
 8004bfc:	f000 ffa6 	bl	8005b4c <HAL_GPIO_WritePin>
 8004c00:	2200      	movs	r2, #0
 8004c02:	2108      	movs	r1, #8
 8004c04:	4834      	ldr	r0, [pc, #208]	; (8004cd8 <runCmdTask+0x608>)
 8004c06:	f000 ffa1 	bl	8005b4c <HAL_GPIO_WritePin>
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	2120      	movs	r1, #32
 8004c0e:	4832      	ldr	r0, [pc, #200]	; (8004cd8 <runCmdTask+0x608>)
 8004c10:	f000 ff9c 	bl	8005b4c <HAL_GPIO_WritePin>
 8004c14:	2200      	movs	r2, #0
 8004c16:	2110      	movs	r1, #16
 8004c18:	482f      	ldr	r0, [pc, #188]	; (8004cd8 <runCmdTask+0x608>)
 8004c1a:	f000 ff97 	bl	8005b4c <HAL_GPIO_WritePin>
      if (curCmd.index == 90)
 8004c1e:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <runCmdTask+0x5e8>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b5a      	cmp	r3, #90	; 0x5a
 8004c24:	d113      	bne.n	8004c4e <runCmdTask+0x57e>
      {

        targetAngle = curCmd.val;
 8004c26:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <runCmdTask+0x5e8>)
 8004c28:	885b      	ldrh	r3, [r3, #2]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <runCmdTask+0x60c>)
 8004c34:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8004c38:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <runCmdTask+0x610>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c40:	635a      	str	r2, [r3, #52]	; 0x34
 8004c42:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <runCmdTask+0x610>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f240 5235 	movw	r2, #1333	; 0x535
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c4c:	e013      	b.n	8004c76 <runCmdTask+0x5a6>
      }
      else
      {
        targetAngle = -curCmd.val;
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <runCmdTask+0x5e8>)
 8004c50:	885b      	ldrh	r3, [r3, #2]
 8004c52:	425b      	negs	r3, r3
 8004c54:	ee07 3a90 	vmov	s15, r3
 8004c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <runCmdTask+0x60c>)
 8004c5e:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8004c62:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <runCmdTask+0x610>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f240 5235 	movw	r2, #1333	; 0x535
 8004c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <runCmdTask+0x610>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8004c76:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <runCmdTask+0x5e8>)
 8004c78:	2263      	movs	r2, #99	; 0x63
 8004c7a:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8004c7c:	4817      	ldr	r0, [pc, #92]	; (8004cdc <runCmdTask+0x60c>)
 8004c7e:	f7fe f85f 	bl	8002d40 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 8004c82:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <runCmdTask+0x5e8>)
 8004c84:	2264      	movs	r2, #100	; 0x64
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <runCmdTask+0x5e8>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ccc <runCmdTask+0x5fc>)
 8004c90:	210f      	movs	r1, #15
 8004c92:	480b      	ldr	r0, [pc, #44]	; (8004cc0 <runCmdTask+0x5f0>)
 8004c94:	f008 fb7c 	bl	800d390 <sniprintf>
 8004c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c9c:	2206      	movs	r2, #6
 8004c9e:	490c      	ldr	r1, [pc, #48]	; (8004cd0 <runCmdTask+0x600>)
 8004ca0:	480c      	ldr	r0, [pc, #48]	; (8004cd4 <runCmdTask+0x604>)
 8004ca2:	f004 fa86 	bl	80091b2 <HAL_UART_Transmit>
      break;
 8004ca6:	e000      	b.n	8004caa <runCmdTask+0x5da>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8004ca8:	bf00      	nop
    }
    osDelay(1);
 8004caa:	2001      	movs	r0, #1
 8004cac:	f005 fbcc 	bl	800a448 <osDelay>
    switch (curCmd.index)
 8004cb0:	e512      	b.n	80046d8 <runCmdTask+0x8>
 8004cb2:	bf00      	nop
 8004cb4:	200003f8 	.word	0x200003f8
 8004cb8:	2000042c 	.word	0x2000042c
 8004cbc:	0800dda0 	.word	0x0800dda0
 8004cc0:	20000430 	.word	0x20000430
 8004cc4:	20000134 	.word	0x20000134
 8004cc8:	20000210 	.word	0x20000210
 8004ccc:	0800dd90 	.word	0x0800dd90
 8004cd0:	0800dd98 	.word	0x0800dd98
 8004cd4:	20000378 	.word	0x20000378
 8004cd8:	40020000 	.word	0x40020000
 8004cdc:	20000444 	.word	0x20000444
 8004ce0:	20000330 	.word	0x20000330

08004ce4 <runMoveDistObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS)
 8004cec:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <runMoveDistObsTask+0xc0>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b09      	cmp	r3, #9
 8004cf2:	d004      	beq.n	8004cfe <runMoveDistObsTask+0x1a>
      osDelay(1000);
 8004cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cf8:	f005 fba6 	bl	800a448 <osDelay>
 8004cfc:	e7f6      	b.n	8004cec <runMoveDistObsTask+0x8>
    else
    {
      targetDist = (float)curCmd.val;
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <runMoveDistObsTask+0xc4>)
 8004d00:	885b      	ldrh	r3, [r3, #2]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	4b28      	ldr	r3, [pc, #160]	; (8004dac <runMoveDistObsTask+0xc8>)
 8004d0c:	edc3 7a00 	vstr	s15, [r3]
      RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8004d10:	2102      	movs	r1, #2
 8004d12:	4826      	ldr	r0, [pc, #152]	; (8004dac <runMoveDistObsTask+0xc8>)
 8004d14:	f7fe f8c0 	bl	8002e98 <RobotMoveDistObstacle>

      __ON_TASK_END(&htim8, prevTask, curTask);
 8004d18:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <runMoveDistObsTask+0xcc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	635a      	str	r2, [r3, #52]	; 0x34
 8004d20:	4b23      	ldr	r3, [pc, #140]	; (8004db0 <runMoveDistObsTask+0xcc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2200      	movs	r2, #0
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
 8004d28:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <runMoveDistObsTask+0xc0>)
 8004d2a:	781a      	ldrb	r2, [r3, #0]
 8004d2c:	4b21      	ldr	r3, [pc, #132]	; (8004db4 <runMoveDistObsTask+0xd0>)
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	4b1c      	ldr	r3, [pc, #112]	; (8004da4 <runMoveDistObsTask+0xc0>)
 8004d32:	220b      	movs	r2, #11
 8004d34:	701a      	strb	r2, [r3, #0]
      clickOnce = 0;
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <runMoveDistObsTask+0xd4>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004d3c:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <runMoveDistObsTask+0xd8>)
 8004d3e:	781a      	ldrb	r2, [r3, #0]
 8004d40:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <runMoveDistObsTask+0xd8>)
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d112      	bne.n	8004d6e <runMoveDistObsTask+0x8a>
      {
        __CLEAR_CURCMD(curCmd);
 8004d48:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <runMoveDistObsTask+0xc4>)
 8004d4a:	2264      	movs	r2, #100	; 0x64
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	4b16      	ldr	r3, [pc, #88]	; (8004da8 <runMoveDistObsTask+0xc4>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004d54:	4a1a      	ldr	r2, [pc, #104]	; (8004dc0 <runMoveDistObsTask+0xdc>)
 8004d56:	210f      	movs	r1, #15
 8004d58:	481a      	ldr	r0, [pc, #104]	; (8004dc4 <runMoveDistObsTask+0xe0>)
 8004d5a:	f008 fb19 	bl	800d390 <sniprintf>
 8004d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d62:	2206      	movs	r2, #6
 8004d64:	4918      	ldr	r1, [pc, #96]	; (8004dc8 <runMoveDistObsTask+0xe4>)
 8004d66:	4819      	ldr	r0, [pc, #100]	; (8004dcc <runMoveDistObsTask+0xe8>)
 8004d68:	f004 fa23 	bl	80091b2 <HAL_UART_Transmit>
 8004d6c:	e7be      	b.n	8004cec <runMoveDistObsTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <runMoveDistObsTask+0xd8>)
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <runMoveDistObsTask+0xc4>)
 8004d74:	4911      	ldr	r1, [pc, #68]	; (8004dbc <runMoveDistObsTask+0xd8>)
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <runMoveDistObsTask+0xd8>)
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <runMoveDistObsTask+0xd8>)
 8004d86:	7892      	ldrb	r2, [r2, #2]
 8004d88:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d8c:	fb01 f202 	mul.w	r2, r1, r2
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <runMoveDistObsTask+0xd8>)
 8004d96:	705a      	strb	r2, [r3, #1]
 8004d98:	4a0d      	ldr	r2, [pc, #52]	; (8004dd0 <runMoveDistObsTask+0xec>)
 8004d9a:	210f      	movs	r1, #15
 8004d9c:	4809      	ldr	r0, [pc, #36]	; (8004dc4 <runMoveDistObsTask+0xe0>)
 8004d9e:	f008 faf7 	bl	800d390 <sniprintf>
    if (curTask != TASK_MOVE_OBS)
 8004da2:	e7a3      	b.n	8004cec <runMoveDistObsTask+0x8>
 8004da4:	20000134 	.word	0x20000134
 8004da8:	2000042c 	.word	0x2000042c
 8004dac:	20000458 	.word	0x20000458
 8004db0:	20000330 	.word	0x20000330
 8004db4:	20000135 	.word	0x20000135
 8004db8:	200004b0 	.word	0x200004b0
 8004dbc:	200003f8 	.word	0x200003f8
 8004dc0:	0800dd90 	.word	0x0800dd90
 8004dc4:	20000430 	.word	0x20000430
 8004dc8:	0800dd98 	.word	0x0800dd98
 8004dcc:	20000378 	.word	0x20000378
 8004dd0:	0800dda0 	.word	0x0800dda0

08004dd4 <runNavArdObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runNavArdObsTask */
void runNavArdObsTask(void *argument)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runNavArdObsTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f005 fb33 	bl	800a448 <osDelay>
 8004de2:	e7fb      	b.n	8004ddc <runNavArdObsTask+0x8>

08004de4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8004df6:	f000 fb55 	bl	80054a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40000800 	.word	0x40000800

08004e08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e0c:	b672      	cpsid	i
}
 8004e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e10:	e7fe      	b.n	8004e10 <Error_Handler+0x8>
	...

08004e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <HAL_MspInit+0x54>)
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <HAL_MspInit+0x54>)
 8004e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e28:	6453      	str	r3, [r2, #68]	; 0x44
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <HAL_MspInit+0x54>)
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e32:	607b      	str	r3, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_MspInit+0x54>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <HAL_MspInit+0x54>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <HAL_MspInit+0x54>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e52:	2200      	movs	r2, #0
 8004e54:	210f      	movs	r1, #15
 8004e56:	f06f 0001 	mvn.w	r0, #1
 8004e5a:	f000 fc1f 	bl	800569c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800

08004e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e74:	f107 0314 	add.w	r3, r7, #20
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	609a      	str	r2, [r3, #8]
 8004e80:	60da      	str	r2, [r3, #12]
 8004e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_I2C_MspInit+0x84>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d12c      	bne.n	8004ee8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	4b18      	ldr	r3, [pc, #96]	; (8004ef4 <HAL_I2C_MspInit+0x88>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <HAL_I2C_MspInit+0x88>)
 8004e98:	f043 0302 	orr.w	r3, r3, #2
 8004e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9e:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <HAL_I2C_MspInit+0x88>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eb0:	2312      	movs	r3, #18
 8004eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec0:	f107 0314 	add.w	r3, r7, #20
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	480c      	ldr	r0, [pc, #48]	; (8004ef8 <HAL_I2C_MspInit+0x8c>)
 8004ec8:	f000 fca4 	bl	8005814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <HAL_I2C_MspInit+0x88>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <HAL_I2C_MspInit+0x88>)
 8004ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eda:	6413      	str	r3, [r2, #64]	; 0x40
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <HAL_I2C_MspInit+0x88>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ee8:	bf00      	nop
 8004eea:	3728      	adds	r7, #40	; 0x28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40005400 	.word	0x40005400
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40020400 	.word	0x40020400

08004efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08e      	sub	sp, #56	; 0x38
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a4e      	ldr	r2, [pc, #312]	; (8005054 <HAL_TIM_Base_MspInit+0x158>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d116      	bne.n	8004f4c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	4b4d      	ldr	r3, [pc, #308]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f26:	4a4c      	ldr	r2, [pc, #304]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f2e:	4b4a      	ldr	r3, [pc, #296]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	623b      	str	r3, [r7, #32]
 8004f38:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2105      	movs	r1, #5
 8004f3e:	201b      	movs	r0, #27
 8004f40:	f000 fbac 	bl	800569c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004f44:	201b      	movs	r0, #27
 8004f46:	f000 fbc5 	bl	80056d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004f4a:	e07e      	b.n	800504a <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a42      	ldr	r2, [pc, #264]	; (800505c <HAL_TIM_Base_MspInit+0x160>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d134      	bne.n	8004fc0 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	4b3f      	ldr	r3, [pc, #252]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	4a3e      	ldr	r2, [pc, #248]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004f60:	f043 0302 	orr.w	r3, r3, #2
 8004f64:	6413      	str	r3, [r2, #64]	; 0x40
 8004f66:	4b3c      	ldr	r3, [pc, #240]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	4b38      	ldr	r3, [pc, #224]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	4a37      	ldr	r2, [pc, #220]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004f7c:	f043 0302 	orr.w	r3, r3, #2
 8004f80:	6313      	str	r3, [r2, #48]	; 0x30
 8004f82:	4b35      	ldr	r3, [pc, #212]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = US_Echo_Pin;
 8004f8e:	2320      	movs	r3, #32
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f92:	2302      	movs	r3, #2
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(US_Echo_GPIO_Port, &GPIO_InitStruct);
 8004fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	482d      	ldr	r0, [pc, #180]	; (8005060 <HAL_TIM_Base_MspInit+0x164>)
 8004faa:	f000 fc33 	bl	8005814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2105      	movs	r1, #5
 8004fb2:	201d      	movs	r0, #29
 8004fb4:	f000 fb72 	bl	800569c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004fb8:	201d      	movs	r0, #29
 8004fba:	f000 fb8b 	bl	80056d4 <HAL_NVIC_EnableIRQ>
}
 8004fbe:	e044      	b.n	800504a <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM6)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a27      	ldr	r2, [pc, #156]	; (8005064 <HAL_TIM_Base_MspInit+0x168>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	4b22      	ldr	r3, [pc, #136]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	4a21      	ldr	r2, [pc, #132]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004fd4:	f043 0310 	orr.w	r3, r3, #16
 8004fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fda:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	697b      	ldr	r3, [r7, #20]
}
 8004fe6:	e030      	b.n	800504a <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM8)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <HAL_TIM_Base_MspInit+0x16c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d12b      	bne.n	800504a <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	4b18      	ldr	r3, [pc, #96]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8004ffc:	f043 0302 	orr.w	r3, r3, #2
 8005000:	6453      	str	r3, [r2, #68]	; 0x44
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	4b11      	ldr	r3, [pc, #68]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	4a10      	ldr	r2, [pc, #64]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8005018:	f043 0304 	orr.w	r3, r3, #4
 800501c:	6313      	str	r3, [r2, #48]	; 0x30
 800501e:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <HAL_TIM_Base_MspInit+0x15c>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800502a:	23c0      	movs	r3, #192	; 0xc0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502e:	2302      	movs	r3, #2
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005032:	2300      	movs	r3, #0
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005036:	2300      	movs	r3, #0
 8005038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800503a:	2303      	movs	r3, #3
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800503e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005042:	4619      	mov	r1, r3
 8005044:	4809      	ldr	r0, [pc, #36]	; (800506c <HAL_TIM_Base_MspInit+0x170>)
 8005046:	f000 fbe5 	bl	8005814 <HAL_GPIO_Init>
}
 800504a:	bf00      	nop
 800504c:	3738      	adds	r7, #56	; 0x38
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40010000 	.word	0x40010000
 8005058:	40023800 	.word	0x40023800
 800505c:	40000400 	.word	0x40000400
 8005060:	40020400 	.word	0x40020400
 8005064:	40001000 	.word	0x40001000
 8005068:	40010400 	.word	0x40010400
 800506c:	40020800 	.word	0x40020800

08005070 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005078:	f107 0314 	add.w	r3, r7, #20
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005090:	d14a      	bne.n	8005128 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	4b26      	ldr	r3, [pc, #152]	; (8005130 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	4a25      	ldr	r2, [pc, #148]	; (8005130 <HAL_TIM_Encoder_MspInit+0xc0>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6413      	str	r3, [r2, #64]	; 0x40
 80050a2:	4b23      	ldr	r3, [pc, #140]	; (8005130 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	4b1f      	ldr	r3, [pc, #124]	; (8005130 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	6313      	str	r3, [r2, #48]	; 0x30
 80050be:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	4b18      	ldr	r3, [pc, #96]	; (8005130 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	4a17      	ldr	r2, [pc, #92]	; (8005130 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050d4:	f043 0302 	orr.w	r3, r3, #2
 80050d8:	6313      	str	r3, [r2, #48]	; 0x30
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80050e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ec:	2302      	movs	r3, #2
 80050ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f4:	2300      	movs	r3, #0
 80050f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050f8:	2301      	movs	r3, #1
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050fc:	f107 0314 	add.w	r3, r7, #20
 8005100:	4619      	mov	r1, r3
 8005102:	480c      	ldr	r0, [pc, #48]	; (8005134 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005104:	f000 fb86 	bl	8005814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005108:	2308      	movs	r3, #8
 800510a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800510c:	2302      	movs	r3, #2
 800510e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005114:	2300      	movs	r3, #0
 8005116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005118:	2301      	movs	r3, #1
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800511c:	f107 0314 	add.w	r3, r7, #20
 8005120:	4619      	mov	r1, r3
 8005122:	4805      	ldr	r0, [pc, #20]	; (8005138 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005124:	f000 fb76 	bl	8005814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005128:	bf00      	nop
 800512a:	3728      	adds	r7, #40	; 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	40020000 	.word	0x40020000
 8005138:	40020400 	.word	0x40020400

0800513c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005144:	f107 030c 	add.w	r3, r7, #12
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <HAL_TIM_MspPostInit+0x68>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d11e      	bne.n	800519c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <HAL_TIM_MspPostInit+0x6c>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <HAL_TIM_MspPostInit+0x6c>)
 8005168:	f043 0310 	orr.w	r3, r3, #16
 800516c:	6313      	str	r3, [r2, #48]	; 0x30
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <HAL_TIM_MspPostInit+0x6c>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800517a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800517e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005180:	2302      	movs	r3, #2
 8005182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005188:	2300      	movs	r3, #0
 800518a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800518c:	2301      	movs	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005190:	f107 030c 	add.w	r3, r7, #12
 8005194:	4619      	mov	r1, r3
 8005196:	4805      	ldr	r0, [pc, #20]	; (80051ac <HAL_TIM_MspPostInit+0x70>)
 8005198:	f000 fb3c 	bl	8005814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800519c:	bf00      	nop
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40021000 	.word	0x40021000

080051b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08a      	sub	sp, #40	; 0x28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b8:	f107 0314 	add.w	r3, r7, #20
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	60da      	str	r2, [r3, #12]
 80051c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <HAL_UART_MspInit+0x94>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d134      	bne.n	800523c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	4b1c      	ldr	r3, [pc, #112]	; (8005248 <HAL_UART_MspInit+0x98>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <HAL_UART_MspInit+0x98>)
 80051dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051e0:	6413      	str	r3, [r2, #64]	; 0x40
 80051e2:	4b19      	ldr	r3, [pc, #100]	; (8005248 <HAL_UART_MspInit+0x98>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	4b15      	ldr	r3, [pc, #84]	; (8005248 <HAL_UART_MspInit+0x98>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <HAL_UART_MspInit+0x98>)
 80051f8:	f043 0304 	orr.w	r3, r3, #4
 80051fc:	6313      	str	r3, [r2, #48]	; 0x30
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <HAL_UART_MspInit+0x98>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800520a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800520e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005210:	2302      	movs	r3, #2
 8005212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005214:	2300      	movs	r3, #0
 8005216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005218:	2303      	movs	r3, #3
 800521a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800521c:	2307      	movs	r3, #7
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005220:	f107 0314 	add.w	r3, r7, #20
 8005224:	4619      	mov	r1, r3
 8005226:	4809      	ldr	r0, [pc, #36]	; (800524c <HAL_UART_MspInit+0x9c>)
 8005228:	f000 faf4 	bl	8005814 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800522c:	2200      	movs	r2, #0
 800522e:	2105      	movs	r1, #5
 8005230:	2027      	movs	r0, #39	; 0x27
 8005232:	f000 fa33 	bl	800569c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005236:	2027      	movs	r0, #39	; 0x27
 8005238:	f000 fa4c 	bl	80056d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800523c:	bf00      	nop
 800523e:	3728      	adds	r7, #40	; 0x28
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40004800 	.word	0x40004800
 8005248:	40023800 	.word	0x40023800
 800524c:	40020800 	.word	0x40020800

08005250 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08c      	sub	sp, #48	; 0x30
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8005260:	2200      	movs	r2, #0
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	201e      	movs	r0, #30
 8005266:	f000 fa19 	bl	800569c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800526a:	201e      	movs	r0, #30
 800526c:	f000 fa32 	bl	80056d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <HAL_InitTick+0xa0>)
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <HAL_InitTick+0xa0>)
 800527a:	f043 0304 	orr.w	r3, r3, #4
 800527e:	6413      	str	r3, [r2, #64]	; 0x40
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_InitTick+0xa0>)
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800528c:	f107 0210 	add.w	r2, r7, #16
 8005290:	f107 0314 	add.w	r3, r7, #20
 8005294:	4611      	mov	r1, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f002 f8b2 	bl	8007400 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800529c:	f002 f888 	bl	80073b0 <HAL_RCC_GetPCLK1Freq>
 80052a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <HAL_InitTick+0xa4>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	0c9b      	lsrs	r3, r3, #18
 80052ac:	3b01      	subs	r3, #1
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80052b0:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_InitTick+0xa8>)
 80052b2:	4a12      	ldr	r2, [pc, #72]	; (80052fc <HAL_InitTick+0xac>)
 80052b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <HAL_InitTick+0xa8>)
 80052b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052bc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80052be:	4a0e      	ldr	r2, [pc, #56]	; (80052f8 <HAL_InitTick+0xa8>)
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <HAL_InitTick+0xa8>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_InitTick+0xa8>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80052d0:	4809      	ldr	r0, [pc, #36]	; (80052f8 <HAL_InitTick+0xa8>)
 80052d2:	f002 f8c7 	bl	8007464 <HAL_TIM_Base_Init>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80052dc:	4806      	ldr	r0, [pc, #24]	; (80052f8 <HAL_InitTick+0xa8>)
 80052de:	f002 f979 	bl	80075d4 <HAL_TIM_Base_Start_IT>
 80052e2:	4603      	mov	r3, r0
 80052e4:	e000      	b.n	80052e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3730      	adds	r7, #48	; 0x30
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40023800 	.word	0x40023800
 80052f4:	431bde83 	.word	0x431bde83
 80052f8:	200004b8 	.word	0x200004b8
 80052fc:	40000800 	.word	0x40000800

08005300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005304:	e7fe      	b.n	8005304 <NMI_Handler+0x4>

08005306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800530a:	e7fe      	b.n	800530a <HardFault_Handler+0x4>

0800530c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005310:	e7fe      	b.n	8005310 <MemManage_Handler+0x4>

08005312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005312:	b480      	push	{r7}
 8005314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005316:	e7fe      	b.n	8005316 <BusFault_Handler+0x4>

08005318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800531c:	e7fe      	b.n	800531c <UsageFault_Handler+0x4>

0800531e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800531e:	b480      	push	{r7}
 8005320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005322:	bf00      	nop
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005330:	4802      	ldr	r0, [pc, #8]	; (800533c <TIM1_CC_IRQHandler+0x10>)
 8005332:	f002 fe45 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005336:	bf00      	nop
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000210 	.word	0x20000210

08005340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005344:	4802      	ldr	r0, [pc, #8]	; (8005350 <TIM3_IRQHandler+0x10>)
 8005346:	f002 fe3b 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	200002a0 	.word	0x200002a0

08005354 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005358:	4802      	ldr	r0, [pc, #8]	; (8005364 <TIM4_IRQHandler+0x10>)
 800535a:	f002 fe31 	bl	8007fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	200004b8 	.word	0x200004b8

08005368 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800536c:	4802      	ldr	r0, [pc, #8]	; (8005378 <USART3_IRQHandler+0x10>)
 800536e:	f003 ffe3 	bl	8009338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000378 	.word	0x20000378

0800537c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005384:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <_sbrk+0x5c>)
 8005386:	4b15      	ldr	r3, [pc, #84]	; (80053dc <_sbrk+0x60>)
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005390:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <_sbrk+0x64>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <_sbrk+0x64>)
 800539a:	4a12      	ldr	r2, [pc, #72]	; (80053e4 <_sbrk+0x68>)
 800539c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800539e:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <_sbrk+0x64>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4413      	add	r3, r2
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d207      	bcs.n	80053bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053ac:	f008 f82c 	bl	800d408 <__errno>
 80053b0:	4603      	mov	r3, r0
 80053b2:	220c      	movs	r2, #12
 80053b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ba:	e009      	b.n	80053d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053bc:	4b08      	ldr	r3, [pc, #32]	; (80053e0 <_sbrk+0x64>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <_sbrk+0x64>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	4a05      	ldr	r2, [pc, #20]	; (80053e0 <_sbrk+0x64>)
 80053cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053ce:	68fb      	ldr	r3, [r7, #12]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20020000 	.word	0x20020000
 80053dc:	00000400 	.word	0x00000400
 80053e0:	20000500 	.word	0x20000500
 80053e4:	200053a0 	.word	0x200053a0

080053e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <SystemInit+0x20>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	4a05      	ldr	r2, [pc, #20]	; (8005408 <SystemInit+0x20>)
 80053f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053fc:	bf00      	nop
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	e000ed00 	.word	0xe000ed00

0800540c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800540c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005410:	480d      	ldr	r0, [pc, #52]	; (8005448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005412:	490e      	ldr	r1, [pc, #56]	; (800544c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005414:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005418:	e002      	b.n	8005420 <LoopCopyDataInit>

0800541a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800541a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800541c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800541e:	3304      	adds	r3, #4

08005420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005424:	d3f9      	bcc.n	800541a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005426:	4a0b      	ldr	r2, [pc, #44]	; (8005454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005428:	4c0b      	ldr	r4, [pc, #44]	; (8005458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800542a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800542c:	e001      	b.n	8005432 <LoopFillZerobss>

0800542e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800542e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005430:	3204      	adds	r2, #4

08005432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005434:	d3fb      	bcc.n	800542e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005436:	f7ff ffd7 	bl	80053e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800543a:	f007 ffeb 	bl	800d414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800543e:	f7fb fd5b 	bl	8000ef8 <main>
  bx  lr    
 8005442:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800544c:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8005450:	0800ea30 	.word	0x0800ea30
  ldr r2, =_sbss
 8005454:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8005458:	200053a0 	.word	0x200053a0

0800545c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800545c:	e7fe      	b.n	800545c <ADC_IRQHandler>
	...

08005460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005464:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <HAL_Init+0x40>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a0d      	ldr	r2, [pc, #52]	; (80054a0 <HAL_Init+0x40>)
 800546a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800546e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_Init+0x40>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <HAL_Init+0x40>)
 8005476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800547a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <HAL_Init+0x40>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <HAL_Init+0x40>)
 8005482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005488:	2003      	movs	r0, #3
 800548a:	f000 f8fc 	bl	8005686 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800548e:	200f      	movs	r0, #15
 8005490:	f7ff fede 	bl	8005250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005494:	f7ff fcbe 	bl	8004e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40023c00 	.word	0x40023c00

080054a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_IncTick+0x20>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <HAL_IncTick+0x24>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4413      	add	r3, r2
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <HAL_IncTick+0x24>)
 80054b6:	6013      	str	r3, [r2, #0]
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000148 	.word	0x20000148
 80054c8:	20000504 	.word	0x20000504

080054cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  return uwTick;
 80054d0:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <HAL_GetTick+0x14>)
 80054d2:	681b      	ldr	r3, [r3, #0]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000504 	.word	0x20000504

080054e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054ec:	f7ff ffee 	bl	80054cc <HAL_GetTick>
 80054f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fc:	d005      	beq.n	800550a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <HAL_Delay+0x44>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800550a:	bf00      	nop
 800550c:	f7ff ffde 	bl	80054cc <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	429a      	cmp	r2, r3
 800551a:	d8f7      	bhi.n	800550c <HAL_Delay+0x28>
  {
  }
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000148 	.word	0x20000148

0800552c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <__NVIC_SetPriorityGrouping+0x44>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005548:	4013      	ands	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800555c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800555e:	4a04      	ldr	r2, [pc, #16]	; (8005570 <__NVIC_SetPriorityGrouping+0x44>)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	60d3      	str	r3, [r2, #12]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	e000ed00 	.word	0xe000ed00

08005574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005578:	4b04      	ldr	r3, [pc, #16]	; (800558c <__NVIC_GetPriorityGrouping+0x18>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	f003 0307 	and.w	r3, r3, #7
}
 8005582:	4618      	mov	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	e000ed00 	.word	0xe000ed00

08005590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	4603      	mov	r3, r0
 8005598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800559a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	db0b      	blt.n	80055ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	f003 021f 	and.w	r2, r3, #31
 80055a8:	4907      	ldr	r1, [pc, #28]	; (80055c8 <__NVIC_EnableIRQ+0x38>)
 80055aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	2001      	movs	r0, #1
 80055b2:	fa00 f202 	lsl.w	r2, r0, r2
 80055b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	e000e100 	.word	0xe000e100

080055cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	6039      	str	r1, [r7, #0]
 80055d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	db0a      	blt.n	80055f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	490c      	ldr	r1, [pc, #48]	; (8005618 <__NVIC_SetPriority+0x4c>)
 80055e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ea:	0112      	lsls	r2, r2, #4
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	440b      	add	r3, r1
 80055f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055f4:	e00a      	b.n	800560c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	4908      	ldr	r1, [pc, #32]	; (800561c <__NVIC_SetPriority+0x50>)
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	3b04      	subs	r3, #4
 8005604:	0112      	lsls	r2, r2, #4
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	440b      	add	r3, r1
 800560a:	761a      	strb	r2, [r3, #24]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	e000e100 	.word	0xe000e100
 800561c:	e000ed00 	.word	0xe000ed00

08005620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005620:	b480      	push	{r7}
 8005622:	b089      	sub	sp, #36	; 0x24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f1c3 0307 	rsb	r3, r3, #7
 800563a:	2b04      	cmp	r3, #4
 800563c:	bf28      	it	cs
 800563e:	2304      	movcs	r3, #4
 8005640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3304      	adds	r3, #4
 8005646:	2b06      	cmp	r3, #6
 8005648:	d902      	bls.n	8005650 <NVIC_EncodePriority+0x30>
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	3b03      	subs	r3, #3
 800564e:	e000      	b.n	8005652 <NVIC_EncodePriority+0x32>
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43da      	mvns	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	401a      	ands	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	fa01 f303 	lsl.w	r3, r1, r3
 8005672:	43d9      	mvns	r1, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005678:	4313      	orrs	r3, r2
         );
}
 800567a:	4618      	mov	r0, r3
 800567c:	3724      	adds	r7, #36	; 0x24
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ff4c 	bl	800552c <__NVIC_SetPriorityGrouping>
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056ae:	f7ff ff61 	bl	8005574 <__NVIC_GetPriorityGrouping>
 80056b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	6978      	ldr	r0, [r7, #20]
 80056ba:	f7ff ffb1 	bl	8005620 <NVIC_EncodePriority>
 80056be:	4602      	mov	r2, r0
 80056c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056c4:	4611      	mov	r1, r2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff ff80 	bl	80055cc <__NVIC_SetPriority>
}
 80056cc:	bf00      	nop
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff ff54 	bl	8005590 <__NVIC_EnableIRQ>
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056fe:	f7ff fee5 	bl	80054cc <HAL_GetTick>
 8005702:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d008      	beq.n	8005722 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2280      	movs	r2, #128	; 0x80
 8005714:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e052      	b.n	80057c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0216 	bic.w	r2, r2, #22
 8005730:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005740:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <HAL_DMA_Abort+0x62>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0208 	bic.w	r2, r2, #8
 8005760:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0201 	bic.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005772:	e013      	b.n	800579c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005774:	f7ff feaa 	bl	80054cc <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b05      	cmp	r3, #5
 8005780:	d90c      	bls.n	800579c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2203      	movs	r2, #3
 800578c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e015      	b.n	80057c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e4      	bne.n	8005774 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	223f      	movs	r2, #63	; 0x3f
 80057b0:	409a      	lsls	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d004      	beq.n	80057ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2280      	movs	r2, #128	; 0x80
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e00c      	b.n	8005808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2205      	movs	r2, #5
 80057f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005814:	b480      	push	{r7}
 8005816:	b089      	sub	sp, #36	; 0x24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005826:	2300      	movs	r3, #0
 8005828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	e16b      	b.n	8005b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005830:	2201      	movs	r2, #1
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4013      	ands	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	429a      	cmp	r2, r3
 800584a:	f040 815a 	bne.w	8005b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b01      	cmp	r3, #1
 8005858:	d005      	beq.n	8005866 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005862:	2b02      	cmp	r3, #2
 8005864:	d130      	bne.n	80058c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	2203      	movs	r2, #3
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4313      	orrs	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800589c:	2201      	movs	r2, #1
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	43db      	mvns	r3, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4013      	ands	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 0201 	and.w	r2, r3, #1
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d017      	beq.n	8005904 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	2203      	movs	r2, #3
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	4013      	ands	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d123      	bne.n	8005958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	08da      	lsrs	r2, r3, #3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3208      	adds	r2, #8
 8005918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	220f      	movs	r2, #15
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	08da      	lsrs	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3208      	adds	r2, #8
 8005952:	69b9      	ldr	r1, [r7, #24]
 8005954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	2203      	movs	r2, #3
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	43db      	mvns	r3, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	4013      	ands	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f003 0203 	and.w	r2, r3, #3
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4313      	orrs	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 80b4 	beq.w	8005b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	4b60      	ldr	r3, [pc, #384]	; (8005b20 <HAL_GPIO_Init+0x30c>)
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	4a5f      	ldr	r2, [pc, #380]	; (8005b20 <HAL_GPIO_Init+0x30c>)
 80059a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059a8:	6453      	str	r3, [r2, #68]	; 0x44
 80059aa:	4b5d      	ldr	r3, [pc, #372]	; (8005b20 <HAL_GPIO_Init+0x30c>)
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059b6:	4a5b      	ldr	r2, [pc, #364]	; (8005b24 <HAL_GPIO_Init+0x310>)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	3302      	adds	r3, #2
 80059be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	220f      	movs	r2, #15
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a52      	ldr	r2, [pc, #328]	; (8005b28 <HAL_GPIO_Init+0x314>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d02b      	beq.n	8005a3a <HAL_GPIO_Init+0x226>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a51      	ldr	r2, [pc, #324]	; (8005b2c <HAL_GPIO_Init+0x318>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d025      	beq.n	8005a36 <HAL_GPIO_Init+0x222>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a50      	ldr	r2, [pc, #320]	; (8005b30 <HAL_GPIO_Init+0x31c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01f      	beq.n	8005a32 <HAL_GPIO_Init+0x21e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a4f      	ldr	r2, [pc, #316]	; (8005b34 <HAL_GPIO_Init+0x320>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d019      	beq.n	8005a2e <HAL_GPIO_Init+0x21a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a4e      	ldr	r2, [pc, #312]	; (8005b38 <HAL_GPIO_Init+0x324>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_GPIO_Init+0x216>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a4d      	ldr	r2, [pc, #308]	; (8005b3c <HAL_GPIO_Init+0x328>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00d      	beq.n	8005a26 <HAL_GPIO_Init+0x212>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a4c      	ldr	r2, [pc, #304]	; (8005b40 <HAL_GPIO_Init+0x32c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <HAL_GPIO_Init+0x20e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a4b      	ldr	r2, [pc, #300]	; (8005b44 <HAL_GPIO_Init+0x330>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d101      	bne.n	8005a1e <HAL_GPIO_Init+0x20a>
 8005a1a:	2307      	movs	r3, #7
 8005a1c:	e00e      	b.n	8005a3c <HAL_GPIO_Init+0x228>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	e00c      	b.n	8005a3c <HAL_GPIO_Init+0x228>
 8005a22:	2306      	movs	r3, #6
 8005a24:	e00a      	b.n	8005a3c <HAL_GPIO_Init+0x228>
 8005a26:	2305      	movs	r3, #5
 8005a28:	e008      	b.n	8005a3c <HAL_GPIO_Init+0x228>
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	e006      	b.n	8005a3c <HAL_GPIO_Init+0x228>
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e004      	b.n	8005a3c <HAL_GPIO_Init+0x228>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e002      	b.n	8005a3c <HAL_GPIO_Init+0x228>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <HAL_GPIO_Init+0x228>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	f002 0203 	and.w	r2, r2, #3
 8005a42:	0092      	lsls	r2, r2, #2
 8005a44:	4093      	lsls	r3, r2
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a4c:	4935      	ldr	r1, [pc, #212]	; (8005b24 <HAL_GPIO_Init+0x310>)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	089b      	lsrs	r3, r3, #2
 8005a52:	3302      	adds	r3, #2
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	; (8005b48 <HAL_GPIO_Init+0x334>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a7e:	4a32      	ldr	r2, [pc, #200]	; (8005b48 <HAL_GPIO_Init+0x334>)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a84:	4b30      	ldr	r3, [pc, #192]	; (8005b48 <HAL_GPIO_Init+0x334>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005aa8:	4a27      	ldr	r2, [pc, #156]	; (8005b48 <HAL_GPIO_Init+0x334>)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005aae:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <HAL_GPIO_Init+0x334>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4013      	ands	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ad2:	4a1d      	ldr	r2, [pc, #116]	; (8005b48 <HAL_GPIO_Init+0x334>)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <HAL_GPIO_Init+0x334>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005afc:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <HAL_GPIO_Init+0x334>)
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	3301      	adds	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	f67f ae90 	bls.w	8005830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	3724      	adds	r7, #36	; 0x24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40023800 	.word	0x40023800
 8005b24:	40013800 	.word	0x40013800
 8005b28:	40020000 	.word	0x40020000
 8005b2c:	40020400 	.word	0x40020400
 8005b30:	40020800 	.word	0x40020800
 8005b34:	40020c00 	.word	0x40020c00
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	40021400 	.word	0x40021400
 8005b40:	40021800 	.word	0x40021800
 8005b44:	40021c00 	.word	0x40021c00
 8005b48:	40013c00 	.word	0x40013c00

08005b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	807b      	strh	r3, [r7, #2]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b5c:	787b      	ldrb	r3, [r7, #1]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b62:	887a      	ldrh	r2, [r7, #2]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b68:	e003      	b.n	8005b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b6a:	887b      	ldrh	r3, [r7, #2]
 8005b6c:	041a      	lsls	r2, r3, #16
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	619a      	str	r2, [r3, #24]
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e12b      	b.n	8005dea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff f960 	bl	8004e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2224      	movs	r2, #36	; 0x24
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005be4:	f001 fbe4 	bl	80073b0 <HAL_RCC_GetPCLK1Freq>
 8005be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4a81      	ldr	r2, [pc, #516]	; (8005df4 <HAL_I2C_Init+0x274>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d807      	bhi.n	8005c04 <HAL_I2C_Init+0x84>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4a80      	ldr	r2, [pc, #512]	; (8005df8 <HAL_I2C_Init+0x278>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	bf94      	ite	ls
 8005bfc:	2301      	movls	r3, #1
 8005bfe:	2300      	movhi	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	e006      	b.n	8005c12 <HAL_I2C_Init+0x92>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4a7d      	ldr	r2, [pc, #500]	; (8005dfc <HAL_I2C_Init+0x27c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	bf94      	ite	ls
 8005c0c:	2301      	movls	r3, #1
 8005c0e:	2300      	movhi	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e0e7      	b.n	8005dea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a78      	ldr	r2, [pc, #480]	; (8005e00 <HAL_I2C_Init+0x280>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	0c9b      	lsrs	r3, r3, #18
 8005c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4a6a      	ldr	r2, [pc, #424]	; (8005df4 <HAL_I2C_Init+0x274>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d802      	bhi.n	8005c54 <HAL_I2C_Init+0xd4>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	3301      	adds	r3, #1
 8005c52:	e009      	b.n	8005c68 <HAL_I2C_Init+0xe8>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	4a69      	ldr	r2, [pc, #420]	; (8005e04 <HAL_I2C_Init+0x284>)
 8005c60:	fba2 2303 	umull	r2, r3, r2, r3
 8005c64:	099b      	lsrs	r3, r3, #6
 8005c66:	3301      	adds	r3, #1
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	495c      	ldr	r1, [pc, #368]	; (8005df4 <HAL_I2C_Init+0x274>)
 8005c84:	428b      	cmp	r3, r1
 8005c86:	d819      	bhi.n	8005cbc <HAL_I2C_Init+0x13c>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1e59      	subs	r1, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c96:	1c59      	adds	r1, r3, #1
 8005c98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c9c:	400b      	ands	r3, r1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <HAL_I2C_Init+0x138>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1e59      	subs	r1, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb6:	e051      	b.n	8005d5c <HAL_I2C_Init+0x1dc>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	e04f      	b.n	8005d5c <HAL_I2C_Init+0x1dc>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d111      	bne.n	8005ce8 <HAL_I2C_Init+0x168>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1e58      	subs	r0, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6859      	ldr	r1, [r3, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	440b      	add	r3, r1
 8005cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bf0c      	ite	eq
 8005ce0:	2301      	moveq	r3, #1
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	e012      	b.n	8005d0e <HAL_I2C_Init+0x18e>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1e58      	subs	r0, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6859      	ldr	r1, [r3, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	0099      	lsls	r1, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfe:	3301      	adds	r3, #1
 8005d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_I2C_Init+0x196>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e022      	b.n	8005d5c <HAL_I2C_Init+0x1dc>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10e      	bne.n	8005d3c <HAL_I2C_Init+0x1bc>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1e58      	subs	r0, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6859      	ldr	r1, [r3, #4]
 8005d26:	460b      	mov	r3, r1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	440b      	add	r3, r1
 8005d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d30:	3301      	adds	r3, #1
 8005d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3a:	e00f      	b.n	8005d5c <HAL_I2C_Init+0x1dc>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1e58      	subs	r0, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	0099      	lsls	r1, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d52:	3301      	adds	r3, #1
 8005d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	6809      	ldr	r1, [r1, #0]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69da      	ldr	r2, [r3, #28]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6911      	ldr	r1, [r2, #16]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68d2      	ldr	r2, [r2, #12]
 8005d96:	4311      	orrs	r1, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	430b      	orrs	r3, r1
 8005d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695a      	ldr	r2, [r3, #20]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	000186a0 	.word	0x000186a0
 8005df8:	001e847f 	.word	0x001e847f
 8005dfc:	003d08ff 	.word	0x003d08ff
 8005e00:	431bde83 	.word	0x431bde83
 8005e04:	10624dd3 	.word	0x10624dd3

08005e08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	4608      	mov	r0, r1
 8005e12:	4611      	mov	r1, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	817b      	strh	r3, [r7, #10]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	813b      	strh	r3, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e22:	f7ff fb53 	bl	80054cc <HAL_GetTick>
 8005e26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	f040 80d9 	bne.w	8005fe8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2319      	movs	r3, #25
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	496d      	ldr	r1, [pc, #436]	; (8005ff4 <HAL_I2C_Mem_Write+0x1ec>)
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fc7f 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e0cc      	b.n	8005fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_I2C_Mem_Write+0x56>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e0c5      	b.n	8005fea <HAL_I2C_Mem_Write+0x1e2>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d007      	beq.n	8005e84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2221      	movs	r2, #33	; 0x21
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2240      	movs	r2, #64	; 0x40
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a3a      	ldr	r2, [r7, #32]
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a4d      	ldr	r2, [pc, #308]	; (8005ff8 <HAL_I2C_Mem_Write+0x1f0>)
 8005ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ec6:	88f8      	ldrh	r0, [r7, #6]
 8005ec8:	893a      	ldrh	r2, [r7, #8]
 8005eca:	8979      	ldrh	r1, [r7, #10]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fab6 	bl	8006448 <I2C_RequestMemoryWrite>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d052      	beq.n	8005f88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e081      	b.n	8005fea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fd00 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00d      	beq.n	8005f12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d107      	bne.n	8005f0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e06b      	b.n	8005fea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	781a      	ldrb	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d11b      	bne.n	8005f88 <HAL_I2C_Mem_Write+0x180>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d017      	beq.n	8005f88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	781a      	ldrb	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1aa      	bne.n	8005ee6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 fcec 	bl	8006972 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00d      	beq.n	8005fbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d107      	bne.n	8005fb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e016      	b.n	8005fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e000      	b.n	8005fea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	00100002 	.word	0x00100002
 8005ff8:	ffff0000 	.word	0xffff0000

08005ffc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08c      	sub	sp, #48	; 0x30
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	4608      	mov	r0, r1
 8006006:	4611      	mov	r1, r2
 8006008:	461a      	mov	r2, r3
 800600a:	4603      	mov	r3, r0
 800600c:	817b      	strh	r3, [r7, #10]
 800600e:	460b      	mov	r3, r1
 8006010:	813b      	strh	r3, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006016:	f7ff fa59 	bl	80054cc <HAL_GetTick>
 800601a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b20      	cmp	r3, #32
 8006026:	f040 8208 	bne.w	800643a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	2319      	movs	r3, #25
 8006030:	2201      	movs	r2, #1
 8006032:	497b      	ldr	r1, [pc, #492]	; (8006220 <HAL_I2C_Mem_Read+0x224>)
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fb85 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
 8006042:	e1fb      	b.n	800643c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_I2C_Mem_Read+0x56>
 800604e:	2302      	movs	r3, #2
 8006050:	e1f4      	b.n	800643c <HAL_I2C_Mem_Read+0x440>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b01      	cmp	r3, #1
 8006066:	d007      	beq.n	8006078 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2222      	movs	r2, #34	; 0x22
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2240      	movs	r2, #64	; 0x40
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80060a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a5b      	ldr	r2, [pc, #364]	; (8006224 <HAL_I2C_Mem_Read+0x228>)
 80060b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060ba:	88f8      	ldrh	r0, [r7, #6]
 80060bc:	893a      	ldrh	r2, [r7, #8]
 80060be:	8979      	ldrh	r1, [r7, #10]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	4603      	mov	r3, r0
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fa52 	bl	8006574 <I2C_RequestMemoryRead>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e1b0      	b.n	800643c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d113      	bne.n	800610a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e2:	2300      	movs	r3, #0
 80060e4:	623b      	str	r3, [r7, #32]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	623b      	str	r3, [r7, #32]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	623b      	str	r3, [r7, #32]
 80060f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	e184      	b.n	8006414 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610e:	2b01      	cmp	r3, #1
 8006110:	d11b      	bne.n	800614a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	e164      	b.n	8006414 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614e:	2b02      	cmp	r3, #2
 8006150:	d11b      	bne.n	800618a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006160:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006172:	2300      	movs	r3, #0
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	e144      	b.n	8006414 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800618a:	2300      	movs	r3, #0
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061a0:	e138      	b.n	8006414 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	f200 80f1 	bhi.w	800638e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d123      	bne.n	80061fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fc1b 	bl	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e139      	b.n	800643c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061fa:	e10b      	b.n	8006414 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006200:	2b02      	cmp	r3, #2
 8006202:	d14e      	bne.n	80062a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	2200      	movs	r2, #0
 800620c:	4906      	ldr	r1, [pc, #24]	; (8006228 <HAL_I2C_Mem_Read+0x22c>)
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 fa98 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e10e      	b.n	800643c <HAL_I2C_Mem_Read+0x440>
 800621e:	bf00      	nop
 8006220:	00100002 	.word	0x00100002
 8006224:	ffff0000 	.word	0xffff0000
 8006228:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062a0:	e0b8      	b.n	8006414 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	2200      	movs	r2, #0
 80062aa:	4966      	ldr	r1, [pc, #408]	; (8006444 <HAL_I2C_Mem_Read+0x448>)
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fa49 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0bf      	b.n	800643c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	2200      	movs	r2, #0
 8006306:	494f      	ldr	r1, [pc, #316]	; (8006444 <HAL_I2C_Mem_Read+0x448>)
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fa1b 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e091      	b.n	800643c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800638c:	e042      	b.n	8006414 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800638e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006390:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fb2e 	bl	80069f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e04c      	b.n	800643c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d118      	bne.n	8006414 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	f47f aec2 	bne.w	80061a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2220      	movs	r2, #32
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	e000      	b.n	800643c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800643a:	2302      	movs	r3, #2
  }
}
 800643c:	4618      	mov	r0, r3
 800643e:	3728      	adds	r7, #40	; 0x28
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	00010004 	.word	0x00010004

08006448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	4608      	mov	r0, r1
 8006452:	4611      	mov	r1, r2
 8006454:	461a      	mov	r2, r3
 8006456:	4603      	mov	r3, r0
 8006458:	817b      	strh	r3, [r7, #10]
 800645a:	460b      	mov	r3, r1
 800645c:	813b      	strh	r3, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	2200      	movs	r2, #0
 800647a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f960 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00d      	beq.n	80064a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006498:	d103      	bne.n	80064a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e05f      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064a6:	897b      	ldrh	r3, [r7, #10]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	6a3a      	ldr	r2, [r7, #32]
 80064ba:	492d      	ldr	r1, [pc, #180]	; (8006570 <I2C_RequestMemoryWrite+0x128>)
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f998 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e04c      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e4:	6a39      	ldr	r1, [r7, #32]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fa02 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00d      	beq.n	800650e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d107      	bne.n	800650a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e02b      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d105      	bne.n	8006520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006514:	893b      	ldrh	r3, [r7, #8]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	611a      	str	r2, [r3, #16]
 800651e:	e021      	b.n	8006564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006520:	893b      	ldrh	r3, [r7, #8]
 8006522:	0a1b      	lsrs	r3, r3, #8
 8006524:	b29b      	uxth	r3, r3
 8006526:	b2da      	uxtb	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f9dc 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b04      	cmp	r3, #4
 8006544:	d107      	bne.n	8006556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e005      	b.n	8006566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800655a:	893b      	ldrh	r3, [r7, #8]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	00010002 	.word	0x00010002

08006574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	4608      	mov	r0, r1
 800657e:	4611      	mov	r1, r2
 8006580:	461a      	mov	r2, r3
 8006582:	4603      	mov	r3, r0
 8006584:	817b      	strh	r3, [r7, #10]
 8006586:	460b      	mov	r3, r1
 8006588:	813b      	strh	r3, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800659c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f8c2 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d4:	d103      	bne.n	80065de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e0aa      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065e2:	897b      	ldrh	r3, [r7, #10]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	4952      	ldr	r1, [pc, #328]	; (8006740 <I2C_RequestMemoryRead+0x1cc>)
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f8fa 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e097      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006620:	6a39      	ldr	r1, [r7, #32]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 f964 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00d      	beq.n	800664a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	2b04      	cmp	r3, #4
 8006634:	d107      	bne.n	8006646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e076      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d105      	bne.n	800665c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006650:	893b      	ldrh	r3, [r7, #8]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]
 800665a:	e021      	b.n	80066a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800665c:	893b      	ldrh	r3, [r7, #8]
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	b29b      	uxth	r3, r3
 8006662:	b2da      	uxtb	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666c:	6a39      	ldr	r1, [r7, #32]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f93e 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00d      	beq.n	8006696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2b04      	cmp	r3, #4
 8006680:	d107      	bne.n	8006692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e050      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006696:	893b      	ldrh	r3, [r7, #8]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a2:	6a39      	ldr	r1, [r7, #32]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f923 	bl	80068f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d107      	bne.n	80066c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e035      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f82b 	bl	8006744 <I2C_WaitOnFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00d      	beq.n	8006710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006702:	d103      	bne.n	800670c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e013      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006710:	897b      	ldrh	r3, [r7, #10]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	4906      	ldr	r1, [pc, #24]	; (8006740 <I2C_RequestMemoryRead+0x1cc>)
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f863 	bl	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	00010002 	.word	0x00010002

08006744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006754:	e025      	b.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675c:	d021      	beq.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675e:	f7fe feb5 	bl	80054cc <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d302      	bcc.n	8006774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d116      	bne.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e023      	b.n	80067ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d10d      	bne.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	43da      	mvns	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bf0c      	ite	eq
 80067be:	2301      	moveq	r3, #1
 80067c0:	2300      	movne	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	e00c      	b.n	80067e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	43da      	mvns	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf0c      	ite	eq
 80067da:	2301      	moveq	r3, #1
 80067dc:	2300      	movne	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d0b6      	beq.n	8006756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006800:	e051      	b.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006810:	d123      	bne.n	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006820:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800682a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f043 0204 	orr.w	r2, r3, #4
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e046      	b.n	80068e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006860:	d021      	beq.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fe fe33 	bl	80054cc <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d116      	bne.n	80068a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	f043 0220 	orr.w	r2, r3, #32
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e020      	b.n	80068e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	0c1b      	lsrs	r3, r3, #16
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10c      	bne.n	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	43da      	mvns	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4013      	ands	r3, r2
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bf14      	ite	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	2300      	moveq	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	e00b      	b.n	80068e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	43da      	mvns	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4013      	ands	r3, r2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d18d      	bne.n	8006802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068fc:	e02d      	b.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f8ce 	bl	8006aa0 <I2C_IsAcknowledgeFailed>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e02d      	b.n	800696a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006914:	d021      	beq.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006916:	f7fe fdd9 	bl	80054cc <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	d302      	bcc.n	800692c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d116      	bne.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f043 0220 	orr.w	r2, r3, #32
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e007      	b.n	800696a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b80      	cmp	r3, #128	; 0x80
 8006966:	d1ca      	bne.n	80068fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800697e:	e02d      	b.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f88d 	bl	8006aa0 <I2C_IsAcknowledgeFailed>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e02d      	b.n	80069ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006996:	d021      	beq.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006998:	f7fe fd98 	bl	80054cc <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d116      	bne.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f043 0220 	orr.w	r2, r3, #32
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e007      	b.n	80069ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d1ca      	bne.n	8006980 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a00:	e042      	b.n	8006a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d119      	bne.n	8006a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0210 	mvn.w	r2, #16
 8006a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e029      	b.n	8006a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a44:	f7fe fd42 	bl	80054cc <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d302      	bcc.n	8006a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d116      	bne.n	8006a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	f043 0220 	orr.w	r2, r3, #32
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e007      	b.n	8006a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d1b5      	bne.n	8006a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab6:	d11b      	bne.n	8006af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	f043 0204 	orr.w	r2, r3, #4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006b06:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006b08:	2201      	movs	r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006b0c:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <HAL_PWR_EnableBkUpAccess+0x24>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006b12:	687b      	ldr	r3, [r7, #4]
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	420e0020 	.word	0x420e0020
 8006b24:	40007000 	.word	0x40007000

08006b28 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006b2e:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <HAL_PWR_DisableBkUpAccess+0x24>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006b3a:	687b      	ldr	r3, [r7, #4]
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	420e0020 	.word	0x420e0020
 8006b4c:	40007000 	.word	0x40007000

08006b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e267      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d075      	beq.n	8006c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b6e:	4b88      	ldr	r3, [pc, #544]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 030c 	and.w	r3, r3, #12
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d00c      	beq.n	8006b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b7a:	4b85      	ldr	r3, [pc, #532]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d112      	bne.n	8006bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b86:	4b82      	ldr	r3, [pc, #520]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b92:	d10b      	bne.n	8006bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b94:	4b7e      	ldr	r3, [pc, #504]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d05b      	beq.n	8006c58 <HAL_RCC_OscConfig+0x108>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d157      	bne.n	8006c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e242      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb4:	d106      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x74>
 8006bb6:	4b76      	ldr	r3, [pc, #472]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a75      	ldr	r2, [pc, #468]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e01d      	b.n	8006c00 <HAL_RCC_OscConfig+0xb0>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCC_OscConfig+0x98>
 8006bce:	4b70      	ldr	r3, [pc, #448]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a6f      	ldr	r2, [pc, #444]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	4b6d      	ldr	r3, [pc, #436]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a6c      	ldr	r2, [pc, #432]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e00b      	b.n	8006c00 <HAL_RCC_OscConfig+0xb0>
 8006be8:	4b69      	ldr	r3, [pc, #420]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a68      	ldr	r2, [pc, #416]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	4b66      	ldr	r3, [pc, #408]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a65      	ldr	r2, [pc, #404]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d013      	beq.n	8006c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c08:	f7fe fc60 	bl	80054cc <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c10:	f7fe fc5c 	bl	80054cc <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b64      	cmp	r3, #100	; 0x64
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e207      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c22:	4b5b      	ldr	r3, [pc, #364]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0xc0>
 8006c2e:	e014      	b.n	8006c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c30:	f7fe fc4c 	bl	80054cc <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c38:	f7fe fc48 	bl	80054cc <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b64      	cmp	r3, #100	; 0x64
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e1f3      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c4a:	4b51      	ldr	r3, [pc, #324]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1f0      	bne.n	8006c38 <HAL_RCC_OscConfig+0xe8>
 8006c56:	e000      	b.n	8006c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d063      	beq.n	8006d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c66:	4b4a      	ldr	r3, [pc, #296]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 030c 	and.w	r3, r3, #12
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00b      	beq.n	8006c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c72:	4b47      	ldr	r3, [pc, #284]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	d11c      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c7e:	4b44      	ldr	r3, [pc, #272]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d116      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c8a:	4b41      	ldr	r3, [pc, #260]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x152>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d001      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e1c7      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ca2:	4b3b      	ldr	r3, [pc, #236]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4937      	ldr	r1, [pc, #220]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cb6:	e03a      	b.n	8006d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d020      	beq.n	8006d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cc0:	4b34      	ldr	r3, [pc, #208]	; (8006d94 <HAL_RCC_OscConfig+0x244>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc6:	f7fe fc01 	bl	80054cc <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ccc:	e008      	b.n	8006ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cce:	f7fe fbfd 	bl	80054cc <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e1a8      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce0:	4b2b      	ldr	r3, [pc, #172]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0f0      	beq.n	8006cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cec:	4b28      	ldr	r3, [pc, #160]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	4925      	ldr	r1, [pc, #148]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	600b      	str	r3, [r1, #0]
 8006d00:	e015      	b.n	8006d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d02:	4b24      	ldr	r3, [pc, #144]	; (8006d94 <HAL_RCC_OscConfig+0x244>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d08:	f7fe fbe0 	bl	80054cc <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d10:	f7fe fbdc 	bl	80054cc <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e187      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d22:	4b1b      	ldr	r3, [pc, #108]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1f0      	bne.n	8006d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d036      	beq.n	8006da8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d016      	beq.n	8006d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <HAL_RCC_OscConfig+0x248>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d48:	f7fe fbc0 	bl	80054cc <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d50:	f7fe fbbc 	bl	80054cc <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e167      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d62:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <HAL_RCC_OscConfig+0x240>)
 8006d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0f0      	beq.n	8006d50 <HAL_RCC_OscConfig+0x200>
 8006d6e:	e01b      	b.n	8006da8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <HAL_RCC_OscConfig+0x248>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d76:	f7fe fba9 	bl	80054cc <HAL_GetTick>
 8006d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d7c:	e00e      	b.n	8006d9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d7e:	f7fe fba5 	bl	80054cc <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d907      	bls.n	8006d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e150      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
 8006d90:	40023800 	.word	0x40023800
 8006d94:	42470000 	.word	0x42470000
 8006d98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d9c:	4b88      	ldr	r3, [pc, #544]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1ea      	bne.n	8006d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8097 	beq.w	8006ee4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dba:	4b81      	ldr	r3, [pc, #516]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10f      	bne.n	8006de6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
 8006dca:	4b7d      	ldr	r3, [pc, #500]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	4a7c      	ldr	r2, [pc, #496]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006dd6:	4b7a      	ldr	r3, [pc, #488]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dde:	60bb      	str	r3, [r7, #8]
 8006de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006de2:	2301      	movs	r3, #1
 8006de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de6:	4b77      	ldr	r3, [pc, #476]	; (8006fc4 <HAL_RCC_OscConfig+0x474>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d118      	bne.n	8006e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006df2:	4b74      	ldr	r3, [pc, #464]	; (8006fc4 <HAL_RCC_OscConfig+0x474>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a73      	ldr	r2, [pc, #460]	; (8006fc4 <HAL_RCC_OscConfig+0x474>)
 8006df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dfe:	f7fe fb65 	bl	80054cc <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e06:	f7fe fb61 	bl	80054cc <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e10c      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e18:	4b6a      	ldr	r3, [pc, #424]	; (8006fc4 <HAL_RCC_OscConfig+0x474>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0f0      	beq.n	8006e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d106      	bne.n	8006e3a <HAL_RCC_OscConfig+0x2ea>
 8006e2c:	4b64      	ldr	r3, [pc, #400]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e30:	4a63      	ldr	r2, [pc, #396]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	6713      	str	r3, [r2, #112]	; 0x70
 8006e38:	e01c      	b.n	8006e74 <HAL_RCC_OscConfig+0x324>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	d10c      	bne.n	8006e5c <HAL_RCC_OscConfig+0x30c>
 8006e42:	4b5f      	ldr	r3, [pc, #380]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e46:	4a5e      	ldr	r2, [pc, #376]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e48:	f043 0304 	orr.w	r3, r3, #4
 8006e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e4e:	4b5c      	ldr	r3, [pc, #368]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e52:	4a5b      	ldr	r2, [pc, #364]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5a:	e00b      	b.n	8006e74 <HAL_RCC_OscConfig+0x324>
 8006e5c:	4b58      	ldr	r3, [pc, #352]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e60:	4a57      	ldr	r2, [pc, #348]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	6713      	str	r3, [r2, #112]	; 0x70
 8006e68:	4b55      	ldr	r3, [pc, #340]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6c:	4a54      	ldr	r2, [pc, #336]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e6e:	f023 0304 	bic.w	r3, r3, #4
 8006e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d015      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7c:	f7fe fb26 	bl	80054cc <HAL_GetTick>
 8006e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e82:	e00a      	b.n	8006e9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e84:	f7fe fb22 	bl	80054cc <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e0cb      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9a:	4b49      	ldr	r3, [pc, #292]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0ee      	beq.n	8006e84 <HAL_RCC_OscConfig+0x334>
 8006ea6:	e014      	b.n	8006ed2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ea8:	f7fe fb10 	bl	80054cc <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eae:	e00a      	b.n	8006ec6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eb0:	f7fe fb0c 	bl	80054cc <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e0b5      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ec6:	4b3e      	ldr	r3, [pc, #248]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1ee      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d105      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ed8:	4b39      	ldr	r3, [pc, #228]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	4a38      	ldr	r2, [pc, #224]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 80a1 	beq.w	8007030 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eee:	4b34      	ldr	r3, [pc, #208]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d05c      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d141      	bne.n	8006f86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f02:	4b31      	ldr	r3, [pc, #196]	; (8006fc8 <HAL_RCC_OscConfig+0x478>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f08:	f7fe fae0 	bl	80054cc <HAL_GetTick>
 8006f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f0e:	e008      	b.n	8006f22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f10:	f7fe fadc 	bl	80054cc <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e087      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f22:	4b27      	ldr	r3, [pc, #156]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1f0      	bne.n	8006f10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69da      	ldr	r2, [r3, #28]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	431a      	orrs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	019b      	lsls	r3, r3, #6
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	3b01      	subs	r3, #1
 8006f48:	041b      	lsls	r3, r3, #16
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	061b      	lsls	r3, r3, #24
 8006f52:	491b      	ldr	r1, [pc, #108]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f58:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <HAL_RCC_OscConfig+0x478>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5e:	f7fe fab5 	bl	80054cc <HAL_GetTick>
 8006f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f64:	e008      	b.n	8006f78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f66:	f7fe fab1 	bl	80054cc <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e05c      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f78:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0f0      	beq.n	8006f66 <HAL_RCC_OscConfig+0x416>
 8006f84:	e054      	b.n	8007030 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f86:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <HAL_RCC_OscConfig+0x478>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f8c:	f7fe fa9e 	bl	80054cc <HAL_GetTick>
 8006f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f94:	f7fe fa9a 	bl	80054cc <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e045      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fa6:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f0      	bne.n	8006f94 <HAL_RCC_OscConfig+0x444>
 8006fb2:	e03d      	b.n	8007030 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d107      	bne.n	8006fcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e038      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	40007000 	.word	0x40007000
 8006fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fcc:	4b1b      	ldr	r3, [pc, #108]	; (800703c <HAL_RCC_OscConfig+0x4ec>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d028      	beq.n	800702c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d121      	bne.n	800702c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d11a      	bne.n	800702c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007004:	4293      	cmp	r3, r2
 8007006:	d111      	bne.n	800702c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	3b01      	subs	r3, #1
 8007016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007018:	429a      	cmp	r2, r3
 800701a:	d107      	bne.n	800702c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007028:	429a      	cmp	r2, r3
 800702a:	d001      	beq.n	8007030 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	40023800 	.word	0x40023800

08007040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e0cc      	b.n	80071ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007054:	4b68      	ldr	r3, [pc, #416]	; (80071f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d90c      	bls.n	800707c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007062:	4b65      	ldr	r3, [pc, #404]	; (80071f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800706a:	4b63      	ldr	r3, [pc, #396]	; (80071f8 <HAL_RCC_ClockConfig+0x1b8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d001      	beq.n	800707c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e0b8      	b.n	80071ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d020      	beq.n	80070ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007094:	4b59      	ldr	r3, [pc, #356]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	4a58      	ldr	r2, [pc, #352]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800709e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070ac:	4b53      	ldr	r3, [pc, #332]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	4a52      	ldr	r2, [pc, #328]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070b8:	4b50      	ldr	r3, [pc, #320]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	494d      	ldr	r1, [pc, #308]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d044      	beq.n	8007160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d107      	bne.n	80070ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070de:	4b47      	ldr	r3, [pc, #284]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d119      	bne.n	800711e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e07f      	b.n	80071ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d003      	beq.n	80070fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d107      	bne.n	800710e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fe:	4b3f      	ldr	r3, [pc, #252]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e06f      	b.n	80071ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800710e:	4b3b      	ldr	r3, [pc, #236]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e067      	b.n	80071ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800711e:	4b37      	ldr	r3, [pc, #220]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f023 0203 	bic.w	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4934      	ldr	r1, [pc, #208]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 800712c:	4313      	orrs	r3, r2
 800712e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007130:	f7fe f9cc 	bl	80054cc <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007136:	e00a      	b.n	800714e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007138:	f7fe f9c8 	bl	80054cc <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	; 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e04f      	b.n	80071ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714e:	4b2b      	ldr	r3, [pc, #172]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 020c 	and.w	r2, r3, #12
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	429a      	cmp	r2, r3
 800715e:	d1eb      	bne.n	8007138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007160:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d20c      	bcs.n	8007188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716e:	4b22      	ldr	r3, [pc, #136]	; (80071f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007176:	4b20      	ldr	r3, [pc, #128]	; (80071f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d001      	beq.n	8007188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e032      	b.n	80071ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d008      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007194:	4b19      	ldr	r3, [pc, #100]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	4916      	ldr	r1, [pc, #88]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	490e      	ldr	r1, [pc, #56]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071c6:	f000 f821 	bl	800720c <HAL_RCC_GetSysClockFreq>
 80071ca:	4602      	mov	r2, r0
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <HAL_RCC_ClockConfig+0x1bc>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	091b      	lsrs	r3, r3, #4
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	490a      	ldr	r1, [pc, #40]	; (8007200 <HAL_RCC_ClockConfig+0x1c0>)
 80071d8:	5ccb      	ldrb	r3, [r1, r3]
 80071da:	fa22 f303 	lsr.w	r3, r2, r3
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <HAL_RCC_ClockConfig+0x1c4>)
 80071e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071e2:	4b09      	ldr	r3, [pc, #36]	; (8007208 <HAL_RCC_ClockConfig+0x1c8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe f832 	bl	8005250 <HAL_InitTick>

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40023c00 	.word	0x40023c00
 80071fc:	40023800 	.word	0x40023800
 8007200:	0800df70 	.word	0x0800df70
 8007204:	20000140 	.word	0x20000140
 8007208:	20000144 	.word	0x20000144

0800720c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800720c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007210:	b090      	sub	sp, #64	; 0x40
 8007212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
 8007218:	2300      	movs	r3, #0
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800721c:	2300      	movs	r3, #0
 800721e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007224:	4b59      	ldr	r3, [pc, #356]	; (800738c <HAL_RCC_GetSysClockFreq+0x180>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 030c 	and.w	r3, r3, #12
 800722c:	2b08      	cmp	r3, #8
 800722e:	d00d      	beq.n	800724c <HAL_RCC_GetSysClockFreq+0x40>
 8007230:	2b08      	cmp	r3, #8
 8007232:	f200 80a1 	bhi.w	8007378 <HAL_RCC_GetSysClockFreq+0x16c>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_RCC_GetSysClockFreq+0x34>
 800723a:	2b04      	cmp	r3, #4
 800723c:	d003      	beq.n	8007246 <HAL_RCC_GetSysClockFreq+0x3a>
 800723e:	e09b      	b.n	8007378 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007240:	4b53      	ldr	r3, [pc, #332]	; (8007390 <HAL_RCC_GetSysClockFreq+0x184>)
 8007242:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007244:	e09b      	b.n	800737e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007246:	4b53      	ldr	r3, [pc, #332]	; (8007394 <HAL_RCC_GetSysClockFreq+0x188>)
 8007248:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800724a:	e098      	b.n	800737e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800724c:	4b4f      	ldr	r3, [pc, #316]	; (800738c <HAL_RCC_GetSysClockFreq+0x180>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007256:	4b4d      	ldr	r3, [pc, #308]	; (800738c <HAL_RCC_GetSysClockFreq+0x180>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d028      	beq.n	80072b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007262:	4b4a      	ldr	r3, [pc, #296]	; (800738c <HAL_RCC_GetSysClockFreq+0x180>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	099b      	lsrs	r3, r3, #6
 8007268:	2200      	movs	r2, #0
 800726a:	623b      	str	r3, [r7, #32]
 800726c:	627a      	str	r2, [r7, #36]	; 0x24
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007274:	2100      	movs	r1, #0
 8007276:	4b47      	ldr	r3, [pc, #284]	; (8007394 <HAL_RCC_GetSysClockFreq+0x188>)
 8007278:	fb03 f201 	mul.w	r2, r3, r1
 800727c:	2300      	movs	r3, #0
 800727e:	fb00 f303 	mul.w	r3, r0, r3
 8007282:	4413      	add	r3, r2
 8007284:	4a43      	ldr	r2, [pc, #268]	; (8007394 <HAL_RCC_GetSysClockFreq+0x188>)
 8007286:	fba0 1202 	umull	r1, r2, r0, r2
 800728a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800728c:	460a      	mov	r2, r1
 800728e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007292:	4413      	add	r3, r2
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007298:	2200      	movs	r2, #0
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	61fa      	str	r2, [r7, #28]
 800729e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072a6:	f7f9 fca9 	bl	8000bfc <__aeabi_uldivmod>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4613      	mov	r3, r2
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072b2:	e053      	b.n	800735c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b4:	4b35      	ldr	r3, [pc, #212]	; (800738c <HAL_RCC_GetSysClockFreq+0x180>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	099b      	lsrs	r3, r3, #6
 80072ba:	2200      	movs	r2, #0
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	617a      	str	r2, [r7, #20]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80072c6:	f04f 0b00 	mov.w	fp, #0
 80072ca:	4652      	mov	r2, sl
 80072cc:	465b      	mov	r3, fp
 80072ce:	f04f 0000 	mov.w	r0, #0
 80072d2:	f04f 0100 	mov.w	r1, #0
 80072d6:	0159      	lsls	r1, r3, #5
 80072d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072dc:	0150      	lsls	r0, r2, #5
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	ebb2 080a 	subs.w	r8, r2, sl
 80072e6:	eb63 090b 	sbc.w	r9, r3, fp
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80072f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80072fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80072fe:	ebb2 0408 	subs.w	r4, r2, r8
 8007302:	eb63 0509 	sbc.w	r5, r3, r9
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	00eb      	lsls	r3, r5, #3
 8007310:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007314:	00e2      	lsls	r2, r4, #3
 8007316:	4614      	mov	r4, r2
 8007318:	461d      	mov	r5, r3
 800731a:	eb14 030a 	adds.w	r3, r4, sl
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	eb45 030b 	adc.w	r3, r5, fp
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007332:	4629      	mov	r1, r5
 8007334:	028b      	lsls	r3, r1, #10
 8007336:	4621      	mov	r1, r4
 8007338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800733c:	4621      	mov	r1, r4
 800733e:	028a      	lsls	r2, r1, #10
 8007340:	4610      	mov	r0, r2
 8007342:	4619      	mov	r1, r3
 8007344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007346:	2200      	movs	r2, #0
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	60fa      	str	r2, [r7, #12]
 800734c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007350:	f7f9 fc54 	bl	8000bfc <__aeabi_uldivmod>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4613      	mov	r3, r2
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_RCC_GetSysClockFreq+0x180>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	0c1b      	lsrs	r3, r3, #16
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	3301      	adds	r3, #1
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800736c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	fbb2 f3f3 	udiv	r3, r2, r3
 8007374:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007376:	e002      	b.n	800737e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <HAL_RCC_GetSysClockFreq+0x184>)
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800737c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007380:	4618      	mov	r0, r3
 8007382:	3740      	adds	r7, #64	; 0x40
 8007384:	46bd      	mov	sp, r7
 8007386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800738a:	bf00      	nop
 800738c:	40023800 	.word	0x40023800
 8007390:	00f42400 	.word	0x00f42400
 8007394:	017d7840 	.word	0x017d7840

08007398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800739c:	4b03      	ldr	r3, [pc, #12]	; (80073ac <HAL_RCC_GetHCLKFreq+0x14>)
 800739e:	681b      	ldr	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000140 	.word	0x20000140

080073b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073b4:	f7ff fff0 	bl	8007398 <HAL_RCC_GetHCLKFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	0a9b      	lsrs	r3, r3, #10
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	4903      	ldr	r1, [pc, #12]	; (80073d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40023800 	.word	0x40023800
 80073d4:	0800df80 	.word	0x0800df80

080073d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073dc:	f7ff ffdc 	bl	8007398 <HAL_RCC_GetHCLKFreq>
 80073e0:	4602      	mov	r2, r0
 80073e2:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	0b5b      	lsrs	r3, r3, #13
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	4903      	ldr	r1, [pc, #12]	; (80073fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073ee:	5ccb      	ldrb	r3, [r1, r3]
 80073f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	40023800 	.word	0x40023800
 80073fc:	0800df80 	.word	0x0800df80

08007400 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	220f      	movs	r2, #15
 800740e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007410:	4b12      	ldr	r3, [pc, #72]	; (800745c <HAL_RCC_GetClockConfig+0x5c>)
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f003 0203 	and.w	r2, r3, #3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800741c:	4b0f      	ldr	r3, [pc, #60]	; (800745c <HAL_RCC_GetClockConfig+0x5c>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <HAL_RCC_GetClockConfig+0x5c>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007434:	4b09      	ldr	r3, [pc, #36]	; (800745c <HAL_RCC_GetClockConfig+0x5c>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	08db      	lsrs	r3, r3, #3
 800743a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007442:	4b07      	ldr	r3, [pc, #28]	; (8007460 <HAL_RCC_GetClockConfig+0x60>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0207 	and.w	r2, r3, #7
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	601a      	str	r2, [r3, #0]
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40023800 	.word	0x40023800
 8007460:	40023c00 	.word	0x40023c00

08007464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e041      	b.n	80074fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fd fd36 	bl	8004efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3304      	adds	r3, #4
 80074a0:	4619      	mov	r1, r3
 80074a2:	4610      	mov	r0, r2
 80074a4:	f001 f91c 	bl	80086e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b01      	cmp	r3, #1
 8007516:	d001      	beq.n	800751c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e046      	b.n	80075aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a23      	ldr	r2, [pc, #140]	; (80075b8 <HAL_TIM_Base_Start+0xb4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d022      	beq.n	8007574 <HAL_TIM_Base_Start+0x70>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007536:	d01d      	beq.n	8007574 <HAL_TIM_Base_Start+0x70>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1f      	ldr	r2, [pc, #124]	; (80075bc <HAL_TIM_Base_Start+0xb8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d018      	beq.n	8007574 <HAL_TIM_Base_Start+0x70>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <HAL_TIM_Base_Start+0xbc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d013      	beq.n	8007574 <HAL_TIM_Base_Start+0x70>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <HAL_TIM_Base_Start+0xc0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00e      	beq.n	8007574 <HAL_TIM_Base_Start+0x70>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <HAL_TIM_Base_Start+0xc4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d009      	beq.n	8007574 <HAL_TIM_Base_Start+0x70>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a19      	ldr	r2, [pc, #100]	; (80075cc <HAL_TIM_Base_Start+0xc8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d004      	beq.n	8007574 <HAL_TIM_Base_Start+0x70>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a18      	ldr	r2, [pc, #96]	; (80075d0 <HAL_TIM_Base_Start+0xcc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d111      	bne.n	8007598 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b06      	cmp	r3, #6
 8007584:	d010      	beq.n	80075a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0201 	orr.w	r2, r2, #1
 8007594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007596:	e007      	b.n	80075a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800
 80075c4:	40000c00 	.word	0x40000c00
 80075c8:	40010400 	.word	0x40010400
 80075cc:	40014000 	.word	0x40014000
 80075d0:	40001800 	.word	0x40001800

080075d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d001      	beq.n	80075ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e04e      	b.n	800768a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0201 	orr.w	r2, r2, #1
 8007602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a23      	ldr	r2, [pc, #140]	; (8007698 <HAL_TIM_Base_Start_IT+0xc4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d022      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x80>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007616:	d01d      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x80>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1f      	ldr	r2, [pc, #124]	; (800769c <HAL_TIM_Base_Start_IT+0xc8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d018      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x80>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d013      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x80>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1c      	ldr	r2, [pc, #112]	; (80076a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00e      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x80>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1b      	ldr	r2, [pc, #108]	; (80076a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d009      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x80>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a19      	ldr	r2, [pc, #100]	; (80076ac <HAL_TIM_Base_Start_IT+0xd8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x80>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a18      	ldr	r2, [pc, #96]	; (80076b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d111      	bne.n	8007678 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b06      	cmp	r3, #6
 8007664:	d010      	beq.n	8007688 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0201 	orr.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007676:	e007      	b.n	8007688 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40010000 	.word	0x40010000
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800
 80076a4:	40000c00 	.word	0x40000c00
 80076a8:	40010400 	.word	0x40010400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40001800 	.word	0x40001800

080076b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e041      	b.n	800774a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f839 	bl	8007752 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4619      	mov	r1, r3
 80076f2:	4610      	mov	r0, r2
 80076f4:	f000 fff4 	bl	80086e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d109      	bne.n	800778c <HAL_TIM_PWM_Start+0x24>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	bf14      	ite	ne
 8007784:	2301      	movne	r3, #1
 8007786:	2300      	moveq	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	e022      	b.n	80077d2 <HAL_TIM_PWM_Start+0x6a>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b04      	cmp	r3, #4
 8007790:	d109      	bne.n	80077a6 <HAL_TIM_PWM_Start+0x3e>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b01      	cmp	r3, #1
 800779c:	bf14      	ite	ne
 800779e:	2301      	movne	r3, #1
 80077a0:	2300      	moveq	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	e015      	b.n	80077d2 <HAL_TIM_PWM_Start+0x6a>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d109      	bne.n	80077c0 <HAL_TIM_PWM_Start+0x58>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	bf14      	ite	ne
 80077b8:	2301      	movne	r3, #1
 80077ba:	2300      	moveq	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	e008      	b.n	80077d2 <HAL_TIM_PWM_Start+0x6a>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	bf14      	ite	ne
 80077cc:	2301      	movne	r3, #1
 80077ce:	2300      	moveq	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e07c      	b.n	80078d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <HAL_TIM_PWM_Start+0x82>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e8:	e013      	b.n	8007812 <HAL_TIM_PWM_Start+0xaa>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d104      	bne.n	80077fa <HAL_TIM_PWM_Start+0x92>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f8:	e00b      	b.n	8007812 <HAL_TIM_PWM_Start+0xaa>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d104      	bne.n	800780a <HAL_TIM_PWM_Start+0xa2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007808:	e003      	b.n	8007812 <HAL_TIM_PWM_Start+0xaa>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2202      	movs	r2, #2
 800780e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2201      	movs	r2, #1
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f001 fb74 	bl	8008f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a2d      	ldr	r2, [pc, #180]	; (80078dc <HAL_TIM_PWM_Start+0x174>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d004      	beq.n	8007834 <HAL_TIM_PWM_Start+0xcc>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a2c      	ldr	r2, [pc, #176]	; (80078e0 <HAL_TIM_PWM_Start+0x178>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d101      	bne.n	8007838 <HAL_TIM_PWM_Start+0xd0>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <HAL_TIM_PWM_Start+0xd2>
 8007838:	2300      	movs	r3, #0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800784c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a22      	ldr	r2, [pc, #136]	; (80078dc <HAL_TIM_PWM_Start+0x174>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d022      	beq.n	800789e <HAL_TIM_PWM_Start+0x136>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007860:	d01d      	beq.n	800789e <HAL_TIM_PWM_Start+0x136>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a1f      	ldr	r2, [pc, #124]	; (80078e4 <HAL_TIM_PWM_Start+0x17c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d018      	beq.n	800789e <HAL_TIM_PWM_Start+0x136>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <HAL_TIM_PWM_Start+0x180>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <HAL_TIM_PWM_Start+0x136>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1c      	ldr	r2, [pc, #112]	; (80078ec <HAL_TIM_PWM_Start+0x184>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00e      	beq.n	800789e <HAL_TIM_PWM_Start+0x136>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a16      	ldr	r2, [pc, #88]	; (80078e0 <HAL_TIM_PWM_Start+0x178>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d009      	beq.n	800789e <HAL_TIM_PWM_Start+0x136>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a18      	ldr	r2, [pc, #96]	; (80078f0 <HAL_TIM_PWM_Start+0x188>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_TIM_PWM_Start+0x136>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <HAL_TIM_PWM_Start+0x18c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d111      	bne.n	80078c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b06      	cmp	r3, #6
 80078ae:	d010      	beq.n	80078d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c0:	e007      	b.n	80078d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0201 	orr.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40010000 	.word	0x40010000
 80078e0:	40010400 	.word	0x40010400
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40000800 	.word	0x40000800
 80078ec:	40000c00 	.word	0x40000c00
 80078f0:	40014000 	.word	0x40014000
 80078f4:	40001800 	.word	0x40001800

080078f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e041      	b.n	800798e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f839 	bl	8007996 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f000 fed2 	bl	80086e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
	...

080079ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d104      	bne.n	80079ca <HAL_TIM_IC_Start_IT+0x1e>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	e013      	b.n	80079f2 <HAL_TIM_IC_Start_IT+0x46>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d104      	bne.n	80079da <HAL_TIM_IC_Start_IT+0x2e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	e00b      	b.n	80079f2 <HAL_TIM_IC_Start_IT+0x46>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d104      	bne.n	80079ea <HAL_TIM_IC_Start_IT+0x3e>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	e003      	b.n	80079f2 <HAL_TIM_IC_Start_IT+0x46>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d104      	bne.n	8007a04 <HAL_TIM_IC_Start_IT+0x58>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	e013      	b.n	8007a2c <HAL_TIM_IC_Start_IT+0x80>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d104      	bne.n	8007a14 <HAL_TIM_IC_Start_IT+0x68>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	e00b      	b.n	8007a2c <HAL_TIM_IC_Start_IT+0x80>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d104      	bne.n	8007a24 <HAL_TIM_IC_Start_IT+0x78>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	e003      	b.n	8007a2c <HAL_TIM_IC_Start_IT+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d102      	bne.n	8007a3a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a34:	7b7b      	ldrb	r3, [r7, #13]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d001      	beq.n	8007a3e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e0cc      	b.n	8007bd8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <HAL_TIM_IC_Start_IT+0xa2>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a4c:	e013      	b.n	8007a76 <HAL_TIM_IC_Start_IT+0xca>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d104      	bne.n	8007a5e <HAL_TIM_IC_Start_IT+0xb2>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a5c:	e00b      	b.n	8007a76 <HAL_TIM_IC_Start_IT+0xca>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d104      	bne.n	8007a6e <HAL_TIM_IC_Start_IT+0xc2>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a6c:	e003      	b.n	8007a76 <HAL_TIM_IC_Start_IT+0xca>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <HAL_TIM_IC_Start_IT+0xda>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a84:	e013      	b.n	8007aae <HAL_TIM_IC_Start_IT+0x102>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d104      	bne.n	8007a96 <HAL_TIM_IC_Start_IT+0xea>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a94:	e00b      	b.n	8007aae <HAL_TIM_IC_Start_IT+0x102>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d104      	bne.n	8007aa6 <HAL_TIM_IC_Start_IT+0xfa>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aa4:	e003      	b.n	8007aae <HAL_TIM_IC_Start_IT+0x102>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b0c      	cmp	r3, #12
 8007ab2:	d841      	bhi.n	8007b38 <HAL_TIM_IC_Start_IT+0x18c>
 8007ab4:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <HAL_TIM_IC_Start_IT+0x110>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007af1 	.word	0x08007af1
 8007ac0:	08007b39 	.word	0x08007b39
 8007ac4:	08007b39 	.word	0x08007b39
 8007ac8:	08007b39 	.word	0x08007b39
 8007acc:	08007b03 	.word	0x08007b03
 8007ad0:	08007b39 	.word	0x08007b39
 8007ad4:	08007b39 	.word	0x08007b39
 8007ad8:	08007b39 	.word	0x08007b39
 8007adc:	08007b15 	.word	0x08007b15
 8007ae0:	08007b39 	.word	0x08007b39
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007b39 	.word	0x08007b39
 8007aec:	08007b27 	.word	0x08007b27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0202 	orr.w	r2, r2, #2
 8007afe:	60da      	str	r2, [r3, #12]
      break;
 8007b00:	e01d      	b.n	8007b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0204 	orr.w	r2, r2, #4
 8007b10:	60da      	str	r2, [r3, #12]
      break;
 8007b12:	e014      	b.n	8007b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0208 	orr.w	r2, r2, #8
 8007b22:	60da      	str	r2, [r3, #12]
      break;
 8007b24:	e00b      	b.n	8007b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 0210 	orr.w	r2, r2, #16
 8007b34:	60da      	str	r2, [r3, #12]
      break;
 8007b36:	e002      	b.n	8007b3e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d148      	bne.n	8007bd6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 f9db 	bl	8008f08 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a22      	ldr	r2, [pc, #136]	; (8007be0 <HAL_TIM_IC_Start_IT+0x234>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d022      	beq.n	8007ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b64:	d01d      	beq.n	8007ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1e      	ldr	r2, [pc, #120]	; (8007be4 <HAL_TIM_IC_Start_IT+0x238>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d018      	beq.n	8007ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <HAL_TIM_IC_Start_IT+0x23c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d013      	beq.n	8007ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a1b      	ldr	r2, [pc, #108]	; (8007bec <HAL_TIM_IC_Start_IT+0x240>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00e      	beq.n	8007ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a19      	ldr	r2, [pc, #100]	; (8007bf0 <HAL_TIM_IC_Start_IT+0x244>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d009      	beq.n	8007ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a18      	ldr	r2, [pc, #96]	; (8007bf4 <HAL_TIM_IC_Start_IT+0x248>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d004      	beq.n	8007ba2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a16      	ldr	r2, [pc, #88]	; (8007bf8 <HAL_TIM_IC_Start_IT+0x24c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d111      	bne.n	8007bc6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b06      	cmp	r3, #6
 8007bb2:	d010      	beq.n	8007bd6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc4:	e007      	b.n	8007bd6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0201 	orr.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40010000 	.word	0x40010000
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	40000c00 	.word	0x40000c00
 8007bf0:	40010400 	.word	0x40010400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40001800 	.word	0x40001800

08007bfc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b0c      	cmp	r3, #12
 8007c0e:	d841      	bhi.n	8007c94 <HAL_TIM_IC_Stop_IT+0x98>
 8007c10:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <HAL_TIM_IC_Stop_IT+0x1c>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c4d 	.word	0x08007c4d
 8007c1c:	08007c95 	.word	0x08007c95
 8007c20:	08007c95 	.word	0x08007c95
 8007c24:	08007c95 	.word	0x08007c95
 8007c28:	08007c5f 	.word	0x08007c5f
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007c95 	.word	0x08007c95
 8007c34:	08007c95 	.word	0x08007c95
 8007c38:	08007c71 	.word	0x08007c71
 8007c3c:	08007c95 	.word	0x08007c95
 8007c40:	08007c95 	.word	0x08007c95
 8007c44:	08007c95 	.word	0x08007c95
 8007c48:	08007c83 	.word	0x08007c83
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0202 	bic.w	r2, r2, #2
 8007c5a:	60da      	str	r2, [r3, #12]
      break;
 8007c5c:	e01d      	b.n	8007c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0204 	bic.w	r2, r2, #4
 8007c6c:	60da      	str	r2, [r3, #12]
      break;
 8007c6e:	e014      	b.n	8007c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0208 	bic.w	r2, r2, #8
 8007c7e:	60da      	str	r2, [r3, #12]
      break;
 8007c80:	e00b      	b.n	8007c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0210 	bic.w	r2, r2, #16
 8007c90:	60da      	str	r2, [r3, #12]
      break;
 8007c92:	e002      	b.n	8007c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	73fb      	strb	r3, [r7, #15]
      break;
 8007c98:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d156      	bne.n	8007d4e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 f92d 	bl	8008f08 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10f      	bne.n	8007cde <HAL_TIM_IC_Stop_IT+0xe2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6a1a      	ldr	r2, [r3, #32]
 8007cc4:	f240 4344 	movw	r3, #1092	; 0x444
 8007cc8:	4013      	ands	r3, r2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d107      	bne.n	8007cde <HAL_TIM_IC_Stop_IT+0xe2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0201 	bic.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_IC_Stop_IT+0xf2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cec:	e013      	b.n	8007d16 <HAL_TIM_IC_Stop_IT+0x11a>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d104      	bne.n	8007cfe <HAL_TIM_IC_Stop_IT+0x102>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cfc:	e00b      	b.n	8007d16 <HAL_TIM_IC_Stop_IT+0x11a>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d104      	bne.n	8007d0e <HAL_TIM_IC_Stop_IT+0x112>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d0c:	e003      	b.n	8007d16 <HAL_TIM_IC_Stop_IT+0x11a>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_IC_Stop_IT+0x12a>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d24:	e013      	b.n	8007d4e <HAL_TIM_IC_Stop_IT+0x152>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_IC_Stop_IT+0x13a>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d34:	e00b      	b.n	8007d4e <HAL_TIM_IC_Stop_IT+0x152>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_IC_Stop_IT+0x14a>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d44:	e003      	b.n	8007d4e <HAL_TIM_IC_Stop_IT+0x152>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e097      	b.n	8007e9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fd f975 	bl	8005070 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6812      	ldr	r2, [r2, #0]
 8007d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d9c:	f023 0307 	bic.w	r3, r3, #7
 8007da0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f000 fc97 	bl	80086e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dda:	f023 0303 	bic.w	r3, r3, #3
 8007dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	021b      	lsls	r3, r3, #8
 8007dea:	4313      	orrs	r3, r2
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007df8:	f023 030c 	bic.w	r3, r3, #12
 8007dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	021b      	lsls	r3, r3, #8
 8007e14:	4313      	orrs	r3, r2
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	011a      	lsls	r2, r3, #4
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	031b      	lsls	r3, r3, #12
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ebc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ec4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ecc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d110      	bne.n	8007ef6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d102      	bne.n	8007ee0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007eda:	7b7b      	ldrb	r3, [r7, #13]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d001      	beq.n	8007ee4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e069      	b.n	8007fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef4:	e031      	b.n	8007f5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d110      	bne.n	8007f1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d102      	bne.n	8007f08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f02:	7b3b      	ldrb	r3, [r7, #12]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d001      	beq.n	8007f0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e055      	b.n	8007fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f1c:	e01d      	b.n	8007f5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d108      	bne.n	8007f36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d105      	bne.n	8007f36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f2a:	7b7b      	ldrb	r3, [r7, #13]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d102      	bne.n	8007f36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f30:	7b3b      	ldrb	r3, [r7, #12]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d001      	beq.n	8007f3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e03e      	b.n	8007fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2202      	movs	r2, #2
 8007f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2202      	movs	r2, #2
 8007f56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_TIM_Encoder_Start+0xc4>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d008      	beq.n	8007f78 <HAL_TIM_Encoder_Start+0xd4>
 8007f66:	e00f      	b.n	8007f88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	2100      	movs	r1, #0
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 ffc9 	bl	8008f08 <TIM_CCxChannelCmd>
      break;
 8007f76:	e016      	b.n	8007fa6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	2104      	movs	r1, #4
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 ffc1 	bl	8008f08 <TIM_CCxChannelCmd>
      break;
 8007f86:	e00e      	b.n	8007fa6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 ffb9 	bl	8008f08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	2104      	movs	r1, #4
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 ffb2 	bl	8008f08 <TIM_CCxChannelCmd>
      break;
 8007fa4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 0201 	orr.w	r2, r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d122      	bne.n	800801c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d11b      	bne.n	800801c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0202 	mvn.w	r2, #2
 8007fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7f9 fc64 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 8008008:	e005      	b.n	8008016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fb4a 	bl	80086a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fb51 	bl	80086b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b04      	cmp	r3, #4
 8008028:	d122      	bne.n	8008070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b04      	cmp	r3, #4
 8008036:	d11b      	bne.n	8008070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0204 	mvn.w	r2, #4
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7f9 fc3a 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fb20 	bl	80086a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fb27 	bl	80086b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b08      	cmp	r3, #8
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0308 	and.w	r3, r3, #8
 8008088:	2b08      	cmp	r3, #8
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0208 	mvn.w	r2, #8
 8008094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2204      	movs	r2, #4
 800809a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7f9 fc10 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 faf6 	bl	80086a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fafd 	bl	80086b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b10      	cmp	r3, #16
 80080d0:	d122      	bne.n	8008118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d11b      	bne.n	8008118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0210 	mvn.w	r2, #16
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2208      	movs	r2, #8
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7f9 fbe6 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 facc 	bl	80086a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fad3 	bl	80086b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b01      	cmp	r3, #1
 8008124:	d10e      	bne.n	8008144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b01      	cmp	r3, #1
 8008132:	d107      	bne.n	8008144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0201 	mvn.w	r2, #1
 800813c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7fc fe50 	bl	8004de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d10e      	bne.n	8008170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b80      	cmp	r3, #128	; 0x80
 800815e:	d107      	bne.n	8008170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 ffca 	bl	8009104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817a:	2b40      	cmp	r3, #64	; 0x40
 800817c:	d10e      	bne.n	800819c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	d107      	bne.n	800819c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fa98 	bl	80086cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d10e      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	f003 0320 	and.w	r3, r3, #32
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d107      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f06f 0220 	mvn.w	r2, #32
 80081c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 ff94 	bl	80090f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e088      	b.n	8008300 <HAL_TIM_IC_ConfigChannel+0x130>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d11b      	bne.n	8008234 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f000 fcb8 	bl	8008b80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699a      	ldr	r2, [r3, #24]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 020c 	bic.w	r2, r2, #12
 800821e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6999      	ldr	r1, [r3, #24]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	619a      	str	r2, [r3, #24]
 8008232:	e060      	b.n	80082f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b04      	cmp	r3, #4
 8008238:	d11c      	bne.n	8008274 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	6819      	ldr	r1, [r3, #0]
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f000 fd3c 	bl	8008cc6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	699a      	ldr	r2, [r3, #24]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800825c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6999      	ldr	r1, [r3, #24]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	021a      	lsls	r2, r3, #8
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	619a      	str	r2, [r3, #24]
 8008272:	e040      	b.n	80082f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b08      	cmp	r3, #8
 8008278:	d11b      	bne.n	80082b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6819      	ldr	r1, [r3, #0]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f000 fd89 	bl	8008da0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 020c 	bic.w	r2, r2, #12
 800829c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69d9      	ldr	r1, [r3, #28]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	61da      	str	r2, [r3, #28]
 80082b0:	e021      	b.n	80082f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b0c      	cmp	r3, #12
 80082b6:	d11c      	bne.n	80082f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	6819      	ldr	r1, [r3, #0]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f000 fda6 	bl	8008e18 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69da      	ldr	r2, [r3, #28]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	69d9      	ldr	r1, [r3, #28]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	021a      	lsls	r2, r3, #8
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	61da      	str	r2, [r3, #28]
 80082f0:	e001      	b.n	80082f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800831e:	2b01      	cmp	r3, #1
 8008320:	d101      	bne.n	8008326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008322:	2302      	movs	r3, #2
 8008324:	e0ae      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b0c      	cmp	r3, #12
 8008332:	f200 809f 	bhi.w	8008474 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008371 	.word	0x08008371
 8008340:	08008475 	.word	0x08008475
 8008344:	08008475 	.word	0x08008475
 8008348:	08008475 	.word	0x08008475
 800834c:	080083b1 	.word	0x080083b1
 8008350:	08008475 	.word	0x08008475
 8008354:	08008475 	.word	0x08008475
 8008358:	08008475 	.word	0x08008475
 800835c:	080083f3 	.word	0x080083f3
 8008360:	08008475 	.word	0x08008475
 8008364:	08008475 	.word	0x08008475
 8008368:	08008475 	.word	0x08008475
 800836c:	08008433 	.word	0x08008433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fa52 	bl	8008820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0208 	orr.w	r2, r2, #8
 800838a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0204 	bic.w	r2, r2, #4
 800839a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6999      	ldr	r1, [r3, #24]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	691a      	ldr	r2, [r3, #16]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	619a      	str	r2, [r3, #24]
      break;
 80083ae:	e064      	b.n	800847a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 faa2 	bl	8008900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699a      	ldr	r2, [r3, #24]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6999      	ldr	r1, [r3, #24]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	021a      	lsls	r2, r3, #8
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	619a      	str	r2, [r3, #24]
      break;
 80083f0:	e043      	b.n	800847a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 faf7 	bl	80089ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69da      	ldr	r2, [r3, #28]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f042 0208 	orr.w	r2, r2, #8
 800840c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	69da      	ldr	r2, [r3, #28]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0204 	bic.w	r2, r2, #4
 800841c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69d9      	ldr	r1, [r3, #28]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	691a      	ldr	r2, [r3, #16]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	61da      	str	r2, [r3, #28]
      break;
 8008430:	e023      	b.n	800847a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fb4b 	bl	8008ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69da      	ldr	r2, [r3, #28]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800844c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69da      	ldr	r2, [r3, #28]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800845c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69d9      	ldr	r1, [r3, #28]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	021a      	lsls	r2, r3, #8
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	61da      	str	r2, [r3, #28]
      break;
 8008472:	e002      	b.n	800847a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	75fb      	strb	r3, [r7, #23]
      break;
 8008478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008482:	7dfb      	ldrb	r3, [r7, #23]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d101      	bne.n	80084a8 <HAL_TIM_ConfigClockSource+0x1c>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e0b4      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x186>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084e0:	d03e      	beq.n	8008560 <HAL_TIM_ConfigClockSource+0xd4>
 80084e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084e6:	f200 8087 	bhi.w	80085f8 <HAL_TIM_ConfigClockSource+0x16c>
 80084ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ee:	f000 8086 	beq.w	80085fe <HAL_TIM_ConfigClockSource+0x172>
 80084f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f6:	d87f      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x16c>
 80084f8:	2b70      	cmp	r3, #112	; 0x70
 80084fa:	d01a      	beq.n	8008532 <HAL_TIM_ConfigClockSource+0xa6>
 80084fc:	2b70      	cmp	r3, #112	; 0x70
 80084fe:	d87b      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008500:	2b60      	cmp	r3, #96	; 0x60
 8008502:	d050      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x11a>
 8008504:	2b60      	cmp	r3, #96	; 0x60
 8008506:	d877      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008508:	2b50      	cmp	r3, #80	; 0x50
 800850a:	d03c      	beq.n	8008586 <HAL_TIM_ConfigClockSource+0xfa>
 800850c:	2b50      	cmp	r3, #80	; 0x50
 800850e:	d873      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008510:	2b40      	cmp	r3, #64	; 0x40
 8008512:	d058      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x13a>
 8008514:	2b40      	cmp	r3, #64	; 0x40
 8008516:	d86f      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008518:	2b30      	cmp	r3, #48	; 0x30
 800851a:	d064      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x15a>
 800851c:	2b30      	cmp	r3, #48	; 0x30
 800851e:	d86b      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008520:	2b20      	cmp	r3, #32
 8008522:	d060      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008524:	2b20      	cmp	r3, #32
 8008526:	d867      	bhi.n	80085f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d05c      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x15a>
 800852c:	2b10      	cmp	r3, #16
 800852e:	d05a      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008530:	e062      	b.n	80085f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	6899      	ldr	r1, [r3, #8]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f000 fcc1 	bl	8008ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	609a      	str	r2, [r3, #8]
      break;
 800855e:	e04f      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6818      	ldr	r0, [r3, #0]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	6899      	ldr	r1, [r3, #8]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f000 fcaa 	bl	8008ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008582:	609a      	str	r2, [r3, #8]
      break;
 8008584:	e03c      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6859      	ldr	r1, [r3, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	461a      	mov	r2, r3
 8008594:	f000 fb68 	bl	8008c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2150      	movs	r1, #80	; 0x50
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fc77 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80085a4:	e02c      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6859      	ldr	r1, [r3, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	461a      	mov	r2, r3
 80085b4:	f000 fbc4 	bl	8008d40 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2160      	movs	r1, #96	; 0x60
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fc67 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80085c4:	e01c      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6859      	ldr	r1, [r3, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f000 fb48 	bl	8008c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2140      	movs	r1, #64	; 0x40
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fc57 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80085e4:	e00c      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4619      	mov	r1, r3
 80085f0:	4610      	mov	r0, r2
 80085f2:	f000 fc4e 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80085f6:	e003      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
      break;
 80085fc:	e000      	b.n	8008600 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b0c      	cmp	r3, #12
 800862e:	d831      	bhi.n	8008694 <HAL_TIM_ReadCapturedValue+0x78>
 8008630:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	0800866d 	.word	0x0800866d
 800863c:	08008695 	.word	0x08008695
 8008640:	08008695 	.word	0x08008695
 8008644:	08008695 	.word	0x08008695
 8008648:	08008677 	.word	0x08008677
 800864c:	08008695 	.word	0x08008695
 8008650:	08008695 	.word	0x08008695
 8008654:	08008695 	.word	0x08008695
 8008658:	08008681 	.word	0x08008681
 800865c:	08008695 	.word	0x08008695
 8008660:	08008695 	.word	0x08008695
 8008664:	08008695 	.word	0x08008695
 8008668:	0800868b 	.word	0x0800868b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008672:	60fb      	str	r3, [r7, #12]

      break;
 8008674:	e00f      	b.n	8008696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867c:	60fb      	str	r3, [r7, #12]

      break;
 800867e:	e00a      	b.n	8008696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008686:	60fb      	str	r3, [r7, #12]

      break;
 8008688:	e005      	b.n	8008696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	60fb      	str	r3, [r7, #12]

      break;
 8008692:	e000      	b.n	8008696 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008694:	bf00      	nop
  }

  return tmpreg;
 8008696:	68fb      	ldr	r3, [r7, #12]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a40      	ldr	r2, [pc, #256]	; (80087f4 <TIM_Base_SetConfig+0x114>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d013      	beq.n	8008720 <TIM_Base_SetConfig+0x40>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fe:	d00f      	beq.n	8008720 <TIM_Base_SetConfig+0x40>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a3d      	ldr	r2, [pc, #244]	; (80087f8 <TIM_Base_SetConfig+0x118>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00b      	beq.n	8008720 <TIM_Base_SetConfig+0x40>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a3c      	ldr	r2, [pc, #240]	; (80087fc <TIM_Base_SetConfig+0x11c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d007      	beq.n	8008720 <TIM_Base_SetConfig+0x40>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a3b      	ldr	r2, [pc, #236]	; (8008800 <TIM_Base_SetConfig+0x120>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d003      	beq.n	8008720 <TIM_Base_SetConfig+0x40>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a3a      	ldr	r2, [pc, #232]	; (8008804 <TIM_Base_SetConfig+0x124>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d108      	bne.n	8008732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a2f      	ldr	r2, [pc, #188]	; (80087f4 <TIM_Base_SetConfig+0x114>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d02b      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008740:	d027      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a2c      	ldr	r2, [pc, #176]	; (80087f8 <TIM_Base_SetConfig+0x118>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d023      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a2b      	ldr	r2, [pc, #172]	; (80087fc <TIM_Base_SetConfig+0x11c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d01f      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a2a      	ldr	r2, [pc, #168]	; (8008800 <TIM_Base_SetConfig+0x120>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d01b      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a29      	ldr	r2, [pc, #164]	; (8008804 <TIM_Base_SetConfig+0x124>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d017      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a28      	ldr	r2, [pc, #160]	; (8008808 <TIM_Base_SetConfig+0x128>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d013      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a27      	ldr	r2, [pc, #156]	; (800880c <TIM_Base_SetConfig+0x12c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00f      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a26      	ldr	r2, [pc, #152]	; (8008810 <TIM_Base_SetConfig+0x130>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00b      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a25      	ldr	r2, [pc, #148]	; (8008814 <TIM_Base_SetConfig+0x134>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d007      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a24      	ldr	r2, [pc, #144]	; (8008818 <TIM_Base_SetConfig+0x138>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d003      	beq.n	8008792 <TIM_Base_SetConfig+0xb2>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a23      	ldr	r2, [pc, #140]	; (800881c <TIM_Base_SetConfig+0x13c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d108      	bne.n	80087a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a0a      	ldr	r2, [pc, #40]	; (80087f4 <TIM_Base_SetConfig+0x114>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_Base_SetConfig+0xf8>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a0c      	ldr	r2, [pc, #48]	; (8008804 <TIM_Base_SetConfig+0x124>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d103      	bne.n	80087e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	615a      	str	r2, [r3, #20]
}
 80087e6:	bf00      	nop
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	40010000 	.word	0x40010000
 80087f8:	40000400 	.word	0x40000400
 80087fc:	40000800 	.word	0x40000800
 8008800:	40000c00 	.word	0x40000c00
 8008804:	40010400 	.word	0x40010400
 8008808:	40014000 	.word	0x40014000
 800880c:	40014400 	.word	0x40014400
 8008810:	40014800 	.word	0x40014800
 8008814:	40001800 	.word	0x40001800
 8008818:	40001c00 	.word	0x40001c00
 800881c:	40002000 	.word	0x40002000

08008820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	f023 0201 	bic.w	r2, r3, #1
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0303 	bic.w	r3, r3, #3
 8008856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f023 0302 	bic.w	r3, r3, #2
 8008868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	4313      	orrs	r3, r2
 8008872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a20      	ldr	r2, [pc, #128]	; (80088f8 <TIM_OC1_SetConfig+0xd8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d003      	beq.n	8008884 <TIM_OC1_SetConfig+0x64>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a1f      	ldr	r2, [pc, #124]	; (80088fc <TIM_OC1_SetConfig+0xdc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d10c      	bne.n	800889e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f023 0308 	bic.w	r3, r3, #8
 800888a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	4313      	orrs	r3, r2
 8008894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f023 0304 	bic.w	r3, r3, #4
 800889c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <TIM_OC1_SetConfig+0xd8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d003      	beq.n	80088ae <TIM_OC1_SetConfig+0x8e>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a14      	ldr	r2, [pc, #80]	; (80088fc <TIM_OC1_SetConfig+0xdc>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d111      	bne.n	80088d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	621a      	str	r2, [r3, #32]
}
 80088ec:	bf00      	nop
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	40010000 	.word	0x40010000
 80088fc:	40010400 	.word	0x40010400

08008900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	f023 0210 	bic.w	r2, r3, #16
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800892e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4313      	orrs	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f023 0320 	bic.w	r3, r3, #32
 800894a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a22      	ldr	r2, [pc, #136]	; (80089e4 <TIM_OC2_SetConfig+0xe4>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_OC2_SetConfig+0x68>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a21      	ldr	r2, [pc, #132]	; (80089e8 <TIM_OC2_SetConfig+0xe8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d10d      	bne.n	8008984 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800896e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	011b      	lsls	r3, r3, #4
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4313      	orrs	r3, r2
 800897a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a17      	ldr	r2, [pc, #92]	; (80089e4 <TIM_OC2_SetConfig+0xe4>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d003      	beq.n	8008994 <TIM_OC2_SetConfig+0x94>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a16      	ldr	r2, [pc, #88]	; (80089e8 <TIM_OC2_SetConfig+0xe8>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d113      	bne.n	80089bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800899a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	621a      	str	r2, [r3, #32]
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400

080089ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 0303 	bic.w	r3, r3, #3
 8008a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a21      	ldr	r2, [pc, #132]	; (8008acc <TIM_OC3_SetConfig+0xe0>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d003      	beq.n	8008a52 <TIM_OC3_SetConfig+0x66>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a20      	ldr	r2, [pc, #128]	; (8008ad0 <TIM_OC3_SetConfig+0xe4>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d10d      	bne.n	8008a6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	021b      	lsls	r3, r3, #8
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a16      	ldr	r2, [pc, #88]	; (8008acc <TIM_OC3_SetConfig+0xe0>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d003      	beq.n	8008a7e <TIM_OC3_SetConfig+0x92>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <TIM_OC3_SetConfig+0xe4>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d113      	bne.n	8008aa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	011b      	lsls	r3, r3, #4
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	621a      	str	r2, [r3, #32]
}
 8008ac0:	bf00      	nop
 8008ac2:	371c      	adds	r7, #28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	40010000 	.word	0x40010000
 8008ad0:	40010400 	.word	0x40010400

08008ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
 8008aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	031b      	lsls	r3, r3, #12
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a12      	ldr	r2, [pc, #72]	; (8008b78 <TIM_OC4_SetConfig+0xa4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d003      	beq.n	8008b3c <TIM_OC4_SetConfig+0x68>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a11      	ldr	r2, [pc, #68]	; (8008b7c <TIM_OC4_SetConfig+0xa8>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d109      	bne.n	8008b50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	019b      	lsls	r3, r3, #6
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	621a      	str	r2, [r3, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	40010400 	.word	0x40010400

08008b80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f023 0201 	bic.w	r2, r3, #1
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4a28      	ldr	r2, [pc, #160]	; (8008c4c <TIM_TI1_SetConfig+0xcc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d01b      	beq.n	8008be6 <TIM_TI1_SetConfig+0x66>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb4:	d017      	beq.n	8008be6 <TIM_TI1_SetConfig+0x66>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4a25      	ldr	r2, [pc, #148]	; (8008c50 <TIM_TI1_SetConfig+0xd0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d013      	beq.n	8008be6 <TIM_TI1_SetConfig+0x66>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a24      	ldr	r2, [pc, #144]	; (8008c54 <TIM_TI1_SetConfig+0xd4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00f      	beq.n	8008be6 <TIM_TI1_SetConfig+0x66>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a23      	ldr	r2, [pc, #140]	; (8008c58 <TIM_TI1_SetConfig+0xd8>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00b      	beq.n	8008be6 <TIM_TI1_SetConfig+0x66>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4a22      	ldr	r2, [pc, #136]	; (8008c5c <TIM_TI1_SetConfig+0xdc>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d007      	beq.n	8008be6 <TIM_TI1_SetConfig+0x66>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4a21      	ldr	r2, [pc, #132]	; (8008c60 <TIM_TI1_SetConfig+0xe0>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <TIM_TI1_SetConfig+0x66>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4a20      	ldr	r2, [pc, #128]	; (8008c64 <TIM_TI1_SetConfig+0xe4>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d101      	bne.n	8008bea <TIM_TI1_SetConfig+0x6a>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <TIM_TI1_SetConfig+0x6c>
 8008bea:	2300      	movs	r3, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d008      	beq.n	8008c02 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	617b      	str	r3, [r7, #20]
 8008c00:	e003      	b.n	8008c0a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	011b      	lsls	r3, r3, #4
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f023 030a 	bic.w	r3, r3, #10
 8008c24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f003 030a 	and.w	r3, r3, #10
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	621a      	str	r2, [r3, #32]
}
 8008c3e:	bf00      	nop
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40000400 	.word	0x40000400
 8008c54:	40000800 	.word	0x40000800
 8008c58:	40000c00 	.word	0x40000c00
 8008c5c:	40010400 	.word	0x40010400
 8008c60:	40014000 	.word	0x40014000
 8008c64:	40001800 	.word	0x40001800

08008c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f023 0201 	bic.w	r2, r3, #1
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f023 030a 	bic.w	r3, r3, #10
 8008ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	621a      	str	r2, [r3, #32]
}
 8008cba:	bf00      	nop
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b087      	sub	sp, #28
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	607a      	str	r2, [r7, #4]
 8008cd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	f023 0210 	bic.w	r2, r3, #16
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	031b      	lsls	r3, r3, #12
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	621a      	str	r2, [r3, #32]
}
 8008d34:	bf00      	nop
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	f023 0210 	bic.w	r2, r3, #16
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	031b      	lsls	r3, r3, #12
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	621a      	str	r2, [r3, #32]
}
 8008d94:	bf00      	nop
 8008d96:	371c      	adds	r7, #28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f023 0303 	bic.w	r3, r3, #3
 8008dcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008df0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	021b      	lsls	r3, r3, #8
 8008df6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	621a      	str	r2, [r3, #32]
}
 8008e0c:	bf00      	nop
 8008e0e:	371c      	adds	r7, #28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	021b      	lsls	r3, r3, #8
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	031b      	lsls	r3, r3, #12
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008e6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	031b      	lsls	r3, r3, #12
 8008e70:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	621a      	str	r2, [r3, #32]
}
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	f043 0307 	orr.w	r3, r3, #7
 8008eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	609a      	str	r2, [r3, #8]
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	609a      	str	r2, [r3, #8]
}
 8008efc:	bf00      	nop
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f003 031f 	and.w	r3, r3, #31
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a1a      	ldr	r2, [r3, #32]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	401a      	ands	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a1a      	ldr	r2, [r3, #32]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f003 031f 	and.w	r3, r3, #31
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f40:	431a      	orrs	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	621a      	str	r2, [r3, #32]
}
 8008f46:	bf00      	nop
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
	...

08008f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e05a      	b.n	8009022 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a21      	ldr	r2, [pc, #132]	; (8009030 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d022      	beq.n	8008ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb8:	d01d      	beq.n	8008ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d018      	beq.n	8008ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1b      	ldr	r2, [pc, #108]	; (8009038 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d013      	beq.n	8008ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a1a      	ldr	r2, [pc, #104]	; (800903c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00e      	beq.n	8008ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a18      	ldr	r2, [pc, #96]	; (8009040 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d009      	beq.n	8008ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a17      	ldr	r2, [pc, #92]	; (8009044 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d004      	beq.n	8008ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a15      	ldr	r2, [pc, #84]	; (8009048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d10c      	bne.n	8009010 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	4313      	orrs	r3, r2
 8009006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	40010000 	.word	0x40010000
 8009034:	40000400 	.word	0x40000400
 8009038:	40000800 	.word	0x40000800
 800903c:	40000c00 	.word	0x40000c00
 8009040:	40010400 	.word	0x40010400
 8009044:	40014000 	.word	0x40014000
 8009048:	40001800 	.word	0x40001800

0800904c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009060:	2b01      	cmp	r3, #1
 8009062:	d101      	bne.n	8009068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009064:	2302      	movs	r3, #2
 8009066:	e03d      	b.n	80090e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4313      	orrs	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e03f      	b.n	80091aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7fc f836 	bl	80051b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2224      	movs	r2, #36	; 0x24
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800915a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fddf 	bl	8009d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	691a      	ldr	r2, [r3, #16]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	695a      	ldr	r2, [r3, #20]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68da      	ldr	r2, [r3, #12]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2220      	movs	r2, #32
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2220      	movs	r2, #32
 80091a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b08a      	sub	sp, #40	; 0x28
 80091b6:	af02      	add	r7, sp, #8
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	603b      	str	r3, [r7, #0]
 80091be:	4613      	mov	r3, r2
 80091c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d17c      	bne.n	80092cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <HAL_UART_Transmit+0x2c>
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e075      	b.n	80092ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_UART_Transmit+0x3e>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e06e      	b.n	80092ce <HAL_UART_Transmit+0x11c>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2221      	movs	r2, #33	; 0x21
 8009202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009206:	f7fc f961 	bl	80054cc <HAL_GetTick>
 800920a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	88fa      	ldrh	r2, [r7, #6]
 8009210:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009220:	d108      	bne.n	8009234 <HAL_UART_Transmit+0x82>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d104      	bne.n	8009234 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800922a:	2300      	movs	r3, #0
 800922c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	61bb      	str	r3, [r7, #24]
 8009232:	e003      	b.n	800923c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009238:	2300      	movs	r3, #0
 800923a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009244:	e02a      	b.n	800929c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2200      	movs	r2, #0
 800924e:	2180      	movs	r1, #128	; 0x80
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f000 fb1f 	bl	8009894 <UART_WaitOnFlagUntilTimeout>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e036      	b.n	80092ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10b      	bne.n	800927e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009274:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	3302      	adds	r3, #2
 800927a:	61bb      	str	r3, [r7, #24]
 800927c:	e007      	b.n	800928e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	781a      	ldrb	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	3301      	adds	r3, #1
 800928c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009292:	b29b      	uxth	r3, r3
 8009294:	3b01      	subs	r3, #1
 8009296:	b29a      	uxth	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1cf      	bne.n	8009246 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2200      	movs	r2, #0
 80092ae:	2140      	movs	r1, #64	; 0x40
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 faef 	bl	8009894 <UART_WaitOnFlagUntilTimeout>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e006      	b.n	80092ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	e000      	b.n	80092ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80092cc:	2302      	movs	r3, #2
  }
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	60f8      	str	r0, [r7, #12]
 80092de:	60b9      	str	r1, [r7, #8]
 80092e0:	4613      	mov	r3, r2
 80092e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b20      	cmp	r3, #32
 80092ee:	d11d      	bne.n	800932c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <HAL_UART_Receive_IT+0x26>
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e016      	b.n	800932e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009306:	2b01      	cmp	r3, #1
 8009308:	d101      	bne.n	800930e <HAL_UART_Receive_IT+0x38>
 800930a:	2302      	movs	r3, #2
 800930c:	e00f      	b.n	800932e <HAL_UART_Receive_IT+0x58>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	461a      	mov	r2, r3
 8009320:	68b9      	ldr	r1, [r7, #8]
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 fb24 	bl	8009970 <UART_Start_Receive_IT>
 8009328:	4603      	mov	r3, r0
 800932a:	e000      	b.n	800932e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800932c:	2302      	movs	r3, #2
  }
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b0ba      	sub	sp, #232	; 0xe8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800935e:	2300      	movs	r3, #0
 8009360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009364:	2300      	movs	r3, #0
 8009366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800936a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800936e:	f003 030f 	and.w	r3, r3, #15
 8009372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10f      	bne.n	800939e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800937e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <HAL_UART_IRQHandler+0x66>
 800938a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fc07 	bl	8009baa <UART_Receive_IT>
      return;
 800939c:	e256      	b.n	800984c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800939e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 80de 	beq.w	8009564 <HAL_UART_IRQHandler+0x22c>
 80093a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d106      	bne.n	80093c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80093b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 80d1 	beq.w	8009564 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <HAL_UART_IRQHandler+0xae>
 80093ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d005      	beq.n	80093e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	f043 0201 	orr.w	r2, r3, #1
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <HAL_UART_IRQHandler+0xd2>
 80093f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009402:	f043 0202 	orr.w	r2, r3, #2
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800940a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <HAL_UART_IRQHandler+0xf6>
 8009416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f043 0204 	orr.w	r2, r3, #4
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800942e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009432:	f003 0308 	and.w	r3, r3, #8
 8009436:	2b00      	cmp	r3, #0
 8009438:	d011      	beq.n	800945e <HAL_UART_IRQHandler+0x126>
 800943a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800943e:	f003 0320 	and.w	r3, r3, #32
 8009442:	2b00      	cmp	r3, #0
 8009444:	d105      	bne.n	8009452 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d005      	beq.n	800945e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	f043 0208 	orr.w	r2, r3, #8
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 81ed 	beq.w	8009842 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800946c:	f003 0320 	and.w	r3, r3, #32
 8009470:	2b00      	cmp	r3, #0
 8009472:	d008      	beq.n	8009486 <HAL_UART_IRQHandler+0x14e>
 8009474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009478:	f003 0320 	and.w	r3, r3, #32
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fb92 	bl	8009baa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	695b      	ldr	r3, [r3, #20]
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b40      	cmp	r3, #64	; 0x40
 8009492:	bf0c      	ite	eq
 8009494:	2301      	moveq	r3, #1
 8009496:	2300      	movne	r3, #0
 8009498:	b2db      	uxtb	r3, r3
 800949a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d103      	bne.n	80094b2 <HAL_UART_IRQHandler+0x17a>
 80094aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d04f      	beq.n	8009552 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa9a 	bl	80099ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c2:	2b40      	cmp	r3, #64	; 0x40
 80094c4:	d141      	bne.n	800954a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3314      	adds	r3, #20
 80094cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3314      	adds	r3, #20
 80094ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800950a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1d9      	bne.n	80094c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	2b00      	cmp	r3, #0
 8009518:	d013      	beq.n	8009542 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951e:	4a7d      	ldr	r2, [pc, #500]	; (8009714 <HAL_UART_IRQHandler+0x3dc>)
 8009520:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009526:	4618      	mov	r0, r3
 8009528:	f7fc f952 	bl	80057d0 <HAL_DMA_Abort_IT>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d016      	beq.n	8009560 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009540:	e00e      	b.n	8009560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f990 	bl	8009868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009548:	e00a      	b.n	8009560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f98c 	bl	8009868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009550:	e006      	b.n	8009560 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f988 	bl	8009868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800955e:	e170      	b.n	8009842 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009560:	bf00      	nop
    return;
 8009562:	e16e      	b.n	8009842 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009568:	2b01      	cmp	r3, #1
 800956a:	f040 814a 	bne.w	8009802 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800956e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009572:	f003 0310 	and.w	r3, r3, #16
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 8143 	beq.w	8009802 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800957c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009580:	f003 0310 	and.w	r3, r3, #16
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 813c 	beq.w	8009802 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800958a:	2300      	movs	r3, #0
 800958c:	60bb      	str	r3, [r7, #8]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	60bb      	str	r3, [r7, #8]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	60bb      	str	r3, [r7, #8]
 800959e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095aa:	2b40      	cmp	r3, #64	; 0x40
 80095ac:	f040 80b4 	bne.w	8009718 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 8140 	beq.w	8009846 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095ce:	429a      	cmp	r2, r3
 80095d0:	f080 8139 	bcs.w	8009846 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095e6:	f000 8088 	beq.w	80096fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	330c      	adds	r3, #12
 80095f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	330c      	adds	r3, #12
 8009612:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009616:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800961a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800962e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1d9      	bne.n	80095ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3314      	adds	r3, #20
 800963c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009648:	f023 0301 	bic.w	r3, r3, #1
 800964c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3314      	adds	r3, #20
 8009656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800965a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800965e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009660:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800966c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e1      	bne.n	8009636 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3314      	adds	r3, #20
 8009678:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3314      	adds	r3, #20
 8009692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800969c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e3      	bne.n	8009672 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	330c      	adds	r3, #12
 80096be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ca:	f023 0310 	bic.w	r3, r3, #16
 80096ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	330c      	adds	r3, #12
 80096d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80096dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80096de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e3      	bne.n	80096b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fb fffb 	bl	80056f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009702:	b29b      	uxth	r3, r3
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	b29b      	uxth	r3, r3
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f8b6 	bl	800987c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009710:	e099      	b.n	8009846 <HAL_UART_IRQHandler+0x50e>
 8009712:	bf00      	nop
 8009714:	08009ab3 	.word	0x08009ab3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009720:	b29b      	uxth	r3, r3
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800972c:	b29b      	uxth	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 808b 	beq.w	800984a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 8086 	beq.w	800984a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	330c      	adds	r3, #12
 8009744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800974e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	330c      	adds	r3, #12
 800975e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009762:	647a      	str	r2, [r7, #68]	; 0x44
 8009764:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e3      	bne.n	800973e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3314      	adds	r3, #20
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	623b      	str	r3, [r7, #32]
   return(result);
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	f023 0301 	bic.w	r3, r3, #1
 800978c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3314      	adds	r3, #20
 8009796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800979a:	633a      	str	r2, [r7, #48]	; 0x30
 800979c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a2:	e841 2300 	strex	r3, r2, [r1]
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1e3      	bne.n	8009776 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	330c      	adds	r3, #12
 80097c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 0310 	bic.w	r3, r3, #16
 80097d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	330c      	adds	r3, #12
 80097dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80097e0:	61fa      	str	r2, [r7, #28]
 80097e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	69b9      	ldr	r1, [r7, #24]
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	617b      	str	r3, [r7, #20]
   return(result);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e3      	bne.n	80097bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f83e 	bl	800987c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009800:	e023      	b.n	800984a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800980a:	2b00      	cmp	r3, #0
 800980c:	d009      	beq.n	8009822 <HAL_UART_IRQHandler+0x4ea>
 800980e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f95d 	bl	8009ada <UART_Transmit_IT>
    return;
 8009820:	e014      	b.n	800984c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00e      	beq.n	800984c <HAL_UART_IRQHandler+0x514>
 800982e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	d008      	beq.n	800984c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f99d 	bl	8009b7a <UART_EndTransmit_IT>
    return;
 8009840:	e004      	b.n	800984c <HAL_UART_IRQHandler+0x514>
    return;
 8009842:	bf00      	nop
 8009844:	e002      	b.n	800984c <HAL_UART_IRQHandler+0x514>
      return;
 8009846:	bf00      	nop
 8009848:	e000      	b.n	800984c <HAL_UART_IRQHandler+0x514>
      return;
 800984a:	bf00      	nop
  }
}
 800984c:	37e8      	adds	r7, #232	; 0xe8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop

08009854 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b090      	sub	sp, #64	; 0x40
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	4613      	mov	r3, r2
 80098a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a4:	e050      	b.n	8009948 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ac:	d04c      	beq.n	8009948 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d007      	beq.n	80098c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80098b4:	f7fb fe0a 	bl	80054cc <HAL_GetTick>
 80098b8:	4602      	mov	r2, r0
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d241      	bcs.n	8009948 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	330c      	adds	r3, #12
 80098ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	330c      	adds	r3, #12
 80098e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098e4:	637a      	str	r2, [r7, #52]	; 0x34
 80098e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098ec:	e841 2300 	strex	r3, r2, [r1]
 80098f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1e5      	bne.n	80098c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3314      	adds	r3, #20
 80098fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	e853 3f00 	ldrex	r3, [r3]
 8009906:	613b      	str	r3, [r7, #16]
   return(result);
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f023 0301 	bic.w	r3, r3, #1
 800990e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3314      	adds	r3, #20
 8009916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009918:	623a      	str	r2, [r7, #32]
 800991a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991c:	69f9      	ldr	r1, [r7, #28]
 800991e:	6a3a      	ldr	r2, [r7, #32]
 8009920:	e841 2300 	strex	r3, r2, [r1]
 8009924:	61bb      	str	r3, [r7, #24]
   return(result);
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1e5      	bne.n	80098f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2220      	movs	r2, #32
 8009930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e00f      	b.n	8009968 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4013      	ands	r3, r2
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	429a      	cmp	r2, r3
 8009956:	bf0c      	ite	eq
 8009958:	2301      	moveq	r3, #1
 800995a:	2300      	movne	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	461a      	mov	r2, r3
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	429a      	cmp	r2, r3
 8009964:	d09f      	beq.n	80098a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3740      	adds	r7, #64	; 0x40
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	4613      	mov	r3, r2
 800997c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	88fa      	ldrh	r2, [r7, #6]
 8009988:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	88fa      	ldrh	r2, [r7, #6]
 800998e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2222      	movs	r2, #34	; 0x22
 800999a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d007      	beq.n	80099be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	695a      	ldr	r2, [r3, #20]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f042 0201 	orr.w	r2, r2, #1
 80099cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68da      	ldr	r2, [r3, #12]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f042 0220 	orr.w	r2, r2, #32
 80099dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b095      	sub	sp, #84	; 0x54
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	330c      	adds	r3, #12
 80099fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fe:	e853 3f00 	ldrex	r3, [r3]
 8009a02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	330c      	adds	r3, #12
 8009a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a14:	643a      	str	r2, [r7, #64]	; 0x40
 8009a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a1c:	e841 2300 	strex	r3, r2, [r1]
 8009a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e5      	bne.n	80099f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3314      	adds	r3, #20
 8009a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	e853 3f00 	ldrex	r3, [r3]
 8009a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	f023 0301 	bic.w	r3, r3, #1
 8009a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3314      	adds	r3, #20
 8009a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a50:	e841 2300 	strex	r3, r2, [r1]
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1e5      	bne.n	8009a28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d119      	bne.n	8009a98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	330c      	adds	r3, #12
 8009a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f023 0310 	bic.w	r3, r3, #16
 8009a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	330c      	adds	r3, #12
 8009a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a84:	61ba      	str	r2, [r7, #24]
 8009a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6979      	ldr	r1, [r7, #20]
 8009a8a:	69ba      	ldr	r2, [r7, #24]
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	613b      	str	r3, [r7, #16]
   return(result);
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e5      	bne.n	8009a64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009aa6:	bf00      	nop
 8009aa8:	3754      	adds	r7, #84	; 0x54
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7ff fecb 	bl	8009868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ad2:	bf00      	nop
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b085      	sub	sp, #20
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b21      	cmp	r3, #33	; 0x21
 8009aec:	d13e      	bne.n	8009b6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009af6:	d114      	bne.n	8009b22 <UART_Transmit_IT+0x48>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d110      	bne.n	8009b22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	1c9a      	adds	r2, r3, #2
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	621a      	str	r2, [r3, #32]
 8009b20:	e008      	b.n	8009b34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	1c59      	adds	r1, r3, #1
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	6211      	str	r1, [r2, #32]
 8009b2c:	781a      	ldrb	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	4619      	mov	r1, r3
 8009b42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10f      	bne.n	8009b68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e000      	b.n	8009b6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b6c:	2302      	movs	r3, #2
  }
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3714      	adds	r7, #20
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2220      	movs	r2, #32
 8009b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff fe5a 	bl	8009854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b08c      	sub	sp, #48	; 0x30
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b22      	cmp	r3, #34	; 0x22
 8009bbc:	f040 80ab 	bne.w	8009d16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc8:	d117      	bne.n	8009bfa <UART_Receive_IT+0x50>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d113      	bne.n	8009bfa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf2:	1c9a      	adds	r2, r3, #2
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8009bf8:	e026      	b.n	8009c48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009c00:	2300      	movs	r3, #0
 8009c02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c0c:	d007      	beq.n	8009c1e <UART_Receive_IT+0x74>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10a      	bne.n	8009c2c <UART_Receive_IT+0x82>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d106      	bne.n	8009c2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	e008      	b.n	8009c3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	4619      	mov	r1, r3
 8009c56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d15a      	bne.n	8009d12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0220 	bic.w	r2, r2, #32
 8009c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	695a      	ldr	r2, [r3, #20]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 0201 	bic.w	r2, r2, #1
 8009c8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d135      	bne.n	8009d08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	330c      	adds	r3, #12
 8009ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f023 0310 	bic.w	r3, r3, #16
 8009cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	330c      	adds	r3, #12
 8009cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc2:	623a      	str	r2, [r7, #32]
 8009cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc6:	69f9      	ldr	r1, [r7, #28]
 8009cc8:	6a3a      	ldr	r2, [r7, #32]
 8009cca:	e841 2300 	strex	r3, r2, [r1]
 8009cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1e5      	bne.n	8009ca2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0310 	and.w	r3, r3, #16
 8009ce0:	2b10      	cmp	r3, #16
 8009ce2:	d10a      	bne.n	8009cfa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff fdbb 	bl	800987c <HAL_UARTEx_RxEventCallback>
 8009d06:	e002      	b.n	8009d0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7f7 fe8b 	bl	8001a24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e002      	b.n	8009d18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	e000      	b.n	8009d18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009d16:	2302      	movs	r3, #2
  }
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3730      	adds	r7, #48	; 0x30
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d24:	b0c0      	sub	sp, #256	; 0x100
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d3c:	68d9      	ldr	r1, [r3, #12]
 8009d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	ea40 0301 	orr.w	r3, r0, r1
 8009d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d4e:	689a      	ldr	r2, [r3, #8]
 8009d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	431a      	orrs	r2, r3
 8009d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d78:	f021 010c 	bic.w	r1, r1, #12
 8009d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d86:	430b      	orrs	r3, r1
 8009d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d9a:	6999      	ldr	r1, [r3, #24]
 8009d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	ea40 0301 	orr.w	r3, r0, r1
 8009da6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4b8f      	ldr	r3, [pc, #572]	; (8009fec <UART_SetConfig+0x2cc>)
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d005      	beq.n	8009dc0 <UART_SetConfig+0xa0>
 8009db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	4b8d      	ldr	r3, [pc, #564]	; (8009ff0 <UART_SetConfig+0x2d0>)
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d104      	bne.n	8009dca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009dc0:	f7fd fb0a 	bl	80073d8 <HAL_RCC_GetPCLK2Freq>
 8009dc4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009dc8:	e003      	b.n	8009dd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009dca:	f7fd faf1 	bl	80073b0 <HAL_RCC_GetPCLK1Freq>
 8009dce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd6:	69db      	ldr	r3, [r3, #28]
 8009dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ddc:	f040 810c 	bne.w	8009ff8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009de4:	2200      	movs	r2, #0
 8009de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009dea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009dee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009df2:	4622      	mov	r2, r4
 8009df4:	462b      	mov	r3, r5
 8009df6:	1891      	adds	r1, r2, r2
 8009df8:	65b9      	str	r1, [r7, #88]	; 0x58
 8009dfa:	415b      	adcs	r3, r3
 8009dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e02:	4621      	mov	r1, r4
 8009e04:	eb12 0801 	adds.w	r8, r2, r1
 8009e08:	4629      	mov	r1, r5
 8009e0a:	eb43 0901 	adc.w	r9, r3, r1
 8009e0e:	f04f 0200 	mov.w	r2, #0
 8009e12:	f04f 0300 	mov.w	r3, #0
 8009e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e22:	4690      	mov	r8, r2
 8009e24:	4699      	mov	r9, r3
 8009e26:	4623      	mov	r3, r4
 8009e28:	eb18 0303 	adds.w	r3, r8, r3
 8009e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e30:	462b      	mov	r3, r5
 8009e32:	eb49 0303 	adc.w	r3, r9, r3
 8009e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e4e:	460b      	mov	r3, r1
 8009e50:	18db      	adds	r3, r3, r3
 8009e52:	653b      	str	r3, [r7, #80]	; 0x50
 8009e54:	4613      	mov	r3, r2
 8009e56:	eb42 0303 	adc.w	r3, r2, r3
 8009e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8009e5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e64:	f7f6 feca 	bl	8000bfc <__aeabi_uldivmod>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4b61      	ldr	r3, [pc, #388]	; (8009ff4 <UART_SetConfig+0x2d4>)
 8009e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e72:	095b      	lsrs	r3, r3, #5
 8009e74:	011c      	lsls	r4, r3, #4
 8009e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009e84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009e88:	4642      	mov	r2, r8
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	1891      	adds	r1, r2, r2
 8009e8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e90:	415b      	adcs	r3, r3
 8009e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e98:	4641      	mov	r1, r8
 8009e9a:	eb12 0a01 	adds.w	sl, r2, r1
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	eb43 0b01 	adc.w	fp, r3, r1
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	f04f 0300 	mov.w	r3, #0
 8009eac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009eb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009eb8:	4692      	mov	sl, r2
 8009eba:	469b      	mov	fp, r3
 8009ebc:	4643      	mov	r3, r8
 8009ebe:	eb1a 0303 	adds.w	r3, sl, r3
 8009ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ec6:	464b      	mov	r3, r9
 8009ec8:	eb4b 0303 	adc.w	r3, fp, r3
 8009ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009edc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009ee0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	18db      	adds	r3, r3, r3
 8009ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8009eea:	4613      	mov	r3, r2
 8009eec:	eb42 0303 	adc.w	r3, r2, r3
 8009ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ef2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009ef6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009efa:	f7f6 fe7f 	bl	8000bfc <__aeabi_uldivmod>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4611      	mov	r1, r2
 8009f04:	4b3b      	ldr	r3, [pc, #236]	; (8009ff4 <UART_SetConfig+0x2d4>)
 8009f06:	fba3 2301 	umull	r2, r3, r3, r1
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	2264      	movs	r2, #100	; 0x64
 8009f0e:	fb02 f303 	mul.w	r3, r2, r3
 8009f12:	1acb      	subs	r3, r1, r3
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f1a:	4b36      	ldr	r3, [pc, #216]	; (8009ff4 <UART_SetConfig+0x2d4>)
 8009f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f28:	441c      	add	r4, r3
 8009f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	464b      	mov	r3, r9
 8009f40:	1891      	adds	r1, r2, r2
 8009f42:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f44:	415b      	adcs	r3, r3
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f4c:	4641      	mov	r1, r8
 8009f4e:	1851      	adds	r1, r2, r1
 8009f50:	6339      	str	r1, [r7, #48]	; 0x30
 8009f52:	4649      	mov	r1, r9
 8009f54:	414b      	adcs	r3, r1
 8009f56:	637b      	str	r3, [r7, #52]	; 0x34
 8009f58:	f04f 0200 	mov.w	r2, #0
 8009f5c:	f04f 0300 	mov.w	r3, #0
 8009f60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009f64:	4659      	mov	r1, fp
 8009f66:	00cb      	lsls	r3, r1, #3
 8009f68:	4651      	mov	r1, sl
 8009f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f6e:	4651      	mov	r1, sl
 8009f70:	00ca      	lsls	r2, r1, #3
 8009f72:	4610      	mov	r0, r2
 8009f74:	4619      	mov	r1, r3
 8009f76:	4603      	mov	r3, r0
 8009f78:	4642      	mov	r2, r8
 8009f7a:	189b      	adds	r3, r3, r2
 8009f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f80:	464b      	mov	r3, r9
 8009f82:	460a      	mov	r2, r1
 8009f84:	eb42 0303 	adc.w	r3, r2, r3
 8009f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009f98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009f9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	18db      	adds	r3, r3, r3
 8009fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	eb42 0303 	adc.w	r3, r2, r3
 8009fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009fb6:	f7f6 fe21 	bl	8000bfc <__aeabi_uldivmod>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <UART_SetConfig+0x2d4>)
 8009fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8009fc4:	095b      	lsrs	r3, r3, #5
 8009fc6:	2164      	movs	r1, #100	; 0x64
 8009fc8:	fb01 f303 	mul.w	r3, r1, r3
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	00db      	lsls	r3, r3, #3
 8009fd0:	3332      	adds	r3, #50	; 0x32
 8009fd2:	4a08      	ldr	r2, [pc, #32]	; (8009ff4 <UART_SetConfig+0x2d4>)
 8009fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd8:	095b      	lsrs	r3, r3, #5
 8009fda:	f003 0207 	and.w	r2, r3, #7
 8009fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4422      	add	r2, r4
 8009fe6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009fe8:	e106      	b.n	800a1f8 <UART_SetConfig+0x4d8>
 8009fea:	bf00      	nop
 8009fec:	40011000 	.word	0x40011000
 8009ff0:	40011400 	.word	0x40011400
 8009ff4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a002:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a006:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a00a:	4642      	mov	r2, r8
 800a00c:	464b      	mov	r3, r9
 800a00e:	1891      	adds	r1, r2, r2
 800a010:	6239      	str	r1, [r7, #32]
 800a012:	415b      	adcs	r3, r3
 800a014:	627b      	str	r3, [r7, #36]	; 0x24
 800a016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a01a:	4641      	mov	r1, r8
 800a01c:	1854      	adds	r4, r2, r1
 800a01e:	4649      	mov	r1, r9
 800a020:	eb43 0501 	adc.w	r5, r3, r1
 800a024:	f04f 0200 	mov.w	r2, #0
 800a028:	f04f 0300 	mov.w	r3, #0
 800a02c:	00eb      	lsls	r3, r5, #3
 800a02e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a032:	00e2      	lsls	r2, r4, #3
 800a034:	4614      	mov	r4, r2
 800a036:	461d      	mov	r5, r3
 800a038:	4643      	mov	r3, r8
 800a03a:	18e3      	adds	r3, r4, r3
 800a03c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a040:	464b      	mov	r3, r9
 800a042:	eb45 0303 	adc.w	r3, r5, r3
 800a046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a056:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a05a:	f04f 0200 	mov.w	r2, #0
 800a05e:	f04f 0300 	mov.w	r3, #0
 800a062:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a066:	4629      	mov	r1, r5
 800a068:	008b      	lsls	r3, r1, #2
 800a06a:	4621      	mov	r1, r4
 800a06c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a070:	4621      	mov	r1, r4
 800a072:	008a      	lsls	r2, r1, #2
 800a074:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a078:	f7f6 fdc0 	bl	8000bfc <__aeabi_uldivmod>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	4b60      	ldr	r3, [pc, #384]	; (800a204 <UART_SetConfig+0x4e4>)
 800a082:	fba3 2302 	umull	r2, r3, r3, r2
 800a086:	095b      	lsrs	r3, r3, #5
 800a088:	011c      	lsls	r4, r3, #4
 800a08a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a098:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a09c:	4642      	mov	r2, r8
 800a09e:	464b      	mov	r3, r9
 800a0a0:	1891      	adds	r1, r2, r2
 800a0a2:	61b9      	str	r1, [r7, #24]
 800a0a4:	415b      	adcs	r3, r3
 800a0a6:	61fb      	str	r3, [r7, #28]
 800a0a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0ac:	4641      	mov	r1, r8
 800a0ae:	1851      	adds	r1, r2, r1
 800a0b0:	6139      	str	r1, [r7, #16]
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	414b      	adcs	r3, r1
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	f04f 0200 	mov.w	r2, #0
 800a0bc:	f04f 0300 	mov.w	r3, #0
 800a0c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a0c4:	4659      	mov	r1, fp
 800a0c6:	00cb      	lsls	r3, r1, #3
 800a0c8:	4651      	mov	r1, sl
 800a0ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0ce:	4651      	mov	r1, sl
 800a0d0:	00ca      	lsls	r2, r1, #3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	4642      	mov	r2, r8
 800a0da:	189b      	adds	r3, r3, r2
 800a0dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0e0:	464b      	mov	r3, r9
 800a0e2:	460a      	mov	r2, r1
 800a0e4:	eb42 0303 	adc.w	r3, r2, r3
 800a0e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a0f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a0f8:	f04f 0200 	mov.w	r2, #0
 800a0fc:	f04f 0300 	mov.w	r3, #0
 800a100:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a104:	4649      	mov	r1, r9
 800a106:	008b      	lsls	r3, r1, #2
 800a108:	4641      	mov	r1, r8
 800a10a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a10e:	4641      	mov	r1, r8
 800a110:	008a      	lsls	r2, r1, #2
 800a112:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a116:	f7f6 fd71 	bl	8000bfc <__aeabi_uldivmod>
 800a11a:	4602      	mov	r2, r0
 800a11c:	460b      	mov	r3, r1
 800a11e:	4611      	mov	r1, r2
 800a120:	4b38      	ldr	r3, [pc, #224]	; (800a204 <UART_SetConfig+0x4e4>)
 800a122:	fba3 2301 	umull	r2, r3, r3, r1
 800a126:	095b      	lsrs	r3, r3, #5
 800a128:	2264      	movs	r2, #100	; 0x64
 800a12a:	fb02 f303 	mul.w	r3, r2, r3
 800a12e:	1acb      	subs	r3, r1, r3
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	3332      	adds	r3, #50	; 0x32
 800a134:	4a33      	ldr	r2, [pc, #204]	; (800a204 <UART_SetConfig+0x4e4>)
 800a136:	fba2 2303 	umull	r2, r3, r2, r3
 800a13a:	095b      	lsrs	r3, r3, #5
 800a13c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a140:	441c      	add	r4, r3
 800a142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a146:	2200      	movs	r2, #0
 800a148:	673b      	str	r3, [r7, #112]	; 0x70
 800a14a:	677a      	str	r2, [r7, #116]	; 0x74
 800a14c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a150:	4642      	mov	r2, r8
 800a152:	464b      	mov	r3, r9
 800a154:	1891      	adds	r1, r2, r2
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	415b      	adcs	r3, r3
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a160:	4641      	mov	r1, r8
 800a162:	1851      	adds	r1, r2, r1
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	4649      	mov	r1, r9
 800a168:	414b      	adcs	r3, r1
 800a16a:	607b      	str	r3, [r7, #4]
 800a16c:	f04f 0200 	mov.w	r2, #0
 800a170:	f04f 0300 	mov.w	r3, #0
 800a174:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a178:	4659      	mov	r1, fp
 800a17a:	00cb      	lsls	r3, r1, #3
 800a17c:	4651      	mov	r1, sl
 800a17e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a182:	4651      	mov	r1, sl
 800a184:	00ca      	lsls	r2, r1, #3
 800a186:	4610      	mov	r0, r2
 800a188:	4619      	mov	r1, r3
 800a18a:	4603      	mov	r3, r0
 800a18c:	4642      	mov	r2, r8
 800a18e:	189b      	adds	r3, r3, r2
 800a190:	66bb      	str	r3, [r7, #104]	; 0x68
 800a192:	464b      	mov	r3, r9
 800a194:	460a      	mov	r2, r1
 800a196:	eb42 0303 	adc.w	r3, r2, r3
 800a19a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	663b      	str	r3, [r7, #96]	; 0x60
 800a1a6:	667a      	str	r2, [r7, #100]	; 0x64
 800a1a8:	f04f 0200 	mov.w	r2, #0
 800a1ac:	f04f 0300 	mov.w	r3, #0
 800a1b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	008b      	lsls	r3, r1, #2
 800a1b8:	4641      	mov	r1, r8
 800a1ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1be:	4641      	mov	r1, r8
 800a1c0:	008a      	lsls	r2, r1, #2
 800a1c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a1c6:	f7f6 fd19 	bl	8000bfc <__aeabi_uldivmod>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4b0d      	ldr	r3, [pc, #52]	; (800a204 <UART_SetConfig+0x4e4>)
 800a1d0:	fba3 1302 	umull	r1, r3, r3, r2
 800a1d4:	095b      	lsrs	r3, r3, #5
 800a1d6:	2164      	movs	r1, #100	; 0x64
 800a1d8:	fb01 f303 	mul.w	r3, r1, r3
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	011b      	lsls	r3, r3, #4
 800a1e0:	3332      	adds	r3, #50	; 0x32
 800a1e2:	4a08      	ldr	r2, [pc, #32]	; (800a204 <UART_SetConfig+0x4e4>)
 800a1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e8:	095b      	lsrs	r3, r3, #5
 800a1ea:	f003 020f 	and.w	r2, r3, #15
 800a1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4422      	add	r2, r4
 800a1f6:	609a      	str	r2, [r3, #8]
}
 800a1f8:	bf00      	nop
 800a1fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a1fe:	46bd      	mov	sp, r7
 800a200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a204:	51eb851f 	.word	0x51eb851f

0800a208 <__NVIC_SetPriority>:
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	6039      	str	r1, [r7, #0]
 800a212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	db0a      	blt.n	800a232 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	490c      	ldr	r1, [pc, #48]	; (800a254 <__NVIC_SetPriority+0x4c>)
 800a222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a226:	0112      	lsls	r2, r2, #4
 800a228:	b2d2      	uxtb	r2, r2
 800a22a:	440b      	add	r3, r1
 800a22c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a230:	e00a      	b.n	800a248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	b2da      	uxtb	r2, r3
 800a236:	4908      	ldr	r1, [pc, #32]	; (800a258 <__NVIC_SetPriority+0x50>)
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	f003 030f 	and.w	r3, r3, #15
 800a23e:	3b04      	subs	r3, #4
 800a240:	0112      	lsls	r2, r2, #4
 800a242:	b2d2      	uxtb	r2, r2
 800a244:	440b      	add	r3, r1
 800a246:	761a      	strb	r2, [r3, #24]
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr
 800a254:	e000e100 	.word	0xe000e100
 800a258:	e000ed00 	.word	0xe000ed00

0800a25c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a260:	4b05      	ldr	r3, [pc, #20]	; (800a278 <SysTick_Handler+0x1c>)
 800a262:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a264:	f001 fcfe 	bl	800bc64 <xTaskGetSchedulerState>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d001      	beq.n	800a272 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a26e:	f002 fae3 	bl	800c838 <xPortSysTickHandler>
  }
}
 800a272:	bf00      	nop
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	e000e010 	.word	0xe000e010

0800a27c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a280:	2100      	movs	r1, #0
 800a282:	f06f 0004 	mvn.w	r0, #4
 800a286:	f7ff ffbf 	bl	800a208 <__NVIC_SetPriority>
#endif
}
 800a28a:	bf00      	nop
 800a28c:	bd80      	pop	{r7, pc}
	...

0800a290 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a296:	f3ef 8305 	mrs	r3, IPSR
 800a29a:	603b      	str	r3, [r7, #0]
  return(result);
 800a29c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a2a2:	f06f 0305 	mvn.w	r3, #5
 800a2a6:	607b      	str	r3, [r7, #4]
 800a2a8:	e00c      	b.n	800a2c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a2aa:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <osKernelInitialize+0x44>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d105      	bne.n	800a2be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a2b2:	4b08      	ldr	r3, [pc, #32]	; (800a2d4 <osKernelInitialize+0x44>)
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	607b      	str	r3, [r7, #4]
 800a2bc:	e002      	b.n	800a2c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a2be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2c4:	687b      	ldr	r3, [r7, #4]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000508 	.word	0x20000508

0800a2d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2de:	f3ef 8305 	mrs	r3, IPSR
 800a2e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a2e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a2ea:	f06f 0305 	mvn.w	r3, #5
 800a2ee:	607b      	str	r3, [r7, #4]
 800a2f0:	e010      	b.n	800a314 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a2f2:	4b0b      	ldr	r3, [pc, #44]	; (800a320 <osKernelStart+0x48>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d109      	bne.n	800a30e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a2fa:	f7ff ffbf 	bl	800a27c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a2fe:	4b08      	ldr	r3, [pc, #32]	; (800a320 <osKernelStart+0x48>)
 800a300:	2202      	movs	r2, #2
 800a302:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a304:	f001 f866 	bl	800b3d4 <vTaskStartScheduler>
      stat = osOK;
 800a308:	2300      	movs	r3, #0
 800a30a:	607b      	str	r3, [r7, #4]
 800a30c:	e002      	b.n	800a314 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a312:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a314:	687b      	ldr	r3, [r7, #4]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000508 	.word	0x20000508

0800a324 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a324:	b580      	push	{r7, lr}
 800a326:	b08e      	sub	sp, #56	; 0x38
 800a328:	af04      	add	r7, sp, #16
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a330:	2300      	movs	r3, #0
 800a332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a334:	f3ef 8305 	mrs	r3, IPSR
 800a338:	617b      	str	r3, [r7, #20]
  return(result);
 800a33a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d17e      	bne.n	800a43e <osThreadNew+0x11a>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d07b      	beq.n	800a43e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a346:	2380      	movs	r3, #128	; 0x80
 800a348:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a34a:	2318      	movs	r3, #24
 800a34c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a356:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d045      	beq.n	800a3ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <osThreadNew+0x48>
        name = attr->name;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d008      	beq.n	800a392 <osThreadNew+0x6e>
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	2b38      	cmp	r3, #56	; 0x38
 800a384:	d805      	bhi.n	800a392 <osThreadNew+0x6e>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <osThreadNew+0x72>
        return (NULL);
 800a392:	2300      	movs	r3, #0
 800a394:	e054      	b.n	800a440 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	089b      	lsrs	r3, r3, #2
 800a3a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00e      	beq.n	800a3cc <osThreadNew+0xa8>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	2b5b      	cmp	r3, #91	; 0x5b
 800a3b4:	d90a      	bls.n	800a3cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d006      	beq.n	800a3cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <osThreadNew+0xa8>
        mem = 1;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	61bb      	str	r3, [r7, #24]
 800a3ca:	e010      	b.n	800a3ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10c      	bne.n	800a3ee <osThreadNew+0xca>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d108      	bne.n	800a3ee <osThreadNew+0xca>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d104      	bne.n	800a3ee <osThreadNew+0xca>
          mem = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	61bb      	str	r3, [r7, #24]
 800a3e8:	e001      	b.n	800a3ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d110      	bne.n	800a416 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3fc:	9202      	str	r2, [sp, #8]
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6a3a      	ldr	r2, [r7, #32]
 800a408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f000 fe0c 	bl	800b028 <xTaskCreateStatic>
 800a410:	4603      	mov	r3, r0
 800a412:	613b      	str	r3, [r7, #16]
 800a414:	e013      	b.n	800a43e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d110      	bne.n	800a43e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	b29a      	uxth	r2, r3
 800a420:	f107 0310 	add.w	r3, r7, #16
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 fe57 	bl	800b0e2 <xTaskCreate>
 800a434:	4603      	mov	r3, r0
 800a436:	2b01      	cmp	r3, #1
 800a438:	d001      	beq.n	800a43e <osThreadNew+0x11a>
            hTask = NULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a43e:	693b      	ldr	r3, [r7, #16]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3728      	adds	r7, #40	; 0x28
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a450:	f3ef 8305 	mrs	r3, IPSR
 800a454:	60bb      	str	r3, [r7, #8]
  return(result);
 800a456:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <osDelay+0x1c>
    stat = osErrorISR;
 800a45c:	f06f 0305 	mvn.w	r3, #5
 800a460:	60fb      	str	r3, [r7, #12]
 800a462:	e007      	b.n	800a474 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a464:	2300      	movs	r3, #0
 800a466:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 ff7c 	bl	800b36c <vTaskDelay>
    }
  }

  return (stat);
 800a474:	68fb      	ldr	r3, [r7, #12]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
	...

0800a480 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4a07      	ldr	r2, [pc, #28]	; (800a4ac <vApplicationGetIdleTaskMemory+0x2c>)
 800a490:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	4a06      	ldr	r2, [pc, #24]	; (800a4b0 <vApplicationGetIdleTaskMemory+0x30>)
 800a496:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2280      	movs	r2, #128	; 0x80
 800a49c:	601a      	str	r2, [r3, #0]
}
 800a49e:	bf00      	nop
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	2000050c 	.word	0x2000050c
 800a4b0:	20000568 	.word	0x20000568

0800a4b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	4a07      	ldr	r2, [pc, #28]	; (800a4e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a4c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	4a06      	ldr	r2, [pc, #24]	; (800a4e4 <vApplicationGetTimerTaskMemory+0x30>)
 800a4ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4d2:	601a      	str	r2, [r3, #0]
}
 800a4d4:	bf00      	nop
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20000768 	.word	0x20000768
 800a4e4:	200007c4 	.word	0x200007c4

0800a4e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f103 0208 	add.w	r2, r3, #8
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a500:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f103 0208 	add.w	r2, r3, #8
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f103 0208 	add.w	r2, r3, #8
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a51c:	bf00      	nop
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a536:	bf00      	nop
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a542:	b480      	push	{r7}
 800a544:	b085      	sub	sp, #20
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	689a      	ldr	r2, [r3, #8]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	1c5a      	adds	r2, r3, #1
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	601a      	str	r2, [r3, #0]
}
 800a57e:	bf00      	nop
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a58a:	b480      	push	{r7}
 800a58c:	b085      	sub	sp, #20
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5a0:	d103      	bne.n	800a5aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	e00c      	b.n	800a5c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	e002      	b.n	800a5b8 <vListInsert+0x2e>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d2f6      	bcs.n	800a5b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	601a      	str	r2, [r3, #0]
}
 800a5f0:	bf00      	nop
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6892      	ldr	r2, [r2, #8]
 800a612:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	6852      	ldr	r2, [r2, #4]
 800a61c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	429a      	cmp	r2, r3
 800a626:	d103      	bne.n	800a630 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	1e5a      	subs	r2, r3, #1
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a67a:	f002 f84b 	bl	800c714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a686:	68f9      	ldr	r1, [r7, #12]
 800a688:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a68a:	fb01 f303 	mul.w	r3, r1, r3
 800a68e:	441a      	add	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	68f9      	ldr	r1, [r7, #12]
 800a6ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6b0:	fb01 f303 	mul.w	r3, r1, r3
 800a6b4:	441a      	add	r2, r3
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	22ff      	movs	r2, #255	; 0xff
 800a6be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	22ff      	movs	r2, #255	; 0xff
 800a6c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d114      	bne.n	800a6fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d01a      	beq.n	800a70e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	3310      	adds	r3, #16
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f001 f903 	bl	800b8e8 <xTaskRemoveFromEventList>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d012      	beq.n	800a70e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a6e8:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <xQueueGenericReset+0xcc>)
 800a6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	e009      	b.n	800a70e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3310      	adds	r3, #16
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff fef2 	bl	800a4e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3324      	adds	r3, #36	; 0x24
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff feed 	bl	800a4e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a70e:	f002 f831 	bl	800c774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a712:	2301      	movs	r3, #1
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	e000ed04 	.word	0xe000ed04

0800a720 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08e      	sub	sp, #56	; 0x38
 800a724:	af02      	add	r7, sp, #8
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
 800a72c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10a      	bne.n	800a74a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10a      	bne.n	800a766 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <xQueueGenericCreateStatic+0x52>
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <xQueueGenericCreateStatic+0x56>
 800a772:	2301      	movs	r3, #1
 800a774:	e000      	b.n	800a778 <xQueueGenericCreateStatic+0x58>
 800a776:	2300      	movs	r3, #0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10a      	bne.n	800a792 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	623b      	str	r3, [r7, #32]
}
 800a78e:	bf00      	nop
 800a790:	e7fe      	b.n	800a790 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <xQueueGenericCreateStatic+0x7e>
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <xQueueGenericCreateStatic+0x82>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <xQueueGenericCreateStatic+0x84>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	61fb      	str	r3, [r7, #28]
}
 800a7ba:	bf00      	nop
 800a7bc:	e7fe      	b.n	800a7bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a7be:	2350      	movs	r3, #80	; 0x50
 800a7c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2b50      	cmp	r3, #80	; 0x50
 800a7c6:	d00a      	beq.n	800a7de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	61bb      	str	r3, [r7, #24]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	68b9      	ldr	r1, [r7, #8]
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 f805 	bl	800a810 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a808:	4618      	mov	r0, r3
 800a80a:	3730      	adds	r7, #48	; 0x30
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d103      	bne.n	800a82c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	e002      	b.n	800a832 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a83e:	2101      	movs	r1, #1
 800a840:	69b8      	ldr	r0, [r7, #24]
 800a842:	f7ff ff05 	bl	800a650 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	78fa      	ldrb	r2, [r7, #3]
 800a84a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08e      	sub	sp, #56	; 0x38
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a866:	2300      	movs	r3, #0
 800a868:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10a      	bne.n	800a88a <xQueueGenericSend+0x32>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a886:	bf00      	nop
 800a888:	e7fe      	b.n	800a888 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d103      	bne.n	800a898 <xQueueGenericSend+0x40>
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <xQueueGenericSend+0x44>
 800a898:	2301      	movs	r3, #1
 800a89a:	e000      	b.n	800a89e <xQueueGenericSend+0x46>
 800a89c:	2300      	movs	r3, #0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <xQueueGenericSend+0x60>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d103      	bne.n	800a8c6 <xQueueGenericSend+0x6e>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <xQueueGenericSend+0x72>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <xQueueGenericSend+0x74>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	623b      	str	r3, [r7, #32]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8e6:	f001 f9bd 	bl	800bc64 <xTaskGetSchedulerState>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d102      	bne.n	800a8f6 <xQueueGenericSend+0x9e>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <xQueueGenericSend+0xa2>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <xQueueGenericSend+0xa4>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10a      	bne.n	800a916 <xQueueGenericSend+0xbe>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	61fb      	str	r3, [r7, #28]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a916:	f001 fefd 	bl	800c714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a922:	429a      	cmp	r2, r3
 800a924:	d302      	bcc.n	800a92c <xQueueGenericSend+0xd4>
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d129      	bne.n	800a980 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	68b9      	ldr	r1, [r7, #8]
 800a930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a932:	f000 fa0b 	bl	800ad4c <prvCopyDataToQueue>
 800a936:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d010      	beq.n	800a962 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	3324      	adds	r3, #36	; 0x24
 800a944:	4618      	mov	r0, r3
 800a946:	f000 ffcf 	bl	800b8e8 <xTaskRemoveFromEventList>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d013      	beq.n	800a978 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a950:	4b3f      	ldr	r3, [pc, #252]	; (800aa50 <xQueueGenericSend+0x1f8>)
 800a952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	e00a      	b.n	800a978 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d007      	beq.n	800a978 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a968:	4b39      	ldr	r3, [pc, #228]	; (800aa50 <xQueueGenericSend+0x1f8>)
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a978:	f001 fefc 	bl	800c774 <vPortExitCritical>
				return pdPASS;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e063      	b.n	800aa48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a986:	f001 fef5 	bl	800c774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	e05c      	b.n	800aa48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a990:	2b00      	cmp	r3, #0
 800a992:	d106      	bne.n	800a9a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a994:	f107 0314 	add.w	r3, r7, #20
 800a998:	4618      	mov	r0, r3
 800a99a:	f001 f809 	bl	800b9b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9a2:	f001 fee7 	bl	800c774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9a6:	f000 fd7b 	bl	800b4a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9aa:	f001 feb3 	bl	800c714 <vPortEnterCritical>
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9b4:	b25b      	sxtb	r3, r3
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ba:	d103      	bne.n	800a9c4 <xQueueGenericSend+0x16c>
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ca:	b25b      	sxtb	r3, r3
 800a9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d0:	d103      	bne.n	800a9da <xQueueGenericSend+0x182>
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9da:	f001 fecb 	bl	800c774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9de:	1d3a      	adds	r2, r7, #4
 800a9e0:	f107 0314 	add.w	r3, r7, #20
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fff8 	bl	800b9dc <xTaskCheckForTimeOut>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d124      	bne.n	800aa3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9f4:	f000 faa2 	bl	800af3c <prvIsQueueFull>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d018      	beq.n	800aa30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	3310      	adds	r3, #16
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 ff1e 	bl	800b848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa0e:	f000 fa2d 	bl	800ae6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa12:	f000 fd53 	bl	800b4bc <xTaskResumeAll>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f47f af7c 	bne.w	800a916 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa1e:	4b0c      	ldr	r3, [pc, #48]	; (800aa50 <xQueueGenericSend+0x1f8>)
 800aa20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa24:	601a      	str	r2, [r3, #0]
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	e772      	b.n	800a916 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa32:	f000 fa1b 	bl	800ae6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa36:	f000 fd41 	bl	800b4bc <xTaskResumeAll>
 800aa3a:	e76c      	b.n	800a916 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa3e:	f000 fa15 	bl	800ae6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa42:	f000 fd3b 	bl	800b4bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3738      	adds	r7, #56	; 0x38
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	e000ed04 	.word	0xe000ed04

0800aa54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b090      	sub	sp, #64	; 0x40
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
 800aa60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10a      	bne.n	800aa82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa7e:	bf00      	nop
 800aa80:	e7fe      	b.n	800aa80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d103      	bne.n	800aa90 <xQueueGenericSendFromISR+0x3c>
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <xQueueGenericSendFromISR+0x40>
 800aa90:	2301      	movs	r3, #1
 800aa92:	e000      	b.n	800aa96 <xQueueGenericSendFromISR+0x42>
 800aa94:	2300      	movs	r3, #0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10a      	bne.n	800aab0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d103      	bne.n	800aabe <xQueueGenericSendFromISR+0x6a>
 800aab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d101      	bne.n	800aac2 <xQueueGenericSendFromISR+0x6e>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e000      	b.n	800aac4 <xQueueGenericSendFromISR+0x70>
 800aac2:	2300      	movs	r3, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10a      	bne.n	800aade <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	623b      	str	r3, [r7, #32]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aade:	f001 fefb 	bl	800c8d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aae2:	f3ef 8211 	mrs	r2, BASEPRI
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	61fa      	str	r2, [r7, #28]
 800aaf8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aafa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aafc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d302      	bcc.n	800ab10 <xQueueGenericSendFromISR+0xbc>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d12f      	bne.n	800ab70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab26:	f000 f911 	bl	800ad4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab32:	d112      	bne.n	800ab5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d016      	beq.n	800ab6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3e:	3324      	adds	r3, #36	; 0x24
 800ab40:	4618      	mov	r0, r3
 800ab42:	f000 fed1 	bl	800b8e8 <xTaskRemoveFromEventList>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00e      	beq.n	800ab6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00b      	beq.n	800ab6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	e007      	b.n	800ab6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab5e:	3301      	adds	r3, #1
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	b25a      	sxtb	r2, r3
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab6e:	e001      	b.n	800ab74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab70:	2300      	movs	r3, #0
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3740      	adds	r7, #64	; 0x40
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08c      	sub	sp, #48	; 0x30
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10a      	bne.n	800abbc <xQueueReceive+0x30>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	623b      	str	r3, [r7, #32]
}
 800abb8:	bf00      	nop
 800abba:	e7fe      	b.n	800abba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d103      	bne.n	800abca <xQueueReceive+0x3e>
 800abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <xQueueReceive+0x42>
 800abca:	2301      	movs	r3, #1
 800abcc:	e000      	b.n	800abd0 <xQueueReceive+0x44>
 800abce:	2300      	movs	r3, #0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <xQueueReceive+0x5e>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	61fb      	str	r3, [r7, #28]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abea:	f001 f83b 	bl	800bc64 <xTaskGetSchedulerState>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d102      	bne.n	800abfa <xQueueReceive+0x6e>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <xQueueReceive+0x72>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e000      	b.n	800ac00 <xQueueReceive+0x74>
 800abfe:	2300      	movs	r3, #0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xQueueReceive+0x8e>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	61bb      	str	r3, [r7, #24]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac1a:	f001 fd7b 	bl	800c714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d01f      	beq.n	800ac6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac2e:	f000 f8f7 	bl	800ae20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	1e5a      	subs	r2, r3, #1
 800ac36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00f      	beq.n	800ac62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	3310      	adds	r3, #16
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 fe4e 	bl	800b8e8 <xTaskRemoveFromEventList>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d007      	beq.n	800ac62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac52:	4b3d      	ldr	r3, [pc, #244]	; (800ad48 <xQueueReceive+0x1bc>)
 800ac54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac62:	f001 fd87 	bl	800c774 <vPortExitCritical>
				return pdPASS;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e069      	b.n	800ad3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d103      	bne.n	800ac78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac70:	f001 fd80 	bl	800c774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac74:	2300      	movs	r3, #0
 800ac76:	e062      	b.n	800ad3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac7e:	f107 0310 	add.w	r3, r7, #16
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fe94 	bl	800b9b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac8c:	f001 fd72 	bl	800c774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac90:	f000 fc06 	bl	800b4a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac94:	f001 fd3e 	bl	800c714 <vPortEnterCritical>
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac9e:	b25b      	sxtb	r3, r3
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aca4:	d103      	bne.n	800acae <xQueueReceive+0x122>
 800aca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acb4:	b25b      	sxtb	r3, r3
 800acb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acba:	d103      	bne.n	800acc4 <xQueueReceive+0x138>
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acc4:	f001 fd56 	bl	800c774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acc8:	1d3a      	adds	r2, r7, #4
 800acca:	f107 0310 	add.w	r3, r7, #16
 800acce:	4611      	mov	r1, r2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fe83 	bl	800b9dc <xTaskCheckForTimeOut>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d123      	bne.n	800ad24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acde:	f000 f917 	bl	800af10 <prvIsQueueEmpty>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d017      	beq.n	800ad18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	3324      	adds	r3, #36	; 0x24
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fda9 	bl	800b848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acf8:	f000 f8b8 	bl	800ae6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acfc:	f000 fbde 	bl	800b4bc <xTaskResumeAll>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d189      	bne.n	800ac1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad06:	4b10      	ldr	r3, [pc, #64]	; (800ad48 <xQueueReceive+0x1bc>)
 800ad08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	e780      	b.n	800ac1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad1a:	f000 f8a7 	bl	800ae6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad1e:	f000 fbcd 	bl	800b4bc <xTaskResumeAll>
 800ad22:	e77a      	b.n	800ac1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad26:	f000 f8a1 	bl	800ae6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad2a:	f000 fbc7 	bl	800b4bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad30:	f000 f8ee 	bl	800af10 <prvIsQueueEmpty>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f43f af6f 	beq.w	800ac1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3730      	adds	r7, #48	; 0x30
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	e000ed04 	.word	0xe000ed04

0800ad4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10d      	bne.n	800ad86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d14d      	bne.n	800ae0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 ff92 	bl	800bca0 <xTaskPriorityDisinherit>
 800ad7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	609a      	str	r2, [r3, #8]
 800ad84:	e043      	b.n	800ae0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d119      	bne.n	800adc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6858      	ldr	r0, [r3, #4]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad94:	461a      	mov	r2, r3
 800ad96:	68b9      	ldr	r1, [r7, #8]
 800ad98:	f002 fb62 	bl	800d460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada4:	441a      	add	r2, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d32b      	bcc.n	800ae0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	605a      	str	r2, [r3, #4]
 800adbe:	e026      	b.n	800ae0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	68d8      	ldr	r0, [r3, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc8:	461a      	mov	r2, r3
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	f002 fb48 	bl	800d460 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	68da      	ldr	r2, [r3, #12]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add8:	425b      	negs	r3, r3
 800adda:	441a      	add	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d207      	bcs.n	800adfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf4:	425b      	negs	r3, r3
 800adf6:	441a      	add	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d105      	bne.n	800ae0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae16:	697b      	ldr	r3, [r7, #20]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d018      	beq.n	800ae64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68da      	ldr	r2, [r3, #12]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	441a      	add	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68da      	ldr	r2, [r3, #12]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d303      	bcc.n	800ae54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68d9      	ldr	r1, [r3, #12]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6838      	ldr	r0, [r7, #0]
 800ae60:	f002 fafe 	bl	800d460 <memcpy>
	}
}
 800ae64:	bf00      	nop
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae74:	f001 fc4e 	bl	800c714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae80:	e011      	b.n	800aea6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d012      	beq.n	800aeb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3324      	adds	r3, #36	; 0x24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 fd2a 	bl	800b8e8 <xTaskRemoveFromEventList>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae9a:	f000 fe01 	bl	800baa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	3b01      	subs	r3, #1
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	dce9      	bgt.n	800ae82 <prvUnlockQueue+0x16>
 800aeae:	e000      	b.n	800aeb2 <prvUnlockQueue+0x46>
					break;
 800aeb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	22ff      	movs	r2, #255	; 0xff
 800aeb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aeba:	f001 fc5b 	bl	800c774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aebe:	f001 fc29 	bl	800c714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aec8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeca:	e011      	b.n	800aef0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d012      	beq.n	800aefa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	3310      	adds	r3, #16
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 fd05 	bl	800b8e8 <xTaskRemoveFromEventList>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aee4:	f000 fddc 	bl	800baa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dce9      	bgt.n	800aecc <prvUnlockQueue+0x60>
 800aef8:	e000      	b.n	800aefc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aefa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	22ff      	movs	r2, #255	; 0xff
 800af00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af04:	f001 fc36 	bl	800c774 <vPortExitCritical>
}
 800af08:	bf00      	nop
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af18:	f001 fbfc 	bl	800c714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af24:	2301      	movs	r3, #1
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	e001      	b.n	800af2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af2e:	f001 fc21 	bl	800c774 <vPortExitCritical>

	return xReturn;
 800af32:	68fb      	ldr	r3, [r7, #12]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af44:	f001 fbe6 	bl	800c714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af50:	429a      	cmp	r2, r3
 800af52:	d102      	bne.n	800af5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af54:	2301      	movs	r3, #1
 800af56:	60fb      	str	r3, [r7, #12]
 800af58:	e001      	b.n	800af5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af5e:	f001 fc09 	bl	800c774 <vPortExitCritical>

	return xReturn;
 800af62:	68fb      	ldr	r3, [r7, #12]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	e014      	b.n	800afa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af7c:	4a0f      	ldr	r2, [pc, #60]	; (800afbc <vQueueAddToRegistry+0x50>)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10b      	bne.n	800afa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af88:	490c      	ldr	r1, [pc, #48]	; (800afbc <vQueueAddToRegistry+0x50>)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af92:	4a0a      	ldr	r2, [pc, #40]	; (800afbc <vQueueAddToRegistry+0x50>)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	4413      	add	r3, r2
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af9e:	e006      	b.n	800afae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	3301      	adds	r3, #1
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b07      	cmp	r3, #7
 800afaa:	d9e7      	bls.n	800af7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800afac:	bf00      	nop
 800afae:	bf00      	nop
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	20000bc4 	.word	0x20000bc4

0800afc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800afd0:	f001 fba0 	bl	800c714 <vPortEnterCritical>
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afda:	b25b      	sxtb	r3, r3
 800afdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afe0:	d103      	bne.n	800afea <vQueueWaitForMessageRestricted+0x2a>
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aff0:	b25b      	sxtb	r3, r3
 800aff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aff6:	d103      	bne.n	800b000 <vQueueWaitForMessageRestricted+0x40>
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b000:	f001 fbb8 	bl	800c774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d106      	bne.n	800b01a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	3324      	adds	r3, #36	; 0x24
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	68b9      	ldr	r1, [r7, #8]
 800b014:	4618      	mov	r0, r3
 800b016:	f000 fc3b 	bl	800b890 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b01a:	6978      	ldr	r0, [r7, #20]
 800b01c:	f7ff ff26 	bl	800ae6c <prvUnlockQueue>
	}
 800b020:	bf00      	nop
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08e      	sub	sp, #56	; 0x38
 800b02c:	af04      	add	r7, sp, #16
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
 800b034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d10a      	bne.n	800b052 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	623b      	str	r3, [r7, #32]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <xTaskCreateStatic+0x46>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	61fb      	str	r3, [r7, #28]
}
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b06e:	235c      	movs	r3, #92	; 0x5c
 800b070:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	2b5c      	cmp	r3, #92	; 0x5c
 800b076:	d00a      	beq.n	800b08e <xTaskCreateStatic+0x66>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	61bb      	str	r3, [r7, #24]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b08e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	2b00      	cmp	r3, #0
 800b094:	d01e      	beq.n	800b0d4 <xTaskCreateStatic+0xac>
 800b096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d01b      	beq.n	800b0d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	2202      	movs	r2, #2
 800b0aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	9303      	str	r3, [sp, #12]
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	9302      	str	r3, [sp, #8]
 800b0b6:	f107 0314 	add.w	r3, r7, #20
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	68b9      	ldr	r1, [r7, #8]
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 f850 	bl	800b16c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0ce:	f000 f8dd 	bl	800b28c <prvAddNewTaskToReadyList>
 800b0d2:	e001      	b.n	800b0d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0d8:	697b      	ldr	r3, [r7, #20]
	}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3728      	adds	r7, #40	; 0x28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b08c      	sub	sp, #48	; 0x30
 800b0e6:	af04      	add	r7, sp, #16
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	603b      	str	r3, [r7, #0]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f001 fc2e 	bl	800c958 <pvPortMalloc>
 800b0fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00e      	beq.n	800b122 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b104:	205c      	movs	r0, #92	; 0x5c
 800b106:	f001 fc27 	bl	800c958 <pvPortMalloc>
 800b10a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	631a      	str	r2, [r3, #48]	; 0x30
 800b118:	e005      	b.n	800b126 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b11a:	6978      	ldr	r0, [r7, #20]
 800b11c:	f001 fce8 	bl	800caf0 <vPortFree>
 800b120:	e001      	b.n	800b126 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b122:	2300      	movs	r3, #0
 800b124:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d017      	beq.n	800b15c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b134:	88fa      	ldrh	r2, [r7, #6]
 800b136:	2300      	movs	r3, #0
 800b138:	9303      	str	r3, [sp, #12]
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	9302      	str	r3, [sp, #8]
 800b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f000 f80e 	bl	800b16c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b150:	69f8      	ldr	r0, [r7, #28]
 800b152:	f000 f89b 	bl	800b28c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b156:	2301      	movs	r3, #1
 800b158:	61bb      	str	r3, [r7, #24]
 800b15a:	e002      	b.n	800b162 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b160:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b162:	69bb      	ldr	r3, [r7, #24]
	}
 800b164:	4618      	mov	r0, r3
 800b166:	3720      	adds	r7, #32
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	461a      	mov	r2, r3
 800b184:	21a5      	movs	r1, #165	; 0xa5
 800b186:	f002 f937 	bl	800d3f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b194:	3b01      	subs	r3, #1
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	f023 0307 	bic.w	r3, r3, #7
 800b1a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	f003 0307 	and.w	r3, r3, #7
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00a      	beq.n	800b1c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	617b      	str	r3, [r7, #20]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d01f      	beq.n	800b20a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	61fb      	str	r3, [r7, #28]
 800b1ce:	e012      	b.n	800b1f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	7819      	ldrb	r1, [r3, #0]
 800b1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	4413      	add	r3, r2
 800b1de:	3334      	adds	r3, #52	; 0x34
 800b1e0:	460a      	mov	r2, r1
 800b1e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d006      	beq.n	800b1fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	61fb      	str	r3, [r7, #28]
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	2b0f      	cmp	r3, #15
 800b1fa:	d9e9      	bls.n	800b1d0 <prvInitialiseNewTask+0x64>
 800b1fc:	e000      	b.n	800b200 <prvInitialiseNewTask+0x94>
			{
				break;
 800b1fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	2200      	movs	r2, #0
 800b204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b208:	e003      	b.n	800b212 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	2b37      	cmp	r3, #55	; 0x37
 800b216:	d901      	bls.n	800b21c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b218:	2337      	movs	r3, #55	; 0x37
 800b21a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b220:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b226:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	2200      	movs	r2, #0
 800b22c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	3304      	adds	r3, #4
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff f978 	bl	800a528 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23a:	3318      	adds	r3, #24
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff f973 	bl	800a528 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b256:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	2200      	movs	r2, #0
 800b25c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	68f9      	ldr	r1, [r7, #12]
 800b26a:	69b8      	ldr	r0, [r7, #24]
 800b26c:	f001 f928 	bl	800c4c0 <pxPortInitialiseStack>
 800b270:	4602      	mov	r2, r0
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b282:	bf00      	nop
 800b284:	3720      	adds	r7, #32
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b294:	f001 fa3e 	bl	800c714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b298:	4b2d      	ldr	r3, [pc, #180]	; (800b350 <prvAddNewTaskToReadyList+0xc4>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3301      	adds	r3, #1
 800b29e:	4a2c      	ldr	r2, [pc, #176]	; (800b350 <prvAddNewTaskToReadyList+0xc4>)
 800b2a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2a2:	4b2c      	ldr	r3, [pc, #176]	; (800b354 <prvAddNewTaskToReadyList+0xc8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2aa:	4a2a      	ldr	r2, [pc, #168]	; (800b354 <prvAddNewTaskToReadyList+0xc8>)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2b0:	4b27      	ldr	r3, [pc, #156]	; (800b350 <prvAddNewTaskToReadyList+0xc4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d110      	bne.n	800b2da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2b8:	f000 fc16 	bl	800bae8 <prvInitialiseTaskLists>
 800b2bc:	e00d      	b.n	800b2da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2be:	4b26      	ldr	r3, [pc, #152]	; (800b358 <prvAddNewTaskToReadyList+0xcc>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d109      	bne.n	800b2da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2c6:	4b23      	ldr	r3, [pc, #140]	; (800b354 <prvAddNewTaskToReadyList+0xc8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d802      	bhi.n	800b2da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2d4:	4a1f      	ldr	r2, [pc, #124]	; (800b354 <prvAddNewTaskToReadyList+0xc8>)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2da:	4b20      	ldr	r3, [pc, #128]	; (800b35c <prvAddNewTaskToReadyList+0xd0>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	4a1e      	ldr	r2, [pc, #120]	; (800b35c <prvAddNewTaskToReadyList+0xd0>)
 800b2e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b2e4:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <prvAddNewTaskToReadyList+0xd0>)
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f0:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <prvAddNewTaskToReadyList+0xd4>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d903      	bls.n	800b300 <prvAddNewTaskToReadyList+0x74>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fc:	4a18      	ldr	r2, [pc, #96]	; (800b360 <prvAddNewTaskToReadyList+0xd4>)
 800b2fe:	6013      	str	r3, [r2, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4a15      	ldr	r2, [pc, #84]	; (800b364 <prvAddNewTaskToReadyList+0xd8>)
 800b30e:	441a      	add	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3304      	adds	r3, #4
 800b314:	4619      	mov	r1, r3
 800b316:	4610      	mov	r0, r2
 800b318:	f7ff f913 	bl	800a542 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b31c:	f001 fa2a 	bl	800c774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b320:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <prvAddNewTaskToReadyList+0xcc>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00e      	beq.n	800b346 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b328:	4b0a      	ldr	r3, [pc, #40]	; (800b354 <prvAddNewTaskToReadyList+0xc8>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b332:	429a      	cmp	r2, r3
 800b334:	d207      	bcs.n	800b346 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b336:	4b0c      	ldr	r3, [pc, #48]	; (800b368 <prvAddNewTaskToReadyList+0xdc>)
 800b338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b346:	bf00      	nop
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	200010d8 	.word	0x200010d8
 800b354:	20000c04 	.word	0x20000c04
 800b358:	200010e4 	.word	0x200010e4
 800b35c:	200010f4 	.word	0x200010f4
 800b360:	200010e0 	.word	0x200010e0
 800b364:	20000c08 	.word	0x20000c08
 800b368:	e000ed04 	.word	0xe000ed04

0800b36c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b374:	2300      	movs	r3, #0
 800b376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d017      	beq.n	800b3ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b37e:	4b13      	ldr	r3, [pc, #76]	; (800b3cc <vTaskDelay+0x60>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00a      	beq.n	800b39c <vTaskDelay+0x30>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	60bb      	str	r3, [r7, #8]
}
 800b398:	bf00      	nop
 800b39a:	e7fe      	b.n	800b39a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b39c:	f000 f880 	bl	800b4a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fcea 	bl	800bd7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3a8:	f000 f888 	bl	800b4bc <xTaskResumeAll>
 800b3ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d107      	bne.n	800b3c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3b4:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <vTaskDelay+0x64>)
 800b3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3c4:	bf00      	nop
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	20001100 	.word	0x20001100
 800b3d0:	e000ed04 	.word	0xe000ed04

0800b3d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b08a      	sub	sp, #40	; 0x28
 800b3d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3e2:	463a      	mov	r2, r7
 800b3e4:	1d39      	adds	r1, r7, #4
 800b3e6:	f107 0308 	add.w	r3, r7, #8
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7ff f848 	bl	800a480 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	9202      	str	r2, [sp, #8]
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	9300      	str	r3, [sp, #0]
 800b3fe:	2300      	movs	r3, #0
 800b400:	460a      	mov	r2, r1
 800b402:	4921      	ldr	r1, [pc, #132]	; (800b488 <vTaskStartScheduler+0xb4>)
 800b404:	4821      	ldr	r0, [pc, #132]	; (800b48c <vTaskStartScheduler+0xb8>)
 800b406:	f7ff fe0f 	bl	800b028 <xTaskCreateStatic>
 800b40a:	4603      	mov	r3, r0
 800b40c:	4a20      	ldr	r2, [pc, #128]	; (800b490 <vTaskStartScheduler+0xbc>)
 800b40e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b410:	4b1f      	ldr	r3, [pc, #124]	; (800b490 <vTaskStartScheduler+0xbc>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b418:	2301      	movs	r3, #1
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	e001      	b.n	800b422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d102      	bne.n	800b42e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b428:	f000 fcfc 	bl	800be24 <xTimerCreateTimerTask>
 800b42c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d116      	bne.n	800b462 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	613b      	str	r3, [r7, #16]
}
 800b446:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b448:	4b12      	ldr	r3, [pc, #72]	; (800b494 <vTaskStartScheduler+0xc0>)
 800b44a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b44e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b450:	4b11      	ldr	r3, [pc, #68]	; (800b498 <vTaskStartScheduler+0xc4>)
 800b452:	2201      	movs	r2, #1
 800b454:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b456:	4b11      	ldr	r3, [pc, #68]	; (800b49c <vTaskStartScheduler+0xc8>)
 800b458:	2200      	movs	r2, #0
 800b45a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b45c:	f001 f8b8 	bl	800c5d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b460:	e00e      	b.n	800b480 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b468:	d10a      	bne.n	800b480 <vTaskStartScheduler+0xac>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	60fb      	str	r3, [r7, #12]
}
 800b47c:	bf00      	nop
 800b47e:	e7fe      	b.n	800b47e <vTaskStartScheduler+0xaa>
}
 800b480:	bf00      	nop
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	0800dda8 	.word	0x0800dda8
 800b48c:	0800bab9 	.word	0x0800bab9
 800b490:	200010fc 	.word	0x200010fc
 800b494:	200010f8 	.word	0x200010f8
 800b498:	200010e4 	.word	0x200010e4
 800b49c:	200010dc 	.word	0x200010dc

0800b4a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4a4:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <vTaskSuspendAll+0x18>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	4a03      	ldr	r2, [pc, #12]	; (800b4b8 <vTaskSuspendAll+0x18>)
 800b4ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4ae:	bf00      	nop
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	20001100 	.word	0x20001100

0800b4bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4ca:	4b42      	ldr	r3, [pc, #264]	; (800b5d4 <xTaskResumeAll+0x118>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10a      	bne.n	800b4e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	603b      	str	r3, [r7, #0]
}
 800b4e4:	bf00      	nop
 800b4e6:	e7fe      	b.n	800b4e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4e8:	f001 f914 	bl	800c714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4ec:	4b39      	ldr	r3, [pc, #228]	; (800b5d4 <xTaskResumeAll+0x118>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	4a38      	ldr	r2, [pc, #224]	; (800b5d4 <xTaskResumeAll+0x118>)
 800b4f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4f6:	4b37      	ldr	r3, [pc, #220]	; (800b5d4 <xTaskResumeAll+0x118>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d162      	bne.n	800b5c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4fe:	4b36      	ldr	r3, [pc, #216]	; (800b5d8 <xTaskResumeAll+0x11c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d05e      	beq.n	800b5c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b506:	e02f      	b.n	800b568 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b508:	4b34      	ldr	r3, [pc, #208]	; (800b5dc <xTaskResumeAll+0x120>)
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	3318      	adds	r3, #24
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff f871 	bl	800a5fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3304      	adds	r3, #4
 800b51e:	4618      	mov	r0, r3
 800b520:	f7ff f86c 	bl	800a5fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b528:	4b2d      	ldr	r3, [pc, #180]	; (800b5e0 <xTaskResumeAll+0x124>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d903      	bls.n	800b538 <xTaskResumeAll+0x7c>
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b534:	4a2a      	ldr	r2, [pc, #168]	; (800b5e0 <xTaskResumeAll+0x124>)
 800b536:	6013      	str	r3, [r2, #0]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53c:	4613      	mov	r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4413      	add	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4a27      	ldr	r2, [pc, #156]	; (800b5e4 <xTaskResumeAll+0x128>)
 800b546:	441a      	add	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3304      	adds	r3, #4
 800b54c:	4619      	mov	r1, r3
 800b54e:	4610      	mov	r0, r2
 800b550:	f7fe fff7 	bl	800a542 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b558:	4b23      	ldr	r3, [pc, #140]	; (800b5e8 <xTaskResumeAll+0x12c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55e:	429a      	cmp	r2, r3
 800b560:	d302      	bcc.n	800b568 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b562:	4b22      	ldr	r3, [pc, #136]	; (800b5ec <xTaskResumeAll+0x130>)
 800b564:	2201      	movs	r2, #1
 800b566:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b568:	4b1c      	ldr	r3, [pc, #112]	; (800b5dc <xTaskResumeAll+0x120>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1cb      	bne.n	800b508 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b576:	f000 fb55 	bl	800bc24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b57a:	4b1d      	ldr	r3, [pc, #116]	; (800b5f0 <xTaskResumeAll+0x134>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d010      	beq.n	800b5a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b586:	f000 f847 	bl	800b618 <xTaskIncrementTick>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b590:	4b16      	ldr	r3, [pc, #88]	; (800b5ec <xTaskResumeAll+0x130>)
 800b592:	2201      	movs	r2, #1
 800b594:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3b01      	subs	r3, #1
 800b59a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1f1      	bne.n	800b586 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b5a2:	4b13      	ldr	r3, [pc, #76]	; (800b5f0 <xTaskResumeAll+0x134>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5a8:	4b10      	ldr	r3, [pc, #64]	; (800b5ec <xTaskResumeAll+0x130>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d009      	beq.n	800b5c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5b4:	4b0f      	ldr	r3, [pc, #60]	; (800b5f4 <xTaskResumeAll+0x138>)
 800b5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ba:	601a      	str	r2, [r3, #0]
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5c4:	f001 f8d6 	bl	800c774 <vPortExitCritical>

	return xAlreadyYielded;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20001100 	.word	0x20001100
 800b5d8:	200010d8 	.word	0x200010d8
 800b5dc:	20001098 	.word	0x20001098
 800b5e0:	200010e0 	.word	0x200010e0
 800b5e4:	20000c08 	.word	0x20000c08
 800b5e8:	20000c04 	.word	0x20000c04
 800b5ec:	200010ec 	.word	0x200010ec
 800b5f0:	200010e8 	.word	0x200010e8
 800b5f4:	e000ed04 	.word	0xe000ed04

0800b5f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b5fe:	4b05      	ldr	r3, [pc, #20]	; (800b614 <xTaskGetTickCount+0x1c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b604:	687b      	ldr	r3, [r7, #4]
}
 800b606:	4618      	mov	r0, r3
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	200010dc 	.word	0x200010dc

0800b618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b61e:	2300      	movs	r3, #0
 800b620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b622:	4b4f      	ldr	r3, [pc, #316]	; (800b760 <xTaskIncrementTick+0x148>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	f040 808f 	bne.w	800b74a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b62c:	4b4d      	ldr	r3, [pc, #308]	; (800b764 <xTaskIncrementTick+0x14c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3301      	adds	r3, #1
 800b632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b634:	4a4b      	ldr	r2, [pc, #300]	; (800b764 <xTaskIncrementTick+0x14c>)
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d120      	bne.n	800b682 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b640:	4b49      	ldr	r3, [pc, #292]	; (800b768 <xTaskIncrementTick+0x150>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <xTaskIncrementTick+0x48>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	603b      	str	r3, [r7, #0]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <xTaskIncrementTick+0x46>
 800b660:	4b41      	ldr	r3, [pc, #260]	; (800b768 <xTaskIncrementTick+0x150>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	4b41      	ldr	r3, [pc, #260]	; (800b76c <xTaskIncrementTick+0x154>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a3f      	ldr	r2, [pc, #252]	; (800b768 <xTaskIncrementTick+0x150>)
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	4a3f      	ldr	r2, [pc, #252]	; (800b76c <xTaskIncrementTick+0x154>)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6013      	str	r3, [r2, #0]
 800b674:	4b3e      	ldr	r3, [pc, #248]	; (800b770 <xTaskIncrementTick+0x158>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	3301      	adds	r3, #1
 800b67a:	4a3d      	ldr	r2, [pc, #244]	; (800b770 <xTaskIncrementTick+0x158>)
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	f000 fad1 	bl	800bc24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b682:	4b3c      	ldr	r3, [pc, #240]	; (800b774 <xTaskIncrementTick+0x15c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d349      	bcc.n	800b720 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b68c:	4b36      	ldr	r3, [pc, #216]	; (800b768 <xTaskIncrementTick+0x150>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d104      	bne.n	800b6a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b696:	4b37      	ldr	r3, [pc, #220]	; (800b774 <xTaskIncrementTick+0x15c>)
 800b698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b69c:	601a      	str	r2, [r3, #0]
					break;
 800b69e:	e03f      	b.n	800b720 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a0:	4b31      	ldr	r3, [pc, #196]	; (800b768 <xTaskIncrementTick+0x150>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d203      	bcs.n	800b6c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6b8:	4a2e      	ldr	r2, [pc, #184]	; (800b774 <xTaskIncrementTick+0x15c>)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6be:	e02f      	b.n	800b720 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7fe ff99 	bl	800a5fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d004      	beq.n	800b6dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	3318      	adds	r3, #24
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fe ff90 	bl	800a5fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e0:	4b25      	ldr	r3, [pc, #148]	; (800b778 <xTaskIncrementTick+0x160>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d903      	bls.n	800b6f0 <xTaskIncrementTick+0xd8>
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ec:	4a22      	ldr	r2, [pc, #136]	; (800b778 <xTaskIncrementTick+0x160>)
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	4413      	add	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4a1f      	ldr	r2, [pc, #124]	; (800b77c <xTaskIncrementTick+0x164>)
 800b6fe:	441a      	add	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	3304      	adds	r3, #4
 800b704:	4619      	mov	r1, r3
 800b706:	4610      	mov	r0, r2
 800b708:	f7fe ff1b 	bl	800a542 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b710:	4b1b      	ldr	r3, [pc, #108]	; (800b780 <xTaskIncrementTick+0x168>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b716:	429a      	cmp	r2, r3
 800b718:	d3b8      	bcc.n	800b68c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b71a:	2301      	movs	r3, #1
 800b71c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b71e:	e7b5      	b.n	800b68c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b720:	4b17      	ldr	r3, [pc, #92]	; (800b780 <xTaskIncrementTick+0x168>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b726:	4915      	ldr	r1, [pc, #84]	; (800b77c <xTaskIncrementTick+0x164>)
 800b728:	4613      	mov	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4413      	add	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	440b      	add	r3, r1
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d901      	bls.n	800b73c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b738:	2301      	movs	r3, #1
 800b73a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b73c:	4b11      	ldr	r3, [pc, #68]	; (800b784 <xTaskIncrementTick+0x16c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d007      	beq.n	800b754 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b744:	2301      	movs	r3, #1
 800b746:	617b      	str	r3, [r7, #20]
 800b748:	e004      	b.n	800b754 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b74a:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <xTaskIncrementTick+0x170>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3301      	adds	r3, #1
 800b750:	4a0d      	ldr	r2, [pc, #52]	; (800b788 <xTaskIncrementTick+0x170>)
 800b752:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b754:	697b      	ldr	r3, [r7, #20]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20001100 	.word	0x20001100
 800b764:	200010dc 	.word	0x200010dc
 800b768:	20001090 	.word	0x20001090
 800b76c:	20001094 	.word	0x20001094
 800b770:	200010f0 	.word	0x200010f0
 800b774:	200010f8 	.word	0x200010f8
 800b778:	200010e0 	.word	0x200010e0
 800b77c:	20000c08 	.word	0x20000c08
 800b780:	20000c04 	.word	0x20000c04
 800b784:	200010ec 	.word	0x200010ec
 800b788:	200010e8 	.word	0x200010e8

0800b78c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b792:	4b28      	ldr	r3, [pc, #160]	; (800b834 <vTaskSwitchContext+0xa8>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b79a:	4b27      	ldr	r3, [pc, #156]	; (800b838 <vTaskSwitchContext+0xac>)
 800b79c:	2201      	movs	r2, #1
 800b79e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7a0:	e041      	b.n	800b826 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b7a2:	4b25      	ldr	r3, [pc, #148]	; (800b838 <vTaskSwitchContext+0xac>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7a8:	4b24      	ldr	r3, [pc, #144]	; (800b83c <vTaskSwitchContext+0xb0>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60fb      	str	r3, [r7, #12]
 800b7ae:	e010      	b.n	800b7d2 <vTaskSwitchContext+0x46>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10a      	bne.n	800b7cc <vTaskSwitchContext+0x40>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	607b      	str	r3, [r7, #4]
}
 800b7c8:	bf00      	nop
 800b7ca:	e7fe      	b.n	800b7ca <vTaskSwitchContext+0x3e>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	491b      	ldr	r1, [pc, #108]	; (800b840 <vTaskSwitchContext+0xb4>)
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	440b      	add	r3, r1
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d0e4      	beq.n	800b7b0 <vTaskSwitchContext+0x24>
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4a13      	ldr	r2, [pc, #76]	; (800b840 <vTaskSwitchContext+0xb4>)
 800b7f2:	4413      	add	r3, r2
 800b7f4:	60bb      	str	r3, [r7, #8]
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	605a      	str	r2, [r3, #4]
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	685a      	ldr	r2, [r3, #4]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	3308      	adds	r3, #8
 800b808:	429a      	cmp	r2, r3
 800b80a:	d104      	bne.n	800b816 <vTaskSwitchContext+0x8a>
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	605a      	str	r2, [r3, #4]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	4a09      	ldr	r2, [pc, #36]	; (800b844 <vTaskSwitchContext+0xb8>)
 800b81e:	6013      	str	r3, [r2, #0]
 800b820:	4a06      	ldr	r2, [pc, #24]	; (800b83c <vTaskSwitchContext+0xb0>)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6013      	str	r3, [r2, #0]
}
 800b826:	bf00      	nop
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20001100 	.word	0x20001100
 800b838:	200010ec 	.word	0x200010ec
 800b83c:	200010e0 	.word	0x200010e0
 800b840:	20000c08 	.word	0x20000c08
 800b844:	20000c04 	.word	0x20000c04

0800b848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10a      	bne.n	800b86e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	60fb      	str	r3, [r7, #12]
}
 800b86a:	bf00      	nop
 800b86c:	e7fe      	b.n	800b86c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b86e:	4b07      	ldr	r3, [pc, #28]	; (800b88c <vTaskPlaceOnEventList+0x44>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3318      	adds	r3, #24
 800b874:	4619      	mov	r1, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7fe fe87 	bl	800a58a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b87c:	2101      	movs	r1, #1
 800b87e:	6838      	ldr	r0, [r7, #0]
 800b880:	f000 fa7c 	bl	800bd7c <prvAddCurrentTaskToDelayedList>
}
 800b884:	bf00      	nop
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20000c04 	.word	0x20000c04

0800b890 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10a      	bne.n	800b8b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	617b      	str	r3, [r7, #20]
}
 800b8b4:	bf00      	nop
 800b8b6:	e7fe      	b.n	800b8b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8b8:	4b0a      	ldr	r3, [pc, #40]	; (800b8e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3318      	adds	r3, #24
 800b8be:	4619      	mov	r1, r3
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7fe fe3e 	bl	800a542 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b8cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b8d2:	6879      	ldr	r1, [r7, #4]
 800b8d4:	68b8      	ldr	r0, [r7, #8]
 800b8d6:	f000 fa51 	bl	800bd7c <prvAddCurrentTaskToDelayedList>
	}
 800b8da:	bf00      	nop
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20000c04 	.word	0x20000c04

0800b8e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10a      	bne.n	800b914 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	60fb      	str	r3, [r7, #12]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	3318      	adds	r3, #24
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fe fe6f 	bl	800a5fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b91e:	4b1e      	ldr	r3, [pc, #120]	; (800b998 <xTaskRemoveFromEventList+0xb0>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d11d      	bne.n	800b962 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	3304      	adds	r3, #4
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fe fe66 	bl	800a5fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b934:	4b19      	ldr	r3, [pc, #100]	; (800b99c <xTaskRemoveFromEventList+0xb4>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d903      	bls.n	800b944 <xTaskRemoveFromEventList+0x5c>
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b940:	4a16      	ldr	r2, [pc, #88]	; (800b99c <xTaskRemoveFromEventList+0xb4>)
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4a13      	ldr	r2, [pc, #76]	; (800b9a0 <xTaskRemoveFromEventList+0xb8>)
 800b952:	441a      	add	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	3304      	adds	r3, #4
 800b958:	4619      	mov	r1, r3
 800b95a:	4610      	mov	r0, r2
 800b95c:	f7fe fdf1 	bl	800a542 <vListInsertEnd>
 800b960:	e005      	b.n	800b96e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	3318      	adds	r3, #24
 800b966:	4619      	mov	r1, r3
 800b968:	480e      	ldr	r0, [pc, #56]	; (800b9a4 <xTaskRemoveFromEventList+0xbc>)
 800b96a:	f7fe fdea 	bl	800a542 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b972:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <xTaskRemoveFromEventList+0xc0>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	429a      	cmp	r2, r3
 800b97a:	d905      	bls.n	800b988 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b97c:	2301      	movs	r3, #1
 800b97e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b980:	4b0a      	ldr	r3, [pc, #40]	; (800b9ac <xTaskRemoveFromEventList+0xc4>)
 800b982:	2201      	movs	r2, #1
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	e001      	b.n	800b98c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b98c:	697b      	ldr	r3, [r7, #20]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20001100 	.word	0x20001100
 800b99c:	200010e0 	.word	0x200010e0
 800b9a0:	20000c08 	.word	0x20000c08
 800b9a4:	20001098 	.word	0x20001098
 800b9a8:	20000c04 	.word	0x20000c04
 800b9ac:	200010ec 	.word	0x200010ec

0800b9b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9b8:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <vTaskInternalSetTimeOutState+0x24>)
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9c0:	4b05      	ldr	r3, [pc, #20]	; (800b9d8 <vTaskInternalSetTimeOutState+0x28>)
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	605a      	str	r2, [r3, #4]
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	200010f0 	.word	0x200010f0
 800b9d8:	200010dc 	.word	0x200010dc

0800b9dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b088      	sub	sp, #32
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10a      	bne.n	800ba02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	613b      	str	r3, [r7, #16]
}
 800b9fe:	bf00      	nop
 800ba00:	e7fe      	b.n	800ba00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10a      	bne.n	800ba1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	60fb      	str	r3, [r7, #12]
}
 800ba1a:	bf00      	nop
 800ba1c:	e7fe      	b.n	800ba1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba1e:	f000 fe79 	bl	800c714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba22:	4b1d      	ldr	r3, [pc, #116]	; (800ba98 <xTaskCheckForTimeOut+0xbc>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	69ba      	ldr	r2, [r7, #24]
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba3a:	d102      	bne.n	800ba42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	61fb      	str	r3, [r7, #28]
 800ba40:	e023      	b.n	800ba8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	4b15      	ldr	r3, [pc, #84]	; (800ba9c <xTaskCheckForTimeOut+0xc0>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d007      	beq.n	800ba5e <xTaskCheckForTimeOut+0x82>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d302      	bcc.n	800ba5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	61fb      	str	r3, [r7, #28]
 800ba5c:	e015      	b.n	800ba8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d20b      	bcs.n	800ba80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	1ad2      	subs	r2, r2, r3
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7ff ff9b 	bl	800b9b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	61fb      	str	r3, [r7, #28]
 800ba7e:	e004      	b.n	800ba8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2200      	movs	r2, #0
 800ba84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba86:	2301      	movs	r3, #1
 800ba88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba8a:	f000 fe73 	bl	800c774 <vPortExitCritical>

	return xReturn;
 800ba8e:	69fb      	ldr	r3, [r7, #28]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3720      	adds	r7, #32
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	200010dc 	.word	0x200010dc
 800ba9c:	200010f0 	.word	0x200010f0

0800baa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800baa0:	b480      	push	{r7}
 800baa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800baa4:	4b03      	ldr	r3, [pc, #12]	; (800bab4 <vTaskMissedYield+0x14>)
 800baa6:	2201      	movs	r2, #1
 800baa8:	601a      	str	r2, [r3, #0]
}
 800baaa:	bf00      	nop
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	200010ec 	.word	0x200010ec

0800bab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bac0:	f000 f852 	bl	800bb68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bac4:	4b06      	ldr	r3, [pc, #24]	; (800bae0 <prvIdleTask+0x28>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d9f9      	bls.n	800bac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bacc:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <prvIdleTask+0x2c>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800badc:	e7f0      	b.n	800bac0 <prvIdleTask+0x8>
 800bade:	bf00      	nop
 800bae0:	20000c08 	.word	0x20000c08
 800bae4:	e000ed04 	.word	0xe000ed04

0800bae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800baee:	2300      	movs	r3, #0
 800baf0:	607b      	str	r3, [r7, #4]
 800baf2:	e00c      	b.n	800bb0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	4613      	mov	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4a12      	ldr	r2, [pc, #72]	; (800bb48 <prvInitialiseTaskLists+0x60>)
 800bb00:	4413      	add	r3, r2
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fcf0 	bl	800a4e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	607b      	str	r3, [r7, #4]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b37      	cmp	r3, #55	; 0x37
 800bb12:	d9ef      	bls.n	800baf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb14:	480d      	ldr	r0, [pc, #52]	; (800bb4c <prvInitialiseTaskLists+0x64>)
 800bb16:	f7fe fce7 	bl	800a4e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb1a:	480d      	ldr	r0, [pc, #52]	; (800bb50 <prvInitialiseTaskLists+0x68>)
 800bb1c:	f7fe fce4 	bl	800a4e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb20:	480c      	ldr	r0, [pc, #48]	; (800bb54 <prvInitialiseTaskLists+0x6c>)
 800bb22:	f7fe fce1 	bl	800a4e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb26:	480c      	ldr	r0, [pc, #48]	; (800bb58 <prvInitialiseTaskLists+0x70>)
 800bb28:	f7fe fcde 	bl	800a4e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb2c:	480b      	ldr	r0, [pc, #44]	; (800bb5c <prvInitialiseTaskLists+0x74>)
 800bb2e:	f7fe fcdb 	bl	800a4e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb32:	4b0b      	ldr	r3, [pc, #44]	; (800bb60 <prvInitialiseTaskLists+0x78>)
 800bb34:	4a05      	ldr	r2, [pc, #20]	; (800bb4c <prvInitialiseTaskLists+0x64>)
 800bb36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb38:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <prvInitialiseTaskLists+0x7c>)
 800bb3a:	4a05      	ldr	r2, [pc, #20]	; (800bb50 <prvInitialiseTaskLists+0x68>)
 800bb3c:	601a      	str	r2, [r3, #0]
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20000c08 	.word	0x20000c08
 800bb4c:	20001068 	.word	0x20001068
 800bb50:	2000107c 	.word	0x2000107c
 800bb54:	20001098 	.word	0x20001098
 800bb58:	200010ac 	.word	0x200010ac
 800bb5c:	200010c4 	.word	0x200010c4
 800bb60:	20001090 	.word	0x20001090
 800bb64:	20001094 	.word	0x20001094

0800bb68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb6e:	e019      	b.n	800bba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb70:	f000 fdd0 	bl	800c714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb74:	4b10      	ldr	r3, [pc, #64]	; (800bbb8 <prvCheckTasksWaitingTermination+0x50>)
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	3304      	adds	r3, #4
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fe fd3b 	bl	800a5fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb86:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <prvCheckTasksWaitingTermination+0x54>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	4a0b      	ldr	r2, [pc, #44]	; (800bbbc <prvCheckTasksWaitingTermination+0x54>)
 800bb8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <prvCheckTasksWaitingTermination+0x58>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	4a0a      	ldr	r2, [pc, #40]	; (800bbc0 <prvCheckTasksWaitingTermination+0x58>)
 800bb98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb9a:	f000 fdeb 	bl	800c774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f810 	bl	800bbc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bba4:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <prvCheckTasksWaitingTermination+0x58>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1e1      	bne.n	800bb70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbac:	bf00      	nop
 800bbae:	bf00      	nop
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	200010ac 	.word	0x200010ac
 800bbbc:	200010d8 	.word	0x200010d8
 800bbc0:	200010c0 	.word	0x200010c0

0800bbc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d108      	bne.n	800bbe8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 ff88 	bl	800caf0 <vPortFree>
				vPortFree( pxTCB );
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 ff85 	bl	800caf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbe6:	e018      	b.n	800bc1a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d103      	bne.n	800bbfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 ff7c 	bl	800caf0 <vPortFree>
	}
 800bbf8:	e00f      	b.n	800bc1a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d00a      	beq.n	800bc1a <prvDeleteTCB+0x56>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	60fb      	str	r3, [r7, #12]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <prvDeleteTCB+0x54>
	}
 800bc1a:	bf00      	nop
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
	...

0800bc24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc2a:	4b0c      	ldr	r3, [pc, #48]	; (800bc5c <prvResetNextTaskUnblockTime+0x38>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d104      	bne.n	800bc3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc34:	4b0a      	ldr	r3, [pc, #40]	; (800bc60 <prvResetNextTaskUnblockTime+0x3c>)
 800bc36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc3c:	e008      	b.n	800bc50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc3e:	4b07      	ldr	r3, [pc, #28]	; (800bc5c <prvResetNextTaskUnblockTime+0x38>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	4a04      	ldr	r2, [pc, #16]	; (800bc60 <prvResetNextTaskUnblockTime+0x3c>)
 800bc4e:	6013      	str	r3, [r2, #0]
}
 800bc50:	bf00      	nop
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	20001090 	.word	0x20001090
 800bc60:	200010f8 	.word	0x200010f8

0800bc64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	; (800bc98 <xTaskGetSchedulerState+0x34>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d102      	bne.n	800bc78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc72:	2301      	movs	r3, #1
 800bc74:	607b      	str	r3, [r7, #4]
 800bc76:	e008      	b.n	800bc8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc78:	4b08      	ldr	r3, [pc, #32]	; (800bc9c <xTaskGetSchedulerState+0x38>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d102      	bne.n	800bc86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc80:	2302      	movs	r3, #2
 800bc82:	607b      	str	r3, [r7, #4]
 800bc84:	e001      	b.n	800bc8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc86:	2300      	movs	r3, #0
 800bc88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc8a:	687b      	ldr	r3, [r7, #4]
	}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	200010e4 	.word	0x200010e4
 800bc9c:	20001100 	.word	0x20001100

0800bca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcac:	2300      	movs	r3, #0
 800bcae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d056      	beq.n	800bd64 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcb6:	4b2e      	ldr	r3, [pc, #184]	; (800bd70 <xTaskPriorityDisinherit+0xd0>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d00a      	beq.n	800bcd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	60fb      	str	r3, [r7, #12]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10a      	bne.n	800bcf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	60bb      	str	r3, [r7, #8]
}
 800bcf0:	bf00      	nop
 800bcf2:	e7fe      	b.n	800bcf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcf8:	1e5a      	subs	r2, r3, #1
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d02c      	beq.n	800bd64 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d128      	bne.n	800bd64 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	3304      	adds	r3, #4
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fe fc70 	bl	800a5fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd34:	4b0f      	ldr	r3, [pc, #60]	; (800bd74 <xTaskPriorityDisinherit+0xd4>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d903      	bls.n	800bd44 <xTaskPriorityDisinherit+0xa4>
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd40:	4a0c      	ldr	r2, [pc, #48]	; (800bd74 <xTaskPriorityDisinherit+0xd4>)
 800bd42:	6013      	str	r3, [r2, #0]
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd48:	4613      	mov	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4a09      	ldr	r2, [pc, #36]	; (800bd78 <xTaskPriorityDisinherit+0xd8>)
 800bd52:	441a      	add	r2, r3
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	3304      	adds	r3, #4
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	f7fe fbf1 	bl	800a542 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd60:	2301      	movs	r3, #1
 800bd62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd64:	697b      	ldr	r3, [r7, #20]
	}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20000c04 	.word	0x20000c04
 800bd74:	200010e0 	.word	0x200010e0
 800bd78:	20000c08 	.word	0x20000c08

0800bd7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd86:	4b21      	ldr	r3, [pc, #132]	; (800be0c <prvAddCurrentTaskToDelayedList+0x90>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd8c:	4b20      	ldr	r3, [pc, #128]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3304      	adds	r3, #4
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe fc32 	bl	800a5fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd9e:	d10a      	bne.n	800bdb6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d007      	beq.n	800bdb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bda6:	4b1a      	ldr	r3, [pc, #104]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3304      	adds	r3, #4
 800bdac:	4619      	mov	r1, r3
 800bdae:	4819      	ldr	r0, [pc, #100]	; (800be14 <prvAddCurrentTaskToDelayedList+0x98>)
 800bdb0:	f7fe fbc7 	bl	800a542 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdb4:	e026      	b.n	800be04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4413      	add	r3, r2
 800bdbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdbe:	4b14      	ldr	r3, [pc, #80]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d209      	bcs.n	800bde2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdce:	4b12      	ldr	r3, [pc, #72]	; (800be18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	4b0f      	ldr	r3, [pc, #60]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4610      	mov	r0, r2
 800bddc:	f7fe fbd5 	bl	800a58a <vListInsert>
}
 800bde0:	e010      	b.n	800be04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bde2:	4b0e      	ldr	r3, [pc, #56]	; (800be1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <prvAddCurrentTaskToDelayedList+0x94>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4619      	mov	r1, r3
 800bdee:	4610      	mov	r0, r2
 800bdf0:	f7fe fbcb 	bl	800a58a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bdf4:	4b0a      	ldr	r3, [pc, #40]	; (800be20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d202      	bcs.n	800be04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bdfe:	4a08      	ldr	r2, [pc, #32]	; (800be20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	6013      	str	r3, [r2, #0]
}
 800be04:	bf00      	nop
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	200010dc 	.word	0x200010dc
 800be10:	20000c04 	.word	0x20000c04
 800be14:	200010c4 	.word	0x200010c4
 800be18:	20001094 	.word	0x20001094
 800be1c:	20001090 	.word	0x20001090
 800be20:	200010f8 	.word	0x200010f8

0800be24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08a      	sub	sp, #40	; 0x28
 800be28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be2e:	f000 fb07 	bl	800c440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be32:	4b1c      	ldr	r3, [pc, #112]	; (800bea4 <xTimerCreateTimerTask+0x80>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d021      	beq.n	800be7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be3e:	2300      	movs	r3, #0
 800be40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be42:	1d3a      	adds	r2, r7, #4
 800be44:	f107 0108 	add.w	r1, r7, #8
 800be48:	f107 030c 	add.w	r3, r7, #12
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe fb31 	bl	800a4b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be52:	6879      	ldr	r1, [r7, #4]
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	9202      	str	r2, [sp, #8]
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	2302      	movs	r3, #2
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	2300      	movs	r3, #0
 800be62:	460a      	mov	r2, r1
 800be64:	4910      	ldr	r1, [pc, #64]	; (800bea8 <xTimerCreateTimerTask+0x84>)
 800be66:	4811      	ldr	r0, [pc, #68]	; (800beac <xTimerCreateTimerTask+0x88>)
 800be68:	f7ff f8de 	bl	800b028 <xTaskCreateStatic>
 800be6c:	4603      	mov	r3, r0
 800be6e:	4a10      	ldr	r2, [pc, #64]	; (800beb0 <xTimerCreateTimerTask+0x8c>)
 800be70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be72:	4b0f      	ldr	r3, [pc, #60]	; (800beb0 <xTimerCreateTimerTask+0x8c>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be7a:	2301      	movs	r3, #1
 800be7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	613b      	str	r3, [r7, #16]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be9a:	697b      	ldr	r3, [r7, #20]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	20001134 	.word	0x20001134
 800bea8:	0800ddb0 	.word	0x0800ddb0
 800beac:	0800bfe9 	.word	0x0800bfe9
 800beb0:	20001138 	.word	0x20001138

0800beb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10a      	bne.n	800bee2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed0:	f383 8811 	msr	BASEPRI, r3
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	623b      	str	r3, [r7, #32]
}
 800bede:	bf00      	nop
 800bee0:	e7fe      	b.n	800bee0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bee2:	4b1a      	ldr	r3, [pc, #104]	; (800bf4c <xTimerGenericCommand+0x98>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d02a      	beq.n	800bf40 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b05      	cmp	r3, #5
 800befa:	dc18      	bgt.n	800bf2e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800befc:	f7ff feb2 	bl	800bc64 <xTaskGetSchedulerState>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d109      	bne.n	800bf1a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf06:	4b11      	ldr	r3, [pc, #68]	; (800bf4c <xTimerGenericCommand+0x98>)
 800bf08:	6818      	ldr	r0, [r3, #0]
 800bf0a:	f107 0110 	add.w	r1, r7, #16
 800bf0e:	2300      	movs	r3, #0
 800bf10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf12:	f7fe fca1 	bl	800a858 <xQueueGenericSend>
 800bf16:	6278      	str	r0, [r7, #36]	; 0x24
 800bf18:	e012      	b.n	800bf40 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf1a:	4b0c      	ldr	r3, [pc, #48]	; (800bf4c <xTimerGenericCommand+0x98>)
 800bf1c:	6818      	ldr	r0, [r3, #0]
 800bf1e:	f107 0110 	add.w	r1, r7, #16
 800bf22:	2300      	movs	r3, #0
 800bf24:	2200      	movs	r2, #0
 800bf26:	f7fe fc97 	bl	800a858 <xQueueGenericSend>
 800bf2a:	6278      	str	r0, [r7, #36]	; 0x24
 800bf2c:	e008      	b.n	800bf40 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf2e:	4b07      	ldr	r3, [pc, #28]	; (800bf4c <xTimerGenericCommand+0x98>)
 800bf30:	6818      	ldr	r0, [r3, #0]
 800bf32:	f107 0110 	add.w	r1, r7, #16
 800bf36:	2300      	movs	r3, #0
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	f7fe fd8b 	bl	800aa54 <xQueueGenericSendFromISR>
 800bf3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3728      	adds	r7, #40	; 0x28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	20001134 	.word	0x20001134

0800bf50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf5a:	4b22      	ldr	r3, [pc, #136]	; (800bfe4 <prvProcessExpiredTimer+0x94>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	3304      	adds	r3, #4
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fe fb47 	bl	800a5fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d022      	beq.n	800bfc2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	699a      	ldr	r2, [r3, #24]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	18d1      	adds	r1, r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	6978      	ldr	r0, [r7, #20]
 800bf8a:	f000 f8d1 	bl	800c130 <prvInsertTimerInActiveList>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d01f      	beq.n	800bfd4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf94:	2300      	movs	r3, #0
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	2300      	movs	r3, #0
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	6978      	ldr	r0, [r7, #20]
 800bfa0:	f7ff ff88 	bl	800beb4 <xTimerGenericCommand>
 800bfa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d113      	bne.n	800bfd4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	60fb      	str	r3, [r7, #12]
}
 800bfbe:	bf00      	nop
 800bfc0:	e7fe      	b.n	800bfc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfc8:	f023 0301 	bic.w	r3, r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	6978      	ldr	r0, [r7, #20]
 800bfda:	4798      	blx	r3
}
 800bfdc:	bf00      	nop
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	2000112c 	.word	0x2000112c

0800bfe8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bff0:	f107 0308 	add.w	r3, r7, #8
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 f857 	bl	800c0a8 <prvGetNextExpireTime>
 800bffa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	4619      	mov	r1, r3
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f000 f803 	bl	800c00c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c006:	f000 f8d5 	bl	800c1b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c00a:	e7f1      	b.n	800bff0 <prvTimerTask+0x8>

0800c00c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c016:	f7ff fa43 	bl	800b4a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c01a:	f107 0308 	add.w	r3, r7, #8
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 f866 	bl	800c0f0 <prvSampleTimeNow>
 800c024:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d130      	bne.n	800c08e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <prvProcessTimerOrBlockTask+0x3c>
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	429a      	cmp	r2, r3
 800c038:	d806      	bhi.n	800c048 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c03a:	f7ff fa3f 	bl	800b4bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c03e:	68f9      	ldr	r1, [r7, #12]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7ff ff85 	bl	800bf50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c046:	e024      	b.n	800c092 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d008      	beq.n	800c060 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c04e:	4b13      	ldr	r3, [pc, #76]	; (800c09c <prvProcessTimerOrBlockTask+0x90>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <prvProcessTimerOrBlockTask+0x50>
 800c058:	2301      	movs	r3, #1
 800c05a:	e000      	b.n	800c05e <prvProcessTimerOrBlockTask+0x52>
 800c05c:	2300      	movs	r3, #0
 800c05e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c060:	4b0f      	ldr	r3, [pc, #60]	; (800c0a0 <prvProcessTimerOrBlockTask+0x94>)
 800c062:	6818      	ldr	r0, [r3, #0]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	4619      	mov	r1, r3
 800c06e:	f7fe ffa7 	bl	800afc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c072:	f7ff fa23 	bl	800b4bc <xTaskResumeAll>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10a      	bne.n	800c092 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c07c:	4b09      	ldr	r3, [pc, #36]	; (800c0a4 <prvProcessTimerOrBlockTask+0x98>)
 800c07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	f3bf 8f6f 	isb	sy
}
 800c08c:	e001      	b.n	800c092 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c08e:	f7ff fa15 	bl	800b4bc <xTaskResumeAll>
}
 800c092:	bf00      	nop
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	20001130 	.word	0x20001130
 800c0a0:	20001134 	.word	0x20001134
 800c0a4:	e000ed04 	.word	0xe000ed04

0800c0a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0b0:	4b0e      	ldr	r3, [pc, #56]	; (800c0ec <prvGetNextExpireTime+0x44>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <prvGetNextExpireTime+0x16>
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	e000      	b.n	800c0c0 <prvGetNextExpireTime+0x18>
 800c0be:	2200      	movs	r2, #0
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d105      	bne.n	800c0d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0cc:	4b07      	ldr	r3, [pc, #28]	; (800c0ec <prvGetNextExpireTime+0x44>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	e001      	b.n	800c0dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3714      	adds	r7, #20
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	2000112c 	.word	0x2000112c

0800c0f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c0f8:	f7ff fa7e 	bl	800b5f8 <xTaskGetTickCount>
 800c0fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0fe:	4b0b      	ldr	r3, [pc, #44]	; (800c12c <prvSampleTimeNow+0x3c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	429a      	cmp	r2, r3
 800c106:	d205      	bcs.n	800c114 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c108:	f000 f936 	bl	800c378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	601a      	str	r2, [r3, #0]
 800c112:	e002      	b.n	800c11a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c11a:	4a04      	ldr	r2, [pc, #16]	; (800c12c <prvSampleTimeNow+0x3c>)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c120:	68fb      	ldr	r3, [r7, #12]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	2000113c 	.word	0x2000113c

0800c130 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c13e:	2300      	movs	r3, #0
 800c140:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	429a      	cmp	r2, r3
 800c154:	d812      	bhi.n	800c17c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	1ad2      	subs	r2, r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	429a      	cmp	r2, r3
 800c162:	d302      	bcc.n	800c16a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c164:	2301      	movs	r3, #1
 800c166:	617b      	str	r3, [r7, #20]
 800c168:	e01b      	b.n	800c1a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c16a:	4b10      	ldr	r3, [pc, #64]	; (800c1ac <prvInsertTimerInActiveList+0x7c>)
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3304      	adds	r3, #4
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7fe fa08 	bl	800a58a <vListInsert>
 800c17a:	e012      	b.n	800c1a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	429a      	cmp	r2, r3
 800c182:	d206      	bcs.n	800c192 <prvInsertTimerInActiveList+0x62>
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d302      	bcc.n	800c192 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c18c:	2301      	movs	r3, #1
 800c18e:	617b      	str	r3, [r7, #20]
 800c190:	e007      	b.n	800c1a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c192:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <prvInsertTimerInActiveList+0x80>)
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3304      	adds	r3, #4
 800c19a:	4619      	mov	r1, r3
 800c19c:	4610      	mov	r0, r2
 800c19e:	f7fe f9f4 	bl	800a58a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1a2:	697b      	ldr	r3, [r7, #20]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	20001130 	.word	0x20001130
 800c1b0:	2000112c 	.word	0x2000112c

0800c1b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08e      	sub	sp, #56	; 0x38
 800c1b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1ba:	e0ca      	b.n	800c352 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	da18      	bge.n	800c1f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1c2:	1d3b      	adds	r3, r7, #4
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10a      	bne.n	800c1e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	61fb      	str	r3, [r7, #28]
}
 800c1e0:	bf00      	nop
 800c1e2:	e7fe      	b.n	800c1e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ea:	6850      	ldr	r0, [r2, #4]
 800c1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ee:	6892      	ldr	r2, [r2, #8]
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f2c0 80ab 	blt.w	800c352 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	695b      	ldr	r3, [r3, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d004      	beq.n	800c212 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	3304      	adds	r3, #4
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe f9f5 	bl	800a5fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c212:	463b      	mov	r3, r7
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff ff6b 	bl	800c0f0 <prvSampleTimeNow>
 800c21a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b09      	cmp	r3, #9
 800c220:	f200 8096 	bhi.w	800c350 <prvProcessReceivedCommands+0x19c>
 800c224:	a201      	add	r2, pc, #4	; (adr r2, 800c22c <prvProcessReceivedCommands+0x78>)
 800c226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22a:	bf00      	nop
 800c22c:	0800c255 	.word	0x0800c255
 800c230:	0800c255 	.word	0x0800c255
 800c234:	0800c255 	.word	0x0800c255
 800c238:	0800c2c9 	.word	0x0800c2c9
 800c23c:	0800c2dd 	.word	0x0800c2dd
 800c240:	0800c327 	.word	0x0800c327
 800c244:	0800c255 	.word	0x0800c255
 800c248:	0800c255 	.word	0x0800c255
 800c24c:	0800c2c9 	.word	0x0800c2c9
 800c250:	0800c2dd 	.word	0x0800c2dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c25a:	f043 0301 	orr.w	r3, r3, #1
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	18d1      	adds	r1, r2, r3
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c274:	f7ff ff5c 	bl	800c130 <prvInsertTimerInActiveList>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d069      	beq.n	800c352 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c284:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c28c:	f003 0304 	and.w	r3, r3, #4
 800c290:	2b00      	cmp	r3, #0
 800c292:	d05e      	beq.n	800c352 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	441a      	add	r2, r3
 800c29c:	2300      	movs	r3, #0
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2a6:	f7ff fe05 	bl	800beb4 <xTimerGenericCommand>
 800c2aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d14f      	bne.n	800c352 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	61bb      	str	r3, [r7, #24]
}
 800c2c4:	bf00      	nop
 800c2c6:	e7fe      	b.n	800c2c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2ce:	f023 0301 	bic.w	r3, r3, #1
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c2da:	e03a      	b.n	800c352 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2e2:	f043 0301 	orr.w	r3, r3, #1
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10a      	bne.n	800c312 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	617b      	str	r3, [r7, #20]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	699a      	ldr	r2, [r3, #24]
 800c316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c318:	18d1      	adds	r1, r2, r3
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c320:	f7ff ff06 	bl	800c130 <prvInsertTimerInActiveList>
					break;
 800c324:	e015      	b.n	800c352 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c32c:	f003 0302 	and.w	r3, r3, #2
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c336:	f000 fbdb 	bl	800caf0 <vPortFree>
 800c33a:	e00a      	b.n	800c352 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c342:	f023 0301 	bic.w	r3, r3, #1
 800c346:	b2da      	uxtb	r2, r3
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c34e:	e000      	b.n	800c352 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c350:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c352:	4b08      	ldr	r3, [pc, #32]	; (800c374 <prvProcessReceivedCommands+0x1c0>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	1d39      	adds	r1, r7, #4
 800c358:	2200      	movs	r2, #0
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe fc16 	bl	800ab8c <xQueueReceive>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	f47f af2a 	bne.w	800c1bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	3730      	adds	r7, #48	; 0x30
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20001134 	.word	0x20001134

0800c378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b088      	sub	sp, #32
 800c37c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c37e:	e048      	b.n	800c412 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c380:	4b2d      	ldr	r3, [pc, #180]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c38a:	4b2b      	ldr	r3, [pc, #172]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3304      	adds	r3, #4
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe f92f 	bl	800a5fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d02e      	beq.n	800c412 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d90e      	bls.n	800c3e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3d2:	4b19      	ldr	r3, [pc, #100]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f7fe f8d4 	bl	800a58a <vListInsert>
 800c3e2:	e016      	b.n	800c412 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff fd60 	bl	800beb4 <xTimerGenericCommand>
 800c3f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10a      	bne.n	800c412 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	603b      	str	r3, [r7, #0]
}
 800c40e:	bf00      	nop
 800c410:	e7fe      	b.n	800c410 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c412:	4b09      	ldr	r3, [pc, #36]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1b1      	bne.n	800c380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c41c:	4b06      	ldr	r3, [pc, #24]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c422:	4b06      	ldr	r3, [pc, #24]	; (800c43c <prvSwitchTimerLists+0xc4>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a04      	ldr	r2, [pc, #16]	; (800c438 <prvSwitchTimerLists+0xc0>)
 800c428:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c42a:	4a04      	ldr	r2, [pc, #16]	; (800c43c <prvSwitchTimerLists+0xc4>)
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	6013      	str	r3, [r2, #0]
}
 800c430:	bf00      	nop
 800c432:	3718      	adds	r7, #24
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	2000112c 	.word	0x2000112c
 800c43c:	20001130 	.word	0x20001130

0800c440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c446:	f000 f965 	bl	800c714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c44a:	4b15      	ldr	r3, [pc, #84]	; (800c4a0 <prvCheckForValidListAndQueue+0x60>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d120      	bne.n	800c494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c452:	4814      	ldr	r0, [pc, #80]	; (800c4a4 <prvCheckForValidListAndQueue+0x64>)
 800c454:	f7fe f848 	bl	800a4e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c458:	4813      	ldr	r0, [pc, #76]	; (800c4a8 <prvCheckForValidListAndQueue+0x68>)
 800c45a:	f7fe f845 	bl	800a4e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c45e:	4b13      	ldr	r3, [pc, #76]	; (800c4ac <prvCheckForValidListAndQueue+0x6c>)
 800c460:	4a10      	ldr	r2, [pc, #64]	; (800c4a4 <prvCheckForValidListAndQueue+0x64>)
 800c462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c464:	4b12      	ldr	r3, [pc, #72]	; (800c4b0 <prvCheckForValidListAndQueue+0x70>)
 800c466:	4a10      	ldr	r2, [pc, #64]	; (800c4a8 <prvCheckForValidListAndQueue+0x68>)
 800c468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c46a:	2300      	movs	r3, #0
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	4b11      	ldr	r3, [pc, #68]	; (800c4b4 <prvCheckForValidListAndQueue+0x74>)
 800c470:	4a11      	ldr	r2, [pc, #68]	; (800c4b8 <prvCheckForValidListAndQueue+0x78>)
 800c472:	2110      	movs	r1, #16
 800c474:	200a      	movs	r0, #10
 800c476:	f7fe f953 	bl	800a720 <xQueueGenericCreateStatic>
 800c47a:	4603      	mov	r3, r0
 800c47c:	4a08      	ldr	r2, [pc, #32]	; (800c4a0 <prvCheckForValidListAndQueue+0x60>)
 800c47e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c480:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <prvCheckForValidListAndQueue+0x60>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c488:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <prvCheckForValidListAndQueue+0x60>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	490b      	ldr	r1, [pc, #44]	; (800c4bc <prvCheckForValidListAndQueue+0x7c>)
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe fd6c 	bl	800af6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c494:	f000 f96e 	bl	800c774 <vPortExitCritical>
}
 800c498:	bf00      	nop
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20001134 	.word	0x20001134
 800c4a4:	20001104 	.word	0x20001104
 800c4a8:	20001118 	.word	0x20001118
 800c4ac:	2000112c 	.word	0x2000112c
 800c4b0:	20001130 	.word	0x20001130
 800c4b4:	200011e0 	.word	0x200011e0
 800c4b8:	20001140 	.word	0x20001140
 800c4bc:	0800ddb8 	.word	0x0800ddb8

0800c4c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	3b04      	subs	r3, #4
 800c4d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	3b04      	subs	r3, #4
 800c4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	f023 0201 	bic.w	r2, r3, #1
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3b04      	subs	r3, #4
 800c4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4f0:	4a0c      	ldr	r2, [pc, #48]	; (800c524 <pxPortInitialiseStack+0x64>)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3b14      	subs	r3, #20
 800c4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3b04      	subs	r3, #4
 800c506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f06f 0202 	mvn.w	r2, #2
 800c50e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	3b20      	subs	r3, #32
 800c514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c516:	68fb      	ldr	r3, [r7, #12]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	0800c529 	.word	0x0800c529

0800c528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c532:	4b12      	ldr	r3, [pc, #72]	; (800c57c <prvTaskExitError+0x54>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c53a:	d00a      	beq.n	800c552 <prvTaskExitError+0x2a>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	60fb      	str	r3, [r7, #12]
}
 800c54e:	bf00      	nop
 800c550:	e7fe      	b.n	800c550 <prvTaskExitError+0x28>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	60bb      	str	r3, [r7, #8]
}
 800c564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c566:	bf00      	nop
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d0fc      	beq.n	800c568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c56e:	bf00      	nop
 800c570:	bf00      	nop
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	2000014c 	.word	0x2000014c

0800c580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c580:	4b07      	ldr	r3, [pc, #28]	; (800c5a0 <pxCurrentTCBConst2>)
 800c582:	6819      	ldr	r1, [r3, #0]
 800c584:	6808      	ldr	r0, [r1, #0]
 800c586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58a:	f380 8809 	msr	PSP, r0
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f04f 0000 	mov.w	r0, #0
 800c596:	f380 8811 	msr	BASEPRI, r0
 800c59a:	4770      	bx	lr
 800c59c:	f3af 8000 	nop.w

0800c5a0 <pxCurrentTCBConst2>:
 800c5a0:	20000c04 	.word	0x20000c04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5a4:	bf00      	nop
 800c5a6:	bf00      	nop

0800c5a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5a8:	4808      	ldr	r0, [pc, #32]	; (800c5cc <prvPortStartFirstTask+0x24>)
 800c5aa:	6800      	ldr	r0, [r0, #0]
 800c5ac:	6800      	ldr	r0, [r0, #0]
 800c5ae:	f380 8808 	msr	MSP, r0
 800c5b2:	f04f 0000 	mov.w	r0, #0
 800c5b6:	f380 8814 	msr	CONTROL, r0
 800c5ba:	b662      	cpsie	i
 800c5bc:	b661      	cpsie	f
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	df00      	svc	0
 800c5c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5ca:	bf00      	nop
 800c5cc:	e000ed08 	.word	0xe000ed08

0800c5d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5d6:	4b46      	ldr	r3, [pc, #280]	; (800c6f0 <xPortStartScheduler+0x120>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a46      	ldr	r2, [pc, #280]	; (800c6f4 <xPortStartScheduler+0x124>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d10a      	bne.n	800c5f6 <xPortStartScheduler+0x26>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	613b      	str	r3, [r7, #16]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5f6:	4b3e      	ldr	r3, [pc, #248]	; (800c6f0 <xPortStartScheduler+0x120>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a3f      	ldr	r2, [pc, #252]	; (800c6f8 <xPortStartScheduler+0x128>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d10a      	bne.n	800c616 <xPortStartScheduler+0x46>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	60fb      	str	r3, [r7, #12]
}
 800c612:	bf00      	nop
 800c614:	e7fe      	b.n	800c614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c616:	4b39      	ldr	r3, [pc, #228]	; (800c6fc <xPortStartScheduler+0x12c>)
 800c618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	22ff      	movs	r2, #255	; 0xff
 800c626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c630:	78fb      	ldrb	r3, [r7, #3]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	4b31      	ldr	r3, [pc, #196]	; (800c700 <xPortStartScheduler+0x130>)
 800c63c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c63e:	4b31      	ldr	r3, [pc, #196]	; (800c704 <xPortStartScheduler+0x134>)
 800c640:	2207      	movs	r2, #7
 800c642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c644:	e009      	b.n	800c65a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c646:	4b2f      	ldr	r3, [pc, #188]	; (800c704 <xPortStartScheduler+0x134>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3b01      	subs	r3, #1
 800c64c:	4a2d      	ldr	r2, [pc, #180]	; (800c704 <xPortStartScheduler+0x134>)
 800c64e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	b2db      	uxtb	r3, r3
 800c658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c65a:	78fb      	ldrb	r3, [r7, #3]
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c662:	2b80      	cmp	r3, #128	; 0x80
 800c664:	d0ef      	beq.n	800c646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c666:	4b27      	ldr	r3, [pc, #156]	; (800c704 <xPortStartScheduler+0x134>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f1c3 0307 	rsb	r3, r3, #7
 800c66e:	2b04      	cmp	r3, #4
 800c670:	d00a      	beq.n	800c688 <xPortStartScheduler+0xb8>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	60bb      	str	r3, [r7, #8]
}
 800c684:	bf00      	nop
 800c686:	e7fe      	b.n	800c686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c688:	4b1e      	ldr	r3, [pc, #120]	; (800c704 <xPortStartScheduler+0x134>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	021b      	lsls	r3, r3, #8
 800c68e:	4a1d      	ldr	r2, [pc, #116]	; (800c704 <xPortStartScheduler+0x134>)
 800c690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c692:	4b1c      	ldr	r3, [pc, #112]	; (800c704 <xPortStartScheduler+0x134>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c69a:	4a1a      	ldr	r2, [pc, #104]	; (800c704 <xPortStartScheduler+0x134>)
 800c69c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	b2da      	uxtb	r2, r3
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6a6:	4b18      	ldr	r3, [pc, #96]	; (800c708 <xPortStartScheduler+0x138>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a17      	ldr	r2, [pc, #92]	; (800c708 <xPortStartScheduler+0x138>)
 800c6ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c6b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6b2:	4b15      	ldr	r3, [pc, #84]	; (800c708 <xPortStartScheduler+0x138>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a14      	ldr	r2, [pc, #80]	; (800c708 <xPortStartScheduler+0x138>)
 800c6b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c6bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6be:	f000 f8dd 	bl	800c87c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6c2:	4b12      	ldr	r3, [pc, #72]	; (800c70c <xPortStartScheduler+0x13c>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6c8:	f000 f8fc 	bl	800c8c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6cc:	4b10      	ldr	r3, [pc, #64]	; (800c710 <xPortStartScheduler+0x140>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a0f      	ldr	r2, [pc, #60]	; (800c710 <xPortStartScheduler+0x140>)
 800c6d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c6d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6d8:	f7ff ff66 	bl	800c5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6dc:	f7ff f856 	bl	800b78c <vTaskSwitchContext>
	prvTaskExitError();
 800c6e0:	f7ff ff22 	bl	800c528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	e000ed00 	.word	0xe000ed00
 800c6f4:	410fc271 	.word	0x410fc271
 800c6f8:	410fc270 	.word	0x410fc270
 800c6fc:	e000e400 	.word	0xe000e400
 800c700:	20001230 	.word	0x20001230
 800c704:	20001234 	.word	0x20001234
 800c708:	e000ed20 	.word	0xe000ed20
 800c70c:	2000014c 	.word	0x2000014c
 800c710:	e000ef34 	.word	0xe000ef34

0800c714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
	__asm volatile
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	f383 8811 	msr	BASEPRI, r3
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	607b      	str	r3, [r7, #4]
}
 800c72c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c72e:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <vPortEnterCritical+0x58>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3301      	adds	r3, #1
 800c734:	4a0d      	ldr	r2, [pc, #52]	; (800c76c <vPortEnterCritical+0x58>)
 800c736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c738:	4b0c      	ldr	r3, [pc, #48]	; (800c76c <vPortEnterCritical+0x58>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d10f      	bne.n	800c760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c740:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <vPortEnterCritical+0x5c>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00a      	beq.n	800c760 <vPortEnterCritical+0x4c>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	603b      	str	r3, [r7, #0]
}
 800c75c:	bf00      	nop
 800c75e:	e7fe      	b.n	800c75e <vPortEnterCritical+0x4a>
	}
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	2000014c 	.word	0x2000014c
 800c770:	e000ed04 	.word	0xe000ed04

0800c774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c77a:	4b12      	ldr	r3, [pc, #72]	; (800c7c4 <vPortExitCritical+0x50>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10a      	bne.n	800c798 <vPortExitCritical+0x24>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	607b      	str	r3, [r7, #4]
}
 800c794:	bf00      	nop
 800c796:	e7fe      	b.n	800c796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c798:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <vPortExitCritical+0x50>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	4a09      	ldr	r2, [pc, #36]	; (800c7c4 <vPortExitCritical+0x50>)
 800c7a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7a2:	4b08      	ldr	r3, [pc, #32]	; (800c7c4 <vPortExitCritical+0x50>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d105      	bne.n	800c7b6 <vPortExitCritical+0x42>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	f383 8811 	msr	BASEPRI, r3
}
 800c7b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7b6:	bf00      	nop
 800c7b8:	370c      	adds	r7, #12
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	2000014c 	.word	0x2000014c
	...

0800c7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7d0:	f3ef 8009 	mrs	r0, PSP
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	4b15      	ldr	r3, [pc, #84]	; (800c830 <pxCurrentTCBConst>)
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	f01e 0f10 	tst.w	lr, #16
 800c7e0:	bf08      	it	eq
 800c7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ea:	6010      	str	r0, [r2, #0]
 800c7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7f4:	f380 8811 	msr	BASEPRI, r0
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f7fe ffc4 	bl	800b78c <vTaskSwitchContext>
 800c804:	f04f 0000 	mov.w	r0, #0
 800c808:	f380 8811 	msr	BASEPRI, r0
 800c80c:	bc09      	pop	{r0, r3}
 800c80e:	6819      	ldr	r1, [r3, #0]
 800c810:	6808      	ldr	r0, [r1, #0]
 800c812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c816:	f01e 0f10 	tst.w	lr, #16
 800c81a:	bf08      	it	eq
 800c81c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c820:	f380 8809 	msr	PSP, r0
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	f3af 8000 	nop.w

0800c830 <pxCurrentTCBConst>:
 800c830:	20000c04 	.word	0x20000c04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop

0800c838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	607b      	str	r3, [r7, #4]
}
 800c850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c852:	f7fe fee1 	bl	800b618 <xTaskIncrementTick>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d003      	beq.n	800c864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c85c:	4b06      	ldr	r3, [pc, #24]	; (800c878 <xPortSysTickHandler+0x40>)
 800c85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c862:	601a      	str	r2, [r3, #0]
 800c864:	2300      	movs	r3, #0
 800c866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	f383 8811 	msr	BASEPRI, r3
}
 800c86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c870:	bf00      	nop
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	e000ed04 	.word	0xe000ed04

0800c87c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c87c:	b480      	push	{r7}
 800c87e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c880:	4b0b      	ldr	r3, [pc, #44]	; (800c8b0 <vPortSetupTimerInterrupt+0x34>)
 800c882:	2200      	movs	r2, #0
 800c884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c886:	4b0b      	ldr	r3, [pc, #44]	; (800c8b4 <vPortSetupTimerInterrupt+0x38>)
 800c888:	2200      	movs	r2, #0
 800c88a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c88c:	4b0a      	ldr	r3, [pc, #40]	; (800c8b8 <vPortSetupTimerInterrupt+0x3c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a0a      	ldr	r2, [pc, #40]	; (800c8bc <vPortSetupTimerInterrupt+0x40>)
 800c892:	fba2 2303 	umull	r2, r3, r2, r3
 800c896:	099b      	lsrs	r3, r3, #6
 800c898:	4a09      	ldr	r2, [pc, #36]	; (800c8c0 <vPortSetupTimerInterrupt+0x44>)
 800c89a:	3b01      	subs	r3, #1
 800c89c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c89e:	4b04      	ldr	r3, [pc, #16]	; (800c8b0 <vPortSetupTimerInterrupt+0x34>)
 800c8a0:	2207      	movs	r2, #7
 800c8a2:	601a      	str	r2, [r3, #0]
}
 800c8a4:	bf00      	nop
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	e000e010 	.word	0xe000e010
 800c8b4:	e000e018 	.word	0xe000e018
 800c8b8:	20000140 	.word	0x20000140
 800c8bc:	10624dd3 	.word	0x10624dd3
 800c8c0:	e000e014 	.word	0xe000e014

0800c8c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c8d4 <vPortEnableVFP+0x10>
 800c8c8:	6801      	ldr	r1, [r0, #0]
 800c8ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c8ce:	6001      	str	r1, [r0, #0]
 800c8d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8d2:	bf00      	nop
 800c8d4:	e000ed88 	.word	0xe000ed88

0800c8d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8de:	f3ef 8305 	mrs	r3, IPSR
 800c8e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2b0f      	cmp	r3, #15
 800c8e8:	d914      	bls.n	800c914 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c8ea:	4a17      	ldr	r2, [pc, #92]	; (800c948 <vPortValidateInterruptPriority+0x70>)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c8f4:	4b15      	ldr	r3, [pc, #84]	; (800c94c <vPortValidateInterruptPriority+0x74>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	7afa      	ldrb	r2, [r7, #11]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d20a      	bcs.n	800c914 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	607b      	str	r3, [r7, #4]
}
 800c910:	bf00      	nop
 800c912:	e7fe      	b.n	800c912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c914:	4b0e      	ldr	r3, [pc, #56]	; (800c950 <vPortValidateInterruptPriority+0x78>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c91c:	4b0d      	ldr	r3, [pc, #52]	; (800c954 <vPortValidateInterruptPriority+0x7c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	429a      	cmp	r2, r3
 800c922:	d90a      	bls.n	800c93a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	603b      	str	r3, [r7, #0]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <vPortValidateInterruptPriority+0x60>
	}
 800c93a:	bf00      	nop
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	e000e3f0 	.word	0xe000e3f0
 800c94c:	20001230 	.word	0x20001230
 800c950:	e000ed0c 	.word	0xe000ed0c
 800c954:	20001234 	.word	0x20001234

0800c958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08a      	sub	sp, #40	; 0x28
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c960:	2300      	movs	r3, #0
 800c962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c964:	f7fe fd9c 	bl	800b4a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c968:	4b5b      	ldr	r3, [pc, #364]	; (800cad8 <pvPortMalloc+0x180>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d101      	bne.n	800c974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c970:	f000 f920 	bl	800cbb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c974:	4b59      	ldr	r3, [pc, #356]	; (800cadc <pvPortMalloc+0x184>)
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4013      	ands	r3, r2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f040 8093 	bne.w	800caa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d01d      	beq.n	800c9c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c988:	2208      	movs	r2, #8
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4413      	add	r3, r2
 800c98e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	2b00      	cmp	r3, #0
 800c998:	d014      	beq.n	800c9c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f023 0307 	bic.w	r3, r3, #7
 800c9a0:	3308      	adds	r3, #8
 800c9a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00a      	beq.n	800c9c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	617b      	str	r3, [r7, #20]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d06e      	beq.n	800caa8 <pvPortMalloc+0x150>
 800c9ca:	4b45      	ldr	r3, [pc, #276]	; (800cae0 <pvPortMalloc+0x188>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d869      	bhi.n	800caa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9d4:	4b43      	ldr	r3, [pc, #268]	; (800cae4 <pvPortMalloc+0x18c>)
 800c9d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9d8:	4b42      	ldr	r3, [pc, #264]	; (800cae4 <pvPortMalloc+0x18c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9de:	e004      	b.n	800c9ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d903      	bls.n	800c9fc <pvPortMalloc+0xa4>
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1f1      	bne.n	800c9e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9fc:	4b36      	ldr	r3, [pc, #216]	; (800cad8 <pvPortMalloc+0x180>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d050      	beq.n	800caa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2208      	movs	r2, #8
 800ca0c:	4413      	add	r3, r2
 800ca0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	1ad2      	subs	r2, r2, r3
 800ca20:	2308      	movs	r3, #8
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d91f      	bls.n	800ca68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	f003 0307 	and.w	r3, r3, #7
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00a      	beq.n	800ca50 <pvPortMalloc+0xf8>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	613b      	str	r3, [r7, #16]
}
 800ca4c:	bf00      	nop
 800ca4e:	e7fe      	b.n	800ca4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	1ad2      	subs	r2, r2, r3
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca62:	69b8      	ldr	r0, [r7, #24]
 800ca64:	f000 f908 	bl	800cc78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca68:	4b1d      	ldr	r3, [pc, #116]	; (800cae0 <pvPortMalloc+0x188>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	4a1b      	ldr	r2, [pc, #108]	; (800cae0 <pvPortMalloc+0x188>)
 800ca74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca76:	4b1a      	ldr	r3, [pc, #104]	; (800cae0 <pvPortMalloc+0x188>)
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	4b1b      	ldr	r3, [pc, #108]	; (800cae8 <pvPortMalloc+0x190>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d203      	bcs.n	800ca8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca82:	4b17      	ldr	r3, [pc, #92]	; (800cae0 <pvPortMalloc+0x188>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a18      	ldr	r2, [pc, #96]	; (800cae8 <pvPortMalloc+0x190>)
 800ca88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	685a      	ldr	r2, [r3, #4]
 800ca8e:	4b13      	ldr	r3, [pc, #76]	; (800cadc <pvPortMalloc+0x184>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	431a      	orrs	r2, r3
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca9e:	4b13      	ldr	r3, [pc, #76]	; (800caec <pvPortMalloc+0x194>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	4a11      	ldr	r2, [pc, #68]	; (800caec <pvPortMalloc+0x194>)
 800caa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800caa8:	f7fe fd08 	bl	800b4bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	f003 0307 	and.w	r3, r3, #7
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00a      	beq.n	800cacc <pvPortMalloc+0x174>
	__asm volatile
 800cab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	60fb      	str	r3, [r7, #12]
}
 800cac8:	bf00      	nop
 800caca:	e7fe      	b.n	800caca <pvPortMalloc+0x172>
	return pvReturn;
 800cacc:	69fb      	ldr	r3, [r7, #28]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3728      	adds	r7, #40	; 0x28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20004e40 	.word	0x20004e40
 800cadc:	20004e54 	.word	0x20004e54
 800cae0:	20004e44 	.word	0x20004e44
 800cae4:	20004e38 	.word	0x20004e38
 800cae8:	20004e48 	.word	0x20004e48
 800caec:	20004e4c 	.word	0x20004e4c

0800caf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d04d      	beq.n	800cb9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb02:	2308      	movs	r3, #8
 800cb04:	425b      	negs	r3, r3
 800cb06:	697a      	ldr	r2, [r7, #20]
 800cb08:	4413      	add	r3, r2
 800cb0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	685a      	ldr	r2, [r3, #4]
 800cb14:	4b24      	ldr	r3, [pc, #144]	; (800cba8 <vPortFree+0xb8>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4013      	ands	r3, r2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10a      	bne.n	800cb34 <vPortFree+0x44>
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	60fb      	str	r3, [r7, #12]
}
 800cb30:	bf00      	nop
 800cb32:	e7fe      	b.n	800cb32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00a      	beq.n	800cb52 <vPortFree+0x62>
	__asm volatile
 800cb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb40:	f383 8811 	msr	BASEPRI, r3
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	60bb      	str	r3, [r7, #8]
}
 800cb4e:	bf00      	nop
 800cb50:	e7fe      	b.n	800cb50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	4b14      	ldr	r3, [pc, #80]	; (800cba8 <vPortFree+0xb8>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4013      	ands	r3, r2
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01e      	beq.n	800cb9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d11a      	bne.n	800cb9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	4b0e      	ldr	r3, [pc, #56]	; (800cba8 <vPortFree+0xb8>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	43db      	mvns	r3, r3
 800cb72:	401a      	ands	r2, r3
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb78:	f7fe fc92 	bl	800b4a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	4b0a      	ldr	r3, [pc, #40]	; (800cbac <vPortFree+0xbc>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4413      	add	r3, r2
 800cb86:	4a09      	ldr	r2, [pc, #36]	; (800cbac <vPortFree+0xbc>)
 800cb88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb8a:	6938      	ldr	r0, [r7, #16]
 800cb8c:	f000 f874 	bl	800cc78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb90:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <vPortFree+0xc0>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3301      	adds	r3, #1
 800cb96:	4a06      	ldr	r2, [pc, #24]	; (800cbb0 <vPortFree+0xc0>)
 800cb98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb9a:	f7fe fc8f 	bl	800b4bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb9e:	bf00      	nop
 800cba0:	3718      	adds	r7, #24
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	20004e54 	.word	0x20004e54
 800cbac:	20004e44 	.word	0x20004e44
 800cbb0:	20004e50 	.word	0x20004e50

0800cbb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cbbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbc0:	4b27      	ldr	r3, [pc, #156]	; (800cc60 <prvHeapInit+0xac>)
 800cbc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f003 0307 	and.w	r3, r3, #7
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00c      	beq.n	800cbe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3307      	adds	r3, #7
 800cbd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f023 0307 	bic.w	r3, r3, #7
 800cbda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	4a1f      	ldr	r2, [pc, #124]	; (800cc60 <prvHeapInit+0xac>)
 800cbe4:	4413      	add	r3, r2
 800cbe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbec:	4a1d      	ldr	r2, [pc, #116]	; (800cc64 <prvHeapInit+0xb0>)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cbf2:	4b1c      	ldr	r3, [pc, #112]	; (800cc64 <prvHeapInit+0xb0>)
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc00:	2208      	movs	r2, #8
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	1a9b      	subs	r3, r3, r2
 800cc06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f023 0307 	bic.w	r3, r3, #7
 800cc0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	4a15      	ldr	r2, [pc, #84]	; (800cc68 <prvHeapInit+0xb4>)
 800cc14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc16:	4b14      	ldr	r3, [pc, #80]	; (800cc68 <prvHeapInit+0xb4>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc1e:	4b12      	ldr	r3, [pc, #72]	; (800cc68 <prvHeapInit+0xb4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	1ad2      	subs	r2, r2, r3
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc34:	4b0c      	ldr	r3, [pc, #48]	; (800cc68 <prvHeapInit+0xb4>)
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	4a0a      	ldr	r2, [pc, #40]	; (800cc6c <prvHeapInit+0xb8>)
 800cc42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	4a09      	ldr	r2, [pc, #36]	; (800cc70 <prvHeapInit+0xbc>)
 800cc4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc4c:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <prvHeapInit+0xc0>)
 800cc4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc52:	601a      	str	r2, [r3, #0]
}
 800cc54:	bf00      	nop
 800cc56:	3714      	adds	r7, #20
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	20001238 	.word	0x20001238
 800cc64:	20004e38 	.word	0x20004e38
 800cc68:	20004e40 	.word	0x20004e40
 800cc6c:	20004e48 	.word	0x20004e48
 800cc70:	20004e44 	.word	0x20004e44
 800cc74:	20004e54 	.word	0x20004e54

0800cc78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc80:	4b28      	ldr	r3, [pc, #160]	; (800cd24 <prvInsertBlockIntoFreeList+0xac>)
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	e002      	b.n	800cc8c <prvInsertBlockIntoFreeList+0x14>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d8f7      	bhi.n	800cc86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	4413      	add	r3, r2
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d108      	bne.n	800ccba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	441a      	add	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	441a      	add	r2, r3
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d118      	bne.n	800cd00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	4b15      	ldr	r3, [pc, #84]	; (800cd28 <prvInsertBlockIntoFreeList+0xb0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d00d      	beq.n	800ccf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685a      	ldr	r2, [r3, #4]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	441a      	add	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	601a      	str	r2, [r3, #0]
 800ccf4:	e008      	b.n	800cd08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ccf6:	4b0c      	ldr	r3, [pc, #48]	; (800cd28 <prvInsertBlockIntoFreeList+0xb0>)
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	e003      	b.n	800cd08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d002      	beq.n	800cd16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd16:	bf00      	nop
 800cd18:	3714      	adds	r7, #20
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	20004e38 	.word	0x20004e38
 800cd28:	20004e40 	.word	0x20004e40

0800cd2c <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08a      	sub	sp, #40	; 0x28
 800cd30:	af04      	add	r7, sp, #16
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	460b      	mov	r3, r1
 800cd36:	607a      	str	r2, [r7, #4]
 800cd38:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	011b      	lsls	r3, r3, #4
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800cd48:	7afb      	ldrb	r3, [r7, #11]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <_ICM20948_SelectUserBank+0x26>
 800cd4e:	2368      	movs	r3, #104	; 0x68
 800cd50:	e000      	b.n	800cd54 <_ICM20948_SelectUserBank+0x28>
 800cd52:	2369      	movs	r3, #105	; 0x69
 800cd54:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800cd56:	7dbb      	ldrb	r3, [r7, #22]
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	b299      	uxth	r1, r3
 800cd5e:	230a      	movs	r3, #10
 800cd60:	9302      	str	r3, [sp, #8]
 800cd62:	2301      	movs	r3, #1
 800cd64:	9301      	str	r3, [sp, #4]
 800cd66:	f107 0315 	add.w	r3, r7, #21
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	227f      	movs	r2, #127	; 0x7f
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7f9 f849 	bl	8005e08 <HAL_I2C_Mem_Write>
 800cd76:	4603      	mov	r3, r0
 800cd78:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b088      	sub	sp, #32
 800cd88:	af04      	add	r7, sp, #16
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4611      	mov	r1, r2
 800cd90:	461a      	mov	r2, r3
 800cd92:	4603      	mov	r3, r0
 800cd94:	70fb      	strb	r3, [r7, #3]
 800cd96:	460b      	mov	r3, r1
 800cd98:	70bb      	strb	r3, [r7, #2]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800cda2:	78fb      	ldrb	r3, [r7, #3]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d101      	bne.n	800cdac <_ICM20948_WriteByte+0x28>
 800cda8:	2368      	movs	r3, #104	; 0x68
 800cdaa:	e000      	b.n	800cdae <_ICM20948_WriteByte+0x2a>
 800cdac:	2369      	movs	r3, #105	; 0x69
 800cdae:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800cdb0:	7bbb      	ldrb	r3, [r7, #14]
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	b299      	uxth	r1, r3
 800cdb8:	78bb      	ldrb	r3, [r7, #2]
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	230a      	movs	r3, #10
 800cdbe:	9302      	str	r3, [sp, #8]
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	1c7b      	adds	r3, r7, #1
 800cdc6:	9300      	str	r3, [sp, #0]
 800cdc8:	2301      	movs	r3, #1
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7f9 f81c 	bl	8005e08 <HAL_I2C_Mem_Write>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b084      	sub	sp, #16
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	4608      	mov	r0, r1
 800cde8:	4611      	mov	r1, r2
 800cdea:	461a      	mov	r2, r3
 800cdec:	4603      	mov	r3, r0
 800cdee:	70fb      	strb	r3, [r7, #3]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	70bb      	strb	r3, [r7, #2]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800cdfc:	78fb      	ldrb	r3, [r7, #3]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	4619      	mov	r1, r3
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7ff ff92 	bl	800cd2c <_ICM20948_SelectUserBank>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800ce0c:	78f9      	ldrb	r1, [r7, #3]
 800ce0e:	2380      	movs	r3, #128	; 0x80
 800ce10:	2206      	movs	r2, #6
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7ff ffb6 	bl	800cd84 <_ICM20948_WriteByte>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800ce1c:	20c8      	movs	r0, #200	; 0xc8
 800ce1e:	f7f8 fb61 	bl	80054e4 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800ce22:	78f9      	ldrb	r1, [r7, #3]
 800ce24:	2301      	movs	r3, #1
 800ce26:	2206      	movs	r2, #6
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7ff ffab 	bl	800cd84 <_ICM20948_WriteByte>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800ce32:	78f9      	ldrb	r1, [r7, #3]
 800ce34:	2300      	movs	r3, #0
 800ce36:	2207      	movs	r2, #7
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff ffa3 	bl	800cd84 <_ICM20948_WriteByte>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800ce42:	78fb      	ldrb	r3, [r7, #3]
 800ce44:	2202      	movs	r2, #2
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff ff6f 	bl	800cd2c <_ICM20948_SelectUserBank>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800ce52:	78bb      	ldrb	r3, [r7, #2]
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	b25b      	sxtb	r3, r3
 800ce58:	f043 0319 	orr.w	r3, r3, #25
 800ce5c:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	78f9      	ldrb	r1, [r7, #3]
 800ce62:	2201      	movs	r2, #1
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff ff8d 	bl	800cd84 <_ICM20948_WriteByte>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800ce6e:	78f9      	ldrb	r1, [r7, #3]
 800ce70:	2303      	movs	r3, #3
 800ce72:	2253      	movs	r2, #83	; 0x53
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff ff85 	bl	800cd84 <_ICM20948_WriteByte>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800ce7e:	78f9      	ldrb	r1, [r7, #3]
 800ce80:	2304      	movs	r3, #4
 800ce82:	2200      	movs	r2, #0
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7ff ff7d 	bl	800cd84 <_ICM20948_WriteByte>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800ce8e:	787b      	ldrb	r3, [r7, #1]
 800ce90:	005b      	lsls	r3, r3, #1
 800ce92:	b25b      	sxtb	r3, r3
 800ce94:	f043 0319 	orr.w	r3, r3, #25
 800ce98:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	78f9      	ldrb	r1, [r7, #3]
 800ce9e:	2214      	movs	r2, #20
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7ff ff6f 	bl	800cd84 <_ICM20948_WriteByte>
 800cea6:	4603      	mov	r3, r0
 800cea8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800ceaa:	78f9      	ldrb	r1, [r7, #3]
 800ceac:	2304      	movs	r3, #4
 800ceae:	2211      	movs	r2, #17
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7ff ff67 	bl	800cd84 <_ICM20948_WriteByte>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800ceba:	78fb      	ldrb	r3, [r7, #3]
 800cebc:	2200      	movs	r2, #0
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff ff33 	bl	800cd2c <_ICM20948_SelectUserBank>
 800cec6:	4603      	mov	r3, r0
 800cec8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800ceca:	78f9      	ldrb	r1, [r7, #3]
 800cecc:	2302      	movs	r3, #2
 800cece:	220f      	movs	r2, #15
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f7ff ff57 	bl	800cd84 <_ICM20948_WriteByte>
 800ced6:	4603      	mov	r3, r0
 800ced8:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800ceda:	2208      	movs	r2, #8
 800cedc:	2131      	movs	r1, #49	; 0x31
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 f806 	bl	800cef0 <_AK09918_WriteByte>
 800cee4:	4603      	mov	r3, r0
 800cee6:	73fb      	strb	r3, [r7, #15]
}
 800cee8:	bf00      	nop
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af04      	add	r7, sp, #16
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
 800cefc:	4613      	mov	r3, r2
 800cefe:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800cf00:	2300      	movs	r3, #0
 800cf02:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800cf04:	78fb      	ldrb	r3, [r7, #3]
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	230a      	movs	r3, #10
 800cf0a:	9302      	str	r3, [sp, #8]
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	9301      	str	r3, [sp, #4]
 800cf10:	1cbb      	adds	r3, r7, #2
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	2301      	movs	r3, #1
 800cf16:	2118      	movs	r1, #24
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7f8 ff75 	bl	8005e08 <HAL_I2C_Mem_Write>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800cf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800cf32:	2300      	movs	r3, #0
 800cf34:	71fb      	strb	r3, [r7, #7]
 800cf36:	e026      	b.n	800cf86 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	3b50      	subs	r3, #80	; 0x50
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2100      	movs	r1, #0
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 f82b 	bl	800cf9c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800cf46:	2100      	movs	r1, #0
 800cf48:	2000      	movs	r0, #0
 800cf4a:	f000 f827 	bl	800cf9c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800cf4e:	2100      	movs	r1, #0
 800cf50:	2010      	movs	r0, #16
 800cf52:	f000 f823 	bl	800cf9c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800cf56:	2300      	movs	r3, #0
 800cf58:	71bb      	strb	r3, [r7, #6]
 800cf5a:	e00d      	b.n	800cf78 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800cf5c:	79ba      	ldrb	r2, [r7, #6]
 800cf5e:	79fb      	ldrb	r3, [r7, #7]
 800cf60:	490d      	ldr	r1, [pc, #52]	; (800cf98 <OLED_Refresh_Gram+0x6c>)
 800cf62:	00d2      	lsls	r2, r2, #3
 800cf64:	440a      	add	r2, r1
 800cf66:	4413      	add	r3, r2
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 f815 	bl	800cf9c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800cf72:	79bb      	ldrb	r3, [r7, #6]
 800cf74:	3301      	adds	r3, #1
 800cf76:	71bb      	strb	r3, [r7, #6]
 800cf78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	daed      	bge.n	800cf5c <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800cf80:	79fb      	ldrb	r3, [r7, #7]
 800cf82:	3301      	adds	r3, #1
 800cf84:	71fb      	strb	r3, [r7, #7]
 800cf86:	79fb      	ldrb	r3, [r7, #7]
 800cf88:	2b07      	cmp	r3, #7
 800cf8a:	d9d5      	bls.n	800cf38 <OLED_Refresh_Gram+0xc>
	}
}
 800cf8c:	bf00      	nop
 800cf8e:	bf00      	nop
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20004e58 	.word	0x20004e58

0800cf9c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	460a      	mov	r2, r1
 800cfa6:	71fb      	strb	r3, [r7, #7]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800cfac:	79bb      	ldrb	r3, [r7, #6]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d006      	beq.n	800cfc0 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfb8:	481c      	ldr	r0, [pc, #112]	; (800d02c <OLED_WR_Byte+0x90>)
 800cfba:	f7f8 fdc7 	bl	8005b4c <HAL_GPIO_WritePin>
 800cfbe:	e005      	b.n	800cfcc <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfc6:	4819      	ldr	r0, [pc, #100]	; (800d02c <OLED_WR_Byte+0x90>)
 800cfc8:	f7f8 fdc0 	bl	8005b4c <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800cfcc:	2300      	movs	r3, #0
 800cfce:	73fb      	strb	r3, [r7, #15]
 800cfd0:	e01e      	b.n	800d010 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	2120      	movs	r1, #32
 800cfd6:	4815      	ldr	r0, [pc, #84]	; (800d02c <OLED_WR_Byte+0x90>)
 800cfd8:	f7f8 fdb8 	bl	8005b4c <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800cfdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	da05      	bge.n	800cff0 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	2140      	movs	r1, #64	; 0x40
 800cfe8:	4810      	ldr	r0, [pc, #64]	; (800d02c <OLED_WR_Byte+0x90>)
 800cfea:	f7f8 fdaf 	bl	8005b4c <HAL_GPIO_WritePin>
 800cfee:	e004      	b.n	800cffa <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800cff0:	2200      	movs	r2, #0
 800cff2:	2140      	movs	r1, #64	; 0x40
 800cff4:	480d      	ldr	r0, [pc, #52]	; (800d02c <OLED_WR_Byte+0x90>)
 800cff6:	f7f8 fda9 	bl	8005b4c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800cffa:	2201      	movs	r2, #1
 800cffc:	2120      	movs	r1, #32
 800cffe:	480b      	ldr	r0, [pc, #44]	; (800d02c <OLED_WR_Byte+0x90>)
 800d000:	f7f8 fda4 	bl	8005b4c <HAL_GPIO_WritePin>
		dat <<= 1;
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
 800d00c:	3301      	adds	r3, #1
 800d00e:	73fb      	strb	r3, [r7, #15]
 800d010:	7bfb      	ldrb	r3, [r7, #15]
 800d012:	2b07      	cmp	r3, #7
 800d014:	d9dd      	bls.n	800cfd2 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800d016:	2201      	movs	r2, #1
 800d018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d01c:	4803      	ldr	r0, [pc, #12]	; (800d02c <OLED_WR_Byte+0x90>)
 800d01e:	f7f8 fd95 	bl	8005b4c <HAL_GPIO_WritePin>
}
 800d022:	bf00      	nop
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	40021000 	.word	0x40021000

0800d030 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800d036:	2300      	movs	r3, #0
 800d038:	71fb      	strb	r3, [r7, #7]
 800d03a:	e014      	b.n	800d066 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800d03c:	2300      	movs	r3, #0
 800d03e:	71bb      	strb	r3, [r7, #6]
 800d040:	e00a      	b.n	800d058 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800d042:	79ba      	ldrb	r2, [r7, #6]
 800d044:	79fb      	ldrb	r3, [r7, #7]
 800d046:	490c      	ldr	r1, [pc, #48]	; (800d078 <OLED_Clear+0x48>)
 800d048:	00d2      	lsls	r2, r2, #3
 800d04a:	440a      	add	r2, r1
 800d04c:	4413      	add	r3, r2
 800d04e:	2200      	movs	r2, #0
 800d050:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800d052:	79bb      	ldrb	r3, [r7, #6]
 800d054:	3301      	adds	r3, #1
 800d056:	71bb      	strb	r3, [r7, #6]
 800d058:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	daf0      	bge.n	800d042 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800d060:	79fb      	ldrb	r3, [r7, #7]
 800d062:	3301      	adds	r3, #1
 800d064:	71fb      	strb	r3, [r7, #7]
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	2b07      	cmp	r3, #7
 800d06a:	d9e7      	bls.n	800d03c <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800d06c:	f7ff ff5e 	bl	800cf2c <OLED_Refresh_Gram>
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	20004e58 	.word	0x20004e58

0800d07c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	4603      	mov	r3, r0
 800d084:	71fb      	strb	r3, [r7, #7]
 800d086:	460b      	mov	r3, r1
 800d088:	71bb      	strb	r3, [r7, #6]
 800d08a:	4613      	mov	r3, r2
 800d08c:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800d08e:	2300      	movs	r3, #0
 800d090:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800d092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d096:	2b00      	cmp	r3, #0
 800d098:	db41      	blt.n	800d11e <OLED_DrawPoint+0xa2>
 800d09a:	79bb      	ldrb	r3, [r7, #6]
 800d09c:	2b3f      	cmp	r3, #63	; 0x3f
 800d09e:	d83e      	bhi.n	800d11e <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800d0a0:	79bb      	ldrb	r3, [r7, #6]
 800d0a2:	08db      	lsrs	r3, r3, #3
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	f1c3 0307 	rsb	r3, r3, #7
 800d0aa:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800d0ac:	79bb      	ldrb	r3, [r7, #6]
 800d0ae:	f003 0307 	and.w	r3, r3, #7
 800d0b2:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800d0b4:	7b7b      	ldrb	r3, [r7, #13]
 800d0b6:	f1c3 0307 	rsb	r3, r3, #7
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c0:	73fb      	strb	r3, [r7, #15]
	if (t)
 800d0c2:	797b      	ldrb	r3, [r7, #5]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d012      	beq.n	800d0ee <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800d0c8:	79fa      	ldrb	r2, [r7, #7]
 800d0ca:	7bbb      	ldrb	r3, [r7, #14]
 800d0cc:	4917      	ldr	r1, [pc, #92]	; (800d12c <OLED_DrawPoint+0xb0>)
 800d0ce:	00d2      	lsls	r2, r2, #3
 800d0d0:	440a      	add	r2, r1
 800d0d2:	4413      	add	r3, r2
 800d0d4:	7818      	ldrb	r0, [r3, #0]
 800d0d6:	79fa      	ldrb	r2, [r7, #7]
 800d0d8:	7bbb      	ldrb	r3, [r7, #14]
 800d0da:	7bf9      	ldrb	r1, [r7, #15]
 800d0dc:	4301      	orrs	r1, r0
 800d0de:	b2c8      	uxtb	r0, r1
 800d0e0:	4912      	ldr	r1, [pc, #72]	; (800d12c <OLED_DrawPoint+0xb0>)
 800d0e2:	00d2      	lsls	r2, r2, #3
 800d0e4:	440a      	add	r2, r1
 800d0e6:	4413      	add	r3, r2
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	701a      	strb	r2, [r3, #0]
 800d0ec:	e018      	b.n	800d120 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800d0ee:	79fa      	ldrb	r2, [r7, #7]
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
 800d0f2:	490e      	ldr	r1, [pc, #56]	; (800d12c <OLED_DrawPoint+0xb0>)
 800d0f4:	00d2      	lsls	r2, r2, #3
 800d0f6:	440a      	add	r2, r1
 800d0f8:	4413      	add	r3, r2
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	b25a      	sxtb	r2, r3
 800d0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d102:	43db      	mvns	r3, r3
 800d104:	b25b      	sxtb	r3, r3
 800d106:	4013      	ands	r3, r2
 800d108:	b259      	sxtb	r1, r3
 800d10a:	79fa      	ldrb	r2, [r7, #7]
 800d10c:	7bbb      	ldrb	r3, [r7, #14]
 800d10e:	b2c8      	uxtb	r0, r1
 800d110:	4906      	ldr	r1, [pc, #24]	; (800d12c <OLED_DrawPoint+0xb0>)
 800d112:	00d2      	lsls	r2, r2, #3
 800d114:	440a      	add	r2, r1
 800d116:	4413      	add	r3, r2
 800d118:	4602      	mov	r2, r0
 800d11a:	701a      	strb	r2, [r3, #0]
 800d11c:	e000      	b.n	800d120 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800d11e:	bf00      	nop
}
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	20004e58 	.word	0x20004e58

0800d130 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800d130:	b590      	push	{r4, r7, lr}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	4604      	mov	r4, r0
 800d138:	4608      	mov	r0, r1
 800d13a:	4611      	mov	r1, r2
 800d13c:	461a      	mov	r2, r3
 800d13e:	4623      	mov	r3, r4
 800d140:	71fb      	strb	r3, [r7, #7]
 800d142:	4603      	mov	r3, r0
 800d144:	71bb      	strb	r3, [r7, #6]
 800d146:	460b      	mov	r3, r1
 800d148:	717b      	strb	r3, [r7, #5]
 800d14a:	4613      	mov	r3, r2
 800d14c:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800d14e:	79bb      	ldrb	r3, [r7, #6]
 800d150:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800d152:	797b      	ldrb	r3, [r7, #5]
 800d154:	3b20      	subs	r3, #32
 800d156:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800d158:	2300      	movs	r3, #0
 800d15a:	73bb      	strb	r3, [r7, #14]
 800d15c:	e04d      	b.n	800d1fa <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800d15e:	793b      	ldrb	r3, [r7, #4]
 800d160:	2b0c      	cmp	r3, #12
 800d162:	d10b      	bne.n	800d17c <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800d164:	797a      	ldrb	r2, [r7, #5]
 800d166:	7bb9      	ldrb	r1, [r7, #14]
 800d168:	4828      	ldr	r0, [pc, #160]	; (800d20c <OLED_ShowChar+0xdc>)
 800d16a:	4613      	mov	r3, r2
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	4413      	add	r3, r2
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	4403      	add	r3, r0
 800d174:	440b      	add	r3, r1
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	73fb      	strb	r3, [r7, #15]
 800d17a:	e007      	b.n	800d18c <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800d17c:	797a      	ldrb	r2, [r7, #5]
 800d17e:	7bbb      	ldrb	r3, [r7, #14]
 800d180:	4923      	ldr	r1, [pc, #140]	; (800d210 <OLED_ShowChar+0xe0>)
 800d182:	0112      	lsls	r2, r2, #4
 800d184:	440a      	add	r2, r1
 800d186:	4413      	add	r3, r2
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800d18c:	2300      	movs	r3, #0
 800d18e:	737b      	strb	r3, [r7, #13]
 800d190:	e02d      	b.n	800d1ee <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800d192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d196:	2b00      	cmp	r3, #0
 800d198:	da07      	bge.n	800d1aa <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800d19a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d19e:	79b9      	ldrb	r1, [r7, #6]
 800d1a0:	79fb      	ldrb	r3, [r7, #7]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff ff6a 	bl	800d07c <OLED_DrawPoint>
 800d1a8:	e00c      	b.n	800d1c4 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800d1aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bf0c      	ite	eq
 800d1b2:	2301      	moveq	r3, #1
 800d1b4:	2300      	movne	r3, #0
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	79b9      	ldrb	r1, [r7, #6]
 800d1bc:	79fb      	ldrb	r3, [r7, #7]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7ff ff5c 	bl	800d07c <OLED_DrawPoint>
			temp <<= 1;
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	73fb      	strb	r3, [r7, #15]
			y++;
 800d1ca:	79bb      	ldrb	r3, [r7, #6]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800d1d0:	79ba      	ldrb	r2, [r7, #6]
 800d1d2:	7b3b      	ldrb	r3, [r7, #12]
 800d1d4:	1ad2      	subs	r2, r2, r3
 800d1d6:	793b      	ldrb	r3, [r7, #4]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d105      	bne.n	800d1e8 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800d1dc:	7b3b      	ldrb	r3, [r7, #12]
 800d1de:	71bb      	strb	r3, [r7, #6]
				x++;
 800d1e0:	79fb      	ldrb	r3, [r7, #7]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	71fb      	strb	r3, [r7, #7]
				break;
 800d1e6:	e005      	b.n	800d1f4 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800d1e8:	7b7b      	ldrb	r3, [r7, #13]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	737b      	strb	r3, [r7, #13]
 800d1ee:	7b7b      	ldrb	r3, [r7, #13]
 800d1f0:	2b07      	cmp	r3, #7
 800d1f2:	d9ce      	bls.n	800d192 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800d1f4:	7bbb      	ldrb	r3, [r7, #14]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	73bb      	strb	r3, [r7, #14]
 800d1fa:	7bba      	ldrb	r2, [r7, #14]
 800d1fc:	793b      	ldrb	r3, [r7, #4]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d3ad      	bcc.n	800d15e <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800d202:	bf00      	nop
 800d204:	bf00      	nop
 800d206:	3714      	adds	r7, #20
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd90      	pop	{r4, r7, pc}
 800d20c:	0800df88 	.word	0x0800df88
 800d210:	0800e3fc 	.word	0x0800e3fc

0800d214 <OLED_ShowString>:
}
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af02      	add	r7, sp, #8
 800d21a:	4603      	mov	r3, r0
 800d21c:	603a      	str	r2, [r7, #0]
 800d21e:	71fb      	strb	r3, [r7, #7]
 800d220:	460b      	mov	r3, r1
 800d222:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800d224:	e01f      	b.n	800d266 <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800d226:	79fb      	ldrb	r3, [r7, #7]
 800d228:	2b7a      	cmp	r3, #122	; 0x7a
 800d22a:	d904      	bls.n	800d236 <OLED_ShowString+0x22>
		{
			x = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800d230:	79bb      	ldrb	r3, [r7, #6]
 800d232:	3310      	adds	r3, #16
 800d234:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800d236:	79bb      	ldrb	r3, [r7, #6]
 800d238:	2b3a      	cmp	r3, #58	; 0x3a
 800d23a:	d905      	bls.n	800d248 <OLED_ShowString+0x34>
		{
			y = x = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	71fb      	strb	r3, [r7, #7]
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800d244:	f7ff fef4 	bl	800d030 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	781a      	ldrb	r2, [r3, #0]
 800d24c:	79b9      	ldrb	r1, [r7, #6]
 800d24e:	79f8      	ldrb	r0, [r7, #7]
 800d250:	2301      	movs	r3, #1
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	230c      	movs	r3, #12
 800d256:	f7ff ff6b 	bl	800d130 <OLED_ShowChar>
		x += 8;
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	3308      	adds	r3, #8
 800d25e:	71fb      	strb	r3, [r7, #7]
		p++;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	3301      	adds	r3, #1
 800d264:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1db      	bne.n	800d226 <OLED_ShowString+0x12>
	}
}
 800d26e:	bf00      	nop
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800d27c:	f7f9 fc40 	bl	8006b00 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800d280:	4b41      	ldr	r3, [pc, #260]	; (800d388 <OLED_Init+0x110>)
 800d282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d284:	4a40      	ldr	r2, [pc, #256]	; (800d388 <OLED_Init+0x110>)
 800d286:	f023 0301 	bic.w	r3, r3, #1
 800d28a:	6713      	str	r3, [r2, #112]	; 0x70
 800d28c:	4b3e      	ldr	r3, [pc, #248]	; (800d388 <OLED_Init+0x110>)
 800d28e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d290:	4a3d      	ldr	r2, [pc, #244]	; (800d388 <OLED_Init+0x110>)
 800d292:	f023 0304 	bic.w	r3, r3, #4
 800d296:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800d298:	f7f9 fc46 	bl	8006b28 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800d29c:	2200      	movs	r2, #0
 800d29e:	2180      	movs	r1, #128	; 0x80
 800d2a0:	483a      	ldr	r0, [pc, #232]	; (800d38c <OLED_Init+0x114>)
 800d2a2:	f7f8 fc53 	bl	8005b4c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800d2a6:	2064      	movs	r0, #100	; 0x64
 800d2a8:	f7f8 f91c 	bl	80054e4 <HAL_Delay>
	OLED_RST_Set();
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	2180      	movs	r1, #128	; 0x80
 800d2b0:	4836      	ldr	r0, [pc, #216]	; (800d38c <OLED_Init+0x114>)
 800d2b2:	f7f8 fc4b 	bl	8005b4c <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	20ae      	movs	r0, #174	; 0xae
 800d2ba:	f7ff fe6f 	bl	800cf9c <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800d2be:	2100      	movs	r1, #0
 800d2c0:	20d5      	movs	r0, #213	; 0xd5
 800d2c2:	f7ff fe6b 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	2050      	movs	r0, #80	; 0x50
 800d2ca:	f7ff fe67 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	20a8      	movs	r0, #168	; 0xa8
 800d2d2:	f7ff fe63 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	203f      	movs	r0, #63	; 0x3f
 800d2da:	f7ff fe5f 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800d2de:	2100      	movs	r1, #0
 800d2e0:	20d3      	movs	r0, #211	; 0xd3
 800d2e2:	f7ff fe5b 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f7ff fe57 	bl	800cf9c <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	2040      	movs	r0, #64	; 0x40
 800d2f2:	f7ff fe53 	bl	800cf9c <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800d2f6:	2100      	movs	r1, #0
 800d2f8:	208d      	movs	r0, #141	; 0x8d
 800d2fa:	f7ff fe4f 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800d2fe:	2100      	movs	r1, #0
 800d300:	2014      	movs	r0, #20
 800d302:	f7ff fe4b 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800d306:	2100      	movs	r1, #0
 800d308:	2020      	movs	r0, #32
 800d30a:	f7ff fe47 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800d30e:	2100      	movs	r1, #0
 800d310:	2002      	movs	r0, #2
 800d312:	f7ff fe43 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800d316:	2100      	movs	r1, #0
 800d318:	20a1      	movs	r0, #161	; 0xa1
 800d31a:	f7ff fe3f 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800d31e:	2100      	movs	r1, #0
 800d320:	20c0      	movs	r0, #192	; 0xc0
 800d322:	f7ff fe3b 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800d326:	2100      	movs	r1, #0
 800d328:	20da      	movs	r0, #218	; 0xda
 800d32a:	f7ff fe37 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800d32e:	2100      	movs	r1, #0
 800d330:	2012      	movs	r0, #18
 800d332:	f7ff fe33 	bl	800cf9c <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800d336:	2100      	movs	r1, #0
 800d338:	2081      	movs	r0, #129	; 0x81
 800d33a:	f7ff fe2f 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800d33e:	2100      	movs	r1, #0
 800d340:	20ef      	movs	r0, #239	; 0xef
 800d342:	f7ff fe2b 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800d346:	2100      	movs	r1, #0
 800d348:	20d9      	movs	r0, #217	; 0xd9
 800d34a:	f7ff fe27 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800d34e:	2100      	movs	r1, #0
 800d350:	20f1      	movs	r0, #241	; 0xf1
 800d352:	f7ff fe23 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800d356:	2100      	movs	r1, #0
 800d358:	20db      	movs	r0, #219	; 0xdb
 800d35a:	f7ff fe1f 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800d35e:	2100      	movs	r1, #0
 800d360:	2030      	movs	r0, #48	; 0x30
 800d362:	f7ff fe1b 	bl	800cf9c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800d366:	2100      	movs	r1, #0
 800d368:	20a4      	movs	r0, #164	; 0xa4
 800d36a:	f7ff fe17 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800d36e:	2100      	movs	r1, #0
 800d370:	20a6      	movs	r0, #166	; 0xa6
 800d372:	f7ff fe13 	bl	800cf9c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800d376:	2100      	movs	r1, #0
 800d378:	20af      	movs	r0, #175	; 0xaf
 800d37a:	f7ff fe0f 	bl	800cf9c <OLED_WR_Byte>
	OLED_Clear();
 800d37e:	f7ff fe57 	bl	800d030 <OLED_Clear>
 800d382:	bf00      	nop
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	40023800 	.word	0x40023800
 800d38c:	40021000 	.word	0x40021000

0800d390 <sniprintf>:
 800d390:	b40c      	push	{r2, r3}
 800d392:	b530      	push	{r4, r5, lr}
 800d394:	4b17      	ldr	r3, [pc, #92]	; (800d3f4 <sniprintf+0x64>)
 800d396:	1e0c      	subs	r4, r1, #0
 800d398:	681d      	ldr	r5, [r3, #0]
 800d39a:	b09d      	sub	sp, #116	; 0x74
 800d39c:	da08      	bge.n	800d3b0 <sniprintf+0x20>
 800d39e:	238b      	movs	r3, #139	; 0x8b
 800d3a0:	602b      	str	r3, [r5, #0]
 800d3a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3a6:	b01d      	add	sp, #116	; 0x74
 800d3a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3ac:	b002      	add	sp, #8
 800d3ae:	4770      	bx	lr
 800d3b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d3b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d3b8:	bf14      	ite	ne
 800d3ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d3be:	4623      	moveq	r3, r4
 800d3c0:	9304      	str	r3, [sp, #16]
 800d3c2:	9307      	str	r3, [sp, #28]
 800d3c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3c8:	9002      	str	r0, [sp, #8]
 800d3ca:	9006      	str	r0, [sp, #24]
 800d3cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d3d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d3d2:	ab21      	add	r3, sp, #132	; 0x84
 800d3d4:	a902      	add	r1, sp, #8
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	f000 f8a9 	bl	800d530 <_svfiprintf_r>
 800d3de:	1c43      	adds	r3, r0, #1
 800d3e0:	bfbc      	itt	lt
 800d3e2:	238b      	movlt	r3, #139	; 0x8b
 800d3e4:	602b      	strlt	r3, [r5, #0]
 800d3e6:	2c00      	cmp	r4, #0
 800d3e8:	d0dd      	beq.n	800d3a6 <sniprintf+0x16>
 800d3ea:	9b02      	ldr	r3, [sp, #8]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	701a      	strb	r2, [r3, #0]
 800d3f0:	e7d9      	b.n	800d3a6 <sniprintf+0x16>
 800d3f2:	bf00      	nop
 800d3f4:	2000019c 	.word	0x2000019c

0800d3f8 <memset>:
 800d3f8:	4402      	add	r2, r0
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d100      	bne.n	800d402 <memset+0xa>
 800d400:	4770      	bx	lr
 800d402:	f803 1b01 	strb.w	r1, [r3], #1
 800d406:	e7f9      	b.n	800d3fc <memset+0x4>

0800d408 <__errno>:
 800d408:	4b01      	ldr	r3, [pc, #4]	; (800d410 <__errno+0x8>)
 800d40a:	6818      	ldr	r0, [r3, #0]
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	2000019c 	.word	0x2000019c

0800d414 <__libc_init_array>:
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	4d0d      	ldr	r5, [pc, #52]	; (800d44c <__libc_init_array+0x38>)
 800d418:	4c0d      	ldr	r4, [pc, #52]	; (800d450 <__libc_init_array+0x3c>)
 800d41a:	1b64      	subs	r4, r4, r5
 800d41c:	10a4      	asrs	r4, r4, #2
 800d41e:	2600      	movs	r6, #0
 800d420:	42a6      	cmp	r6, r4
 800d422:	d109      	bne.n	800d438 <__libc_init_array+0x24>
 800d424:	4d0b      	ldr	r5, [pc, #44]	; (800d454 <__libc_init_array+0x40>)
 800d426:	4c0c      	ldr	r4, [pc, #48]	; (800d458 <__libc_init_array+0x44>)
 800d428:	f000 fc6a 	bl	800dd00 <_init>
 800d42c:	1b64      	subs	r4, r4, r5
 800d42e:	10a4      	asrs	r4, r4, #2
 800d430:	2600      	movs	r6, #0
 800d432:	42a6      	cmp	r6, r4
 800d434:	d105      	bne.n	800d442 <__libc_init_array+0x2e>
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	f855 3b04 	ldr.w	r3, [r5], #4
 800d43c:	4798      	blx	r3
 800d43e:	3601      	adds	r6, #1
 800d440:	e7ee      	b.n	800d420 <__libc_init_array+0xc>
 800d442:	f855 3b04 	ldr.w	r3, [r5], #4
 800d446:	4798      	blx	r3
 800d448:	3601      	adds	r6, #1
 800d44a:	e7f2      	b.n	800d432 <__libc_init_array+0x1e>
 800d44c:	0800ea28 	.word	0x0800ea28
 800d450:	0800ea28 	.word	0x0800ea28
 800d454:	0800ea28 	.word	0x0800ea28
 800d458:	0800ea2c 	.word	0x0800ea2c

0800d45c <__retarget_lock_acquire_recursive>:
 800d45c:	4770      	bx	lr

0800d45e <__retarget_lock_release_recursive>:
 800d45e:	4770      	bx	lr

0800d460 <memcpy>:
 800d460:	440a      	add	r2, r1
 800d462:	4291      	cmp	r1, r2
 800d464:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d468:	d100      	bne.n	800d46c <memcpy+0xc>
 800d46a:	4770      	bx	lr
 800d46c:	b510      	push	{r4, lr}
 800d46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d472:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d476:	4291      	cmp	r1, r2
 800d478:	d1f9      	bne.n	800d46e <memcpy+0xe>
 800d47a:	bd10      	pop	{r4, pc}

0800d47c <__ssputs_r>:
 800d47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d480:	688e      	ldr	r6, [r1, #8]
 800d482:	461f      	mov	r7, r3
 800d484:	42be      	cmp	r6, r7
 800d486:	680b      	ldr	r3, [r1, #0]
 800d488:	4682      	mov	sl, r0
 800d48a:	460c      	mov	r4, r1
 800d48c:	4690      	mov	r8, r2
 800d48e:	d82c      	bhi.n	800d4ea <__ssputs_r+0x6e>
 800d490:	898a      	ldrh	r2, [r1, #12]
 800d492:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d496:	d026      	beq.n	800d4e6 <__ssputs_r+0x6a>
 800d498:	6965      	ldr	r5, [r4, #20]
 800d49a:	6909      	ldr	r1, [r1, #16]
 800d49c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4a0:	eba3 0901 	sub.w	r9, r3, r1
 800d4a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4a8:	1c7b      	adds	r3, r7, #1
 800d4aa:	444b      	add	r3, r9
 800d4ac:	106d      	asrs	r5, r5, #1
 800d4ae:	429d      	cmp	r5, r3
 800d4b0:	bf38      	it	cc
 800d4b2:	461d      	movcc	r5, r3
 800d4b4:	0553      	lsls	r3, r2, #21
 800d4b6:	d527      	bpl.n	800d508 <__ssputs_r+0x8c>
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	f000 f957 	bl	800d76c <_malloc_r>
 800d4be:	4606      	mov	r6, r0
 800d4c0:	b360      	cbz	r0, 800d51c <__ssputs_r+0xa0>
 800d4c2:	6921      	ldr	r1, [r4, #16]
 800d4c4:	464a      	mov	r2, r9
 800d4c6:	f7ff ffcb 	bl	800d460 <memcpy>
 800d4ca:	89a3      	ldrh	r3, [r4, #12]
 800d4cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d4:	81a3      	strh	r3, [r4, #12]
 800d4d6:	6126      	str	r6, [r4, #16]
 800d4d8:	6165      	str	r5, [r4, #20]
 800d4da:	444e      	add	r6, r9
 800d4dc:	eba5 0509 	sub.w	r5, r5, r9
 800d4e0:	6026      	str	r6, [r4, #0]
 800d4e2:	60a5      	str	r5, [r4, #8]
 800d4e4:	463e      	mov	r6, r7
 800d4e6:	42be      	cmp	r6, r7
 800d4e8:	d900      	bls.n	800d4ec <__ssputs_r+0x70>
 800d4ea:	463e      	mov	r6, r7
 800d4ec:	6820      	ldr	r0, [r4, #0]
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	4641      	mov	r1, r8
 800d4f2:	f000 fb86 	bl	800dc02 <memmove>
 800d4f6:	68a3      	ldr	r3, [r4, #8]
 800d4f8:	1b9b      	subs	r3, r3, r6
 800d4fa:	60a3      	str	r3, [r4, #8]
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	4433      	add	r3, r6
 800d500:	6023      	str	r3, [r4, #0]
 800d502:	2000      	movs	r0, #0
 800d504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d508:	462a      	mov	r2, r5
 800d50a:	f000 fb4b 	bl	800dba4 <_realloc_r>
 800d50e:	4606      	mov	r6, r0
 800d510:	2800      	cmp	r0, #0
 800d512:	d1e0      	bne.n	800d4d6 <__ssputs_r+0x5a>
 800d514:	6921      	ldr	r1, [r4, #16]
 800d516:	4650      	mov	r0, sl
 800d518:	f000 fb9e 	bl	800dc58 <_free_r>
 800d51c:	230c      	movs	r3, #12
 800d51e:	f8ca 3000 	str.w	r3, [sl]
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d528:	81a3      	strh	r3, [r4, #12]
 800d52a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d52e:	e7e9      	b.n	800d504 <__ssputs_r+0x88>

0800d530 <_svfiprintf_r>:
 800d530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	4698      	mov	r8, r3
 800d536:	898b      	ldrh	r3, [r1, #12]
 800d538:	061b      	lsls	r3, r3, #24
 800d53a:	b09d      	sub	sp, #116	; 0x74
 800d53c:	4607      	mov	r7, r0
 800d53e:	460d      	mov	r5, r1
 800d540:	4614      	mov	r4, r2
 800d542:	d50e      	bpl.n	800d562 <_svfiprintf_r+0x32>
 800d544:	690b      	ldr	r3, [r1, #16]
 800d546:	b963      	cbnz	r3, 800d562 <_svfiprintf_r+0x32>
 800d548:	2140      	movs	r1, #64	; 0x40
 800d54a:	f000 f90f 	bl	800d76c <_malloc_r>
 800d54e:	6028      	str	r0, [r5, #0]
 800d550:	6128      	str	r0, [r5, #16]
 800d552:	b920      	cbnz	r0, 800d55e <_svfiprintf_r+0x2e>
 800d554:	230c      	movs	r3, #12
 800d556:	603b      	str	r3, [r7, #0]
 800d558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d55c:	e0d0      	b.n	800d700 <_svfiprintf_r+0x1d0>
 800d55e:	2340      	movs	r3, #64	; 0x40
 800d560:	616b      	str	r3, [r5, #20]
 800d562:	2300      	movs	r3, #0
 800d564:	9309      	str	r3, [sp, #36]	; 0x24
 800d566:	2320      	movs	r3, #32
 800d568:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d56c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d570:	2330      	movs	r3, #48	; 0x30
 800d572:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d718 <_svfiprintf_r+0x1e8>
 800d576:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d57a:	f04f 0901 	mov.w	r9, #1
 800d57e:	4623      	mov	r3, r4
 800d580:	469a      	mov	sl, r3
 800d582:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d586:	b10a      	cbz	r2, 800d58c <_svfiprintf_r+0x5c>
 800d588:	2a25      	cmp	r2, #37	; 0x25
 800d58a:	d1f9      	bne.n	800d580 <_svfiprintf_r+0x50>
 800d58c:	ebba 0b04 	subs.w	fp, sl, r4
 800d590:	d00b      	beq.n	800d5aa <_svfiprintf_r+0x7a>
 800d592:	465b      	mov	r3, fp
 800d594:	4622      	mov	r2, r4
 800d596:	4629      	mov	r1, r5
 800d598:	4638      	mov	r0, r7
 800d59a:	f7ff ff6f 	bl	800d47c <__ssputs_r>
 800d59e:	3001      	adds	r0, #1
 800d5a0:	f000 80a9 	beq.w	800d6f6 <_svfiprintf_r+0x1c6>
 800d5a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5a6:	445a      	add	r2, fp
 800d5a8:	9209      	str	r2, [sp, #36]	; 0x24
 800d5aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 80a1 	beq.w	800d6f6 <_svfiprintf_r+0x1c6>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5be:	f10a 0a01 	add.w	sl, sl, #1
 800d5c2:	9304      	str	r3, [sp, #16]
 800d5c4:	9307      	str	r3, [sp, #28]
 800d5c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5ca:	931a      	str	r3, [sp, #104]	; 0x68
 800d5cc:	4654      	mov	r4, sl
 800d5ce:	2205      	movs	r2, #5
 800d5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5d4:	4850      	ldr	r0, [pc, #320]	; (800d718 <_svfiprintf_r+0x1e8>)
 800d5d6:	f7f2 fdfb 	bl	80001d0 <memchr>
 800d5da:	9a04      	ldr	r2, [sp, #16]
 800d5dc:	b9d8      	cbnz	r0, 800d616 <_svfiprintf_r+0xe6>
 800d5de:	06d0      	lsls	r0, r2, #27
 800d5e0:	bf44      	itt	mi
 800d5e2:	2320      	movmi	r3, #32
 800d5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5e8:	0711      	lsls	r1, r2, #28
 800d5ea:	bf44      	itt	mi
 800d5ec:	232b      	movmi	r3, #43	; 0x2b
 800d5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d5f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d5f8:	d015      	beq.n	800d626 <_svfiprintf_r+0xf6>
 800d5fa:	9a07      	ldr	r2, [sp, #28]
 800d5fc:	4654      	mov	r4, sl
 800d5fe:	2000      	movs	r0, #0
 800d600:	f04f 0c0a 	mov.w	ip, #10
 800d604:	4621      	mov	r1, r4
 800d606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d60a:	3b30      	subs	r3, #48	; 0x30
 800d60c:	2b09      	cmp	r3, #9
 800d60e:	d94d      	bls.n	800d6ac <_svfiprintf_r+0x17c>
 800d610:	b1b0      	cbz	r0, 800d640 <_svfiprintf_r+0x110>
 800d612:	9207      	str	r2, [sp, #28]
 800d614:	e014      	b.n	800d640 <_svfiprintf_r+0x110>
 800d616:	eba0 0308 	sub.w	r3, r0, r8
 800d61a:	fa09 f303 	lsl.w	r3, r9, r3
 800d61e:	4313      	orrs	r3, r2
 800d620:	9304      	str	r3, [sp, #16]
 800d622:	46a2      	mov	sl, r4
 800d624:	e7d2      	b.n	800d5cc <_svfiprintf_r+0x9c>
 800d626:	9b03      	ldr	r3, [sp, #12]
 800d628:	1d19      	adds	r1, r3, #4
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	9103      	str	r1, [sp, #12]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	bfbb      	ittet	lt
 800d632:	425b      	neglt	r3, r3
 800d634:	f042 0202 	orrlt.w	r2, r2, #2
 800d638:	9307      	strge	r3, [sp, #28]
 800d63a:	9307      	strlt	r3, [sp, #28]
 800d63c:	bfb8      	it	lt
 800d63e:	9204      	strlt	r2, [sp, #16]
 800d640:	7823      	ldrb	r3, [r4, #0]
 800d642:	2b2e      	cmp	r3, #46	; 0x2e
 800d644:	d10c      	bne.n	800d660 <_svfiprintf_r+0x130>
 800d646:	7863      	ldrb	r3, [r4, #1]
 800d648:	2b2a      	cmp	r3, #42	; 0x2a
 800d64a:	d134      	bne.n	800d6b6 <_svfiprintf_r+0x186>
 800d64c:	9b03      	ldr	r3, [sp, #12]
 800d64e:	1d1a      	adds	r2, r3, #4
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	9203      	str	r2, [sp, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	bfb8      	it	lt
 800d658:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d65c:	3402      	adds	r4, #2
 800d65e:	9305      	str	r3, [sp, #20]
 800d660:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d728 <_svfiprintf_r+0x1f8>
 800d664:	7821      	ldrb	r1, [r4, #0]
 800d666:	2203      	movs	r2, #3
 800d668:	4650      	mov	r0, sl
 800d66a:	f7f2 fdb1 	bl	80001d0 <memchr>
 800d66e:	b138      	cbz	r0, 800d680 <_svfiprintf_r+0x150>
 800d670:	9b04      	ldr	r3, [sp, #16]
 800d672:	eba0 000a 	sub.w	r0, r0, sl
 800d676:	2240      	movs	r2, #64	; 0x40
 800d678:	4082      	lsls	r2, r0
 800d67a:	4313      	orrs	r3, r2
 800d67c:	3401      	adds	r4, #1
 800d67e:	9304      	str	r3, [sp, #16]
 800d680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d684:	4825      	ldr	r0, [pc, #148]	; (800d71c <_svfiprintf_r+0x1ec>)
 800d686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d68a:	2206      	movs	r2, #6
 800d68c:	f7f2 fda0 	bl	80001d0 <memchr>
 800d690:	2800      	cmp	r0, #0
 800d692:	d038      	beq.n	800d706 <_svfiprintf_r+0x1d6>
 800d694:	4b22      	ldr	r3, [pc, #136]	; (800d720 <_svfiprintf_r+0x1f0>)
 800d696:	bb1b      	cbnz	r3, 800d6e0 <_svfiprintf_r+0x1b0>
 800d698:	9b03      	ldr	r3, [sp, #12]
 800d69a:	3307      	adds	r3, #7
 800d69c:	f023 0307 	bic.w	r3, r3, #7
 800d6a0:	3308      	adds	r3, #8
 800d6a2:	9303      	str	r3, [sp, #12]
 800d6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6a6:	4433      	add	r3, r6
 800d6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d6aa:	e768      	b.n	800d57e <_svfiprintf_r+0x4e>
 800d6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	2001      	movs	r0, #1
 800d6b4:	e7a6      	b.n	800d604 <_svfiprintf_r+0xd4>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	3401      	adds	r4, #1
 800d6ba:	9305      	str	r3, [sp, #20]
 800d6bc:	4619      	mov	r1, r3
 800d6be:	f04f 0c0a 	mov.w	ip, #10
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6c8:	3a30      	subs	r2, #48	; 0x30
 800d6ca:	2a09      	cmp	r2, #9
 800d6cc:	d903      	bls.n	800d6d6 <_svfiprintf_r+0x1a6>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d0c6      	beq.n	800d660 <_svfiprintf_r+0x130>
 800d6d2:	9105      	str	r1, [sp, #20]
 800d6d4:	e7c4      	b.n	800d660 <_svfiprintf_r+0x130>
 800d6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6da:	4604      	mov	r4, r0
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e7f0      	b.n	800d6c2 <_svfiprintf_r+0x192>
 800d6e0:	ab03      	add	r3, sp, #12
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	462a      	mov	r2, r5
 800d6e6:	4b0f      	ldr	r3, [pc, #60]	; (800d724 <_svfiprintf_r+0x1f4>)
 800d6e8:	a904      	add	r1, sp, #16
 800d6ea:	4638      	mov	r0, r7
 800d6ec:	f3af 8000 	nop.w
 800d6f0:	1c42      	adds	r2, r0, #1
 800d6f2:	4606      	mov	r6, r0
 800d6f4:	d1d6      	bne.n	800d6a4 <_svfiprintf_r+0x174>
 800d6f6:	89ab      	ldrh	r3, [r5, #12]
 800d6f8:	065b      	lsls	r3, r3, #25
 800d6fa:	f53f af2d 	bmi.w	800d558 <_svfiprintf_r+0x28>
 800d6fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d700:	b01d      	add	sp, #116	; 0x74
 800d702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d706:	ab03      	add	r3, sp, #12
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	462a      	mov	r2, r5
 800d70c:	4b05      	ldr	r3, [pc, #20]	; (800d724 <_svfiprintf_r+0x1f4>)
 800d70e:	a904      	add	r1, sp, #16
 800d710:	4638      	mov	r0, r7
 800d712:	f000 f919 	bl	800d948 <_printf_i>
 800d716:	e7eb      	b.n	800d6f0 <_svfiprintf_r+0x1c0>
 800d718:	0800e9ec 	.word	0x0800e9ec
 800d71c:	0800e9f6 	.word	0x0800e9f6
 800d720:	00000000 	.word	0x00000000
 800d724:	0800d47d 	.word	0x0800d47d
 800d728:	0800e9f2 	.word	0x0800e9f2

0800d72c <sbrk_aligned>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	4e0e      	ldr	r6, [pc, #56]	; (800d768 <sbrk_aligned+0x3c>)
 800d730:	460c      	mov	r4, r1
 800d732:	6831      	ldr	r1, [r6, #0]
 800d734:	4605      	mov	r5, r0
 800d736:	b911      	cbnz	r1, 800d73e <sbrk_aligned+0x12>
 800d738:	f000 fa7e 	bl	800dc38 <_sbrk_r>
 800d73c:	6030      	str	r0, [r6, #0]
 800d73e:	4621      	mov	r1, r4
 800d740:	4628      	mov	r0, r5
 800d742:	f000 fa79 	bl	800dc38 <_sbrk_r>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	d00a      	beq.n	800d760 <sbrk_aligned+0x34>
 800d74a:	1cc4      	adds	r4, r0, #3
 800d74c:	f024 0403 	bic.w	r4, r4, #3
 800d750:	42a0      	cmp	r0, r4
 800d752:	d007      	beq.n	800d764 <sbrk_aligned+0x38>
 800d754:	1a21      	subs	r1, r4, r0
 800d756:	4628      	mov	r0, r5
 800d758:	f000 fa6e 	bl	800dc38 <_sbrk_r>
 800d75c:	3001      	adds	r0, #1
 800d75e:	d101      	bne.n	800d764 <sbrk_aligned+0x38>
 800d760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d764:	4620      	mov	r0, r4
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	20005398 	.word	0x20005398

0800d76c <_malloc_r>:
 800d76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d770:	1ccd      	adds	r5, r1, #3
 800d772:	f025 0503 	bic.w	r5, r5, #3
 800d776:	3508      	adds	r5, #8
 800d778:	2d0c      	cmp	r5, #12
 800d77a:	bf38      	it	cc
 800d77c:	250c      	movcc	r5, #12
 800d77e:	2d00      	cmp	r5, #0
 800d780:	4607      	mov	r7, r0
 800d782:	db01      	blt.n	800d788 <_malloc_r+0x1c>
 800d784:	42a9      	cmp	r1, r5
 800d786:	d905      	bls.n	800d794 <_malloc_r+0x28>
 800d788:	230c      	movs	r3, #12
 800d78a:	603b      	str	r3, [r7, #0]
 800d78c:	2600      	movs	r6, #0
 800d78e:	4630      	mov	r0, r6
 800d790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d794:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d868 <_malloc_r+0xfc>
 800d798:	f000 f9f8 	bl	800db8c <__malloc_lock>
 800d79c:	f8d8 3000 	ldr.w	r3, [r8]
 800d7a0:	461c      	mov	r4, r3
 800d7a2:	bb5c      	cbnz	r4, 800d7fc <_malloc_r+0x90>
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	f7ff ffc0 	bl	800d72c <sbrk_aligned>
 800d7ac:	1c43      	adds	r3, r0, #1
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	d155      	bne.n	800d85e <_malloc_r+0xf2>
 800d7b2:	f8d8 4000 	ldr.w	r4, [r8]
 800d7b6:	4626      	mov	r6, r4
 800d7b8:	2e00      	cmp	r6, #0
 800d7ba:	d145      	bne.n	800d848 <_malloc_r+0xdc>
 800d7bc:	2c00      	cmp	r4, #0
 800d7be:	d048      	beq.n	800d852 <_malloc_r+0xe6>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	4631      	mov	r1, r6
 800d7c4:	4638      	mov	r0, r7
 800d7c6:	eb04 0903 	add.w	r9, r4, r3
 800d7ca:	f000 fa35 	bl	800dc38 <_sbrk_r>
 800d7ce:	4581      	cmp	r9, r0
 800d7d0:	d13f      	bne.n	800d852 <_malloc_r+0xe6>
 800d7d2:	6821      	ldr	r1, [r4, #0]
 800d7d4:	1a6d      	subs	r5, r5, r1
 800d7d6:	4629      	mov	r1, r5
 800d7d8:	4638      	mov	r0, r7
 800d7da:	f7ff ffa7 	bl	800d72c <sbrk_aligned>
 800d7de:	3001      	adds	r0, #1
 800d7e0:	d037      	beq.n	800d852 <_malloc_r+0xe6>
 800d7e2:	6823      	ldr	r3, [r4, #0]
 800d7e4:	442b      	add	r3, r5
 800d7e6:	6023      	str	r3, [r4, #0]
 800d7e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d038      	beq.n	800d862 <_malloc_r+0xf6>
 800d7f0:	685a      	ldr	r2, [r3, #4]
 800d7f2:	42a2      	cmp	r2, r4
 800d7f4:	d12b      	bne.n	800d84e <_malloc_r+0xe2>
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	605a      	str	r2, [r3, #4]
 800d7fa:	e00f      	b.n	800d81c <_malloc_r+0xb0>
 800d7fc:	6822      	ldr	r2, [r4, #0]
 800d7fe:	1b52      	subs	r2, r2, r5
 800d800:	d41f      	bmi.n	800d842 <_malloc_r+0xd6>
 800d802:	2a0b      	cmp	r2, #11
 800d804:	d917      	bls.n	800d836 <_malloc_r+0xca>
 800d806:	1961      	adds	r1, r4, r5
 800d808:	42a3      	cmp	r3, r4
 800d80a:	6025      	str	r5, [r4, #0]
 800d80c:	bf18      	it	ne
 800d80e:	6059      	strne	r1, [r3, #4]
 800d810:	6863      	ldr	r3, [r4, #4]
 800d812:	bf08      	it	eq
 800d814:	f8c8 1000 	streq.w	r1, [r8]
 800d818:	5162      	str	r2, [r4, r5]
 800d81a:	604b      	str	r3, [r1, #4]
 800d81c:	4638      	mov	r0, r7
 800d81e:	f104 060b 	add.w	r6, r4, #11
 800d822:	f000 f9b9 	bl	800db98 <__malloc_unlock>
 800d826:	f026 0607 	bic.w	r6, r6, #7
 800d82a:	1d23      	adds	r3, r4, #4
 800d82c:	1af2      	subs	r2, r6, r3
 800d82e:	d0ae      	beq.n	800d78e <_malloc_r+0x22>
 800d830:	1b9b      	subs	r3, r3, r6
 800d832:	50a3      	str	r3, [r4, r2]
 800d834:	e7ab      	b.n	800d78e <_malloc_r+0x22>
 800d836:	42a3      	cmp	r3, r4
 800d838:	6862      	ldr	r2, [r4, #4]
 800d83a:	d1dd      	bne.n	800d7f8 <_malloc_r+0x8c>
 800d83c:	f8c8 2000 	str.w	r2, [r8]
 800d840:	e7ec      	b.n	800d81c <_malloc_r+0xb0>
 800d842:	4623      	mov	r3, r4
 800d844:	6864      	ldr	r4, [r4, #4]
 800d846:	e7ac      	b.n	800d7a2 <_malloc_r+0x36>
 800d848:	4634      	mov	r4, r6
 800d84a:	6876      	ldr	r6, [r6, #4]
 800d84c:	e7b4      	b.n	800d7b8 <_malloc_r+0x4c>
 800d84e:	4613      	mov	r3, r2
 800d850:	e7cc      	b.n	800d7ec <_malloc_r+0x80>
 800d852:	230c      	movs	r3, #12
 800d854:	603b      	str	r3, [r7, #0]
 800d856:	4638      	mov	r0, r7
 800d858:	f000 f99e 	bl	800db98 <__malloc_unlock>
 800d85c:	e797      	b.n	800d78e <_malloc_r+0x22>
 800d85e:	6025      	str	r5, [r4, #0]
 800d860:	e7dc      	b.n	800d81c <_malloc_r+0xb0>
 800d862:	605b      	str	r3, [r3, #4]
 800d864:	deff      	udf	#255	; 0xff
 800d866:	bf00      	nop
 800d868:	20005394 	.word	0x20005394

0800d86c <_printf_common>:
 800d86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d870:	4616      	mov	r6, r2
 800d872:	4699      	mov	r9, r3
 800d874:	688a      	ldr	r2, [r1, #8]
 800d876:	690b      	ldr	r3, [r1, #16]
 800d878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d87c:	4293      	cmp	r3, r2
 800d87e:	bfb8      	it	lt
 800d880:	4613      	movlt	r3, r2
 800d882:	6033      	str	r3, [r6, #0]
 800d884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d888:	4607      	mov	r7, r0
 800d88a:	460c      	mov	r4, r1
 800d88c:	b10a      	cbz	r2, 800d892 <_printf_common+0x26>
 800d88e:	3301      	adds	r3, #1
 800d890:	6033      	str	r3, [r6, #0]
 800d892:	6823      	ldr	r3, [r4, #0]
 800d894:	0699      	lsls	r1, r3, #26
 800d896:	bf42      	ittt	mi
 800d898:	6833      	ldrmi	r3, [r6, #0]
 800d89a:	3302      	addmi	r3, #2
 800d89c:	6033      	strmi	r3, [r6, #0]
 800d89e:	6825      	ldr	r5, [r4, #0]
 800d8a0:	f015 0506 	ands.w	r5, r5, #6
 800d8a4:	d106      	bne.n	800d8b4 <_printf_common+0x48>
 800d8a6:	f104 0a19 	add.w	sl, r4, #25
 800d8aa:	68e3      	ldr	r3, [r4, #12]
 800d8ac:	6832      	ldr	r2, [r6, #0]
 800d8ae:	1a9b      	subs	r3, r3, r2
 800d8b0:	42ab      	cmp	r3, r5
 800d8b2:	dc26      	bgt.n	800d902 <_printf_common+0x96>
 800d8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8b8:	1e13      	subs	r3, r2, #0
 800d8ba:	6822      	ldr	r2, [r4, #0]
 800d8bc:	bf18      	it	ne
 800d8be:	2301      	movne	r3, #1
 800d8c0:	0692      	lsls	r2, r2, #26
 800d8c2:	d42b      	bmi.n	800d91c <_printf_common+0xb0>
 800d8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8c8:	4649      	mov	r1, r9
 800d8ca:	4638      	mov	r0, r7
 800d8cc:	47c0      	blx	r8
 800d8ce:	3001      	adds	r0, #1
 800d8d0:	d01e      	beq.n	800d910 <_printf_common+0xa4>
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	6922      	ldr	r2, [r4, #16]
 800d8d6:	f003 0306 	and.w	r3, r3, #6
 800d8da:	2b04      	cmp	r3, #4
 800d8dc:	bf02      	ittt	eq
 800d8de:	68e5      	ldreq	r5, [r4, #12]
 800d8e0:	6833      	ldreq	r3, [r6, #0]
 800d8e2:	1aed      	subeq	r5, r5, r3
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	bf0c      	ite	eq
 800d8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8ec:	2500      	movne	r5, #0
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	bfc4      	itt	gt
 800d8f2:	1a9b      	subgt	r3, r3, r2
 800d8f4:	18ed      	addgt	r5, r5, r3
 800d8f6:	2600      	movs	r6, #0
 800d8f8:	341a      	adds	r4, #26
 800d8fa:	42b5      	cmp	r5, r6
 800d8fc:	d11a      	bne.n	800d934 <_printf_common+0xc8>
 800d8fe:	2000      	movs	r0, #0
 800d900:	e008      	b.n	800d914 <_printf_common+0xa8>
 800d902:	2301      	movs	r3, #1
 800d904:	4652      	mov	r2, sl
 800d906:	4649      	mov	r1, r9
 800d908:	4638      	mov	r0, r7
 800d90a:	47c0      	blx	r8
 800d90c:	3001      	adds	r0, #1
 800d90e:	d103      	bne.n	800d918 <_printf_common+0xac>
 800d910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d918:	3501      	adds	r5, #1
 800d91a:	e7c6      	b.n	800d8aa <_printf_common+0x3e>
 800d91c:	18e1      	adds	r1, r4, r3
 800d91e:	1c5a      	adds	r2, r3, #1
 800d920:	2030      	movs	r0, #48	; 0x30
 800d922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d926:	4422      	add	r2, r4
 800d928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d930:	3302      	adds	r3, #2
 800d932:	e7c7      	b.n	800d8c4 <_printf_common+0x58>
 800d934:	2301      	movs	r3, #1
 800d936:	4622      	mov	r2, r4
 800d938:	4649      	mov	r1, r9
 800d93a:	4638      	mov	r0, r7
 800d93c:	47c0      	blx	r8
 800d93e:	3001      	adds	r0, #1
 800d940:	d0e6      	beq.n	800d910 <_printf_common+0xa4>
 800d942:	3601      	adds	r6, #1
 800d944:	e7d9      	b.n	800d8fa <_printf_common+0x8e>
	...

0800d948 <_printf_i>:
 800d948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d94c:	7e0f      	ldrb	r7, [r1, #24]
 800d94e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d950:	2f78      	cmp	r7, #120	; 0x78
 800d952:	4691      	mov	r9, r2
 800d954:	4680      	mov	r8, r0
 800d956:	460c      	mov	r4, r1
 800d958:	469a      	mov	sl, r3
 800d95a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d95e:	d807      	bhi.n	800d970 <_printf_i+0x28>
 800d960:	2f62      	cmp	r7, #98	; 0x62
 800d962:	d80a      	bhi.n	800d97a <_printf_i+0x32>
 800d964:	2f00      	cmp	r7, #0
 800d966:	f000 80d4 	beq.w	800db12 <_printf_i+0x1ca>
 800d96a:	2f58      	cmp	r7, #88	; 0x58
 800d96c:	f000 80c0 	beq.w	800daf0 <_printf_i+0x1a8>
 800d970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d978:	e03a      	b.n	800d9f0 <_printf_i+0xa8>
 800d97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d97e:	2b15      	cmp	r3, #21
 800d980:	d8f6      	bhi.n	800d970 <_printf_i+0x28>
 800d982:	a101      	add	r1, pc, #4	; (adr r1, 800d988 <_printf_i+0x40>)
 800d984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d988:	0800d9e1 	.word	0x0800d9e1
 800d98c:	0800d9f5 	.word	0x0800d9f5
 800d990:	0800d971 	.word	0x0800d971
 800d994:	0800d971 	.word	0x0800d971
 800d998:	0800d971 	.word	0x0800d971
 800d99c:	0800d971 	.word	0x0800d971
 800d9a0:	0800d9f5 	.word	0x0800d9f5
 800d9a4:	0800d971 	.word	0x0800d971
 800d9a8:	0800d971 	.word	0x0800d971
 800d9ac:	0800d971 	.word	0x0800d971
 800d9b0:	0800d971 	.word	0x0800d971
 800d9b4:	0800daf9 	.word	0x0800daf9
 800d9b8:	0800da21 	.word	0x0800da21
 800d9bc:	0800dab3 	.word	0x0800dab3
 800d9c0:	0800d971 	.word	0x0800d971
 800d9c4:	0800d971 	.word	0x0800d971
 800d9c8:	0800db1b 	.word	0x0800db1b
 800d9cc:	0800d971 	.word	0x0800d971
 800d9d0:	0800da21 	.word	0x0800da21
 800d9d4:	0800d971 	.word	0x0800d971
 800d9d8:	0800d971 	.word	0x0800d971
 800d9dc:	0800dabb 	.word	0x0800dabb
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	1d1a      	adds	r2, r3, #4
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	602a      	str	r2, [r5, #0]
 800d9e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e09f      	b.n	800db34 <_printf_i+0x1ec>
 800d9f4:	6820      	ldr	r0, [r4, #0]
 800d9f6:	682b      	ldr	r3, [r5, #0]
 800d9f8:	0607      	lsls	r7, r0, #24
 800d9fa:	f103 0104 	add.w	r1, r3, #4
 800d9fe:	6029      	str	r1, [r5, #0]
 800da00:	d501      	bpl.n	800da06 <_printf_i+0xbe>
 800da02:	681e      	ldr	r6, [r3, #0]
 800da04:	e003      	b.n	800da0e <_printf_i+0xc6>
 800da06:	0646      	lsls	r6, r0, #25
 800da08:	d5fb      	bpl.n	800da02 <_printf_i+0xba>
 800da0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800da0e:	2e00      	cmp	r6, #0
 800da10:	da03      	bge.n	800da1a <_printf_i+0xd2>
 800da12:	232d      	movs	r3, #45	; 0x2d
 800da14:	4276      	negs	r6, r6
 800da16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da1a:	485a      	ldr	r0, [pc, #360]	; (800db84 <_printf_i+0x23c>)
 800da1c:	230a      	movs	r3, #10
 800da1e:	e012      	b.n	800da46 <_printf_i+0xfe>
 800da20:	682b      	ldr	r3, [r5, #0]
 800da22:	6820      	ldr	r0, [r4, #0]
 800da24:	1d19      	adds	r1, r3, #4
 800da26:	6029      	str	r1, [r5, #0]
 800da28:	0605      	lsls	r5, r0, #24
 800da2a:	d501      	bpl.n	800da30 <_printf_i+0xe8>
 800da2c:	681e      	ldr	r6, [r3, #0]
 800da2e:	e002      	b.n	800da36 <_printf_i+0xee>
 800da30:	0641      	lsls	r1, r0, #25
 800da32:	d5fb      	bpl.n	800da2c <_printf_i+0xe4>
 800da34:	881e      	ldrh	r6, [r3, #0]
 800da36:	4853      	ldr	r0, [pc, #332]	; (800db84 <_printf_i+0x23c>)
 800da38:	2f6f      	cmp	r7, #111	; 0x6f
 800da3a:	bf0c      	ite	eq
 800da3c:	2308      	moveq	r3, #8
 800da3e:	230a      	movne	r3, #10
 800da40:	2100      	movs	r1, #0
 800da42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da46:	6865      	ldr	r5, [r4, #4]
 800da48:	60a5      	str	r5, [r4, #8]
 800da4a:	2d00      	cmp	r5, #0
 800da4c:	bfa2      	ittt	ge
 800da4e:	6821      	ldrge	r1, [r4, #0]
 800da50:	f021 0104 	bicge.w	r1, r1, #4
 800da54:	6021      	strge	r1, [r4, #0]
 800da56:	b90e      	cbnz	r6, 800da5c <_printf_i+0x114>
 800da58:	2d00      	cmp	r5, #0
 800da5a:	d04b      	beq.n	800daf4 <_printf_i+0x1ac>
 800da5c:	4615      	mov	r5, r2
 800da5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800da62:	fb03 6711 	mls	r7, r3, r1, r6
 800da66:	5dc7      	ldrb	r7, [r0, r7]
 800da68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da6c:	4637      	mov	r7, r6
 800da6e:	42bb      	cmp	r3, r7
 800da70:	460e      	mov	r6, r1
 800da72:	d9f4      	bls.n	800da5e <_printf_i+0x116>
 800da74:	2b08      	cmp	r3, #8
 800da76:	d10b      	bne.n	800da90 <_printf_i+0x148>
 800da78:	6823      	ldr	r3, [r4, #0]
 800da7a:	07de      	lsls	r6, r3, #31
 800da7c:	d508      	bpl.n	800da90 <_printf_i+0x148>
 800da7e:	6923      	ldr	r3, [r4, #16]
 800da80:	6861      	ldr	r1, [r4, #4]
 800da82:	4299      	cmp	r1, r3
 800da84:	bfde      	ittt	le
 800da86:	2330      	movle	r3, #48	; 0x30
 800da88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800da90:	1b52      	subs	r2, r2, r5
 800da92:	6122      	str	r2, [r4, #16]
 800da94:	f8cd a000 	str.w	sl, [sp]
 800da98:	464b      	mov	r3, r9
 800da9a:	aa03      	add	r2, sp, #12
 800da9c:	4621      	mov	r1, r4
 800da9e:	4640      	mov	r0, r8
 800daa0:	f7ff fee4 	bl	800d86c <_printf_common>
 800daa4:	3001      	adds	r0, #1
 800daa6:	d14a      	bne.n	800db3e <_printf_i+0x1f6>
 800daa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daac:	b004      	add	sp, #16
 800daae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	f043 0320 	orr.w	r3, r3, #32
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	4833      	ldr	r0, [pc, #204]	; (800db88 <_printf_i+0x240>)
 800dabc:	2778      	movs	r7, #120	; 0x78
 800dabe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dac2:	6823      	ldr	r3, [r4, #0]
 800dac4:	6829      	ldr	r1, [r5, #0]
 800dac6:	061f      	lsls	r7, r3, #24
 800dac8:	f851 6b04 	ldr.w	r6, [r1], #4
 800dacc:	d402      	bmi.n	800dad4 <_printf_i+0x18c>
 800dace:	065f      	lsls	r7, r3, #25
 800dad0:	bf48      	it	mi
 800dad2:	b2b6      	uxthmi	r6, r6
 800dad4:	07df      	lsls	r7, r3, #31
 800dad6:	bf48      	it	mi
 800dad8:	f043 0320 	orrmi.w	r3, r3, #32
 800dadc:	6029      	str	r1, [r5, #0]
 800dade:	bf48      	it	mi
 800dae0:	6023      	strmi	r3, [r4, #0]
 800dae2:	b91e      	cbnz	r6, 800daec <_printf_i+0x1a4>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	f023 0320 	bic.w	r3, r3, #32
 800daea:	6023      	str	r3, [r4, #0]
 800daec:	2310      	movs	r3, #16
 800daee:	e7a7      	b.n	800da40 <_printf_i+0xf8>
 800daf0:	4824      	ldr	r0, [pc, #144]	; (800db84 <_printf_i+0x23c>)
 800daf2:	e7e4      	b.n	800dabe <_printf_i+0x176>
 800daf4:	4615      	mov	r5, r2
 800daf6:	e7bd      	b.n	800da74 <_printf_i+0x12c>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	6826      	ldr	r6, [r4, #0]
 800dafc:	6961      	ldr	r1, [r4, #20]
 800dafe:	1d18      	adds	r0, r3, #4
 800db00:	6028      	str	r0, [r5, #0]
 800db02:	0635      	lsls	r5, r6, #24
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	d501      	bpl.n	800db0c <_printf_i+0x1c4>
 800db08:	6019      	str	r1, [r3, #0]
 800db0a:	e002      	b.n	800db12 <_printf_i+0x1ca>
 800db0c:	0670      	lsls	r0, r6, #25
 800db0e:	d5fb      	bpl.n	800db08 <_printf_i+0x1c0>
 800db10:	8019      	strh	r1, [r3, #0]
 800db12:	2300      	movs	r3, #0
 800db14:	6123      	str	r3, [r4, #16]
 800db16:	4615      	mov	r5, r2
 800db18:	e7bc      	b.n	800da94 <_printf_i+0x14c>
 800db1a:	682b      	ldr	r3, [r5, #0]
 800db1c:	1d1a      	adds	r2, r3, #4
 800db1e:	602a      	str	r2, [r5, #0]
 800db20:	681d      	ldr	r5, [r3, #0]
 800db22:	6862      	ldr	r2, [r4, #4]
 800db24:	2100      	movs	r1, #0
 800db26:	4628      	mov	r0, r5
 800db28:	f7f2 fb52 	bl	80001d0 <memchr>
 800db2c:	b108      	cbz	r0, 800db32 <_printf_i+0x1ea>
 800db2e:	1b40      	subs	r0, r0, r5
 800db30:	6060      	str	r0, [r4, #4]
 800db32:	6863      	ldr	r3, [r4, #4]
 800db34:	6123      	str	r3, [r4, #16]
 800db36:	2300      	movs	r3, #0
 800db38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db3c:	e7aa      	b.n	800da94 <_printf_i+0x14c>
 800db3e:	6923      	ldr	r3, [r4, #16]
 800db40:	462a      	mov	r2, r5
 800db42:	4649      	mov	r1, r9
 800db44:	4640      	mov	r0, r8
 800db46:	47d0      	blx	sl
 800db48:	3001      	adds	r0, #1
 800db4a:	d0ad      	beq.n	800daa8 <_printf_i+0x160>
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	079b      	lsls	r3, r3, #30
 800db50:	d413      	bmi.n	800db7a <_printf_i+0x232>
 800db52:	68e0      	ldr	r0, [r4, #12]
 800db54:	9b03      	ldr	r3, [sp, #12]
 800db56:	4298      	cmp	r0, r3
 800db58:	bfb8      	it	lt
 800db5a:	4618      	movlt	r0, r3
 800db5c:	e7a6      	b.n	800daac <_printf_i+0x164>
 800db5e:	2301      	movs	r3, #1
 800db60:	4632      	mov	r2, r6
 800db62:	4649      	mov	r1, r9
 800db64:	4640      	mov	r0, r8
 800db66:	47d0      	blx	sl
 800db68:	3001      	adds	r0, #1
 800db6a:	d09d      	beq.n	800daa8 <_printf_i+0x160>
 800db6c:	3501      	adds	r5, #1
 800db6e:	68e3      	ldr	r3, [r4, #12]
 800db70:	9903      	ldr	r1, [sp, #12]
 800db72:	1a5b      	subs	r3, r3, r1
 800db74:	42ab      	cmp	r3, r5
 800db76:	dcf2      	bgt.n	800db5e <_printf_i+0x216>
 800db78:	e7eb      	b.n	800db52 <_printf_i+0x20a>
 800db7a:	2500      	movs	r5, #0
 800db7c:	f104 0619 	add.w	r6, r4, #25
 800db80:	e7f5      	b.n	800db6e <_printf_i+0x226>
 800db82:	bf00      	nop
 800db84:	0800e9fd 	.word	0x0800e9fd
 800db88:	0800ea0e 	.word	0x0800ea0e

0800db8c <__malloc_lock>:
 800db8c:	4801      	ldr	r0, [pc, #4]	; (800db94 <__malloc_lock+0x8>)
 800db8e:	f7ff bc65 	b.w	800d45c <__retarget_lock_acquire_recursive>
 800db92:	bf00      	nop
 800db94:	20005390 	.word	0x20005390

0800db98 <__malloc_unlock>:
 800db98:	4801      	ldr	r0, [pc, #4]	; (800dba0 <__malloc_unlock+0x8>)
 800db9a:	f7ff bc60 	b.w	800d45e <__retarget_lock_release_recursive>
 800db9e:	bf00      	nop
 800dba0:	20005390 	.word	0x20005390

0800dba4 <_realloc_r>:
 800dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	4680      	mov	r8, r0
 800dbaa:	4614      	mov	r4, r2
 800dbac:	460e      	mov	r6, r1
 800dbae:	b921      	cbnz	r1, 800dbba <_realloc_r+0x16>
 800dbb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb4:	4611      	mov	r1, r2
 800dbb6:	f7ff bdd9 	b.w	800d76c <_malloc_r>
 800dbba:	b92a      	cbnz	r2, 800dbc8 <_realloc_r+0x24>
 800dbbc:	f000 f84c 	bl	800dc58 <_free_r>
 800dbc0:	4625      	mov	r5, r4
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	f000 f892 	bl	800dcf0 <_malloc_usable_size_r>
 800dbcc:	4284      	cmp	r4, r0
 800dbce:	4607      	mov	r7, r0
 800dbd0:	d802      	bhi.n	800dbd8 <_realloc_r+0x34>
 800dbd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbd6:	d812      	bhi.n	800dbfe <_realloc_r+0x5a>
 800dbd8:	4621      	mov	r1, r4
 800dbda:	4640      	mov	r0, r8
 800dbdc:	f7ff fdc6 	bl	800d76c <_malloc_r>
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d0ed      	beq.n	800dbc2 <_realloc_r+0x1e>
 800dbe6:	42bc      	cmp	r4, r7
 800dbe8:	4622      	mov	r2, r4
 800dbea:	4631      	mov	r1, r6
 800dbec:	bf28      	it	cs
 800dbee:	463a      	movcs	r2, r7
 800dbf0:	f7ff fc36 	bl	800d460 <memcpy>
 800dbf4:	4631      	mov	r1, r6
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	f000 f82e 	bl	800dc58 <_free_r>
 800dbfc:	e7e1      	b.n	800dbc2 <_realloc_r+0x1e>
 800dbfe:	4635      	mov	r5, r6
 800dc00:	e7df      	b.n	800dbc2 <_realloc_r+0x1e>

0800dc02 <memmove>:
 800dc02:	4288      	cmp	r0, r1
 800dc04:	b510      	push	{r4, lr}
 800dc06:	eb01 0402 	add.w	r4, r1, r2
 800dc0a:	d902      	bls.n	800dc12 <memmove+0x10>
 800dc0c:	4284      	cmp	r4, r0
 800dc0e:	4623      	mov	r3, r4
 800dc10:	d807      	bhi.n	800dc22 <memmove+0x20>
 800dc12:	1e43      	subs	r3, r0, #1
 800dc14:	42a1      	cmp	r1, r4
 800dc16:	d008      	beq.n	800dc2a <memmove+0x28>
 800dc18:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc20:	e7f8      	b.n	800dc14 <memmove+0x12>
 800dc22:	4402      	add	r2, r0
 800dc24:	4601      	mov	r1, r0
 800dc26:	428a      	cmp	r2, r1
 800dc28:	d100      	bne.n	800dc2c <memmove+0x2a>
 800dc2a:	bd10      	pop	{r4, pc}
 800dc2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc34:	e7f7      	b.n	800dc26 <memmove+0x24>
	...

0800dc38 <_sbrk_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4d06      	ldr	r5, [pc, #24]	; (800dc54 <_sbrk_r+0x1c>)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	602b      	str	r3, [r5, #0]
 800dc44:	f7f7 fb9a 	bl	800537c <_sbrk>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d102      	bne.n	800dc52 <_sbrk_r+0x1a>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	b103      	cbz	r3, 800dc52 <_sbrk_r+0x1a>
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	2000539c 	.word	0x2000539c

0800dc58 <_free_r>:
 800dc58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc5a:	2900      	cmp	r1, #0
 800dc5c:	d044      	beq.n	800dce8 <_free_r+0x90>
 800dc5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc62:	9001      	str	r0, [sp, #4]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f1a1 0404 	sub.w	r4, r1, #4
 800dc6a:	bfb8      	it	lt
 800dc6c:	18e4      	addlt	r4, r4, r3
 800dc6e:	f7ff ff8d 	bl	800db8c <__malloc_lock>
 800dc72:	4a1e      	ldr	r2, [pc, #120]	; (800dcec <_free_r+0x94>)
 800dc74:	9801      	ldr	r0, [sp, #4]
 800dc76:	6813      	ldr	r3, [r2, #0]
 800dc78:	b933      	cbnz	r3, 800dc88 <_free_r+0x30>
 800dc7a:	6063      	str	r3, [r4, #4]
 800dc7c:	6014      	str	r4, [r2, #0]
 800dc7e:	b003      	add	sp, #12
 800dc80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc84:	f7ff bf88 	b.w	800db98 <__malloc_unlock>
 800dc88:	42a3      	cmp	r3, r4
 800dc8a:	d908      	bls.n	800dc9e <_free_r+0x46>
 800dc8c:	6825      	ldr	r5, [r4, #0]
 800dc8e:	1961      	adds	r1, r4, r5
 800dc90:	428b      	cmp	r3, r1
 800dc92:	bf01      	itttt	eq
 800dc94:	6819      	ldreq	r1, [r3, #0]
 800dc96:	685b      	ldreq	r3, [r3, #4]
 800dc98:	1949      	addeq	r1, r1, r5
 800dc9a:	6021      	streq	r1, [r4, #0]
 800dc9c:	e7ed      	b.n	800dc7a <_free_r+0x22>
 800dc9e:	461a      	mov	r2, r3
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	b10b      	cbz	r3, 800dca8 <_free_r+0x50>
 800dca4:	42a3      	cmp	r3, r4
 800dca6:	d9fa      	bls.n	800dc9e <_free_r+0x46>
 800dca8:	6811      	ldr	r1, [r2, #0]
 800dcaa:	1855      	adds	r5, r2, r1
 800dcac:	42a5      	cmp	r5, r4
 800dcae:	d10b      	bne.n	800dcc8 <_free_r+0x70>
 800dcb0:	6824      	ldr	r4, [r4, #0]
 800dcb2:	4421      	add	r1, r4
 800dcb4:	1854      	adds	r4, r2, r1
 800dcb6:	42a3      	cmp	r3, r4
 800dcb8:	6011      	str	r1, [r2, #0]
 800dcba:	d1e0      	bne.n	800dc7e <_free_r+0x26>
 800dcbc:	681c      	ldr	r4, [r3, #0]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	6053      	str	r3, [r2, #4]
 800dcc2:	440c      	add	r4, r1
 800dcc4:	6014      	str	r4, [r2, #0]
 800dcc6:	e7da      	b.n	800dc7e <_free_r+0x26>
 800dcc8:	d902      	bls.n	800dcd0 <_free_r+0x78>
 800dcca:	230c      	movs	r3, #12
 800dccc:	6003      	str	r3, [r0, #0]
 800dcce:	e7d6      	b.n	800dc7e <_free_r+0x26>
 800dcd0:	6825      	ldr	r5, [r4, #0]
 800dcd2:	1961      	adds	r1, r4, r5
 800dcd4:	428b      	cmp	r3, r1
 800dcd6:	bf04      	itt	eq
 800dcd8:	6819      	ldreq	r1, [r3, #0]
 800dcda:	685b      	ldreq	r3, [r3, #4]
 800dcdc:	6063      	str	r3, [r4, #4]
 800dcde:	bf04      	itt	eq
 800dce0:	1949      	addeq	r1, r1, r5
 800dce2:	6021      	streq	r1, [r4, #0]
 800dce4:	6054      	str	r4, [r2, #4]
 800dce6:	e7ca      	b.n	800dc7e <_free_r+0x26>
 800dce8:	b003      	add	sp, #12
 800dcea:	bd30      	pop	{r4, r5, pc}
 800dcec:	20005394 	.word	0x20005394

0800dcf0 <_malloc_usable_size_r>:
 800dcf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcf4:	1f18      	subs	r0, r3, #4
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	bfbc      	itt	lt
 800dcfa:	580b      	ldrlt	r3, [r1, r0]
 800dcfc:	18c0      	addlt	r0, r0, r3
 800dcfe:	4770      	bx	lr

0800dd00 <_init>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	bf00      	nop
 800dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd06:	bc08      	pop	{r3}
 800dd08:	469e      	mov	lr, r3
 800dd0a:	4770      	bx	lr

0800dd0c <_fini>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr
