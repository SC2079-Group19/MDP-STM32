
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d60  0800fb5c  0800fb5c  0001fb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108bc  080108bc  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  080108bc  080108bc  000208bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108c4  080108c4  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108c4  080108c4  000208c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108c8  080108c8  000208c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  080108cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a4  2**0
                  CONTENTS
 10 .bss          000052ac  200001a4  200001a4  000301a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005450  20005450  000301a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e080  00000000  00000000  00030217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ed2  00000000  00000000  0004e297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b20  00000000  00000000  00052170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001556  00000000  00000000  00053c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000056e8  00000000  00000000  000551e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f64f  00000000  00000000  0005a8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9774  00000000  00000000  00079f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a54  00000000  00000000  00163694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0016b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb44 	.word	0x0800fb44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	0800fb44 	.word	0x0800fb44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f005 fd41 	bl	8006984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f987 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fd21 	bl	800194c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fcf5 	bl	80018f8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 fa83 	bl	8001418 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fc47 	bl	80017a4 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fb4b 	bl	80015b0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 faab 	bl	8001474 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1e:	f000 fb9b 	bl	8001658 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f22:	f000 fc09 	bl	8001738 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000f26:	f000 f9d3 	bl	80012d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f2a:	f000 fa23 	bl	8001374 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f2e:	f00e f8c5 	bl	800f0bc <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f32:	2300      	movs	r3, #0
 8000f34:	2203      	movs	r2, #3
 8000f36:	2100      	movs	r1, #0
 8000f38:	4877      	ldr	r0, [pc, #476]	; (8001118 <main+0x220>)
 8000f3a:	f00d fde8 	bl	800eb0e <ICM20948_init>

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f3e:	210c      	movs	r1, #12
 8000f40:	4876      	ldr	r0, [pc, #472]	; (800111c <main+0x224>)
 8000f42:	f008 faa3 	bl	800948c <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	4875      	ldr	r0, [pc, #468]	; (8001120 <main+0x228>)
 8000f4a:	f008 fa9f 	bl	800948c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4873      	ldr	r0, [pc, #460]	; (8001120 <main+0x228>)
 8000f52:	f008 fa9b 	bl	800948c <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f56:	213c      	movs	r1, #60	; 0x3c
 8000f58:	4872      	ldr	r0, [pc, #456]	; (8001124 <main+0x22c>)
 8000f5a:	f008 fe35 	bl	8009bc8 <HAL_TIM_Encoder_Start>

  // uart
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000f5e:	4b72      	ldr	r3, [pc, #456]	; (8001128 <main+0x230>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	4971      	ldr	r1, [pc, #452]	; (800112c <main+0x234>)
 8000f68:	4871      	ldr	r0, [pc, #452]	; (8001130 <main+0x238>)
 8000f6a:	f00a f846 	bl	800affa <HAL_UART_Receive_IT>

  // ultrasonic
  HAL_TIM_Base_Start(&htim6);
 8000f6e:	4871      	ldr	r0, [pc, #452]	; (8001134 <main+0x23c>)
 8000f70:	f008 f95a 	bl	8009228 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f74:	2104      	movs	r1, #4
 8000f76:	4870      	ldr	r0, [pc, #448]	; (8001138 <main+0x240>)
 8000f78:	f008 fbaa 	bl	80096d0 <HAL_TIM_IC_Start_IT>

  // IR
  // HAL_ADC_Start(&hadc1);
  // HAL_ADC_Start(&hadc2);

  __RESET_SERVO_TURN(&htim1);
 8000f7c:	4b67      	ldr	r3, [pc, #412]	; (800111c <main+0x224>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2291      	movs	r2, #145	; 0x91
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
 8000f84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f88:	f005 fd3e 	bl	8006a08 <HAL_Delay>

  // command queue initialization
  curCmd.index = 100;
 8000f8c:	4b6b      	ldr	r3, [pc, #428]	; (800113c <main+0x244>)
 8000f8e:	2264      	movs	r2, #100	; 0x64
 8000f90:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f92:	4b6a      	ldr	r3, [pc, #424]	; (800113c <main+0x244>)
 8000f94:	220a      	movs	r2, #10
 8000f96:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8000f98:	4b69      	ldr	r3, [pc, #420]	; (8001140 <main+0x248>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8000f9e:	4b68      	ldr	r3, [pc, #416]	; (8001140 <main+0x248>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8000fa4:	4b67      	ldr	r3, [pc, #412]	; (8001144 <main+0x24c>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b65      	ldr	r3, [pc, #404]	; (8001140 <main+0x248>)
 8000faa:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	e00c      	b.n	8000fcc <main+0xd4>
  {
    Command cmd;
    cmd.index = 100;
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000fba:	4a61      	ldr	r2, [pc, #388]	; (8001140 <main+0x248>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b5d      	ldr	r3, [pc, #372]	; (8001144 <main+0x24c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	dbec      	blt.n	8000fb2 <main+0xba>
  }
  PIDConfigInit(&pidTSlow, 2.1, 0.045, 0.8);
 8000fd8:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8001148 <main+0x250>
 8000fdc:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800114c <main+0x254>
 8000fe0:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001150 <main+0x258>
 8000fe4:	485b      	ldr	r0, [pc, #364]	; (8001154 <main+0x25c>)
 8000fe6:	f001 fa9d 	bl	8002524 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.1, 0.045, 0.8);
 8000fea:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8001148 <main+0x250>
 8000fee:	eddf 0a57 	vldr	s1, [pc, #348]	; 800114c <main+0x254>
 8000ff2:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001150 <main+0x258>
 8000ff6:	4858      	ldr	r0, [pc, #352]	; (8001158 <main+0x260>)
 8000ff8:	f001 fa94 	bl	8002524 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.1, 0.05, 0.3);
 8000ffc:	ed9f 1a57 	vldr	s2, [pc, #348]	; 800115c <main+0x264>
 8001000:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001160 <main+0x268>
 8001004:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001164 <main+0x26c>
 8001008:	4857      	ldr	r0, [pc, #348]	; (8001168 <main+0x270>)
 800100a:	f001 fa8b 	bl	8002524 <PIDConfigInit>

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 800100e:	4b46      	ldr	r3, [pc, #280]	; (8001128 <main+0x230>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	4945      	ldr	r1, [pc, #276]	; (800112c <main+0x234>)
 8001018:	4845      	ldr	r0, [pc, #276]	; (8001130 <main+0x238>)
 800101a:	f009 ffee 	bl	800affa <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 800101e:	4b3f      	ldr	r3, [pc, #252]	; (800111c <main+0x224>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2291      	movs	r2, #145	; 0x91
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
 8001026:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800102a:	f005 fced 	bl	8006a08 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800102e:	f00a ffc1 	bl	800bfb4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 8001032:	4a4e      	ldr	r2, [pc, #312]	; (800116c <main+0x274>)
 8001034:	2100      	movs	r1, #0
 8001036:	484e      	ldr	r0, [pc, #312]	; (8001170 <main+0x278>)
 8001038:	f00b f806 	bl	800c048 <osThreadNew>
 800103c:	4603      	mov	r3, r0
 800103e:	4a4d      	ldr	r2, [pc, #308]	; (8001174 <main+0x27c>)
 8001040:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 8001042:	4a4d      	ldr	r2, [pc, #308]	; (8001178 <main+0x280>)
 8001044:	2100      	movs	r1, #0
 8001046:	484d      	ldr	r0, [pc, #308]	; (800117c <main+0x284>)
 8001048:	f00a fffe 	bl	800c048 <osThreadNew>
 800104c:	4603      	mov	r3, r0
 800104e:	4a4c      	ldr	r2, [pc, #304]	; (8001180 <main+0x288>)
 8001050:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 8001052:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <main+0x28c>)
 8001054:	2100      	movs	r1, #0
 8001056:	484c      	ldr	r0, [pc, #304]	; (8001188 <main+0x290>)
 8001058:	f00a fff6 	bl	800c048 <osThreadNew>
 800105c:	4603      	mov	r3, r0
 800105e:	4a4b      	ldr	r2, [pc, #300]	; (800118c <main+0x294>)
 8001060:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 8001062:	4a4b      	ldr	r2, [pc, #300]	; (8001190 <main+0x298>)
 8001064:	2100      	movs	r1, #0
 8001066:	484b      	ldr	r0, [pc, #300]	; (8001194 <main+0x29c>)
 8001068:	f00a ffee 	bl	800c048 <osThreadNew>
 800106c:	4603      	mov	r3, r0
 800106e:	4a4a      	ldr	r2, [pc, #296]	; (8001198 <main+0x2a0>)
 8001070:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001072:	4a4a      	ldr	r2, [pc, #296]	; (800119c <main+0x2a4>)
 8001074:	2100      	movs	r1, #0
 8001076:	484a      	ldr	r0, [pc, #296]	; (80011a0 <main+0x2a8>)
 8001078:	f00a ffe6 	bl	800c048 <osThreadNew>
 800107c:	4603      	mov	r3, r0
 800107e:	4a49      	ldr	r2, [pc, #292]	; (80011a4 <main+0x2ac>)
 8001080:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 8001082:	4a49      	ldr	r2, [pc, #292]	; (80011a8 <main+0x2b0>)
 8001084:	2100      	movs	r1, #0
 8001086:	4849      	ldr	r0, [pc, #292]	; (80011ac <main+0x2b4>)
 8001088:	f00a ffde 	bl	800c048 <osThreadNew>
 800108c:	4603      	mov	r3, r0
 800108e:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <main+0x2b8>)
 8001090:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 8001092:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <main+0x2bc>)
 8001094:	2100      	movs	r1, #0
 8001096:	4848      	ldr	r0, [pc, #288]	; (80011b8 <main+0x2c0>)
 8001098:	f00a ffd6 	bl	800c048 <osThreadNew>
 800109c:	4603      	mov	r3, r0
 800109e:	4a47      	ldr	r2, [pc, #284]	; (80011bc <main+0x2c4>)
 80010a0:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 80010a2:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <main+0x2c8>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	4847      	ldr	r0, [pc, #284]	; (80011c4 <main+0x2cc>)
 80010a8:	f00a ffce 	bl	800c048 <osThreadNew>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <main+0x2d0>)
 80010b0:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80010b2:	4a46      	ldr	r2, [pc, #280]	; (80011cc <main+0x2d4>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	4846      	ldr	r0, [pc, #280]	; (80011d0 <main+0x2d8>)
 80010b8:	f00a ffc6 	bl	800c048 <osThreadNew>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a45      	ldr	r2, [pc, #276]	; (80011d4 <main+0x2dc>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80010c2:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <main+0x2e0>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4845      	ldr	r0, [pc, #276]	; (80011dc <main+0x2e4>)
 80010c8:	f00a ffbe 	bl	800c048 <osThreadNew>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a44      	ldr	r2, [pc, #272]	; (80011e0 <main+0x2e8>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* creation of turnATask */
  turnATaskHandle = osThreadNew(runTurnATask, NULL, &turnATask_attributes);
 80010d2:	4a44      	ldr	r2, [pc, #272]	; (80011e4 <main+0x2ec>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4844      	ldr	r0, [pc, #272]	; (80011e8 <main+0x2f0>)
 80010d8:	f00a ffb6 	bl	800c048 <osThreadNew>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a43      	ldr	r2, [pc, #268]	; (80011ec <main+0x2f4>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* creation of turnBTask */
  turnBTaskHandle = osThreadNew(runTurnBTask, NULL, &turnBTask_attributes);
 80010e2:	4a43      	ldr	r2, [pc, #268]	; (80011f0 <main+0x2f8>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	4843      	ldr	r0, [pc, #268]	; (80011f4 <main+0x2fc>)
 80010e8:	f00a ffae 	bl	800c048 <osThreadNew>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a42      	ldr	r2, [pc, #264]	; (80011f8 <main+0x300>)
 80010f0:	6013      	str	r3, [r2, #0]

  /* creation of GHTask */
  GHTaskHandle = osThreadNew(runGHTask, NULL, &GHTask_attributes);
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <main+0x304>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4842      	ldr	r0, [pc, #264]	; (8001200 <main+0x308>)
 80010f8:	f00a ffa6 	bl	800c048 <osThreadNew>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a41      	ldr	r2, [pc, #260]	; (8001204 <main+0x30c>)
 8001100:	6013      	str	r3, [r2, #0]

  /* creation of AMTask */
  AMTaskHandle = osThreadNew(runAMTask, NULL, &AMTask_attributes);
 8001102:	4a41      	ldr	r2, [pc, #260]	; (8001208 <main+0x310>)
 8001104:	2100      	movs	r1, #0
 8001106:	4841      	ldr	r0, [pc, #260]	; (800120c <main+0x314>)
 8001108:	f00a ff9e 	bl	800c048 <osThreadNew>
 800110c:	4603      	mov	r3, r0
 800110e:	4a40      	ldr	r2, [pc, #256]	; (8001210 <main+0x318>)
 8001110:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001112:	f00a ff73 	bl	800bffc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001116:	e7fe      	b.n	8001116 <main+0x21e>
 8001118:	20000250 	.word	0x20000250
 800111c:	200002a4 	.word	0x200002a4
 8001120:	200003c4 	.word	0x200003c4
 8001124:	200002ec 	.word	0x200002ec
 8001128:	20000000 	.word	0x20000000
 800112c:	20000488 	.word	0x20000488
 8001130:	2000040c 	.word	0x2000040c
 8001134:	2000037c 	.word	0x2000037c
 8001138:	20000334 	.word	0x20000334
 800113c:	200004c8 	.word	0x200004c8
 8001140:	20000494 	.word	0x20000494
 8001144:	20000001 	.word	0x20000001
 8001148:	3f4ccccd 	.word	0x3f4ccccd
 800114c:	3d3851ec 	.word	0x3d3851ec
 8001150:	40066666 	.word	0x40066666
 8001154:	20000514 	.word	0x20000514
 8001158:	20000500 	.word	0x20000500
 800115c:	3e99999a 	.word	0x3e99999a
 8001160:	3d4ccccd 	.word	0x3d4ccccd
 8001164:	3f8ccccd 	.word	0x3f8ccccd
 8001168:	20000528 	.word	0x20000528
 800116c:	0800fc14 	.word	0x0800fc14
 8001170:	08003fc9 	.word	0x08003fc9
 8001174:	20000450 	.word	0x20000450
 8001178:	0800fc38 	.word	0x0800fc38
 800117c:	08003fd9 	.word	0x08003fd9
 8001180:	20000454 	.word	0x20000454
 8001184:	0800fc5c 	.word	0x0800fc5c
 8001188:	08004059 	.word	0x08004059
 800118c:	20000458 	.word	0x20000458
 8001190:	0800fc80 	.word	0x0800fc80
 8001194:	080042ad 	.word	0x080042ad
 8001198:	2000045c 	.word	0x2000045c
 800119c:	0800fca4 	.word	0x0800fca4
 80011a0:	080044d5 	.word	0x080044d5
 80011a4:	20000460 	.word	0x20000460
 80011a8:	0800fcc8 	.word	0x0800fcc8
 80011ac:	080047d1 	.word	0x080047d1
 80011b0:	20000464 	.word	0x20000464
 80011b4:	0800fcec 	.word	0x0800fcec
 80011b8:	08004ac9 	.word	0x08004ac9
 80011bc:	20000468 	.word	0x20000468
 80011c0:	0800fd10 	.word	0x0800fd10
 80011c4:	08004dc1 	.word	0x08004dc1
 80011c8:	2000046c 	.word	0x2000046c
 80011cc:	0800fd34 	.word	0x0800fd34
 80011d0:	080050bd 	.word	0x080050bd
 80011d4:	20000470 	.word	0x20000470
 80011d8:	0800fd58 	.word	0x0800fd58
 80011dc:	08005791 	.word	0x08005791
 80011e0:	20000474 	.word	0x20000474
 80011e4:	0800fd7c 	.word	0x0800fd7c
 80011e8:	08005889 	.word	0x08005889
 80011ec:	20000478 	.word	0x20000478
 80011f0:	0800fda0 	.word	0x0800fda0
 80011f4:	08005a4d 	.word	0x08005a4d
 80011f8:	2000047c 	.word	0x2000047c
 80011fc:	0800fdc4 	.word	0x0800fdc4
 8001200:	08005dad 	.word	0x08005dad
 8001204:	20000480 	.word	0x20000480
 8001208:	0800fde8 	.word	0x0800fde8
 800120c:	08005f79 	.word	0x08005f79
 8001210:	20000484 	.word	0x20000484

08001214 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	; 0x50
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2230      	movs	r2, #48	; 0x30
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f00e f80a 	bl	800f23c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <SystemClock_Config+0xb4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <SystemClock_Config+0xb4>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <SystemClock_Config+0xb4>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <SystemClock_Config+0xb8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <SystemClock_Config+0xb8>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <SystemClock_Config+0xb8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001274:	2301      	movs	r3, #1
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001278:	2310      	movs	r3, #16
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4618      	mov	r0, r3
 8001286:	f007 faf5 	bl	8008874 <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001290:	f004 ffd8 	bl	8006244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001294:	230f      	movs	r3, #15
 8001296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 fd58 	bl	8008d64 <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012ba:	f004 ffc3 	bl	8006244 <Error_Handler>
  }
}
 80012be:	bf00      	nop
 80012c0:	3750      	adds	r7, #80	; 0x50
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000

080012d0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_ADC1_Init+0x98>)
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <MX_ADC1_Init+0x9c>)
 80012e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_ADC1_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_ADC1_Init+0x98>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_ADC1_Init+0x98>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_ADC1_Init+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_ADC1_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_ADC1_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_ADC1_Init+0x98>)
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <MX_ADC1_Init+0xa0>)
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_ADC1_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_ADC1_Init+0x98>)
 800131c:	2201      	movs	r2, #1
 800131e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_ADC1_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_ADC1_Init+0x98>)
 800132a:	2201      	movs	r2, #1
 800132c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <MX_ADC1_Init+0x98>)
 8001330:	f005 fb8e 	bl	8006a50 <HAL_ADC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800133a:	f004 ff83 	bl	8006244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_11;
 800133e:	230b      	movs	r3, #11
 8001340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_ADC1_Init+0x98>)
 8001350:	f005 fd60 	bl	8006e14 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800135a:	f004 ff73 	bl	8006244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001c0 	.word	0x200001c0
 800136c:	40012000 	.word	0x40012000
 8001370:	0f000001 	.word	0x0f000001

08001374 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc2.Instance = ADC2;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_ADC2_Init+0x98>)
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <MX_ADC2_Init+0x9c>)
 800138a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_ADC2_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_ADC2_Init+0x98>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_ADC2_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_ADC2_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_ADC2_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_ADC2_Init+0x98>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_ADC2_Init+0x98>)
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <MX_ADC2_Init+0xa0>)
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_ADC2_Init+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_ADC2_Init+0x98>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_ADC2_Init+0x98>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_ADC2_Init+0x98>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <MX_ADC2_Init+0x98>)
 80013d4:	f005 fb3c 	bl	8006a50 <HAL_ADC_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80013de:	f004 ff31 	bl	8006244 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_12;
 80013e2:	230c      	movs	r3, #12
 80013e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_ADC2_Init+0x98>)
 80013f4:	f005 fd0e 	bl	8006e14 <HAL_ADC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80013fe:	f004 ff21 	bl	8006244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000208 	.word	0x20000208
 8001410:	40012100 	.word	0x40012100
 8001414:	0f000001 	.word	0x0f000001

08001418 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_I2C1_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_I2C1_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_I2C1_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_I2C1_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_I2C1_Init+0x50>)
 8001456:	f006 fa25 	bl	80078a4 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f004 fef0 	bl	8006244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000250 	.word	0x20000250
 800146c:	40005400 	.word	0x40005400
 8001470:	000186a0 	.word	0x000186a0

08001474 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b096      	sub	sp, #88	; 0x58
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2220      	movs	r2, #32
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00d fec5 	bl	800f23c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b2:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014b4:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <MX_TIM1_Init+0x138>)
 80014b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80014b8:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014ba:	22a0      	movs	r2, #160	; 0xa0
 80014bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80014c4:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014de:	4832      	ldr	r0, [pc, #200]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014e0:	f007 fe52 	bl	8009188 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014ea:	f004 feab 	bl	8006244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014f8:	4619      	mov	r1, r3
 80014fa:	482b      	ldr	r0, [pc, #172]	; (80015a8 <MX_TIM1_Init+0x134>)
 80014fc:	f008 fe58 	bl	800a1b0 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001506:	f004 fe9d 	bl	8006244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800150a:	4827      	ldr	r0, [pc, #156]	; (80015a8 <MX_TIM1_Init+0x134>)
 800150c:	f007 ff64 	bl	80093d8 <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001516:	f004 fe95 	bl	8006244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001522:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001526:	4619      	mov	r1, r3
 8001528:	481f      	ldr	r0, [pc, #124]	; (80015a8 <MX_TIM1_Init+0x134>)
 800152a:	f009 fba5 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001534:	f004 fe86 	bl	8006244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001538:	2360      	movs	r3, #96	; 0x60
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	220c      	movs	r2, #12
 8001556:	4619      	mov	r1, r3
 8001558:	4813      	ldr	r0, [pc, #76]	; (80015a8 <MX_TIM1_Init+0x134>)
 800155a:	f008 fd67 	bl	800a02c <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001564:	f004 fe6e 	bl	8006244 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800157c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001580:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM1_Init+0x134>)
 800158c:	f009 fbf0 	bl	800ad70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001596:	f004 fe55 	bl	8006244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM1_Init+0x134>)
 800159c:	f005 f860 	bl	8006660 <HAL_TIM_MspPostInit>
}
 80015a0:	bf00      	nop
 80015a2:	3758      	adds	r7, #88	; 0x58
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002a4 	.word	0x200002a4
 80015ac:	40010000 	.word	0x40010000

080015b0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2224      	movs	r2, #36	; 0x24
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f00d fe3c 	bl	800f23c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <MX_TIM2_Init+0xa4>)
 80015ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_TIM2_Init+0xa4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <MX_TIM2_Init+0xa4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_TIM2_Init+0xa4>)
 80015e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_TIM2_Init+0xa4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_TIM2_Init+0xa4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015f4:	2303      	movs	r3, #3
 80015f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015fc:	2301      	movs	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001604:	230a      	movs	r3, #10
 8001606:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800160c:	2301      	movs	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001614:	230a      	movs	r3, #10
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	4619      	mov	r1, r3
 800161e:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_TIM2_Init+0xa4>)
 8001620:	f008 fa2c 	bl	8009a7c <HAL_TIM_Encoder_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800162a:	f004 fe0b 	bl	8006244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_TIM2_Init+0xa4>)
 800163c:	f009 fb1c 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001646:	f004 fdfd 	bl	8006244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002ec 	.word	0x200002ec

08001658 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <MX_TIM3_Init+0xd8>)
 8001684:	4a2b      	ldr	r2, [pc, #172]	; (8001734 <MX_TIM3_Init+0xdc>)
 8001686:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <MX_TIM3_Init+0xd8>)
 800168a:	220f      	movs	r2, #15
 800168c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <MX_TIM3_Init+0xd8>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <MX_TIM3_Init+0xd8>)
 8001696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800169a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <MX_TIM3_Init+0xd8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <MX_TIM3_Init+0xd8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a8:	4821      	ldr	r0, [pc, #132]	; (8001730 <MX_TIM3_Init+0xd8>)
 80016aa:	f007 fd6d 	bl	8009188 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80016b4:	f004 fdc6 	bl	8006244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016be:	f107 0318 	add.w	r3, r7, #24
 80016c2:	4619      	mov	r1, r3
 80016c4:	481a      	ldr	r0, [pc, #104]	; (8001730 <MX_TIM3_Init+0xd8>)
 80016c6:	f008 fd73 	bl	800a1b0 <HAL_TIM_ConfigClockSource>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f004 fdb8 	bl	8006244 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <MX_TIM3_Init+0xd8>)
 80016d6:	f007 ffa1 	bl	800961c <HAL_TIM_IC_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f004 fdb0 	bl	8006244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	480f      	ldr	r0, [pc, #60]	; (8001730 <MX_TIM3_Init+0xd8>)
 80016f4:	f009 fac0 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80016fe:	f004 fda1 	bl	8006244 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001702:	230a      	movs	r3, #10
 8001704:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001706:	2301      	movs	r3, #1
 8001708:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	2204      	movs	r2, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_TIM3_Init+0xd8>)
 800171a:	f008 fbeb 	bl	8009ef4 <HAL_TIM_IC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001724:	f004 fd8e 	bl	8006244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000334 	.word	0x20000334
 8001734:	40000400 	.word	0x40000400

08001738 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	463b      	mov	r3, r7
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_TIM6_Init+0x64>)
 8001748:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <MX_TIM6_Init+0x68>)
 800174a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_TIM6_Init+0x64>)
 800174e:	220f      	movs	r2, #15
 8001750:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_TIM6_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_TIM6_Init+0x64>)
 800175a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_TIM6_Init+0x64>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_TIM6_Init+0x64>)
 8001768:	f007 fd0e 	bl	8009188 <HAL_TIM_Base_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001772:	f004 fd67 	bl	8006244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800177e:	463b      	mov	r3, r7
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <MX_TIM6_Init+0x64>)
 8001784:	f009 fa78 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800178e:	f004 fd59 	bl	8006244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000037c 	.word	0x2000037c
 80017a0:	40001000 	.word	0x40001000

080017a4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b096      	sub	sp, #88	; 0x58
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2220      	movs	r2, #32
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f00d fd2d 	bl	800f23c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <MX_TIM8_Init+0x14c>)
 80017e4:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <MX_TIM8_Init+0x150>)
 80017e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017e8:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <MX_TIM8_Init+0x14c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b40      	ldr	r3, [pc, #256]	; (80018f0 <MX_TIM8_Init+0x14c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80017f4:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <MX_TIM8_Init+0x14c>)
 80017f6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80017fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fc:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <MX_TIM8_Init+0x14c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <MX_TIM8_Init+0x14c>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <MX_TIM8_Init+0x14c>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800180e:	4838      	ldr	r0, [pc, #224]	; (80018f0 <MX_TIM8_Init+0x14c>)
 8001810:	f007 fcba 	bl	8009188 <HAL_TIM_Base_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800181a:	f004 fd13 	bl	8006244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001824:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001828:	4619      	mov	r1, r3
 800182a:	4831      	ldr	r0, [pc, #196]	; (80018f0 <MX_TIM8_Init+0x14c>)
 800182c:	f008 fcc0 	bl	800a1b0 <HAL_TIM_ConfigClockSource>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001836:	f004 fd05 	bl	8006244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800183a:	482d      	ldr	r0, [pc, #180]	; (80018f0 <MX_TIM8_Init+0x14c>)
 800183c:	f007 fdcc 	bl	80093d8 <HAL_TIM_PWM_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001846:	f004 fcfd 	bl	8006244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001856:	4619      	mov	r1, r3
 8001858:	4825      	ldr	r0, [pc, #148]	; (80018f0 <MX_TIM8_Init+0x14c>)
 800185a:	f009 fa0d 	bl	800ac78 <HAL_TIMEx_MasterConfigSynchronization>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001864:	f004 fcee 	bl	8006244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001868:	2360      	movs	r3, #96	; 0x60
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	2200      	movs	r2, #0
 800188a:	4619      	mov	r1, r3
 800188c:	4818      	ldr	r0, [pc, #96]	; (80018f0 <MX_TIM8_Init+0x14c>)
 800188e:	f008 fbcd 	bl	800a02c <HAL_TIM_PWM_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001898:	f004 fcd4 	bl	8006244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800189c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a0:	2204      	movs	r2, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4812      	ldr	r0, [pc, #72]	; (80018f0 <MX_TIM8_Init+0x14c>)
 80018a6:	f008 fbc1 	bl	800a02c <HAL_TIM_PWM_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80018b0:	f004 fcc8 	bl	8006244 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_TIM8_Init+0x14c>)
 80018d8:	f009 fa4a 	bl	800ad70 <HAL_TIMEx_ConfigBreakDeadTime>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80018e2:	f004 fcaf 	bl	8006244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 80018e6:	bf00      	nop
 80018e8:	3758      	adds	r7, #88	; 0x58
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200003c4 	.word	0x200003c4
 80018f4:	40010400 	.word	0x40010400

080018f8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_USART3_UART_Init+0x4c>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <MX_USART3_UART_Init+0x50>)
 8001900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MX_USART3_UART_Init+0x4c>)
 8001904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_USART3_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_USART3_UART_Init+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MX_USART3_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_USART3_UART_Init+0x4c>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <MX_USART3_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_USART3_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_USART3_UART_Init+0x4c>)
 8001930:	f009 fa84 	bl	800ae3c <HAL_UART_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800193a:	f004 fc83 	bl	8006244 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000040c 	.word	0x2000040c
 8001948:	40004800 	.word	0x40004800

0800194c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <MX_GPIO_Init+0xfc>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a37      	ldr	r2, [pc, #220]	; (8001a48 <MX_GPIO_Init+0xfc>)
 800196c:	f043 0310 	orr.w	r3, r3, #16
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <MX_GPIO_Init+0xfc>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <MX_GPIO_Init+0xfc>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a30      	ldr	r2, [pc, #192]	; (8001a48 <MX_GPIO_Init+0xfc>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <MX_GPIO_Init+0xfc>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <MX_GPIO_Init+0xfc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <MX_GPIO_Init+0xfc>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <MX_GPIO_Init+0xfc>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <MX_GPIO_Init+0xfc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <MX_GPIO_Init+0xfc>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <MX_GPIO_Init+0xfc>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 80019d8:	481c      	ldr	r0, [pc, #112]	; (8001a4c <MX_GPIO_Init+0x100>)
 80019da:	f005 ff49 	bl	8007870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	213c      	movs	r1, #60	; 0x3c
 80019e2:	481b      	ldr	r0, [pc, #108]	; (8001a50 <MX_GPIO_Init+0x104>)
 80019e4:	f005 ff44 	bl	8007870 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin US_Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin;
 80019e8:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4812      	ldr	r0, [pc, #72]	; (8001a4c <MX_GPIO_Init+0x100>)
 8001a02:	f005 fd99 	bl	8007538 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 8001a06:	230c      	movs	r3, #12
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a12:	2302      	movs	r3, #2
 8001a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_GPIO_Init+0x104>)
 8001a1e:	f005 fd8b 	bl	8007538 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 8001a22:	2330      	movs	r3, #48	; 0x30
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_GPIO_Init+0x104>)
 8001a3a:	f005 fd7d 	bl	8007538 <HAL_GPIO_Init>
}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40020000 	.word	0x40020000
 8001a54:	00000000 	.word	0x00000000

08001a58 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t US_diff = 0;
uint8_t Is_First_Captured = 0; // is the first value captured ?

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // if the interrupt source is channel2
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	f040 808c 	bne.w	8001b82 <HAL_TIM_IC_CaptureCallback+0x12a>
  {
    if (Is_First_Captured == 0) // if the first value is not captured
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11a      	bne.n	8001aa8 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001a72:	2104      	movs	r1, #4
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f008 fc63 	bl	800a340 <HAL_TIM_ReadCapturedValue>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a47      	ldr	r2, [pc, #284]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001a7e:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;                                    // set the first captured as true
 8001a80:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
      // Now change the polarity to falling edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a1a      	ldr	r2, [r3, #32]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a94:	621a      	str	r2, [r3, #32]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a1a      	ldr	r2, [r3, #32]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0220 	orr.w	r2, r2, #32
 8001aa4:	621a      	str	r2, [r3, #32]
      // set polarity to rising edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
    }
  }
}
 8001aa6:	e06c      	b.n	8001b82 <HAL_TIM_IC_CaptureCallback+0x12a>
    else if (Is_First_Captured == 1) // if the first is already captured
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d168      	bne.n	8001b82 <HAL_TIM_IC_CaptureCallback+0x12a>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f008 fc44 	bl	800a340 <HAL_TIM_ReadCapturedValue>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a39      	ldr	r2, [pc, #228]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001abc:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);                           // reset the counter
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
      if (IC_Val2 > IC_Val1)
 8001ac6:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d90c      	bls.n	8001aec <HAL_TIM_IC_CaptureCallback+0x94>
        obsDist_US = IC_Val2 - IC_Val1;
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001ae6:	edc3 7a00 	vstr	s15, [r3]
 8001aea:	e014      	b.n	8001b16 <HAL_TIM_IC_CaptureCallback+0xbe>
      else if (IC_Val1 > IC_Val2)
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d90e      	bls.n	8001b16 <HAL_TIM_IC_CaptureCallback+0xbe>
        obsDist_US = (0xffff - IC_Val1) + IC_Val2;
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b06:	33ff      	adds	r3, #255	; 0xff
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b12:	edc3 7a00 	vstr	s15, [r3]
      obsDist_US = obsDist_US * .034 / 2;
 8001b16:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd0c 	bl	8000538 <__aeabi_f2d>
 8001b20:	a31b      	add	r3, pc, #108	; (adr r3, 8001b90 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fd5f 	bl	80005e8 <__aeabi_dmul>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b3a:	f7fe fe7f 	bl	800083c <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7ff f809 	bl	8000b5c <__aeabi_d2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b4e:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 0; // set it back to false
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b64:	621a      	str	r2, [r3, #32]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a12      	ldr	r2, [r2, #32]
 8001b70:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0204 	bic.w	r2, r2, #4
 8001b80:	60da      	str	r2, [r3, #12]
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w
 8001b90:	b020c49c 	.word	0xb020c49c
 8001b94:	3fa16872 	.word	0x3fa16872
 8001b98:	2000055c 	.word	0x2000055c
 8001b9c:	20000554 	.word	0x20000554
 8001ba0:	20000558 	.word	0x20000558
 8001ba4:	20000550 	.word	0x20000550
 8001ba8:	20000334 	.word	0x20000334

08001bac <HAL_UART_RxCpltCallback>:
// int targetD = 5;
// uint8_t tempDir = 1;
// int8_t step = 0;
// uint8_t turnMode = 2;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  // TODO: add delimeter at end of command
  //  prevent unused argument(s) compilation warning
  UNUSED(huart);
  int val;

  val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001bb4:	4b95      	ldr	r3, [pc, #596]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001bb6:	789b      	ldrb	r3, [r3, #2]
 8001bb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b91      	ldr	r3, [pc, #580]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001bc8:	78db      	ldrb	r3, [r3, #3]
 8001bca:	3b30      	subs	r3, #48	; 0x30
 8001bcc:	4413      	add	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
  if (aRxBuffer[4] >= '0' && aRxBuffer[4] <= '9')
 8001bd0:	4b8e      	ldr	r3, [pc, #568]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001bd2:	791b      	ldrb	r3, [r3, #4]
 8001bd4:	2b2f      	cmp	r3, #47	; 0x2f
 8001bd6:	d90e      	bls.n	8001bf6 <HAL_UART_RxCpltCallback+0x4a>
 8001bd8:	4b8c      	ldr	r3, [pc, #560]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001bda:	791b      	ldrb	r3, [r3, #4]
 8001bdc:	2b39      	cmp	r3, #57	; 0x39
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_UART_RxCpltCallback+0x4a>
    // val += (aRxBuffer[4] - 48) * 100;
    val = val * 10 + (aRxBuffer[4] - 48);
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b87      	ldr	r3, [pc, #540]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	3b30      	subs	r3, #48	; 0x30
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

  manualMode = 0;
 8001bf6:	4b86      	ldr	r3, [pc, #536]	; (8001e10 <HAL_UART_RxCpltCallback+0x264>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]

  if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T')
 8001bfc:	4b83      	ldr	r3, [pc, #524]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b53      	cmp	r3, #83	; 0x53
 8001c02:	d15a      	bne.n	8001cba <HAL_UART_RxCpltCallback+0x10e>
 8001c04:	4b81      	ldr	r3, [pc, #516]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	2b54      	cmp	r3, #84	; 0x54
 8001c0a:	d156      	bne.n	8001cba <HAL_UART_RxCpltCallback+0x10e>
  { // only STOP can preempt any greedy task
    //		__ADD_COMMAND(cQueue, 0, 0); // stop
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001c0c:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <HAL_UART_RxCpltCallback+0x268>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34
 8001c14:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <HAL_UART_RxCpltCallback+0x268>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c1c:	4b7e      	ldr	r3, [pc, #504]	; (8001e18 <HAL_UART_RxCpltCallback+0x26c>)
 8001c1e:	781a      	ldrb	r2, [r3, #0]
 8001c20:	4b7e      	ldr	r3, [pc, #504]	; (8001e1c <HAL_UART_RxCpltCallback+0x270>)
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <HAL_UART_RxCpltCallback+0x26c>)
 8001c26:	2210      	movs	r2, #16
 8001c28:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001c2a:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <HAL_UART_RxCpltCallback+0x274>)
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001c32:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <HAL_UART_RxCpltCallback+0x278>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 8001c38:	487b      	ldr	r0, [pc, #492]	; (8001e28 <HAL_UART_RxCpltCallback+0x27c>)
 8001c3a:	f000 fc94 	bl	8002566 <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001c3e:	487b      	ldr	r0, [pc, #492]	; (8001e2c <HAL_UART_RxCpltCallback+0x280>)
 8001c40:	f000 fc91 	bl	8002566 <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001c44:	487a      	ldr	r0, [pc, #488]	; (8001e30 <HAL_UART_RxCpltCallback+0x284>)
 8001c46:	f000 fc8e 	bl	8002566 <PIDConfigReset>
    curDistTick = 0;
 8001c4a:	4b7a      	ldr	r3, [pc, #488]	; (8001e34 <HAL_UART_RxCpltCallback+0x288>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001c50:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	4b78      	ldr	r3, [pc, #480]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001c56:	785b      	ldrb	r3, [r3, #1]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d113      	bne.n	8001c84 <HAL_UART_RxCpltCallback+0xd8>
    {
      __CLEAR_CURCMD(curCmd);
 8001c5c:	4b77      	ldr	r3, [pc, #476]	; (8001e3c <HAL_UART_RxCpltCallback+0x290>)
 8001c5e:	2264      	movs	r2, #100	; 0x64
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	4b76      	ldr	r3, [pc, #472]	; (8001e3c <HAL_UART_RxCpltCallback+0x290>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001c68:	4a75      	ldr	r2, [pc, #468]	; (8001e40 <HAL_UART_RxCpltCallback+0x294>)
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	4875      	ldr	r0, [pc, #468]	; (8001e44 <HAL_UART_RxCpltCallback+0x298>)
 8001c6e:	f00d fab1 	bl	800f1d4 <sniprintf>
 8001c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c76:	2206      	movs	r2, #6
 8001c78:	4973      	ldr	r1, [pc, #460]	; (8001e48 <HAL_UART_RxCpltCallback+0x29c>)
 8001c7a:	4874      	ldr	r0, [pc, #464]	; (8001e4c <HAL_UART_RxCpltCallback+0x2a0>)
 8001c7c:	f009 f92b 	bl	800aed6 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001c80:	f000 bc13 	b.w	80024aa <HAL_UART_RxCpltCallback+0x8fe>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001c84:	4b6c      	ldr	r3, [pc, #432]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001c86:	785b      	ldrb	r3, [r3, #1]
 8001c88:	4a6c      	ldr	r2, [pc, #432]	; (8001e3c <HAL_UART_RxCpltCallback+0x290>)
 8001c8a:	496b      	ldr	r1, [pc, #428]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001c96:	785b      	ldrb	r3, [r3, #1]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001c9c:	7892      	ldrb	r2, [r2, #2]
 8001c9e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ca2:	fb01 f202 	mul.w	r2, r1, r2
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001cac:	705a      	strb	r2, [r3, #1]
 8001cae:	4a68      	ldr	r2, [pc, #416]	; (8001e50 <HAL_UART_RxCpltCallback+0x2a4>)
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	4864      	ldr	r0, [pc, #400]	; (8001e44 <HAL_UART_RxCpltCallback+0x298>)
 8001cb4:	f00d fa8e 	bl	800f1d4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001cb8:	e3f7      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
    }
  }
  else if (aRxBuffer[0] == 'R' && aRxBuffer[1] == 'S')
 8001cba:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b52      	cmp	r3, #82	; 0x52
 8001cc0:	d161      	bne.n	8001d86 <HAL_UART_RxCpltCallback+0x1da>
 8001cc2:	4b52      	ldr	r3, [pc, #328]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	2b53      	cmp	r3, #83	; 0x53
 8001cc8:	d15d      	bne.n	8001d86 <HAL_UART_RxCpltCallback+0x1da>
  {
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001cca:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <HAL_UART_RxCpltCallback+0x268>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cd2:	4b50      	ldr	r3, [pc, #320]	; (8001e14 <HAL_UART_RxCpltCallback+0x268>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8001cda:	4b4f      	ldr	r3, [pc, #316]	; (8001e18 <HAL_UART_RxCpltCallback+0x26c>)
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <HAL_UART_RxCpltCallback+0x270>)
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <HAL_UART_RxCpltCallback+0x26c>)
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001ce8:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_UART_RxCpltCallback+0x274>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_UART_RxCpltCallback+0x278>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
    __RESET_SERVO_TURN(&htim1);
 8001cf6:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_UART_RxCpltCallback+0x2a8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2291      	movs	r2, #145	; 0x91
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d02:	f004 fe81 	bl	8006a08 <HAL_Delay>
    PIDConfigReset(&pidTSlow);
 8001d06:	4848      	ldr	r0, [pc, #288]	; (8001e28 <HAL_UART_RxCpltCallback+0x27c>)
 8001d08:	f000 fc2d 	bl	8002566 <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001d0c:	4847      	ldr	r0, [pc, #284]	; (8001e2c <HAL_UART_RxCpltCallback+0x280>)
 8001d0e:	f000 fc2a 	bl	8002566 <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001d12:	4847      	ldr	r0, [pc, #284]	; (8001e30 <HAL_UART_RxCpltCallback+0x284>)
 8001d14:	f000 fc27 	bl	8002566 <PIDConfigReset>
    curDistTick = 0;
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_UART_RxCpltCallback+0x288>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001d24:	785b      	ldrb	r3, [r3, #1]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d112      	bne.n	8001d50 <HAL_UART_RxCpltCallback+0x1a4>
    {
      __CLEAR_CURCMD(curCmd);
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <HAL_UART_RxCpltCallback+0x290>)
 8001d2c:	2264      	movs	r2, #100	; 0x64
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <HAL_UART_RxCpltCallback+0x290>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001d36:	4a42      	ldr	r2, [pc, #264]	; (8001e40 <HAL_UART_RxCpltCallback+0x294>)
 8001d38:	210f      	movs	r1, #15
 8001d3a:	4842      	ldr	r0, [pc, #264]	; (8001e44 <HAL_UART_RxCpltCallback+0x298>)
 8001d3c:	f00d fa4a 	bl	800f1d4 <sniprintf>
 8001d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d44:	2206      	movs	r2, #6
 8001d46:	4940      	ldr	r1, [pc, #256]	; (8001e48 <HAL_UART_RxCpltCallback+0x29c>)
 8001d48:	4840      	ldr	r0, [pc, #256]	; (8001e4c <HAL_UART_RxCpltCallback+0x2a0>)
 8001d4a:	f009 f8c4 	bl	800aed6 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d4e:	e3ac      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001d50:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	4a39      	ldr	r2, [pc, #228]	; (8001e3c <HAL_UART_RxCpltCallback+0x290>)
 8001d56:	4938      	ldr	r1, [pc, #224]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001d62:	785b      	ldrb	r3, [r3, #1]
 8001d64:	3301      	adds	r3, #1
 8001d66:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001d68:	7892      	ldrb	r2, [r2, #2]
 8001d6a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d6e:	fb01 f202 	mul.w	r2, r1, r2
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001d78:	705a      	strb	r2, [r3, #1]
 8001d7a:	4a35      	ldr	r2, [pc, #212]	; (8001e50 <HAL_UART_RxCpltCallback+0x2a4>)
 8001d7c:	210f      	movs	r1, #15
 8001d7e:	4831      	ldr	r0, [pc, #196]	; (8001e44 <HAL_UART_RxCpltCallback+0x298>)
 8001d80:	f00d fa28 	bl	800f1d4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d84:	e391      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
    }
  }
  else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b46      	cmp	r3, #70	; 0x46
 8001d8c:	d166      	bne.n	8001e5c <HAL_UART_RxCpltCallback+0x2b0>
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001d90:	785b      	ldrb	r3, [r3, #1]
 8001d92:	2b57      	cmp	r3, #87	; 0x57
 8001d94:	d003      	beq.n	8001d9e <HAL_UART_RxCpltCallback+0x1f2>
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001d98:	785b      	ldrb	r3, [r3, #1]
 8001d9a:	2b53      	cmp	r3, #83	; 0x53
 8001d9c:	d15e      	bne.n	8001e5c <HAL_UART_RxCpltCallback+0x2b0>
  { // FW or FS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001da0:	789b      	ldrb	r3, [r3, #2]
 8001da2:	2b2d      	cmp	r3, #45	; 0x2d
 8001da4:	d105      	bne.n	8001db2 <HAL_UART_RxCpltCallback+0x206>
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	2b2d      	cmp	r3, #45	; 0x2d
 8001dac:	d101      	bne.n	8001db2 <HAL_UART_RxCpltCallback+0x206>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_UART_RxCpltCallback+0x208>
 8001db2:	2300      	movs	r3, #0
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_UART_RxCpltCallback+0x264>)
 8001db8:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_UART_RxCpltCallback+0x260>)
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	2b53      	cmp	r3, #83	; 0x53
 8001dc0:	bf14      	ite	ne
 8001dc2:	2301      	movne	r3, #1
 8001dc4:	2300      	moveq	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_UART_RxCpltCallback+0x2ac>)
 8001dcc:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 1, val);
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	2201      	movs	r2, #1
 8001dda:	711a      	strb	r2, [r3, #4]
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	b291      	uxth	r1, r2
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	460a      	mov	r2, r1
 8001dec:	80da      	strh	r2, [r3, #6]
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001df6:	7892      	ldrb	r2, [r2, #2]
 8001df8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dfc:	fb01 f202 	mul.w	r2, r1, r2
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_UART_RxCpltCallback+0x28c>)
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e34f      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
 8001e0a:	bf00      	nop
 8001e0c:	20000488 	.word	0x20000488
 8001e10:	200004dc 	.word	0x200004dc
 8001e14:	200003c4 	.word	0x200003c4
 8001e18:	20000134 	.word	0x20000134
 8001e1c:	20000135 	.word	0x20000135
 8001e20:	200004e4 	.word	0x200004e4
 8001e24:	200004ea 	.word	0x200004ea
 8001e28:	20000514 	.word	0x20000514
 8001e2c:	20000500 	.word	0x20000500
 8001e30:	20000528 	.word	0x20000528
 8001e34:	200004f8 	.word	0x200004f8
 8001e38:	20000494 	.word	0x20000494
 8001e3c:	200004c8 	.word	0x200004c8
 8001e40:	0800fbe4 	.word	0x0800fbe4
 8001e44:	200004cc 	.word	0x200004cc
 8001e48:	0800fbec 	.word	0x0800fbec
 8001e4c:	2000040c 	.word	0x2000040c
 8001e50:	0800fbf4 	.word	0x0800fbf4
 8001e54:	200002a4 	.word	0x200002a4
 8001e58:	20000136 	.word	0x20000136
  }
  else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001e5c:	4b96      	ldr	r3, [pc, #600]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b42      	cmp	r3, #66	; 0x42
 8001e62:	d13d      	bne.n	8001ee0 <HAL_UART_RxCpltCallback+0x334>
 8001e64:	4b94      	ldr	r3, [pc, #592]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	2b57      	cmp	r3, #87	; 0x57
 8001e6a:	d003      	beq.n	8001e74 <HAL_UART_RxCpltCallback+0x2c8>
 8001e6c:	4b92      	ldr	r3, [pc, #584]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	2b53      	cmp	r3, #83	; 0x53
 8001e72:	d135      	bne.n	8001ee0 <HAL_UART_RxCpltCallback+0x334>
  { // BW or BS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e74:	4b90      	ldr	r3, [pc, #576]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001e76:	789b      	ldrb	r3, [r3, #2]
 8001e78:	2b2d      	cmp	r3, #45	; 0x2d
 8001e7a:	d105      	bne.n	8001e88 <HAL_UART_RxCpltCallback+0x2dc>
 8001e7c:	4b8e      	ldr	r3, [pc, #568]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001e7e:	78db      	ldrb	r3, [r3, #3]
 8001e80:	2b2d      	cmp	r3, #45	; 0x2d
 8001e82:	d101      	bne.n	8001e88 <HAL_UART_RxCpltCallback+0x2dc>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_UART_RxCpltCallback+0x2de>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b8b      	ldr	r3, [pc, #556]	; (80020bc <HAL_UART_RxCpltCallback+0x510>)
 8001e8e:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001e90:	4b89      	ldr	r3, [pc, #548]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001e92:	785b      	ldrb	r3, [r3, #1]
 8001e94:	2b53      	cmp	r3, #83	; 0x53
 8001e96:	bf14      	ite	ne
 8001e98:	2301      	movne	r3, #1
 8001e9a:	2300      	moveq	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b87      	ldr	r3, [pc, #540]	; (80020c0 <HAL_UART_RxCpltCallback+0x514>)
 8001ea2:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 2, val);
 8001ea4:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4a86      	ldr	r2, [pc, #536]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	2202      	movs	r2, #2
 8001eb0:	711a      	strb	r2, [r3, #4]
 8001eb2:	4b84      	ldr	r3, [pc, #528]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	b291      	uxth	r1, r2
 8001eba:	4a82      	ldr	r2, [pc, #520]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	460a      	mov	r2, r1
 8001ec2:	80da      	strh	r2, [r3, #6]
 8001ec4:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4a7e      	ldr	r2, [pc, #504]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001ecc:	7892      	ldrb	r2, [r2, #2]
 8001ece:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ed2:	fb01 f202 	mul.w	r2, r1, r2
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b7a      	ldr	r3, [pc, #488]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e2e4      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  }

  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L')
 8001ee0:	4b75      	ldr	r3, [pc, #468]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b46      	cmp	r3, #70	; 0x46
 8001ee6:	d136      	bne.n	8001f56 <HAL_UART_RxCpltCallback+0x3aa>
 8001ee8:	4b73      	ldr	r3, [pc, #460]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001eea:	785b      	ldrb	r3, [r3, #1]
 8001eec:	2b4c      	cmp	r3, #76	; 0x4c
 8001eee:	d132      	bne.n	8001f56 <HAL_UART_RxCpltCallback+0x3aa>
  { // FL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ef0:	4b71      	ldr	r3, [pc, #452]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001ef2:	789b      	ldrb	r3, [r3, #2]
 8001ef4:	2b2d      	cmp	r3, #45	; 0x2d
 8001ef6:	d105      	bne.n	8001f04 <HAL_UART_RxCpltCallback+0x358>
 8001ef8:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001efa:	78db      	ldrb	r3, [r3, #3]
 8001efc:	2b2d      	cmp	r3, #45	; 0x2d
 8001efe:	d101      	bne.n	8001f04 <HAL_UART_RxCpltCallback+0x358>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_UART_RxCpltCallback+0x35a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_UART_RxCpltCallback+0x510>)
 8001f0a:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001f0c:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_UART_RxCpltCallback+0x510>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_UART_RxCpltCallback+0x36c>
 8001f14:	2103      	movs	r1, #3
 8001f16:	e000      	b.n	8001f1a <HAL_UART_RxCpltCallback+0x36e>
 8001f18:	2107      	movs	r1, #7
 8001f1a:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	460a      	mov	r2, r1
 8001f26:	711a      	strb	r2, [r3, #4]
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	b291      	uxth	r1, r2
 8001f30:	4a64      	ldr	r2, [pc, #400]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	460a      	mov	r2, r1
 8001f38:	80da      	strh	r2, [r3, #6]
 8001f3a:	4b62      	ldr	r3, [pc, #392]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4a60      	ldr	r2, [pc, #384]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001f42:	7892      	ldrb	r2, [r2, #2]
 8001f44:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f48:	fb01 f202 	mul.w	r2, r1, r2
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e2a9      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  }
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R')
 8001f56:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b46      	cmp	r3, #70	; 0x46
 8001f5c:	d136      	bne.n	8001fcc <HAL_UART_RxCpltCallback+0x420>
 8001f5e:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b52      	cmp	r3, #82	; 0x52
 8001f64:	d132      	bne.n	8001fcc <HAL_UART_RxCpltCallback+0x420>
  { // FR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f66:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001f68:	789b      	ldrb	r3, [r3, #2]
 8001f6a:	2b2d      	cmp	r3, #45	; 0x2d
 8001f6c:	d105      	bne.n	8001f7a <HAL_UART_RxCpltCallback+0x3ce>
 8001f6e:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001f70:	78db      	ldrb	r3, [r3, #3]
 8001f72:	2b2d      	cmp	r3, #45	; 0x2d
 8001f74:	d101      	bne.n	8001f7a <HAL_UART_RxCpltCallback+0x3ce>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_UART_RxCpltCallback+0x3d0>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_UART_RxCpltCallback+0x510>)
 8001f80:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001f82:	4b4e      	ldr	r3, [pc, #312]	; (80020bc <HAL_UART_RxCpltCallback+0x510>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_UART_RxCpltCallback+0x3e2>
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	e000      	b.n	8001f90 <HAL_UART_RxCpltCallback+0x3e4>
 8001f8e:	2108      	movs	r1, #8
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4a4b      	ldr	r2, [pc, #300]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	460a      	mov	r2, r1
 8001f9c:	711a      	strb	r2, [r3, #4]
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	b291      	uxth	r1, r2
 8001fa6:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	460a      	mov	r2, r1
 8001fae:	80da      	strh	r2, [r3, #6]
 8001fb0:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a43      	ldr	r2, [pc, #268]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001fb8:	7892      	ldrb	r2, [r2, #2]
 8001fba:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	e26e      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L')
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b42      	cmp	r3, #66	; 0x42
 8001fd2:	d136      	bne.n	8002042 <HAL_UART_RxCpltCallback+0x496>
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	2b4c      	cmp	r3, #76	; 0x4c
 8001fda:	d132      	bne.n	8002042 <HAL_UART_RxCpltCallback+0x496>
  { // BL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001fde:	789b      	ldrb	r3, [r3, #2]
 8001fe0:	2b2d      	cmp	r3, #45	; 0x2d
 8001fe2:	d105      	bne.n	8001ff0 <HAL_UART_RxCpltCallback+0x444>
 8001fe4:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8001fe6:	78db      	ldrb	r3, [r3, #3]
 8001fe8:	2b2d      	cmp	r3, #45	; 0x2d
 8001fea:	d101      	bne.n	8001ff0 <HAL_UART_RxCpltCallback+0x444>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_UART_RxCpltCallback+0x446>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_UART_RxCpltCallback+0x510>)
 8001ff6:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_UART_RxCpltCallback+0x510>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_RxCpltCallback+0x458>
 8002000:	2105      	movs	r1, #5
 8002002:	e000      	b.n	8002006 <HAL_UART_RxCpltCallback+0x45a>
 8002004:	2109      	movs	r1, #9
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4a2e      	ldr	r2, [pc, #184]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	460a      	mov	r2, r1
 8002012:	711a      	strb	r2, [r3, #4]
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	b291      	uxth	r1, r2
 800201c:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	460a      	mov	r2, r1
 8002024:	80da      	strh	r2, [r3, #6]
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 800202e:	7892      	ldrb	r2, [r2, #2]
 8002030:	fb93 f1f2 	sdiv	r1, r3, r2
 8002034:	fb01 f202 	mul.w	r2, r1, r2
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e233      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R')
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b42      	cmp	r3, #66	; 0x42
 8002048:	d13e      	bne.n	80020c8 <HAL_UART_RxCpltCallback+0x51c>
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	2b52      	cmp	r3, #82	; 0x52
 8002050:	d13a      	bne.n	80020c8 <HAL_UART_RxCpltCallback+0x51c>
  { // BR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 8002054:	789b      	ldrb	r3, [r3, #2]
 8002056:	2b2d      	cmp	r3, #45	; 0x2d
 8002058:	d105      	bne.n	8002066 <HAL_UART_RxCpltCallback+0x4ba>
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_UART_RxCpltCallback+0x50c>)
 800205c:	78db      	ldrb	r3, [r3, #3]
 800205e:	2b2d      	cmp	r3, #45	; 0x2d
 8002060:	d101      	bne.n	8002066 <HAL_UART_RxCpltCallback+0x4ba>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_UART_RxCpltCallback+0x4bc>
 8002066:	2300      	movs	r3, #0
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_UART_RxCpltCallback+0x510>)
 800206c:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_UART_RxCpltCallback+0x510>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_UART_RxCpltCallback+0x4ce>
 8002076:	2106      	movs	r1, #6
 8002078:	e000      	b.n	800207c <HAL_UART_RxCpltCallback+0x4d0>
 800207a:	210a      	movs	r1, #10
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	460a      	mov	r2, r1
 8002088:	711a      	strb	r2, [r3, #4]
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	b291      	uxth	r1, r2
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	460a      	mov	r2, r1
 800209a:	80da      	strh	r2, [r3, #6]
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 80020a4:	7892      	ldrb	r2, [r2, #2]
 80020a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80020aa:	fb01 f202 	mul.w	r2, r1, r2
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_UART_RxCpltCallback+0x518>)
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e1f8      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
 80020b8:	20000488 	.word	0x20000488
 80020bc:	200004dc 	.word	0x200004dc
 80020c0:	20000136 	.word	0x20000136
 80020c4:	20000494 	.word	0x20000494
  }
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L')
 80020c8:	4b97      	ldr	r3, [pc, #604]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b54      	cmp	r3, #84	; 0x54
 80020ce:	d121      	bne.n	8002114 <HAL_UART_RxCpltCallback+0x568>
 80020d0:	4b95      	ldr	r3, [pc, #596]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	2b4c      	cmp	r3, #76	; 0x4c
 80020d6:	d11d      	bne.n	8002114 <HAL_UART_RxCpltCallback+0x568>
    __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 80020d8:	4b94      	ldr	r3, [pc, #592]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4a93      	ldr	r2, [pc, #588]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	220b      	movs	r2, #11
 80020e4:	711a      	strb	r2, [r3, #4]
 80020e6:	4b91      	ldr	r3, [pc, #580]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	b291      	uxth	r1, r2
 80020ee:	4a8f      	ldr	r2, [pc, #572]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	460a      	mov	r2, r1
 80020f6:	80da      	strh	r2, [r3, #6]
 80020f8:	4b8c      	ldr	r3, [pc, #560]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	4a8b      	ldr	r2, [pc, #556]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002100:	7892      	ldrb	r2, [r2, #2]
 8002102:	fb93 f1f2 	sdiv	r1, r3, r2
 8002106:	fb01 f202 	mul.w	r2, r1, r2
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b87      	ldr	r3, [pc, #540]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e1ca      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R')
 8002114:	4b84      	ldr	r3, [pc, #528]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b54      	cmp	r3, #84	; 0x54
 800211a:	d121      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x5b4>
 800211c:	4b82      	ldr	r3, [pc, #520]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	2b52      	cmp	r3, #82	; 0x52
 8002122:	d11d      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x5b4>
    __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 8002124:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4a80      	ldr	r2, [pc, #512]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	220c      	movs	r2, #12
 8002130:	711a      	strb	r2, [r3, #4]
 8002132:	4b7e      	ldr	r3, [pc, #504]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	b291      	uxth	r1, r2
 800213a:	4a7c      	ldr	r2, [pc, #496]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	460a      	mov	r2, r1
 8002142:	80da      	strh	r2, [r3, #6]
 8002144:	4b79      	ldr	r3, [pc, #484]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	4a78      	ldr	r2, [pc, #480]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800214c:	7892      	ldrb	r2, [r2, #2]
 800214e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002152:	fb01 f202 	mul.w	r2, r1, r2
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b74      	ldr	r3, [pc, #464]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e1a4      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T')
 8002160:	4b71      	ldr	r3, [pc, #452]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b44      	cmp	r3, #68	; 0x44
 8002166:	d121      	bne.n	80021ac <HAL_UART_RxCpltCallback+0x600>
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 800216a:	785b      	ldrb	r3, [r3, #1]
 800216c:	2b54      	cmp	r3, #84	; 0x54
 800216e:	d11d      	bne.n	80021ac <HAL_UART_RxCpltCallback+0x600>
    __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 8002170:	4b6e      	ldr	r3, [pc, #440]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4a6d      	ldr	r2, [pc, #436]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	220e      	movs	r2, #14
 800217c:	711a      	strb	r2, [r3, #4]
 800217e:	4b6b      	ldr	r3, [pc, #428]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	b291      	uxth	r1, r2
 8002186:	4a69      	ldr	r2, [pc, #420]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	460a      	mov	r2, r1
 800218e:	80da      	strh	r2, [r3, #6]
 8002190:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	4a65      	ldr	r2, [pc, #404]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002198:	7892      	ldrb	r2, [r2, #2]
 800219a:	fb93 f1f2 	sdiv	r1, r3, r2
 800219e:	fb01 f202 	mul.w	r2, r1, r2
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4b61      	ldr	r3, [pc, #388]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e17e      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'A')
 80021ac:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b46      	cmp	r3, #70	; 0x46
 80021b2:	d121      	bne.n	80021f8 <HAL_UART_RxCpltCallback+0x64c>
 80021b4:	4b5c      	ldr	r3, [pc, #368]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 80021b6:	785b      	ldrb	r3, [r3, #1]
 80021b8:	2b41      	cmp	r3, #65	; 0x41
 80021ba:	d11d      	bne.n	80021f8 <HAL_UART_RxCpltCallback+0x64c>
    __ADD_COMMAND(cQueue, 88, val); // forward anti-clockwise rotation with variable
 80021bc:	4b5b      	ldr	r3, [pc, #364]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4a5a      	ldr	r2, [pc, #360]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	2258      	movs	r2, #88	; 0x58
 80021c8:	711a      	strb	r2, [r3, #4]
 80021ca:	4b58      	ldr	r3, [pc, #352]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	b291      	uxth	r1, r2
 80021d2:	4a56      	ldr	r2, [pc, #344]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	460a      	mov	r2, r1
 80021da:	80da      	strh	r2, [r3, #6]
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80021e4:	7892      	ldrb	r2, [r2, #2]
 80021e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80021ea:	fb01 f202 	mul.w	r2, r1, r2
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b4e      	ldr	r3, [pc, #312]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e158      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'C')
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b46      	cmp	r3, #70	; 0x46
 80021fe:	d121      	bne.n	8002244 <HAL_UART_RxCpltCallback+0x698>
 8002200:	4b49      	ldr	r3, [pc, #292]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	2b43      	cmp	r3, #67	; 0x43
 8002206:	d11d      	bne.n	8002244 <HAL_UART_RxCpltCallback+0x698>
    __ADD_COMMAND(cQueue, 89, val); // forward clockwise rotation with variable
 8002208:	4b48      	ldr	r3, [pc, #288]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4a47      	ldr	r2, [pc, #284]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	2259      	movs	r2, #89	; 0x59
 8002214:	711a      	strb	r2, [r3, #4]
 8002216:	4b45      	ldr	r3, [pc, #276]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	b291      	uxth	r1, r2
 800221e:	4a43      	ldr	r2, [pc, #268]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	460a      	mov	r2, r1
 8002226:	80da      	strh	r2, [r3, #6]
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002230:	7892      	ldrb	r2, [r2, #2]
 8002232:	fb93 f1f2 	sdiv	r1, r3, r2
 8002236:	fb01 f202 	mul.w	r2, r1, r2
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e132      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'A')
 8002244:	4b38      	ldr	r3, [pc, #224]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b42      	cmp	r3, #66	; 0x42
 800224a:	d121      	bne.n	8002290 <HAL_UART_RxCpltCallback+0x6e4>
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	2b41      	cmp	r3, #65	; 0x41
 8002252:	d11d      	bne.n	8002290 <HAL_UART_RxCpltCallback+0x6e4>
    __ADD_COMMAND(cQueue, 90, val); // backward anti-clockwise rotation with variable
 8002254:	4b35      	ldr	r3, [pc, #212]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4a34      	ldr	r2, [pc, #208]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	225a      	movs	r2, #90	; 0x5a
 8002260:	711a      	strb	r2, [r3, #4]
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	b291      	uxth	r1, r2
 800226a:	4a30      	ldr	r2, [pc, #192]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	460a      	mov	r2, r1
 8002272:	80da      	strh	r2, [r3, #6]
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	4a2c      	ldr	r2, [pc, #176]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800227c:	7892      	ldrb	r2, [r2, #2]
 800227e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002282:	fb01 f202 	mul.w	r2, r1, r2
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b28      	ldr	r3, [pc, #160]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e10c      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'C')
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b42      	cmp	r3, #66	; 0x42
 8002296:	d121      	bne.n	80022dc <HAL_UART_RxCpltCallback+0x730>
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 800229a:	785b      	ldrb	r3, [r3, #1]
 800229c:	2b43      	cmp	r3, #67	; 0x43
 800229e:	d11d      	bne.n	80022dc <HAL_UART_RxCpltCallback+0x730>
    __ADD_COMMAND(cQueue, 91, val); // backward clockwise rotation with variable
 80022a0:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4a21      	ldr	r2, [pc, #132]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	225b      	movs	r2, #91	; 0x5b
 80022ac:	711a      	strb	r2, [r3, #4]
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	b291      	uxth	r1, r2
 80022b6:	4a1d      	ldr	r2, [pc, #116]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	460a      	mov	r2, r1
 80022be:	80da      	strh	r2, [r3, #6]
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022c8:	7892      	ldrb	r2, [r2, #2]
 80022ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80022ce:	fb01 f202 	mul.w	r2, r1, r2
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	e0e6      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'A')
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b54      	cmp	r3, #84	; 0x54
 80022e2:	d125      	bne.n	8002330 <HAL_UART_RxCpltCallback+0x784>
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_UART_RxCpltCallback+0x77c>)
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	2b41      	cmp	r3, #65	; 0x41
 80022ea:	d121      	bne.n	8002330 <HAL_UART_RxCpltCallback+0x784>
    __ADD_COMMAND(cQueue, 92, val); // Turn A - Task 2 1st obstacle
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	225c      	movs	r2, #92	; 0x5c
 80022f8:	711a      	strb	r2, [r3, #4]
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	b291      	uxth	r1, r2
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	460a      	mov	r2, r1
 800230a:	80da      	strh	r2, [r3, #6]
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002314:	7892      	ldrb	r2, [r2, #2]
 8002316:	fb93 f1f2 	sdiv	r1, r3, r2
 800231a:	fb01 f202 	mul.w	r2, r1, r2
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b02      	ldr	r3, [pc, #8]	; (800232c <HAL_UART_RxCpltCallback+0x780>)
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e0c0      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
 8002328:	20000488 	.word	0x20000488
 800232c:	20000494 	.word	0x20000494
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R')
 8002330:	4b75      	ldr	r3, [pc, #468]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b49      	cmp	r3, #73	; 0x49
 8002336:	d121      	bne.n	800237c <HAL_UART_RxCpltCallback+0x7d0>
 8002338:	4b73      	ldr	r3, [pc, #460]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	2b52      	cmp	r3, #82	; 0x52
 800233e:	d11d      	bne.n	800237c <HAL_UART_RxCpltCallback+0x7d0>
    __ADD_COMMAND(cQueue, 93, val); // Robot move until IR overshoot - for debugging only
 8002340:	4b72      	ldr	r3, [pc, #456]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4a71      	ldr	r2, [pc, #452]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	225d      	movs	r2, #93	; 0x5d
 800234c:	711a      	strb	r2, [r3, #4]
 800234e:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	b291      	uxth	r1, r2
 8002356:	4a6d      	ldr	r2, [pc, #436]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	460a      	mov	r2, r1
 800235e:	80da      	strh	r2, [r3, #6]
 8002360:	4b6a      	ldr	r3, [pc, #424]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	4a69      	ldr	r2, [pc, #420]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002368:	7892      	ldrb	r2, [r2, #2]
 800236a:	fb93 f1f2 	sdiv	r1, r3, r2
 800236e:	fb01 f202 	mul.w	r2, r1, r2
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4b65      	ldr	r3, [pc, #404]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	e096      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'C')
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b49      	cmp	r3, #73	; 0x49
 8002382:	d121      	bne.n	80023c8 <HAL_UART_RxCpltCallback+0x81c>
 8002384:	4b60      	ldr	r3, [pc, #384]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	2b43      	cmp	r3, #67	; 0x43
 800238a:	d11d      	bne.n	80023c8 <HAL_UART_RxCpltCallback+0x81c>
    __ADD_COMMAND(cQueue, 94, val); // Robot move until IR detect close distance obstacle - for debugging only
 800238c:	4b5f      	ldr	r3, [pc, #380]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4a5e      	ldr	r2, [pc, #376]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	225e      	movs	r2, #94	; 0x5e
 8002398:	711a      	strb	r2, [r3, #4]
 800239a:	4b5c      	ldr	r3, [pc, #368]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	b291      	uxth	r1, r2
 80023a2:	4a5a      	ldr	r2, [pc, #360]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	460a      	mov	r2, r1
 80023aa:	80da      	strh	r2, [r3, #6]
 80023ac:	4b57      	ldr	r3, [pc, #348]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a56      	ldr	r2, [pc, #344]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80023b4:	7892      	ldrb	r2, [r2, #2]
 80023b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80023ba:	fb01 f202 	mul.w	r2, r1, r2
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b52      	ldr	r3, [pc, #328]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e070      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'B')
 80023c8:	4b4f      	ldr	r3, [pc, #316]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b54      	cmp	r3, #84	; 0x54
 80023ce:	d121      	bne.n	8002414 <HAL_UART_RxCpltCallback+0x868>
 80023d0:	4b4d      	ldr	r3, [pc, #308]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 80023d2:	785b      	ldrb	r3, [r3, #1]
 80023d4:	2b42      	cmp	r3, #66	; 0x42
 80023d6:	d11d      	bne.n	8002414 <HAL_UART_RxCpltCallback+0x868>
    __ADD_COMMAND(cQueue, 95, val); // Turn B - Task 2 2nd obstacle
 80023d8:	4b4c      	ldr	r3, [pc, #304]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4a4b      	ldr	r2, [pc, #300]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	225f      	movs	r2, #95	; 0x5f
 80023e4:	711a      	strb	r2, [r3, #4]
 80023e6:	4b49      	ldr	r3, [pc, #292]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	b291      	uxth	r1, r2
 80023ee:	4a47      	ldr	r2, [pc, #284]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	460a      	mov	r2, r1
 80023f6:	80da      	strh	r2, [r3, #6]
 80023f8:	4b44      	ldr	r3, [pc, #272]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4a43      	ldr	r2, [pc, #268]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002400:	7892      	ldrb	r2, [r2, #2]
 8002402:	fb93 f1f2 	sdiv	r1, r3, r2
 8002406:	fb01 f202 	mul.w	r2, r1, r2
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b3f      	ldr	r3, [pc, #252]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e04a      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'G' && aRxBuffer[1] == 'H')
 8002414:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b47      	cmp	r3, #71	; 0x47
 800241a:	d121      	bne.n	8002460 <HAL_UART_RxCpltCallback+0x8b4>
 800241c:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	2b48      	cmp	r3, #72	; 0x48
 8002422:	d11d      	bne.n	8002460 <HAL_UART_RxCpltCallback+0x8b4>
    __ADD_COMMAND(cQueue, 96, val); // Go Home - Task 2 go back to carpark
 8002424:	4b39      	ldr	r3, [pc, #228]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4a38      	ldr	r2, [pc, #224]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	2260      	movs	r2, #96	; 0x60
 8002430:	711a      	strb	r2, [r3, #4]
 8002432:	4b36      	ldr	r3, [pc, #216]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	b291      	uxth	r1, r2
 800243a:	4a34      	ldr	r2, [pc, #208]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	460a      	mov	r2, r1
 8002442:	80da      	strh	r2, [r3, #6]
 8002444:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	4a30      	ldr	r2, [pc, #192]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 800244c:	7892      	ldrb	r2, [r2, #2]
 800244e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002452:	fb01 f202 	mul.w	r2, r1, r2
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b2c      	ldr	r3, [pc, #176]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e024      	b.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
  else if (aRxBuffer[0] == 'A' && aRxBuffer[1] == 'M')
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b41      	cmp	r3, #65	; 0x41
 8002466:	d120      	bne.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	2b4d      	cmp	r3, #77	; 0x4d
 800246e:	d11c      	bne.n	80024aa <HAL_UART_RxCpltCallback+0x8fe>
    __ADD_COMMAND(cQueue, 97, val); // Avocado Milkshake - use after Turn A to straighten the robot
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4a25      	ldr	r2, [pc, #148]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	2261      	movs	r2, #97	; 0x61
 800247c:	711a      	strb	r2, [r3, #4]
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	b291      	uxth	r1, r2
 8002486:	4a21      	ldr	r2, [pc, #132]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	460a      	mov	r2, r1
 800248e:	80da      	strh	r2, [r3, #6]
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 8002498:	7892      	ldrb	r2, [r2, #2]
 800249a:	fb93 f1f2 	sdiv	r1, r3, r2
 800249e:	fb01 f202 	mul.w	r2, r1, r2
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80024a8:	701a      	strb	r2, [r3, #0]
  if (!__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d019      	beq.n	80024ea <HAL_UART_RxCpltCallback+0x93e>
  {
    __READ_COMMAND(cQueue, curCmd, rxMsg);
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80024b8:	785b      	ldrb	r3, [r3, #1]
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <HAL_UART_RxCpltCallback+0x964>)
 80024bc:	4913      	ldr	r1, [pc, #76]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80024c8:	785b      	ldrb	r3, [r3, #1]
 80024ca:	3301      	adds	r3, #1
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80024ce:	7892      	ldrb	r2, [r2, #2]
 80024d0:	fb93 f1f2 	sdiv	r1, r3, r2
 80024d4:	fb01 f202 	mul.w	r2, r1, r2
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_UART_RxCpltCallback+0x960>)
 80024de:	705a      	strb	r2, [r3, #1]
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HAL_UART_RxCpltCallback+0x968>)
 80024e2:	210f      	movs	r1, #15
 80024e4:	480c      	ldr	r0, [pc, #48]	; (8002518 <HAL_UART_RxCpltCallback+0x96c>)
 80024e6:	f00c fe75 	bl	800f1d4 <sniprintf>
  }

  // clear aRx buffer
  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_UART_RxCpltCallback+0x970>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_UART_RxCpltCallback+0x974>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_UART_RxCpltCallback+0x95c>)
 80024fa:	4808      	ldr	r0, [pc, #32]	; (800251c <HAL_UART_RxCpltCallback+0x970>)
 80024fc:	f008 fd7d 	bl	800affa <HAL_UART_Receive_IT>
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000488 	.word	0x20000488
 800250c:	20000494 	.word	0x20000494
 8002510:	200004c8 	.word	0x200004c8
 8002514:	0800fbf4 	.word	0x0800fbf4
 8002518:	200004cc 	.word	0x200004cc
 800251c:	2000040c 	.word	0x2000040c
 8002520:	20000000 	.word	0x20000000

08002524 <PIDConfigInit>:

// pid
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002530:	edc7 0a01 	vstr	s1, [r7, #4]
 8002534:	ed87 1a00 	vstr	s2, [r7]
  cfg->Kp = Kp;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	601a      	str	r2, [r3, #0]
  cfg->Ki = Ki;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	605a      	str	r2, [r3, #4]
  cfg->Kd = Kd;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	609a      	str	r2, [r3, #8]
  cfg->ek1 = 0;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <PIDConfigReset>:

void PIDConfigReset(PIDConfig *cfg)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HCSR04_Read>:

void HCSR04_Read(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET);
 8002590:	2200      	movs	r2, #0
 8002592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002596:	481a      	ldr	r0, [pc, #104]	; (8002600 <HCSR04_Read+0x74>)
 8002598:	f005 f96a 	bl	8007870 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HCSR04_Read+0x78>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24
 80025a4:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HCSR04_Read+0x78>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2b31      	cmp	r3, #49	; 0x31
 80025ac:	d9fa      	bls.n	80025a4 <HCSR04_Read+0x18>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 80025ae:	2201      	movs	r2, #1
 80025b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b4:	4812      	ldr	r0, [pc, #72]	; (8002600 <HCSR04_Read+0x74>)
 80025b6:	f005 f95b 	bl	8007870 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 10);                                            // wait for 10 us
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HCSR04_Read+0x78>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HCSR04_Read+0x78>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d9fa      	bls.n	80025c2 <HCSR04_Read+0x36>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025d2:	480b      	ldr	r0, [pc, #44]	; (8002600 <HCSR04_Read+0x74>)
 80025d4:	f005 f94c 	bl	8007870 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HCSR04_Read+0x78>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HCSR04_Read+0x78>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2b31      	cmp	r3, #49	; 0x31
 80025e8:	d9fa      	bls.n	80025e0 <HCSR04_Read+0x54>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HCSR04_Read+0x7c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HCSR04_Read+0x7c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0204 	orr.w	r2, r2, #4
 80025f8:	60da      	str	r2, [r3, #12]
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	2000037c 	.word	0x2000037c
 8002608:	20000334 	.word	0x20000334

0800260c <StraightLineMove>:

int8_t dir = 1;
int correction = 0;

void StraightLineMove(const uint8_t speedMode)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af04      	add	r7, sp, #16
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]

  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 8002616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800261a:	9302      	str	r3, [sp, #8]
 800261c:	2302      	movs	r3, #2
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	4ba9      	ldr	r3, [pc, #676]	; (80028c8 <StraightLineMove+0x2bc>)
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2301      	movs	r3, #1
 8002626:	2237      	movs	r2, #55	; 0x37
 8002628:	21d0      	movs	r1, #208	; 0xd0
 800262a:	48a8      	ldr	r0, [pc, #672]	; (80028cc <StraightLineMove+0x2c0>)
 800262c:	f005 fb78 	bl	8007d20 <HAL_I2C_Mem_Read>
 8002630:	4ba5      	ldr	r3, [pc, #660]	; (80028c8 <StraightLineMove+0x2bc>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	b21a      	sxth	r2, r3
 8002638:	4ba3      	ldr	r3, [pc, #652]	; (80028c8 <StraightLineMove+0x2bc>)
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	b21b      	sxth	r3, r3
 800263e:	4313      	orrs	r3, r2
 8002640:	b21a      	sxth	r2, r3
 8002642:	4ba3      	ldr	r3, [pc, #652]	; (80028d0 <StraightLineMove+0x2c4>)
 8002644:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8002646:	4ba3      	ldr	r3, [pc, #652]	; (80028d4 <StraightLineMove+0x2c8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	b25a      	sxtb	r2, r3
 800265c:	4b9e      	ldr	r3, [pc, #632]	; (80028d8 <StraightLineMove+0x2cc>)
 800265e:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 8002660:	4b9b      	ldr	r3, [pc, #620]	; (80028d0 <StraightLineMove+0x2c4>)
 8002662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002666:	f113 0f04 	cmn.w	r3, #4
 800266a:	db04      	blt.n	8002676 <StraightLineMove+0x6a>
 800266c:	4b98      	ldr	r3, [pc, #608]	; (80028d0 <StraightLineMove+0x2c4>)
 800266e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002672:	2b0b      	cmp	r3, #11
 8002674:	dd07      	ble.n	8002686 <StraightLineMove+0x7a>
 8002676:	4b96      	ldr	r3, [pc, #600]	; (80028d0 <StraightLineMove+0x2c4>)
 8002678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267c:	ee07 3a90 	vmov	s15, r3
 8002680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002684:	e001      	b.n	800268a <StraightLineMove+0x7e>
 8002686:	eddf 7a95 	vldr	s15, [pc, #596]	; 80028dc <StraightLineMove+0x2d0>
 800268a:	4b95      	ldr	r3, [pc, #596]	; (80028e0 <StraightLineMove+0x2d4>)
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002694:	4b92      	ldr	r3, [pc, #584]	; (80028e0 <StraightLineMove+0x2d4>)
 8002696:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d164      	bne.n	800276a <StraightLineMove+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80026a0:	4b90      	ldr	r3, [pc, #576]	; (80028e4 <StraightLineMove+0x2d8>)
 80026a2:	ed93 7a00 	vldr	s14, [r3]
 80026a6:	4b8e      	ldr	r3, [pc, #568]	; (80028e0 <StraightLineMove+0x2d4>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b0:	4b8c      	ldr	r3, [pc, #560]	; (80028e4 <StraightLineMove+0x2d8>)
 80026b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80026b6:	4b8b      	ldr	r3, [pc, #556]	; (80028e4 <StraightLineMove+0x2d8>)
 80026b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80026bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c4:	4b87      	ldr	r3, [pc, #540]	; (80028e4 <StraightLineMove+0x2d8>)
 80026c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80026ca:	4b86      	ldr	r3, [pc, #536]	; (80028e4 <StraightLineMove+0x2d8>)
 80026cc:	ed93 6a03 	vldr	s12, [r3, #12]
 80026d0:	4b83      	ldr	r3, [pc, #524]	; (80028e0 <StraightLineMove+0x2d4>)
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e6:	ee17 2a90 	vmov	r2, s15
 80026ea:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <StraightLineMove+0x2dc>)
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	4b7c      	ldr	r3, [pc, #496]	; (80028e0 <StraightLineMove+0x2d4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7c      	ldr	r2, [pc, #496]	; (80028e4 <StraightLineMove+0x2d8>)
 80026f4:	60d3      	str	r3, [r2, #12]
 80026f6:	4b7b      	ldr	r3, [pc, #492]	; (80028e4 <StraightLineMove+0x2d8>)
 80026f8:	ed93 7a04 	vldr	s14, [r3, #16]
 80026fc:	4b78      	ldr	r3, [pc, #480]	; (80028e0 <StraightLineMove+0x2d4>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	4b77      	ldr	r3, [pc, #476]	; (80028e4 <StraightLineMove+0x2d8>)
 8002708:	edc3 7a04 	vstr	s15, [r3, #16]
 800270c:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <StraightLineMove+0x2dc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002714:	dc06      	bgt.n	8002724 <StraightLineMove+0x118>
 8002716:	4b74      	ldr	r3, [pc, #464]	; (80028e8 <StraightLineMove+0x2dc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a74      	ldr	r2, [pc, #464]	; (80028ec <StraightLineMove+0x2e0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	bfb8      	it	lt
 8002720:	4613      	movlt	r3, r2
 8002722:	e001      	b.n	8002728 <StraightLineMove+0x11c>
 8002724:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002728:	4a6f      	ldr	r2, [pc, #444]	; (80028e8 <StraightLineMove+0x2dc>)
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b6a      	ldr	r3, [pc, #424]	; (80028d8 <StraightLineMove+0x2cc>)
 800272e:	f993 3000 	ldrsb.w	r3, [r3]
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <StraightLineMove+0x2dc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	fb12 f303 	smulbb	r3, r2, r3
 800273e:	b29b      	uxth	r3, r3
 8002740:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <StraightLineMove+0x2e4>)
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <StraightLineMove+0x2cc>)
 800274c:	f993 3000 	ldrsb.w	r3, [r3]
 8002750:	b29a      	uxth	r2, r3
 8002752:	4b65      	ldr	r3, [pc, #404]	; (80028e8 <StraightLineMove+0x2dc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	fb12 f303 	smulbb	r3, r2, r3
 800275c:	b29b      	uxth	r3, r3
 800275e:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b63      	ldr	r3, [pc, #396]	; (80028f4 <StraightLineMove+0x2e8>)
 8002766:	801a      	strh	r2, [r3, #0]
 8002768:	e0ef      	b.n	800294a <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_2)
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d165      	bne.n	800283c <StraightLineMove+0x230>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002770:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <StraightLineMove+0x2ec>)
 8002772:	ed93 7a00 	vldr	s14, [r3]
 8002776:	4b5a      	ldr	r3, [pc, #360]	; (80028e0 <StraightLineMove+0x2d4>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002780:	4b5d      	ldr	r3, [pc, #372]	; (80028f8 <StraightLineMove+0x2ec>)
 8002782:	edd3 6a01 	vldr	s13, [r3, #4]
 8002786:	4b5c      	ldr	r3, [pc, #368]	; (80028f8 <StraightLineMove+0x2ec>)
 8002788:	edd3 7a04 	vldr	s15, [r3, #16]
 800278c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	4b58      	ldr	r3, [pc, #352]	; (80028f8 <StraightLineMove+0x2ec>)
 8002796:	edd3 6a02 	vldr	s13, [r3, #8]
 800279a:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <StraightLineMove+0x2ec>)
 800279c:	ed93 6a03 	vldr	s12, [r3, #12]
 80027a0:	4b4f      	ldr	r3, [pc, #316]	; (80028e0 <StraightLineMove+0x2d4>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027b6:	ee17 2a90 	vmov	r2, s15
 80027ba:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <StraightLineMove+0x2dc>)
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <StraightLineMove+0x2d4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a4d      	ldr	r2, [pc, #308]	; (80028f8 <StraightLineMove+0x2ec>)
 80027c4:	60d3      	str	r3, [r2, #12]
 80027c6:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <StraightLineMove+0x2ec>)
 80027c8:	ed93 7a04 	vldr	s14, [r3, #16]
 80027cc:	4b44      	ldr	r3, [pc, #272]	; (80028e0 <StraightLineMove+0x2d4>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <StraightLineMove+0x2ec>)
 80027d8:	edc3 7a04 	vstr	s15, [r3, #16]
 80027dc:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <StraightLineMove+0x2dc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80027e4:	dc06      	bgt.n	80027f4 <StraightLineMove+0x1e8>
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <StraightLineMove+0x2dc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a44      	ldr	r2, [pc, #272]	; (80028fc <StraightLineMove+0x2f0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bfb8      	it	lt
 80027f0:	4613      	movlt	r3, r2
 80027f2:	e001      	b.n	80027f8 <StraightLineMove+0x1ec>
 80027f4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80027f8:	4a3b      	ldr	r2, [pc, #236]	; (80028e8 <StraightLineMove+0x2dc>)
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <StraightLineMove+0x2cc>)
 80027fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002802:	b29a      	uxth	r2, r3
 8002804:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <StraightLineMove+0x2dc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	fb12 f303 	smulbb	r3, r2, r3
 800280e:	b29b      	uxth	r3, r3
 8002810:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <StraightLineMove+0x2e4>)
 8002818:	801a      	strh	r2, [r3, #0]
 800281a:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <StraightLineMove+0x2cc>)
 800281c:	f993 3000 	ldrsb.w	r3, [r3]
 8002820:	b29a      	uxth	r2, r3
 8002822:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <StraightLineMove+0x2dc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	fb12 f303 	smulbb	r3, r2, r3
 800282c:	b29b      	uxth	r3, r3
 800282e:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002832:	3308      	adds	r3, #8
 8002834:	b29a      	uxth	r2, r3
 8002836:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <StraightLineMove+0x2e8>)
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	e086      	b.n	800294a <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_1)
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	2b01      	cmp	r3, #1
 8002840:	f040 8083 	bne.w	800294a <StraightLineMove+0x33e>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002844:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <StraightLineMove+0x2f4>)
 8002846:	ed93 7a00 	vldr	s14, [r3]
 800284a:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <StraightLineMove+0x2d4>)
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002854:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <StraightLineMove+0x2f4>)
 8002856:	edd3 6a01 	vldr	s13, [r3, #4]
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <StraightLineMove+0x2f4>)
 800285c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002864:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <StraightLineMove+0x2f4>)
 800286a:	edd3 6a02 	vldr	s13, [r3, #8]
 800286e:	4b24      	ldr	r3, [pc, #144]	; (8002900 <StraightLineMove+0x2f4>)
 8002870:	ed93 6a03 	vldr	s12, [r3, #12]
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <StraightLineMove+0x2d4>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800287e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800288a:	ee17 2a90 	vmov	r2, s15
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <StraightLineMove+0x2dc>)
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <StraightLineMove+0x2d4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <StraightLineMove+0x2f4>)
 8002898:	60d3      	str	r3, [r2, #12]
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <StraightLineMove+0x2f4>)
 800289c:	ed93 7a04 	vldr	s14, [r3, #16]
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <StraightLineMove+0x2d4>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <StraightLineMove+0x2f4>)
 80028ac:	edc3 7a04 	vstr	s15, [r3, #16]
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <StraightLineMove+0x2dc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80028b8:	dc24      	bgt.n	8002904 <StraightLineMove+0x2f8>
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <StraightLineMove+0x2dc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <StraightLineMove+0x2f0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bfb8      	it	lt
 80028c4:	4613      	movlt	r3, r2
 80028c6:	e01f      	b.n	8002908 <StraightLineMove+0x2fc>
 80028c8:	200004e8 	.word	0x200004e8
 80028cc:	20000250 	.word	0x20000250
 80028d0:	200004ea 	.word	0x200004ea
 80028d4:	200002ec 	.word	0x200002ec
 80028d8:	20000140 	.word	0x20000140
 80028dc:	00000000 	.word	0x00000000
 80028e0:	200004e4 	.word	0x200004e4
 80028e4:	20000514 	.word	0x20000514
 80028e8:	20000564 	.word	0x20000564
 80028ec:	fffffda8 	.word	0xfffffda8
 80028f0:	200004ec 	.word	0x200004ec
 80028f4:	200004ee 	.word	0x200004ee
 80028f8:	20000528 	.word	0x20000528
 80028fc:	fffffd44 	.word	0xfffffd44
 8002900:	20000500 	.word	0x20000500
 8002904:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002908:	4a17      	ldr	r2, [pc, #92]	; (8002968 <StraightLineMove+0x35c>)
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b17      	ldr	r3, [pc, #92]	; (800296c <StraightLineMove+0x360>)
 800290e:	f993 3000 	ldrsb.w	r3, [r3]
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <StraightLineMove+0x35c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	fb12 f303 	smulbb	r3, r2, r3
 800291e:	b29b      	uxth	r3, r3
 8002920:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <StraightLineMove+0x364>)
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <StraightLineMove+0x360>)
 800292c:	f993 3000 	ldrsb.w	r3, [r3]
 8002930:	b29a      	uxth	r2, r3
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <StraightLineMove+0x35c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	fb12 f303 	smulbb	r3, r2, r3
 800293c:	b29b      	uxth	r3, r3
 800293e:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002942:	330c      	adds	r3, #12
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <StraightLineMove+0x368>)
 8002948:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <StraightLineMove+0x364>)
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <StraightLineMove+0x36c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	635a      	str	r2, [r3, #52]	; 0x34
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <StraightLineMove+0x368>)
 8002956:	881a      	ldrh	r2, [r3, #0]
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <StraightLineMove+0x36c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000564 	.word	0x20000564
 800296c:	20000140 	.word	0x20000140
 8002970:	200004ec 	.word	0x200004ec
 8002974:	200004ee 	.word	0x200004ee
 8002978:	200003c4 	.word	0x200003c4
 800297c:	00000000 	.word	0x00000000

08002980 <RobotMoveDist>:
 * @param targetDist Pointer to the target distance to move.
 * @param dir The direction to move the robot in.
 * @param speedMode The speed mode to use for the movement.
 */
void RobotMoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
 800298c:	4613      	mov	r3, r2
 800298e:	70bb      	strb	r3, [r7, #2]
  angleNow = 0;
 8002990:	4ba1      	ldr	r3, [pc, #644]	; (8002c18 <RobotMoveDist+0x298>)
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
  gyroZ = 0; // reset angle for PID
 8002998:	4ba0      	ldr	r3, [pc, #640]	; (8002c1c <RobotMoveDist+0x29c>)
 800299a:	2200      	movs	r2, #0
 800299c:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 800299e:	48a0      	ldr	r0, [pc, #640]	; (8002c20 <RobotMoveDist+0x2a0>)
 80029a0:	f7ff fde1 	bl	8002566 <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 80029a4:	489f      	ldr	r0, [pc, #636]	; (8002c24 <RobotMoveDist+0x2a4>)
 80029a6:	f7ff fdde 	bl	8002566 <PIDConfigReset>
  PIDConfigReset(&pidFast);
 80029aa:	489f      	ldr	r0, [pc, #636]	; (8002c28 <RobotMoveDist+0x2a8>)
 80029ac:	f7ff fddb 	bl	8002566 <PIDConfigReset>
  curDistTick = 0;
 80029b0:	4b9e      	ldr	r3, [pc, #632]	; (8002c2c <RobotMoveDist+0x2ac>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	801a      	strh	r2, [r3, #0]
  dist_dL = 0;
 80029b6:	4b9e      	ldr	r3, [pc, #632]	; (8002c30 <RobotMoveDist+0x2b0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	801a      	strh	r2, [r3, #0]
  __GET_TARGETTICK(*targetDist, targetDistTick);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fdb9 	bl	8000538 <__aeabi_f2d>
 80029c6:	a38e      	add	r3, pc, #568	; (adr r3, 8002c00 <RobotMoveDist+0x280>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe0c 	bl	80005e8 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	a38b      	add	r3, pc, #556	; (adr r3, 8002c08 <RobotMoveDist+0x288>)
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	f7fd fc4b 	bl	8000278 <__aeabi_dsub>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	4b91      	ldr	r3, [pc, #580]	; (8002c34 <RobotMoveDist+0x2b4>)
 80029f0:	f7fd ff24 	bl	800083c <__aeabi_ddiv>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	4b8d      	ldr	r3, [pc, #564]	; (8002c38 <RobotMoveDist+0x2b8>)
 8002a02:	f7fd fdf1 	bl	80005e8 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	4b8a      	ldr	r3, [pc, #552]	; (8002c3c <RobotMoveDist+0x2bc>)
 8002a14:	f7fd fc30 	bl	8000278 <__aeabi_dsub>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f7fe f87c 	bl	8000b1c <__aeabi_d2uiz>
 8002a24:	4603      	mov	r3, r0
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	4b85      	ldr	r3, [pc, #532]	; (8002c40 <RobotMoveDist+0x2c0>)
 8002a2a:	801a      	strh	r2, [r3, #0]

  last_curTask_tick = HAL_GetTick();
 8002a2c:	f003 ffe0 	bl	80069f0 <HAL_GetTick>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a84      	ldr	r2, [pc, #528]	; (8002c44 <RobotMoveDist+0x2c4>)
 8002a34:	6013      	str	r3, [r2, #0]
  __SET_MOTOR_DIRECTION(dir);
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	2104      	movs	r1, #4
 8002a46:	4880      	ldr	r0, [pc, #512]	; (8002c48 <RobotMoveDist+0x2c8>)
 8002a48:	f004 ff12 	bl	8007870 <HAL_GPIO_WritePin>
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2108      	movs	r1, #8
 8002a5c:	487a      	ldr	r0, [pc, #488]	; (8002c48 <RobotMoveDist+0x2c8>)
 8002a5e:	f004 ff07 	bl	8007870 <HAL_GPIO_WritePin>
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2120      	movs	r1, #32
 8002a72:	4875      	ldr	r0, [pc, #468]	; (8002c48 <RobotMoveDist+0x2c8>)
 8002a74:	f004 fefc 	bl	8007870 <HAL_GPIO_WritePin>
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	2110      	movs	r1, #16
 8002a88:	486f      	ldr	r0, [pc, #444]	; (8002c48 <RobotMoveDist+0x2c8>)
 8002a8a:	f004 fef1 	bl	8007870 <HAL_GPIO_WritePin>
  __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002a8e:	4b6f      	ldr	r3, [pc, #444]	; (8002c4c <RobotMoveDist+0x2cc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	4b6e      	ldr	r3, [pc, #440]	; (8002c50 <RobotMoveDist+0x2d0>)
 8002a98:	801a      	strh	r2, [r3, #0]
  do
  {

    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002a9a:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <RobotMoveDist+0x2cc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b6a      	ldr	r3, [pc, #424]	; (8002c4c <RobotMoveDist+0x2cc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d117      	bne.n	8002ae0 <RobotMoveDist+0x160>
 8002ab0:	4b67      	ldr	r3, [pc, #412]	; (8002c50 <RobotMoveDist+0x2d0>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d806      	bhi.n	8002aca <RobotMoveDist+0x14a>
 8002abc:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <RobotMoveDist+0x2d0>)
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	e007      	b.n	8002ada <RobotMoveDist+0x15a>
 8002aca:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <RobotMoveDist+0x2d0>)
 8002acc:	881a      	ldrh	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4a55      	ldr	r2, [pc, #340]	; (8002c30 <RobotMoveDist+0x2b0>)
 8002adc:	8013      	strh	r3, [r2, #0]
 8002ade:	e016      	b.n	8002b0e <RobotMoveDist+0x18e>
 8002ae0:	4b5b      	ldr	r3, [pc, #364]	; (8002c50 <RobotMoveDist+0x2d0>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d306      	bcc.n	8002afa <RobotMoveDist+0x17a>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	4b57      	ldr	r3, [pc, #348]	; (8002c50 <RobotMoveDist+0x2d0>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	e007      	b.n	8002b0a <RobotMoveDist+0x18a>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b54      	ldr	r3, [pc, #336]	; (8002c50 <RobotMoveDist+0x2d0>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4a49      	ldr	r2, [pc, #292]	; (8002c30 <RobotMoveDist+0x2b0>)
 8002b0c:	8013      	strh	r3, [r2, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	4b4f      	ldr	r3, [pc, #316]	; (8002c50 <RobotMoveDist+0x2d0>)
 8002b14:	801a      	strh	r2, [r3, #0]
    curDistTick += dist_dL;
 8002b16:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <RobotMoveDist+0x2ac>)
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	4b45      	ldr	r3, [pc, #276]	; (8002c30 <RobotMoveDist+0x2b0>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <RobotMoveDist+0x2ac>)
 8002b24:	801a      	strh	r2, [r3, #0]
    if (curDistTick >= targetDistTick)
 8002b26:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <RobotMoveDist+0x2ac>)
 8002b28:	881a      	ldrh	r2, [r3, #0]
 8002b2a:	4b45      	ldr	r3, [pc, #276]	; (8002c40 <RobotMoveDist+0x2c0>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	f080 80a5 	bcs.w	8002c7e <RobotMoveDist+0x2fe>
      break;

    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002b34:	f003 ff5c 	bl	80069f0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <RobotMoveDist+0x2c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	d9aa      	bls.n	8002a9a <RobotMoveDist+0x11a>
    {
      if (speedMode == SPEED_MODE_T)
 8002b44:	78bb      	ldrb	r3, [r7, #2]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <RobotMoveDist+0x1d2>
      {
        StraightLineMove(SPEED_MODE_T);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7ff fd5e 	bl	800260c <StraightLineMove>
 8002b50:	e08f      	b.n	8002c72 <RobotMoveDist+0x2f2>
      }
      else
      {
        speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <RobotMoveDist+0x2ac>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b39      	ldr	r3, [pc, #228]	; (8002c40 <RobotMoveDist+0x2c0>)
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bfb8      	it	lt
 8002b62:	425b      	neglt	r3, r3
 8002b64:	4a3b      	ldr	r2, [pc, #236]	; (8002c54 <RobotMoveDist+0x2d4>)
 8002b66:	fb82 1203 	smull	r1, r2, r2, r3
 8002b6a:	11d2      	asrs	r2, r2, #7
 8002b6c:	17db      	asrs	r3, r3, #31
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b78:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <RobotMoveDist+0x2d8>)
 8002b7a:	edc3 7a00 	vstr	s15, [r3]
        if (speedMode == SPEED_MODE_1)
 8002b7e:	78bb      	ldrb	r3, [r7, #2]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d11e      	bne.n	8002bc2 <RobotMoveDist+0x242>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002b84:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <RobotMoveDist+0x2d8>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	dd02      	ble.n	8002b9e <RobotMoveDist+0x21e>
 8002b98:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b9c:	e00e      	b.n	8002bbc <RobotMoveDist+0x23c>
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <RobotMoveDist+0x2d8>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb0:	d502      	bpl.n	8002bb8 <RobotMoveDist+0x238>
 8002bb2:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002bb6:	e001      	b.n	8002bbc <RobotMoveDist+0x23c>
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <RobotMoveDist+0x2d8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a26      	ldr	r2, [pc, #152]	; (8002c58 <RobotMoveDist+0x2d8>)
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e052      	b.n	8002c68 <RobotMoveDist+0x2e8>
        else if (speedMode == SPEED_MODE_2)
 8002bc2:	78bb      	ldrb	r3, [r7, #2]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d14f      	bne.n	8002c68 <RobotMoveDist+0x2e8>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <RobotMoveDist+0x2d8>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bda:	dd02      	ble.n	8002be2 <RobotMoveDist+0x262>
 8002bdc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002be0:	e040      	b.n	8002c64 <RobotMoveDist+0x2e4>
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <RobotMoveDist+0x2d8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fca6 	bl	8000538 <__aeabi_f2d>
 8002bec:	a308      	add	r3, pc, #32	; (adr r3, 8002c10 <RobotMoveDist+0x290>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7fd ff6b 	bl	8000acc <__aeabi_dcmplt>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d031      	beq.n	8002c60 <RobotMoveDist+0x2e0>
 8002bfc:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <RobotMoveDist+0x2dc>)
 8002bfe:	e031      	b.n	8002c64 <RobotMoveDist+0x2e4>
 8002c00:	fc66b22a 	.word	0xfc66b22a
 8002c04:	3ff266ac 	.word	0x3ff266ac
 8002c08:	bb2526f8 	.word	0xbb2526f8
 8002c0c:	3feee3d4 	.word	0x3feee3d4
 8002c10:	9999999a 	.word	0x9999999a
 8002c14:	3fd99999 	.word	0x3fd99999
 8002c18:	200004e4 	.word	0x200004e4
 8002c1c:	200004ea 	.word	0x200004ea
 8002c20:	20000514 	.word	0x20000514
 8002c24:	20000500 	.word	0x20000500
 8002c28:	20000528 	.word	0x20000528
 8002c2c:	200004f8 	.word	0x200004f8
 8002c30:	200004fc 	.word	0x200004fc
 8002c34:	40340000 	.word	0x40340000
 8002c38:	4094a000 	.word	0x4094a000
 8002c3c:	40240000 	.word	0x40240000
 8002c40:	200004fa 	.word	0x200004fa
 8002c44:	200004f0 	.word	0x200004f0
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	200002ec 	.word	0x200002ec
 8002c50:	200004fe 	.word	0x200004fe
 8002c54:	21195767 	.word	0x21195767
 8002c58:	20000138 	.word	0x20000138
 8002c5c:	3ecccccd 	.word	0x3ecccccd
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <RobotMoveDist+0x318>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <RobotMoveDist+0x318>)
 8002c66:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002c68:	78bb      	ldrb	r3, [r7, #2]
 8002c6a:	490b      	ldr	r1, [pc, #44]	; (8002c98 <RobotMoveDist+0x318>)
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 f819 	bl	8002ca4 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8002c72:	f003 febd 	bl	80069f0 <HAL_GetTick>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <RobotMoveDist+0x31c>)
 8002c7a:	6013      	str	r3, [r2, #0]
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002c7c:	e70d      	b.n	8002a9a <RobotMoveDist+0x11a>
      break;
 8002c7e:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <RobotMoveDist+0x320>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2200      	movs	r2, #0
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <RobotMoveDist+0x320>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000138 	.word	0x20000138
 8002c9c:	200004f0 	.word	0x200004f0
 8002ca0:	200003c4 	.word	0x200003c4

08002ca4 <StraightLineMoveSpeedScale>:
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
}

void StraightLineMoveSpeedScale(const uint8_t speedMode, float *speedScale)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af04      	add	r7, sp, #16
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 8002cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb4:	9302      	str	r3, [sp, #8]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	4b9b      	ldr	r3, [pc, #620]	; (8002f28 <StraightLineMoveSpeedScale+0x284>)
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	2237      	movs	r2, #55	; 0x37
 8002cc2:	21d0      	movs	r1, #208	; 0xd0
 8002cc4:	4899      	ldr	r0, [pc, #612]	; (8002f2c <StraightLineMoveSpeedScale+0x288>)
 8002cc6:	f005 f82b 	bl	8007d20 <HAL_I2C_Mem_Read>
 8002cca:	4b97      	ldr	r3, [pc, #604]	; (8002f28 <StraightLineMoveSpeedScale+0x284>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	b21a      	sxth	r2, r3
 8002cd2:	4b95      	ldr	r3, [pc, #596]	; (8002f28 <StraightLineMoveSpeedScale+0x284>)
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	b21b      	sxth	r3, r3
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	4b94      	ldr	r3, [pc, #592]	; (8002f30 <StraightLineMoveSpeedScale+0x28c>)
 8002cde:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 8002ce0:	4b94      	ldr	r3, [pc, #592]	; (8002f34 <StraightLineMoveSpeedScale+0x290>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d101      	bne.n	8002cf2 <StraightLineMoveSpeedScale+0x4e>
 8002cee:	2201      	movs	r2, #1
 8002cf0:	e001      	b.n	8002cf6 <StraightLineMoveSpeedScale+0x52>
 8002cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf6:	4b90      	ldr	r3, [pc, #576]	; (8002f38 <StraightLineMoveSpeedScale+0x294>)
 8002cf8:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002cfa:	4b8d      	ldr	r3, [pc, #564]	; (8002f30 <StraightLineMoveSpeedScale+0x28c>)
 8002cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d00:	f113 0f04 	cmn.w	r3, #4
 8002d04:	db04      	blt.n	8002d10 <StraightLineMoveSpeedScale+0x6c>
 8002d06:	4b8a      	ldr	r3, [pc, #552]	; (8002f30 <StraightLineMoveSpeedScale+0x28c>)
 8002d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d0c:	2b0b      	cmp	r3, #11
 8002d0e:	dd07      	ble.n	8002d20 <StraightLineMoveSpeedScale+0x7c>
 8002d10:	4b87      	ldr	r3, [pc, #540]	; (8002f30 <StraightLineMoveSpeedScale+0x28c>)
 8002d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d1e:	e001      	b.n	8002d24 <StraightLineMoveSpeedScale+0x80>
 8002d20:	eddf 7a86 	vldr	s15, [pc, #536]	; 8002f3c <StraightLineMoveSpeedScale+0x298>
 8002d24:	4b86      	ldr	r3, [pc, #536]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002d26:	ed93 7a00 	vldr	s14, [r3]
 8002d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d2e:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002d30:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d165      	bne.n	8002e06 <StraightLineMoveSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002d3a:	4b82      	ldr	r3, [pc, #520]	; (8002f44 <StraightLineMoveSpeedScale+0x2a0>)
 8002d3c:	ed93 7a00 	vldr	s14, [r3]
 8002d40:	4b7f      	ldr	r3, [pc, #508]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d4a:	4b7e      	ldr	r3, [pc, #504]	; (8002f44 <StraightLineMoveSpeedScale+0x2a0>)
 8002d4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d50:	4b7c      	ldr	r3, [pc, #496]	; (8002f44 <StraightLineMoveSpeedScale+0x2a0>)
 8002d52:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5e:	4b79      	ldr	r3, [pc, #484]	; (8002f44 <StraightLineMoveSpeedScale+0x2a0>)
 8002d60:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d64:	4b77      	ldr	r3, [pc, #476]	; (8002f44 <StraightLineMoveSpeedScale+0x2a0>)
 8002d66:	ed93 6a03 	vldr	s12, [r3, #12]
 8002d6a:	4b75      	ldr	r3, [pc, #468]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002d6c:	edd3 7a00 	vldr	s15, [r3]
 8002d70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d80:	ee17 2a90 	vmov	r2, s15
 8002d84:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	4b6d      	ldr	r3, [pc, #436]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6d      	ldr	r2, [pc, #436]	; (8002f44 <StraightLineMoveSpeedScale+0x2a0>)
 8002d8e:	60d3      	str	r3, [r2, #12]
 8002d90:	4b6c      	ldr	r3, [pc, #432]	; (8002f44 <StraightLineMoveSpeedScale+0x2a0>)
 8002d92:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d96:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da0:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <StraightLineMoveSpeedScale+0x2a0>)
 8002da2:	edc3 7a04 	vstr	s15, [r3, #16]
 8002da6:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002dae:	dc06      	bgt.n	8002dbe <StraightLineMoveSpeedScale+0x11a>
 8002db0:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a65      	ldr	r2, [pc, #404]	; (8002f4c <StraightLineMoveSpeedScale+0x2a8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	bfb8      	it	lt
 8002dba:	4613      	movlt	r3, r2
 8002dbc:	e001      	b.n	8002dc2 <StraightLineMoveSpeedScale+0x11e>
 8002dbe:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002dc2:	4a61      	ldr	r2, [pc, #388]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <StraightLineMoveSpeedScale+0x294>)
 8002dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	fb12 f303 	smulbb	r3, r2, r3
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	4b5b      	ldr	r3, [pc, #364]	; (8002f50 <StraightLineMoveSpeedScale+0x2ac>)
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <StraightLineMoveSpeedScale+0x294>)
 8002de6:	f993 3000 	ldrsb.w	r3, [r3]
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	fb12 f303 	smulbb	r3, r2, r3
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b54      	ldr	r3, [pc, #336]	; (8002f54 <StraightLineMoveSpeedScale+0x2b0>)
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	e067      	b.n	8002ed6 <StraightLineMoveSpeedScale+0x232>
  else if (speedMode == SPEED_MODE_2)
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d164      	bne.n	8002ed6 <StraightLineMoveSpeedScale+0x232>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002e0c:	4b52      	ldr	r3, [pc, #328]	; (8002f58 <StraightLineMoveSpeedScale+0x2b4>)
 8002e0e:	ed93 7a00 	vldr	s14, [r3]
 8002e12:	4b4b      	ldr	r3, [pc, #300]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1c:	4b4e      	ldr	r3, [pc, #312]	; (8002f58 <StraightLineMoveSpeedScale+0x2b4>)
 8002e1e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e22:	4b4d      	ldr	r3, [pc, #308]	; (8002f58 <StraightLineMoveSpeedScale+0x2b4>)
 8002e24:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e30:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <StraightLineMoveSpeedScale+0x2b4>)
 8002e32:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e36:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <StraightLineMoveSpeedScale+0x2b4>)
 8002e38:	ed93 6a03 	vldr	s12, [r3, #12]
 8002e3c:	4b40      	ldr	r3, [pc, #256]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002e3e:	edd3 7a00 	vldr	s15, [r3]
 8002e42:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e52:	ee17 2a90 	vmov	r2, s15
 8002e56:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a3e      	ldr	r2, [pc, #248]	; (8002f58 <StraightLineMoveSpeedScale+0x2b4>)
 8002e60:	60d3      	str	r3, [r2, #12]
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <StraightLineMoveSpeedScale+0x2b4>)
 8002e64:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e68:	4b35      	ldr	r3, [pc, #212]	; (8002f40 <StraightLineMoveSpeedScale+0x29c>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <StraightLineMoveSpeedScale+0x2b4>)
 8002e74:	edc3 7a04 	vstr	s15, [r3, #16]
 8002e78:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002e80:	dc06      	bgt.n	8002e90 <StraightLineMoveSpeedScale+0x1ec>
 8002e82:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a31      	ldr	r2, [pc, #196]	; (8002f4c <StraightLineMoveSpeedScale+0x2a8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	bfb8      	it	lt
 8002e8c:	4613      	movlt	r3, r2
 8002e8e:	e001      	b.n	8002e94 <StraightLineMoveSpeedScale+0x1f0>
 8002e90:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002e94:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <StraightLineMoveSpeedScale+0x294>)
 8002e9a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	fb12 f303 	smulbb	r3, r2, r3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <StraightLineMoveSpeedScale+0x2ac>)
 8002eb4:	801a      	strh	r2, [r3, #0]
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <StraightLineMoveSpeedScale+0x294>)
 8002eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <StraightLineMoveSpeedScale+0x2a4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	fb12 f303 	smulbb	r3, r2, r3
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002ece:	3308      	adds	r3, #8
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <StraightLineMoveSpeedScale+0x2b0>)
 8002ed4:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <StraightLineMoveSpeedScale+0x2ac>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eec:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <StraightLineMoveSpeedScale+0x2b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef4:	ee17 2a90 	vmov	r2, s15
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8002efa:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <StraightLineMoveSpeedScale+0x2b0>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <StraightLineMoveSpeedScale+0x2b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f18:	ee17 2a90 	vmov	r2, s15
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200004e8 	.word	0x200004e8
 8002f2c:	20000250 	.word	0x20000250
 8002f30:	200004ea 	.word	0x200004ea
 8002f34:	200002ec 	.word	0x200002ec
 8002f38:	20000140 	.word	0x20000140
 8002f3c:	00000000 	.word	0x00000000
 8002f40:	200004e4 	.word	0x200004e4
 8002f44:	20000500 	.word	0x20000500
 8002f48:	20000564 	.word	0x20000564
 8002f4c:	fffffd44 	.word	0xfffffd44
 8002f50:	200004ec 	.word	0x200004ec
 8002f54:	200004ee 	.word	0x200004ee
 8002f58:	20000528 	.word	0x20000528
 8002f5c:	200003c4 	.word	0x200003c4

08002f60 <RobotTurn>:

void RobotTurn(float *targetAngle)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af04      	add	r7, sp, #16
 8002f66:	6078      	str	r0, [r7, #4]
  angleNow = 0;
 8002f68:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <RobotTurn+0x138>)
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8002f70:	4b4a      	ldr	r3, [pc, #296]	; (800309c <RobotTurn+0x13c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8002f76:	f003 fd3b 	bl	80069f0 <HAL_GetTick>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4a48      	ldr	r2, [pc, #288]	; (80030a0 <RobotTurn+0x140>)
 8002f7e:	6013      	str	r3, [r2, #0]
  do
  {
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002f80:	f003 fd36 	bl	80069f0 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <RobotTurn+0x140>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b09      	cmp	r3, #9
 8002f8e:	d9f7      	bls.n	8002f80 <RobotTurn+0x20>
    { // sample gyro every 5ms
      __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8002f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f94:	9302      	str	r3, [sp, #8]
 8002f96:	2302      	movs	r3, #2
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <RobotTurn+0x144>)
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	2237      	movs	r2, #55	; 0x37
 8002fa2:	21d0      	movs	r1, #208	; 0xd0
 8002fa4:	4840      	ldr	r0, [pc, #256]	; (80030a8 <RobotTurn+0x148>)
 8002fa6:	f004 febb 	bl	8007d20 <HAL_I2C_Mem_Read>
 8002faa:	4b3e      	ldr	r3, [pc, #248]	; (80030a4 <RobotTurn+0x144>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	b21a      	sxth	r2, r3
 8002fb2:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <RobotTurn+0x144>)
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	b21a      	sxth	r2, r3
 8002fbc:	4b37      	ldr	r3, [pc, #220]	; (800309c <RobotTurn+0x13c>)
 8002fbe:	801a      	strh	r2, [r3, #0]
      angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <RobotTurn+0x138>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fab7 	bl	8000538 <__aeabi_f2d>
 8002fca:	4604      	mov	r4, r0
 8002fcc:	460d      	mov	r5, r1
 8002fce:	4b33      	ldr	r3, [pc, #204]	; (800309c <RobotTurn+0x13c>)
 8002fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fa9d 	bl	8000514 <__aeabi_i2d>
 8002fda:	a32b      	add	r3, pc, #172	; (adr r3, 8003088 <RobotTurn+0x128>)
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f7fd fc2c 	bl	800083c <__aeabi_ddiv>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	a328      	add	r3, pc, #160	; (adr r3, 8003090 <RobotTurn+0x130>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f7fd faf9 	bl	80005e8 <__aeabi_dmul>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	f7fd f93d 	bl	800027c <__adddf3>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f7fd fda7 	bl	8000b5c <__aeabi_d2f>
 800300e:	4603      	mov	r3, r0
 8003010:	4a21      	ldr	r2, [pc, #132]	; (8003098 <RobotTurn+0x138>)
 8003012:	6013      	str	r3, [r2, #0]
      if (abs(angleNow - *targetAngle) < 0.01)
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <RobotTurn+0x138>)
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003028:	ee17 3a90 	vmov	r3, s15
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0d      	blt.n	800304c <RobotTurn+0xec>
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <RobotTurn+0x138>)
 8003032:	ed93 7a00 	vldr	s14, [r3]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003044:	ee17 3a90 	vmov	r3, s15
 8003048:	2b00      	cmp	r3, #0
 800304a:	dd05      	ble.n	8003058 <RobotTurn+0xf8>
        break;
      last_curTask_tick = HAL_GetTick();
 800304c:	f003 fcd0 	bl	80069f0 <HAL_GetTick>
 8003050:	4603      	mov	r3, r0
 8003052:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <RobotTurn+0x140>)
 8003054:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8003056:	e793      	b.n	8002f80 <RobotTurn+0x20>
        break;
 8003058:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <RobotTurn+0x14c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	635a      	str	r2, [r3, #52]	; 0x34
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <RobotTurn+0x14c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
  __RESET_SERVO_TURN(&htim1);
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <RobotTurn+0x150>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2291      	movs	r2, #145	; 0x91
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
 8003072:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003076:	f003 fcc7 	bl	8006a08 <HAL_Delay>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bdb0      	pop	{r4, r5, r7, pc}
 8003082:	bf00      	nop
 8003084:	f3af 8000 	nop.w
 8003088:	66666666 	.word	0x66666666
 800308c:	40306666 	.word	0x40306666
 8003090:	47ae147b 	.word	0x47ae147b
 8003094:	3f847ae1 	.word	0x3f847ae1
 8003098:	200004e4 	.word	0x200004e4
 800309c:	200004ea 	.word	0x200004ea
 80030a0:	200004f0 	.word	0x200004f0
 80030a4:	200004e8 	.word	0x200004e8
 80030a8:	20000250 	.word	0x20000250
 80030ac:	200003c4 	.word	0x200003c4
 80030b0:	200002a4 	.word	0x200002a4
 80030b4:	00000000 	.word	0x00000000

080030b8 <RobotMoveDistObstacle>:

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float *targetDist, const uint8_t speedMode)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  angleNow = 0;
 80030c4:	4bbe      	ldr	r3, [pc, #760]	; (80033c0 <RobotMoveDistObstacle+0x308>)
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 80030cc:	4bbd      	ldr	r3, [pc, #756]	; (80033c4 <RobotMoveDistObstacle+0x30c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 80030d2:	48bd      	ldr	r0, [pc, #756]	; (80033c8 <RobotMoveDistObstacle+0x310>)
 80030d4:	f7ff fa47 	bl	8002566 <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 80030d8:	48bc      	ldr	r0, [pc, #752]	; (80033cc <RobotMoveDistObstacle+0x314>)
 80030da:	f7ff fa44 	bl	8002566 <PIDConfigReset>
  PIDConfigReset(&pidFast);
 80030de:	48bc      	ldr	r0, [pc, #752]	; (80033d0 <RobotMoveDistObstacle+0x318>)
 80030e0:	f7ff fa41 	bl	8002566 <PIDConfigReset>
  obsDist_US = 1000;
 80030e4:	4bbb      	ldr	r3, [pc, #748]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 80030e6:	4abc      	ldr	r2, [pc, #752]	; (80033d8 <RobotMoveDistObstacle+0x320>)
 80030e8:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Ultrasonic sensor start
 80030ea:	2104      	movs	r1, #4
 80030ec:	48bb      	ldr	r0, [pc, #748]	; (80033dc <RobotMoveDistObstacle+0x324>)
 80030ee:	f006 faef 	bl	80096d0 <HAL_TIM_IC_Start_IT>
  last_curTask_tick = HAL_GetTick();
 80030f2:	f003 fc7d 	bl	80069f0 <HAL_GetTick>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4ab9      	ldr	r2, [pc, #740]	; (80033e0 <RobotMoveDistObstacle+0x328>)
 80030fa:	6013      	str	r3, [r2, #0]
  int counter = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
  int oldspeed = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]
  do
  {
    HCSR04_Read();
 8003104:	f7ff fa42 	bl	800258c <HCSR04_Read>
    osDelay(10); // give timer interrupt chance to update obsDist_US value
 8003108:	200a      	movs	r0, #10
 800310a:	f009 f82f 	bl	800c16c <osDelay>
    if (abs(*targetDist - obsDist_US) <= 1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	ed93 7a00 	vldr	s14, [r3]
 8003114:	4baf      	ldr	r3, [pc, #700]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003122:	ee17 3a90 	vmov	r3, s15
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800312a:	db0e      	blt.n	800314a <RobotMoveDistObstacle+0x92>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	ed93 7a00 	vldr	s14, [r3]
 8003132:	4ba8      	ldr	r3, [pc, #672]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003140:	ee17 3a90 	vmov	r3, s15
 8003144:	2b01      	cmp	r3, #1
 8003146:	f340 8155 	ble.w	80033f4 <RobotMoveDistObstacle+0x33c>
      break;
    __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	ed93 7a00 	vldr	s14, [r3]
 8003150:	4ba0      	ldr	r3, [pc, #640]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f083 0301 	eor.w	r3, r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	2104      	movs	r1, #4
 8003172:	489c      	ldr	r0, [pc, #624]	; (80033e4 <RobotMoveDistObstacle+0x32c>)
 8003174:	f004 fb7c 	bl	8007870 <HAL_GPIO_WritePin>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	ed93 7a00 	vldr	s14, [r3]
 800317e:	4b95      	ldr	r3, [pc, #596]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	bf94      	ite	ls
 800318e:	2301      	movls	r3, #1
 8003190:	2300      	movhi	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	2108      	movs	r1, #8
 8003198:	4892      	ldr	r0, [pc, #584]	; (80033e4 <RobotMoveDistObstacle+0x32c>)
 800319a:	f004 fb69 	bl	8007870 <HAL_GPIO_WritePin>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	ed93 7a00 	vldr	s14, [r3]
 80031a4:	4b8b      	ldr	r3, [pc, #556]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 80031a6:	edd3 7a00 	vldr	s15, [r3]
 80031aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b2:	bf94      	ite	ls
 80031b4:	2301      	movls	r3, #1
 80031b6:	2300      	movhi	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f083 0301 	eor.w	r3, r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	2120      	movs	r1, #32
 80031c6:	4887      	ldr	r0, [pc, #540]	; (80033e4 <RobotMoveDistObstacle+0x32c>)
 80031c8:	f004 fb52 	bl	8007870 <HAL_GPIO_WritePin>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	ed93 7a00 	vldr	s14, [r3]
 80031d2:	4b80      	ldr	r3, [pc, #512]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	bf94      	ite	ls
 80031e2:	2301      	movls	r3, #1
 80031e4:	2300      	movhi	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	2110      	movs	r1, #16
 80031ec:	487d      	ldr	r0, [pc, #500]	; (80033e4 <RobotMoveDistObstacle+0x32c>)
 80031ee:	f004 fb3f 	bl	8007870 <HAL_GPIO_WritePin>
    if (HAL_GetTick() - last_curTask_tick >= 20)
 80031f2:	f003 fbfd 	bl	80069f0 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	4b79      	ldr	r3, [pc, #484]	; (80033e0 <RobotMoveDistObstacle+0x328>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b13      	cmp	r3, #19
 8003200:	d980      	bls.n	8003104 <RobotMoveDistObstacle+0x4c>
    {
      if (speedMode == SPEED_MODE_1)
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d166      	bne.n	80032d6 <RobotMoveDistObstacle+0x21e>
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8003208:	4b72      	ldr	r3, [pc, #456]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 800320a:	ed93 7a00 	vldr	s14, [r3]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800321c:	ee17 3a90 	vmov	r3, s15
 8003220:	2b00      	cmp	r3, #0
 8003222:	bfb8      	it	lt
 8003224:	425b      	neglt	r3, r3
 8003226:	4a70      	ldr	r2, [pc, #448]	; (80033e8 <RobotMoveDistObstacle+0x330>)
 8003228:	fb82 1203 	smull	r1, r2, r2, r3
 800322c:	441a      	add	r2, r3
 800322e:	10d2      	asrs	r2, r2, #3
 8003230:	17db      	asrs	r3, r3, #31
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800323c:	4b6b      	ldr	r3, [pc, #428]	; (80033ec <RobotMoveDistObstacle+0x334>)
 800323e:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8003242:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <RobotMoveDistObstacle+0x334>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800324c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003254:	dd02      	ble.n	800325c <RobotMoveDistObstacle+0x1a4>
 8003256:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800325a:	e00e      	b.n	800327a <RobotMoveDistObstacle+0x1c2>
 800325c:	4b63      	ldr	r3, [pc, #396]	; (80033ec <RobotMoveDistObstacle+0x334>)
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8003266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	d502      	bpl.n	8003276 <RobotMoveDistObstacle+0x1be>
 8003270:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8003274:	e001      	b.n	800327a <RobotMoveDistObstacle+0x1c2>
 8003276:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <RobotMoveDistObstacle+0x334>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5c      	ldr	r2, [pc, #368]	; (80033ec <RobotMoveDistObstacle+0x334>)
 800327c:	6013      	str	r3, [r2, #0]
        if (abs(*targetDist - obsDist_US) <= 5)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	ed93 7a00 	vldr	s14, [r3]
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 8003286:	edd3 7a00 	vldr	s15, [r3]
 800328a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800328e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003292:	ee17 3a90 	vmov	r3, s15
 8003296:	f113 0f05 	cmn.w	r3, #5
 800329a:	db17      	blt.n	80032cc <RobotMoveDistObstacle+0x214>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	ed93 7a00 	vldr	s14, [r3]
 80032a2:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b0:	ee17 3a90 	vmov	r3, s15
 80032b4:	2b05      	cmp	r3, #5
 80032b6:	dc09      	bgt.n	80032cc <RobotMoveDistObstacle+0x214>
          speedScale *= 0.75;
 80032b8:	4b4c      	ldr	r3, [pc, #304]	; (80033ec <RobotMoveDistObstacle+0x334>)
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80032c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c6:	4b49      	ldr	r3, [pc, #292]	; (80033ec <RobotMoveDistObstacle+0x334>)
 80032c8:	edc3 7a00 	vstr	s15, [r3]
        StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 80032cc:	4947      	ldr	r1, [pc, #284]	; (80033ec <RobotMoveDistObstacle+0x334>)
 80032ce:	2001      	movs	r0, #1
 80032d0:	f7ff fce8 	bl	8002ca4 <StraightLineMoveSpeedScale>
 80032d4:	e067      	b.n	80033a6 <RobotMoveDistObstacle+0x2ee>
          oldspeed = speedScale;
        }*/
      }
      else
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 80032d8:	ed93 7a00 	vldr	s14, [r3]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ea:	ee17 3a90 	vmov	r3, s15
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bfb8      	it	lt
 80032f2:	425b      	neglt	r3, r3
 80032f4:	4a3c      	ldr	r2, [pc, #240]	; (80033e8 <RobotMoveDistObstacle+0x330>)
 80032f6:	fb82 1203 	smull	r1, r2, r2, r3
 80032fa:	441a      	add	r2, r3
 80032fc:	10d2      	asrs	r2, r2, #3
 80032fe:	17db      	asrs	r3, r3, #31
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <RobotMoveDistObstacle+0x334>)
 800330c:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8003310:	4b36      	ldr	r3, [pc, #216]	; (80033ec <RobotMoveDistObstacle+0x334>)
 8003312:	edd3 7a00 	vldr	s15, [r3]
 8003316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800331a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003322:	dd02      	ble.n	800332a <RobotMoveDistObstacle+0x272>
 8003324:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003328:	e010      	b.n	800334c <RobotMoveDistObstacle+0x294>
 800332a:	4b30      	ldr	r3, [pc, #192]	; (80033ec <RobotMoveDistObstacle+0x334>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f902 	bl	8000538 <__aeabi_f2d>
 8003334:	a320      	add	r3, pc, #128	; (adr r3, 80033b8 <RobotMoveDistObstacle+0x300>)
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	f7fd fbc7 	bl	8000acc <__aeabi_dcmplt>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <RobotMoveDistObstacle+0x290>
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <RobotMoveDistObstacle+0x338>)
 8003346:	e001      	b.n	800334c <RobotMoveDistObstacle+0x294>
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <RobotMoveDistObstacle+0x334>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a27      	ldr	r2, [pc, #156]	; (80033ec <RobotMoveDistObstacle+0x334>)
 800334e:	6013      	str	r3, [r2, #0]
        if (abs(*targetDist - obsDist_US) <= 5)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	ed93 7a00 	vldr	s14, [r3]
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003364:	ee17 3a90 	vmov	r3, s15
 8003368:	f113 0f05 	cmn.w	r3, #5
 800336c:	db17      	blt.n	800339e <RobotMoveDistObstacle+0x2e6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	ed93 7a00 	vldr	s14, [r3]
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <RobotMoveDistObstacle+0x31c>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800337e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003382:	ee17 3a90 	vmov	r3, s15
 8003386:	2b05      	cmp	r3, #5
 8003388:	dc09      	bgt.n	800339e <RobotMoveDistObstacle+0x2e6>
          speedScale *= 0.75;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <RobotMoveDistObstacle+0x334>)
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8003394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <RobotMoveDistObstacle+0x334>)
 800339a:	edc3 7a00 	vstr	s15, [r3]
        StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 800339e:	4913      	ldr	r1, [pc, #76]	; (80033ec <RobotMoveDistObstacle+0x334>)
 80033a0:	2002      	movs	r0, #2
 80033a2:	f7ff fc7f 	bl	8002ca4 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 80033a6:	f003 fb23 	bl	80069f0 <HAL_GetTick>
 80033aa:	4603      	mov	r3, r0
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <RobotMoveDistObstacle+0x328>)
 80033ae:	6013      	str	r3, [r2, #0]
    HCSR04_Read();
 80033b0:	e6a8      	b.n	8003104 <RobotMoveDistObstacle+0x4c>
 80033b2:	bf00      	nop
 80033b4:	f3af 8000 	nop.w
 80033b8:	9999999a 	.word	0x9999999a
 80033bc:	3fd99999 	.word	0x3fd99999
 80033c0:	200004e4 	.word	0x200004e4
 80033c4:	200004ea 	.word	0x200004ea
 80033c8:	20000514 	.word	0x20000514
 80033cc:	20000500 	.word	0x20000500
 80033d0:	20000528 	.word	0x20000528
 80033d4:	20000550 	.word	0x20000550
 80033d8:	447a0000 	.word	0x447a0000
 80033dc:	20000334 	.word	0x20000334
 80033e0:	200004f0 	.word	0x200004f0
 80033e4:	40020000 	.word	0x40020000
 80033e8:	88888889 	.word	0x88888889
 80033ec:	20000138 	.word	0x20000138
 80033f0:	3ecccccd 	.word	0x3ecccccd
      break;
 80033f4:	bf00      	nop
    }

  } while (1);

  __SET_MOTOR_DUTY(&htim8, 0, 0);
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <RobotMoveDistObstacle+0x360>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	635a      	str	r2, [r3, #52]	; 0x34
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <RobotMoveDistObstacle+0x360>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8003406:	2104      	movs	r1, #4
 8003408:	4804      	ldr	r0, [pc, #16]	; (800341c <RobotMoveDistObstacle+0x364>)
 800340a:	f006 fa89 	bl	8009920 <HAL_TIM_IC_Stop_IT>
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200003c4 	.word	0x200003c4
 800341c:	20000334 	.word	0x20000334

08003420 <RobotMoveUntilIROvershoot>:
 *
 * @param isIR_R Determines whether to use the right or left IR sensor.
 *                1 for right, 0 for left.
 */
void RobotMoveUntilIROvershoot(int isIR_R)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af02      	add	r7, sp, #8
 8003426:	6078      	str	r0, [r7, #4]
  PIDConfigReset(&pidTSlow);
 8003428:	48ad      	ldr	r0, [pc, #692]	; (80036e0 <RobotMoveUntilIROvershoot+0x2c0>)
 800342a:	f7ff f89c 	bl	8002566 <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 800342e:	48ad      	ldr	r0, [pc, #692]	; (80036e4 <RobotMoveUntilIROvershoot+0x2c4>)
 8003430:	f7ff f899 	bl	8002566 <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8003434:	48ac      	ldr	r0, [pc, #688]	; (80036e8 <RobotMoveUntilIROvershoot+0x2c8>)
 8003436:	f7ff f896 	bl	8002566 <PIDConfigReset>
  obsDist_IR_R = 0;
 800343a:	4bac      	ldr	r3, [pc, #688]	; (80036ec <RobotMoveUntilIROvershoot+0x2cc>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
  obsDist_IR_L = 0;
 8003440:	4bab      	ldr	r3, [pc, #684]	; (80036f0 <RobotMoveUntilIROvershoot+0x2d0>)
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
  angleNow = 0;
 8003446:	4bab      	ldr	r3, [pc, #684]	; (80036f4 <RobotMoveUntilIROvershoot+0x2d4>)
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 800344e:	4baa      	ldr	r3, [pc, #680]	; (80036f8 <RobotMoveUntilIROvershoot+0x2d8>)
 8003450:	2200      	movs	r2, #0
 8003452:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8003454:	f003 facc 	bl	80069f0 <HAL_GetTick>
 8003458:	4603      	mov	r3, r0
 800345a:	4aa8      	ldr	r2, [pc, #672]	; (80036fc <RobotMoveUntilIROvershoot+0x2dc>)
 800345c:	6013      	str	r3, [r2, #0]
  if (isIR_R)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8094 	beq.w	800358e <RobotMoveUntilIROvershoot+0x16e>
  {
    do
    {
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003466:	48a6      	ldr	r0, [pc, #664]	; (8003700 <RobotMoveUntilIROvershoot+0x2e0>)
 8003468:	f003 fb36 	bl	8006ad8 <HAL_ADC_Start>
 800346c:	2114      	movs	r1, #20
 800346e:	48a4      	ldr	r0, [pc, #656]	; (8003700 <RobotMoveUntilIROvershoot+0x2e0>)
 8003470:	f003 fc37 	bl	8006ce2 <HAL_ADC_PollForConversion>
 8003474:	48a2      	ldr	r0, [pc, #648]	; (8003700 <RobotMoveUntilIROvershoot+0x2e0>)
 8003476:	f003 fcbf 	bl	8006df8 <HAL_ADC_GetValue>
 800347a:	4602      	mov	r2, r0
 800347c:	4ba1      	ldr	r3, [pc, #644]	; (8003704 <RobotMoveUntilIROvershoot+0x2e4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4413      	add	r3, r2
 8003482:	4aa0      	ldr	r2, [pc, #640]	; (8003704 <RobotMoveUntilIROvershoot+0x2e4>)
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4ba0      	ldr	r3, [pc, #640]	; (8003708 <RobotMoveUntilIROvershoot+0x2e8>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	4b9f      	ldr	r3, [pc, #636]	; (800370c <RobotMoveUntilIROvershoot+0x2ec>)
 800348e:	fb83 1302 	smull	r1, r3, r3, r2
 8003492:	1059      	asrs	r1, r3, #1
 8003494:	17d3      	asrs	r3, r2, #31
 8003496:	1ac9      	subs	r1, r1, r3
 8003498:	460b      	mov	r3, r1
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	1ad1      	subs	r1, r2, r3
 80034a0:	b28a      	uxth	r2, r1
 80034a2:	4b99      	ldr	r3, [pc, #612]	; (8003708 <RobotMoveUntilIROvershoot+0x2e8>)
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	4b98      	ldr	r3, [pc, #608]	; (8003708 <RobotMoveUntilIROvershoot+0x2e8>)
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d12c      	bne.n	8003508 <RobotMoveUntilIROvershoot+0xe8>
 80034ae:	4b95      	ldr	r3, [pc, #596]	; (8003704 <RobotMoveUntilIROvershoot+0x2e4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a95      	ldr	r2, [pc, #596]	; (8003708 <RobotMoveUntilIROvershoot+0x2e8>)
 80034b4:	8812      	ldrh	r2, [r2, #0]
 80034b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f81a 	bl	80004f4 <__aeabi_ui2d>
 80034c0:	a37f      	add	r3, pc, #508	; (adr r3, 80036c0 <RobotMoveUntilIROvershoot+0x2a0>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fc fed7 	bl	8000278 <__aeabi_dsub>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	a37d      	add	r3, pc, #500	; (adr r3, 80036c8 <RobotMoveUntilIROvershoot+0x2a8>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fd f9b0 	bl	800083c <__aeabi_ddiv>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7fd fb1a 	bl	8000b1c <__aeabi_d2uiz>
 80034e8:	4603      	mov	r3, r0
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <RobotMoveUntilIROvershoot+0x2cc>)
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	4b84      	ldr	r3, [pc, #528]	; (8003704 <RobotMoveUntilIROvershoot+0x2e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a84      	ldr	r2, [pc, #528]	; (8003708 <RobotMoveUntilIROvershoot+0x2e8>)
 80034f6:	8812      	ldrh	r2, [r2, #0]
 80034f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	4b84      	ldr	r3, [pc, #528]	; (8003710 <RobotMoveUntilIROvershoot+0x2f0>)
 8003500:	801a      	strh	r2, [r3, #0]
 8003502:	4b80      	ldr	r3, [pc, #512]	; (8003704 <RobotMoveUntilIROvershoot+0x2e4>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
      osDelay(20);
 8003508:	2014      	movs	r0, #20
 800350a:	f008 fe2f 	bl	800c16c <osDelay>
      if (obsDist_IR_R > 35)
 800350e:	4b77      	ldr	r3, [pc, #476]	; (80036ec <RobotMoveUntilIROvershoot+0x2cc>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b23      	cmp	r3, #35	; 0x23
 8003514:	d82e      	bhi.n	8003574 <RobotMoveUntilIROvershoot+0x154>
        break;
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003516:	f003 fa6b 	bl	80069f0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	4b77      	ldr	r3, [pc, #476]	; (80036fc <RobotMoveUntilIROvershoot+0x2dc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b09      	cmp	r3, #9
 8003524:	d99f      	bls.n	8003466 <RobotMoveUntilIROvershoot+0x46>
      {
        OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
 8003526:	4b71      	ldr	r3, [pc, #452]	; (80036ec <RobotMoveUntilIROvershoot+0x2cc>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	230c      	movs	r3, #12
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2305      	movs	r3, #5
 8003532:	2100      	movs	r1, #0
 8003534:	2000      	movs	r0, #0
 8003536:	f00b fd21 	bl	800ef7c <OLED_ShowNumber>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 800353a:	2200      	movs	r2, #0
 800353c:	2104      	movs	r1, #4
 800353e:	4875      	ldr	r0, [pc, #468]	; (8003714 <RobotMoveUntilIROvershoot+0x2f4>)
 8003540:	f004 f996 	bl	8007870 <HAL_GPIO_WritePin>
 8003544:	2201      	movs	r2, #1
 8003546:	2108      	movs	r1, #8
 8003548:	4872      	ldr	r0, [pc, #456]	; (8003714 <RobotMoveUntilIROvershoot+0x2f4>)
 800354a:	f004 f991 	bl	8007870 <HAL_GPIO_WritePin>
 800354e:	2200      	movs	r2, #0
 8003550:	2120      	movs	r1, #32
 8003552:	4870      	ldr	r0, [pc, #448]	; (8003714 <RobotMoveUntilIROvershoot+0x2f4>)
 8003554:	f004 f98c 	bl	8007870 <HAL_GPIO_WritePin>
 8003558:	2201      	movs	r2, #1
 800355a:	2110      	movs	r1, #16
 800355c:	486d      	ldr	r0, [pc, #436]	; (8003714 <RobotMoveUntilIROvershoot+0x2f4>)
 800355e:	f004 f987 	bl	8007870 <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003562:	2001      	movs	r0, #1
 8003564:	f7ff f852 	bl	800260c <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003568:	f003 fa42 	bl	80069f0 <HAL_GetTick>
 800356c:	4603      	mov	r3, r0
 800356e:	4a63      	ldr	r2, [pc, #396]	; (80036fc <RobotMoveUntilIROvershoot+0x2dc>)
 8003570:	6013      	str	r3, [r2, #0]
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003572:	e778      	b.n	8003466 <RobotMoveUntilIROvershoot+0x46>
        break;
 8003574:	bf00      	nop
      }

    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003576:	4b68      	ldr	r3, [pc, #416]	; (8003718 <RobotMoveUntilIROvershoot+0x2f8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	635a      	str	r2, [r3, #52]	; 0x34
 800357e:	4b66      	ldr	r3, [pc, #408]	; (8003718 <RobotMoveUntilIROvershoot+0x2f8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc1);
 8003586:	485e      	ldr	r0, [pc, #376]	; (8003700 <RobotMoveUntilIROvershoot+0x2e0>)
 8003588:	f003 fb78 	bl	8006c7c <HAL_ADC_Stop>

    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
    HAL_ADC_Stop(&hadc2);
  }
}
 800358c:	e092      	b.n	80036b4 <RobotMoveUntilIROvershoot+0x294>
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 800358e:	4863      	ldr	r0, [pc, #396]	; (800371c <RobotMoveUntilIROvershoot+0x2fc>)
 8003590:	f003 faa2 	bl	8006ad8 <HAL_ADC_Start>
 8003594:	2114      	movs	r1, #20
 8003596:	4861      	ldr	r0, [pc, #388]	; (800371c <RobotMoveUntilIROvershoot+0x2fc>)
 8003598:	f003 fba3 	bl	8006ce2 <HAL_ADC_PollForConversion>
 800359c:	485f      	ldr	r0, [pc, #380]	; (800371c <RobotMoveUntilIROvershoot+0x2fc>)
 800359e:	f003 fc2b 	bl	8006df8 <HAL_ADC_GetValue>
 80035a2:	4602      	mov	r2, r0
 80035a4:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <RobotMoveUntilIROvershoot+0x300>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	4a5d      	ldr	r2, [pc, #372]	; (8003720 <RobotMoveUntilIROvershoot+0x300>)
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <RobotMoveUntilIROvershoot+0x304>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <RobotMoveUntilIROvershoot+0x2ec>)
 80035b6:	fb83 1302 	smull	r1, r3, r3, r2
 80035ba:	1059      	asrs	r1, r3, #1
 80035bc:	17d3      	asrs	r3, r2, #31
 80035be:	1ac9      	subs	r1, r1, r3
 80035c0:	460b      	mov	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	1ad1      	subs	r1, r2, r3
 80035c8:	b28a      	uxth	r2, r1
 80035ca:	4b56      	ldr	r3, [pc, #344]	; (8003724 <RobotMoveUntilIROvershoot+0x304>)
 80035cc:	801a      	strh	r2, [r3, #0]
 80035ce:	4b55      	ldr	r3, [pc, #340]	; (8003724 <RobotMoveUntilIROvershoot+0x304>)
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d12c      	bne.n	8003630 <RobotMoveUntilIROvershoot+0x210>
 80035d6:	4b52      	ldr	r3, [pc, #328]	; (8003720 <RobotMoveUntilIROvershoot+0x300>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a52      	ldr	r2, [pc, #328]	; (8003724 <RobotMoveUntilIROvershoot+0x304>)
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	fbb3 f3f2 	udiv	r3, r3, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ff86 	bl	80004f4 <__aeabi_ui2d>
 80035e8:	a339      	add	r3, pc, #228	; (adr r3, 80036d0 <RobotMoveUntilIROvershoot+0x2b0>)
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f7fc fe43 	bl	8000278 <__aeabi_dsub>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	a337      	add	r3, pc, #220	; (adr r3, 80036d8 <RobotMoveUntilIROvershoot+0x2b8>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f7fd f91c 	bl	800083c <__aeabi_ddiv>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f7fd fa86 	bl	8000b1c <__aeabi_d2uiz>
 8003610:	4603      	mov	r3, r0
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <RobotMoveUntilIROvershoot+0x2d0>)
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	4b41      	ldr	r3, [pc, #260]	; (8003720 <RobotMoveUntilIROvershoot+0x300>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a41      	ldr	r2, [pc, #260]	; (8003724 <RobotMoveUntilIROvershoot+0x304>)
 800361e:	8812      	ldrh	r2, [r2, #0]
 8003620:	fbb3 f3f2 	udiv	r3, r3, r2
 8003624:	b29a      	uxth	r2, r3
 8003626:	4b40      	ldr	r3, [pc, #256]	; (8003728 <RobotMoveUntilIROvershoot+0x308>)
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <RobotMoveUntilIROvershoot+0x300>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
      osDelay(20);
 8003630:	2014      	movs	r0, #20
 8003632:	f008 fd9b 	bl	800c16c <osDelay>
      if (obsDist_IR_L > 35)
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <RobotMoveUntilIROvershoot+0x2d0>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b23      	cmp	r3, #35	; 0x23
 800363c:	d82e      	bhi.n	800369c <RobotMoveUntilIROvershoot+0x27c>
      if (HAL_GetTick() - last_curTask_tick >= 10)
 800363e:	f003 f9d7 	bl	80069f0 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <RobotMoveUntilIROvershoot+0x2dc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b09      	cmp	r3, #9
 800364c:	d99f      	bls.n	800358e <RobotMoveUntilIROvershoot+0x16e>
        OLED_ShowNumber(0, 0, obsDist_IR_L, 5, 12);
 800364e:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <RobotMoveUntilIROvershoot+0x2d0>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	230c      	movs	r3, #12
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2305      	movs	r3, #5
 800365a:	2100      	movs	r1, #0
 800365c:	2000      	movs	r0, #0
 800365e:	f00b fc8d 	bl	800ef7c <OLED_ShowNumber>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003662:	2200      	movs	r2, #0
 8003664:	2104      	movs	r1, #4
 8003666:	482b      	ldr	r0, [pc, #172]	; (8003714 <RobotMoveUntilIROvershoot+0x2f4>)
 8003668:	f004 f902 	bl	8007870 <HAL_GPIO_WritePin>
 800366c:	2201      	movs	r2, #1
 800366e:	2108      	movs	r1, #8
 8003670:	4828      	ldr	r0, [pc, #160]	; (8003714 <RobotMoveUntilIROvershoot+0x2f4>)
 8003672:	f004 f8fd 	bl	8007870 <HAL_GPIO_WritePin>
 8003676:	2200      	movs	r2, #0
 8003678:	2120      	movs	r1, #32
 800367a:	4826      	ldr	r0, [pc, #152]	; (8003714 <RobotMoveUntilIROvershoot+0x2f4>)
 800367c:	f004 f8f8 	bl	8007870 <HAL_GPIO_WritePin>
 8003680:	2201      	movs	r2, #1
 8003682:	2110      	movs	r1, #16
 8003684:	4823      	ldr	r0, [pc, #140]	; (8003714 <RobotMoveUntilIROvershoot+0x2f4>)
 8003686:	f004 f8f3 	bl	8007870 <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 800368a:	2001      	movs	r0, #1
 800368c:	f7fe ffbe 	bl	800260c <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003690:	f003 f9ae 	bl	80069f0 <HAL_GetTick>
 8003694:	4603      	mov	r3, r0
 8003696:	4a19      	ldr	r2, [pc, #100]	; (80036fc <RobotMoveUntilIROvershoot+0x2dc>)
 8003698:	6013      	str	r3, [r2, #0]
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 800369a:	e778      	b.n	800358e <RobotMoveUntilIROvershoot+0x16e>
        break;
 800369c:	bf00      	nop
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 800369e:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <RobotMoveUntilIROvershoot+0x2f8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34
 80036a6:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <RobotMoveUntilIROvershoot+0x2f8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc2);
 80036ae:	481b      	ldr	r0, [pc, #108]	; (800371c <RobotMoveUntilIROvershoot+0x2fc>)
 80036b0:	f003 fae4 	bl	8006c7c <HAL_ADC_Stop>
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	f3af 8000 	nop.w
 80036c0:	d78811b2 	.word	0xd78811b2
 80036c4:	40aa5cf5 	.word	0x40aa5cf5
 80036c8:	e3e6c4c6 	.word	0xe3e6c4c6
 80036cc:	c04f98da 	.word	0xc04f98da
 80036d0:	31b9b670 	.word	0x31b9b670
 80036d4:	40a9a8fd 	.word	0x40a9a8fd
 80036d8:	725c3dee 	.word	0x725c3dee
 80036dc:	c04e59dc 	.word	0xc04e59dc
 80036e0:	20000514 	.word	0x20000514
 80036e4:	20000500 	.word	0x20000500
 80036e8:	20000528 	.word	0x20000528
 80036ec:	20000541 	.word	0x20000541
 80036f0:	20000540 	.word	0x20000540
 80036f4:	200004e4 	.word	0x200004e4
 80036f8:	200004ea 	.word	0x200004ea
 80036fc:	200004f0 	.word	0x200004f0
 8003700:	200001c0 	.word	0x200001c0
 8003704:	20000548 	.word	0x20000548
 8003708:	20000542 	.word	0x20000542
 800370c:	66666667 	.word	0x66666667
 8003710:	2000053c 	.word	0x2000053c
 8003714:	40020000 	.word	0x40020000
 8003718:	200003c4 	.word	0x200003c4
 800371c:	20000208 	.word	0x20000208
 8003720:	2000054c 	.word	0x2000054c
 8003724:	20000544 	.word	0x20000544
 8003728:	2000053e 	.word	0x2000053e
 800372c:	00000000 	.word	0x00000000

08003730 <RobotMoveUntilIRCloseDist>:
 *
 * @param isIR_R Flag to indicate if the right IR sensor is being used.
 *                1 if right IR sensor is being used, 0 if left IR sensor is being used.
 */
void RobotMoveUntilIRCloseDist(int isIR_R)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  PIDConfigReset(&pidTSlow);
 8003738:	489d      	ldr	r0, [pc, #628]	; (80039b0 <RobotMoveUntilIRCloseDist+0x280>)
 800373a:	f7fe ff14 	bl	8002566 <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 800373e:	489d      	ldr	r0, [pc, #628]	; (80039b4 <RobotMoveUntilIRCloseDist+0x284>)
 8003740:	f7fe ff11 	bl	8002566 <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8003744:	489c      	ldr	r0, [pc, #624]	; (80039b8 <RobotMoveUntilIRCloseDist+0x288>)
 8003746:	f7fe ff0e 	bl	8002566 <PIDConfigReset>
  obsDist_IR_R = 0xFF;
 800374a:	4b9c      	ldr	r3, [pc, #624]	; (80039bc <RobotMoveUntilIRCloseDist+0x28c>)
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	701a      	strb	r2, [r3, #0]
  obsDist_IR_L = 0xFF;
 8003750:	4b9b      	ldr	r3, [pc, #620]	; (80039c0 <RobotMoveUntilIRCloseDist+0x290>)
 8003752:	22ff      	movs	r2, #255	; 0xff
 8003754:	701a      	strb	r2, [r3, #0]
  angleNow = 0;
 8003756:	4b9b      	ldr	r3, [pc, #620]	; (80039c4 <RobotMoveUntilIRCloseDist+0x294>)
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 800375e:	4b9a      	ldr	r3, [pc, #616]	; (80039c8 <RobotMoveUntilIRCloseDist+0x298>)
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8003764:	f003 f944 	bl	80069f0 <HAL_GetTick>
 8003768:	4603      	mov	r3, r0
 800376a:	4a98      	ldr	r2, [pc, #608]	; (80039cc <RobotMoveUntilIRCloseDist+0x29c>)
 800376c:	6013      	str	r3, [r2, #0]

  if (isIR_R)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8085 	beq.w	8003880 <RobotMoveUntilIRCloseDist+0x150>
  {
    do
    {
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003776:	4896      	ldr	r0, [pc, #600]	; (80039d0 <RobotMoveUntilIRCloseDist+0x2a0>)
 8003778:	f003 f9ae 	bl	8006ad8 <HAL_ADC_Start>
 800377c:	2114      	movs	r1, #20
 800377e:	4894      	ldr	r0, [pc, #592]	; (80039d0 <RobotMoveUntilIRCloseDist+0x2a0>)
 8003780:	f003 faaf 	bl	8006ce2 <HAL_ADC_PollForConversion>
 8003784:	4892      	ldr	r0, [pc, #584]	; (80039d0 <RobotMoveUntilIRCloseDist+0x2a0>)
 8003786:	f003 fb37 	bl	8006df8 <HAL_ADC_GetValue>
 800378a:	4602      	mov	r2, r0
 800378c:	4b91      	ldr	r3, [pc, #580]	; (80039d4 <RobotMoveUntilIRCloseDist+0x2a4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4413      	add	r3, r2
 8003792:	4a90      	ldr	r2, [pc, #576]	; (80039d4 <RobotMoveUntilIRCloseDist+0x2a4>)
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b90      	ldr	r3, [pc, #576]	; (80039d8 <RobotMoveUntilIRCloseDist+0x2a8>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	4b8f      	ldr	r3, [pc, #572]	; (80039dc <RobotMoveUntilIRCloseDist+0x2ac>)
 800379e:	fb83 1302 	smull	r1, r3, r3, r2
 80037a2:	1059      	asrs	r1, r3, #1
 80037a4:	17d3      	asrs	r3, r2, #31
 80037a6:	1ac9      	subs	r1, r1, r3
 80037a8:	460b      	mov	r3, r1
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	1ad1      	subs	r1, r2, r3
 80037b0:	b28a      	uxth	r2, r1
 80037b2:	4b89      	ldr	r3, [pc, #548]	; (80039d8 <RobotMoveUntilIRCloseDist+0x2a8>)
 80037b4:	801a      	strh	r2, [r3, #0]
 80037b6:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <RobotMoveUntilIRCloseDist+0x2a8>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d12c      	bne.n	8003818 <RobotMoveUntilIRCloseDist+0xe8>
 80037be:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <RobotMoveUntilIRCloseDist+0x2a4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a85      	ldr	r2, [pc, #532]	; (80039d8 <RobotMoveUntilIRCloseDist+0x2a8>)
 80037c4:	8812      	ldrh	r2, [r2, #0]
 80037c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fe92 	bl	80004f4 <__aeabi_ui2d>
 80037d0:	a36f      	add	r3, pc, #444	; (adr r3, 8003990 <RobotMoveUntilIRCloseDist+0x260>)
 80037d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d6:	f7fc fd4f 	bl	8000278 <__aeabi_dsub>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	a36d      	add	r3, pc, #436	; (adr r3, 8003998 <RobotMoveUntilIRCloseDist+0x268>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f7fd f828 	bl	800083c <__aeabi_ddiv>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4610      	mov	r0, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	f7fd f992 	bl	8000b1c <__aeabi_d2uiz>
 80037f8:	4603      	mov	r3, r0
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	4b6f      	ldr	r3, [pc, #444]	; (80039bc <RobotMoveUntilIRCloseDist+0x28c>)
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <RobotMoveUntilIRCloseDist+0x2a4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a74      	ldr	r2, [pc, #464]	; (80039d8 <RobotMoveUntilIRCloseDist+0x2a8>)
 8003806:	8812      	ldrh	r2, [r2, #0]
 8003808:	fbb3 f3f2 	udiv	r3, r3, r2
 800380c:	b29a      	uxth	r2, r3
 800380e:	4b74      	ldr	r3, [pc, #464]	; (80039e0 <RobotMoveUntilIRCloseDist+0x2b0>)
 8003810:	801a      	strh	r2, [r3, #0]
 8003812:	4b70      	ldr	r3, [pc, #448]	; (80039d4 <RobotMoveUntilIRCloseDist+0x2a4>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
      // OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003818:	f003 f8ea 	bl	80069f0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	4b6b      	ldr	r3, [pc, #428]	; (80039cc <RobotMoveUntilIRCloseDist+0x29c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b09      	cmp	r3, #9
 8003826:	d91b      	bls.n	8003860 <RobotMoveUntilIRCloseDist+0x130>
      {
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003828:	2200      	movs	r2, #0
 800382a:	2104      	movs	r1, #4
 800382c:	486d      	ldr	r0, [pc, #436]	; (80039e4 <RobotMoveUntilIRCloseDist+0x2b4>)
 800382e:	f004 f81f 	bl	8007870 <HAL_GPIO_WritePin>
 8003832:	2201      	movs	r2, #1
 8003834:	2108      	movs	r1, #8
 8003836:	486b      	ldr	r0, [pc, #428]	; (80039e4 <RobotMoveUntilIRCloseDist+0x2b4>)
 8003838:	f004 f81a 	bl	8007870 <HAL_GPIO_WritePin>
 800383c:	2200      	movs	r2, #0
 800383e:	2120      	movs	r1, #32
 8003840:	4868      	ldr	r0, [pc, #416]	; (80039e4 <RobotMoveUntilIRCloseDist+0x2b4>)
 8003842:	f004 f815 	bl	8007870 <HAL_GPIO_WritePin>
 8003846:	2201      	movs	r2, #1
 8003848:	2110      	movs	r1, #16
 800384a:	4866      	ldr	r0, [pc, #408]	; (80039e4 <RobotMoveUntilIRCloseDist+0x2b4>)
 800384c:	f004 f810 	bl	8007870 <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003850:	2001      	movs	r0, #1
 8003852:	f7fe fedb 	bl	800260c <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003856:	f003 f8cb 	bl	80069f0 <HAL_GetTick>
 800385a:	4603      	mov	r3, r0
 800385c:	4a5b      	ldr	r2, [pc, #364]	; (80039cc <RobotMoveUntilIRCloseDist+0x29c>)
 800385e:	6013      	str	r3, [r2, #0]
      }

    } while (obsDist_IR_R >= 25);
 8003860:	4b56      	ldr	r3, [pc, #344]	; (80039bc <RobotMoveUntilIRCloseDist+0x28c>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b18      	cmp	r3, #24
 8003866:	d886      	bhi.n	8003776 <RobotMoveUntilIRCloseDist+0x46>
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003868:	4b5f      	ldr	r3, [pc, #380]	; (80039e8 <RobotMoveUntilIRCloseDist+0x2b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2200      	movs	r2, #0
 800386e:	635a      	str	r2, [r3, #52]	; 0x34
 8003870:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <RobotMoveUntilIRCloseDist+0x2b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2200      	movs	r2, #0
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc1);
 8003878:	4855      	ldr	r0, [pc, #340]	; (80039d0 <RobotMoveUntilIRCloseDist+0x2a0>)
 800387a:	f003 f9ff 	bl	8006c7c <HAL_ADC_Stop>

    } while (obsDist_IR_L >= 25);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
    HAL_ADC_Stop(&hadc2);
  }
}
 800387e:	e083      	b.n	8003988 <RobotMoveUntilIRCloseDist+0x258>
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003880:	485a      	ldr	r0, [pc, #360]	; (80039ec <RobotMoveUntilIRCloseDist+0x2bc>)
 8003882:	f003 f929 	bl	8006ad8 <HAL_ADC_Start>
 8003886:	2114      	movs	r1, #20
 8003888:	4858      	ldr	r0, [pc, #352]	; (80039ec <RobotMoveUntilIRCloseDist+0x2bc>)
 800388a:	f003 fa2a 	bl	8006ce2 <HAL_ADC_PollForConversion>
 800388e:	4857      	ldr	r0, [pc, #348]	; (80039ec <RobotMoveUntilIRCloseDist+0x2bc>)
 8003890:	f003 fab2 	bl	8006df8 <HAL_ADC_GetValue>
 8003894:	4602      	mov	r2, r0
 8003896:	4b56      	ldr	r3, [pc, #344]	; (80039f0 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4413      	add	r3, r2
 800389c:	4a54      	ldr	r2, [pc, #336]	; (80039f0 <RobotMoveUntilIRCloseDist+0x2c0>)
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <RobotMoveUntilIRCloseDist+0x2c4>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	4b4d      	ldr	r3, [pc, #308]	; (80039dc <RobotMoveUntilIRCloseDist+0x2ac>)
 80038a8:	fb83 1302 	smull	r1, r3, r3, r2
 80038ac:	1059      	asrs	r1, r3, #1
 80038ae:	17d3      	asrs	r3, r2, #31
 80038b0:	1ac9      	subs	r1, r1, r3
 80038b2:	460b      	mov	r3, r1
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	1ad1      	subs	r1, r2, r3
 80038ba:	b28a      	uxth	r2, r1
 80038bc:	4b4d      	ldr	r3, [pc, #308]	; (80039f4 <RobotMoveUntilIRCloseDist+0x2c4>)
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	4b4c      	ldr	r3, [pc, #304]	; (80039f4 <RobotMoveUntilIRCloseDist+0x2c4>)
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d12c      	bne.n	8003922 <RobotMoveUntilIRCloseDist+0x1f2>
 80038c8:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <RobotMoveUntilIRCloseDist+0x2c0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a49      	ldr	r2, [pc, #292]	; (80039f4 <RobotMoveUntilIRCloseDist+0x2c4>)
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fe0d 	bl	80004f4 <__aeabi_ui2d>
 80038da:	a331      	add	r3, pc, #196	; (adr r3, 80039a0 <RobotMoveUntilIRCloseDist+0x270>)
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f7fc fcca 	bl	8000278 <__aeabi_dsub>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	a32e      	add	r3, pc, #184	; (adr r3, 80039a8 <RobotMoveUntilIRCloseDist+0x278>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc ffa3 	bl	800083c <__aeabi_ddiv>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	f7fd f90d 	bl	8000b1c <__aeabi_d2uiz>
 8003902:	4603      	mov	r3, r0
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <RobotMoveUntilIRCloseDist+0x290>)
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <RobotMoveUntilIRCloseDist+0x2c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a39      	ldr	r2, [pc, #228]	; (80039f4 <RobotMoveUntilIRCloseDist+0x2c4>)
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	fbb3 f3f2 	udiv	r3, r3, r2
 8003916:	b29a      	uxth	r2, r3
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <RobotMoveUntilIRCloseDist+0x2c8>)
 800391a:	801a      	strh	r2, [r3, #0]
 800391c:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <RobotMoveUntilIRCloseDist+0x2c0>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003922:	f003 f865 	bl	80069f0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <RobotMoveUntilIRCloseDist+0x29c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b09      	cmp	r3, #9
 8003930:	d91b      	bls.n	800396a <RobotMoveUntilIRCloseDist+0x23a>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003932:	2200      	movs	r2, #0
 8003934:	2104      	movs	r1, #4
 8003936:	482b      	ldr	r0, [pc, #172]	; (80039e4 <RobotMoveUntilIRCloseDist+0x2b4>)
 8003938:	f003 ff9a 	bl	8007870 <HAL_GPIO_WritePin>
 800393c:	2201      	movs	r2, #1
 800393e:	2108      	movs	r1, #8
 8003940:	4828      	ldr	r0, [pc, #160]	; (80039e4 <RobotMoveUntilIRCloseDist+0x2b4>)
 8003942:	f003 ff95 	bl	8007870 <HAL_GPIO_WritePin>
 8003946:	2200      	movs	r2, #0
 8003948:	2120      	movs	r1, #32
 800394a:	4826      	ldr	r0, [pc, #152]	; (80039e4 <RobotMoveUntilIRCloseDist+0x2b4>)
 800394c:	f003 ff90 	bl	8007870 <HAL_GPIO_WritePin>
 8003950:	2201      	movs	r2, #1
 8003952:	2110      	movs	r1, #16
 8003954:	4823      	ldr	r0, [pc, #140]	; (80039e4 <RobotMoveUntilIRCloseDist+0x2b4>)
 8003956:	f003 ff8b 	bl	8007870 <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 800395a:	2001      	movs	r0, #1
 800395c:	f7fe fe56 	bl	800260c <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003960:	f003 f846 	bl	80069f0 <HAL_GetTick>
 8003964:	4603      	mov	r3, r0
 8003966:	4a19      	ldr	r2, [pc, #100]	; (80039cc <RobotMoveUntilIRCloseDist+0x29c>)
 8003968:	6013      	str	r3, [r2, #0]
    } while (obsDist_IR_L >= 25);
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <RobotMoveUntilIRCloseDist+0x290>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b18      	cmp	r3, #24
 8003970:	d886      	bhi.n	8003880 <RobotMoveUntilIRCloseDist+0x150>
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <RobotMoveUntilIRCloseDist+0x2b8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	635a      	str	r2, [r3, #52]	; 0x34
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <RobotMoveUntilIRCloseDist+0x2b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc2);
 8003982:	481a      	ldr	r0, [pc, #104]	; (80039ec <RobotMoveUntilIRCloseDist+0x2bc>)
 8003984:	f003 f97a 	bl	8006c7c <HAL_ADC_Stop>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	d78811b2 	.word	0xd78811b2
 8003994:	40aa5cf5 	.word	0x40aa5cf5
 8003998:	e3e6c4c6 	.word	0xe3e6c4c6
 800399c:	c04f98da 	.word	0xc04f98da
 80039a0:	31b9b670 	.word	0x31b9b670
 80039a4:	40a9a8fd 	.word	0x40a9a8fd
 80039a8:	725c3dee 	.word	0x725c3dee
 80039ac:	c04e59dc 	.word	0xc04e59dc
 80039b0:	20000514 	.word	0x20000514
 80039b4:	20000500 	.word	0x20000500
 80039b8:	20000528 	.word	0x20000528
 80039bc:	20000541 	.word	0x20000541
 80039c0:	20000540 	.word	0x20000540
 80039c4:	200004e4 	.word	0x200004e4
 80039c8:	200004ea 	.word	0x200004ea
 80039cc:	200004f0 	.word	0x200004f0
 80039d0:	200001c0 	.word	0x200001c0
 80039d4:	20000548 	.word	0x20000548
 80039d8:	20000542 	.word	0x20000542
 80039dc:	66666667 	.word	0x66666667
 80039e0:	2000053c 	.word	0x2000053c
 80039e4:	40020000 	.word	0x40020000
 80039e8:	200003c4 	.word	0x200003c4
 80039ec:	20000208 	.word	0x20000208
 80039f0:	2000054c 	.word	0x2000054c
 80039f4:	20000544 	.word	0x20000544
 80039f8:	2000053e 	.word	0x2000053e

080039fc <RobotTurnFC45>:

void RobotTurnFC45()
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  //  FC45
  targetAngle = -(45 - FCOFFSET);
 8003a00:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <RobotTurnFC45+0x78>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	3b2d      	subs	r3, #45	; 0x2d
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <RobotTurnFC45+0x7c>)
 8003a10:	edc3 7a00 	vstr	s15, [r3]
  __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <RobotTurnFC45+0x80>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <RobotTurnFC45+0x80>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f240 5235 	movw	r2, #1333	; 0x535
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
  __SET_SERVO_TURN_MAX(&htim1, 1);
 8003a28:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <RobotTurnFC45+0x84>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f240 1209 	movw	r2, #265	; 0x109
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
 8003a32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a36:	f002 ffe7 	bl	8006a08 <HAL_Delay>
  __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	4811      	ldr	r0, [pc, #68]	; (8003a84 <RobotTurnFC45+0x88>)
 8003a40:	f003 ff16 	bl	8007870 <HAL_GPIO_WritePin>
 8003a44:	2201      	movs	r2, #1
 8003a46:	2108      	movs	r1, #8
 8003a48:	480e      	ldr	r0, [pc, #56]	; (8003a84 <RobotTurnFC45+0x88>)
 8003a4a:	f003 ff11 	bl	8007870 <HAL_GPIO_WritePin>
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2120      	movs	r1, #32
 8003a52:	480c      	ldr	r0, [pc, #48]	; (8003a84 <RobotTurnFC45+0x88>)
 8003a54:	f003 ff0c 	bl	8007870 <HAL_GPIO_WritePin>
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2110      	movs	r1, #16
 8003a5c:	4809      	ldr	r0, [pc, #36]	; (8003a84 <RobotTurnFC45+0x88>)
 8003a5e:	f003 ff07 	bl	8007870 <HAL_GPIO_WritePin>
  RobotTurn(&targetAngle);
 8003a62:	4805      	ldr	r0, [pc, #20]	; (8003a78 <RobotTurnFC45+0x7c>)
 8003a64:	f7ff fa7c 	bl	8002f60 <RobotTurn>
  osDelay(300); // reset wheel
 8003a68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a6c:	f008 fb7e 	bl	800c16c <osDelay>
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000002 	.word	0x20000002
 8003a78:	200004e0 	.word	0x200004e0
 8003a7c:	200003c4 	.word	0x200003c4
 8003a80:	200002a4 	.word	0x200002a4
 8003a84:	40020000 	.word	0x40020000

08003a88 <RobotTurnFA45>:
  RobotTurn(&targetAngle);
  osDelay(300); // reset wheel
}

void RobotTurnFA45()
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  // FA45
  targetAngle = (45 - FAOFFSET);
 8003a8c:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <RobotTurnFA45+0x78>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a9c:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <RobotTurnFA45+0x7c>)
 8003a9e:	edc3 7a00 	vstr	s15, [r3]
  __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8003aa2:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <RobotTurnFA45+0x80>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f240 5235 	movw	r2, #1333	; 0x535
 8003aaa:	635a      	str	r2, [r3, #52]	; 0x34
 8003aac:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <RobotTurnFA45+0x80>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
  __SET_SERVO_TURN(&htim1, 90);
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <RobotTurnFA45+0x84>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	225a      	movs	r2, #90	; 0x5a
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
 8003abe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ac2:	f002 ffa1 	bl	8006a08 <HAL_Delay>
  __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2104      	movs	r1, #4
 8003aca:	4811      	ldr	r0, [pc, #68]	; (8003b10 <RobotTurnFA45+0x88>)
 8003acc:	f003 fed0 	bl	8007870 <HAL_GPIO_WritePin>
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	2108      	movs	r1, #8
 8003ad4:	480e      	ldr	r0, [pc, #56]	; (8003b10 <RobotTurnFA45+0x88>)
 8003ad6:	f003 fecb 	bl	8007870 <HAL_GPIO_WritePin>
 8003ada:	2200      	movs	r2, #0
 8003adc:	2120      	movs	r1, #32
 8003ade:	480c      	ldr	r0, [pc, #48]	; (8003b10 <RobotTurnFA45+0x88>)
 8003ae0:	f003 fec6 	bl	8007870 <HAL_GPIO_WritePin>
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	2110      	movs	r1, #16
 8003ae8:	4809      	ldr	r0, [pc, #36]	; (8003b10 <RobotTurnFA45+0x88>)
 8003aea:	f003 fec1 	bl	8007870 <HAL_GPIO_WritePin>
  RobotTurn(&targetAngle);
 8003aee:	4805      	ldr	r0, [pc, #20]	; (8003b04 <RobotTurnFA45+0x7c>)
 8003af0:	f7ff fa36 	bl	8002f60 <RobotTurn>
  osDelay(300); // reset wheel
 8003af4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003af8:	f008 fb38 	bl	800c16c <osDelay>
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000003 	.word	0x20000003
 8003b04:	200004e0 	.word	0x200004e0
 8003b08:	200003c4 	.word	0x200003c4
 8003b0c:	200002a4 	.word	0x200002a4
 8003b10:	40020000 	.word	0x40020000

08003b14 <RobotTurnFR30>:
  osDelay(300); // reset wheel
}

// For Task 2 Turn B - outdoor
void RobotTurnFR30()
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  targetDist = 4;
 8003b18:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <RobotTurnFR30+0x10c>)
 8003b1a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003b1e:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2101      	movs	r1, #1
 8003b24:	483e      	ldr	r0, [pc, #248]	; (8003c20 <RobotTurnFR30+0x10c>)
 8003b26:	f7fe ff2b 	bl	8002980 <RobotMoveDist>
  __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8003b2a:	4b3e      	ldr	r3, [pc, #248]	; (8003c24 <RobotTurnFR30+0x110>)
 8003b2c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003b30:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003c28 <RobotTurnFR30+0x114>
 8003b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3c:	dd02      	ble.n	8003b44 <RobotTurnFR30+0x30>
 8003b3e:	f240 1309 	movw	r3, #265	; 0x109
 8003b42:	e012      	b.n	8003b6a <RobotTurnFR30+0x56>
 8003b44:	4b37      	ldr	r3, [pc, #220]	; (8003c24 <RobotTurnFR30+0x110>)
 8003b46:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003b4a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003c2c <RobotTurnFR30+0x118>
 8003b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	d501      	bpl.n	8003b5c <RobotTurnFR30+0x48>
 8003b58:	2346      	movs	r3, #70	; 0x46
 8003b5a:	e006      	b.n	8003b6a <RobotTurnFR30+0x56>
 8003b5c:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <RobotTurnFR30+0x110>)
 8003b5e:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b66:	ee17 3a90 	vmov	r3, s15
 8003b6a:	4a31      	ldr	r2, [pc, #196]	; (8003c30 <RobotTurnFR30+0x11c>)
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003b74:	f002 ff48 	bl	8006a08 <HAL_Delay>
 8003b78:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <RobotTurnFR30+0x110>)
 8003b7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b7e:	4a2d      	ldr	r2, [pc, #180]	; (8003c34 <RobotTurnFR30+0x120>)
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <RobotTurnFR30+0x110>)
 8003b84:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	2104      	movs	r1, #4
 8003b96:	4828      	ldr	r0, [pc, #160]	; (8003c38 <RobotTurnFR30+0x124>)
 8003b98:	f003 fe6a 	bl	8007870 <HAL_GPIO_WritePin>
 8003b9c:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <RobotTurnFR30+0x110>)
 8003b9e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bf14      	ite	ne
 8003ba6:	2301      	movne	r3, #1
 8003ba8:	2300      	moveq	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	2108      	movs	r1, #8
 8003bb0:	4821      	ldr	r0, [pc, #132]	; (8003c38 <RobotTurnFR30+0x124>)
 8003bb2:	f003 fe5d 	bl	8007870 <HAL_GPIO_WritePin>
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <RobotTurnFR30+0x110>)
 8003bb8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2120      	movs	r1, #32
 8003bca:	481b      	ldr	r0, [pc, #108]	; (8003c38 <RobotTurnFR30+0x124>)
 8003bcc:	f003 fe50 	bl	8007870 <HAL_GPIO_WritePin>
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <RobotTurnFR30+0x110>)
 8003bd2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	2110      	movs	r1, #16
 8003be4:	4814      	ldr	r0, [pc, #80]	; (8003c38 <RobotTurnFR30+0x124>)
 8003be6:	f003 fe43 	bl	8007870 <HAL_GPIO_WritePin>
 8003bea:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <RobotTurnFR30+0x110>)
 8003bec:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <RobotTurnFR30+0x128>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <RobotTurnFR30+0x110>)
 8003bf8:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <RobotTurnFR30+0x128>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 8003c02:	480c      	ldr	r0, [pc, #48]	; (8003c34 <RobotTurnFR30+0x120>)
 8003c04:	f7ff f9ac 	bl	8002f60 <RobotTurn>
  targetDist = 2;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <RobotTurnFR30+0x10c>)
 8003c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c0e:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003c10:	2200      	movs	r2, #0
 8003c12:	2100      	movs	r1, #0
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <RobotTurnFR30+0x10c>)
 8003c16:	f7fe feb3 	bl	8002980 <RobotMoveDist>
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200004f4 	.word	0x200004f4
 8003c24:	20000004 	.word	0x20000004
 8003c28:	43848000 	.word	0x43848000
 8003c2c:	428c0000 	.word	0x428c0000
 8003c30:	200002a4 	.word	0x200002a4
 8003c34:	200004e0 	.word	0x200004e0
 8003c38:	40020000 	.word	0x40020000
 8003c3c:	200003c4 	.word	0x200003c4

08003c40 <RobotTurnFL30>:
void RobotTurnFL30()
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  targetDist = 5;
 8003c44:	4b40      	ldr	r3, [pc, #256]	; (8003d48 <RobotTurnFL30+0x108>)
 8003c46:	4a41      	ldr	r2, [pc, #260]	; (8003d4c <RobotTurnFL30+0x10c>)
 8003c48:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	483e      	ldr	r0, [pc, #248]	; (8003d48 <RobotTurnFL30+0x108>)
 8003c50:	f7fe fe96 	bl	8002980 <RobotMoveDist>
  __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 8003c54:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <RobotTurnFL30+0x110>)
 8003c56:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003c5a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003d54 <RobotTurnFL30+0x114>
 8003c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c66:	dd02      	ble.n	8003c6e <RobotTurnFL30+0x2e>
 8003c68:	f240 1309 	movw	r3, #265	; 0x109
 8003c6c:	e012      	b.n	8003c94 <RobotTurnFL30+0x54>
 8003c6e:	4b38      	ldr	r3, [pc, #224]	; (8003d50 <RobotTurnFL30+0x110>)
 8003c70:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003c74:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003d58 <RobotTurnFL30+0x118>
 8003c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c80:	d501      	bpl.n	8003c86 <RobotTurnFL30+0x46>
 8003c82:	2346      	movs	r3, #70	; 0x46
 8003c84:	e006      	b.n	8003c94 <RobotTurnFL30+0x54>
 8003c86:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <RobotTurnFL30+0x110>)
 8003c88:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c90:	ee17 3a90 	vmov	r3, s15
 8003c94:	4a31      	ldr	r2, [pc, #196]	; (8003d5c <RobotTurnFL30+0x11c>)
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c9e:	f002 feb3 	bl	8006a08 <HAL_Delay>
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <RobotTurnFL30+0x110>)
 8003ca4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003ca8:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <RobotTurnFL30+0x120>)
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <RobotTurnFL30+0x110>)
 8003cae:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2301      	moveq	r3, #1
 8003cb8:	2300      	movne	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2104      	movs	r1, #4
 8003cc0:	4828      	ldr	r0, [pc, #160]	; (8003d64 <RobotTurnFL30+0x124>)
 8003cc2:	f003 fdd5 	bl	8007870 <HAL_GPIO_WritePin>
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <RobotTurnFL30+0x110>)
 8003cc8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2108      	movs	r1, #8
 8003cda:	4822      	ldr	r0, [pc, #136]	; (8003d64 <RobotTurnFL30+0x124>)
 8003cdc:	f003 fdc8 	bl	8007870 <HAL_GPIO_WritePin>
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <RobotTurnFL30+0x110>)
 8003ce2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2120      	movs	r1, #32
 8003cf4:	481b      	ldr	r0, [pc, #108]	; (8003d64 <RobotTurnFL30+0x124>)
 8003cf6:	f003 fdbb 	bl	8007870 <HAL_GPIO_WritePin>
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <RobotTurnFL30+0x110>)
 8003cfc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	4815      	ldr	r0, [pc, #84]	; (8003d64 <RobotTurnFL30+0x124>)
 8003d10:	f003 fdae 	bl	8007870 <HAL_GPIO_WritePin>
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <RobotTurnFL30+0x110>)
 8003d16:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <RobotTurnFL30+0x128>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	635a      	str	r2, [r3, #52]	; 0x34
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <RobotTurnFL30+0x110>)
 8003d22:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <RobotTurnFL30+0x128>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 8003d2c:	480c      	ldr	r0, [pc, #48]	; (8003d60 <RobotTurnFL30+0x120>)
 8003d2e:	f7ff f917 	bl	8002f60 <RobotTurn>
  targetDist = 3;
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <RobotTurnFL30+0x108>)
 8003d34:	4a0d      	ldr	r2, [pc, #52]	; (8003d6c <RobotTurnFL30+0x12c>)
 8003d36:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <RobotTurnFL30+0x108>)
 8003d3e:	f7fe fe1f 	bl	8002980 <RobotMoveDist>
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	200004f4 	.word	0x200004f4
 8003d4c:	40a00000 	.word	0x40a00000
 8003d50:	20000004 	.word	0x20000004
 8003d54:	43848000 	.word	0x43848000
 8003d58:	428c0000 	.word	0x428c0000
 8003d5c:	200002a4 	.word	0x200002a4
 8003d60:	200004e0 	.word	0x200004e0
 8003d64:	40020000 	.word	0x40020000
 8003d68:	200003c4 	.word	0x200003c4
 8003d6c:	40400000 	.word	0x40400000

08003d70 <RobotTurnFL00>:

// TODO: For Task 2 Turn B - indoor
void RobotTurnFL00()
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  targetDist = 11;
 8003d74:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <RobotTurnFL00+0x108>)
 8003d76:	4a41      	ldr	r2, [pc, #260]	; (8003e7c <RobotTurnFL00+0x10c>)
 8003d78:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	483e      	ldr	r0, [pc, #248]	; (8003e78 <RobotTurnFL00+0x108>)
 8003d80:	f7fe fdfe 	bl	8002980 <RobotMoveDist>
  __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 8003d84:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <RobotTurnFL00+0x110>)
 8003d86:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003d8a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003e84 <RobotTurnFL00+0x114>
 8003d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	dd02      	ble.n	8003d9e <RobotTurnFL00+0x2e>
 8003d98:	f240 1309 	movw	r3, #265	; 0x109
 8003d9c:	e012      	b.n	8003dc4 <RobotTurnFL00+0x54>
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <RobotTurnFL00+0x110>)
 8003da0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003da4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003e88 <RobotTurnFL00+0x118>
 8003da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db0:	d501      	bpl.n	8003db6 <RobotTurnFL00+0x46>
 8003db2:	2346      	movs	r3, #70	; 0x46
 8003db4:	e006      	b.n	8003dc4 <RobotTurnFL00+0x54>
 8003db6:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <RobotTurnFL00+0x110>)
 8003db8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc0:	ee17 3a90 	vmov	r3, s15
 8003dc4:	4a31      	ldr	r2, [pc, #196]	; (8003e8c <RobotTurnFL00+0x11c>)
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003dce:	f002 fe1b 	bl	8006a08 <HAL_Delay>
 8003dd2:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <RobotTurnFL00+0x110>)
 8003dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd6:	4a2e      	ldr	r2, [pc, #184]	; (8003e90 <RobotTurnFL00+0x120>)
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b29      	ldr	r3, [pc, #164]	; (8003e80 <RobotTurnFL00+0x110>)
 8003ddc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	2104      	movs	r1, #4
 8003dee:	4829      	ldr	r0, [pc, #164]	; (8003e94 <RobotTurnFL00+0x124>)
 8003df0:	f003 fd3e 	bl	8007870 <HAL_GPIO_WritePin>
 8003df4:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <RobotTurnFL00+0x110>)
 8003df6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bf14      	ite	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	2300      	moveq	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	2108      	movs	r1, #8
 8003e08:	4822      	ldr	r0, [pc, #136]	; (8003e94 <RobotTurnFL00+0x124>)
 8003e0a:	f003 fd31 	bl	8007870 <HAL_GPIO_WritePin>
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <RobotTurnFL00+0x110>)
 8003e10:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2120      	movs	r1, #32
 8003e22:	481c      	ldr	r0, [pc, #112]	; (8003e94 <RobotTurnFL00+0x124>)
 8003e24:	f003 fd24 	bl	8007870 <HAL_GPIO_WritePin>
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <RobotTurnFL00+0x110>)
 8003e2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf14      	ite	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	2300      	moveq	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2110      	movs	r1, #16
 8003e3c:	4815      	ldr	r0, [pc, #84]	; (8003e94 <RobotTurnFL00+0x124>)
 8003e3e:	f003 fd17 	bl	8007870 <HAL_GPIO_WritePin>
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <RobotTurnFL00+0x110>)
 8003e44:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <RobotTurnFL00+0x128>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <RobotTurnFL00+0x110>)
 8003e50:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <RobotTurnFL00+0x128>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 8003e5a:	480d      	ldr	r0, [pc, #52]	; (8003e90 <RobotTurnFL00+0x120>)
 8003e5c:	f7ff f880 	bl	8002f60 <RobotTurn>
  targetDist = 2;
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <RobotTurnFL00+0x108>)
 8003e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e66:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <RobotTurnFL00+0x108>)
 8003e6e:	f7fe fd87 	bl	8002980 <RobotMoveDist>
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200004f4 	.word	0x200004f4
 8003e7c:	41300000 	.word	0x41300000
 8003e80:	20000004 	.word	0x20000004
 8003e84:	43848000 	.word	0x43848000
 8003e88:	428c0000 	.word	0x428c0000
 8003e8c:	200002a4 	.word	0x200002a4
 8003e90:	200004e0 	.word	0x200004e0
 8003e94:	40020000 	.word	0x40020000
 8003e98:	200003c4 	.word	0x200003c4

08003e9c <RobotTurnFR00>:

void RobotTurnFR00()
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  targetDist = 3.5;
 8003ea0:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <RobotTurnFR00+0x108>)
 8003ea2:	4a41      	ldr	r2, [pc, #260]	; (8003fa8 <RobotTurnFR00+0x10c>)
 8003ea4:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	483e      	ldr	r0, [pc, #248]	; (8003fa4 <RobotTurnFR00+0x108>)
 8003eac:	f7fe fd68 	bl	8002980 <RobotMoveDist>
  __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8003eb0:	4b3e      	ldr	r3, [pc, #248]	; (8003fac <RobotTurnFR00+0x110>)
 8003eb2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003eb6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003fb0 <RobotTurnFR00+0x114>
 8003eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec2:	dd02      	ble.n	8003eca <RobotTurnFR00+0x2e>
 8003ec4:	f240 1309 	movw	r3, #265	; 0x109
 8003ec8:	e012      	b.n	8003ef0 <RobotTurnFR00+0x54>
 8003eca:	4b38      	ldr	r3, [pc, #224]	; (8003fac <RobotTurnFR00+0x110>)
 8003ecc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003ed0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003fb4 <RobotTurnFR00+0x118>
 8003ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003edc:	d501      	bpl.n	8003ee2 <RobotTurnFR00+0x46>
 8003ede:	2346      	movs	r3, #70	; 0x46
 8003ee0:	e006      	b.n	8003ef0 <RobotTurnFR00+0x54>
 8003ee2:	4b32      	ldr	r3, [pc, #200]	; (8003fac <RobotTurnFR00+0x110>)
 8003ee4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eec:	ee17 3a90 	vmov	r3, s15
 8003ef0:	4a31      	ldr	r2, [pc, #196]	; (8003fb8 <RobotTurnFR00+0x11c>)
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003efa:	f002 fd85 	bl	8006a08 <HAL_Delay>
 8003efe:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <RobotTurnFR00+0x110>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <RobotTurnFR00+0x120>)
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <RobotTurnFR00+0x110>)
 8003f0a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bf0c      	ite	eq
 8003f12:	2301      	moveq	r3, #1
 8003f14:	2300      	movne	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	4828      	ldr	r0, [pc, #160]	; (8003fc0 <RobotTurnFR00+0x124>)
 8003f1e:	f003 fca7 	bl	8007870 <HAL_GPIO_WritePin>
 8003f22:	4b22      	ldr	r3, [pc, #136]	; (8003fac <RobotTurnFR00+0x110>)
 8003f24:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	2108      	movs	r1, #8
 8003f36:	4822      	ldr	r0, [pc, #136]	; (8003fc0 <RobotTurnFR00+0x124>)
 8003f38:	f003 fc9a 	bl	8007870 <HAL_GPIO_WritePin>
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <RobotTurnFR00+0x110>)
 8003f3e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2120      	movs	r1, #32
 8003f50:	481b      	ldr	r0, [pc, #108]	; (8003fc0 <RobotTurnFR00+0x124>)
 8003f52:	f003 fc8d 	bl	8007870 <HAL_GPIO_WritePin>
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <RobotTurnFR00+0x110>)
 8003f58:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	2110      	movs	r1, #16
 8003f6a:	4815      	ldr	r0, [pc, #84]	; (8003fc0 <RobotTurnFR00+0x124>)
 8003f6c:	f003 fc80 	bl	8007870 <HAL_GPIO_WritePin>
 8003f70:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <RobotTurnFR00+0x110>)
 8003f72:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <RobotTurnFR00+0x128>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	635a      	str	r2, [r3, #52]	; 0x34
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <RobotTurnFR00+0x110>)
 8003f7e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <RobotTurnFR00+0x128>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 8003f88:	480c      	ldr	r0, [pc, #48]	; (8003fbc <RobotTurnFR00+0x120>)
 8003f8a:	f7fe ffe9 	bl	8002f60 <RobotTurn>
  targetDist = 2;
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <RobotTurnFR00+0x108>)
 8003f90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f94:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003f96:	2200      	movs	r2, #0
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4802      	ldr	r0, [pc, #8]	; (8003fa4 <RobotTurnFR00+0x108>)
 8003f9c:	f7fe fcf0 	bl	8002980 <RobotMoveDist>
}
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200004f4 	.word	0x200004f4
 8003fa8:	40600000 	.word	0x40600000
 8003fac:	20000004 	.word	0x20000004
 8003fb0:	43848000 	.word	0x43848000
 8003fb4:	428c0000 	.word	0x428c0000
 8003fb8:	200002a4 	.word	0x200002a4
 8003fbc:	200004e0 	.word	0x200004e0
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	200003c4 	.word	0x200003c4

08003fc8 <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8003fd0:	2064      	movs	r0, #100	; 0x64
 8003fd2:	f008 f8cb 	bl	800c16c <osDelay>
 8003fd6:	e7fb      	b.n	8003fd0 <runEncoder+0x8>

08003fd8 <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	6078      	str	r0, [r7, #4]
    // HAL_UART_Transmit(&huart3, aRxBuffer, RX_BUFFER_SIZE, 0xFFFF);
    // IR_data_raw_acc_R = HAL_ADC_GetValue(&hadc1);
    // IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);

    // ir debugging
    HAL_ADC_Start(&hadc2);
 8003fe0:	481a      	ldr	r0, [pc, #104]	; (800404c <runOledTask+0x74>)
 8003fe2:	f002 fd79 	bl	8006ad8 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc1);
 8003fe6:	481a      	ldr	r0, [pc, #104]	; (8004050 <runOledTask+0x78>)
 8003fe8:	f002 fd76 	bl	8006ad8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 20);
 8003fec:	2114      	movs	r1, #20
 8003fee:	4817      	ldr	r0, [pc, #92]	; (800404c <runOledTask+0x74>)
 8003ff0:	f002 fe77 	bl	8006ce2 <HAL_ADC_PollForConversion>
    HAL_ADC_PollForConversion(&hadc1, 20);
 8003ff4:	2114      	movs	r1, #20
 8003ff6:	4816      	ldr	r0, [pc, #88]	; (8004050 <runOledTask+0x78>)
 8003ff8:	f002 fe73 	bl	8006ce2 <HAL_ADC_PollForConversion>
    // HAL_UART_Transmit(&huart3, (uint8_t *)IR_data_raw_acc_R, 4, 0xFFFF);
    // HAL_ADC_Stop(&hadc1);
    // HAL_ADC_Start(&hadc2);
    // HAL_ADC_PollForConversion(&hadc2, 20);
    // IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);
    OLED_ShowNumber(0, 20, HAL_ADC_GetValue(&hadc2), 5, 12);
 8003ffc:	4813      	ldr	r0, [pc, #76]	; (800404c <runOledTask+0x74>)
 8003ffe:	f002 fefb 	bl	8006df8 <HAL_ADC_GetValue>
 8004002:	4602      	mov	r2, r0
 8004004:	230c      	movs	r3, #12
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2305      	movs	r3, #5
 800400a:	2114      	movs	r1, #20
 800400c:	2000      	movs	r0, #0
 800400e:	f00a ffb5 	bl	800ef7c <OLED_ShowNumber>
    OLED_ShowNumber(60, 20, HAL_ADC_GetValue(&hadc1), 5, 12);
 8004012:	480f      	ldr	r0, [pc, #60]	; (8004050 <runOledTask+0x78>)
 8004014:	f002 fef0 	bl	8006df8 <HAL_ADC_GetValue>
 8004018:	4602      	mov	r2, r0
 800401a:	230c      	movs	r3, #12
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2305      	movs	r3, #5
 8004020:	2114      	movs	r1, #20
 8004022:	203c      	movs	r0, #60	; 0x3c
 8004024:	f00a ffaa 	bl	800ef7c <OLED_ShowNumber>

    // char temp[10];
    // snprintf((char *)temp, sizeof(temp) - 1, "%d\n", HAL_ADC_GetValue(&hadc2));
    // HAL_UART_Transmit(&huart3, (uint8_t *)temp, strlen(temp), 0xFFFF);

    HAL_ADC_Stop(&hadc2);
 8004028:	4808      	ldr	r0, [pc, #32]	; (800404c <runOledTask+0x74>)
 800402a:	f002 fe27 	bl	8006c7c <HAL_ADC_Stop>
    HAL_ADC_Stop(&hadc1);
 800402e:	4808      	ldr	r0, [pc, #32]	; (8004050 <runOledTask+0x78>)
 8004030:	f002 fe24 	bl	8006c7c <HAL_ADC_Stop>
    // us debugging
    // HCSR04_Read();
    // OLED_ShowNumber(0, 0, obsDist_US, 5, 12);

    // display current command
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 8004034:	4a07      	ldr	r2, [pc, #28]	; (8004054 <runOledTask+0x7c>)
 8004036:	2128      	movs	r1, #40	; 0x28
 8004038:	2000      	movs	r0, #0
 800403a:	f00b f80d 	bl	800f058 <OLED_ShowString>

    OLED_Refresh_Gram();
 800403e:	f00a fe0d 	bl	800ec5c <OLED_Refresh_Gram>
    osDelay(100);
 8004042:	2064      	movs	r0, #100	; 0x64
 8004044:	f008 f892 	bl	800c16c <osDelay>
    HAL_ADC_Start(&hadc2);
 8004048:	e7ca      	b.n	8003fe0 <runOledTask+0x8>
 800404a:	bf00      	nop
 800404c:	20000208 	.word	0x20000208
 8004050:	200001c0 	.word	0x200001c0
 8004054:	20000488 	.word	0x20000488

08004058 <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFWTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_FORWARD)
 8004060:	4b7b      	ldr	r3, [pc, #492]	; (8004250 <runFWTask+0x1f8>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <runFWTask+0x1a>
      osDelay(1000);
 8004068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800406c:	f008 f87e 	bl	800c16c <osDelay>
 8004070:	e7f6      	b.n	8004060 <runFWTask+0x8>
    else
    {
      targetDist = 0;
 8004072:	4b78      	ldr	r3, [pc, #480]	; (8004254 <runFWTask+0x1fc>)
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 800407a:	4b77      	ldr	r3, [pc, #476]	; (8004258 <runFWTask+0x200>)
 800407c:	2200      	movs	r2, #0
 800407e:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 8004080:	4b76      	ldr	r3, [pc, #472]	; (800425c <runFWTask+0x204>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d062      	beq.n	800414e <runFWTask+0xf6>
      {

        angleNow = 0;
 8004088:	4b75      	ldr	r3, [pc, #468]	; (8004260 <runFWTask+0x208>)
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 8004090:	4b74      	ldr	r3, [pc, #464]	; (8004264 <runFWTask+0x20c>)
 8004092:	2200      	movs	r2, #0
 8004094:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 8004096:	4874      	ldr	r0, [pc, #464]	; (8004268 <runFWTask+0x210>)
 8004098:	f7fe fa65 	bl	8002566 <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 800409c:	4873      	ldr	r0, [pc, #460]	; (800426c <runFWTask+0x214>)
 800409e:	f7fe fa62 	bl	8002566 <PIDConfigReset>
        PIDConfigReset(&pidFast);
 80040a2:	4873      	ldr	r0, [pc, #460]	; (8004270 <runFWTask+0x218>)
 80040a4:	f7fe fa5f 	bl	8002566 <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80040a8:	2200      	movs	r2, #0
 80040aa:	2104      	movs	r1, #4
 80040ac:	4871      	ldr	r0, [pc, #452]	; (8004274 <runFWTask+0x21c>)
 80040ae:	f003 fbdf 	bl	8007870 <HAL_GPIO_WritePin>
 80040b2:	2201      	movs	r2, #1
 80040b4:	2108      	movs	r1, #8
 80040b6:	486f      	ldr	r0, [pc, #444]	; (8004274 <runFWTask+0x21c>)
 80040b8:	f003 fbda 	bl	8007870 <HAL_GPIO_WritePin>
 80040bc:	2200      	movs	r2, #0
 80040be:	2120      	movs	r1, #32
 80040c0:	486c      	ldr	r0, [pc, #432]	; (8004274 <runFWTask+0x21c>)
 80040c2:	f003 fbd5 	bl	8007870 <HAL_GPIO_WritePin>
 80040c6:	2201      	movs	r2, #1
 80040c8:	2110      	movs	r1, #16
 80040ca:	486a      	ldr	r0, [pc, #424]	; (8004274 <runFWTask+0x21c>)
 80040cc:	f003 fbd0 	bl	8007870 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 80040d0:	4b69      	ldr	r3, [pc, #420]	; (8004278 <runFWTask+0x220>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2200      	movs	r2, #0
 80040d6:	635a      	str	r2, [r3, #52]	; 0x34
 80040d8:	4b67      	ldr	r3, [pc, #412]	; (8004278 <runFWTask+0x220>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2200      	movs	r2, #0
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
 80040e0:	4b5b      	ldr	r3, [pc, #364]	; (8004250 <runFWTask+0x1f8>)
 80040e2:	781a      	ldrb	r2, [r3, #0]
 80040e4:	4b65      	ldr	r3, [pc, #404]	; (800427c <runFWTask+0x224>)
 80040e6:	701a      	strb	r2, [r3, #0]
 80040e8:	4b59      	ldr	r3, [pc, #356]	; (8004250 <runFWTask+0x1f8>)
 80040ea:	2210      	movs	r2, #16
 80040ec:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80040ee:	4b64      	ldr	r3, [pc, #400]	; (8004280 <runFWTask+0x228>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 80040f4:	4b63      	ldr	r3, [pc, #396]	; (8004284 <runFWTask+0x22c>)
 80040f6:	2264      	movs	r2, #100	; 0x64
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	4b62      	ldr	r3, [pc, #392]	; (8004284 <runFWTask+0x22c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004100:	4a61      	ldr	r2, [pc, #388]	; (8004288 <runFWTask+0x230>)
 8004102:	210f      	movs	r1, #15
 8004104:	4861      	ldr	r0, [pc, #388]	; (800428c <runFWTask+0x234>)
 8004106:	f00b f865 	bl	800f1d4 <sniprintf>
 800410a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800410e:	2206      	movs	r2, #6
 8004110:	495f      	ldr	r1, [pc, #380]	; (8004290 <runFWTask+0x238>)
 8004112:	4860      	ldr	r0, [pc, #384]	; (8004294 <runFWTask+0x23c>)
 8004114:	f006 fedf 	bl	800aed6 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 8004118:	f002 fc6a 	bl	80069f0 <HAL_GetTick>
 800411c:	4603      	mov	r3, r0
 800411e:	4a5e      	ldr	r2, [pc, #376]	; (8004298 <runFWTask+0x240>)
 8004120:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 8004122:	4b4e      	ldr	r3, [pc, #312]	; (800425c <runFWTask+0x204>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8090 	beq.w	800424c <runFWTask+0x1f4>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 800412c:	f002 fc60 	bl	80069f0 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	4b59      	ldr	r3, [pc, #356]	; (8004298 <runFWTask+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b09      	cmp	r3, #9
 800413a:	d9f2      	bls.n	8004122 <runFWTask+0xca>
          {

            StraightLineMove(SPEED_MODE_T);
 800413c:	2000      	movs	r0, #0
 800413e:	f7fe fa65 	bl	800260c <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 8004142:	f002 fc55 	bl	80069f0 <HAL_GetTick>
 8004146:	4603      	mov	r3, r0
 8004148:	4a53      	ldr	r2, [pc, #332]	; (8004298 <runFWTask+0x240>)
 800414a:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 800414c:	e7e9      	b.n	8004122 <runFWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 800414e:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <runFWTask+0x22c>)
 8004150:	885b      	ldrh	r3, [r3, #2]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <runFWTask+0x1fc>)
 800415c:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 10, move mode must be forced to SLOW
        if (targetDist <= 15)
 8004160:	4b3c      	ldr	r3, [pc, #240]	; (8004254 <runFWTask+0x1fc>)
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800416a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800416e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004172:	d802      	bhi.n	800417a <runFWTask+0x122>
          moveMode = SLOW;
 8004174:	4b49      	ldr	r3, [pc, #292]	; (800429c <runFWTask+0x244>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]

        if (targetDist >= 100)
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <runFWTask+0x1fc>)
 800417c:	edd3 7a00 	vldr	s15, [r3]
 8004180:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80042a0 <runFWTask+0x248>
 8004184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418c:	db09      	blt.n	80041a2 <runFWTask+0x14a>
          targetDist -= 2;
 800418e:	4b31      	ldr	r3, [pc, #196]	; (8004254 <runFWTask+0x1fc>)
 8004190:	edd3 7a00 	vldr	s15, [r3]
 8004194:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004198:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800419c:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <runFWTask+0x1fc>)
 800419e:	edc3 7a00 	vstr	s15, [r3]

        if (moveMode == SLOW)
 80041a2:	4b3e      	ldr	r3, [pc, #248]	; (800429c <runFWTask+0x244>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d105      	bne.n	80041b6 <runFWTask+0x15e>
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2101      	movs	r1, #1
 80041ae:	4829      	ldr	r0, [pc, #164]	; (8004254 <runFWTask+0x1fc>)
 80041b0:	f7fe fbe6 	bl	8002980 <RobotMoveDist>
 80041b4:	e004      	b.n	80041c0 <runFWTask+0x168>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_2);
 80041b6:	2202      	movs	r2, #2
 80041b8:	2101      	movs	r1, #1
 80041ba:	4826      	ldr	r0, [pc, #152]	; (8004254 <runFWTask+0x1fc>)
 80041bc:	f7fe fbe0 	bl	8002980 <RobotMoveDist>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 80041c0:	4b2d      	ldr	r3, [pc, #180]	; (8004278 <runFWTask+0x220>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34
 80041c8:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <runFWTask+0x220>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
 80041d0:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <runFWTask+0x1f8>)
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	4b29      	ldr	r3, [pc, #164]	; (800427c <runFWTask+0x224>)
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <runFWTask+0x1f8>)
 80041da:	2210      	movs	r2, #16
 80041dc:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80041de:	4b28      	ldr	r3, [pc, #160]	; (8004280 <runFWTask+0x228>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80041e4:	4b2f      	ldr	r3, [pc, #188]	; (80042a4 <runFWTask+0x24c>)
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	4b2e      	ldr	r3, [pc, #184]	; (80042a4 <runFWTask+0x24c>)
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d112      	bne.n	8004216 <runFWTask+0x1be>
        {
          __CLEAR_CURCMD(curCmd);
 80041f0:	4b24      	ldr	r3, [pc, #144]	; (8004284 <runFWTask+0x22c>)
 80041f2:	2264      	movs	r2, #100	; 0x64
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <runFWTask+0x22c>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 80041fc:	4a22      	ldr	r2, [pc, #136]	; (8004288 <runFWTask+0x230>)
 80041fe:	210f      	movs	r1, #15
 8004200:	4822      	ldr	r0, [pc, #136]	; (800428c <runFWTask+0x234>)
 8004202:	f00a ffe7 	bl	800f1d4 <sniprintf>
 8004206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800420a:	2206      	movs	r2, #6
 800420c:	4920      	ldr	r1, [pc, #128]	; (8004290 <runFWTask+0x238>)
 800420e:	4821      	ldr	r0, [pc, #132]	; (8004294 <runFWTask+0x23c>)
 8004210:	f006 fe61 	bl	800aed6 <HAL_UART_Transmit>
 8004214:	e724      	b.n	8004060 <runFWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <runFWTask+0x24c>)
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <runFWTask+0x22c>)
 800421c:	4921      	ldr	r1, [pc, #132]	; (80042a4 <runFWTask+0x24c>)
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <runFWTask+0x24c>)
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	3301      	adds	r3, #1
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <runFWTask+0x24c>)
 800422e:	7892      	ldrb	r2, [r2, #2]
 8004230:	fb93 f1f2 	sdiv	r1, r3, r2
 8004234:	fb01 f202 	mul.w	r2, r1, r2
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	b2da      	uxtb	r2, r3
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <runFWTask+0x24c>)
 800423e:	705a      	strb	r2, [r3, #1]
 8004240:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <runFWTask+0x250>)
 8004242:	210f      	movs	r1, #15
 8004244:	4811      	ldr	r0, [pc, #68]	; (800428c <runFWTask+0x234>)
 8004246:	f00a ffc5 	bl	800f1d4 <sniprintf>
 800424a:	e709      	b.n	8004060 <runFWTask+0x8>
            break;
 800424c:	bf00      	nop
    if (curTask != TASK_MOVE_FORWARD)
 800424e:	e707      	b.n	8004060 <runFWTask+0x8>
 8004250:	20000134 	.word	0x20000134
 8004254:	200004f4 	.word	0x200004f4
 8004258:	200004fa 	.word	0x200004fa
 800425c:	200004dc 	.word	0x200004dc
 8004260:	200004e4 	.word	0x200004e4
 8004264:	200004ea 	.word	0x200004ea
 8004268:	20000514 	.word	0x20000514
 800426c:	20000500 	.word	0x20000500
 8004270:	20000528 	.word	0x20000528
 8004274:	40020000 	.word	0x40020000
 8004278:	200003c4 	.word	0x200003c4
 800427c:	20000135 	.word	0x20000135
 8004280:	20000560 	.word	0x20000560
 8004284:	200004c8 	.word	0x200004c8
 8004288:	0800fbe4 	.word	0x0800fbe4
 800428c:	200004cc 	.word	0x200004cc
 8004290:	0800fbec 	.word	0x0800fbec
 8004294:	2000040c 	.word	0x2000040c
 8004298:	200004f0 	.word	0x200004f0
 800429c:	20000136 	.word	0x20000136
 80042a0:	42c80000 	.word	0x42c80000
 80042a4:	20000494 	.word	0x20000494
 80042a8:	0800fbf4 	.word	0x0800fbf4

080042ac <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 80042b4:	4b71      	ldr	r3, [pc, #452]	; (800447c <runBWTask+0x1d0>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d004      	beq.n	80042c6 <runBWTask+0x1a>
      osDelay(1000);
 80042bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042c0:	f007 ff54 	bl	800c16c <osDelay>
 80042c4:	e7f6      	b.n	80042b4 <runBWTask+0x8>
    else
    {
      targetDist = 0;
 80042c6:	4b6e      	ldr	r3, [pc, #440]	; (8004480 <runBWTask+0x1d4>)
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 80042ce:	4b6d      	ldr	r3, [pc, #436]	; (8004484 <runBWTask+0x1d8>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 80042d4:	4b6c      	ldr	r3, [pc, #432]	; (8004488 <runBWTask+0x1dc>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d061      	beq.n	80043a0 <runBWTask+0xf4>
      {

        angleNow = 0;
 80042dc:	4b6b      	ldr	r3, [pc, #428]	; (800448c <runBWTask+0x1e0>)
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 80042e4:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <runBWTask+0x1e4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 80042ea:	486a      	ldr	r0, [pc, #424]	; (8004494 <runBWTask+0x1e8>)
 80042ec:	f7fe f93b 	bl	8002566 <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 80042f0:	4869      	ldr	r0, [pc, #420]	; (8004498 <runBWTask+0x1ec>)
 80042f2:	f7fe f938 	bl	8002566 <PIDConfigReset>
        PIDConfigReset(&pidFast);
 80042f6:	4869      	ldr	r0, [pc, #420]	; (800449c <runBWTask+0x1f0>)
 80042f8:	f7fe f935 	bl	8002566 <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 80042fc:	2201      	movs	r2, #1
 80042fe:	2104      	movs	r1, #4
 8004300:	4867      	ldr	r0, [pc, #412]	; (80044a0 <runBWTask+0x1f4>)
 8004302:	f003 fab5 	bl	8007870 <HAL_GPIO_WritePin>
 8004306:	2200      	movs	r2, #0
 8004308:	2108      	movs	r1, #8
 800430a:	4865      	ldr	r0, [pc, #404]	; (80044a0 <runBWTask+0x1f4>)
 800430c:	f003 fab0 	bl	8007870 <HAL_GPIO_WritePin>
 8004310:	2201      	movs	r2, #1
 8004312:	2120      	movs	r1, #32
 8004314:	4862      	ldr	r0, [pc, #392]	; (80044a0 <runBWTask+0x1f4>)
 8004316:	f003 faab 	bl	8007870 <HAL_GPIO_WritePin>
 800431a:	2200      	movs	r2, #0
 800431c:	2110      	movs	r1, #16
 800431e:	4860      	ldr	r0, [pc, #384]	; (80044a0 <runBWTask+0x1f4>)
 8004320:	f003 faa6 	bl	8007870 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 8004324:	4b5f      	ldr	r3, [pc, #380]	; (80044a4 <runBWTask+0x1f8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	635a      	str	r2, [r3, #52]	; 0x34
 800432c:	4b5d      	ldr	r3, [pc, #372]	; (80044a4 <runBWTask+0x1f8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
 8004334:	4b51      	ldr	r3, [pc, #324]	; (800447c <runBWTask+0x1d0>)
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	4b5b      	ldr	r3, [pc, #364]	; (80044a8 <runBWTask+0x1fc>)
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	4b4f      	ldr	r3, [pc, #316]	; (800447c <runBWTask+0x1d0>)
 800433e:	2210      	movs	r2, #16
 8004340:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8004342:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <runBWTask+0x200>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 8004348:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <runBWTask+0x204>)
 800434a:	2264      	movs	r2, #100	; 0x64
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	4b58      	ldr	r3, [pc, #352]	; (80044b0 <runBWTask+0x204>)
 8004350:	2200      	movs	r2, #0
 8004352:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004354:	4a57      	ldr	r2, [pc, #348]	; (80044b4 <runBWTask+0x208>)
 8004356:	210f      	movs	r1, #15
 8004358:	4857      	ldr	r0, [pc, #348]	; (80044b8 <runBWTask+0x20c>)
 800435a:	f00a ff3b 	bl	800f1d4 <sniprintf>
 800435e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004362:	2206      	movs	r2, #6
 8004364:	4955      	ldr	r1, [pc, #340]	; (80044bc <runBWTask+0x210>)
 8004366:	4856      	ldr	r0, [pc, #344]	; (80044c0 <runBWTask+0x214>)
 8004368:	f006 fdb5 	bl	800aed6 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 800436c:	f002 fb40 	bl	80069f0 <HAL_GetTick>
 8004370:	4603      	mov	r3, r0
 8004372:	4a54      	ldr	r2, [pc, #336]	; (80044c4 <runBWTask+0x218>)
 8004374:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 8004376:	4b44      	ldr	r3, [pc, #272]	; (8004488 <runBWTask+0x1dc>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d07b      	beq.n	8004476 <runBWTask+0x1ca>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 800437e:	f002 fb37 	bl	80069f0 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	4b4f      	ldr	r3, [pc, #316]	; (80044c4 <runBWTask+0x218>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b09      	cmp	r3, #9
 800438c:	d9f3      	bls.n	8004376 <runBWTask+0xca>
          {
            StraightLineMove(SPEED_MODE_T);
 800438e:	2000      	movs	r0, #0
 8004390:	f7fe f93c 	bl	800260c <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 8004394:	f002 fb2c 	bl	80069f0 <HAL_GetTick>
 8004398:	4603      	mov	r3, r0
 800439a:	4a4a      	ldr	r2, [pc, #296]	; (80044c4 <runBWTask+0x218>)
 800439c:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 800439e:	e7ea      	b.n	8004376 <runBWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <runBWTask+0x204>)
 80043a2:	885b      	ldrh	r3, [r3, #2]
 80043a4:	ee07 3a90 	vmov	s15, r3
 80043a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ac:	4b34      	ldr	r3, [pc, #208]	; (8004480 <runBWTask+0x1d4>)
 80043ae:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 80043b2:	4b33      	ldr	r3, [pc, #204]	; (8004480 <runBWTask+0x1d4>)
 80043b4:	edd3 7a00 	vldr	s15, [r3]
 80043b8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80043bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c4:	d802      	bhi.n	80043cc <runBWTask+0x120>
          moveMode = SLOW;
 80043c6:	4b40      	ldr	r3, [pc, #256]	; (80044c8 <runBWTask+0x21c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
        if (moveMode == SLOW)
 80043cc:	4b3e      	ldr	r3, [pc, #248]	; (80044c8 <runBWTask+0x21c>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <runBWTask+0x134>
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2100      	movs	r1, #0
 80043d8:	4829      	ldr	r0, [pc, #164]	; (8004480 <runBWTask+0x1d4>)
 80043da:	f7fe fad1 	bl	8002980 <RobotMoveDist>
 80043de:	e004      	b.n	80043ea <runBWTask+0x13e>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_2);
 80043e0:	2202      	movs	r2, #2
 80043e2:	2100      	movs	r1, #0
 80043e4:	4826      	ldr	r0, [pc, #152]	; (8004480 <runBWTask+0x1d4>)
 80043e6:	f7fe facb 	bl	8002980 <RobotMoveDist>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 80043ea:	4b2e      	ldr	r3, [pc, #184]	; (80044a4 <runBWTask+0x1f8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2200      	movs	r2, #0
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34
 80043f2:	4b2c      	ldr	r3, [pc, #176]	; (80044a4 <runBWTask+0x1f8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2200      	movs	r2, #0
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
 80043fa:	4b20      	ldr	r3, [pc, #128]	; (800447c <runBWTask+0x1d0>)
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <runBWTask+0x1fc>)
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	4b1e      	ldr	r3, [pc, #120]	; (800447c <runBWTask+0x1d0>)
 8004404:	2210      	movs	r2, #16
 8004406:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8004408:	4b28      	ldr	r3, [pc, #160]	; (80044ac <runBWTask+0x200>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800440e:	4b2f      	ldr	r3, [pc, #188]	; (80044cc <runBWTask+0x220>)
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	4b2e      	ldr	r3, [pc, #184]	; (80044cc <runBWTask+0x220>)
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	429a      	cmp	r2, r3
 8004418:	d112      	bne.n	8004440 <runBWTask+0x194>
        {
          __CLEAR_CURCMD(curCmd);
 800441a:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <runBWTask+0x204>)
 800441c:	2264      	movs	r2, #100	; 0x64
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <runBWTask+0x204>)
 8004422:	2200      	movs	r2, #0
 8004424:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 8004426:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <runBWTask+0x208>)
 8004428:	210f      	movs	r1, #15
 800442a:	4823      	ldr	r0, [pc, #140]	; (80044b8 <runBWTask+0x20c>)
 800442c:	f00a fed2 	bl	800f1d4 <sniprintf>
 8004430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004434:	2206      	movs	r2, #6
 8004436:	4921      	ldr	r1, [pc, #132]	; (80044bc <runBWTask+0x210>)
 8004438:	4821      	ldr	r0, [pc, #132]	; (80044c0 <runBWTask+0x214>)
 800443a:	f006 fd4c 	bl	800aed6 <HAL_UART_Transmit>
 800443e:	e739      	b.n	80042b4 <runBWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004440:	4b22      	ldr	r3, [pc, #136]	; (80044cc <runBWTask+0x220>)
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	4a1a      	ldr	r2, [pc, #104]	; (80044b0 <runBWTask+0x204>)
 8004446:	4921      	ldr	r1, [pc, #132]	; (80044cc <runBWTask+0x220>)
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <runBWTask+0x220>)
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	3301      	adds	r3, #1
 8004456:	4a1d      	ldr	r2, [pc, #116]	; (80044cc <runBWTask+0x220>)
 8004458:	7892      	ldrb	r2, [r2, #2]
 800445a:	fb93 f1f2 	sdiv	r1, r3, r2
 800445e:	fb01 f202 	mul.w	r2, r1, r2
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <runBWTask+0x220>)
 8004468:	705a      	strb	r2, [r3, #1]
 800446a:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <runBWTask+0x224>)
 800446c:	210f      	movs	r1, #15
 800446e:	4812      	ldr	r0, [pc, #72]	; (80044b8 <runBWTask+0x20c>)
 8004470:	f00a feb0 	bl	800f1d4 <sniprintf>
 8004474:	e71e      	b.n	80042b4 <runBWTask+0x8>
            break;
 8004476:	bf00      	nop
    if (curTask != TASK_MOVE_BACKWARD)
 8004478:	e71c      	b.n	80042b4 <runBWTask+0x8>
 800447a:	bf00      	nop
 800447c:	20000134 	.word	0x20000134
 8004480:	200004f4 	.word	0x200004f4
 8004484:	200004fa 	.word	0x200004fa
 8004488:	200004dc 	.word	0x200004dc
 800448c:	200004e4 	.word	0x200004e4
 8004490:	200004ea 	.word	0x200004ea
 8004494:	20000514 	.word	0x20000514
 8004498:	20000500 	.word	0x20000500
 800449c:	20000528 	.word	0x20000528
 80044a0:	40020000 	.word	0x40020000
 80044a4:	200003c4 	.word	0x200003c4
 80044a8:	20000135 	.word	0x20000135
 80044ac:	20000560 	.word	0x20000560
 80044b0:	200004c8 	.word	0x200004c8
 80044b4:	0800fbe4 	.word	0x0800fbe4
 80044b8:	200004cc 	.word	0x200004cc
 80044bc:	0800fbec 	.word	0x0800fbec
 80044c0:	2000040c 	.word	0x2000040c
 80044c4:	200004f0 	.word	0x200004f0
 80044c8:	20000136 	.word	0x20000136
 80044cc:	20000494 	.word	0x20000494
 80044d0:	0800fbf4 	.word	0x0800fbf4

080044d4 <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 80044dc:	4ba7      	ldr	r3, [pc, #668]	; (800477c <runFLTask+0x2a8>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d004      	beq.n	80044ee <runFLTask+0x1a>
      osDelay(1000);
 80044e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044e8:	f007 fe40 	bl	800c16c <osDelay>
 80044ec:	e7f6      	b.n	80044dc <runFLTask+0x8>
    else
    {

      switch (curCmd.val)
 80044ee:	4ba4      	ldr	r3, [pc, #656]	; (8004780 <runFLTask+0x2ac>)
 80044f0:	885b      	ldrh	r3, [r3, #2]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8083 	beq.w	80045fe <runFLTask+0x12a>
 80044f8:	2b1e      	cmp	r3, #30
 80044fa:	f040 8100 	bne.w	80046fe <runFLTask+0x22a>
      {
      case 30: // FL30 (outdoor 3x2)
        targetDist = 5;
 80044fe:	4ba1      	ldr	r3, [pc, #644]	; (8004784 <runFLTask+0x2b0>)
 8004500:	4aa1      	ldr	r2, [pc, #644]	; (8004788 <runFLTask+0x2b4>)
 8004502:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004504:	2200      	movs	r2, #0
 8004506:	2101      	movs	r1, #1
 8004508:	489e      	ldr	r0, [pc, #632]	; (8004784 <runFLTask+0x2b0>)
 800450a:	f7fe fa39 	bl	8002980 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 800450e:	4b9f      	ldr	r3, [pc, #636]	; (800478c <runFLTask+0x2b8>)
 8004510:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004514:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8004790 <runFLTask+0x2bc>
 8004518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	dd02      	ble.n	8004528 <runFLTask+0x54>
 8004522:	f240 1309 	movw	r3, #265	; 0x109
 8004526:	e012      	b.n	800454e <runFLTask+0x7a>
 8004528:	4b98      	ldr	r3, [pc, #608]	; (800478c <runFLTask+0x2b8>)
 800452a:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800452e:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004794 <runFLTask+0x2c0>
 8004532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453a:	d501      	bpl.n	8004540 <runFLTask+0x6c>
 800453c:	2346      	movs	r3, #70	; 0x46
 800453e:	e006      	b.n	800454e <runFLTask+0x7a>
 8004540:	4b92      	ldr	r3, [pc, #584]	; (800478c <runFLTask+0x2b8>)
 8004542:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800454a:	ee17 3a90 	vmov	r3, s15
 800454e:	4a92      	ldr	r2, [pc, #584]	; (8004798 <runFLTask+0x2c4>)
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	6413      	str	r3, [r2, #64]	; 0x40
 8004554:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004558:	f002 fa56 	bl	8006a08 <HAL_Delay>
 800455c:	4b8b      	ldr	r3, [pc, #556]	; (800478c <runFLTask+0x2b8>)
 800455e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004562:	4a8e      	ldr	r2, [pc, #568]	; (800479c <runFLTask+0x2c8>)
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b89      	ldr	r3, [pc, #548]	; (800478c <runFLTask+0x2b8>)
 8004568:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf0c      	ite	eq
 8004570:	2301      	moveq	r3, #1
 8004572:	2300      	movne	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	2104      	movs	r1, #4
 800457a:	4889      	ldr	r0, [pc, #548]	; (80047a0 <runFLTask+0x2cc>)
 800457c:	f003 f978 	bl	8007870 <HAL_GPIO_WritePin>
 8004580:	4b82      	ldr	r3, [pc, #520]	; (800478c <runFLTask+0x2b8>)
 8004582:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004586:	2b00      	cmp	r3, #0
 8004588:	bf14      	ite	ne
 800458a:	2301      	movne	r3, #1
 800458c:	2300      	moveq	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	2108      	movs	r1, #8
 8004594:	4882      	ldr	r0, [pc, #520]	; (80047a0 <runFLTask+0x2cc>)
 8004596:	f003 f96b 	bl	8007870 <HAL_GPIO_WritePin>
 800459a:	4b7c      	ldr	r3, [pc, #496]	; (800478c <runFLTask+0x2b8>)
 800459c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	2120      	movs	r1, #32
 80045ae:	487c      	ldr	r0, [pc, #496]	; (80047a0 <runFLTask+0x2cc>)
 80045b0:	f003 f95e 	bl	8007870 <HAL_GPIO_WritePin>
 80045b4:	4b75      	ldr	r3, [pc, #468]	; (800478c <runFLTask+0x2b8>)
 80045b6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	2110      	movs	r1, #16
 80045c8:	4875      	ldr	r0, [pc, #468]	; (80047a0 <runFLTask+0x2cc>)
 80045ca:	f003 f951 	bl	8007870 <HAL_GPIO_WritePin>
 80045ce:	4b6f      	ldr	r3, [pc, #444]	; (800478c <runFLTask+0x2b8>)
 80045d0:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 80045d4:	4b73      	ldr	r3, [pc, #460]	; (80047a4 <runFLTask+0x2d0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	635a      	str	r2, [r3, #52]	; 0x34
 80045da:	4b6c      	ldr	r3, [pc, #432]	; (800478c <runFLTask+0x2b8>)
 80045dc:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 80045e0:	4b70      	ldr	r3, [pc, #448]	; (80047a4 <runFLTask+0x2d0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80045e6:	486d      	ldr	r0, [pc, #436]	; (800479c <runFLTask+0x2c8>)
 80045e8:	f7fe fcba 	bl	8002f60 <RobotTurn>
        targetDist = 3;
 80045ec:	4b65      	ldr	r3, [pc, #404]	; (8004784 <runFLTask+0x2b0>)
 80045ee:	4a6e      	ldr	r2, [pc, #440]	; (80047a8 <runFLTask+0x2d4>)
 80045f0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80045f2:	2200      	movs	r2, #0
 80045f4:	2100      	movs	r1, #0
 80045f6:	4863      	ldr	r0, [pc, #396]	; (8004784 <runFLTask+0x2b0>)
 80045f8:	f7fe f9c2 	bl	8002980 <RobotMoveDist>
        break;
 80045fc:	e07f      	b.n	80046fe <runFLTask+0x22a>
      case 00: // FL00 (indoor 3x2)
        targetDist = 11;
 80045fe:	4b61      	ldr	r3, [pc, #388]	; (8004784 <runFLTask+0x2b0>)
 8004600:	4a6a      	ldr	r2, [pc, #424]	; (80047ac <runFLTask+0x2d8>)
 8004602:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004604:	2200      	movs	r2, #0
 8004606:	2101      	movs	r1, #1
 8004608:	485e      	ldr	r0, [pc, #376]	; (8004784 <runFLTask+0x2b0>)
 800460a:	f7fe f9b9 	bl	8002980 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 800460e:	4b5f      	ldr	r3, [pc, #380]	; (800478c <runFLTask+0x2b8>)
 8004610:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004614:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004790 <runFLTask+0x2bc>
 8004618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	dd02      	ble.n	8004628 <runFLTask+0x154>
 8004622:	f240 1309 	movw	r3, #265	; 0x109
 8004626:	e012      	b.n	800464e <runFLTask+0x17a>
 8004628:	4b58      	ldr	r3, [pc, #352]	; (800478c <runFLTask+0x2b8>)
 800462a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800462e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004794 <runFLTask+0x2c0>
 8004632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463a:	d501      	bpl.n	8004640 <runFLTask+0x16c>
 800463c:	2346      	movs	r3, #70	; 0x46
 800463e:	e006      	b.n	800464e <runFLTask+0x17a>
 8004640:	4b52      	ldr	r3, [pc, #328]	; (800478c <runFLTask+0x2b8>)
 8004642:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800464a:	ee17 3a90 	vmov	r3, s15
 800464e:	4a52      	ldr	r2, [pc, #328]	; (8004798 <runFLTask+0x2c4>)
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	6413      	str	r3, [r2, #64]	; 0x40
 8004654:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004658:	f002 f9d6 	bl	8006a08 <HAL_Delay>
 800465c:	4b4b      	ldr	r3, [pc, #300]	; (800478c <runFLTask+0x2b8>)
 800465e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004660:	4a4e      	ldr	r2, [pc, #312]	; (800479c <runFLTask+0x2c8>)
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b49      	ldr	r3, [pc, #292]	; (800478c <runFLTask+0x2b8>)
 8004666:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800466a:	2b00      	cmp	r3, #0
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	2104      	movs	r1, #4
 8004678:	4849      	ldr	r0, [pc, #292]	; (80047a0 <runFLTask+0x2cc>)
 800467a:	f003 f8f9 	bl	8007870 <HAL_GPIO_WritePin>
 800467e:	4b43      	ldr	r3, [pc, #268]	; (800478c <runFLTask+0x2b8>)
 8004680:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf14      	ite	ne
 8004688:	2301      	movne	r3, #1
 800468a:	2300      	moveq	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	2108      	movs	r1, #8
 8004692:	4843      	ldr	r0, [pc, #268]	; (80047a0 <runFLTask+0x2cc>)
 8004694:	f003 f8ec 	bl	8007870 <HAL_GPIO_WritePin>
 8004698:	4b3c      	ldr	r3, [pc, #240]	; (800478c <runFLTask+0x2b8>)
 800469a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	2120      	movs	r1, #32
 80046ac:	483c      	ldr	r0, [pc, #240]	; (80047a0 <runFLTask+0x2cc>)
 80046ae:	f003 f8df 	bl	8007870 <HAL_GPIO_WritePin>
 80046b2:	4b36      	ldr	r3, [pc, #216]	; (800478c <runFLTask+0x2b8>)
 80046b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	2110      	movs	r1, #16
 80046c6:	4836      	ldr	r0, [pc, #216]	; (80047a0 <runFLTask+0x2cc>)
 80046c8:	f003 f8d2 	bl	8007870 <HAL_GPIO_WritePin>
 80046cc:	4b2f      	ldr	r3, [pc, #188]	; (800478c <runFLTask+0x2b8>)
 80046ce:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 80046d2:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <runFLTask+0x2d0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	635a      	str	r2, [r3, #52]	; 0x34
 80046d8:	4b2c      	ldr	r3, [pc, #176]	; (800478c <runFLTask+0x2b8>)
 80046da:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 80046de:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <runFLTask+0x2d0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80046e4:	482d      	ldr	r0, [pc, #180]	; (800479c <runFLTask+0x2c8>)
 80046e6:	f7fe fc3b 	bl	8002f60 <RobotTurn>
        targetDist = 2;
 80046ea:	4b26      	ldr	r3, [pc, #152]	; (8004784 <runFLTask+0x2b0>)
 80046ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046f0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80046f2:	2200      	movs	r2, #0
 80046f4:	2101      	movs	r1, #1
 80046f6:	4823      	ldr	r0, [pc, #140]	; (8004784 <runFLTask+0x2b0>)
 80046f8:	f7fe f942 	bl	8002980 <RobotMoveDist>
        break;
 80046fc:	bf00      	nop
      }
      clickOnce = 0;
 80046fe:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <runFLTask+0x2dc>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <runFLTask+0x2a8>)
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <runFLTask+0x2e0>)
 800470a:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <runFLTask+0x2a8>)
 800470e:	2210      	movs	r2, #16
 8004710:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004712:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <runFLTask+0x2e4>)
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <runFLTask+0x2e4>)
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	429a      	cmp	r2, r3
 800471c:	d112      	bne.n	8004744 <runFLTask+0x270>
      {
        __CLEAR_CURCMD(curCmd);
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <runFLTask+0x2ac>)
 8004720:	2264      	movs	r2, #100	; 0x64
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <runFLTask+0x2ac>)
 8004726:	2200      	movs	r2, #0
 8004728:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800472a:	4a24      	ldr	r2, [pc, #144]	; (80047bc <runFLTask+0x2e8>)
 800472c:	210f      	movs	r1, #15
 800472e:	4824      	ldr	r0, [pc, #144]	; (80047c0 <runFLTask+0x2ec>)
 8004730:	f00a fd50 	bl	800f1d4 <sniprintf>
 8004734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004738:	2206      	movs	r2, #6
 800473a:	4922      	ldr	r1, [pc, #136]	; (80047c4 <runFLTask+0x2f0>)
 800473c:	4822      	ldr	r0, [pc, #136]	; (80047c8 <runFLTask+0x2f4>)
 800473e:	f006 fbca 	bl	800aed6 <HAL_UART_Transmit>
 8004742:	e6cb      	b.n	80044dc <runFLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004744:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <runFLTask+0x2e4>)
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	4a0d      	ldr	r2, [pc, #52]	; (8004780 <runFLTask+0x2ac>)
 800474a:	491b      	ldr	r1, [pc, #108]	; (80047b8 <runFLTask+0x2e4>)
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <runFLTask+0x2e4>)
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	3301      	adds	r3, #1
 800475a:	4a17      	ldr	r2, [pc, #92]	; (80047b8 <runFLTask+0x2e4>)
 800475c:	7892      	ldrb	r2, [r2, #2]
 800475e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004762:	fb01 f202 	mul.w	r2, r1, r2
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	b2da      	uxtb	r2, r3
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <runFLTask+0x2e4>)
 800476c:	705a      	strb	r2, [r3, #1]
 800476e:	4a17      	ldr	r2, [pc, #92]	; (80047cc <runFLTask+0x2f8>)
 8004770:	210f      	movs	r1, #15
 8004772:	4813      	ldr	r0, [pc, #76]	; (80047c0 <runFLTask+0x2ec>)
 8004774:	f00a fd2e 	bl	800f1d4 <sniprintf>
    if (curTask != TASK_FL)
 8004778:	e6b0      	b.n	80044dc <runFLTask+0x8>
 800477a:	bf00      	nop
 800477c:	20000134 	.word	0x20000134
 8004780:	200004c8 	.word	0x200004c8
 8004784:	200004f4 	.word	0x200004f4
 8004788:	40a00000 	.word	0x40a00000
 800478c:	20000004 	.word	0x20000004
 8004790:	43848000 	.word	0x43848000
 8004794:	428c0000 	.word	0x428c0000
 8004798:	200002a4 	.word	0x200002a4
 800479c:	200004e0 	.word	0x200004e0
 80047a0:	40020000 	.word	0x40020000
 80047a4:	200003c4 	.word	0x200003c4
 80047a8:	40400000 	.word	0x40400000
 80047ac:	41300000 	.word	0x41300000
 80047b0:	20000560 	.word	0x20000560
 80047b4:	20000135 	.word	0x20000135
 80047b8:	20000494 	.word	0x20000494
 80047bc:	0800fbe4 	.word	0x0800fbe4
 80047c0:	200004cc 	.word	0x200004cc
 80047c4:	0800fbec 	.word	0x0800fbec
 80047c8:	2000040c 	.word	0x2000040c
 80047cc:	0800fbf4 	.word	0x0800fbf4

080047d0 <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 80047d8:	4ba8      	ldr	r3, [pc, #672]	; (8004a7c <runFRTask+0x2ac>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d004      	beq.n	80047ea <runFRTask+0x1a>
      osDelay(1000);
 80047e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047e4:	f007 fcc2 	bl	800c16c <osDelay>
 80047e8:	e7f6      	b.n	80047d8 <runFRTask+0x8>
    else
    {
      switch (curCmd.val)
 80047ea:	4ba5      	ldr	r3, [pc, #660]	; (8004a80 <runFRTask+0x2b0>)
 80047ec:	885b      	ldrh	r3, [r3, #2]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8085 	beq.w	80048fe <runFRTask+0x12e>
 80047f4:	2b1e      	cmp	r3, #30
 80047f6:	f040 8103 	bne.w	8004a00 <runFRTask+0x230>
      {
      case 30: // FR30 (outdoor 3x2)
        targetDist = 4;
 80047fa:	4ba2      	ldr	r3, [pc, #648]	; (8004a84 <runFRTask+0x2b4>)
 80047fc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004800:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004802:	2200      	movs	r2, #0
 8004804:	2101      	movs	r1, #1
 8004806:	489f      	ldr	r0, [pc, #636]	; (8004a84 <runFRTask+0x2b4>)
 8004808:	f7fe f8ba 	bl	8002980 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 800480c:	4b9e      	ldr	r3, [pc, #632]	; (8004a88 <runFRTask+0x2b8>)
 800480e:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004812:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8004a8c <runFRTask+0x2bc>
 8004816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481e:	dd02      	ble.n	8004826 <runFRTask+0x56>
 8004820:	f240 1309 	movw	r3, #265	; 0x109
 8004824:	e012      	b.n	800484c <runFRTask+0x7c>
 8004826:	4b98      	ldr	r3, [pc, #608]	; (8004a88 <runFRTask+0x2b8>)
 8004828:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 800482c:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8004a90 <runFRTask+0x2c0>
 8004830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004838:	d501      	bpl.n	800483e <runFRTask+0x6e>
 800483a:	2346      	movs	r3, #70	; 0x46
 800483c:	e006      	b.n	800484c <runFRTask+0x7c>
 800483e:	4b92      	ldr	r3, [pc, #584]	; (8004a88 <runFRTask+0x2b8>)
 8004840:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	ee17 3a90 	vmov	r3, s15
 800484c:	4a91      	ldr	r2, [pc, #580]	; (8004a94 <runFRTask+0x2c4>)
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	6413      	str	r3, [r2, #64]	; 0x40
 8004852:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004856:	f002 f8d7 	bl	8006a08 <HAL_Delay>
 800485a:	4b8b      	ldr	r3, [pc, #556]	; (8004a88 <runFRTask+0x2b8>)
 800485c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004860:	4a8d      	ldr	r2, [pc, #564]	; (8004a98 <runFRTask+0x2c8>)
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	4b88      	ldr	r3, [pc, #544]	; (8004a88 <runFRTask+0x2b8>)
 8004866:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800486a:	2b00      	cmp	r3, #0
 800486c:	bf0c      	ite	eq
 800486e:	2301      	moveq	r3, #1
 8004870:	2300      	movne	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	2104      	movs	r1, #4
 8004878:	4888      	ldr	r0, [pc, #544]	; (8004a9c <runFRTask+0x2cc>)
 800487a:	f002 fff9 	bl	8007870 <HAL_GPIO_WritePin>
 800487e:	4b82      	ldr	r3, [pc, #520]	; (8004a88 <runFRTask+0x2b8>)
 8004880:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	2108      	movs	r1, #8
 8004892:	4882      	ldr	r0, [pc, #520]	; (8004a9c <runFRTask+0x2cc>)
 8004894:	f002 ffec 	bl	8007870 <HAL_GPIO_WritePin>
 8004898:	4b7b      	ldr	r3, [pc, #492]	; (8004a88 <runFRTask+0x2b8>)
 800489a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	bf0c      	ite	eq
 80048a2:	2301      	moveq	r3, #1
 80048a4:	2300      	movne	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	2120      	movs	r1, #32
 80048ac:	487b      	ldr	r0, [pc, #492]	; (8004a9c <runFRTask+0x2cc>)
 80048ae:	f002 ffdf 	bl	8007870 <HAL_GPIO_WritePin>
 80048b2:	4b75      	ldr	r3, [pc, #468]	; (8004a88 <runFRTask+0x2b8>)
 80048b4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	2110      	movs	r1, #16
 80048c6:	4875      	ldr	r0, [pc, #468]	; (8004a9c <runFRTask+0x2cc>)
 80048c8:	f002 ffd2 	bl	8007870 <HAL_GPIO_WritePin>
 80048cc:	4b6e      	ldr	r3, [pc, #440]	; (8004a88 <runFRTask+0x2b8>)
 80048ce:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 80048d2:	4b73      	ldr	r3, [pc, #460]	; (8004aa0 <runFRTask+0x2d0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34
 80048d8:	4b6b      	ldr	r3, [pc, #428]	; (8004a88 <runFRTask+0x2b8>)
 80048da:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80048de:	4b70      	ldr	r3, [pc, #448]	; (8004aa0 <runFRTask+0x2d0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80048e4:	486c      	ldr	r0, [pc, #432]	; (8004a98 <runFRTask+0x2c8>)
 80048e6:	f7fe fb3b 	bl	8002f60 <RobotTurn>
        targetDist = 2;
 80048ea:	4b66      	ldr	r3, [pc, #408]	; (8004a84 <runFRTask+0x2b4>)
 80048ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048f0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	4863      	ldr	r0, [pc, #396]	; (8004a84 <runFRTask+0x2b4>)
 80048f8:	f7fe f842 	bl	8002980 <RobotMoveDist>
        break;
 80048fc:	e080      	b.n	8004a00 <runFRTask+0x230>
      case 00: // FR00 (indoor 3x2)
        targetDist = 3.5;
 80048fe:	4b61      	ldr	r3, [pc, #388]	; (8004a84 <runFRTask+0x2b4>)
 8004900:	4a68      	ldr	r2, [pc, #416]	; (8004aa4 <runFRTask+0x2d4>)
 8004902:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004904:	2200      	movs	r2, #0
 8004906:	2101      	movs	r1, #1
 8004908:	485e      	ldr	r0, [pc, #376]	; (8004a84 <runFRTask+0x2b4>)
 800490a:	f7fe f839 	bl	8002980 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 800490e:	4b5e      	ldr	r3, [pc, #376]	; (8004a88 <runFRTask+0x2b8>)
 8004910:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004914:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8004a8c <runFRTask+0x2bc>
 8004918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004920:	dd02      	ble.n	8004928 <runFRTask+0x158>
 8004922:	f240 1309 	movw	r3, #265	; 0x109
 8004926:	e012      	b.n	800494e <runFRTask+0x17e>
 8004928:	4b57      	ldr	r3, [pc, #348]	; (8004a88 <runFRTask+0x2b8>)
 800492a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800492e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004a90 <runFRTask+0x2c0>
 8004932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493a:	d501      	bpl.n	8004940 <runFRTask+0x170>
 800493c:	2346      	movs	r3, #70	; 0x46
 800493e:	e006      	b.n	800494e <runFRTask+0x17e>
 8004940:	4b51      	ldr	r3, [pc, #324]	; (8004a88 <runFRTask+0x2b8>)
 8004942:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494a:	ee17 3a90 	vmov	r3, s15
 800494e:	4a51      	ldr	r2, [pc, #324]	; (8004a94 <runFRTask+0x2c4>)
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	6413      	str	r3, [r2, #64]	; 0x40
 8004954:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004958:	f002 f856 	bl	8006a08 <HAL_Delay>
 800495c:	4b4a      	ldr	r3, [pc, #296]	; (8004a88 <runFRTask+0x2b8>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	4a4d      	ldr	r2, [pc, #308]	; (8004a98 <runFRTask+0x2c8>)
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	4b48      	ldr	r3, [pc, #288]	; (8004a88 <runFRTask+0x2b8>)
 8004968:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	2104      	movs	r1, #4
 800497a:	4848      	ldr	r0, [pc, #288]	; (8004a9c <runFRTask+0x2cc>)
 800497c:	f002 ff78 	bl	8007870 <HAL_GPIO_WritePin>
 8004980:	4b41      	ldr	r3, [pc, #260]	; (8004a88 <runFRTask+0x2b8>)
 8004982:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004986:	2b00      	cmp	r3, #0
 8004988:	bf14      	ite	ne
 800498a:	2301      	movne	r3, #1
 800498c:	2300      	moveq	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	2108      	movs	r1, #8
 8004994:	4841      	ldr	r0, [pc, #260]	; (8004a9c <runFRTask+0x2cc>)
 8004996:	f002 ff6b 	bl	8007870 <HAL_GPIO_WritePin>
 800499a:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <runFRTask+0x2b8>)
 800499c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	2120      	movs	r1, #32
 80049ae:	483b      	ldr	r0, [pc, #236]	; (8004a9c <runFRTask+0x2cc>)
 80049b0:	f002 ff5e 	bl	8007870 <HAL_GPIO_WritePin>
 80049b4:	4b34      	ldr	r3, [pc, #208]	; (8004a88 <runFRTask+0x2b8>)
 80049b6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	2110      	movs	r1, #16
 80049c8:	4834      	ldr	r0, [pc, #208]	; (8004a9c <runFRTask+0x2cc>)
 80049ca:	f002 ff51 	bl	8007870 <HAL_GPIO_WritePin>
 80049ce:	4b2e      	ldr	r3, [pc, #184]	; (8004a88 <runFRTask+0x2b8>)
 80049d0:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 80049d4:	4b32      	ldr	r3, [pc, #200]	; (8004aa0 <runFRTask+0x2d0>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	635a      	str	r2, [r3, #52]	; 0x34
 80049da:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <runFRTask+0x2b8>)
 80049dc:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80049e0:	4b2f      	ldr	r3, [pc, #188]	; (8004aa0 <runFRTask+0x2d0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80049e6:	482c      	ldr	r0, [pc, #176]	; (8004a98 <runFRTask+0x2c8>)
 80049e8:	f7fe faba 	bl	8002f60 <RobotTurn>
        targetDist = 2;
 80049ec:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <runFRTask+0x2b4>)
 80049ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049f2:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80049f4:	2200      	movs	r2, #0
 80049f6:	2100      	movs	r1, #0
 80049f8:	4822      	ldr	r0, [pc, #136]	; (8004a84 <runFRTask+0x2b4>)
 80049fa:	f7fd ffc1 	bl	8002980 <RobotMoveDist>
        break;
 80049fe:	bf00      	nop
      }
      clickOnce = 0;
 8004a00:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <runFRTask+0x2d8>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <runFRTask+0x2ac>)
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	4b28      	ldr	r3, [pc, #160]	; (8004aac <runFRTask+0x2dc>)
 8004a0c:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004a0e:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <runFRTask+0x2ac>)
 8004a10:	2210      	movs	r2, #16
 8004a12:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004a14:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <runFRTask+0x2e0>)
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <runFRTask+0x2e0>)
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d112      	bne.n	8004a46 <runFRTask+0x276>
      {
        __CLEAR_CURCMD(curCmd);
 8004a20:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <runFRTask+0x2b0>)
 8004a22:	2264      	movs	r2, #100	; 0x64
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <runFRTask+0x2b0>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004a2c:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <runFRTask+0x2e4>)
 8004a2e:	210f      	movs	r1, #15
 8004a30:	4821      	ldr	r0, [pc, #132]	; (8004ab8 <runFRTask+0x2e8>)
 8004a32:	f00a fbcf 	bl	800f1d4 <sniprintf>
 8004a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a3a:	2206      	movs	r2, #6
 8004a3c:	491f      	ldr	r1, [pc, #124]	; (8004abc <runFRTask+0x2ec>)
 8004a3e:	4820      	ldr	r0, [pc, #128]	; (8004ac0 <runFRTask+0x2f0>)
 8004a40:	f006 fa49 	bl	800aed6 <HAL_UART_Transmit>
 8004a44:	e6c8      	b.n	80047d8 <runFRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <runFRTask+0x2e0>)
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	4a0d      	ldr	r2, [pc, #52]	; (8004a80 <runFRTask+0x2b0>)
 8004a4c:	4918      	ldr	r1, [pc, #96]	; (8004ab0 <runFRTask+0x2e0>)
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <runFRTask+0x2e0>)
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <runFRTask+0x2e0>)
 8004a5e:	7892      	ldrb	r2, [r2, #2]
 8004a60:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a64:	fb01 f202 	mul.w	r2, r1, r2
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <runFRTask+0x2e0>)
 8004a6e:	705a      	strb	r2, [r3, #1]
 8004a70:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <runFRTask+0x2f4>)
 8004a72:	210f      	movs	r1, #15
 8004a74:	4810      	ldr	r0, [pc, #64]	; (8004ab8 <runFRTask+0x2e8>)
 8004a76:	f00a fbad 	bl	800f1d4 <sniprintf>
    if (curTask != TASK_FR)
 8004a7a:	e6ad      	b.n	80047d8 <runFRTask+0x8>
 8004a7c:	20000134 	.word	0x20000134
 8004a80:	200004c8 	.word	0x200004c8
 8004a84:	200004f4 	.word	0x200004f4
 8004a88:	20000004 	.word	0x20000004
 8004a8c:	43848000 	.word	0x43848000
 8004a90:	428c0000 	.word	0x428c0000
 8004a94:	200002a4 	.word	0x200002a4
 8004a98:	200004e0 	.word	0x200004e0
 8004a9c:	40020000 	.word	0x40020000
 8004aa0:	200003c4 	.word	0x200003c4
 8004aa4:	40600000 	.word	0x40600000
 8004aa8:	20000560 	.word	0x20000560
 8004aac:	20000135 	.word	0x20000135
 8004ab0:	20000494 	.word	0x20000494
 8004ab4:	0800fbe4 	.word	0x0800fbe4
 8004ab8:	200004cc 	.word	0x200004cc
 8004abc:	0800fbec 	.word	0x0800fbec
 8004ac0:	2000040c 	.word	0x2000040c
 8004ac4:	0800fbf4 	.word	0x0800fbf4

08004ac8 <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 8004ad0:	4ba8      	ldr	r3, [pc, #672]	; (8004d74 <runBLTask+0x2ac>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d004      	beq.n	8004ae2 <runBLTask+0x1a>
      osDelay(1000);
 8004ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004adc:	f007 fb46 	bl	800c16c <osDelay>
 8004ae0:	e7f6      	b.n	8004ad0 <runBLTask+0x8>
    else
    {

      switch (curCmd.val)
 8004ae2:	4ba5      	ldr	r3, [pc, #660]	; (8004d78 <runBLTask+0x2b0>)
 8004ae4:	885b      	ldrh	r3, [r3, #2]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8084 	beq.w	8004bf4 <runBLTask+0x12c>
 8004aec:	2b1e      	cmp	r3, #30
 8004aee:	f040 8103 	bne.w	8004cf8 <runBLTask+0x230>
      {
      case 30: // BL30 (outdoor 3x2)
        targetDist = 1;
 8004af2:	4ba2      	ldr	r3, [pc, #648]	; (8004d7c <runBLTask+0x2b4>)
 8004af4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004af8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004afa:	2200      	movs	r2, #0
 8004afc:	2101      	movs	r1, #1
 8004afe:	489f      	ldr	r0, [pc, #636]	; (8004d7c <runBLTask+0x2b4>)
 8004b00:	f7fd ff3e 	bl	8002980 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 8004b04:	4b9e      	ldr	r3, [pc, #632]	; (8004d80 <runBLTask+0x2b8>)
 8004b06:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8004b0a:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8004d84 <runBLTask+0x2bc>
 8004b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b16:	dd02      	ble.n	8004b1e <runBLTask+0x56>
 8004b18:	f240 1309 	movw	r3, #265	; 0x109
 8004b1c:	e012      	b.n	8004b44 <runBLTask+0x7c>
 8004b1e:	4b98      	ldr	r3, [pc, #608]	; (8004d80 <runBLTask+0x2b8>)
 8004b20:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8004b24:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8004d88 <runBLTask+0x2c0>
 8004b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	d501      	bpl.n	8004b36 <runBLTask+0x6e>
 8004b32:	2346      	movs	r3, #70	; 0x46
 8004b34:	e006      	b.n	8004b44 <runBLTask+0x7c>
 8004b36:	4b92      	ldr	r3, [pc, #584]	; (8004d80 <runBLTask+0x2b8>)
 8004b38:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8004b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b40:	ee17 3a90 	vmov	r3, s15
 8004b44:	4a91      	ldr	r2, [pc, #580]	; (8004d8c <runBLTask+0x2c4>)
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004b4e:	f001 ff5b 	bl	8006a08 <HAL_Delay>
 8004b52:	4b8b      	ldr	r3, [pc, #556]	; (8004d80 <runBLTask+0x2b8>)
 8004b54:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004b58:	4a8d      	ldr	r2, [pc, #564]	; (8004d90 <runBLTask+0x2c8>)
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b88      	ldr	r3, [pc, #544]	; (8004d80 <runBLTask+0x2b8>)
 8004b5e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2104      	movs	r1, #4
 8004b70:	4888      	ldr	r0, [pc, #544]	; (8004d94 <runBLTask+0x2cc>)
 8004b72:	f002 fe7d 	bl	8007870 <HAL_GPIO_WritePin>
 8004b76:	4b82      	ldr	r3, [pc, #520]	; (8004d80 <runBLTask+0x2b8>)
 8004b78:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	2108      	movs	r1, #8
 8004b8a:	4882      	ldr	r0, [pc, #520]	; (8004d94 <runBLTask+0x2cc>)
 8004b8c:	f002 fe70 	bl	8007870 <HAL_GPIO_WritePin>
 8004b90:	4b7b      	ldr	r3, [pc, #492]	; (8004d80 <runBLTask+0x2b8>)
 8004b92:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2120      	movs	r1, #32
 8004ba4:	487b      	ldr	r0, [pc, #492]	; (8004d94 <runBLTask+0x2cc>)
 8004ba6:	f002 fe63 	bl	8007870 <HAL_GPIO_WritePin>
 8004baa:	4b75      	ldr	r3, [pc, #468]	; (8004d80 <runBLTask+0x2b8>)
 8004bac:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2110      	movs	r1, #16
 8004bbe:	4875      	ldr	r0, [pc, #468]	; (8004d94 <runBLTask+0x2cc>)
 8004bc0:	f002 fe56 	bl	8007870 <HAL_GPIO_WritePin>
 8004bc4:	4b6e      	ldr	r3, [pc, #440]	; (8004d80 <runBLTask+0x2b8>)
 8004bc6:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 8004bca:	4b73      	ldr	r3, [pc, #460]	; (8004d98 <runBLTask+0x2d0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	635a      	str	r2, [r3, #52]	; 0x34
 8004bd0:	4b6b      	ldr	r3, [pc, #428]	; (8004d80 <runBLTask+0x2b8>)
 8004bd2:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8004bd6:	4b70      	ldr	r3, [pc, #448]	; (8004d98 <runBLTask+0x2d0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004bdc:	486c      	ldr	r0, [pc, #432]	; (8004d90 <runBLTask+0x2c8>)
 8004bde:	f7fe f9bf 	bl	8002f60 <RobotTurn>
        targetDist = 6;
 8004be2:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <runBLTask+0x2b4>)
 8004be4:	4a6d      	ldr	r2, [pc, #436]	; (8004d9c <runBLTask+0x2d4>)
 8004be6:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004be8:	2200      	movs	r2, #0
 8004bea:	2100      	movs	r1, #0
 8004bec:	4863      	ldr	r0, [pc, #396]	; (8004d7c <runBLTask+0x2b4>)
 8004bee:	f7fd fec7 	bl	8002980 <RobotMoveDist>
        break;
 8004bf2:	e081      	b.n	8004cf8 <runBLTask+0x230>
      case 00: // BL00 (indoor 3x2)
        targetDist = 1;
 8004bf4:	4b61      	ldr	r3, [pc, #388]	; (8004d7c <runBLTask+0x2b4>)
 8004bf6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004bfa:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2100      	movs	r1, #0
 8004c00:	485e      	ldr	r0, [pc, #376]	; (8004d7c <runBLTask+0x2b4>)
 8004c02:	f7fd febd 	bl	8002980 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 8004c06:	4b5e      	ldr	r3, [pc, #376]	; (8004d80 <runBLTask+0x2b8>)
 8004c08:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004c0c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8004d84 <runBLTask+0x2bc>
 8004c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c18:	dd02      	ble.n	8004c20 <runBLTask+0x158>
 8004c1a:	f240 1309 	movw	r3, #265	; 0x109
 8004c1e:	e012      	b.n	8004c46 <runBLTask+0x17e>
 8004c20:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <runBLTask+0x2b8>)
 8004c22:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004c26:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004d88 <runBLTask+0x2c0>
 8004c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c32:	d501      	bpl.n	8004c38 <runBLTask+0x170>
 8004c34:	2346      	movs	r3, #70	; 0x46
 8004c36:	e006      	b.n	8004c46 <runBLTask+0x17e>
 8004c38:	4b51      	ldr	r3, [pc, #324]	; (8004d80 <runBLTask+0x2b8>)
 8004c3a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c42:	ee17 3a90 	vmov	r3, s15
 8004c46:	4a51      	ldr	r2, [pc, #324]	; (8004d8c <runBLTask+0x2c4>)
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004c50:	f001 feda 	bl	8006a08 <HAL_Delay>
 8004c54:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <runBLTask+0x2b8>)
 8004c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5a:	4a4d      	ldr	r2, [pc, #308]	; (8004d90 <runBLTask+0x2c8>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	4b48      	ldr	r3, [pc, #288]	; (8004d80 <runBLTask+0x2b8>)
 8004c60:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2104      	movs	r1, #4
 8004c72:	4848      	ldr	r0, [pc, #288]	; (8004d94 <runBLTask+0x2cc>)
 8004c74:	f002 fdfc 	bl	8007870 <HAL_GPIO_WritePin>
 8004c78:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <runBLTask+0x2b8>)
 8004c7a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bf14      	ite	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	2300      	moveq	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2108      	movs	r1, #8
 8004c8c:	4841      	ldr	r0, [pc, #260]	; (8004d94 <runBLTask+0x2cc>)
 8004c8e:	f002 fdef 	bl	8007870 <HAL_GPIO_WritePin>
 8004c92:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <runBLTask+0x2b8>)
 8004c94:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2120      	movs	r1, #32
 8004ca6:	483b      	ldr	r0, [pc, #236]	; (8004d94 <runBLTask+0x2cc>)
 8004ca8:	f002 fde2 	bl	8007870 <HAL_GPIO_WritePin>
 8004cac:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <runBLTask+0x2b8>)
 8004cae:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf14      	ite	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	2300      	moveq	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2110      	movs	r1, #16
 8004cc0:	4834      	ldr	r0, [pc, #208]	; (8004d94 <runBLTask+0x2cc>)
 8004cc2:	f002 fdd5 	bl	8007870 <HAL_GPIO_WritePin>
 8004cc6:	4b2e      	ldr	r3, [pc, #184]	; (8004d80 <runBLTask+0x2b8>)
 8004cc8:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8004ccc:	4b32      	ldr	r3, [pc, #200]	; (8004d98 <runBLTask+0x2d0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8004cd2:	4b2b      	ldr	r3, [pc, #172]	; (8004d80 <runBLTask+0x2b8>)
 8004cd4:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 8004cd8:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <runBLTask+0x2d0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004cde:	482c      	ldr	r0, [pc, #176]	; (8004d90 <runBLTask+0x2c8>)
 8004ce0:	f7fe f93e 	bl	8002f60 <RobotTurn>
        targetDist = 8;
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <runBLTask+0x2b4>)
 8004ce6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8004cea:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004cec:	2200      	movs	r2, #0
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4822      	ldr	r0, [pc, #136]	; (8004d7c <runBLTask+0x2b4>)
 8004cf2:	f7fd fe45 	bl	8002980 <RobotMoveDist>
        break;
 8004cf6:	bf00      	nop
      }
      clickOnce = 0;
 8004cf8:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <runBLTask+0x2d8>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <runBLTask+0x2ac>)
 8004d00:	781a      	ldrb	r2, [r3, #0]
 8004d02:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <runBLTask+0x2dc>)
 8004d04:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004d06:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <runBLTask+0x2ac>)
 8004d08:	2210      	movs	r2, #16
 8004d0a:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004d0c:	4b26      	ldr	r3, [pc, #152]	; (8004da8 <runBLTask+0x2e0>)
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <runBLTask+0x2e0>)
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d112      	bne.n	8004d3e <runBLTask+0x276>
      {
        __CLEAR_CURCMD(curCmd);
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <runBLTask+0x2b0>)
 8004d1a:	2264      	movs	r2, #100	; 0x64
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <runBLTask+0x2b0>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004d24:	4a21      	ldr	r2, [pc, #132]	; (8004dac <runBLTask+0x2e4>)
 8004d26:	210f      	movs	r1, #15
 8004d28:	4821      	ldr	r0, [pc, #132]	; (8004db0 <runBLTask+0x2e8>)
 8004d2a:	f00a fa53 	bl	800f1d4 <sniprintf>
 8004d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d32:	2206      	movs	r2, #6
 8004d34:	491f      	ldr	r1, [pc, #124]	; (8004db4 <runBLTask+0x2ec>)
 8004d36:	4820      	ldr	r0, [pc, #128]	; (8004db8 <runBLTask+0x2f0>)
 8004d38:	f006 f8cd 	bl	800aed6 <HAL_UART_Transmit>
 8004d3c:	e6c8      	b.n	8004ad0 <runBLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <runBLTask+0x2e0>)
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	4a0d      	ldr	r2, [pc, #52]	; (8004d78 <runBLTask+0x2b0>)
 8004d44:	4918      	ldr	r1, [pc, #96]	; (8004da8 <runBLTask+0x2e0>)
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4b16      	ldr	r3, [pc, #88]	; (8004da8 <runBLTask+0x2e0>)
 8004d50:	785b      	ldrb	r3, [r3, #1]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <runBLTask+0x2e0>)
 8004d56:	7892      	ldrb	r2, [r2, #2]
 8004d58:	fb93 f1f2 	sdiv	r1, r3, r2
 8004d5c:	fb01 f202 	mul.w	r2, r1, r2
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <runBLTask+0x2e0>)
 8004d66:	705a      	strb	r2, [r3, #1]
 8004d68:	4a14      	ldr	r2, [pc, #80]	; (8004dbc <runBLTask+0x2f4>)
 8004d6a:	210f      	movs	r1, #15
 8004d6c:	4810      	ldr	r0, [pc, #64]	; (8004db0 <runBLTask+0x2e8>)
 8004d6e:	f00a fa31 	bl	800f1d4 <sniprintf>
    if (curTask != TASK_BL)
 8004d72:	e6ad      	b.n	8004ad0 <runBLTask+0x8>
 8004d74:	20000134 	.word	0x20000134
 8004d78:	200004c8 	.word	0x200004c8
 8004d7c:	200004f4 	.word	0x200004f4
 8004d80:	20000004 	.word	0x20000004
 8004d84:	43848000 	.word	0x43848000
 8004d88:	428c0000 	.word	0x428c0000
 8004d8c:	200002a4 	.word	0x200002a4
 8004d90:	200004e0 	.word	0x200004e0
 8004d94:	40020000 	.word	0x40020000
 8004d98:	200003c4 	.word	0x200003c4
 8004d9c:	40c00000 	.word	0x40c00000
 8004da0:	20000560 	.word	0x20000560
 8004da4:	20000135 	.word	0x20000135
 8004da8:	20000494 	.word	0x20000494
 8004dac:	0800fbe4 	.word	0x0800fbe4
 8004db0:	200004cc 	.word	0x200004cc
 8004db4:	0800fbec 	.word	0x0800fbec
 8004db8:	2000040c 	.word	0x2000040c
 8004dbc:	0800fbf4 	.word	0x0800fbf4

08004dc0 <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 8004dc8:	4ba7      	ldr	r3, [pc, #668]	; (8005068 <runBRTask+0x2a8>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b05      	cmp	r3, #5
 8004dce:	d004      	beq.n	8004dda <runBRTask+0x1a>
      osDelay(1000);
 8004dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dd4:	f007 f9ca 	bl	800c16c <osDelay>
 8004dd8:	e7f6      	b.n	8004dc8 <runBRTask+0x8>
    else
    {

      switch (curCmd.val)
 8004dda:	4ba4      	ldr	r3, [pc, #656]	; (800506c <runBRTask+0x2ac>)
 8004ddc:	885b      	ldrh	r3, [r3, #2]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8084 	beq.w	8004eec <runBRTask+0x12c>
 8004de4:	2b1e      	cmp	r3, #30
 8004de6:	f040 8101 	bne.w	8004fec <runBRTask+0x22c>
      {
      case 30: // BR30 (outdoor 3x2)
        targetDist = 2;
 8004dea:	4ba1      	ldr	r3, [pc, #644]	; (8005070 <runBRTask+0x2b0>)
 8004dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004df0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004df2:	2200      	movs	r2, #0
 8004df4:	2100      	movs	r1, #0
 8004df6:	489e      	ldr	r0, [pc, #632]	; (8005070 <runBRTask+0x2b0>)
 8004df8:	f7fd fdc2 	bl	8002980 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 8004dfc:	4b9d      	ldr	r3, [pc, #628]	; (8005074 <runBRTask+0x2b4>)
 8004dfe:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8004e02:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8005078 <runBRTask+0x2b8>
 8004e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0e:	dd02      	ble.n	8004e16 <runBRTask+0x56>
 8004e10:	f240 1309 	movw	r3, #265	; 0x109
 8004e14:	e012      	b.n	8004e3c <runBRTask+0x7c>
 8004e16:	4b97      	ldr	r3, [pc, #604]	; (8005074 <runBRTask+0x2b4>)
 8004e18:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8004e1c:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800507c <runBRTask+0x2bc>
 8004e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e28:	d501      	bpl.n	8004e2e <runBRTask+0x6e>
 8004e2a:	2346      	movs	r3, #70	; 0x46
 8004e2c:	e006      	b.n	8004e3c <runBRTask+0x7c>
 8004e2e:	4b91      	ldr	r3, [pc, #580]	; (8005074 <runBRTask+0x2b4>)
 8004e30:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8004e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e38:	ee17 3a90 	vmov	r3, s15
 8004e3c:	4a90      	ldr	r2, [pc, #576]	; (8005080 <runBRTask+0x2c0>)
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	6413      	str	r3, [r2, #64]	; 0x40
 8004e42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004e46:	f001 fddf 	bl	8006a08 <HAL_Delay>
 8004e4a:	4b8a      	ldr	r3, [pc, #552]	; (8005074 <runBRTask+0x2b4>)
 8004e4c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004e50:	4a8c      	ldr	r2, [pc, #560]	; (8005084 <runBRTask+0x2c4>)
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	4b87      	ldr	r3, [pc, #540]	; (8005074 <runBRTask+0x2b4>)
 8004e56:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bf0c      	ite	eq
 8004e5e:	2301      	moveq	r3, #1
 8004e60:	2300      	movne	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	2104      	movs	r1, #4
 8004e68:	4887      	ldr	r0, [pc, #540]	; (8005088 <runBRTask+0x2c8>)
 8004e6a:	f002 fd01 	bl	8007870 <HAL_GPIO_WritePin>
 8004e6e:	4b81      	ldr	r3, [pc, #516]	; (8005074 <runBRTask+0x2b4>)
 8004e70:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	2108      	movs	r1, #8
 8004e82:	4881      	ldr	r0, [pc, #516]	; (8005088 <runBRTask+0x2c8>)
 8004e84:	f002 fcf4 	bl	8007870 <HAL_GPIO_WritePin>
 8004e88:	4b7a      	ldr	r3, [pc, #488]	; (8005074 <runBRTask+0x2b4>)
 8004e8a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	487a      	ldr	r0, [pc, #488]	; (8005088 <runBRTask+0x2c8>)
 8004e9e:	f002 fce7 	bl	8007870 <HAL_GPIO_WritePin>
 8004ea2:	4b74      	ldr	r3, [pc, #464]	; (8005074 <runBRTask+0x2b4>)
 8004ea4:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2110      	movs	r1, #16
 8004eb6:	4874      	ldr	r0, [pc, #464]	; (8005088 <runBRTask+0x2c8>)
 8004eb8:	f002 fcda 	bl	8007870 <HAL_GPIO_WritePin>
 8004ebc:	4b6d      	ldr	r3, [pc, #436]	; (8005074 <runBRTask+0x2b4>)
 8004ebe:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 8004ec2:	4b72      	ldr	r3, [pc, #456]	; (800508c <runBRTask+0x2cc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec8:	4b6a      	ldr	r3, [pc, #424]	; (8005074 <runBRTask+0x2b4>)
 8004eca:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 8004ece:	4b6f      	ldr	r3, [pc, #444]	; (800508c <runBRTask+0x2cc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004ed4:	486b      	ldr	r0, [pc, #428]	; (8005084 <runBRTask+0x2c4>)
 8004ed6:	f7fe f843 	bl	8002f60 <RobotTurn>
        targetDist = 7;
 8004eda:	4b65      	ldr	r3, [pc, #404]	; (8005070 <runBRTask+0x2b0>)
 8004edc:	4a6c      	ldr	r2, [pc, #432]	; (8005090 <runBRTask+0x2d0>)
 8004ede:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4862      	ldr	r0, [pc, #392]	; (8005070 <runBRTask+0x2b0>)
 8004ee6:	f7fd fd4b 	bl	8002980 <RobotMoveDist>
        break;
 8004eea:	e07f      	b.n	8004fec <runBRTask+0x22c>
      case 00: // BR00 (indoor 3x2)
        targetDist = 5;
 8004eec:	4b60      	ldr	r3, [pc, #384]	; (8005070 <runBRTask+0x2b0>)
 8004eee:	4a69      	ldr	r2, [pc, #420]	; (8005094 <runBRTask+0x2d4>)
 8004ef0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	485e      	ldr	r0, [pc, #376]	; (8005070 <runBRTask+0x2b0>)
 8004ef8:	f7fd fd42 	bl	8002980 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 8004efc:	4b5d      	ldr	r3, [pc, #372]	; (8005074 <runBRTask+0x2b4>)
 8004efe:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004f02:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8005078 <runBRTask+0x2b8>
 8004f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0e:	dd02      	ble.n	8004f16 <runBRTask+0x156>
 8004f10:	f240 1309 	movw	r3, #265	; 0x109
 8004f14:	e012      	b.n	8004f3c <runBRTask+0x17c>
 8004f16:	4b57      	ldr	r3, [pc, #348]	; (8005074 <runBRTask+0x2b4>)
 8004f18:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004f1c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800507c <runBRTask+0x2bc>
 8004f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f28:	d501      	bpl.n	8004f2e <runBRTask+0x16e>
 8004f2a:	2346      	movs	r3, #70	; 0x46
 8004f2c:	e006      	b.n	8004f3c <runBRTask+0x17c>
 8004f2e:	4b51      	ldr	r3, [pc, #324]	; (8005074 <runBRTask+0x2b4>)
 8004f30:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f38:	ee17 3a90 	vmov	r3, s15
 8004f3c:	4a50      	ldr	r2, [pc, #320]	; (8005080 <runBRTask+0x2c0>)
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	6413      	str	r3, [r2, #64]	; 0x40
 8004f42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f46:	f001 fd5f 	bl	8006a08 <HAL_Delay>
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <runBRTask+0x2b4>)
 8004f4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f50:	4a4c      	ldr	r2, [pc, #304]	; (8005084 <runBRTask+0x2c4>)
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	4b47      	ldr	r3, [pc, #284]	; (8005074 <runBRTask+0x2b4>)
 8004f56:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	2104      	movs	r1, #4
 8004f68:	4847      	ldr	r0, [pc, #284]	; (8005088 <runBRTask+0x2c8>)
 8004f6a:	f002 fc81 	bl	8007870 <HAL_GPIO_WritePin>
 8004f6e:	4b41      	ldr	r3, [pc, #260]	; (8005074 <runBRTask+0x2b4>)
 8004f70:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	2108      	movs	r1, #8
 8004f82:	4841      	ldr	r0, [pc, #260]	; (8005088 <runBRTask+0x2c8>)
 8004f84:	f002 fc74 	bl	8007870 <HAL_GPIO_WritePin>
 8004f88:	4b3a      	ldr	r3, [pc, #232]	; (8005074 <runBRTask+0x2b4>)
 8004f8a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bf0c      	ite	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	2300      	movne	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	2120      	movs	r1, #32
 8004f9c:	483a      	ldr	r0, [pc, #232]	; (8005088 <runBRTask+0x2c8>)
 8004f9e:	f002 fc67 	bl	8007870 <HAL_GPIO_WritePin>
 8004fa2:	4b34      	ldr	r3, [pc, #208]	; (8005074 <runBRTask+0x2b4>)
 8004fa4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf14      	ite	ne
 8004fac:	2301      	movne	r3, #1
 8004fae:	2300      	moveq	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2110      	movs	r1, #16
 8004fb6:	4834      	ldr	r0, [pc, #208]	; (8005088 <runBRTask+0x2c8>)
 8004fb8:	f002 fc5a 	bl	8007870 <HAL_GPIO_WritePin>
 8004fbc:	4b2d      	ldr	r3, [pc, #180]	; (8005074 <runBRTask+0x2b4>)
 8004fbe:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8004fc2:	4b32      	ldr	r3, [pc, #200]	; (800508c <runBRTask+0x2cc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	635a      	str	r2, [r3, #52]	; 0x34
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <runBRTask+0x2b4>)
 8004fca:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8004fce:	4b2f      	ldr	r3, [pc, #188]	; (800508c <runBRTask+0x2cc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004fd4:	482b      	ldr	r0, [pc, #172]	; (8005084 <runBRTask+0x2c4>)
 8004fd6:	f7fd ffc3 	bl	8002f60 <RobotTurn>
        targetDist = 3;
 8004fda:	4b25      	ldr	r3, [pc, #148]	; (8005070 <runBRTask+0x2b0>)
 8004fdc:	4a2e      	ldr	r2, [pc, #184]	; (8005098 <runBRTask+0x2d8>)
 8004fde:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4822      	ldr	r0, [pc, #136]	; (8005070 <runBRTask+0x2b0>)
 8004fe6:	f7fd fccb 	bl	8002980 <RobotMoveDist>
        break;
 8004fea:	bf00      	nop
      }
      clickOnce = 0;
 8004fec:	4b2b      	ldr	r3, [pc, #172]	; (800509c <runBRTask+0x2dc>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004ff2:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <runBRTask+0x2a8>)
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	4b2a      	ldr	r3, [pc, #168]	; (80050a0 <runBRTask+0x2e0>)
 8004ff8:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <runBRTask+0x2a8>)
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8005000:	4b28      	ldr	r3, [pc, #160]	; (80050a4 <runBRTask+0x2e4>)
 8005002:	781a      	ldrb	r2, [r3, #0]
 8005004:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <runBRTask+0x2e4>)
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	429a      	cmp	r2, r3
 800500a:	d112      	bne.n	8005032 <runBRTask+0x272>
      {
        __CLEAR_CURCMD(curCmd);
 800500c:	4b17      	ldr	r3, [pc, #92]	; (800506c <runBRTask+0x2ac>)
 800500e:	2264      	movs	r2, #100	; 0x64
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	4b16      	ldr	r3, [pc, #88]	; (800506c <runBRTask+0x2ac>)
 8005014:	2200      	movs	r2, #0
 8005016:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005018:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <runBRTask+0x2e8>)
 800501a:	210f      	movs	r1, #15
 800501c:	4823      	ldr	r0, [pc, #140]	; (80050ac <runBRTask+0x2ec>)
 800501e:	f00a f8d9 	bl	800f1d4 <sniprintf>
 8005022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005026:	2206      	movs	r2, #6
 8005028:	4921      	ldr	r1, [pc, #132]	; (80050b0 <runBRTask+0x2f0>)
 800502a:	4822      	ldr	r0, [pc, #136]	; (80050b4 <runBRTask+0x2f4>)
 800502c:	f005 ff53 	bl	800aed6 <HAL_UART_Transmit>
 8005030:	e6ca      	b.n	8004dc8 <runBRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <runBRTask+0x2e4>)
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	4a0d      	ldr	r2, [pc, #52]	; (800506c <runBRTask+0x2ac>)
 8005038:	491a      	ldr	r1, [pc, #104]	; (80050a4 <runBRTask+0x2e4>)
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <runBRTask+0x2e4>)
 8005044:	785b      	ldrb	r3, [r3, #1]
 8005046:	3301      	adds	r3, #1
 8005048:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <runBRTask+0x2e4>)
 800504a:	7892      	ldrb	r2, [r2, #2]
 800504c:	fb93 f1f2 	sdiv	r1, r3, r2
 8005050:	fb01 f202 	mul.w	r2, r1, r2
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	b2da      	uxtb	r2, r3
 8005058:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <runBRTask+0x2e4>)
 800505a:	705a      	strb	r2, [r3, #1]
 800505c:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <runBRTask+0x2f8>)
 800505e:	210f      	movs	r1, #15
 8005060:	4812      	ldr	r0, [pc, #72]	; (80050ac <runBRTask+0x2ec>)
 8005062:	f00a f8b7 	bl	800f1d4 <sniprintf>
    if (curTask != TASK_BR)
 8005066:	e6af      	b.n	8004dc8 <runBRTask+0x8>
 8005068:	20000134 	.word	0x20000134
 800506c:	200004c8 	.word	0x200004c8
 8005070:	200004f4 	.word	0x200004f4
 8005074:	20000004 	.word	0x20000004
 8005078:	43848000 	.word	0x43848000
 800507c:	428c0000 	.word	0x428c0000
 8005080:	200002a4 	.word	0x200002a4
 8005084:	200004e0 	.word	0x200004e0
 8005088:	40020000 	.word	0x40020000
 800508c:	200003c4 	.word	0x200003c4
 8005090:	40e00000 	.word	0x40e00000
 8005094:	40a00000 	.word	0x40a00000
 8005098:	40400000 	.word	0x40400000
 800509c:	20000560 	.word	0x20000560
 80050a0:	20000135 	.word	0x20000135
 80050a4:	20000494 	.word	0x20000494
 80050a8:	0800fbe4 	.word	0x0800fbe4
 80050ac:	200004cc 	.word	0x200004cc
 80050b0:	0800fbec 	.word	0x0800fbec
 80050b4:	2000040c 	.word	0x2000040c
 80050b8:	0800fbf4 	.word	0x0800fbf4

080050bc <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 80050c4:	4bc7      	ldr	r3, [pc, #796]	; (80053e4 <runCmdTask+0x328>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	2b63      	cmp	r3, #99	; 0x63
 80050cc:	f200 834b 	bhi.w	8005766 <runCmdTask+0x6aa>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <runCmdTask+0x1c>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	08005269 	.word	0x08005269
 80050dc:	08005277 	.word	0x08005277
 80050e0:	08005285 	.word	0x08005285
 80050e4:	08005285 	.word	0x08005285
 80050e8:	08005285 	.word	0x08005285
 80050ec:	08005285 	.word	0x08005285
 80050f0:	08005459 	.word	0x08005459
 80050f4:	08005467 	.word	0x08005467
 80050f8:	08005475 	.word	0x08005475
 80050fc:	08005483 	.word	0x08005483
 8005100:	08005491 	.word	0x08005491
 8005104:	08005491 	.word	0x08005491
 8005108:	08005767 	.word	0x08005767
 800510c:	080054db 	.word	0x080054db
 8005110:	08005767 	.word	0x08005767
 8005114:	08005767 	.word	0x08005767
 8005118:	08005767 	.word	0x08005767
 800511c:	08005767 	.word	0x08005767
 8005120:	08005767 	.word	0x08005767
 8005124:	08005767 	.word	0x08005767
 8005128:	08005767 	.word	0x08005767
 800512c:	08005767 	.word	0x08005767
 8005130:	08005767 	.word	0x08005767
 8005134:	08005767 	.word	0x08005767
 8005138:	08005767 	.word	0x08005767
 800513c:	08005767 	.word	0x08005767
 8005140:	08005767 	.word	0x08005767
 8005144:	08005767 	.word	0x08005767
 8005148:	08005767 	.word	0x08005767
 800514c:	08005767 	.word	0x08005767
 8005150:	08005767 	.word	0x08005767
 8005154:	08005767 	.word	0x08005767
 8005158:	08005767 	.word	0x08005767
 800515c:	08005767 	.word	0x08005767
 8005160:	08005767 	.word	0x08005767
 8005164:	08005767 	.word	0x08005767
 8005168:	08005767 	.word	0x08005767
 800516c:	08005767 	.word	0x08005767
 8005170:	08005767 	.word	0x08005767
 8005174:	08005767 	.word	0x08005767
 8005178:	08005767 	.word	0x08005767
 800517c:	08005767 	.word	0x08005767
 8005180:	08005767 	.word	0x08005767
 8005184:	08005767 	.word	0x08005767
 8005188:	08005767 	.word	0x08005767
 800518c:	08005767 	.word	0x08005767
 8005190:	08005767 	.word	0x08005767
 8005194:	08005767 	.word	0x08005767
 8005198:	08005767 	.word	0x08005767
 800519c:	08005767 	.word	0x08005767
 80051a0:	08005767 	.word	0x08005767
 80051a4:	08005767 	.word	0x08005767
 80051a8:	08005767 	.word	0x08005767
 80051ac:	08005767 	.word	0x08005767
 80051b0:	08005767 	.word	0x08005767
 80051b4:	08005767 	.word	0x08005767
 80051b8:	08005767 	.word	0x08005767
 80051bc:	08005767 	.word	0x08005767
 80051c0:	08005767 	.word	0x08005767
 80051c4:	08005767 	.word	0x08005767
 80051c8:	08005767 	.word	0x08005767
 80051cc:	08005767 	.word	0x08005767
 80051d0:	08005767 	.word	0x08005767
 80051d4:	08005767 	.word	0x08005767
 80051d8:	08005767 	.word	0x08005767
 80051dc:	08005767 	.word	0x08005767
 80051e0:	08005767 	.word	0x08005767
 80051e4:	08005767 	.word	0x08005767
 80051e8:	08005767 	.word	0x08005767
 80051ec:	08005767 	.word	0x08005767
 80051f0:	08005767 	.word	0x08005767
 80051f4:	08005767 	.word	0x08005767
 80051f8:	08005767 	.word	0x08005767
 80051fc:	08005767 	.word	0x08005767
 8005200:	08005767 	.word	0x08005767
 8005204:	08005767 	.word	0x08005767
 8005208:	08005767 	.word	0x08005767
 800520c:	08005767 	.word	0x08005767
 8005210:	08005767 	.word	0x08005767
 8005214:	08005767 	.word	0x08005767
 8005218:	08005767 	.word	0x08005767
 800521c:	08005767 	.word	0x08005767
 8005220:	08005767 	.word	0x08005767
 8005224:	08005767 	.word	0x08005767
 8005228:	08005767 	.word	0x08005767
 800522c:	08005767 	.word	0x08005767
 8005230:	08005767 	.word	0x08005767
 8005234:	080054e9 	.word	0x080054e9
 8005238:	080054e9 	.word	0x080054e9
 800523c:	08005605 	.word	0x08005605
 8005240:	08005605 	.word	0x08005605
 8005244:	08005713 	.word	0x08005713
 8005248:	08005721 	.word	0x08005721
 800524c:	0800572f 	.word	0x0800572f
 8005250:	0800573d 	.word	0x0800573d
 8005254:	0800574b 	.word	0x0800574b
 8005258:	08005759 	.word	0x08005759
 800525c:	08005767 	.word	0x08005767
 8005260:	08005767 	.word	0x08005767
 8005264:	08005767 	.word	0x08005767
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
      curTask = TASK_MOVE_FORWARD;
 8005268:	4b5f      	ldr	r3, [pc, #380]	; (80053e8 <runCmdTask+0x32c>)
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800526e:	4b5d      	ldr	r3, [pc, #372]	; (80053e4 <runCmdTask+0x328>)
 8005270:	2263      	movs	r2, #99	; 0x63
 8005272:	701a      	strb	r2, [r3, #0]
      break;
 8005274:	e278      	b.n	8005768 <runCmdTask+0x6ac>
    case 2: // BW
      curTask = TASK_MOVE_BACKWARD;
 8005276:	4b5c      	ldr	r3, [pc, #368]	; (80053e8 <runCmdTask+0x32c>)
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800527c:	4b59      	ldr	r3, [pc, #356]	; (80053e4 <runCmdTask+0x328>)
 800527e:	2263      	movs	r2, #99	; 0x63
 8005280:	701a      	strb	r2, [r3, #0]
      break;
 8005282:	e271      	b.n	8005768 <runCmdTask+0x6ac>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8005284:	4b57      	ldr	r3, [pc, #348]	; (80053e4 <runCmdTask+0x328>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	4a58      	ldr	r2, [pc, #352]	; (80053ec <runCmdTask+0x330>)
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	4413      	add	r3, r2
 800528e:	3304      	adds	r3, #4
 8005290:	edd3 7a00 	vldr	s15, [r3]
 8005294:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80053f0 <runCmdTask+0x334>
 8005298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800529c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a0:	dd02      	ble.n	80052a8 <runCmdTask+0x1ec>
 80052a2:	f240 1309 	movw	r3, #265	; 0x109
 80052a6:	e01c      	b.n	80052e2 <runCmdTask+0x226>
 80052a8:	4b4e      	ldr	r3, [pc, #312]	; (80053e4 <runCmdTask+0x328>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	4a4f      	ldr	r2, [pc, #316]	; (80053ec <runCmdTask+0x330>)
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	4413      	add	r3, r2
 80052b2:	3304      	adds	r3, #4
 80052b4:	edd3 7a00 	vldr	s15, [r3]
 80052b8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80053f4 <runCmdTask+0x338>
 80052bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c4:	d501      	bpl.n	80052ca <runCmdTask+0x20e>
 80052c6:	2346      	movs	r3, #70	; 0x46
 80052c8:	e00b      	b.n	80052e2 <runCmdTask+0x226>
 80052ca:	4b46      	ldr	r3, [pc, #280]	; (80053e4 <runCmdTask+0x328>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	4a47      	ldr	r2, [pc, #284]	; (80053ec <runCmdTask+0x330>)
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	4413      	add	r3, r2
 80052d4:	3304      	adds	r3, #4
 80052d6:	edd3 7a00 	vldr	s15, [r3]
 80052da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052de:	ee17 3a90 	vmov	r3, s15
 80052e2:	4a45      	ldr	r2, [pc, #276]	; (80053f8 <runCmdTask+0x33c>)
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	6413      	str	r3, [r2, #64]	; 0x40
 80052e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80052ec:	f001 fb8c 	bl	8006a08 <HAL_Delay>
 80052f0:	4b3c      	ldr	r3, [pc, #240]	; (80053e4 <runCmdTask+0x328>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	4a3d      	ldr	r2, [pc, #244]	; (80053ec <runCmdTask+0x330>)
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	4413      	add	r3, r2
 80052fa:	3308      	adds	r3, #8
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a3f      	ldr	r2, [pc, #252]	; (80053fc <runCmdTask+0x340>)
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b38      	ldr	r3, [pc, #224]	; (80053e4 <runCmdTask+0x328>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	4a39      	ldr	r2, [pc, #228]	; (80053ec <runCmdTask+0x330>)
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	4413      	add	r3, r2
 800530c:	330c      	adds	r3, #12
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	2104      	movs	r1, #4
 800531e:	4838      	ldr	r0, [pc, #224]	; (8005400 <runCmdTask+0x344>)
 8005320:	f002 faa6 	bl	8007870 <HAL_GPIO_WritePin>
 8005324:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <runCmdTask+0x328>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	4a30      	ldr	r2, [pc, #192]	; (80053ec <runCmdTask+0x330>)
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	4413      	add	r3, r2
 800532e:	330c      	adds	r3, #12
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	bf14      	ite	ne
 8005336:	2301      	movne	r3, #1
 8005338:	2300      	moveq	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	2108      	movs	r1, #8
 8005340:	482f      	ldr	r0, [pc, #188]	; (8005400 <runCmdTask+0x344>)
 8005342:	f002 fa95 	bl	8007870 <HAL_GPIO_WritePin>
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <runCmdTask+0x328>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	4a28      	ldr	r2, [pc, #160]	; (80053ec <runCmdTask+0x330>)
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	4413      	add	r3, r2
 8005350:	330c      	adds	r3, #12
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	2120      	movs	r1, #32
 8005362:	4827      	ldr	r0, [pc, #156]	; (8005400 <runCmdTask+0x344>)
 8005364:	f002 fa84 	bl	8007870 <HAL_GPIO_WritePin>
 8005368:	4b1e      	ldr	r3, [pc, #120]	; (80053e4 <runCmdTask+0x328>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	4a1f      	ldr	r2, [pc, #124]	; (80053ec <runCmdTask+0x330>)
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	4413      	add	r3, r2
 8005372:	330c      	adds	r3, #12
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	bf14      	ite	ne
 800537a:	2301      	movne	r3, #1
 800537c:	2300      	moveq	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	2110      	movs	r1, #16
 8005384:	481e      	ldr	r0, [pc, #120]	; (8005400 <runCmdTask+0x344>)
 8005386:	f002 fa73 	bl	8007870 <HAL_GPIO_WritePin>
 800538a:	4b16      	ldr	r3, [pc, #88]	; (80053e4 <runCmdTask+0x328>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	4a17      	ldr	r2, [pc, #92]	; (80053ec <runCmdTask+0x330>)
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	4413      	add	r3, r2
 8005394:	881a      	ldrh	r2, [r3, #0]
 8005396:	4b1b      	ldr	r3, [pc, #108]	; (8005404 <runCmdTask+0x348>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	635a      	str	r2, [r3, #52]	; 0x34
 800539c:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <runCmdTask+0x328>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	4a12      	ldr	r2, [pc, #72]	; (80053ec <runCmdTask+0x330>)
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	4413      	add	r3, r2
 80053a6:	3302      	adds	r3, #2
 80053a8:	881a      	ldrh	r2, [r3, #0]
 80053aa:	4b16      	ldr	r3, [pc, #88]	; (8005404 <runCmdTask+0x348>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80053b0:	4b15      	ldr	r3, [pc, #84]	; (8005408 <runCmdTask+0x34c>)
 80053b2:	781a      	ldrb	r2, [r3, #0]
 80053b4:	4b14      	ldr	r3, [pc, #80]	; (8005408 <runCmdTask+0x34c>)
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d12f      	bne.n	800541c <runCmdTask+0x360>
      {
        __CLEAR_CURCMD(curCmd);
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <runCmdTask+0x328>)
 80053be:	2264      	movs	r2, #100	; 0x64
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <runCmdTask+0x328>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80053c8:	4a10      	ldr	r2, [pc, #64]	; (800540c <runCmdTask+0x350>)
 80053ca:	210f      	movs	r1, #15
 80053cc:	4810      	ldr	r0, [pc, #64]	; (8005410 <runCmdTask+0x354>)
 80053ce:	f009 ff01 	bl	800f1d4 <sniprintf>
 80053d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053d6:	2206      	movs	r2, #6
 80053d8:	490e      	ldr	r1, [pc, #56]	; (8005414 <runCmdTask+0x358>)
 80053da:	480f      	ldr	r0, [pc, #60]	; (8005418 <runCmdTask+0x35c>)
 80053dc:	f005 fd7b 	bl	800aed6 <HAL_UART_Transmit>
 80053e0:	e036      	b.n	8005450 <runCmdTask+0x394>
 80053e2:	bf00      	nop
 80053e4:	200004c8 	.word	0x200004c8
 80053e8:	20000134 	.word	0x20000134
 80053ec:	20000004 	.word	0x20000004
 80053f0:	43848000 	.word	0x43848000
 80053f4:	428c0000 	.word	0x428c0000
 80053f8:	200002a4 	.word	0x200002a4
 80053fc:	200004e0 	.word	0x200004e0
 8005400:	40020000 	.word	0x40020000
 8005404:	200003c4 	.word	0x200003c4
 8005408:	20000494 	.word	0x20000494
 800540c:	0800fbe4 	.word	0x0800fbe4
 8005410:	200004cc 	.word	0x200004cc
 8005414:	0800fbec 	.word	0x0800fbec
 8005418:	2000040c 	.word	0x2000040c
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 800541c:	4b98      	ldr	r3, [pc, #608]	; (8005680 <runCmdTask+0x5c4>)
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	4a98      	ldr	r2, [pc, #608]	; (8005684 <runCmdTask+0x5c8>)
 8005422:	4997      	ldr	r1, [pc, #604]	; (8005680 <runCmdTask+0x5c4>)
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4b94      	ldr	r3, [pc, #592]	; (8005680 <runCmdTask+0x5c4>)
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	3301      	adds	r3, #1
 8005432:	4a93      	ldr	r2, [pc, #588]	; (8005680 <runCmdTask+0x5c4>)
 8005434:	7892      	ldrb	r2, [r2, #2]
 8005436:	fb93 f1f2 	sdiv	r1, r3, r2
 800543a:	fb01 f202 	mul.w	r2, r1, r2
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	b2da      	uxtb	r2, r3
 8005442:	4b8f      	ldr	r3, [pc, #572]	; (8005680 <runCmdTask+0x5c4>)
 8005444:	705a      	strb	r2, [r3, #1]
 8005446:	4a90      	ldr	r2, [pc, #576]	; (8005688 <runCmdTask+0x5cc>)
 8005448:	210f      	movs	r1, #15
 800544a:	4890      	ldr	r0, [pc, #576]	; (800568c <runCmdTask+0x5d0>)
 800544c:	f009 fec2 	bl	800f1d4 <sniprintf>
      __PEND_CURCMD(curCmd);
 8005450:	4b8c      	ldr	r3, [pc, #560]	; (8005684 <runCmdTask+0x5c8>)
 8005452:	2263      	movs	r2, #99	; 0x63
 8005454:	701a      	strb	r2, [r3, #0]
      break;
 8005456:	e187      	b.n	8005768 <runCmdTask+0x6ac>
    case 7: // FL
      curTask = TASK_FL;
 8005458:	4b8d      	ldr	r3, [pc, #564]	; (8005690 <runCmdTask+0x5d4>)
 800545a:	2202      	movs	r2, #2
 800545c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800545e:	4b89      	ldr	r3, [pc, #548]	; (8005684 <runCmdTask+0x5c8>)
 8005460:	2263      	movs	r2, #99	; 0x63
 8005462:	701a      	strb	r2, [r3, #0]
      break;
 8005464:	e180      	b.n	8005768 <runCmdTask+0x6ac>
    case 8: // FR
      curTask = TASK_FR;
 8005466:	4b8a      	ldr	r3, [pc, #552]	; (8005690 <runCmdTask+0x5d4>)
 8005468:	2203      	movs	r2, #3
 800546a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800546c:	4b85      	ldr	r3, [pc, #532]	; (8005684 <runCmdTask+0x5c8>)
 800546e:	2263      	movs	r2, #99	; 0x63
 8005470:	701a      	strb	r2, [r3, #0]
      break;
 8005472:	e179      	b.n	8005768 <runCmdTask+0x6ac>
    case 9: // BL
      curTask = TASK_BL;
 8005474:	4b86      	ldr	r3, [pc, #536]	; (8005690 <runCmdTask+0x5d4>)
 8005476:	2204      	movs	r2, #4
 8005478:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800547a:	4b82      	ldr	r3, [pc, #520]	; (8005684 <runCmdTask+0x5c8>)
 800547c:	2263      	movs	r2, #99	; 0x63
 800547e:	701a      	strb	r2, [r3, #0]
      break;
 8005480:	e172      	b.n	8005768 <runCmdTask+0x6ac>
    case 10: // BR
      curTask = TASK_BR;
 8005482:	4b83      	ldr	r3, [pc, #524]	; (8005690 <runCmdTask+0x5d4>)
 8005484:	2205      	movs	r2, #5
 8005486:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005488:	4b7e      	ldr	r3, [pc, #504]	; (8005684 <runCmdTask+0x5c8>)
 800548a:	2263      	movs	r2, #99	; 0x63
 800548c:	701a      	strb	r2, [r3, #0]
      break;
 800548e:	e16b      	b.n	8005768 <runCmdTask+0x6ac>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8005490:	4b7c      	ldr	r3, [pc, #496]	; (8005684 <runCmdTask+0x5c8>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b0b      	cmp	r3, #11
 8005496:	d005      	beq.n	80054a4 <runCmdTask+0x3e8>
 8005498:	4b7e      	ldr	r3, [pc, #504]	; (8005694 <runCmdTask+0x5d8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f240 1209 	movw	r2, #265	; 0x109
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
 80054a2:	e003      	b.n	80054ac <runCmdTask+0x3f0>
 80054a4:	4b7b      	ldr	r3, [pc, #492]	; (8005694 <runCmdTask+0x5d8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2246      	movs	r2, #70	; 0x46
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40
 80054ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80054b0:	f001 faaa 	bl	8006a08 <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 80054b4:	4b73      	ldr	r3, [pc, #460]	; (8005684 <runCmdTask+0x5c8>)
 80054b6:	2264      	movs	r2, #100	; 0x64
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	4b72      	ldr	r3, [pc, #456]	; (8005684 <runCmdTask+0x5c8>)
 80054bc:	2200      	movs	r2, #0
 80054be:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 80054c0:	4a75      	ldr	r2, [pc, #468]	; (8005698 <runCmdTask+0x5dc>)
 80054c2:	210f      	movs	r1, #15
 80054c4:	4871      	ldr	r0, [pc, #452]	; (800568c <runCmdTask+0x5d0>)
 80054c6:	f009 fe85 	bl	800f1d4 <sniprintf>
 80054ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ce:	2206      	movs	r2, #6
 80054d0:	4972      	ldr	r1, [pc, #456]	; (800569c <runCmdTask+0x5e0>)
 80054d2:	4873      	ldr	r0, [pc, #460]	; (80056a0 <runCmdTask+0x5e4>)
 80054d4:	f005 fcff 	bl	800aed6 <HAL_UART_Transmit>
      break;
 80054d8:	e146      	b.n	8005768 <runCmdTask+0x6ac>
    case 14: // DT move until specified distance from obstacle
      curTask = TASK_MOVE_OBS;
 80054da:	4b6d      	ldr	r3, [pc, #436]	; (8005690 <runCmdTask+0x5d4>)
 80054dc:	2209      	movs	r2, #9
 80054de:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 80054e0:	4b68      	ldr	r3, [pc, #416]	; (8005684 <runCmdTask+0x5c8>)
 80054e2:	2263      	movs	r2, #99	; 0x63
 80054e4:	701a      	strb	r2, [r3, #0]
      break;
 80054e6:	e13f      	b.n	8005768 <runCmdTask+0x6ac>
    case 88: // FAxxx, forward rotate left by xxx degree
    case 89: // FCxxx, forward rotate right by xxx degree
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80054e8:	2200      	movs	r2, #0
 80054ea:	2104      	movs	r1, #4
 80054ec:	486d      	ldr	r0, [pc, #436]	; (80056a4 <runCmdTask+0x5e8>)
 80054ee:	f002 f9bf 	bl	8007870 <HAL_GPIO_WritePin>
 80054f2:	2201      	movs	r2, #1
 80054f4:	2108      	movs	r1, #8
 80054f6:	486b      	ldr	r0, [pc, #428]	; (80056a4 <runCmdTask+0x5e8>)
 80054f8:	f002 f9ba 	bl	8007870 <HAL_GPIO_WritePin>
 80054fc:	2200      	movs	r2, #0
 80054fe:	2120      	movs	r1, #32
 8005500:	4868      	ldr	r0, [pc, #416]	; (80056a4 <runCmdTask+0x5e8>)
 8005502:	f002 f9b5 	bl	8007870 <HAL_GPIO_WritePin>
 8005506:	2201      	movs	r2, #1
 8005508:	2110      	movs	r1, #16
 800550a:	4866      	ldr	r0, [pc, #408]	; (80056a4 <runCmdTask+0x5e8>)
 800550c:	f002 f9b0 	bl	8007870 <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 8005510:	4b5c      	ldr	r3, [pc, #368]	; (8005684 <runCmdTask+0x5c8>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b58      	cmp	r3, #88	; 0x58
 8005516:	d12d      	bne.n	8005574 <runCmdTask+0x4b8>
      {
        __SET_SERVO_TURN(&htim1, 90);
 8005518:	4b5e      	ldr	r3, [pc, #376]	; (8005694 <runCmdTask+0x5d8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	225a      	movs	r2, #90	; 0x5a
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
 8005520:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005524:	f001 fa70 	bl	8006a08 <HAL_Delay>
        if (curCmd.val >= 10)
 8005528:	4b56      	ldr	r3, [pc, #344]	; (8005684 <runCmdTask+0x5c8>)
 800552a:	885b      	ldrh	r3, [r3, #2]
 800552c:	2b09      	cmp	r3, #9
 800552e:	d90d      	bls.n	800554c <runCmdTask+0x490>
          targetAngle = (curCmd.val - FAOFFSET);
 8005530:	4b54      	ldr	r3, [pc, #336]	; (8005684 <runCmdTask+0x5c8>)
 8005532:	885b      	ldrh	r3, [r3, #2]
 8005534:	461a      	mov	r2, r3
 8005536:	4b5c      	ldr	r3, [pc, #368]	; (80056a8 <runCmdTask+0x5ec>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005544:	4b59      	ldr	r3, [pc, #356]	; (80056ac <runCmdTask+0x5f0>)
 8005546:	edc3 7a00 	vstr	s15, [r3]
 800554a:	e008      	b.n	800555e <runCmdTask+0x4a2>
        else
          targetAngle = curCmd.val;
 800554c:	4b4d      	ldr	r3, [pc, #308]	; (8005684 <runCmdTask+0x5c8>)
 800554e:	885b      	ldrh	r3, [r3, #2]
 8005550:	ee07 3a90 	vmov	s15, r3
 8005554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005558:	4b54      	ldr	r3, [pc, #336]	; (80056ac <runCmdTask+0x5f0>)
 800555a:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 800555e:	4b54      	ldr	r3, [pc, #336]	; (80056b0 <runCmdTask+0x5f4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f240 5235 	movw	r2, #1333	; 0x535
 8005566:	635a      	str	r2, [r3, #52]	; 0x34
 8005568:	4b51      	ldr	r3, [pc, #324]	; (80056b0 <runCmdTask+0x5f4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
 8005572:	e02e      	b.n	80055d2 <runCmdTask+0x516>
      }
      else
      {
        __SET_SERVO_TURN(&htim1, 265);
 8005574:	4b47      	ldr	r3, [pc, #284]	; (8005694 <runCmdTask+0x5d8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f240 1209 	movw	r2, #265	; 0x109
 800557c:	641a      	str	r2, [r3, #64]	; 0x40
 800557e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005582:	f001 fa41 	bl	8006a08 <HAL_Delay>
        if (curCmd.val >= 10)
 8005586:	4b3f      	ldr	r3, [pc, #252]	; (8005684 <runCmdTask+0x5c8>)
 8005588:	885b      	ldrh	r3, [r3, #2]
 800558a:	2b09      	cmp	r3, #9
 800558c:	d90d      	bls.n	80055aa <runCmdTask+0x4ee>
          targetAngle = -(curCmd.val - FCOFFSET);
 800558e:	4b49      	ldr	r3, [pc, #292]	; (80056b4 <runCmdTask+0x5f8>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <runCmdTask+0x5c8>)
 8005596:	885b      	ldrh	r3, [r3, #2]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055a2:	4b42      	ldr	r3, [pc, #264]	; (80056ac <runCmdTask+0x5f0>)
 80055a4:	edc3 7a00 	vstr	s15, [r3]
 80055a8:	e009      	b.n	80055be <runCmdTask+0x502>
        else
          targetAngle = -curCmd.val;
 80055aa:	4b36      	ldr	r3, [pc, #216]	; (8005684 <runCmdTask+0x5c8>)
 80055ac:	885b      	ldrh	r3, [r3, #2]
 80055ae:	425b      	negs	r3, r3
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b8:	4b3c      	ldr	r3, [pc, #240]	; (80056ac <runCmdTask+0x5f0>)
 80055ba:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 80055be:	4b3c      	ldr	r3, [pc, #240]	; (80056b0 <runCmdTask+0x5f4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80055c6:	635a      	str	r2, [r3, #52]	; 0x34
 80055c8:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <runCmdTask+0x5f4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f240 5235 	movw	r2, #1333	; 0x535
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 80055d2:	4b2c      	ldr	r3, [pc, #176]	; (8005684 <runCmdTask+0x5c8>)
 80055d4:	2263      	movs	r2, #99	; 0x63
 80055d6:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 80055d8:	4834      	ldr	r0, [pc, #208]	; (80056ac <runCmdTask+0x5f0>)
 80055da:	f7fd fcc1 	bl	8002f60 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 80055de:	4b29      	ldr	r3, [pc, #164]	; (8005684 <runCmdTask+0x5c8>)
 80055e0:	2264      	movs	r2, #100	; 0x64
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <runCmdTask+0x5c8>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 80055ea:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <runCmdTask+0x5dc>)
 80055ec:	210f      	movs	r1, #15
 80055ee:	4827      	ldr	r0, [pc, #156]	; (800568c <runCmdTask+0x5d0>)
 80055f0:	f009 fdf0 	bl	800f1d4 <sniprintf>
 80055f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055f8:	2206      	movs	r2, #6
 80055fa:	4928      	ldr	r1, [pc, #160]	; (800569c <runCmdTask+0x5e0>)
 80055fc:	4828      	ldr	r0, [pc, #160]	; (80056a0 <runCmdTask+0x5e4>)
 80055fe:	f005 fc6a 	bl	800aed6 <HAL_UART_Transmit>
      break;
 8005602:	e0b1      	b.n	8005768 <runCmdTask+0x6ac>
    case 90: // BAxxx, backward rotate right by xxx degree
    case 91: // BCxxx, backward rotate left by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, (int)(!(curCmd.index - 90)));
 8005604:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <runCmdTask+0x5c8>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b5a      	cmp	r3, #90	; 0x5a
 800560a:	d105      	bne.n	8005618 <runCmdTask+0x55c>
 800560c:	4b21      	ldr	r3, [pc, #132]	; (8005694 <runCmdTask+0x5d8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f240 1209 	movw	r2, #265	; 0x109
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
 8005616:	e003      	b.n	8005620 <runCmdTask+0x564>
 8005618:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <runCmdTask+0x5d8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2246      	movs	r2, #70	; 0x46
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
 8005620:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005624:	f001 f9f0 	bl	8006a08 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 8005628:	2201      	movs	r2, #1
 800562a:	2104      	movs	r1, #4
 800562c:	481d      	ldr	r0, [pc, #116]	; (80056a4 <runCmdTask+0x5e8>)
 800562e:	f002 f91f 	bl	8007870 <HAL_GPIO_WritePin>
 8005632:	2200      	movs	r2, #0
 8005634:	2108      	movs	r1, #8
 8005636:	481b      	ldr	r0, [pc, #108]	; (80056a4 <runCmdTask+0x5e8>)
 8005638:	f002 f91a 	bl	8007870 <HAL_GPIO_WritePin>
 800563c:	2201      	movs	r2, #1
 800563e:	2120      	movs	r1, #32
 8005640:	4818      	ldr	r0, [pc, #96]	; (80056a4 <runCmdTask+0x5e8>)
 8005642:	f002 f915 	bl	8007870 <HAL_GPIO_WritePin>
 8005646:	2200      	movs	r2, #0
 8005648:	2110      	movs	r1, #16
 800564a:	4816      	ldr	r0, [pc, #88]	; (80056a4 <runCmdTask+0x5e8>)
 800564c:	f002 f910 	bl	8007870 <HAL_GPIO_WritePin>
      if (curCmd.index == 90)
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <runCmdTask+0x5c8>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b5a      	cmp	r3, #90	; 0x5a
 8005656:	d12f      	bne.n	80056b8 <runCmdTask+0x5fc>
      {

        targetAngle = curCmd.val;
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <runCmdTask+0x5c8>)
 800565a:	885b      	ldrh	r3, [r3, #2]
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005664:	4b11      	ldr	r3, [pc, #68]	; (80056ac <runCmdTask+0x5f0>)
 8005666:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <runCmdTask+0x5f4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005672:	635a      	str	r2, [r3, #52]	; 0x34
 8005674:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <runCmdTask+0x5f4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f240 5235 	movw	r2, #1333	; 0x535
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
 800567e:	e02f      	b.n	80056e0 <runCmdTask+0x624>
 8005680:	20000494 	.word	0x20000494
 8005684:	200004c8 	.word	0x200004c8
 8005688:	0800fbf4 	.word	0x0800fbf4
 800568c:	200004cc 	.word	0x200004cc
 8005690:	20000134 	.word	0x20000134
 8005694:	200002a4 	.word	0x200002a4
 8005698:	0800fbe4 	.word	0x0800fbe4
 800569c:	0800fbec 	.word	0x0800fbec
 80056a0:	2000040c 	.word	0x2000040c
 80056a4:	40020000 	.word	0x40020000
 80056a8:	20000003 	.word	0x20000003
 80056ac:	200004e0 	.word	0x200004e0
 80056b0:	200003c4 	.word	0x200003c4
 80056b4:	20000002 	.word	0x20000002
      }
      else
      {
        targetAngle = -curCmd.val;
 80056b8:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <runCmdTask+0x6b4>)
 80056ba:	885b      	ldrh	r3, [r3, #2]
 80056bc:	425b      	negs	r3, r3
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056c6:	4b2b      	ldr	r3, [pc, #172]	; (8005774 <runCmdTask+0x6b8>)
 80056c8:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 80056cc:	4b2a      	ldr	r3, [pc, #168]	; (8005778 <runCmdTask+0x6bc>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f240 5235 	movw	r2, #1333	; 0x535
 80056d4:	635a      	str	r2, [r3, #52]	; 0x34
 80056d6:	4b28      	ldr	r3, [pc, #160]	; (8005778 <runCmdTask+0x6bc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 80056e0:	4b23      	ldr	r3, [pc, #140]	; (8005770 <runCmdTask+0x6b4>)
 80056e2:	2263      	movs	r2, #99	; 0x63
 80056e4:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 80056e6:	4823      	ldr	r0, [pc, #140]	; (8005774 <runCmdTask+0x6b8>)
 80056e8:	f7fd fc3a 	bl	8002f60 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 80056ec:	4b20      	ldr	r3, [pc, #128]	; (8005770 <runCmdTask+0x6b4>)
 80056ee:	2264      	movs	r2, #100	; 0x64
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <runCmdTask+0x6b4>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 80056f8:	4a20      	ldr	r2, [pc, #128]	; (800577c <runCmdTask+0x6c0>)
 80056fa:	210f      	movs	r1, #15
 80056fc:	4820      	ldr	r0, [pc, #128]	; (8005780 <runCmdTask+0x6c4>)
 80056fe:	f009 fd69 	bl	800f1d4 <sniprintf>
 8005702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005706:	2206      	movs	r2, #6
 8005708:	491e      	ldr	r1, [pc, #120]	; (8005784 <runCmdTask+0x6c8>)
 800570a:	481f      	ldr	r0, [pc, #124]	; (8005788 <runCmdTask+0x6cc>)
 800570c:	f005 fbe3 	bl	800aed6 <HAL_UART_Transmit>
      break;
 8005710:	e02a      	b.n	8005768 <runCmdTask+0x6ac>
    case 92: // TAxx, 01 turn right, 02 turn left --TASK 2
      curTask = TASK_TURN_A;
 8005712:	4b1e      	ldr	r3, [pc, #120]	; (800578c <runCmdTask+0x6d0>)
 8005714:	220a      	movs	r2, #10
 8005716:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <runCmdTask+0x6b4>)
 800571a:	2263      	movs	r2, #99	; 0x63
 800571c:	701a      	strb	r2, [r3, #0]
      break;
 800571e:	e023      	b.n	8005768 <runCmdTask+0x6ac>
    case 93: // IR move until overshoot - for debugging only
      curTask = TASK_TURN_IR;
 8005720:	4b1a      	ldr	r3, [pc, #104]	; (800578c <runCmdTask+0x6d0>)
 8005722:	220c      	movs	r2, #12
 8005724:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005726:	4b12      	ldr	r3, [pc, #72]	; (8005770 <runCmdTask+0x6b4>)
 8005728:	2263      	movs	r2, #99	; 0x63
 800572a:	701a      	strb	r2, [r3, #0]
      break;
 800572c:	e01c      	b.n	8005768 <runCmdTask+0x6ac>
    case 94: // IR move until close to obstacle - for debugging only
      curTask = TASK_TURN_IR_CLOSE;
 800572e:	4b17      	ldr	r3, [pc, #92]	; (800578c <runCmdTask+0x6d0>)
 8005730:	220d      	movs	r2, #13
 8005732:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <runCmdTask+0x6b4>)
 8005736:	2263      	movs	r2, #99	; 0x63
 8005738:	701a      	strb	r2, [r3, #0]
      break;
 800573a:	e015      	b.n	8005768 <runCmdTask+0x6ac>
    case 95: // TBxx, 01 turn right, 02 turn left --TASK 2
      curTask = TASK_TURN_B;
 800573c:	4b13      	ldr	r3, [pc, #76]	; (800578c <runCmdTask+0x6d0>)
 800573e:	220b      	movs	r2, #11
 8005740:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005742:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <runCmdTask+0x6b4>)
 8005744:	2263      	movs	r2, #99	; 0x63
 8005746:	701a      	strb	r2, [r3, #0]
      break;
 8005748:	e00e      	b.n	8005768 <runCmdTask+0x6ac>
    case 96: // GHxx, 01 from left (after TB01), 02 from right (after TB02),  --TASK 2
      curTask = TASK_GO_HOME;
 800574a:	4b10      	ldr	r3, [pc, #64]	; (800578c <runCmdTask+0x6d0>)
 800574c:	220e      	movs	r2, #14
 800574e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <runCmdTask+0x6b4>)
 8005752:	2263      	movs	r2, #99	; 0x63
 8005754:	701a      	strb	r2, [r3, #0]
      break;
 8005756:	e007      	b.n	8005768 <runCmdTask+0x6ac>
    case 97: // AMxx, 01 from left (after TA01), 02 from right (after TA02),  --TASK 2
      curTask = TASK_AM;
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <runCmdTask+0x6d0>)
 800575a:	220f      	movs	r2, #15
 800575c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800575e:	4b04      	ldr	r3, [pc, #16]	; (8005770 <runCmdTask+0x6b4>)
 8005760:	2263      	movs	r2, #99	; 0x63
 8005762:	701a      	strb	r2, [r3, #0]
      break;
 8005764:	e000      	b.n	8005768 <runCmdTask+0x6ac>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8005766:	bf00      	nop
    }
    osDelay(1);
 8005768:	2001      	movs	r0, #1
 800576a:	f006 fcff 	bl	800c16c <osDelay>
    switch (curCmd.index)
 800576e:	e4a9      	b.n	80050c4 <runCmdTask+0x8>
 8005770:	200004c8 	.word	0x200004c8
 8005774:	200004e0 	.word	0x200004e0
 8005778:	200003c4 	.word	0x200003c4
 800577c:	0800fbe4 	.word	0x0800fbe4
 8005780:	200004cc 	.word	0x200004cc
 8005784:	0800fbec 	.word	0x0800fbec
 8005788:	2000040c 	.word	0x2000040c
 800578c:	20000134 	.word	0x20000134

08005790 <runMoveDistObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS)
 8005798:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <runMoveDistObsTask+0xc8>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b09      	cmp	r3, #9
 800579e:	d004      	beq.n	80057aa <runMoveDistObsTask+0x1a>
      osDelay(1000);
 80057a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057a4:	f006 fce2 	bl	800c16c <osDelay>
 80057a8:	e051      	b.n	800584e <runMoveDistObsTask+0xbe>
    else
    {
      targetDist = (float)curCmd.val;
 80057aa:	4b2c      	ldr	r3, [pc, #176]	; (800585c <runMoveDistObsTask+0xcc>)
 80057ac:	885b      	ldrh	r3, [r3, #2]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	4b2a      	ldr	r3, [pc, #168]	; (8005860 <runMoveDistObsTask+0xd0>)
 80057b8:	edc3 7a00 	vstr	s15, [r3]
      RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 80057bc:	2102      	movs	r1, #2
 80057be:	4828      	ldr	r0, [pc, #160]	; (8005860 <runMoveDistObsTask+0xd0>)
 80057c0:	f7fd fc7a 	bl	80030b8 <RobotMoveDistObstacle>

      __ON_TASK_END(&htim8, prevTask, curTask);
 80057c4:	4b27      	ldr	r3, [pc, #156]	; (8005864 <runMoveDistObsTask+0xd4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2200      	movs	r2, #0
 80057ca:	635a      	str	r2, [r3, #52]	; 0x34
 80057cc:	4b25      	ldr	r3, [pc, #148]	; (8005864 <runMoveDistObsTask+0xd4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2200      	movs	r2, #0
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38
 80057d4:	4b20      	ldr	r3, [pc, #128]	; (8005858 <runMoveDistObsTask+0xc8>)
 80057d6:	781a      	ldrb	r2, [r3, #0]
 80057d8:	4b23      	ldr	r3, [pc, #140]	; (8005868 <runMoveDistObsTask+0xd8>)
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <runMoveDistObsTask+0xc8>)
 80057de:	2210      	movs	r2, #16
 80057e0:	701a      	strb	r2, [r3, #0]
      clickOnce = 0;
 80057e2:	4b22      	ldr	r3, [pc, #136]	; (800586c <runMoveDistObsTask+0xdc>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80057e8:	4b21      	ldr	r3, [pc, #132]	; (8005870 <runMoveDistObsTask+0xe0>)
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	4b20      	ldr	r3, [pc, #128]	; (8005870 <runMoveDistObsTask+0xe0>)
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d112      	bne.n	800581a <runMoveDistObsTask+0x8a>
      {
        __CLEAR_CURCMD(curCmd);
 80057f4:	4b19      	ldr	r3, [pc, #100]	; (800585c <runMoveDistObsTask+0xcc>)
 80057f6:	2264      	movs	r2, #100	; 0x64
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	4b18      	ldr	r3, [pc, #96]	; (800585c <runMoveDistObsTask+0xcc>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005800:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <runMoveDistObsTask+0xe4>)
 8005802:	210f      	movs	r1, #15
 8005804:	481c      	ldr	r0, [pc, #112]	; (8005878 <runMoveDistObsTask+0xe8>)
 8005806:	f009 fce5 	bl	800f1d4 <sniprintf>
 800580a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800580e:	2206      	movs	r2, #6
 8005810:	491a      	ldr	r1, [pc, #104]	; (800587c <runMoveDistObsTask+0xec>)
 8005812:	481b      	ldr	r0, [pc, #108]	; (8005880 <runMoveDistObsTask+0xf0>)
 8005814:	f005 fb5f 	bl	800aed6 <HAL_UART_Transmit>
 8005818:	e019      	b.n	800584e <runMoveDistObsTask+0xbe>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 800581a:	4b15      	ldr	r3, [pc, #84]	; (8005870 <runMoveDistObsTask+0xe0>)
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	4a0f      	ldr	r2, [pc, #60]	; (800585c <runMoveDistObsTask+0xcc>)
 8005820:	4913      	ldr	r1, [pc, #76]	; (8005870 <runMoveDistObsTask+0xe0>)
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <runMoveDistObsTask+0xe0>)
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	3301      	adds	r3, #1
 8005830:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <runMoveDistObsTask+0xe0>)
 8005832:	7892      	ldrb	r2, [r2, #2]
 8005834:	fb93 f1f2 	sdiv	r1, r3, r2
 8005838:	fb01 f202 	mul.w	r2, r1, r2
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	b2da      	uxtb	r2, r3
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <runMoveDistObsTask+0xe0>)
 8005842:	705a      	strb	r2, [r3, #1]
 8005844:	4a0f      	ldr	r2, [pc, #60]	; (8005884 <runMoveDistObsTask+0xf4>)
 8005846:	210f      	movs	r1, #15
 8005848:	480b      	ldr	r0, [pc, #44]	; (8005878 <runMoveDistObsTask+0xe8>)
 800584a:	f009 fcc3 	bl	800f1d4 <sniprintf>
    }
    osDelay(1);
 800584e:	2001      	movs	r0, #1
 8005850:	f006 fc8c 	bl	800c16c <osDelay>
    if (curTask != TASK_MOVE_OBS)
 8005854:	e7a0      	b.n	8005798 <runMoveDistObsTask+0x8>
 8005856:	bf00      	nop
 8005858:	20000134 	.word	0x20000134
 800585c:	200004c8 	.word	0x200004c8
 8005860:	200004f4 	.word	0x200004f4
 8005864:	200003c4 	.word	0x200003c4
 8005868:	20000135 	.word	0x20000135
 800586c:	20000560 	.word	0x20000560
 8005870:	20000494 	.word	0x20000494
 8005874:	0800fbe4 	.word	0x0800fbe4
 8005878:	200004cc 	.word	0x200004cc
 800587c:	0800fbec 	.word	0x0800fbec
 8005880:	2000040c 	.word	0x2000040c
 8005884:	0800fbf4 	.word	0x0800fbf4

08005888 <runTurnATask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTurnATask */
void runTurnATask(void *argument)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTurnATask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_TURN_A)
 8005890:	4b61      	ldr	r3, [pc, #388]	; (8005a18 <runTurnATask+0x190>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b0a      	cmp	r3, #10
 8005896:	d004      	beq.n	80058a2 <runTurnATask+0x1a>
      osDelay(1000);
 8005898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800589c:	f006 fc66 	bl	800c16c <osDelay>
 80058a0:	e0b5      	b.n	8005a0e <runTurnATask+0x186>
    else
    {

      switch (curCmd.val)
 80058a2:	4b5e      	ldr	r3, [pc, #376]	; (8005a1c <runTurnATask+0x194>)
 80058a4:	885b      	ldrh	r3, [r3, #2]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d873      	bhi.n	8005994 <runTurnATask+0x10c>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <runTurnATask+0x2c>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058c5 	.word	0x080058c5
 80058b8:	080058f9 	.word	0x080058f9
 80058bc:	0800592d 	.word	0x0800592d
 80058c0:	08005961 	.word	0x08005961
      {
      case 01: // Turn A right outdoor:
        // DT25
        targetDist = 25;
 80058c4:	4b56      	ldr	r3, [pc, #344]	; (8005a20 <runTurnATask+0x198>)
 80058c6:	4a57      	ldr	r2, [pc, #348]	; (8005a24 <runTurnATask+0x19c>)
 80058c8:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 80058ca:	2102      	movs	r1, #2
 80058cc:	4854      	ldr	r0, [pc, #336]	; (8005a20 <runTurnATask+0x198>)
 80058ce:	f7fd fbf3 	bl	80030b8 <RobotMoveDistObstacle>
        // FC45
        RobotTurnFC45();
 80058d2:	f7fe f893 	bl	80039fc <RobotTurnFC45>
        osDelay(100);
 80058d6:	2064      	movs	r0, #100	; 0x64
 80058d8:	f006 fc48 	bl	800c16c <osDelay>
        // FA45, parallel to obstacle
        RobotTurnFA45();
 80058dc:	f7fe f8d4 	bl	8003a88 <RobotTurnFA45>
        osDelay(100);
 80058e0:	2064      	movs	r0, #100	; 0x64
 80058e2:	f006 fc43 	bl	800c16c <osDelay>
        // BW05
        targetDist = 05;
 80058e6:	4b4e      	ldr	r3, [pc, #312]	; (8005a20 <runTurnATask+0x198>)
 80058e8:	4a4f      	ldr	r2, [pc, #316]	; (8005a28 <runTurnATask+0x1a0>)
 80058ea:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2100      	movs	r1, #0
 80058f0:	484b      	ldr	r0, [pc, #300]	; (8005a20 <runTurnATask+0x198>)
 80058f2:	f7fd f845 	bl	8002980 <RobotMoveDist>
        // osDelay(100);
        break;
 80058f6:	e04d      	b.n	8005994 <runTurnATask+0x10c>

      case 02: // Turn A left outdoor:
        // DT25
        targetDist = 25;
 80058f8:	4b49      	ldr	r3, [pc, #292]	; (8005a20 <runTurnATask+0x198>)
 80058fa:	4a4a      	ldr	r2, [pc, #296]	; (8005a24 <runTurnATask+0x19c>)
 80058fc:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 80058fe:	2102      	movs	r1, #2
 8005900:	4847      	ldr	r0, [pc, #284]	; (8005a20 <runTurnATask+0x198>)
 8005902:	f7fd fbd9 	bl	80030b8 <RobotMoveDistObstacle>
        // FA45
        RobotTurnFA45();
 8005906:	f7fe f8bf 	bl	8003a88 <RobotTurnFA45>
        osDelay(100);
 800590a:	2064      	movs	r0, #100	; 0x64
 800590c:	f006 fc2e 	bl	800c16c <osDelay>
        // FC45, parallel to obstacle
        RobotTurnFC45();
 8005910:	f7fe f874 	bl	80039fc <RobotTurnFC45>
        osDelay(100);
 8005914:	2064      	movs	r0, #100	; 0x64
 8005916:	f006 fc29 	bl	800c16c <osDelay>
        // BW05
        targetDist = 5;
 800591a:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <runTurnATask+0x198>)
 800591c:	4a42      	ldr	r2, [pc, #264]	; (8005a28 <runTurnATask+0x1a0>)
 800591e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005920:	2200      	movs	r2, #0
 8005922:	2100      	movs	r1, #0
 8005924:	483e      	ldr	r0, [pc, #248]	; (8005a20 <runTurnATask+0x198>)
 8005926:	f7fd f82b 	bl	8002980 <RobotMoveDist>
        // osDelay(100);
        break;
 800592a:	e033      	b.n	8005994 <runTurnATask+0x10c>

      case 03: // Turn A right indoor:
        // DT25
        targetDist = 25;
 800592c:	4b3c      	ldr	r3, [pc, #240]	; (8005a20 <runTurnATask+0x198>)
 800592e:	4a3d      	ldr	r2, [pc, #244]	; (8005a24 <runTurnATask+0x19c>)
 8005930:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005932:	2102      	movs	r1, #2
 8005934:	483a      	ldr	r0, [pc, #232]	; (8005a20 <runTurnATask+0x198>)
 8005936:	f7fd fbbf 	bl	80030b8 <RobotMoveDistObstacle>
        // FC45
        RobotTurnFC45();
 800593a:	f7fe f85f 	bl	80039fc <RobotTurnFC45>
        osDelay(100);
 800593e:	2064      	movs	r0, #100	; 0x64
 8005940:	f006 fc14 	bl	800c16c <osDelay>
        // FA45, parallel to obstacle
        RobotTurnFA45();
 8005944:	f7fe f8a0 	bl	8003a88 <RobotTurnFA45>
        osDelay(100);
 8005948:	2064      	movs	r0, #100	; 0x64
 800594a:	f006 fc0f 	bl	800c16c <osDelay>
        // BW05
        targetDist = 05;
 800594e:	4b34      	ldr	r3, [pc, #208]	; (8005a20 <runTurnATask+0x198>)
 8005950:	4a35      	ldr	r2, [pc, #212]	; (8005a28 <runTurnATask+0x1a0>)
 8005952:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005954:	2200      	movs	r2, #0
 8005956:	2100      	movs	r1, #0
 8005958:	4831      	ldr	r0, [pc, #196]	; (8005a20 <runTurnATask+0x198>)
 800595a:	f7fd f811 	bl	8002980 <RobotMoveDist>
        // osDelay(100);
        break;
 800595e:	e019      	b.n	8005994 <runTurnATask+0x10c>

      case 04: // Turn A left indoor:
        // DT25
        targetDist = 25;
 8005960:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <runTurnATask+0x198>)
 8005962:	4a30      	ldr	r2, [pc, #192]	; (8005a24 <runTurnATask+0x19c>)
 8005964:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005966:	2102      	movs	r1, #2
 8005968:	482d      	ldr	r0, [pc, #180]	; (8005a20 <runTurnATask+0x198>)
 800596a:	f7fd fba5 	bl	80030b8 <RobotMoveDistObstacle>
        // FA45
        RobotTurnFA45();
 800596e:	f7fe f88b 	bl	8003a88 <RobotTurnFA45>
        osDelay(100);
 8005972:	2064      	movs	r0, #100	; 0x64
 8005974:	f006 fbfa 	bl	800c16c <osDelay>
        // FC45, parallel to obstacle
        RobotTurnFC45();
 8005978:	f7fe f840 	bl	80039fc <RobotTurnFC45>
        osDelay(100);
 800597c:	2064      	movs	r0, #100	; 0x64
 800597e:	f006 fbf5 	bl	800c16c <osDelay>
        // BW05
        targetDist = 5;
 8005982:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <runTurnATask+0x198>)
 8005984:	4a28      	ldr	r2, [pc, #160]	; (8005a28 <runTurnATask+0x1a0>)
 8005986:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	4824      	ldr	r0, [pc, #144]	; (8005a20 <runTurnATask+0x198>)
 800598e:	f7fc fff7 	bl	8002980 <RobotMoveDist>
        // osDelay(100);
        break;
 8005992:	bf00      	nop
      }
      clickOnce = 0;
 8005994:	4b25      	ldr	r3, [pc, #148]	; (8005a2c <runTurnATask+0x1a4>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 800599a:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <runTurnATask+0x190>)
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <runTurnATask+0x1a8>)
 80059a0:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80059a2:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <runTurnATask+0x190>)
 80059a4:	2210      	movs	r2, #16
 80059a6:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80059a8:	4b22      	ldr	r3, [pc, #136]	; (8005a34 <runTurnATask+0x1ac>)
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	4b21      	ldr	r3, [pc, #132]	; (8005a34 <runTurnATask+0x1ac>)
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d112      	bne.n	80059da <runTurnATask+0x152>
      {
        __CLEAR_CURCMD(curCmd);
 80059b4:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <runTurnATask+0x194>)
 80059b6:	2264      	movs	r2, #100	; 0x64
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	4b18      	ldr	r3, [pc, #96]	; (8005a1c <runTurnATask+0x194>)
 80059bc:	2200      	movs	r2, #0
 80059be:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80059c0:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <runTurnATask+0x1b0>)
 80059c2:	210f      	movs	r1, #15
 80059c4:	481d      	ldr	r0, [pc, #116]	; (8005a3c <runTurnATask+0x1b4>)
 80059c6:	f009 fc05 	bl	800f1d4 <sniprintf>
 80059ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059ce:	2206      	movs	r2, #6
 80059d0:	491b      	ldr	r1, [pc, #108]	; (8005a40 <runTurnATask+0x1b8>)
 80059d2:	481c      	ldr	r0, [pc, #112]	; (8005a44 <runTurnATask+0x1bc>)
 80059d4:	f005 fa7f 	bl	800aed6 <HAL_UART_Transmit>
 80059d8:	e019      	b.n	8005a0e <runTurnATask+0x186>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80059da:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <runTurnATask+0x1ac>)
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	4a0f      	ldr	r2, [pc, #60]	; (8005a1c <runTurnATask+0x194>)
 80059e0:	4914      	ldr	r1, [pc, #80]	; (8005a34 <runTurnATask+0x1ac>)
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <runTurnATask+0x1ac>)
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	3301      	adds	r3, #1
 80059f0:	4a10      	ldr	r2, [pc, #64]	; (8005a34 <runTurnATask+0x1ac>)
 80059f2:	7892      	ldrb	r2, [r2, #2]
 80059f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80059f8:	fb01 f202 	mul.w	r2, r1, r2
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <runTurnATask+0x1ac>)
 8005a02:	705a      	strb	r2, [r3, #1]
 8005a04:	4a10      	ldr	r2, [pc, #64]	; (8005a48 <runTurnATask+0x1c0>)
 8005a06:	210f      	movs	r1, #15
 8005a08:	480c      	ldr	r0, [pc, #48]	; (8005a3c <runTurnATask+0x1b4>)
 8005a0a:	f009 fbe3 	bl	800f1d4 <sniprintf>
    }
    osDelay(1);
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f006 fbac 	bl	800c16c <osDelay>
    if (curTask != TASK_TURN_A)
 8005a14:	e73c      	b.n	8005890 <runTurnATask+0x8>
 8005a16:	bf00      	nop
 8005a18:	20000134 	.word	0x20000134
 8005a1c:	200004c8 	.word	0x200004c8
 8005a20:	200004f4 	.word	0x200004f4
 8005a24:	41c80000 	.word	0x41c80000
 8005a28:	40a00000 	.word	0x40a00000
 8005a2c:	20000560 	.word	0x20000560
 8005a30:	20000135 	.word	0x20000135
 8005a34:	20000494 	.word	0x20000494
 8005a38:	0800fbe4 	.word	0x0800fbe4
 8005a3c:	200004cc 	.word	0x200004cc
 8005a40:	0800fbec 	.word	0x0800fbec
 8005a44:	2000040c 	.word	0x2000040c
 8005a48:	0800fbf4 	.word	0x0800fbf4

08005a4c <runTurnBTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTurnBTask */
void runTurnBTask(void *argument)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTurnBTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_TURN_B)
 8005a54:	4bc7      	ldr	r3, [pc, #796]	; (8005d74 <runTurnBTask+0x328>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b0b      	cmp	r3, #11
 8005a5a:	d004      	beq.n	8005a66 <runTurnBTask+0x1a>
      osDelay(1000);
 8005a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a60:	f006 fb84 	bl	800c16c <osDelay>
 8005a64:	e181      	b.n	8005d6a <runTurnBTask+0x31e>
    else
    {
      switch (curCmd.val)
 8005a66:	4bc4      	ldr	r3, [pc, #784]	; (8005d78 <runTurnBTask+0x32c>)
 8005a68:	885b      	ldrh	r3, [r3, #2]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	f200 813f 	bhi.w	8005cf0 <runTurnBTask+0x2a4>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <runTurnBTask+0x2c>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a89 	.word	0x08005a89
 8005a7c:	08005b23 	.word	0x08005b23
 8005a80:	08005bbd 	.word	0x08005bbd
 8005a84:	08005c57 	.word	0x08005c57
      {
      case 01: // Turn B right outdoor:
        // DT30
        targetDist = 27;
 8005a88:	4bbc      	ldr	r3, [pc, #752]	; (8005d7c <runTurnBTask+0x330>)
 8005a8a:	4abd      	ldr	r2, [pc, #756]	; (8005d80 <runTurnBTask+0x334>)
 8005a8c:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005a8e:	2102      	movs	r1, #2
 8005a90:	48ba      	ldr	r0, [pc, #744]	; (8005d7c <runTurnBTask+0x330>)
 8005a92:	f7fd fb11 	bl	80030b8 <RobotMoveDistObstacle>
        osDelay(100);
 8005a96:	2064      	movs	r0, #100	; 0x64
 8005a98:	f006 fb68 	bl	800c16c <osDelay>
        // FR30
        RobotTurnFR30();
 8005a9c:	f7fe f83a 	bl	8003b14 <RobotTurnFR30>
        osDelay(50);
 8005aa0:	2032      	movs	r0, #50	; 0x32
 8005aa2:	f006 fb63 	bl	800c16c <osDelay>
        // IR01 (left IR, follow wall 1st)
        RobotMoveUntilIROvershoot(0);
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f7fd fcba 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005aac:	2032      	movs	r0, #50	; 0x32
 8005aae:	f006 fb5d 	bl	800c16c <osDelay>
        // FL30
        RobotTurnFL30();
 8005ab2:	f7fe f8c5 	bl	8003c40 <RobotTurnFL30>
        osDelay(50);
 8005ab6:	2032      	movs	r0, #50	; 0x32
 8005ab8:	f006 fb58 	bl	800c16c <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8005abc:	4baf      	ldr	r3, [pc, #700]	; (8005d7c <runTurnBTask+0x330>)
 8005abe:	4ab1      	ldr	r2, [pc, #708]	; (8005d84 <runTurnBTask+0x338>)
 8005ac0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	48ad      	ldr	r0, [pc, #692]	; (8005d7c <runTurnBTask+0x330>)
 8005ac8:	f7fc ff5a 	bl	8002980 <RobotMoveDist>
        osDelay(50);
 8005acc:	2032      	movs	r0, #50	; 0x32
 8005ace:	f006 fb4d 	bl	800c16c <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(0);
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f7fd fca4 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005ad8:	2032      	movs	r0, #50	; 0x32
 8005ada:	f006 fb47 	bl	800c16c <osDelay>
        // FL30
        RobotTurnFL30();
 8005ade:	f7fe f8af 	bl	8003c40 <RobotTurnFL30>
        osDelay(50);
 8005ae2:	2032      	movs	r0, #50	; 0x32
 8005ae4:	f006 fb42 	bl	800c16c <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(0);
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f7fd fe21 	bl	8003730 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8005aee:	2032      	movs	r0, #50	; 0x32
 8005af0:	f006 fb3c 	bl	800c16c <osDelay>
        // IR01 (left IR)
        RobotMoveUntilIROvershoot(0);
 8005af4:	2000      	movs	r0, #0
 8005af6:	f7fd fc93 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005afa:	2032      	movs	r0, #50	; 0x32
 8005afc:	f006 fb36 	bl	800c16c <osDelay>
        // FW15
        targetDist = 15;
 8005b00:	4b9e      	ldr	r3, [pc, #632]	; (8005d7c <runTurnBTask+0x330>)
 8005b02:	4aa1      	ldr	r2, [pc, #644]	; (8005d88 <runTurnBTask+0x33c>)
 8005b04:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8005b06:	2201      	movs	r2, #1
 8005b08:	2101      	movs	r1, #1
 8005b0a:	489c      	ldr	r0, [pc, #624]	; (8005d7c <runTurnBTask+0x330>)
 8005b0c:	f7fc ff38 	bl	8002980 <RobotMoveDist>
        osDelay(50);
 8005b10:	2032      	movs	r0, #50	; 0x32
 8005b12:	f006 fb2b 	bl	800c16c <osDelay>
        // FL30
        RobotTurnFL30();
 8005b16:	f7fe f893 	bl	8003c40 <RobotTurnFL30>
        osDelay(50);
 8005b1a:	2032      	movs	r0, #50	; 0x32
 8005b1c:	f006 fb26 	bl	800c16c <osDelay>
        break;
 8005b20:	e0e6      	b.n	8005cf0 <runTurnBTask+0x2a4>

      case 02: // Turn B left outdoor:
        // DT30
        targetDist = 27;
 8005b22:	4b96      	ldr	r3, [pc, #600]	; (8005d7c <runTurnBTask+0x330>)
 8005b24:	4a96      	ldr	r2, [pc, #600]	; (8005d80 <runTurnBTask+0x334>)
 8005b26:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005b28:	2102      	movs	r1, #2
 8005b2a:	4894      	ldr	r0, [pc, #592]	; (8005d7c <runTurnBTask+0x330>)
 8005b2c:	f7fd fac4 	bl	80030b8 <RobotMoveDistObstacle>
        osDelay(100);
 8005b30:	2064      	movs	r0, #100	; 0x64
 8005b32:	f006 fb1b 	bl	800c16c <osDelay>
        // FL30
        RobotTurnFL30();
 8005b36:	f7fe f883 	bl	8003c40 <RobotTurnFL30>
        osDelay(50);
 8005b3a:	2032      	movs	r0, #50	; 0x32
 8005b3c:	f006 fb16 	bl	800c16c <osDelay>
        // IR02 (right IR, follow wall 1st)
        RobotMoveUntilIROvershoot(1);
 8005b40:	2001      	movs	r0, #1
 8005b42:	f7fd fc6d 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005b46:	2032      	movs	r0, #50	; 0x32
 8005b48:	f006 fb10 	bl	800c16c <osDelay>
        // FR30
        RobotTurnFR30();
 8005b4c:	f7fd ffe2 	bl	8003b14 <RobotTurnFR30>
        osDelay(50);
 8005b50:	2032      	movs	r0, #50	; 0x32
 8005b52:	f006 fb0b 	bl	800c16c <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8005b56:	4b89      	ldr	r3, [pc, #548]	; (8005d7c <runTurnBTask+0x330>)
 8005b58:	4a8a      	ldr	r2, [pc, #552]	; (8005d84 <runTurnBTask+0x338>)
 8005b5a:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4886      	ldr	r0, [pc, #536]	; (8005d7c <runTurnBTask+0x330>)
 8005b62:	f7fc ff0d 	bl	8002980 <RobotMoveDist>
        osDelay(50);
 8005b66:	2032      	movs	r0, #50	; 0x32
 8005b68:	f006 fb00 	bl	800c16c <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(1);
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	f7fd fc57 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005b72:	2032      	movs	r0, #50	; 0x32
 8005b74:	f006 fafa 	bl	800c16c <osDelay>
        // FR30
        RobotTurnFR30();
 8005b78:	f7fd ffcc 	bl	8003b14 <RobotTurnFR30>
        osDelay(50);
 8005b7c:	2032      	movs	r0, #50	; 0x32
 8005b7e:	f006 faf5 	bl	800c16c <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(1);
 8005b82:	2001      	movs	r0, #1
 8005b84:	f7fd fdd4 	bl	8003730 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8005b88:	2032      	movs	r0, #50	; 0x32
 8005b8a:	f006 faef 	bl	800c16c <osDelay>
        // IR02 (right IR)
        RobotMoveUntilIROvershoot(1);
 8005b8e:	2001      	movs	r0, #1
 8005b90:	f7fd fc46 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005b94:	2032      	movs	r0, #50	; 0x32
 8005b96:	f006 fae9 	bl	800c16c <osDelay>
        // FW15
        targetDist = 15;
 8005b9a:	4b78      	ldr	r3, [pc, #480]	; (8005d7c <runTurnBTask+0x330>)
 8005b9c:	4a7a      	ldr	r2, [pc, #488]	; (8005d88 <runTurnBTask+0x33c>)
 8005b9e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	4875      	ldr	r0, [pc, #468]	; (8005d7c <runTurnBTask+0x330>)
 8005ba6:	f7fc feeb 	bl	8002980 <RobotMoveDist>
        osDelay(50);
 8005baa:	2032      	movs	r0, #50	; 0x32
 8005bac:	f006 fade 	bl	800c16c <osDelay>
        // FR30
        RobotTurnFR30();
 8005bb0:	f7fd ffb0 	bl	8003b14 <RobotTurnFR30>
        osDelay(50);
 8005bb4:	2032      	movs	r0, #50	; 0x32
 8005bb6:	f006 fad9 	bl	800c16c <osDelay>
        break;
 8005bba:	e099      	b.n	8005cf0 <runTurnBTask+0x2a4>

      case 03: // Turn B right indoor:
        // DT30
        targetDist = 27;
 8005bbc:	4b6f      	ldr	r3, [pc, #444]	; (8005d7c <runTurnBTask+0x330>)
 8005bbe:	4a70      	ldr	r2, [pc, #448]	; (8005d80 <runTurnBTask+0x334>)
 8005bc0:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	486d      	ldr	r0, [pc, #436]	; (8005d7c <runTurnBTask+0x330>)
 8005bc6:	f7fd fa77 	bl	80030b8 <RobotMoveDistObstacle>
        osDelay(100);
 8005bca:	2064      	movs	r0, #100	; 0x64
 8005bcc:	f006 face 	bl	800c16c <osDelay>
        // FR00
        RobotTurnFR00();
 8005bd0:	f7fe f964 	bl	8003e9c <RobotTurnFR00>
        osDelay(50);
 8005bd4:	2032      	movs	r0, #50	; 0x32
 8005bd6:	f006 fac9 	bl	800c16c <osDelay>
        // IR01 (left IR, follow wall 1st)
        RobotMoveUntilIROvershoot(0);
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f7fd fc20 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005be0:	2032      	movs	r0, #50	; 0x32
 8005be2:	f006 fac3 	bl	800c16c <osDelay>
        // FL00
        RobotTurnFL00();
 8005be6:	f7fe f8c3 	bl	8003d70 <RobotTurnFL00>
        osDelay(50);
 8005bea:	2032      	movs	r0, #50	; 0x32
 8005bec:	f006 fabe 	bl	800c16c <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8005bf0:	4b62      	ldr	r3, [pc, #392]	; (8005d7c <runTurnBTask+0x330>)
 8005bf2:	4a64      	ldr	r2, [pc, #400]	; (8005d84 <runTurnBTask+0x338>)
 8005bf4:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4860      	ldr	r0, [pc, #384]	; (8005d7c <runTurnBTask+0x330>)
 8005bfc:	f7fc fec0 	bl	8002980 <RobotMoveDist>
        osDelay(50);
 8005c00:	2032      	movs	r0, #50	; 0x32
 8005c02:	f006 fab3 	bl	800c16c <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(0);
 8005c06:	2000      	movs	r0, #0
 8005c08:	f7fd fc0a 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005c0c:	2032      	movs	r0, #50	; 0x32
 8005c0e:	f006 faad 	bl	800c16c <osDelay>
        // FL00
        RobotTurnFL00();
 8005c12:	f7fe f8ad 	bl	8003d70 <RobotTurnFL00>
        osDelay(50);
 8005c16:	2032      	movs	r0, #50	; 0x32
 8005c18:	f006 faa8 	bl	800c16c <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(0);
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	f7fd fd87 	bl	8003730 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8005c22:	2032      	movs	r0, #50	; 0x32
 8005c24:	f006 faa2 	bl	800c16c <osDelay>
        // IR01 (left IR)
        RobotMoveUntilIROvershoot(0);
 8005c28:	2000      	movs	r0, #0
 8005c2a:	f7fd fbf9 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005c2e:	2032      	movs	r0, #50	; 0x32
 8005c30:	f006 fa9c 	bl	800c16c <osDelay>
        // FW15
        targetDist = 15;
 8005c34:	4b51      	ldr	r3, [pc, #324]	; (8005d7c <runTurnBTask+0x330>)
 8005c36:	4a54      	ldr	r2, [pc, #336]	; (8005d88 <runTurnBTask+0x33c>)
 8005c38:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	484f      	ldr	r0, [pc, #316]	; (8005d7c <runTurnBTask+0x330>)
 8005c40:	f7fc fe9e 	bl	8002980 <RobotMoveDist>
        osDelay(50);
 8005c44:	2032      	movs	r0, #50	; 0x32
 8005c46:	f006 fa91 	bl	800c16c <osDelay>
        // FL00
        RobotTurnFL00();
 8005c4a:	f7fe f891 	bl	8003d70 <RobotTurnFL00>
        osDelay(50);
 8005c4e:	2032      	movs	r0, #50	; 0x32
 8005c50:	f006 fa8c 	bl	800c16c <osDelay>
        break;
 8005c54:	e04c      	b.n	8005cf0 <runTurnBTask+0x2a4>

      case 04: // Turn B left indoor:
        // DT30
        targetDist = 27;
 8005c56:	4b49      	ldr	r3, [pc, #292]	; (8005d7c <runTurnBTask+0x330>)
 8005c58:	4a49      	ldr	r2, [pc, #292]	; (8005d80 <runTurnBTask+0x334>)
 8005c5a:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	4847      	ldr	r0, [pc, #284]	; (8005d7c <runTurnBTask+0x330>)
 8005c60:	f7fd fa2a 	bl	80030b8 <RobotMoveDistObstacle>
        osDelay(100);
 8005c64:	2064      	movs	r0, #100	; 0x64
 8005c66:	f006 fa81 	bl	800c16c <osDelay>
        // FL00
        RobotTurnFL00();
 8005c6a:	f7fe f881 	bl	8003d70 <RobotTurnFL00>
        osDelay(50);
 8005c6e:	2032      	movs	r0, #50	; 0x32
 8005c70:	f006 fa7c 	bl	800c16c <osDelay>
        // IR02 (right IR, follow wall 1st)
        RobotMoveUntilIROvershoot(1);
 8005c74:	2001      	movs	r0, #1
 8005c76:	f7fd fbd3 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005c7a:	2032      	movs	r0, #50	; 0x32
 8005c7c:	f006 fa76 	bl	800c16c <osDelay>
        // FR00
        RobotTurnFR00();
 8005c80:	f7fe f90c 	bl	8003e9c <RobotTurnFR00>
        osDelay(50);
 8005c84:	2032      	movs	r0, #50	; 0x32
 8005c86:	f006 fa71 	bl	800c16c <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8005c8a:	4b3c      	ldr	r3, [pc, #240]	; (8005d7c <runTurnBTask+0x330>)
 8005c8c:	4a3d      	ldr	r2, [pc, #244]	; (8005d84 <runTurnBTask+0x338>)
 8005c8e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005c90:	2200      	movs	r2, #0
 8005c92:	2101      	movs	r1, #1
 8005c94:	4839      	ldr	r0, [pc, #228]	; (8005d7c <runTurnBTask+0x330>)
 8005c96:	f7fc fe73 	bl	8002980 <RobotMoveDist>
        osDelay(50);
 8005c9a:	2032      	movs	r0, #50	; 0x32
 8005c9c:	f006 fa66 	bl	800c16c <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(1);
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	f7fd fbbd 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005ca6:	2032      	movs	r0, #50	; 0x32
 8005ca8:	f006 fa60 	bl	800c16c <osDelay>
        // FR00
        RobotTurnFR00();
 8005cac:	f7fe f8f6 	bl	8003e9c <RobotTurnFR00>
        osDelay(50);
 8005cb0:	2032      	movs	r0, #50	; 0x32
 8005cb2:	f006 fa5b 	bl	800c16c <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(1);
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	f7fd fd3a 	bl	8003730 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8005cbc:	2032      	movs	r0, #50	; 0x32
 8005cbe:	f006 fa55 	bl	800c16c <osDelay>
        // IR02 (right IR)
        RobotMoveUntilIROvershoot(1);
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	f7fd fbac 	bl	8003420 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005cc8:	2032      	movs	r0, #50	; 0x32
 8005cca:	f006 fa4f 	bl	800c16c <osDelay>
        // FW15
        targetDist = 15;
 8005cce:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <runTurnBTask+0x330>)
 8005cd0:	4a2d      	ldr	r2, [pc, #180]	; (8005d88 <runTurnBTask+0x33c>)
 8005cd2:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	4828      	ldr	r0, [pc, #160]	; (8005d7c <runTurnBTask+0x330>)
 8005cda:	f7fc fe51 	bl	8002980 <RobotMoveDist>
        osDelay(50);
 8005cde:	2032      	movs	r0, #50	; 0x32
 8005ce0:	f006 fa44 	bl	800c16c <osDelay>
        // FR00
        RobotTurnFR00();
 8005ce4:	f7fe f8da 	bl	8003e9c <RobotTurnFR00>
        osDelay(50);
 8005ce8:	2032      	movs	r0, #50	; 0x32
 8005cea:	f006 fa3f 	bl	800c16c <osDelay>
        break;
 8005cee:	bf00      	nop
      }
      clickOnce = 0;
 8005cf0:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <runTurnBTask+0x340>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8005cf6:	4b1f      	ldr	r3, [pc, #124]	; (8005d74 <runTurnBTask+0x328>)
 8005cf8:	781a      	ldrb	r2, [r3, #0]
 8005cfa:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <runTurnBTask+0x344>)
 8005cfc:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <runTurnBTask+0x328>)
 8005d00:	2210      	movs	r2, #16
 8005d02:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8005d04:	4b23      	ldr	r3, [pc, #140]	; (8005d94 <runTurnBTask+0x348>)
 8005d06:	781a      	ldrb	r2, [r3, #0]
 8005d08:	4b22      	ldr	r3, [pc, #136]	; (8005d94 <runTurnBTask+0x348>)
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d112      	bne.n	8005d36 <runTurnBTask+0x2ea>
      {
        __CLEAR_CURCMD(curCmd);
 8005d10:	4b19      	ldr	r3, [pc, #100]	; (8005d78 <runTurnBTask+0x32c>)
 8005d12:	2264      	movs	r2, #100	; 0x64
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <runTurnBTask+0x32c>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005d1c:	4a1e      	ldr	r2, [pc, #120]	; (8005d98 <runTurnBTask+0x34c>)
 8005d1e:	210f      	movs	r1, #15
 8005d20:	481e      	ldr	r0, [pc, #120]	; (8005d9c <runTurnBTask+0x350>)
 8005d22:	f009 fa57 	bl	800f1d4 <sniprintf>
 8005d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d2a:	2206      	movs	r2, #6
 8005d2c:	491c      	ldr	r1, [pc, #112]	; (8005da0 <runTurnBTask+0x354>)
 8005d2e:	481d      	ldr	r0, [pc, #116]	; (8005da4 <runTurnBTask+0x358>)
 8005d30:	f005 f8d1 	bl	800aed6 <HAL_UART_Transmit>
 8005d34:	e019      	b.n	8005d6a <runTurnBTask+0x31e>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005d36:	4b17      	ldr	r3, [pc, #92]	; (8005d94 <runTurnBTask+0x348>)
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	4a0f      	ldr	r2, [pc, #60]	; (8005d78 <runTurnBTask+0x32c>)
 8005d3c:	4915      	ldr	r1, [pc, #84]	; (8005d94 <runTurnBTask+0x348>)
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <runTurnBTask+0x348>)
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <runTurnBTask+0x348>)
 8005d4e:	7892      	ldrb	r2, [r2, #2]
 8005d50:	fb93 f1f2 	sdiv	r1, r3, r2
 8005d54:	fb01 f202 	mul.w	r2, r1, r2
 8005d58:	1a9b      	subs	r3, r3, r2
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <runTurnBTask+0x348>)
 8005d5e:	705a      	strb	r2, [r3, #1]
 8005d60:	4a11      	ldr	r2, [pc, #68]	; (8005da8 <runTurnBTask+0x35c>)
 8005d62:	210f      	movs	r1, #15
 8005d64:	480d      	ldr	r0, [pc, #52]	; (8005d9c <runTurnBTask+0x350>)
 8005d66:	f009 fa35 	bl	800f1d4 <sniprintf>
    }
    osDelay(1);
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	f006 f9fe 	bl	800c16c <osDelay>
    if (curTask != TASK_TURN_B)
 8005d70:	e670      	b.n	8005a54 <runTurnBTask+0x8>
 8005d72:	bf00      	nop
 8005d74:	20000134 	.word	0x20000134
 8005d78:	200004c8 	.word	0x200004c8
 8005d7c:	200004f4 	.word	0x200004f4
 8005d80:	41d80000 	.word	0x41d80000
 8005d84:	40e00000 	.word	0x40e00000
 8005d88:	41700000 	.word	0x41700000
 8005d8c:	20000560 	.word	0x20000560
 8005d90:	20000135 	.word	0x20000135
 8005d94:	20000494 	.word	0x20000494
 8005d98:	0800fbe4 	.word	0x0800fbe4
 8005d9c:	200004cc 	.word	0x200004cc
 8005da0:	0800fbec 	.word	0x0800fbec
 8005da4:	2000040c 	.word	0x2000040c
 8005da8:	0800fbf4 	.word	0x0800fbf4

08005dac <runGHTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runGHTask */
void runGHTask(void *argument)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runGHTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_GO_HOME)
 8005db4:	4b61      	ldr	r3, [pc, #388]	; (8005f3c <runGHTask+0x190>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b0e      	cmp	r3, #14
 8005dba:	d004      	beq.n	8005dc6 <runGHTask+0x1a>
      osDelay(1000);
 8005dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005dc0:	f006 f9d4 	bl	800c16c <osDelay>
 8005dc4:	e0b5      	b.n	8005f32 <runGHTask+0x186>
    else
    {
      obsDist_B += 75;
 8005dc6:	4b5e      	ldr	r3, [pc, #376]	; (8005f40 <runGHTask+0x194>)
 8005dc8:	edd3 7a00 	vldr	s15, [r3]
 8005dcc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8005f44 <runGHTask+0x198>
 8005dd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dd4:	4b5a      	ldr	r3, [pc, #360]	; (8005f40 <runGHTask+0x194>)
 8005dd6:	edc3 7a00 	vstr	s15, [r3]
      if (obsDist_B < 1000)
 8005dda:	4b59      	ldr	r3, [pc, #356]	; (8005f40 <runGHTask+0x194>)
 8005ddc:	edd3 7a00 	vldr	s15, [r3]
 8005de0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005f48 <runGHTask+0x19c>
 8005de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dec:	d564      	bpl.n	8005eb8 <runGHTask+0x10c>
      {
        switch (curCmd.val)
 8005dee:	4b57      	ldr	r3, [pc, #348]	; (8005f4c <runGHTask+0x1a0>)
 8005df0:	885b      	ldrh	r3, [r3, #2]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d85f      	bhi.n	8005eb8 <runGHTask+0x10c>
 8005df8:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <runGHTask+0x54>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e11 	.word	0x08005e11
 8005e04:	08005e3b 	.word	0x08005e3b
 8005e08:	08005e65 	.word	0x08005e65
 8005e0c:	08005e8f 	.word	0x08005e8f
        {
        case 01: // Move after Turn B right outdoor
          // move to obs A location +75 cm
          RobotMoveDist(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 8005e10:	2202      	movs	r2, #2
 8005e12:	2101      	movs	r1, #1
 8005e14:	484a      	ldr	r0, [pc, #296]	; (8005f40 <runGHTask+0x194>)
 8005e16:	f7fc fdb3 	bl	8002980 <RobotMoveDist>
          // FL30
          RobotTurnFL30();
 8005e1a:	f7fd ff11 	bl	8003c40 <RobotTurnFL30>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(0);
 8005e1e:	2000      	movs	r0, #0
 8005e20:	f7fd fc86 	bl	8003730 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 8005e24:	4b4a      	ldr	r3, [pc, #296]	; (8005f50 <runGHTask+0x1a4>)
 8005e26:	4a4b      	ldr	r2, [pc, #300]	; (8005f54 <runGHTask+0x1a8>)
 8005e28:	601a      	str	r2, [r3, #0]
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4848      	ldr	r0, [pc, #288]	; (8005f50 <runGHTask+0x1a4>)
 8005e30:	f7fc fda6 	bl	8002980 <RobotMoveDist>
          // FR30
          RobotTurnFR30();
 8005e34:	f7fd fe6e 	bl	8003b14 <RobotTurnFR30>
          break;
 8005e38:	e03e      	b.n	8005eb8 <runGHTask+0x10c>

        case 02: // Move after Turn B left outdoor
          // move to obs A location +75 cm
          RobotMoveDist(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	4840      	ldr	r0, [pc, #256]	; (8005f40 <runGHTask+0x194>)
 8005e40:	f7fc fd9e 	bl	8002980 <RobotMoveDist>
          // FR30
          RobotTurnFR30();
 8005e44:	f7fd fe66 	bl	8003b14 <RobotTurnFR30>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(1);
 8005e48:	2001      	movs	r0, #1
 8005e4a:	f7fd fc71 	bl	8003730 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 8005e4e:	4b40      	ldr	r3, [pc, #256]	; (8005f50 <runGHTask+0x1a4>)
 8005e50:	4a40      	ldr	r2, [pc, #256]	; (8005f54 <runGHTask+0x1a8>)
 8005e52:	601a      	str	r2, [r3, #0]
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005e54:	2200      	movs	r2, #0
 8005e56:	2100      	movs	r1, #0
 8005e58:	483d      	ldr	r0, [pc, #244]	; (8005f50 <runGHTask+0x1a4>)
 8005e5a:	f7fc fd91 	bl	8002980 <RobotMoveDist>
          // FL30
          RobotTurnFL30();
 8005e5e:	f7fd feef 	bl	8003c40 <RobotTurnFL30>
          break;
 8005e62:	e029      	b.n	8005eb8 <runGHTask+0x10c>

        case 03: // Move after Turn B right indoor
          // move to obs A location +75 cm
          RobotMoveDist(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 8005e64:	2202      	movs	r2, #2
 8005e66:	2101      	movs	r1, #1
 8005e68:	4835      	ldr	r0, [pc, #212]	; (8005f40 <runGHTask+0x194>)
 8005e6a:	f7fc fd89 	bl	8002980 <RobotMoveDist>
          // FL00
          RobotTurnFL00();
 8005e6e:	f7fd ff7f 	bl	8003d70 <RobotTurnFL00>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(0);
 8005e72:	2000      	movs	r0, #0
 8005e74:	f7fd fc5c 	bl	8003730 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 8005e78:	4b35      	ldr	r3, [pc, #212]	; (8005f50 <runGHTask+0x1a4>)
 8005e7a:	4a36      	ldr	r2, [pc, #216]	; (8005f54 <runGHTask+0x1a8>)
 8005e7c:	601a      	str	r2, [r3, #0]
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2100      	movs	r1, #0
 8005e82:	4833      	ldr	r0, [pc, #204]	; (8005f50 <runGHTask+0x1a4>)
 8005e84:	f7fc fd7c 	bl	8002980 <RobotMoveDist>
          // FR00
          RobotTurnFR00();
 8005e88:	f7fe f808 	bl	8003e9c <RobotTurnFR00>
          break;
 8005e8c:	e014      	b.n	8005eb8 <runGHTask+0x10c>

        case 04: // Move after Turn B left indoor
          // move to obs A location +75 cm
          RobotMoveDist(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 8005e8e:	2202      	movs	r2, #2
 8005e90:	2101      	movs	r1, #1
 8005e92:	482b      	ldr	r0, [pc, #172]	; (8005f40 <runGHTask+0x194>)
 8005e94:	f7fc fd74 	bl	8002980 <RobotMoveDist>
          // FR00
          RobotTurnFR00();
 8005e98:	f7fe f800 	bl	8003e9c <RobotTurnFR00>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(1);
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	f7fd fc47 	bl	8003730 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 8005ea2:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <runGHTask+0x1a4>)
 8005ea4:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <runGHTask+0x1a8>)
 8005ea6:	601a      	str	r2, [r3, #0]
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4828      	ldr	r0, [pc, #160]	; (8005f50 <runGHTask+0x1a4>)
 8005eae:	f7fc fd67 	bl	8002980 <RobotMoveDist>
          // FL00
          RobotTurnFL00();
 8005eb2:	f7fd ff5d 	bl	8003d70 <RobotTurnFL00>
          break;
 8005eb6:	bf00      	nop
        }
      }
      clickOnce = 0;
 8005eb8:	4b27      	ldr	r3, [pc, #156]	; (8005f58 <runGHTask+0x1ac>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	; (8005f3c <runGHTask+0x190>)
 8005ec0:	781a      	ldrb	r2, [r3, #0]
 8005ec2:	4b26      	ldr	r3, [pc, #152]	; (8005f5c <runGHTask+0x1b0>)
 8005ec4:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8005ec6:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <runGHTask+0x190>)
 8005ec8:	2210      	movs	r2, #16
 8005eca:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8005ecc:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <runGHTask+0x1b4>)
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <runGHTask+0x1b4>)
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d112      	bne.n	8005efe <runGHTask+0x152>
      {
        __CLEAR_CURCMD(curCmd);
 8005ed8:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <runGHTask+0x1a0>)
 8005eda:	2264      	movs	r2, #100	; 0x64
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <runGHTask+0x1a0>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <runGHTask+0x1b8>)
 8005ee6:	210f      	movs	r1, #15
 8005ee8:	481f      	ldr	r0, [pc, #124]	; (8005f68 <runGHTask+0x1bc>)
 8005eea:	f009 f973 	bl	800f1d4 <sniprintf>
 8005eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ef2:	2206      	movs	r2, #6
 8005ef4:	491d      	ldr	r1, [pc, #116]	; (8005f6c <runGHTask+0x1c0>)
 8005ef6:	481e      	ldr	r0, [pc, #120]	; (8005f70 <runGHTask+0x1c4>)
 8005ef8:	f004 ffed 	bl	800aed6 <HAL_UART_Transmit>
 8005efc:	e019      	b.n	8005f32 <runGHTask+0x186>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005efe:	4b18      	ldr	r3, [pc, #96]	; (8005f60 <runGHTask+0x1b4>)
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	4a12      	ldr	r2, [pc, #72]	; (8005f4c <runGHTask+0x1a0>)
 8005f04:	4916      	ldr	r1, [pc, #88]	; (8005f60 <runGHTask+0x1b4>)
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	4b14      	ldr	r3, [pc, #80]	; (8005f60 <runGHTask+0x1b4>)
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a12      	ldr	r2, [pc, #72]	; (8005f60 <runGHTask+0x1b4>)
 8005f16:	7892      	ldrb	r2, [r2, #2]
 8005f18:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f1c:	fb01 f202 	mul.w	r2, r1, r2
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <runGHTask+0x1b4>)
 8005f26:	705a      	strb	r2, [r3, #1]
 8005f28:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <runGHTask+0x1c8>)
 8005f2a:	210f      	movs	r1, #15
 8005f2c:	480e      	ldr	r0, [pc, #56]	; (8005f68 <runGHTask+0x1bc>)
 8005f2e:	f009 f951 	bl	800f1d4 <sniprintf>
    }
    osDelay(1);
 8005f32:	2001      	movs	r0, #1
 8005f34:	f006 f91a 	bl	800c16c <osDelay>
    if (curTask != TASK_GO_HOME)
 8005f38:	e73c      	b.n	8005db4 <runGHTask+0x8>
 8005f3a:	bf00      	nop
 8005f3c:	20000134 	.word	0x20000134
 8005f40:	2000013c 	.word	0x2000013c
 8005f44:	42960000 	.word	0x42960000
 8005f48:	447a0000 	.word	0x447a0000
 8005f4c:	200004c8 	.word	0x200004c8
 8005f50:	200004f4 	.word	0x200004f4
 8005f54:	41700000 	.word	0x41700000
 8005f58:	20000560 	.word	0x20000560
 8005f5c:	20000135 	.word	0x20000135
 8005f60:	20000494 	.word	0x20000494
 8005f64:	0800fbe4 	.word	0x0800fbe4
 8005f68:	200004cc 	.word	0x200004cc
 8005f6c:	0800fbec 	.word	0x0800fbec
 8005f70:	2000040c 	.word	0x2000040c
 8005f74:	0800fbf4 	.word	0x0800fbf4

08005f78 <runAMTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runAMTask */
void runAMTask(void *argument)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runAMTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_AM)
 8005f80:	4b97      	ldr	r3, [pc, #604]	; (80061e0 <runAMTask+0x268>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b0f      	cmp	r3, #15
 8005f86:	d004      	beq.n	8005f92 <runAMTask+0x1a>
      osDelay(1000);
 8005f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f8c:	f006 f8ee 	bl	800c16c <osDelay>
 8005f90:	e121      	b.n	80061d6 <runAMTask+0x25e>
    else
    {

      switch (curCmd.val)
 8005f92:	4b94      	ldr	r3, [pc, #592]	; (80061e4 <runAMTask+0x26c>)
 8005f94:	885b      	ldrh	r3, [r3, #2]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	f200 80df 	bhi.w	800615c <runAMTask+0x1e4>
 8005f9e:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <runAMTask+0x2c>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005fb5 	.word	0x08005fb5
 8005fa8:	0800601f 	.word	0x0800601f
 8005fac:	08006089 	.word	0x08006089
 8005fb0:	080060f3 	.word	0x080060f3
      {
      case 01: // AM right outdoor - use right after Turn A right outdoor:
        // FW5
        targetDist = 5;
 8005fb4:	4b8c      	ldr	r3, [pc, #560]	; (80061e8 <runAMTask+0x270>)
 8005fb6:	4a8d      	ldr	r2, [pc, #564]	; (80061ec <runAMTask+0x274>)
 8005fb8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	488a      	ldr	r0, [pc, #552]	; (80061e8 <runAMTask+0x270>)
 8005fc0:	f7fc fcde 	bl	8002980 <RobotMoveDist>
        //  FA45
        RobotTurnFA45();
 8005fc4:	f7fd fd60 	bl	8003a88 <RobotTurnFA45>
        osDelay(100);
 8005fc8:	2064      	movs	r0, #100	; 0x64
 8005fca:	f006 f8cf 	bl	800c16c <osDelay>
        // FC45
        RobotTurnFC45();
 8005fce:	f7fd fd15 	bl	80039fc <RobotTurnFC45>
        osDelay(100);
 8005fd2:	2064      	movs	r0, #100	; 0x64
 8005fd4:	f006 f8ca 	bl	800c16c <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_US = 1000;
 8005fd8:	4b85      	ldr	r3, [pc, #532]	; (80061f0 <runAMTask+0x278>)
 8005fda:	4a86      	ldr	r2, [pc, #536]	; (80061f4 <runAMTask+0x27c>)
 8005fdc:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8005fde:	2104      	movs	r1, #4
 8005fe0:	4885      	ldr	r0, [pc, #532]	; (80061f8 <runAMTask+0x280>)
 8005fe2:	f003 fb75 	bl	80096d0 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 8005fe6:	f7fc fad1 	bl	800258c <HCSR04_Read>
        osDelay(100);
 8005fea:	2064      	movs	r0, #100	; 0x64
 8005fec:	f006 f8be 	bl	800c16c <osDelay>
        obsDist_B = obsDist_US;
 8005ff0:	4b7f      	ldr	r3, [pc, #508]	; (80061f0 <runAMTask+0x278>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a81      	ldr	r2, [pc, #516]	; (80061fc <runAMTask+0x284>)
 8005ff6:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_US, 5, 12);
 8005ff8:	4b7d      	ldr	r3, [pc, #500]	; (80061f0 <runAMTask+0x278>)
 8005ffa:	edd3 7a00 	vldr	s15, [r3]
 8005ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006002:	230c      	movs	r3, #12
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2305      	movs	r3, #5
 8006008:	ee17 2a90 	vmov	r2, s15
 800600c:	2132      	movs	r1, #50	; 0x32
 800600e:	2000      	movs	r0, #0
 8006010:	f008 ffb4 	bl	800ef7c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8006014:	2104      	movs	r1, #4
 8006016:	4878      	ldr	r0, [pc, #480]	; (80061f8 <runAMTask+0x280>)
 8006018:	f003 fc82 	bl	8009920 <HAL_TIM_IC_Stop_IT>
        break;
 800601c:	e09e      	b.n	800615c <runAMTask+0x1e4>

      case 02: // AM left outdoor - use right after Turn A left outdoor:
        // FW5
        targetDist = 5;
 800601e:	4b72      	ldr	r3, [pc, #456]	; (80061e8 <runAMTask+0x270>)
 8006020:	4a72      	ldr	r2, [pc, #456]	; (80061ec <runAMTask+0x274>)
 8006022:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8006024:	2200      	movs	r2, #0
 8006026:	2101      	movs	r1, #1
 8006028:	486f      	ldr	r0, [pc, #444]	; (80061e8 <runAMTask+0x270>)
 800602a:	f7fc fca9 	bl	8002980 <RobotMoveDist>
        // FC45
        RobotTurnFC45();
 800602e:	f7fd fce5 	bl	80039fc <RobotTurnFC45>
        osDelay(100);
 8006032:	2064      	movs	r0, #100	; 0x64
 8006034:	f006 f89a 	bl	800c16c <osDelay>
        // FA45
        RobotTurnFA45();
 8006038:	f7fd fd26 	bl	8003a88 <RobotTurnFA45>
        osDelay(100);
 800603c:	2064      	movs	r0, #100	; 0x64
 800603e:	f006 f895 	bl	800c16c <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_US = 1000;
 8006042:	4b6b      	ldr	r3, [pc, #428]	; (80061f0 <runAMTask+0x278>)
 8006044:	4a6b      	ldr	r2, [pc, #428]	; (80061f4 <runAMTask+0x27c>)
 8006046:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8006048:	2104      	movs	r1, #4
 800604a:	486b      	ldr	r0, [pc, #428]	; (80061f8 <runAMTask+0x280>)
 800604c:	f003 fb40 	bl	80096d0 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 8006050:	f7fc fa9c 	bl	800258c <HCSR04_Read>
        osDelay(100);
 8006054:	2064      	movs	r0, #100	; 0x64
 8006056:	f006 f889 	bl	800c16c <osDelay>
        obsDist_B = obsDist_US;
 800605a:	4b65      	ldr	r3, [pc, #404]	; (80061f0 <runAMTask+0x278>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a67      	ldr	r2, [pc, #412]	; (80061fc <runAMTask+0x284>)
 8006060:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_US, 5, 12);
 8006062:	4b63      	ldr	r3, [pc, #396]	; (80061f0 <runAMTask+0x278>)
 8006064:	edd3 7a00 	vldr	s15, [r3]
 8006068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800606c:	230c      	movs	r3, #12
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2305      	movs	r3, #5
 8006072:	ee17 2a90 	vmov	r2, s15
 8006076:	2132      	movs	r1, #50	; 0x32
 8006078:	2000      	movs	r0, #0
 800607a:	f008 ff7f 	bl	800ef7c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 800607e:	2104      	movs	r1, #4
 8006080:	485d      	ldr	r0, [pc, #372]	; (80061f8 <runAMTask+0x280>)
 8006082:	f003 fc4d 	bl	8009920 <HAL_TIM_IC_Stop_IT>
        break;
 8006086:	e069      	b.n	800615c <runAMTask+0x1e4>

      case 03: // AM right indoor - use right after Turn A right indoor:
        // FW5
        targetDist = 5;
 8006088:	4b57      	ldr	r3, [pc, #348]	; (80061e8 <runAMTask+0x270>)
 800608a:	4a58      	ldr	r2, [pc, #352]	; (80061ec <runAMTask+0x274>)
 800608c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800608e:	2200      	movs	r2, #0
 8006090:	2101      	movs	r1, #1
 8006092:	4855      	ldr	r0, [pc, #340]	; (80061e8 <runAMTask+0x270>)
 8006094:	f7fc fc74 	bl	8002980 <RobotMoveDist>
        //  FA45
        RobotTurnFA45();
 8006098:	f7fd fcf6 	bl	8003a88 <RobotTurnFA45>
        osDelay(100);
 800609c:	2064      	movs	r0, #100	; 0x64
 800609e:	f006 f865 	bl	800c16c <osDelay>
        // FC45
        RobotTurnFC45();
 80060a2:	f7fd fcab 	bl	80039fc <RobotTurnFC45>
        osDelay(100);
 80060a6:	2064      	movs	r0, #100	; 0x64
 80060a8:	f006 f860 	bl	800c16c <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_US = 1000;
 80060ac:	4b50      	ldr	r3, [pc, #320]	; (80061f0 <runAMTask+0x278>)
 80060ae:	4a51      	ldr	r2, [pc, #324]	; (80061f4 <runAMTask+0x27c>)
 80060b0:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80060b2:	2104      	movs	r1, #4
 80060b4:	4850      	ldr	r0, [pc, #320]	; (80061f8 <runAMTask+0x280>)
 80060b6:	f003 fb0b 	bl	80096d0 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 80060ba:	f7fc fa67 	bl	800258c <HCSR04_Read>
        osDelay(100);
 80060be:	2064      	movs	r0, #100	; 0x64
 80060c0:	f006 f854 	bl	800c16c <osDelay>
        obsDist_B = obsDist_US;
 80060c4:	4b4a      	ldr	r3, [pc, #296]	; (80061f0 <runAMTask+0x278>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a4c      	ldr	r2, [pc, #304]	; (80061fc <runAMTask+0x284>)
 80060ca:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_US, 5, 12);
 80060cc:	4b48      	ldr	r3, [pc, #288]	; (80061f0 <runAMTask+0x278>)
 80060ce:	edd3 7a00 	vldr	s15, [r3]
 80060d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d6:	230c      	movs	r3, #12
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	2305      	movs	r3, #5
 80060dc:	ee17 2a90 	vmov	r2, s15
 80060e0:	2132      	movs	r1, #50	; 0x32
 80060e2:	2000      	movs	r0, #0
 80060e4:	f008 ff4a 	bl	800ef7c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 80060e8:	2104      	movs	r1, #4
 80060ea:	4843      	ldr	r0, [pc, #268]	; (80061f8 <runAMTask+0x280>)
 80060ec:	f003 fc18 	bl	8009920 <HAL_TIM_IC_Stop_IT>
        break;
 80060f0:	e034      	b.n	800615c <runAMTask+0x1e4>

      case 04: // AM left indoor - use right after Turn A left indoor:
        // FW5
        targetDist = 5;
 80060f2:	4b3d      	ldr	r3, [pc, #244]	; (80061e8 <runAMTask+0x270>)
 80060f4:	4a3d      	ldr	r2, [pc, #244]	; (80061ec <runAMTask+0x274>)
 80060f6:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80060f8:	2200      	movs	r2, #0
 80060fa:	2101      	movs	r1, #1
 80060fc:	483a      	ldr	r0, [pc, #232]	; (80061e8 <runAMTask+0x270>)
 80060fe:	f7fc fc3f 	bl	8002980 <RobotMoveDist>
        // FC45
        RobotTurnFC45();
 8006102:	f7fd fc7b 	bl	80039fc <RobotTurnFC45>
        osDelay(100);
 8006106:	2064      	movs	r0, #100	; 0x64
 8006108:	f006 f830 	bl	800c16c <osDelay>
        // FA45
        RobotTurnFA45();
 800610c:	f7fd fcbc 	bl	8003a88 <RobotTurnFA45>
        osDelay(100);
 8006110:	2064      	movs	r0, #100	; 0x64
 8006112:	f006 f82b 	bl	800c16c <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_US = 1000;
 8006116:	4b36      	ldr	r3, [pc, #216]	; (80061f0 <runAMTask+0x278>)
 8006118:	4a36      	ldr	r2, [pc, #216]	; (80061f4 <runAMTask+0x27c>)
 800611a:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800611c:	2104      	movs	r1, #4
 800611e:	4836      	ldr	r0, [pc, #216]	; (80061f8 <runAMTask+0x280>)
 8006120:	f003 fad6 	bl	80096d0 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 8006124:	f7fc fa32 	bl	800258c <HCSR04_Read>
        osDelay(100);
 8006128:	2064      	movs	r0, #100	; 0x64
 800612a:	f006 f81f 	bl	800c16c <osDelay>
        obsDist_B = obsDist_US;
 800612e:	4b30      	ldr	r3, [pc, #192]	; (80061f0 <runAMTask+0x278>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a32      	ldr	r2, [pc, #200]	; (80061fc <runAMTask+0x284>)
 8006134:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_US, 5, 12);
 8006136:	4b2e      	ldr	r3, [pc, #184]	; (80061f0 <runAMTask+0x278>)
 8006138:	edd3 7a00 	vldr	s15, [r3]
 800613c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006140:	230c      	movs	r3, #12
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2305      	movs	r3, #5
 8006146:	ee17 2a90 	vmov	r2, s15
 800614a:	2132      	movs	r1, #50	; 0x32
 800614c:	2000      	movs	r0, #0
 800614e:	f008 ff15 	bl	800ef7c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8006152:	2104      	movs	r1, #4
 8006154:	4828      	ldr	r0, [pc, #160]	; (80061f8 <runAMTask+0x280>)
 8006156:	f003 fbe3 	bl	8009920 <HAL_TIM_IC_Stop_IT>
        break;
 800615a:	bf00      	nop
      }
      clickOnce = 0;
 800615c:	4b28      	ldr	r3, [pc, #160]	; (8006200 <runAMTask+0x288>)
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8006162:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <runAMTask+0x268>)
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	4b27      	ldr	r3, [pc, #156]	; (8006204 <runAMTask+0x28c>)
 8006168:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 800616a:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <runAMTask+0x268>)
 800616c:	2210      	movs	r2, #16
 800616e:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8006170:	4b25      	ldr	r3, [pc, #148]	; (8006208 <runAMTask+0x290>)
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	4b24      	ldr	r3, [pc, #144]	; (8006208 <runAMTask+0x290>)
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	429a      	cmp	r2, r3
 800617a:	d112      	bne.n	80061a2 <runAMTask+0x22a>
      {
        __CLEAR_CURCMD(curCmd);
 800617c:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <runAMTask+0x26c>)
 800617e:	2264      	movs	r2, #100	; 0x64
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	4b18      	ldr	r3, [pc, #96]	; (80061e4 <runAMTask+0x26c>)
 8006184:	2200      	movs	r2, #0
 8006186:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8006188:	4a20      	ldr	r2, [pc, #128]	; (800620c <runAMTask+0x294>)
 800618a:	210f      	movs	r1, #15
 800618c:	4820      	ldr	r0, [pc, #128]	; (8006210 <runAMTask+0x298>)
 800618e:	f009 f821 	bl	800f1d4 <sniprintf>
 8006192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006196:	2206      	movs	r2, #6
 8006198:	491e      	ldr	r1, [pc, #120]	; (8006214 <runAMTask+0x29c>)
 800619a:	481f      	ldr	r0, [pc, #124]	; (8006218 <runAMTask+0x2a0>)
 800619c:	f004 fe9b 	bl	800aed6 <HAL_UART_Transmit>
 80061a0:	e019      	b.n	80061d6 <runAMTask+0x25e>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80061a2:	4b19      	ldr	r3, [pc, #100]	; (8006208 <runAMTask+0x290>)
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	4a0f      	ldr	r2, [pc, #60]	; (80061e4 <runAMTask+0x26c>)
 80061a8:	4917      	ldr	r1, [pc, #92]	; (8006208 <runAMTask+0x290>)
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <runAMTask+0x290>)
 80061b4:	785b      	ldrb	r3, [r3, #1]
 80061b6:	3301      	adds	r3, #1
 80061b8:	4a13      	ldr	r2, [pc, #76]	; (8006208 <runAMTask+0x290>)
 80061ba:	7892      	ldrb	r2, [r2, #2]
 80061bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80061c0:	fb01 f202 	mul.w	r2, r1, r2
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <runAMTask+0x290>)
 80061ca:	705a      	strb	r2, [r3, #1]
 80061cc:	4a13      	ldr	r2, [pc, #76]	; (800621c <runAMTask+0x2a4>)
 80061ce:	210f      	movs	r1, #15
 80061d0:	480f      	ldr	r0, [pc, #60]	; (8006210 <runAMTask+0x298>)
 80061d2:	f008 ffff 	bl	800f1d4 <sniprintf>
    }
    osDelay(1);
 80061d6:	2001      	movs	r0, #1
 80061d8:	f005 ffc8 	bl	800c16c <osDelay>
    if (curTask != TASK_AM)
 80061dc:	e6d0      	b.n	8005f80 <runAMTask+0x8>
 80061de:	bf00      	nop
 80061e0:	20000134 	.word	0x20000134
 80061e4:	200004c8 	.word	0x200004c8
 80061e8:	200004f4 	.word	0x200004f4
 80061ec:	40a00000 	.word	0x40a00000
 80061f0:	20000550 	.word	0x20000550
 80061f4:	447a0000 	.word	0x447a0000
 80061f8:	20000334 	.word	0x20000334
 80061fc:	2000013c 	.word	0x2000013c
 8006200:	20000560 	.word	0x20000560
 8006204:	20000135 	.word	0x20000135
 8006208:	20000494 	.word	0x20000494
 800620c:	0800fbe4 	.word	0x0800fbe4
 8006210:	200004cc 	.word	0x200004cc
 8006214:	0800fbec 	.word	0x0800fbec
 8006218:	2000040c 	.word	0x2000040c
 800621c:	0800fbf4 	.word	0x0800fbf4

08006220 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a04      	ldr	r2, [pc, #16]	; (8006240 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d101      	bne.n	8006236 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8006232:	f000 fbc9 	bl	80069c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40000800 	.word	0x40000800

08006244 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006248:	b672      	cpsid	i
}
 800624a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800624c:	e7fe      	b.n	800624c <Error_Handler+0x8>
	...

08006250 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <HAL_MspInit+0x54>)
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	4a11      	ldr	r2, [pc, #68]	; (80062a4 <HAL_MspInit+0x54>)
 8006260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006264:	6453      	str	r3, [r2, #68]	; 0x44
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <HAL_MspInit+0x54>)
 8006268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800626e:	607b      	str	r3, [r7, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006272:	2300      	movs	r3, #0
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <HAL_MspInit+0x54>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <HAL_MspInit+0x54>)
 800627c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006280:	6413      	str	r3, [r2, #64]	; 0x40
 8006282:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <HAL_MspInit+0x54>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800628e:	2200      	movs	r2, #0
 8006290:	210f      	movs	r1, #15
 8006292:	f06f 0001 	mvn.w	r0, #1
 8006296:	f001 f893 	bl	80073c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800

080062a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08c      	sub	sp, #48	; 0x30
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062b0:	f107 031c 	add.w	r3, r7, #28
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	609a      	str	r2, [r3, #8]
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a2e      	ldr	r2, [pc, #184]	; (8006380 <HAL_ADC_MspInit+0xd8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d128      	bne.n	800631c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80062ca:	2300      	movs	r3, #0
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	4b2d      	ldr	r3, [pc, #180]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	4a2c      	ldr	r2, [pc, #176]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 80062d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d8:	6453      	str	r3, [r2, #68]	; 0x44
 80062da:	4b2a      	ldr	r3, [pc, #168]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e2:	61bb      	str	r3, [r7, #24]
 80062e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	4b26      	ldr	r3, [pc, #152]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	4a25      	ldr	r2, [pc, #148]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 80062f0:	f043 0304 	orr.w	r3, r3, #4
 80062f4:	6313      	str	r3, [r2, #48]	; 0x30
 80062f6:	4b23      	ldr	r3, [pc, #140]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006302:	2302      	movs	r3, #2
 8006304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006306:	2303      	movs	r3, #3
 8006308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630a:	2300      	movs	r3, #0
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800630e:	f107 031c 	add.w	r3, r7, #28
 8006312:	4619      	mov	r1, r3
 8006314:	481c      	ldr	r0, [pc, #112]	; (8006388 <HAL_ADC_MspInit+0xe0>)
 8006316:	f001 f90f 	bl	8007538 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800631a:	e02c      	b.n	8006376 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1a      	ldr	r2, [pc, #104]	; (800638c <HAL_ADC_MspInit+0xe4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d127      	bne.n	8006376 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006326:	2300      	movs	r3, #0
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	4b16      	ldr	r3, [pc, #88]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 800632c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632e:	4a15      	ldr	r2, [pc, #84]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 8006330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006334:	6453      	str	r3, [r2, #68]	; 0x44
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 8006338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 800634c:	f043 0304 	orr.w	r3, r3, #4
 8006350:	6313      	str	r3, [r2, #48]	; 0x30
 8006352:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <HAL_ADC_MspInit+0xdc>)
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800635e:	2304      	movs	r3, #4
 8006360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006362:	2303      	movs	r3, #3
 8006364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800636a:	f107 031c 	add.w	r3, r7, #28
 800636e:	4619      	mov	r1, r3
 8006370:	4805      	ldr	r0, [pc, #20]	; (8006388 <HAL_ADC_MspInit+0xe0>)
 8006372:	f001 f8e1 	bl	8007538 <HAL_GPIO_Init>
}
 8006376:	bf00      	nop
 8006378:	3730      	adds	r7, #48	; 0x30
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40012000 	.word	0x40012000
 8006384:	40023800 	.word	0x40023800
 8006388:	40020800 	.word	0x40020800
 800638c:	40012100 	.word	0x40012100

08006390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	; 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a19      	ldr	r2, [pc, #100]	; (8006414 <HAL_I2C_MspInit+0x84>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d12c      	bne.n	800640c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	4b18      	ldr	r3, [pc, #96]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ba:	4a17      	ldr	r2, [pc, #92]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063bc:	f043 0302 	orr.w	r3, r3, #2
 80063c0:	6313      	str	r3, [r2, #48]	; 0x30
 80063c2:	4b15      	ldr	r3, [pc, #84]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80063ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063d4:	2312      	movs	r3, #18
 80063d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063dc:	2303      	movs	r3, #3
 80063de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063e0:	2304      	movs	r3, #4
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063e4:	f107 0314 	add.w	r3, r7, #20
 80063e8:	4619      	mov	r1, r3
 80063ea:	480c      	ldr	r0, [pc, #48]	; (800641c <HAL_I2C_MspInit+0x8c>)
 80063ec:	f001 f8a4 	bl	8007538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	4a07      	ldr	r2, [pc, #28]	; (8006418 <HAL_I2C_MspInit+0x88>)
 80063fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063fe:	6413      	str	r3, [r2, #64]	; 0x40
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <HAL_I2C_MspInit+0x88>)
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800640c:	bf00      	nop
 800640e:	3728      	adds	r7, #40	; 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40005400 	.word	0x40005400
 8006418:	40023800 	.word	0x40023800
 800641c:	40020400 	.word	0x40020400

08006420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08e      	sub	sp, #56	; 0x38
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a4e      	ldr	r2, [pc, #312]	; (8006578 <HAL_TIM_Base_MspInit+0x158>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d116      	bne.n	8006470 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006442:	2300      	movs	r3, #0
 8006444:	623b      	str	r3, [r7, #32]
 8006446:	4b4d      	ldr	r3, [pc, #308]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	4a4c      	ldr	r2, [pc, #304]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 800644c:	f043 0301 	orr.w	r3, r3, #1
 8006450:	6453      	str	r3, [r2, #68]	; 0x44
 8006452:	4b4a      	ldr	r3, [pc, #296]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 8006454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	623b      	str	r3, [r7, #32]
 800645c:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800645e:	2200      	movs	r2, #0
 8006460:	2105      	movs	r1, #5
 8006462:	201b      	movs	r0, #27
 8006464:	f000 ffac 	bl	80073c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006468:	201b      	movs	r0, #27
 800646a:	f000 ffc5 	bl	80073f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800646e:	e07e      	b.n	800656e <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a42      	ldr	r2, [pc, #264]	; (8006580 <HAL_TIM_Base_MspInit+0x160>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d134      	bne.n	80064e4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	4b3f      	ldr	r3, [pc, #252]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	4a3e      	ldr	r2, [pc, #248]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 8006484:	f043 0302 	orr.w	r3, r3, #2
 8006488:	6413      	str	r3, [r2, #64]	; 0x40
 800648a:	4b3c      	ldr	r3, [pc, #240]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006496:	2300      	movs	r3, #0
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	4b38      	ldr	r3, [pc, #224]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	4a37      	ldr	r2, [pc, #220]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 80064a0:	f043 0302 	orr.w	r3, r3, #2
 80064a4:	6313      	str	r3, [r2, #48]	; 0x30
 80064a6:	4b35      	ldr	r3, [pc, #212]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = US_Echo_Pin;
 80064b2:	2320      	movs	r3, #32
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b6:	2302      	movs	r3, #2
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064be:	2300      	movs	r3, #0
 80064c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80064c2:	2302      	movs	r3, #2
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(US_Echo_GPIO_Port, &GPIO_InitStruct);
 80064c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ca:	4619      	mov	r1, r3
 80064cc:	482d      	ldr	r0, [pc, #180]	; (8006584 <HAL_TIM_Base_MspInit+0x164>)
 80064ce:	f001 f833 	bl	8007538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80064d2:	2200      	movs	r2, #0
 80064d4:	2105      	movs	r1, #5
 80064d6:	201d      	movs	r0, #29
 80064d8:	f000 ff72 	bl	80073c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80064dc:	201d      	movs	r0, #29
 80064de:	f000 ff8b 	bl	80073f8 <HAL_NVIC_EnableIRQ>
}
 80064e2:	e044      	b.n	800656e <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM6)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a27      	ldr	r2, [pc, #156]	; (8006588 <HAL_TIM_Base_MspInit+0x168>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	4b22      	ldr	r3, [pc, #136]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	4a21      	ldr	r2, [pc, #132]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 80064f8:	f043 0310 	orr.w	r3, r3, #16
 80064fc:	6413      	str	r3, [r2, #64]	; 0x40
 80064fe:	4b1f      	ldr	r3, [pc, #124]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	697b      	ldr	r3, [r7, #20]
}
 800650a:	e030      	b.n	800656e <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM8)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1e      	ldr	r2, [pc, #120]	; (800658c <HAL_TIM_Base_MspInit+0x16c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d12b      	bne.n	800656e <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	4b18      	ldr	r3, [pc, #96]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 800651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651e:	4a17      	ldr	r2, [pc, #92]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 8006520:	f043 0302 	orr.w	r3, r3, #2
 8006524:	6453      	str	r3, [r2, #68]	; 0x44
 8006526:	4b15      	ldr	r3, [pc, #84]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	4b11      	ldr	r3, [pc, #68]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	4a10      	ldr	r2, [pc, #64]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 800653c:	f043 0304 	orr.w	r3, r3, #4
 8006540:	6313      	str	r3, [r2, #48]	; 0x30
 8006542:	4b0e      	ldr	r3, [pc, #56]	; (800657c <HAL_TIM_Base_MspInit+0x15c>)
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800654e:	23c0      	movs	r3, #192	; 0xc0
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006552:	2302      	movs	r3, #2
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006556:	2300      	movs	r3, #0
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800655a:	2300      	movs	r3, #0
 800655c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800655e:	2303      	movs	r3, #3
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006566:	4619      	mov	r1, r3
 8006568:	4809      	ldr	r0, [pc, #36]	; (8006590 <HAL_TIM_Base_MspInit+0x170>)
 800656a:	f000 ffe5 	bl	8007538 <HAL_GPIO_Init>
}
 800656e:	bf00      	nop
 8006570:	3738      	adds	r7, #56	; 0x38
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40010000 	.word	0x40010000
 800657c:	40023800 	.word	0x40023800
 8006580:	40000400 	.word	0x40000400
 8006584:	40020400 	.word	0x40020400
 8006588:	40001000 	.word	0x40001000
 800658c:	40010400 	.word	0x40010400
 8006590:	40020800 	.word	0x40020800

08006594 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800659c:	f107 0314 	add.w	r3, r7, #20
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	609a      	str	r2, [r3, #8]
 80065a8:	60da      	str	r2, [r3, #12]
 80065aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b4:	d14a      	bne.n	800664c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	4b26      	ldr	r3, [pc, #152]	; (8006654 <HAL_TIM_Encoder_MspInit+0xc0>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	4a25      	ldr	r2, [pc, #148]	; (8006654 <HAL_TIM_Encoder_MspInit+0xc0>)
 80065c0:	f043 0301 	orr.w	r3, r3, #1
 80065c4:	6413      	str	r3, [r2, #64]	; 0x40
 80065c6:	4b23      	ldr	r3, [pc, #140]	; (8006654 <HAL_TIM_Encoder_MspInit+0xc0>)
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	4b1f      	ldr	r3, [pc, #124]	; (8006654 <HAL_TIM_Encoder_MspInit+0xc0>)
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	4a1e      	ldr	r2, [pc, #120]	; (8006654 <HAL_TIM_Encoder_MspInit+0xc0>)
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	6313      	str	r3, [r2, #48]	; 0x30
 80065e2:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <HAL_TIM_Encoder_MspInit+0xc0>)
 80065e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	4b18      	ldr	r3, [pc, #96]	; (8006654 <HAL_TIM_Encoder_MspInit+0xc0>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	4a17      	ldr	r2, [pc, #92]	; (8006654 <HAL_TIM_Encoder_MspInit+0xc0>)
 80065f8:	f043 0302 	orr.w	r3, r3, #2
 80065fc:	6313      	str	r3, [r2, #48]	; 0x30
 80065fe:	4b15      	ldr	r3, [pc, #84]	; (8006654 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	60bb      	str	r3, [r7, #8]
 8006608:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800660a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006610:	2302      	movs	r3, #2
 8006612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006614:	2300      	movs	r3, #0
 8006616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006618:	2300      	movs	r3, #0
 800661a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800661c:	2301      	movs	r3, #1
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006620:	f107 0314 	add.w	r3, r7, #20
 8006624:	4619      	mov	r1, r3
 8006626:	480c      	ldr	r0, [pc, #48]	; (8006658 <HAL_TIM_Encoder_MspInit+0xc4>)
 8006628:	f000 ff86 	bl	8007538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800662c:	2308      	movs	r3, #8
 800662e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006630:	2302      	movs	r3, #2
 8006632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006638:	2300      	movs	r3, #0
 800663a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800663c:	2301      	movs	r3, #1
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006640:	f107 0314 	add.w	r3, r7, #20
 8006644:	4619      	mov	r1, r3
 8006646:	4805      	ldr	r0, [pc, #20]	; (800665c <HAL_TIM_Encoder_MspInit+0xc8>)
 8006648:	f000 ff76 	bl	8007538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800664c:	bf00      	nop
 800664e:	3728      	adds	r7, #40	; 0x28
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40023800 	.word	0x40023800
 8006658:	40020000 	.word	0x40020000
 800665c:	40020400 	.word	0x40020400

08006660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006668:	f107 030c 	add.w	r3, r7, #12
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	609a      	str	r2, [r3, #8]
 8006674:	60da      	str	r2, [r3, #12]
 8006676:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <HAL_TIM_MspPostInit+0x68>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d11e      	bne.n	80066c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006682:	2300      	movs	r3, #0
 8006684:	60bb      	str	r3, [r7, #8]
 8006686:	4b11      	ldr	r3, [pc, #68]	; (80066cc <HAL_TIM_MspPostInit+0x6c>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	4a10      	ldr	r2, [pc, #64]	; (80066cc <HAL_TIM_MspPostInit+0x6c>)
 800668c:	f043 0310 	orr.w	r3, r3, #16
 8006690:	6313      	str	r3, [r2, #48]	; 0x30
 8006692:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <HAL_TIM_MspPostInit+0x6c>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800669e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a4:	2302      	movs	r3, #2
 80066a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ac:	2300      	movs	r3, #0
 80066ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80066b0:	2301      	movs	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066b4:	f107 030c 	add.w	r3, r7, #12
 80066b8:	4619      	mov	r1, r3
 80066ba:	4805      	ldr	r0, [pc, #20]	; (80066d0 <HAL_TIM_MspPostInit+0x70>)
 80066bc:	f000 ff3c 	bl	8007538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80066c0:	bf00      	nop
 80066c2:	3720      	adds	r7, #32
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40010000 	.word	0x40010000
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40021000 	.word	0x40021000

080066d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066dc:	f107 0314 	add.w	r3, r7, #20
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	605a      	str	r2, [r3, #4]
 80066e6:	609a      	str	r2, [r3, #8]
 80066e8:	60da      	str	r2, [r3, #12]
 80066ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1d      	ldr	r2, [pc, #116]	; (8006768 <HAL_UART_MspInit+0x94>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d134      	bne.n	8006760 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	4b1c      	ldr	r3, [pc, #112]	; (800676c <HAL_UART_MspInit+0x98>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	4a1b      	ldr	r2, [pc, #108]	; (800676c <HAL_UART_MspInit+0x98>)
 8006700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006704:	6413      	str	r3, [r2, #64]	; 0x40
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <HAL_UART_MspInit+0x98>)
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	4b15      	ldr	r3, [pc, #84]	; (800676c <HAL_UART_MspInit+0x98>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	4a14      	ldr	r2, [pc, #80]	; (800676c <HAL_UART_MspInit+0x98>)
 800671c:	f043 0304 	orr.w	r3, r3, #4
 8006720:	6313      	str	r3, [r2, #48]	; 0x30
 8006722:	4b12      	ldr	r3, [pc, #72]	; (800676c <HAL_UART_MspInit+0x98>)
 8006724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800672e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006734:	2302      	movs	r3, #2
 8006736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	2300      	movs	r3, #0
 800673a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800673c:	2303      	movs	r3, #3
 800673e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006740:	2307      	movs	r3, #7
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	4619      	mov	r1, r3
 800674a:	4809      	ldr	r0, [pc, #36]	; (8006770 <HAL_UART_MspInit+0x9c>)
 800674c:	f000 fef4 	bl	8007538 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006750:	2200      	movs	r2, #0
 8006752:	2105      	movs	r1, #5
 8006754:	2027      	movs	r0, #39	; 0x27
 8006756:	f000 fe33 	bl	80073c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800675a:	2027      	movs	r0, #39	; 0x27
 800675c:	f000 fe4c 	bl	80073f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006760:	bf00      	nop
 8006762:	3728      	adds	r7, #40	; 0x28
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40004800 	.word	0x40004800
 800676c:	40023800 	.word	0x40023800
 8006770:	40020800 	.word	0x40020800

08006774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08c      	sub	sp, #48	; 0x30
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8006784:	2200      	movs	r2, #0
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	201e      	movs	r0, #30
 800678a:	f000 fe19 	bl	80073c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800678e:	201e      	movs	r0, #30
 8006790:	f000 fe32 	bl	80073f8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <HAL_InitTick+0xa0>)
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <HAL_InitTick+0xa0>)
 800679e:	f043 0304 	orr.w	r3, r3, #4
 80067a2:	6413      	str	r3, [r2, #64]	; 0x40
 80067a4:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <HAL_InitTick+0xa0>)
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80067b0:	f107 0210 	add.w	r2, r7, #16
 80067b4:	f107 0314 	add.w	r3, r7, #20
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f002 fcb2 	bl	8009124 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80067c0:	f002 fc88 	bl	80090d4 <HAL_RCC_GetPCLK1Freq>
 80067c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	4a13      	ldr	r2, [pc, #76]	; (8006818 <HAL_InitTick+0xa4>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	0c9b      	lsrs	r3, r3, #18
 80067d0:	3b01      	subs	r3, #1
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80067d4:	4b11      	ldr	r3, [pc, #68]	; (800681c <HAL_InitTick+0xa8>)
 80067d6:	4a12      	ldr	r2, [pc, #72]	; (8006820 <HAL_InitTick+0xac>)
 80067d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80067da:	4b10      	ldr	r3, [pc, #64]	; (800681c <HAL_InitTick+0xa8>)
 80067dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80067e0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80067e2:	4a0e      	ldr	r2, [pc, #56]	; (800681c <HAL_InitTick+0xa8>)
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <HAL_InitTick+0xa8>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067ee:	4b0b      	ldr	r3, [pc, #44]	; (800681c <HAL_InitTick+0xa8>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80067f4:	4809      	ldr	r0, [pc, #36]	; (800681c <HAL_InitTick+0xa8>)
 80067f6:	f002 fcc7 	bl	8009188 <HAL_TIM_Base_Init>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8006800:	4806      	ldr	r0, [pc, #24]	; (800681c <HAL_InitTick+0xa8>)
 8006802:	f002 fd79 	bl	80092f8 <HAL_TIM_Base_Start_IT>
 8006806:	4603      	mov	r3, r0
 8006808:	e000      	b.n	800680c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
}
 800680c:	4618      	mov	r0, r3
 800680e:	3730      	adds	r7, #48	; 0x30
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40023800 	.word	0x40023800
 8006818:	431bde83 	.word	0x431bde83
 800681c:	20000568 	.word	0x20000568
 8006820:	40000800 	.word	0x40000800

08006824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006828:	e7fe      	b.n	8006828 <NMI_Handler+0x4>

0800682a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800682a:	b480      	push	{r7}
 800682c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800682e:	e7fe      	b.n	800682e <HardFault_Handler+0x4>

08006830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006834:	e7fe      	b.n	8006834 <MemManage_Handler+0x4>

08006836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006836:	b480      	push	{r7}
 8006838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800683a:	e7fe      	b.n	800683a <BusFault_Handler+0x4>

0800683c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006840:	e7fe      	b.n	8006840 <UsageFault_Handler+0x4>

08006842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006842:	b480      	push	{r7}
 8006844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006846:	bf00      	nop
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006854:	4802      	ldr	r0, [pc, #8]	; (8006860 <TIM1_CC_IRQHandler+0x10>)
 8006856:	f003 fa45 	bl	8009ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800685a:	bf00      	nop
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	200002a4 	.word	0x200002a4

08006864 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006868:	4802      	ldr	r0, [pc, #8]	; (8006874 <TIM3_IRQHandler+0x10>)
 800686a:	f003 fa3b 	bl	8009ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800686e:	bf00      	nop
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000334 	.word	0x20000334

08006878 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800687c:	4802      	ldr	r0, [pc, #8]	; (8006888 <TIM4_IRQHandler+0x10>)
 800687e:	f003 fa31 	bl	8009ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006882:	bf00      	nop
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000568 	.word	0x20000568

0800688c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006890:	4802      	ldr	r0, [pc, #8]	; (800689c <USART3_IRQHandler+0x10>)
 8006892:	f004 fbe3 	bl	800b05c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006896:	bf00      	nop
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	2000040c 	.word	0x2000040c

080068a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068a8:	4a14      	ldr	r2, [pc, #80]	; (80068fc <_sbrk+0x5c>)
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <_sbrk+0x60>)
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068b4:	4b13      	ldr	r3, [pc, #76]	; (8006904 <_sbrk+0x64>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d102      	bne.n	80068c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80068bc:	4b11      	ldr	r3, [pc, #68]	; (8006904 <_sbrk+0x64>)
 80068be:	4a12      	ldr	r2, [pc, #72]	; (8006908 <_sbrk+0x68>)
 80068c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <_sbrk+0x64>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d207      	bcs.n	80068e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068d0:	f008 fcbc 	bl	800f24c <__errno>
 80068d4:	4603      	mov	r3, r0
 80068d6:	220c      	movs	r2, #12
 80068d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80068da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068de:	e009      	b.n	80068f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <_sbrk+0x64>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <_sbrk+0x64>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4413      	add	r3, r2
 80068ee:	4a05      	ldr	r2, [pc, #20]	; (8006904 <_sbrk+0x64>)
 80068f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068f2:	68fb      	ldr	r3, [r7, #12]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20020000 	.word	0x20020000
 8006900:	00000400 	.word	0x00000400
 8006904:	200005b0 	.word	0x200005b0
 8006908:	20005450 	.word	0x20005450

0800690c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <SystemInit+0x20>)
 8006912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006916:	4a05      	ldr	r2, [pc, #20]	; (800692c <SystemInit+0x20>)
 8006918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800691c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006920:	bf00      	nop
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	e000ed00 	.word	0xe000ed00

08006930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006968 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006934:	480d      	ldr	r0, [pc, #52]	; (800696c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006936:	490e      	ldr	r1, [pc, #56]	; (8006970 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006938:	4a0e      	ldr	r2, [pc, #56]	; (8006974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800693a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800693c:	e002      	b.n	8006944 <LoopCopyDataInit>

0800693e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800693e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006942:	3304      	adds	r3, #4

08006944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006948:	d3f9      	bcc.n	800693e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800694a:	4a0b      	ldr	r2, [pc, #44]	; (8006978 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800694c:	4c0b      	ldr	r4, [pc, #44]	; (800697c <LoopFillZerobss+0x26>)
  movs r3, #0
 800694e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006950:	e001      	b.n	8006956 <LoopFillZerobss>

08006952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006954:	3204      	adds	r2, #4

08006956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006958:	d3fb      	bcc.n	8006952 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800695a:	f7ff ffd7 	bl	800690c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800695e:	f008 fc7b 	bl	800f258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006962:	f7fa fac9 	bl	8000ef8 <main>
  bx  lr    
 8006966:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800696c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006970:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8006974:	080108cc 	.word	0x080108cc
  ldr r2, =_sbss
 8006978:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 800697c:	20005450 	.word	0x20005450

08006980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006980:	e7fe      	b.n	8006980 <ADC_IRQHandler>
	...

08006984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006988:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <HAL_Init+0x40>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <HAL_Init+0x40>)
 800698e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <HAL_Init+0x40>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <HAL_Init+0x40>)
 800699a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800699e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069a0:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <HAL_Init+0x40>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a07      	ldr	r2, [pc, #28]	; (80069c4 <HAL_Init+0x40>)
 80069a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069ac:	2003      	movs	r0, #3
 80069ae:	f000 fcfc 	bl	80073aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80069b2:	200f      	movs	r0, #15
 80069b4:	f7ff fede 	bl	8006774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80069b8:	f7ff fc4a 	bl	8006250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	40023c00 	.word	0x40023c00

080069c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069cc:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <HAL_IncTick+0x20>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	4b06      	ldr	r3, [pc, #24]	; (80069ec <HAL_IncTick+0x24>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4413      	add	r3, r2
 80069d8:	4a04      	ldr	r2, [pc, #16]	; (80069ec <HAL_IncTick+0x24>)
 80069da:	6013      	str	r3, [r2, #0]
}
 80069dc:	bf00      	nop
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	2000014c 	.word	0x2000014c
 80069ec:	200005b4 	.word	0x200005b4

080069f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  return uwTick;
 80069f4:	4b03      	ldr	r3, [pc, #12]	; (8006a04 <HAL_GetTick+0x14>)
 80069f6:	681b      	ldr	r3, [r3, #0]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	200005b4 	.word	0x200005b4

08006a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a10:	f7ff ffee 	bl	80069f0 <HAL_GetTick>
 8006a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a20:	d005      	beq.n	8006a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a22:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <HAL_Delay+0x44>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a2e:	bf00      	nop
 8006a30:	f7ff ffde 	bl	80069f0 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d8f7      	bhi.n	8006a30 <HAL_Delay+0x28>
  {
  }
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	2000014c 	.word	0x2000014c

08006a50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e033      	b.n	8006ace <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff fc1a 	bl	80062a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d118      	bne.n	8006ac0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a96:	f023 0302 	bic.w	r3, r3, #2
 8006a9a:	f043 0202 	orr.w	r2, r3, #2
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fad8 	bl	8007058 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
 8006abe:	e001      	b.n	8006ac4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_ADC_Start+0x1a>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e0b2      	b.n	8006c58 <HAL_ADC_Start+0x180>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d018      	beq.n	8006b3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006b18:	4b52      	ldr	r3, [pc, #328]	; (8006c64 <HAL_ADC_Start+0x18c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a52      	ldr	r2, [pc, #328]	; (8006c68 <HAL_ADC_Start+0x190>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	0c9a      	lsrs	r2, r3, #18
 8006b24:	4613      	mov	r3, r2
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4413      	add	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006b2c:	e002      	b.n	8006b34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f9      	bne.n	8006b2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d17a      	bne.n	8006c3e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b50:	f023 0301 	bic.w	r3, r3, #1
 8006b54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b86:	d106      	bne.n	8006b96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8c:	f023 0206 	bic.w	r2, r3, #6
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	645a      	str	r2, [r3, #68]	; 0x44
 8006b94:	e002      	b.n	8006b9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ba4:	4b31      	ldr	r3, [pc, #196]	; (8006c6c <HAL_ADC_Start+0x194>)
 8006ba6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006bb0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d12a      	bne.n	8006c14 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2b      	ldr	r2, [pc, #172]	; (8006c70 <HAL_ADC_Start+0x198>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d015      	beq.n	8006bf4 <HAL_ADC_Start+0x11c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a29      	ldr	r2, [pc, #164]	; (8006c74 <HAL_ADC_Start+0x19c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d105      	bne.n	8006bde <HAL_ADC_Start+0x106>
 8006bd2:	4b26      	ldr	r3, [pc, #152]	; (8006c6c <HAL_ADC_Start+0x194>)
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a25      	ldr	r2, [pc, #148]	; (8006c78 <HAL_ADC_Start+0x1a0>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d136      	bne.n	8006c56 <HAL_ADC_Start+0x17e>
 8006be8:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <HAL_ADC_Start+0x194>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d130      	bne.n	8006c56 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d129      	bne.n	8006c56 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c10:	609a      	str	r2, [r3, #8]
 8006c12:	e020      	b.n	8006c56 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <HAL_ADC_Start+0x198>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d11b      	bne.n	8006c56 <HAL_ADC_Start+0x17e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d114      	bne.n	8006c56 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	e00b      	b.n	8006c56 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f043 0210 	orr.w	r2, r3, #16
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4e:	f043 0201 	orr.w	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	20000144 	.word	0x20000144
 8006c68:	431bde83 	.word	0x431bde83
 8006c6c:	40012300 	.word	0x40012300
 8006c70:	40012000 	.word	0x40012000
 8006c74:	40012100 	.word	0x40012100
 8006c78:	40012200 	.word	0x40012200

08006c7c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_ADC_Stop+0x16>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e021      	b.n	8006cd6 <HAL_ADC_Stop+0x5a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d109      	bne.n	8006ccc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	f043 0201 	orr.w	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfe:	d113      	bne.n	8006d28 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0e:	d10b      	bne.n	8006d28 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	f043 0220 	orr.w	r2, r3, #32
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e063      	b.n	8006df0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006d28:	f7ff fe62 	bl	80069f0 <HAL_GetTick>
 8006d2c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006d2e:	e021      	b.n	8006d74 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d36:	d01d      	beq.n	8006d74 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <HAL_ADC_PollForConversion+0x6c>
 8006d3e:	f7ff fe57 	bl	80069f0 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d212      	bcs.n	8006d74 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d00b      	beq.n	8006d74 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	f043 0204 	orr.w	r2, r3, #4
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e03d      	b.n	8006df0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d1d6      	bne.n	8006d30 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f06f 0212 	mvn.w	r2, #18
 8006d8a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d123      	bne.n	8006dee <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d11f      	bne.n	8006dee <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d006      	beq.n	8006dca <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d111      	bne.n	8006dee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d105      	bne.n	8006dee <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f043 0201 	orr.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_ADC_ConfigChannel+0x1c>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e105      	b.n	800703c <HAL_ADC_ConfigChannel+0x228>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b09      	cmp	r3, #9
 8006e3e:	d925      	bls.n	8006e8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68d9      	ldr	r1, [r3, #12]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4613      	mov	r3, r2
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	4413      	add	r3, r2
 8006e54:	3b1e      	subs	r3, #30
 8006e56:	2207      	movs	r2, #7
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	43da      	mvns	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	400a      	ands	r2, r1
 8006e64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68d9      	ldr	r1, [r3, #12]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	4618      	mov	r0, r3
 8006e78:	4603      	mov	r3, r0
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	4403      	add	r3, r0
 8006e7e:	3b1e      	subs	r3, #30
 8006e80:	409a      	lsls	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	60da      	str	r2, [r3, #12]
 8006e8a:	e022      	b.n	8006ed2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6919      	ldr	r1, [r3, #16]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	2207      	movs	r2, #7
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	43da      	mvns	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	400a      	ands	r2, r1
 8006eae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6919      	ldr	r1, [r3, #16]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	4403      	add	r3, r0
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b06      	cmp	r3, #6
 8006ed8:	d824      	bhi.n	8006f24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	3b05      	subs	r3, #5
 8006eec:	221f      	movs	r2, #31
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	43da      	mvns	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	400a      	ands	r2, r1
 8006efa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	4618      	mov	r0, r3
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	3b05      	subs	r3, #5
 8006f16:	fa00 f203 	lsl.w	r2, r0, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	635a      	str	r2, [r3, #52]	; 0x34
 8006f22:	e04c      	b.n	8006fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b0c      	cmp	r3, #12
 8006f2a:	d824      	bhi.n	8006f76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	3b23      	subs	r3, #35	; 0x23
 8006f3e:	221f      	movs	r2, #31
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	43da      	mvns	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	400a      	ands	r2, r1
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	3b23      	subs	r3, #35	; 0x23
 8006f68:	fa00 f203 	lsl.w	r2, r0, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
 8006f74:	e023      	b.n	8006fbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	4613      	mov	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	3b41      	subs	r3, #65	; 0x41
 8006f88:	221f      	movs	r2, #31
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	43da      	mvns	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	400a      	ands	r2, r1
 8006f96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	3b41      	subs	r3, #65	; 0x41
 8006fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fbe:	4b22      	ldr	r3, [pc, #136]	; (8007048 <HAL_ADC_ConfigChannel+0x234>)
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	; (800704c <HAL_ADC_ConfigChannel+0x238>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d109      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x1cc>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b12      	cmp	r3, #18
 8006fd2:	d105      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a19      	ldr	r2, [pc, #100]	; (800704c <HAL_ADC_ConfigChannel+0x238>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d123      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x21e>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d003      	beq.n	8006ffa <HAL_ADC_ConfigChannel+0x1e6>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b11      	cmp	r3, #17
 8006ff8:	d11b      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b10      	cmp	r3, #16
 800700c:	d111      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800700e:	4b10      	ldr	r3, [pc, #64]	; (8007050 <HAL_ADC_ConfigChannel+0x23c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a10      	ldr	r2, [pc, #64]	; (8007054 <HAL_ADC_ConfigChannel+0x240>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	0c9a      	lsrs	r2, r3, #18
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007024:	e002      	b.n	800702c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	3b01      	subs	r3, #1
 800702a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f9      	bne.n	8007026 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	40012300 	.word	0x40012300
 800704c:	40012000 	.word	0x40012000
 8007050:	20000144 	.word	0x20000144
 8007054:	431bde83 	.word	0x431bde83

08007058 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007060:	4b79      	ldr	r3, [pc, #484]	; (8007248 <ADC_Init+0x1f0>)
 8007062:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	431a      	orrs	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800708c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6859      	ldr	r1, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	021a      	lsls	r2, r3, #8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80070b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6859      	ldr	r1, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6899      	ldr	r1, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	4a58      	ldr	r2, [pc, #352]	; (800724c <ADC_Init+0x1f4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6899      	ldr	r1, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6899      	ldr	r1, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	e00f      	b.n	8007156 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007154:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0202 	bic.w	r2, r2, #2
 8007164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6899      	ldr	r1, [r3, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7e1b      	ldrb	r3, [r3, #24]
 8007170:	005a      	lsls	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d01b      	beq.n	80071bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007192:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80071a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6859      	ldr	r1, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	3b01      	subs	r3, #1
 80071b0:	035a      	lsls	r2, r3, #13
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	e007      	b.n	80071cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80071da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	051a      	lsls	r2, r3, #20
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6899      	ldr	r1, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800720e:	025a      	lsls	r2, r3, #9
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6899      	ldr	r1, [r3, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	029a      	lsls	r2, r3, #10
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	609a      	str	r2, [r3, #8]
}
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	40012300 	.word	0x40012300
 800724c:	0f000001 	.word	0x0f000001

08007250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007260:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <__NVIC_SetPriorityGrouping+0x44>)
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800726c:	4013      	ands	r3, r2
 800726e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800727c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007282:	4a04      	ldr	r2, [pc, #16]	; (8007294 <__NVIC_SetPriorityGrouping+0x44>)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	60d3      	str	r3, [r2, #12]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	e000ed00 	.word	0xe000ed00

08007298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800729c:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <__NVIC_GetPriorityGrouping+0x18>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	0a1b      	lsrs	r3, r3, #8
 80072a2:	f003 0307 	and.w	r3, r3, #7
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	e000ed00 	.word	0xe000ed00

080072b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	db0b      	blt.n	80072de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	f003 021f 	and.w	r2, r3, #31
 80072cc:	4907      	ldr	r1, [pc, #28]	; (80072ec <__NVIC_EnableIRQ+0x38>)
 80072ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	2001      	movs	r0, #1
 80072d6:	fa00 f202 	lsl.w	r2, r0, r2
 80072da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	e000e100 	.word	0xe000e100

080072f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007300:	2b00      	cmp	r3, #0
 8007302:	db0a      	blt.n	800731a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	b2da      	uxtb	r2, r3
 8007308:	490c      	ldr	r1, [pc, #48]	; (800733c <__NVIC_SetPriority+0x4c>)
 800730a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730e:	0112      	lsls	r2, r2, #4
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	440b      	add	r3, r1
 8007314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007318:	e00a      	b.n	8007330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	b2da      	uxtb	r2, r3
 800731e:	4908      	ldr	r1, [pc, #32]	; (8007340 <__NVIC_SetPriority+0x50>)
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	3b04      	subs	r3, #4
 8007328:	0112      	lsls	r2, r2, #4
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	440b      	add	r3, r1
 800732e:	761a      	strb	r2, [r3, #24]
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	e000e100 	.word	0xe000e100
 8007340:	e000ed00 	.word	0xe000ed00

08007344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007344:	b480      	push	{r7}
 8007346:	b089      	sub	sp, #36	; 0x24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f1c3 0307 	rsb	r3, r3, #7
 800735e:	2b04      	cmp	r3, #4
 8007360:	bf28      	it	cs
 8007362:	2304      	movcs	r3, #4
 8007364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	3304      	adds	r3, #4
 800736a:	2b06      	cmp	r3, #6
 800736c:	d902      	bls.n	8007374 <NVIC_EncodePriority+0x30>
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	3b03      	subs	r3, #3
 8007372:	e000      	b.n	8007376 <NVIC_EncodePriority+0x32>
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	fa02 f303 	lsl.w	r3, r2, r3
 8007382:	43da      	mvns	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	401a      	ands	r2, r3
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800738c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	fa01 f303 	lsl.w	r3, r1, r3
 8007396:	43d9      	mvns	r1, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800739c:	4313      	orrs	r3, r2
         );
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3724      	adds	r7, #36	; 0x24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff ff4c 	bl	8007250 <__NVIC_SetPriorityGrouping>
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073d2:	f7ff ff61 	bl	8007298 <__NVIC_GetPriorityGrouping>
 80073d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	6978      	ldr	r0, [r7, #20]
 80073de:	f7ff ffb1 	bl	8007344 <NVIC_EncodePriority>
 80073e2:	4602      	mov	r2, r0
 80073e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e8:	4611      	mov	r1, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff ff80 	bl	80072f0 <__NVIC_SetPriority>
}
 80073f0:	bf00      	nop
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff ff54 	bl	80072b4 <__NVIC_EnableIRQ>
}
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007420:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007422:	f7ff fae5 	bl	80069f0 <HAL_GetTick>
 8007426:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d008      	beq.n	8007446 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2280      	movs	r2, #128	; 0x80
 8007438:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e052      	b.n	80074ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0216 	bic.w	r2, r2, #22
 8007454:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695a      	ldr	r2, [r3, #20]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007464:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <HAL_DMA_Abort+0x62>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007472:	2b00      	cmp	r3, #0
 8007474:	d007      	beq.n	8007486 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0208 	bic.w	r2, r2, #8
 8007484:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007496:	e013      	b.n	80074c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007498:	f7ff faaa 	bl	80069f0 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	d90c      	bls.n	80074c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2203      	movs	r2, #3
 80074b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e015      	b.n	80074ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e4      	bne.n	8007498 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d2:	223f      	movs	r2, #63	; 0x3f
 80074d4:	409a      	lsls	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d004      	beq.n	8007512 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2280      	movs	r2, #128	; 0x80
 800750c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e00c      	b.n	800752c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2205      	movs	r2, #5
 8007516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0201 	bic.w	r2, r2, #1
 8007528:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007538:	b480      	push	{r7}
 800753a:	b089      	sub	sp, #36	; 0x24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007542:	2300      	movs	r3, #0
 8007544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
 8007552:	e16b      	b.n	800782c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007554:	2201      	movs	r2, #1
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4013      	ands	r3, r2
 8007566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	429a      	cmp	r2, r3
 800756e:	f040 815a 	bne.w	8007826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b01      	cmp	r3, #1
 800757c:	d005      	beq.n	800758a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007586:	2b02      	cmp	r3, #2
 8007588:	d130      	bne.n	80075ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	2203      	movs	r2, #3
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	43db      	mvns	r3, r3
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	4013      	ands	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	fa02 f303 	lsl.w	r3, r2, r3
 80075ae:	69ba      	ldr	r2, [r7, #24]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80075c0:	2201      	movs	r2, #1
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	43db      	mvns	r3, r3
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	4013      	ands	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	091b      	lsrs	r3, r3, #4
 80075d6:	f003 0201 	and.w	r2, r3, #1
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d017      	beq.n	8007628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	2203      	movs	r2, #3
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	4013      	ands	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	4313      	orrs	r3, r2
 8007620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d123      	bne.n	800767c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	08da      	lsrs	r2, r3, #3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3208      	adds	r2, #8
 800763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	220f      	movs	r2, #15
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	43db      	mvns	r3, r3
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	4013      	ands	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	4313      	orrs	r3, r2
 800766c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	08da      	lsrs	r2, r3, #3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3208      	adds	r2, #8
 8007676:	69b9      	ldr	r1, [r7, #24]
 8007678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	2203      	movs	r2, #3
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	43db      	mvns	r3, r3
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	4013      	ands	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f003 0203 	and.w	r2, r3, #3
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 80b4 	beq.w	8007826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	4b60      	ldr	r3, [pc, #384]	; (8007844 <HAL_GPIO_Init+0x30c>)
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	4a5f      	ldr	r2, [pc, #380]	; (8007844 <HAL_GPIO_Init+0x30c>)
 80076c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076cc:	6453      	str	r3, [r2, #68]	; 0x44
 80076ce:	4b5d      	ldr	r3, [pc, #372]	; (8007844 <HAL_GPIO_Init+0x30c>)
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076da:	4a5b      	ldr	r2, [pc, #364]	; (8007848 <HAL_GPIO_Init+0x310>)
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	089b      	lsrs	r3, r3, #2
 80076e0:	3302      	adds	r3, #2
 80076e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	220f      	movs	r2, #15
 80076f2:	fa02 f303 	lsl.w	r3, r2, r3
 80076f6:	43db      	mvns	r3, r3
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	4013      	ands	r3, r2
 80076fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a52      	ldr	r2, [pc, #328]	; (800784c <HAL_GPIO_Init+0x314>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d02b      	beq.n	800775e <HAL_GPIO_Init+0x226>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a51      	ldr	r2, [pc, #324]	; (8007850 <HAL_GPIO_Init+0x318>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d025      	beq.n	800775a <HAL_GPIO_Init+0x222>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a50      	ldr	r2, [pc, #320]	; (8007854 <HAL_GPIO_Init+0x31c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01f      	beq.n	8007756 <HAL_GPIO_Init+0x21e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a4f      	ldr	r2, [pc, #316]	; (8007858 <HAL_GPIO_Init+0x320>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d019      	beq.n	8007752 <HAL_GPIO_Init+0x21a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a4e      	ldr	r2, [pc, #312]	; (800785c <HAL_GPIO_Init+0x324>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_GPIO_Init+0x216>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a4d      	ldr	r2, [pc, #308]	; (8007860 <HAL_GPIO_Init+0x328>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00d      	beq.n	800774a <HAL_GPIO_Init+0x212>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a4c      	ldr	r2, [pc, #304]	; (8007864 <HAL_GPIO_Init+0x32c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d007      	beq.n	8007746 <HAL_GPIO_Init+0x20e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a4b      	ldr	r2, [pc, #300]	; (8007868 <HAL_GPIO_Init+0x330>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d101      	bne.n	8007742 <HAL_GPIO_Init+0x20a>
 800773e:	2307      	movs	r3, #7
 8007740:	e00e      	b.n	8007760 <HAL_GPIO_Init+0x228>
 8007742:	2308      	movs	r3, #8
 8007744:	e00c      	b.n	8007760 <HAL_GPIO_Init+0x228>
 8007746:	2306      	movs	r3, #6
 8007748:	e00a      	b.n	8007760 <HAL_GPIO_Init+0x228>
 800774a:	2305      	movs	r3, #5
 800774c:	e008      	b.n	8007760 <HAL_GPIO_Init+0x228>
 800774e:	2304      	movs	r3, #4
 8007750:	e006      	b.n	8007760 <HAL_GPIO_Init+0x228>
 8007752:	2303      	movs	r3, #3
 8007754:	e004      	b.n	8007760 <HAL_GPIO_Init+0x228>
 8007756:	2302      	movs	r3, #2
 8007758:	e002      	b.n	8007760 <HAL_GPIO_Init+0x228>
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <HAL_GPIO_Init+0x228>
 800775e:	2300      	movs	r3, #0
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	f002 0203 	and.w	r2, r2, #3
 8007766:	0092      	lsls	r2, r2, #2
 8007768:	4093      	lsls	r3, r2
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	4313      	orrs	r3, r2
 800776e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007770:	4935      	ldr	r1, [pc, #212]	; (8007848 <HAL_GPIO_Init+0x310>)
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	089b      	lsrs	r3, r3, #2
 8007776:	3302      	adds	r3, #2
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800777e:	4b3b      	ldr	r3, [pc, #236]	; (800786c <HAL_GPIO_Init+0x334>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	43db      	mvns	r3, r3
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	4013      	ands	r3, r2
 800778c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	4313      	orrs	r3, r2
 80077a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80077a2:	4a32      	ldr	r2, [pc, #200]	; (800786c <HAL_GPIO_Init+0x334>)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80077a8:	4b30      	ldr	r3, [pc, #192]	; (800786c <HAL_GPIO_Init+0x334>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	43db      	mvns	r3, r3
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	4013      	ands	r3, r2
 80077b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80077cc:	4a27      	ldr	r2, [pc, #156]	; (800786c <HAL_GPIO_Init+0x334>)
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80077d2:	4b26      	ldr	r3, [pc, #152]	; (800786c <HAL_GPIO_Init+0x334>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	43db      	mvns	r3, r3
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	4013      	ands	r3, r2
 80077e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077f6:	4a1d      	ldr	r2, [pc, #116]	; (800786c <HAL_GPIO_Init+0x334>)
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077fc:	4b1b      	ldr	r3, [pc, #108]	; (800786c <HAL_GPIO_Init+0x334>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	43db      	mvns	r3, r3
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	4013      	ands	r3, r2
 800780a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007820:	4a12      	ldr	r2, [pc, #72]	; (800786c <HAL_GPIO_Init+0x334>)
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	3301      	adds	r3, #1
 800782a:	61fb      	str	r3, [r7, #28]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	2b0f      	cmp	r3, #15
 8007830:	f67f ae90 	bls.w	8007554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	3724      	adds	r7, #36	; 0x24
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40023800 	.word	0x40023800
 8007848:	40013800 	.word	0x40013800
 800784c:	40020000 	.word	0x40020000
 8007850:	40020400 	.word	0x40020400
 8007854:	40020800 	.word	0x40020800
 8007858:	40020c00 	.word	0x40020c00
 800785c:	40021000 	.word	0x40021000
 8007860:	40021400 	.word	0x40021400
 8007864:	40021800 	.word	0x40021800
 8007868:	40021c00 	.word	0x40021c00
 800786c:	40013c00 	.word	0x40013c00

08007870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	807b      	strh	r3, [r7, #2]
 800787c:	4613      	mov	r3, r2
 800787e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007880:	787b      	ldrb	r3, [r7, #1]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007886:	887a      	ldrh	r2, [r7, #2]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800788c:	e003      	b.n	8007896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800788e:	887b      	ldrh	r3, [r7, #2]
 8007890:	041a      	lsls	r2, r3, #16
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	619a      	str	r2, [r3, #24]
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e12b      	b.n	8007b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7fe fd60 	bl	8006390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2224      	movs	r2, #36	; 0x24
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007908:	f001 fbe4 	bl	80090d4 <HAL_RCC_GetPCLK1Freq>
 800790c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4a81      	ldr	r2, [pc, #516]	; (8007b18 <HAL_I2C_Init+0x274>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d807      	bhi.n	8007928 <HAL_I2C_Init+0x84>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a80      	ldr	r2, [pc, #512]	; (8007b1c <HAL_I2C_Init+0x278>)
 800791c:	4293      	cmp	r3, r2
 800791e:	bf94      	ite	ls
 8007920:	2301      	movls	r3, #1
 8007922:	2300      	movhi	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e006      	b.n	8007936 <HAL_I2C_Init+0x92>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4a7d      	ldr	r2, [pc, #500]	; (8007b20 <HAL_I2C_Init+0x27c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	bf94      	ite	ls
 8007930:	2301      	movls	r3, #1
 8007932:	2300      	movhi	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e0e7      	b.n	8007b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a78      	ldr	r2, [pc, #480]	; (8007b24 <HAL_I2C_Init+0x280>)
 8007942:	fba2 2303 	umull	r2, r3, r2, r3
 8007946:	0c9b      	lsrs	r3, r3, #18
 8007948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4a6a      	ldr	r2, [pc, #424]	; (8007b18 <HAL_I2C_Init+0x274>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d802      	bhi.n	8007978 <HAL_I2C_Init+0xd4>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3301      	adds	r3, #1
 8007976:	e009      	b.n	800798c <HAL_I2C_Init+0xe8>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	4a69      	ldr	r2, [pc, #420]	; (8007b28 <HAL_I2C_Init+0x284>)
 8007984:	fba2 2303 	umull	r2, r3, r2, r3
 8007988:	099b      	lsrs	r3, r3, #6
 800798a:	3301      	adds	r3, #1
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	430b      	orrs	r3, r1
 8007992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800799e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	495c      	ldr	r1, [pc, #368]	; (8007b18 <HAL_I2C_Init+0x274>)
 80079a8:	428b      	cmp	r3, r1
 80079aa:	d819      	bhi.n	80079e0 <HAL_I2C_Init+0x13c>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	1e59      	subs	r1, r3, #1
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80079ba:	1c59      	adds	r1, r3, #1
 80079bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80079c0:	400b      	ands	r3, r1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <HAL_I2C_Init+0x138>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1e59      	subs	r1, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80079d4:	3301      	adds	r3, #1
 80079d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079da:	e051      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 80079dc:	2304      	movs	r3, #4
 80079de:	e04f      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d111      	bne.n	8007a0c <HAL_I2C_Init+0x168>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	1e58      	subs	r0, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6859      	ldr	r1, [r3, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	440b      	add	r3, r1
 80079f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80079fa:	3301      	adds	r3, #1
 80079fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	e012      	b.n	8007a32 <HAL_I2C_Init+0x18e>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	1e58      	subs	r0, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	0099      	lsls	r1, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a22:	3301      	adds	r3, #1
 8007a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <HAL_I2C_Init+0x196>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e022      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10e      	bne.n	8007a60 <HAL_I2C_Init+0x1bc>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1e58      	subs	r0, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6859      	ldr	r1, [r3, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	440b      	add	r3, r1
 8007a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a54:	3301      	adds	r3, #1
 8007a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5e:	e00f      	b.n	8007a80 <HAL_I2C_Init+0x1dc>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	1e58      	subs	r0, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6859      	ldr	r1, [r3, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	0099      	lsls	r1, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a76:	3301      	adds	r3, #1
 8007a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	6809      	ldr	r1, [r1, #0]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69da      	ldr	r2, [r3, #28]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6911      	ldr	r1, [r2, #16]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	68d2      	ldr	r2, [r2, #12]
 8007aba:	4311      	orrs	r1, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695a      	ldr	r2, [r3, #20]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f042 0201 	orr.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	000186a0 	.word	0x000186a0
 8007b1c:	001e847f 	.word	0x001e847f
 8007b20:	003d08ff 	.word	0x003d08ff
 8007b24:	431bde83 	.word	0x431bde83
 8007b28:	10624dd3 	.word	0x10624dd3

08007b2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	817b      	strh	r3, [r7, #10]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	813b      	strh	r3, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b46:	f7fe ff53 	bl	80069f0 <HAL_GetTick>
 8007b4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	f040 80d9 	bne.w	8007d0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2319      	movs	r3, #25
 8007b60:	2201      	movs	r2, #1
 8007b62:	496d      	ldr	r1, [pc, #436]	; (8007d18 <HAL_I2C_Mem_Write+0x1ec>)
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fc7f 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b70:	2302      	movs	r3, #2
 8007b72:	e0cc      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_I2C_Mem_Write+0x56>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e0c5      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d007      	beq.n	8007ba8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2221      	movs	r2, #33	; 0x21
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2240      	movs	r2, #64	; 0x40
 8007bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a3a      	ldr	r2, [r7, #32]
 8007bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4a4d      	ldr	r2, [pc, #308]	; (8007d1c <HAL_I2C_Mem_Write+0x1f0>)
 8007be8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bea:	88f8      	ldrh	r0, [r7, #6]
 8007bec:	893a      	ldrh	r2, [r7, #8]
 8007bee:	8979      	ldrh	r1, [r7, #10]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fab6 	bl	800816c <I2C_RequestMemoryWrite>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d052      	beq.n	8007cac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e081      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fd00 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00d      	beq.n	8007c36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d107      	bne.n	8007c32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e06b      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	781a      	ldrb	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d11b      	bne.n	8007cac <HAL_I2C_Mem_Write+0x180>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d017      	beq.n	8007cac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	781a      	ldrb	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1aa      	bne.n	8007c0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fcec 	bl	8008696 <I2C_WaitOnBTFFlagUntilTimeout>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00d      	beq.n	8007ce0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d107      	bne.n	8007cdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e016      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e000      	b.n	8007d0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
  }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	00100002 	.word	0x00100002
 8007d1c:	ffff0000 	.word	0xffff0000

08007d20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	; 0x30
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	817b      	strh	r3, [r7, #10]
 8007d32:	460b      	mov	r3, r1
 8007d34:	813b      	strh	r3, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d3a:	f7fe fe59 	bl	80069f0 <HAL_GetTick>
 8007d3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	f040 8208 	bne.w	800815e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	2319      	movs	r3, #25
 8007d54:	2201      	movs	r2, #1
 8007d56:	497b      	ldr	r1, [pc, #492]	; (8007f44 <HAL_I2C_Mem_Read+0x224>)
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 fb85 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007d64:	2302      	movs	r3, #2
 8007d66:	e1fb      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d101      	bne.n	8007d76 <HAL_I2C_Mem_Read+0x56>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e1f4      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d007      	beq.n	8007d9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2222      	movs	r2, #34	; 0x22
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2240      	movs	r2, #64	; 0x40
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4a5b      	ldr	r2, [pc, #364]	; (8007f48 <HAL_I2C_Mem_Read+0x228>)
 8007ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dde:	88f8      	ldrh	r0, [r7, #6]
 8007de0:	893a      	ldrh	r2, [r7, #8]
 8007de2:	8979      	ldrh	r1, [r7, #10]
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4603      	mov	r3, r0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fa52 	bl	8008298 <I2C_RequestMemoryRead>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e1b0      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d113      	bne.n	8007e2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e06:	2300      	movs	r3, #0
 8007e08:	623b      	str	r3, [r7, #32]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	623b      	str	r3, [r7, #32]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	623b      	str	r3, [r7, #32]
 8007e1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e184      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d11b      	bne.n	8007e6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e46:	2300      	movs	r3, #0
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e164      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d11b      	bne.n	8007eae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e96:	2300      	movs	r3, #0
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	61bb      	str	r3, [r7, #24]
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	e144      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	617b      	str	r3, [r7, #20]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007ec4:	e138      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	f200 80f1 	bhi.w	80080b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d123      	bne.n	8007f20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fc1b 	bl	8008718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e139      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691a      	ldr	r2, [r3, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f1e:	e10b      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d14e      	bne.n	8007fc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4906      	ldr	r1, [pc, #24]	; (8007f4c <HAL_I2C_Mem_Read+0x22c>)
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 fa98 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e10e      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
 8007f42:	bf00      	nop
 8007f44:	00100002 	.word	0x00100002
 8007f48:	ffff0000 	.word	0xffff0000
 8007f4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fc4:	e0b8      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4966      	ldr	r1, [pc, #408]	; (8008168 <HAL_I2C_Mem_Read+0x448>)
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 fa49 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e0bf      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	691a      	ldr	r2, [r3, #16]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	b2d2      	uxtb	r2, r2
 8007ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	2200      	movs	r2, #0
 800802a:	494f      	ldr	r1, [pc, #316]	; (8008168 <HAL_I2C_Mem_Read+0x448>)
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 fa1b 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e091      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800804a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691a      	ldr	r2, [r3, #16]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008074:	b29b      	uxth	r3, r3
 8008076:	3b01      	subs	r3, #1
 8008078:	b29a      	uxth	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809a:	3b01      	subs	r3, #1
 800809c:	b29a      	uxth	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080b0:	e042      	b.n	8008138 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fb2e 	bl	8008718 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e04c      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	3b01      	subs	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b04      	cmp	r3, #4
 8008104:	d118      	bne.n	8008138 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	691a      	ldr	r2, [r3, #16]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	b2d2      	uxtb	r2, r2
 8008112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812e:	b29b      	uxth	r3, r3
 8008130:	3b01      	subs	r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800813c:	2b00      	cmp	r3, #0
 800813e:	f47f aec2 	bne.w	8007ec6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	e000      	b.n	8008160 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800815e:	2302      	movs	r3, #2
  }
}
 8008160:	4618      	mov	r0, r3
 8008162:	3728      	adds	r7, #40	; 0x28
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	00010004 	.word	0x00010004

0800816c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af02      	add	r7, sp, #8
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	4608      	mov	r0, r1
 8008176:	4611      	mov	r1, r2
 8008178:	461a      	mov	r2, r3
 800817a:	4603      	mov	r3, r0
 800817c:	817b      	strh	r3, [r7, #10]
 800817e:	460b      	mov	r3, r1
 8008180:	813b      	strh	r3, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008194:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	2200      	movs	r2, #0
 800819e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 f960 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081bc:	d103      	bne.n	80081c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e05f      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081ca:	897b      	ldrh	r3, [r7, #10]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	461a      	mov	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	6a3a      	ldr	r2, [r7, #32]
 80081de:	492d      	ldr	r1, [pc, #180]	; (8008294 <I2C_RequestMemoryWrite+0x128>)
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f998 	bl	8008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e04c      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081f0:	2300      	movs	r3, #0
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008208:	6a39      	ldr	r1, [r7, #32]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fa02 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	2b04      	cmp	r3, #4
 800821c:	d107      	bne.n	800822e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800822c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e02b      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d105      	bne.n	8008244 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008238:	893b      	ldrh	r3, [r7, #8]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	611a      	str	r2, [r3, #16]
 8008242:	e021      	b.n	8008288 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008244:	893b      	ldrh	r3, [r7, #8]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	b29b      	uxth	r3, r3
 800824a:	b2da      	uxtb	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008254:	6a39      	ldr	r1, [r7, #32]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f9dc 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00d      	beq.n	800827e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	2b04      	cmp	r3, #4
 8008268:	d107      	bne.n	800827a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e005      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800827e:	893b      	ldrh	r3, [r7, #8]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	00010002 	.word	0x00010002

08008298 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af02      	add	r7, sp, #8
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	461a      	mov	r2, r3
 80082a6:	4603      	mov	r3, r0
 80082a8:	817b      	strh	r3, [r7, #10]
 80082aa:	460b      	mov	r3, r1
 80082ac:	813b      	strh	r3, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	2200      	movs	r2, #0
 80082da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 f8c2 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00d      	beq.n	8008306 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f8:	d103      	bne.n	8008302 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e0aa      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008306:	897b      	ldrh	r3, [r7, #10]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	461a      	mov	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	6a3a      	ldr	r2, [r7, #32]
 800831a:	4952      	ldr	r1, [pc, #328]	; (8008464 <I2C_RequestMemoryRead+0x1cc>)
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f8fa 	bl	8008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e097      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008344:	6a39      	ldr	r1, [r7, #32]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f964 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00d      	beq.n	800836e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	2b04      	cmp	r3, #4
 8008358:	d107      	bne.n	800836a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e076      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800836e:	88fb      	ldrh	r3, [r7, #6]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d105      	bne.n	8008380 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008374:	893b      	ldrh	r3, [r7, #8]
 8008376:	b2da      	uxtb	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	611a      	str	r2, [r3, #16]
 800837e:	e021      	b.n	80083c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008380:	893b      	ldrh	r3, [r7, #8]
 8008382:	0a1b      	lsrs	r3, r3, #8
 8008384:	b29b      	uxth	r3, r3
 8008386:	b2da      	uxtb	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800838e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008390:	6a39      	ldr	r1, [r7, #32]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f93e 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00d      	beq.n	80083ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d107      	bne.n	80083b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e050      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083ba:	893b      	ldrh	r3, [r7, #8]
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c6:	6a39      	ldr	r1, [r7, #32]
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 f923 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00d      	beq.n	80083f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d107      	bne.n	80083ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e035      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	2200      	movs	r2, #0
 8008408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f82b 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00d      	beq.n	8008434 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008426:	d103      	bne.n	8008430 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800842e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e013      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008434:	897b      	ldrh	r3, [r7, #10]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	b2da      	uxtb	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	4906      	ldr	r1, [pc, #24]	; (8008464 <I2C_RequestMemoryRead+0x1cc>)
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 f863 	bl	8008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	00010002 	.word	0x00010002

08008468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	4613      	mov	r3, r2
 8008476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008478:	e025      	b.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008480:	d021      	beq.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008482:	f7fe fab5 	bl	80069f0 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d302      	bcc.n	8008498 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d116      	bne.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	f043 0220 	orr.w	r2, r3, #32
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e023      	b.n	800850e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d10d      	bne.n	80084ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	43da      	mvns	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4013      	ands	r3, r2
 80084dc:	b29b      	uxth	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bf0c      	ite	eq
 80084e2:	2301      	moveq	r3, #1
 80084e4:	2300      	movne	r3, #0
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	461a      	mov	r2, r3
 80084ea:	e00c      	b.n	8008506 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	43da      	mvns	r2, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4013      	ands	r3, r2
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bf0c      	ite	eq
 80084fe:	2301      	moveq	r3, #1
 8008500:	2300      	movne	r3, #0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	461a      	mov	r2, r3
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	429a      	cmp	r2, r3
 800850a:	d0b6      	beq.n	800847a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008524:	e051      	b.n	80085ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008534:	d123      	bne.n	800857e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008544:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800854e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	f043 0204 	orr.w	r2, r3, #4
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e046      	b.n	800860c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008584:	d021      	beq.n	80085ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008586:	f7fe fa33 	bl	80069f0 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d116      	bne.n	80085ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	f043 0220 	orr.w	r2, r3, #32
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e020      	b.n	800860c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	0c1b      	lsrs	r3, r3, #16
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d10c      	bne.n	80085ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	43da      	mvns	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4013      	ands	r3, r2
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bf14      	ite	ne
 80085e6:	2301      	movne	r3, #1
 80085e8:	2300      	moveq	r3, #0
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	e00b      	b.n	8008606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	43da      	mvns	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4013      	ands	r3, r2
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bf14      	ite	ne
 8008600:	2301      	movne	r3, #1
 8008602:	2300      	moveq	r3, #0
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d18d      	bne.n	8008526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008620:	e02d      	b.n	800867e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 f8ce 	bl	80087c4 <I2C_IsAcknowledgeFailed>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e02d      	b.n	800868e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008638:	d021      	beq.n	800867e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863a:	f7fe f9d9 	bl	80069f0 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	429a      	cmp	r2, r3
 8008648:	d302      	bcc.n	8008650 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d116      	bne.n	800867e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e007      	b.n	800868e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008688:	2b80      	cmp	r3, #128	; 0x80
 800868a:	d1ca      	bne.n	8008622 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086a2:	e02d      	b.n	8008700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f88d 	bl	80087c4 <I2C_IsAcknowledgeFailed>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e02d      	b.n	8008710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ba:	d021      	beq.n	8008700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086bc:	f7fe f998 	bl	80069f0 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d302      	bcc.n	80086d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d116      	bne.n	8008700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ec:	f043 0220 	orr.w	r2, r3, #32
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e007      	b.n	8008710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b04      	cmp	r3, #4
 800870c:	d1ca      	bne.n	80086a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008724:	e042      	b.n	80087ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b10      	cmp	r3, #16
 8008732:	d119      	bne.n	8008768 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0210 	mvn.w	r2, #16
 800873c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e029      	b.n	80087bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008768:	f7fe f942 	bl	80069f0 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	429a      	cmp	r2, r3
 8008776:	d302      	bcc.n	800877e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d116      	bne.n	80087ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2220      	movs	r2, #32
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008798:	f043 0220 	orr.w	r2, r3, #32
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e007      	b.n	80087bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b40      	cmp	r3, #64	; 0x40
 80087b8:	d1b5      	bne.n	8008726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087da:	d11b      	bne.n	8008814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	f043 0204 	orr.w	r2, r3, #4
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e000      	b.n	8008816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
	...

08008824 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800882a:	4b06      	ldr	r3, [pc, #24]	; (8008844 <HAL_PWR_EnableBkUpAccess+0x20>)
 800882c:	2201      	movs	r2, #1
 800882e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008830:	4b05      	ldr	r3, [pc, #20]	; (8008848 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008836:	687b      	ldr	r3, [r7, #4]
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	420e0020 	.word	0x420e0020
 8008848:	40007000 	.word	0x40007000

0800884c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <HAL_PWR_DisableBkUpAccess+0x20>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008858:	4b05      	ldr	r3, [pc, #20]	; (8008870 <HAL_PWR_DisableBkUpAccess+0x24>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800885e:	687b      	ldr	r3, [r7, #4]
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	420e0020 	.word	0x420e0020
 8008870:	40007000 	.word	0x40007000

08008874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e267      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d075      	beq.n	800897e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008892:	4b88      	ldr	r3, [pc, #544]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f003 030c 	and.w	r3, r3, #12
 800889a:	2b04      	cmp	r3, #4
 800889c:	d00c      	beq.n	80088b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800889e:	4b85      	ldr	r3, [pc, #532]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d112      	bne.n	80088d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088aa:	4b82      	ldr	r3, [pc, #520]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088b6:	d10b      	bne.n	80088d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088b8:	4b7e      	ldr	r3, [pc, #504]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d05b      	beq.n	800897c <HAL_RCC_OscConfig+0x108>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d157      	bne.n	800897c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e242      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d8:	d106      	bne.n	80088e8 <HAL_RCC_OscConfig+0x74>
 80088da:	4b76      	ldr	r3, [pc, #472]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a75      	ldr	r2, [pc, #468]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80088e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	e01d      	b.n	8008924 <HAL_RCC_OscConfig+0xb0>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088f0:	d10c      	bne.n	800890c <HAL_RCC_OscConfig+0x98>
 80088f2:	4b70      	ldr	r3, [pc, #448]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a6f      	ldr	r2, [pc, #444]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80088f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	4b6d      	ldr	r3, [pc, #436]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a6c      	ldr	r2, [pc, #432]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	e00b      	b.n	8008924 <HAL_RCC_OscConfig+0xb0>
 800890c:	4b69      	ldr	r3, [pc, #420]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a68      	ldr	r2, [pc, #416]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	4b66      	ldr	r3, [pc, #408]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a65      	ldr	r2, [pc, #404]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 800891e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d013      	beq.n	8008954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800892c:	f7fe f860 	bl	80069f0 <HAL_GetTick>
 8008930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008932:	e008      	b.n	8008946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008934:	f7fe f85c 	bl	80069f0 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	2b64      	cmp	r3, #100	; 0x64
 8008940:	d901      	bls.n	8008946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e207      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008946:	4b5b      	ldr	r3, [pc, #364]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0f0      	beq.n	8008934 <HAL_RCC_OscConfig+0xc0>
 8008952:	e014      	b.n	800897e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008954:	f7fe f84c 	bl	80069f0 <HAL_GetTick>
 8008958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800895a:	e008      	b.n	800896e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800895c:	f7fe f848 	bl	80069f0 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b64      	cmp	r3, #100	; 0x64
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e1f3      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800896e:	4b51      	ldr	r3, [pc, #324]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1f0      	bne.n	800895c <HAL_RCC_OscConfig+0xe8>
 800897a:	e000      	b.n	800897e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800897c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d063      	beq.n	8008a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800898a:	4b4a      	ldr	r3, [pc, #296]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f003 030c 	and.w	r3, r3, #12
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00b      	beq.n	80089ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008996:	4b47      	ldr	r3, [pc, #284]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d11c      	bne.n	80089dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089a2:	4b44      	ldr	r3, [pc, #272]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d116      	bne.n	80089dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089ae:	4b41      	ldr	r3, [pc, #260]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <HAL_RCC_OscConfig+0x152>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d001      	beq.n	80089c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e1c7      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089c6:	4b3b      	ldr	r3, [pc, #236]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	4937      	ldr	r1, [pc, #220]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089da:	e03a      	b.n	8008a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d020      	beq.n	8008a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089e4:	4b34      	ldr	r3, [pc, #208]	; (8008ab8 <HAL_RCC_OscConfig+0x244>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ea:	f7fe f801 	bl	80069f0 <HAL_GetTick>
 80089ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089f0:	e008      	b.n	8008a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089f2:	f7fd fffd 	bl	80069f0 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d901      	bls.n	8008a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e1a8      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a04:	4b2b      	ldr	r3, [pc, #172]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0f0      	beq.n	80089f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a10:	4b28      	ldr	r3, [pc, #160]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	00db      	lsls	r3, r3, #3
 8008a1e:	4925      	ldr	r1, [pc, #148]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	600b      	str	r3, [r1, #0]
 8008a24:	e015      	b.n	8008a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a26:	4b24      	ldr	r3, [pc, #144]	; (8008ab8 <HAL_RCC_OscConfig+0x244>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2c:	f7fd ffe0 	bl	80069f0 <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a34:	f7fd ffdc 	bl	80069f0 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e187      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a46:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1f0      	bne.n	8008a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d036      	beq.n	8008acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d016      	beq.n	8008a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a66:	4b15      	ldr	r3, [pc, #84]	; (8008abc <HAL_RCC_OscConfig+0x248>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6c:	f7fd ffc0 	bl	80069f0 <HAL_GetTick>
 8008a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a72:	e008      	b.n	8008a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a74:	f7fd ffbc 	bl	80069f0 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e167      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a86:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <HAL_RCC_OscConfig+0x240>)
 8008a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0f0      	beq.n	8008a74 <HAL_RCC_OscConfig+0x200>
 8008a92:	e01b      	b.n	8008acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a94:	4b09      	ldr	r3, [pc, #36]	; (8008abc <HAL_RCC_OscConfig+0x248>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a9a:	f7fd ffa9 	bl	80069f0 <HAL_GetTick>
 8008a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008aa0:	e00e      	b.n	8008ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008aa2:	f7fd ffa5 	bl	80069f0 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d907      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e150      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
 8008ab4:	40023800 	.word	0x40023800
 8008ab8:	42470000 	.word	0x42470000
 8008abc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ac0:	4b88      	ldr	r3, [pc, #544]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1ea      	bne.n	8008aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0304 	and.w	r3, r3, #4
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8097 	beq.w	8008c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ade:	4b81      	ldr	r3, [pc, #516]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10f      	bne.n	8008b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008aea:	2300      	movs	r3, #0
 8008aec:	60bb      	str	r3, [r7, #8]
 8008aee:	4b7d      	ldr	r3, [pc, #500]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	4a7c      	ldr	r2, [pc, #496]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af8:	6413      	str	r3, [r2, #64]	; 0x40
 8008afa:	4b7a      	ldr	r3, [pc, #488]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b02:	60bb      	str	r3, [r7, #8]
 8008b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b06:	2301      	movs	r3, #1
 8008b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b0a:	4b77      	ldr	r3, [pc, #476]	; (8008ce8 <HAL_RCC_OscConfig+0x474>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d118      	bne.n	8008b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b16:	4b74      	ldr	r3, [pc, #464]	; (8008ce8 <HAL_RCC_OscConfig+0x474>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a73      	ldr	r2, [pc, #460]	; (8008ce8 <HAL_RCC_OscConfig+0x474>)
 8008b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b22:	f7fd ff65 	bl	80069f0 <HAL_GetTick>
 8008b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b28:	e008      	b.n	8008b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b2a:	f7fd ff61 	bl	80069f0 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e10c      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b3c:	4b6a      	ldr	r3, [pc, #424]	; (8008ce8 <HAL_RCC_OscConfig+0x474>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0f0      	beq.n	8008b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d106      	bne.n	8008b5e <HAL_RCC_OscConfig+0x2ea>
 8008b50:	4b64      	ldr	r3, [pc, #400]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b54:	4a63      	ldr	r2, [pc, #396]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b56:	f043 0301 	orr.w	r3, r3, #1
 8008b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b5c:	e01c      	b.n	8008b98 <HAL_RCC_OscConfig+0x324>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	2b05      	cmp	r3, #5
 8008b64:	d10c      	bne.n	8008b80 <HAL_RCC_OscConfig+0x30c>
 8008b66:	4b5f      	ldr	r3, [pc, #380]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6a:	4a5e      	ldr	r2, [pc, #376]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b6c:	f043 0304 	orr.w	r3, r3, #4
 8008b70:	6713      	str	r3, [r2, #112]	; 0x70
 8008b72:	4b5c      	ldr	r3, [pc, #368]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b76:	4a5b      	ldr	r2, [pc, #364]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b78:	f043 0301 	orr.w	r3, r3, #1
 8008b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b7e:	e00b      	b.n	8008b98 <HAL_RCC_OscConfig+0x324>
 8008b80:	4b58      	ldr	r3, [pc, #352]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b84:	4a57      	ldr	r2, [pc, #348]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b86:	f023 0301 	bic.w	r3, r3, #1
 8008b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008b8c:	4b55      	ldr	r3, [pc, #340]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b90:	4a54      	ldr	r2, [pc, #336]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008b92:	f023 0304 	bic.w	r3, r3, #4
 8008b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d015      	beq.n	8008bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ba0:	f7fd ff26 	bl	80069f0 <HAL_GetTick>
 8008ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ba6:	e00a      	b.n	8008bbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ba8:	f7fd ff22 	bl	80069f0 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e0cb      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bbe:	4b49      	ldr	r3, [pc, #292]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0ee      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x334>
 8008bca:	e014      	b.n	8008bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bcc:	f7fd ff10 	bl	80069f0 <HAL_GetTick>
 8008bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bd2:	e00a      	b.n	8008bea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bd4:	f7fd ff0c 	bl	80069f0 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d901      	bls.n	8008bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e0b5      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bea:	4b3e      	ldr	r3, [pc, #248]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1ee      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d105      	bne.n	8008c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bfc:	4b39      	ldr	r3, [pc, #228]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c00:	4a38      	ldr	r2, [pc, #224]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 80a1 	beq.w	8008d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c12:	4b34      	ldr	r3, [pc, #208]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f003 030c 	and.w	r3, r3, #12
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	d05c      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d141      	bne.n	8008caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c26:	4b31      	ldr	r3, [pc, #196]	; (8008cec <HAL_RCC_OscConfig+0x478>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c2c:	f7fd fee0 	bl	80069f0 <HAL_GetTick>
 8008c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c32:	e008      	b.n	8008c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c34:	f7fd fedc 	bl	80069f0 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d901      	bls.n	8008c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e087      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c46:	4b27      	ldr	r3, [pc, #156]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f0      	bne.n	8008c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	69da      	ldr	r2, [r3, #28]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	019b      	lsls	r3, r3, #6
 8008c62:	431a      	orrs	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c68:	085b      	lsrs	r3, r3, #1
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	041b      	lsls	r3, r3, #16
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	061b      	lsls	r3, r3, #24
 8008c76:	491b      	ldr	r1, [pc, #108]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c7c:	4b1b      	ldr	r3, [pc, #108]	; (8008cec <HAL_RCC_OscConfig+0x478>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c82:	f7fd feb5 	bl	80069f0 <HAL_GetTick>
 8008c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c88:	e008      	b.n	8008c9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c8a:	f7fd feb1 	bl	80069f0 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e05c      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c9c:	4b11      	ldr	r3, [pc, #68]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0f0      	beq.n	8008c8a <HAL_RCC_OscConfig+0x416>
 8008ca8:	e054      	b.n	8008d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008caa:	4b10      	ldr	r3, [pc, #64]	; (8008cec <HAL_RCC_OscConfig+0x478>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cb0:	f7fd fe9e 	bl	80069f0 <HAL_GetTick>
 8008cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cb6:	e008      	b.n	8008cca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cb8:	f7fd fe9a 	bl	80069f0 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e045      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cca:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <HAL_RCC_OscConfig+0x470>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f0      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x444>
 8008cd6:	e03d      	b.n	8008d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d107      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e038      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	40007000 	.word	0x40007000
 8008cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008cf0:	4b1b      	ldr	r3, [pc, #108]	; (8008d60 <HAL_RCC_OscConfig+0x4ec>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d028      	beq.n	8008d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d121      	bne.n	8008d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d11a      	bne.n	8008d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008d20:	4013      	ands	r3, r2
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d111      	bne.n	8008d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	085b      	lsrs	r3, r3, #1
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d001      	beq.n	8008d54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	40023800 	.word	0x40023800

08008d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e0cc      	b.n	8008f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d78:	4b68      	ldr	r3, [pc, #416]	; (8008f1c <HAL_RCC_ClockConfig+0x1b8>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0307 	and.w	r3, r3, #7
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d90c      	bls.n	8008da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d86:	4b65      	ldr	r3, [pc, #404]	; (8008f1c <HAL_RCC_ClockConfig+0x1b8>)
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d8e:	4b63      	ldr	r3, [pc, #396]	; (8008f1c <HAL_RCC_ClockConfig+0x1b8>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d001      	beq.n	8008da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e0b8      	b.n	8008f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d020      	beq.n	8008dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d005      	beq.n	8008dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008db8:	4b59      	ldr	r3, [pc, #356]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	4a58      	ldr	r2, [pc, #352]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0308 	and.w	r3, r3, #8
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008dd0:	4b53      	ldr	r3, [pc, #332]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	4a52      	ldr	r2, [pc, #328]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ddc:	4b50      	ldr	r3, [pc, #320]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	494d      	ldr	r1, [pc, #308]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d044      	beq.n	8008e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d107      	bne.n	8008e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e02:	4b47      	ldr	r3, [pc, #284]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d119      	bne.n	8008e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e07f      	b.n	8008f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d003      	beq.n	8008e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d107      	bne.n	8008e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e22:	4b3f      	ldr	r3, [pc, #252]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d109      	bne.n	8008e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e06f      	b.n	8008f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e32:	4b3b      	ldr	r3, [pc, #236]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e067      	b.n	8008f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e42:	4b37      	ldr	r3, [pc, #220]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f023 0203 	bic.w	r2, r3, #3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4934      	ldr	r1, [pc, #208]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e54:	f7fd fdcc 	bl	80069f0 <HAL_GetTick>
 8008e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e5a:	e00a      	b.n	8008e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e5c:	f7fd fdc8 	bl	80069f0 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d901      	bls.n	8008e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e04f      	b.n	8008f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e72:	4b2b      	ldr	r3, [pc, #172]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 020c 	and.w	r2, r3, #12
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d1eb      	bne.n	8008e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e84:	4b25      	ldr	r3, [pc, #148]	; (8008f1c <HAL_RCC_ClockConfig+0x1b8>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d20c      	bcs.n	8008eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e92:	4b22      	ldr	r3, [pc, #136]	; (8008f1c <HAL_RCC_ClockConfig+0x1b8>)
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e9a:	4b20      	ldr	r3, [pc, #128]	; (8008f1c <HAL_RCC_ClockConfig+0x1b8>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d001      	beq.n	8008eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e032      	b.n	8008f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d008      	beq.n	8008eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008eb8:	4b19      	ldr	r3, [pc, #100]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	4916      	ldr	r1, [pc, #88]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d009      	beq.n	8008eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ed6:	4b12      	ldr	r3, [pc, #72]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	490e      	ldr	r1, [pc, #56]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008eea:	f000 f821 	bl	8008f30 <HAL_RCC_GetSysClockFreq>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	091b      	lsrs	r3, r3, #4
 8008ef6:	f003 030f 	and.w	r3, r3, #15
 8008efa:	490a      	ldr	r1, [pc, #40]	; (8008f24 <HAL_RCC_ClockConfig+0x1c0>)
 8008efc:	5ccb      	ldrb	r3, [r1, r3]
 8008efe:	fa22 f303 	lsr.w	r3, r2, r3
 8008f02:	4a09      	ldr	r2, [pc, #36]	; (8008f28 <HAL_RCC_ClockConfig+0x1c4>)
 8008f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f06:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <HAL_RCC_ClockConfig+0x1c8>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fd fc32 	bl	8006774 <HAL_InitTick>

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	40023c00 	.word	0x40023c00
 8008f20:	40023800 	.word	0x40023800
 8008f24:	0800fe0c 	.word	0x0800fe0c
 8008f28:	20000144 	.word	0x20000144
 8008f2c:	20000148 	.word	0x20000148

08008f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f34:	b090      	sub	sp, #64	; 0x40
 8008f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f40:	2300      	movs	r3, #0
 8008f42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f48:	4b59      	ldr	r3, [pc, #356]	; (80090b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f003 030c 	and.w	r3, r3, #12
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	d00d      	beq.n	8008f70 <HAL_RCC_GetSysClockFreq+0x40>
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	f200 80a1 	bhi.w	800909c <HAL_RCC_GetSysClockFreq+0x16c>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <HAL_RCC_GetSysClockFreq+0x34>
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d003      	beq.n	8008f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8008f62:	e09b      	b.n	800909c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f64:	4b53      	ldr	r3, [pc, #332]	; (80090b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008f66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008f68:	e09b      	b.n	80090a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f6a:	4b53      	ldr	r3, [pc, #332]	; (80090b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008f6e:	e098      	b.n	80090a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f70:	4b4f      	ldr	r3, [pc, #316]	; (80090b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f7a:	4b4d      	ldr	r3, [pc, #308]	; (80090b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d028      	beq.n	8008fd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f86:	4b4a      	ldr	r3, [pc, #296]	; (80090b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	099b      	lsrs	r3, r3, #6
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	623b      	str	r3, [r7, #32]
 8008f90:	627a      	str	r2, [r7, #36]	; 0x24
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008f98:	2100      	movs	r1, #0
 8008f9a:	4b47      	ldr	r3, [pc, #284]	; (80090b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008f9c:	fb03 f201 	mul.w	r2, r3, r1
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	fb00 f303 	mul.w	r3, r0, r3
 8008fa6:	4413      	add	r3, r2
 8008fa8:	4a43      	ldr	r2, [pc, #268]	; (80090b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008faa:	fba0 1202 	umull	r1, r2, r0, r2
 8008fae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fb0:	460a      	mov	r2, r1
 8008fb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8008fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fb6:	4413      	add	r3, r2
 8008fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	61bb      	str	r3, [r7, #24]
 8008fc0:	61fa      	str	r2, [r7, #28]
 8008fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008fca:	f7f7 fe17 	bl	8000bfc <__aeabi_uldivmod>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fd6:	e053      	b.n	8009080 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fd8:	4b35      	ldr	r3, [pc, #212]	; (80090b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	099b      	lsrs	r3, r3, #6
 8008fde:	2200      	movs	r2, #0
 8008fe0:	613b      	str	r3, [r7, #16]
 8008fe2:	617a      	str	r2, [r7, #20]
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008fea:	f04f 0b00 	mov.w	fp, #0
 8008fee:	4652      	mov	r2, sl
 8008ff0:	465b      	mov	r3, fp
 8008ff2:	f04f 0000 	mov.w	r0, #0
 8008ff6:	f04f 0100 	mov.w	r1, #0
 8008ffa:	0159      	lsls	r1, r3, #5
 8008ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009000:	0150      	lsls	r0, r2, #5
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	ebb2 080a 	subs.w	r8, r2, sl
 800900a:	eb63 090b 	sbc.w	r9, r3, fp
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	f04f 0300 	mov.w	r3, #0
 8009016:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800901a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800901e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009022:	ebb2 0408 	subs.w	r4, r2, r8
 8009026:	eb63 0509 	sbc.w	r5, r3, r9
 800902a:	f04f 0200 	mov.w	r2, #0
 800902e:	f04f 0300 	mov.w	r3, #0
 8009032:	00eb      	lsls	r3, r5, #3
 8009034:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009038:	00e2      	lsls	r2, r4, #3
 800903a:	4614      	mov	r4, r2
 800903c:	461d      	mov	r5, r3
 800903e:	eb14 030a 	adds.w	r3, r4, sl
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	eb45 030b 	adc.w	r3, r5, fp
 8009048:	607b      	str	r3, [r7, #4]
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009056:	4629      	mov	r1, r5
 8009058:	028b      	lsls	r3, r1, #10
 800905a:	4621      	mov	r1, r4
 800905c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009060:	4621      	mov	r1, r4
 8009062:	028a      	lsls	r2, r1, #10
 8009064:	4610      	mov	r0, r2
 8009066:	4619      	mov	r1, r3
 8009068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906a:	2200      	movs	r2, #0
 800906c:	60bb      	str	r3, [r7, #8]
 800906e:	60fa      	str	r2, [r7, #12]
 8009070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009074:	f7f7 fdc2 	bl	8000bfc <__aeabi_uldivmod>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4613      	mov	r3, r2
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009080:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	0c1b      	lsrs	r3, r3, #16
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	3301      	adds	r3, #1
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009090:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	fbb2 f3f3 	udiv	r3, r2, r3
 8009098:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800909a:	e002      	b.n	80090a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800909e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80090a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3740      	adds	r7, #64	; 0x40
 80090a8:	46bd      	mov	sp, r7
 80090aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090ae:	bf00      	nop
 80090b0:	40023800 	.word	0x40023800
 80090b4:	00f42400 	.word	0x00f42400
 80090b8:	017d7840 	.word	0x017d7840

080090bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090c0:	4b03      	ldr	r3, [pc, #12]	; (80090d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80090c2:	681b      	ldr	r3, [r3, #0]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	20000144 	.word	0x20000144

080090d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80090d8:	f7ff fff0 	bl	80090bc <HAL_RCC_GetHCLKFreq>
 80090dc:	4602      	mov	r2, r0
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	0a9b      	lsrs	r3, r3, #10
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	4903      	ldr	r1, [pc, #12]	; (80090f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090ea:	5ccb      	ldrb	r3, [r1, r3]
 80090ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	40023800 	.word	0x40023800
 80090f8:	0800fe1c 	.word	0x0800fe1c

080090fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009100:	f7ff ffdc 	bl	80090bc <HAL_RCC_GetHCLKFreq>
 8009104:	4602      	mov	r2, r0
 8009106:	4b05      	ldr	r3, [pc, #20]	; (800911c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	0b5b      	lsrs	r3, r3, #13
 800910c:	f003 0307 	and.w	r3, r3, #7
 8009110:	4903      	ldr	r1, [pc, #12]	; (8009120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009112:	5ccb      	ldrb	r3, [r1, r3]
 8009114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009118:	4618      	mov	r0, r3
 800911a:	bd80      	pop	{r7, pc}
 800911c:	40023800 	.word	0x40023800
 8009120:	0800fe1c 	.word	0x0800fe1c

08009124 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	220f      	movs	r2, #15
 8009132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009134:	4b12      	ldr	r3, [pc, #72]	; (8009180 <HAL_RCC_GetClockConfig+0x5c>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f003 0203 	and.w	r2, r3, #3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009140:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <HAL_RCC_GetClockConfig+0x5c>)
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800914c:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <HAL_RCC_GetClockConfig+0x5c>)
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009158:	4b09      	ldr	r3, [pc, #36]	; (8009180 <HAL_RCC_GetClockConfig+0x5c>)
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	08db      	lsrs	r3, r3, #3
 800915e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009166:	4b07      	ldr	r3, [pc, #28]	; (8009184 <HAL_RCC_GetClockConfig+0x60>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0207 	and.w	r2, r3, #7
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	601a      	str	r2, [r3, #0]
}
 8009172:	bf00      	nop
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	40023800 	.word	0x40023800
 8009184:	40023c00 	.word	0x40023c00

08009188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e041      	b.n	800921e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7fd f936 	bl	8006420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f001 f91c 	bl	800a404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b01      	cmp	r3, #1
 800923a:	d001      	beq.n	8009240 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e046      	b.n	80092ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a23      	ldr	r2, [pc, #140]	; (80092dc <HAL_TIM_Base_Start+0xb4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d022      	beq.n	8009298 <HAL_TIM_Base_Start+0x70>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925a:	d01d      	beq.n	8009298 <HAL_TIM_Base_Start+0x70>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a1f      	ldr	r2, [pc, #124]	; (80092e0 <HAL_TIM_Base_Start+0xb8>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d018      	beq.n	8009298 <HAL_TIM_Base_Start+0x70>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a1e      	ldr	r2, [pc, #120]	; (80092e4 <HAL_TIM_Base_Start+0xbc>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d013      	beq.n	8009298 <HAL_TIM_Base_Start+0x70>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a1c      	ldr	r2, [pc, #112]	; (80092e8 <HAL_TIM_Base_Start+0xc0>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d00e      	beq.n	8009298 <HAL_TIM_Base_Start+0x70>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a1b      	ldr	r2, [pc, #108]	; (80092ec <HAL_TIM_Base_Start+0xc4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d009      	beq.n	8009298 <HAL_TIM_Base_Start+0x70>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a19      	ldr	r2, [pc, #100]	; (80092f0 <HAL_TIM_Base_Start+0xc8>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d004      	beq.n	8009298 <HAL_TIM_Base_Start+0x70>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a18      	ldr	r2, [pc, #96]	; (80092f4 <HAL_TIM_Base_Start+0xcc>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d111      	bne.n	80092bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f003 0307 	and.w	r3, r3, #7
 80092a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b06      	cmp	r3, #6
 80092a8:	d010      	beq.n	80092cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 0201 	orr.w	r2, r2, #1
 80092b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ba:	e007      	b.n	80092cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	40010000 	.word	0x40010000
 80092e0:	40000400 	.word	0x40000400
 80092e4:	40000800 	.word	0x40000800
 80092e8:	40000c00 	.word	0x40000c00
 80092ec:	40010400 	.word	0x40010400
 80092f0:	40014000 	.word	0x40014000
 80092f4:	40001800 	.word	0x40001800

080092f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b01      	cmp	r3, #1
 800930a:	d001      	beq.n	8009310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e04e      	b.n	80093ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68da      	ldr	r2, [r3, #12]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a23      	ldr	r2, [pc, #140]	; (80093bc <HAL_TIM_Base_Start_IT+0xc4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d022      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x80>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800933a:	d01d      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x80>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a1f      	ldr	r2, [pc, #124]	; (80093c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d018      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x80>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a1e      	ldr	r2, [pc, #120]	; (80093c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d013      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x80>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a1c      	ldr	r2, [pc, #112]	; (80093c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d00e      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x80>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a1b      	ldr	r2, [pc, #108]	; (80093cc <HAL_TIM_Base_Start_IT+0xd4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d009      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x80>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a19      	ldr	r2, [pc, #100]	; (80093d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d004      	beq.n	8009378 <HAL_TIM_Base_Start_IT+0x80>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a18      	ldr	r2, [pc, #96]	; (80093d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d111      	bne.n	800939c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b06      	cmp	r3, #6
 8009388:	d010      	beq.n	80093ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f042 0201 	orr.w	r2, r2, #1
 8009398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800939a:	e007      	b.n	80093ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0201 	orr.w	r2, r2, #1
 80093aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	40010000 	.word	0x40010000
 80093c0:	40000400 	.word	0x40000400
 80093c4:	40000800 	.word	0x40000800
 80093c8:	40000c00 	.word	0x40000c00
 80093cc:	40010400 	.word	0x40010400
 80093d0:	40014000 	.word	0x40014000
 80093d4:	40001800 	.word	0x40001800

080093d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e041      	b.n	800946e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f839 	bl	8009476 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3304      	adds	r3, #4
 8009414:	4619      	mov	r1, r3
 8009416:	4610      	mov	r0, r2
 8009418:	f000 fff4 	bl	800a404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d109      	bne.n	80094b0 <HAL_TIM_PWM_Start+0x24>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	bf14      	ite	ne
 80094a8:	2301      	movne	r3, #1
 80094aa:	2300      	moveq	r3, #0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	e022      	b.n	80094f6 <HAL_TIM_PWM_Start+0x6a>
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d109      	bne.n	80094ca <HAL_TIM_PWM_Start+0x3e>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b01      	cmp	r3, #1
 80094c0:	bf14      	ite	ne
 80094c2:	2301      	movne	r3, #1
 80094c4:	2300      	moveq	r3, #0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	e015      	b.n	80094f6 <HAL_TIM_PWM_Start+0x6a>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d109      	bne.n	80094e4 <HAL_TIM_PWM_Start+0x58>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b01      	cmp	r3, #1
 80094da:	bf14      	ite	ne
 80094dc:	2301      	movne	r3, #1
 80094de:	2300      	moveq	r3, #0
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	e008      	b.n	80094f6 <HAL_TIM_PWM_Start+0x6a>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	bf14      	ite	ne
 80094f0:	2301      	movne	r3, #1
 80094f2:	2300      	moveq	r3, #0
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e07c      	b.n	80095f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d104      	bne.n	800950e <HAL_TIM_PWM_Start+0x82>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800950c:	e013      	b.n	8009536 <HAL_TIM_PWM_Start+0xaa>
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b04      	cmp	r3, #4
 8009512:	d104      	bne.n	800951e <HAL_TIM_PWM_Start+0x92>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800951c:	e00b      	b.n	8009536 <HAL_TIM_PWM_Start+0xaa>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b08      	cmp	r3, #8
 8009522:	d104      	bne.n	800952e <HAL_TIM_PWM_Start+0xa2>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800952c:	e003      	b.n	8009536 <HAL_TIM_PWM_Start+0xaa>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2202      	movs	r2, #2
 8009532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2201      	movs	r2, #1
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	f001 fb74 	bl	800ac2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a2d      	ldr	r2, [pc, #180]	; (8009600 <HAL_TIM_PWM_Start+0x174>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d004      	beq.n	8009558 <HAL_TIM_PWM_Start+0xcc>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a2c      	ldr	r2, [pc, #176]	; (8009604 <HAL_TIM_PWM_Start+0x178>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d101      	bne.n	800955c <HAL_TIM_PWM_Start+0xd0>
 8009558:	2301      	movs	r3, #1
 800955a:	e000      	b.n	800955e <HAL_TIM_PWM_Start+0xd2>
 800955c:	2300      	movs	r3, #0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d007      	beq.n	8009572 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009570:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a22      	ldr	r2, [pc, #136]	; (8009600 <HAL_TIM_PWM_Start+0x174>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d022      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x136>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009584:	d01d      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x136>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a1f      	ldr	r2, [pc, #124]	; (8009608 <HAL_TIM_PWM_Start+0x17c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d018      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x136>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a1d      	ldr	r2, [pc, #116]	; (800960c <HAL_TIM_PWM_Start+0x180>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d013      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x136>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a1c      	ldr	r2, [pc, #112]	; (8009610 <HAL_TIM_PWM_Start+0x184>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d00e      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x136>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a16      	ldr	r2, [pc, #88]	; (8009604 <HAL_TIM_PWM_Start+0x178>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d009      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x136>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a18      	ldr	r2, [pc, #96]	; (8009614 <HAL_TIM_PWM_Start+0x188>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d004      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x136>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a16      	ldr	r2, [pc, #88]	; (8009618 <HAL_TIM_PWM_Start+0x18c>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d111      	bne.n	80095e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b06      	cmp	r3, #6
 80095d2:	d010      	beq.n	80095f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f042 0201 	orr.w	r2, r2, #1
 80095e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e4:	e007      	b.n	80095f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f042 0201 	orr.w	r2, r2, #1
 80095f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	40010000 	.word	0x40010000
 8009604:	40010400 	.word	0x40010400
 8009608:	40000400 	.word	0x40000400
 800960c:	40000800 	.word	0x40000800
 8009610:	40000c00 	.word	0x40000c00
 8009614:	40014000 	.word	0x40014000
 8009618:	40001800 	.word	0x40001800

0800961c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e041      	b.n	80096b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f839 	bl	80096ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f000 fed2 	bl	800a404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
	...

080096d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d104      	bne.n	80096ee <HAL_TIM_IC_Start_IT+0x1e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	e013      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x46>
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d104      	bne.n	80096fe <HAL_TIM_IC_Start_IT+0x2e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	e00b      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x46>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b08      	cmp	r3, #8
 8009702:	d104      	bne.n	800970e <HAL_TIM_IC_Start_IT+0x3e>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800970a:	b2db      	uxtb	r3, r3
 800970c:	e003      	b.n	8009716 <HAL_TIM_IC_Start_IT+0x46>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009714:	b2db      	uxtb	r3, r3
 8009716:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <HAL_TIM_IC_Start_IT+0x58>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009724:	b2db      	uxtb	r3, r3
 8009726:	e013      	b.n	8009750 <HAL_TIM_IC_Start_IT+0x80>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b04      	cmp	r3, #4
 800972c:	d104      	bne.n	8009738 <HAL_TIM_IC_Start_IT+0x68>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009734:	b2db      	uxtb	r3, r3
 8009736:	e00b      	b.n	8009750 <HAL_TIM_IC_Start_IT+0x80>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b08      	cmp	r3, #8
 800973c:	d104      	bne.n	8009748 <HAL_TIM_IC_Start_IT+0x78>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009744:	b2db      	uxtb	r3, r3
 8009746:	e003      	b.n	8009750 <HAL_TIM_IC_Start_IT+0x80>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800974e:	b2db      	uxtb	r3, r3
 8009750:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d102      	bne.n	800975e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009758:	7b7b      	ldrb	r3, [r7, #13]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d001      	beq.n	8009762 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e0cc      	b.n	80098fc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <HAL_TIM_IC_Start_IT+0xa2>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009770:	e013      	b.n	800979a <HAL_TIM_IC_Start_IT+0xca>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b04      	cmp	r3, #4
 8009776:	d104      	bne.n	8009782 <HAL_TIM_IC_Start_IT+0xb2>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009780:	e00b      	b.n	800979a <HAL_TIM_IC_Start_IT+0xca>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b08      	cmp	r3, #8
 8009786:	d104      	bne.n	8009792 <HAL_TIM_IC_Start_IT+0xc2>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009790:	e003      	b.n	800979a <HAL_TIM_IC_Start_IT+0xca>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2202      	movs	r2, #2
 8009796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <HAL_TIM_IC_Start_IT+0xda>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097a8:	e013      	b.n	80097d2 <HAL_TIM_IC_Start_IT+0x102>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d104      	bne.n	80097ba <HAL_TIM_IC_Start_IT+0xea>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097b8:	e00b      	b.n	80097d2 <HAL_TIM_IC_Start_IT+0x102>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d104      	bne.n	80097ca <HAL_TIM_IC_Start_IT+0xfa>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c8:	e003      	b.n	80097d2 <HAL_TIM_IC_Start_IT+0x102>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2202      	movs	r2, #2
 80097ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b0c      	cmp	r3, #12
 80097d6:	d841      	bhi.n	800985c <HAL_TIM_IC_Start_IT+0x18c>
 80097d8:	a201      	add	r2, pc, #4	; (adr r2, 80097e0 <HAL_TIM_IC_Start_IT+0x110>)
 80097da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097de:	bf00      	nop
 80097e0:	08009815 	.word	0x08009815
 80097e4:	0800985d 	.word	0x0800985d
 80097e8:	0800985d 	.word	0x0800985d
 80097ec:	0800985d 	.word	0x0800985d
 80097f0:	08009827 	.word	0x08009827
 80097f4:	0800985d 	.word	0x0800985d
 80097f8:	0800985d 	.word	0x0800985d
 80097fc:	0800985d 	.word	0x0800985d
 8009800:	08009839 	.word	0x08009839
 8009804:	0800985d 	.word	0x0800985d
 8009808:	0800985d 	.word	0x0800985d
 800980c:	0800985d 	.word	0x0800985d
 8009810:	0800984b 	.word	0x0800984b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0202 	orr.w	r2, r2, #2
 8009822:	60da      	str	r2, [r3, #12]
      break;
 8009824:	e01d      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f042 0204 	orr.w	r2, r2, #4
 8009834:	60da      	str	r2, [r3, #12]
      break;
 8009836:	e014      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f042 0208 	orr.w	r2, r2, #8
 8009846:	60da      	str	r2, [r3, #12]
      break;
 8009848:	e00b      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68da      	ldr	r2, [r3, #12]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0210 	orr.w	r2, r2, #16
 8009858:	60da      	str	r2, [r3, #12]
      break;
 800985a:	e002      	b.n	8009862 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	73fb      	strb	r3, [r7, #15]
      break;
 8009860:	bf00      	nop
  }

  if (status == HAL_OK)
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d148      	bne.n	80098fa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2201      	movs	r2, #1
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	4618      	mov	r0, r3
 8009872:	f001 f9db 	bl	800ac2c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a22      	ldr	r2, [pc, #136]	; (8009904 <HAL_TIM_IC_Start_IT+0x234>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d022      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009888:	d01d      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a1e      	ldr	r2, [pc, #120]	; (8009908 <HAL_TIM_IC_Start_IT+0x238>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d018      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a1c      	ldr	r2, [pc, #112]	; (800990c <HAL_TIM_IC_Start_IT+0x23c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d013      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a1b      	ldr	r2, [pc, #108]	; (8009910 <HAL_TIM_IC_Start_IT+0x240>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d00e      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a19      	ldr	r2, [pc, #100]	; (8009914 <HAL_TIM_IC_Start_IT+0x244>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d009      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a18      	ldr	r2, [pc, #96]	; (8009918 <HAL_TIM_IC_Start_IT+0x248>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d004      	beq.n	80098c6 <HAL_TIM_IC_Start_IT+0x1f6>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a16      	ldr	r2, [pc, #88]	; (800991c <HAL_TIM_IC_Start_IT+0x24c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d111      	bne.n	80098ea <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	f003 0307 	and.w	r3, r3, #7
 80098d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b06      	cmp	r3, #6
 80098d6:	d010      	beq.n	80098fa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0201 	orr.w	r2, r2, #1
 80098e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e8:	e007      	b.n	80098fa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0201 	orr.w	r2, r2, #1
 80098f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	40010000 	.word	0x40010000
 8009908:	40000400 	.word	0x40000400
 800990c:	40000800 	.word	0x40000800
 8009910:	40000c00 	.word	0x40000c00
 8009914:	40010400 	.word	0x40010400
 8009918:	40014000 	.word	0x40014000
 800991c:	40001800 	.word	0x40001800

08009920 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b0c      	cmp	r3, #12
 8009932:	d841      	bhi.n	80099b8 <HAL_TIM_IC_Stop_IT+0x98>
 8009934:	a201      	add	r2, pc, #4	; (adr r2, 800993c <HAL_TIM_IC_Stop_IT+0x1c>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	08009971 	.word	0x08009971
 8009940:	080099b9 	.word	0x080099b9
 8009944:	080099b9 	.word	0x080099b9
 8009948:	080099b9 	.word	0x080099b9
 800994c:	08009983 	.word	0x08009983
 8009950:	080099b9 	.word	0x080099b9
 8009954:	080099b9 	.word	0x080099b9
 8009958:	080099b9 	.word	0x080099b9
 800995c:	08009995 	.word	0x08009995
 8009960:	080099b9 	.word	0x080099b9
 8009964:	080099b9 	.word	0x080099b9
 8009968:	080099b9 	.word	0x080099b9
 800996c:	080099a7 	.word	0x080099a7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0202 	bic.w	r2, r2, #2
 800997e:	60da      	str	r2, [r3, #12]
      break;
 8009980:	e01d      	b.n	80099be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68da      	ldr	r2, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f022 0204 	bic.w	r2, r2, #4
 8009990:	60da      	str	r2, [r3, #12]
      break;
 8009992:	e014      	b.n	80099be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68da      	ldr	r2, [r3, #12]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f022 0208 	bic.w	r2, r2, #8
 80099a2:	60da      	str	r2, [r3, #12]
      break;
 80099a4:	e00b      	b.n	80099be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0210 	bic.w	r2, r2, #16
 80099b4:	60da      	str	r2, [r3, #12]
      break;
 80099b6:	e002      	b.n	80099be <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	73fb      	strb	r3, [r7, #15]
      break;
 80099bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d156      	bne.n	8009a72 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2200      	movs	r2, #0
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 f92d 	bl	800ac2c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6a1a      	ldr	r2, [r3, #32]
 80099d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80099dc:	4013      	ands	r3, r2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10f      	bne.n	8009a02 <HAL_TIM_IC_Stop_IT+0xe2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6a1a      	ldr	r2, [r3, #32]
 80099e8:	f240 4344 	movw	r3, #1092	; 0x444
 80099ec:	4013      	ands	r3, r2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d107      	bne.n	8009a02 <HAL_TIM_IC_Stop_IT+0xe2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0201 	bic.w	r2, r2, #1
 8009a00:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d104      	bne.n	8009a12 <HAL_TIM_IC_Stop_IT+0xf2>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a10:	e013      	b.n	8009a3a <HAL_TIM_IC_Stop_IT+0x11a>
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d104      	bne.n	8009a22 <HAL_TIM_IC_Stop_IT+0x102>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a20:	e00b      	b.n	8009a3a <HAL_TIM_IC_Stop_IT+0x11a>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d104      	bne.n	8009a32 <HAL_TIM_IC_Stop_IT+0x112>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a30:	e003      	b.n	8009a3a <HAL_TIM_IC_Stop_IT+0x11a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d104      	bne.n	8009a4a <HAL_TIM_IC_Stop_IT+0x12a>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a48:	e013      	b.n	8009a72 <HAL_TIM_IC_Stop_IT+0x152>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d104      	bne.n	8009a5a <HAL_TIM_IC_Stop_IT+0x13a>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a58:	e00b      	b.n	8009a72 <HAL_TIM_IC_Stop_IT+0x152>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b08      	cmp	r3, #8
 8009a5e:	d104      	bne.n	8009a6a <HAL_TIM_IC_Stop_IT+0x14a>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a68:	e003      	b.n	8009a72 <HAL_TIM_IC_Stop_IT+0x152>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b086      	sub	sp, #24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e097      	b.n	8009bc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d106      	bne.n	8009aaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7fc fd75 	bl	8006594 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2202      	movs	r2, #2
 8009aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6812      	ldr	r2, [r2, #0]
 8009abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ac0:	f023 0307 	bic.w	r3, r3, #7
 8009ac4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f000 fc97 	bl	800a404 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009afe:	f023 0303 	bic.w	r3, r3, #3
 8009b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	021b      	lsls	r3, r3, #8
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009b1c:	f023 030c 	bic.w	r3, r3, #12
 8009b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	021b      	lsls	r3, r3, #8
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	011a      	lsls	r2, r3, #4
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	031b      	lsls	r3, r3, #12
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009b5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	011b      	lsls	r3, r3, #4
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009be0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009be8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009bf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d110      	bne.n	8009c1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d102      	bne.n	8009c04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009bfe:	7b7b      	ldrb	r3, [r7, #13]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d001      	beq.n	8009c08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e069      	b.n	8009cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c18:	e031      	b.n	8009c7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d110      	bne.n	8009c42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d102      	bne.n	8009c2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c26:	7b3b      	ldrb	r3, [r7, #12]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d001      	beq.n	8009c30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e055      	b.n	8009cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c40:	e01d      	b.n	8009c7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d108      	bne.n	8009c5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d105      	bne.n	8009c5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c4e:	7b7b      	ldrb	r3, [r7, #13]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d102      	bne.n	8009c5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c54:	7b3b      	ldrb	r3, [r7, #12]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d001      	beq.n	8009c5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e03e      	b.n	8009cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2202      	movs	r2, #2
 8009c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2202      	movs	r2, #2
 8009c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <HAL_TIM_Encoder_Start+0xc4>
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	d008      	beq.n	8009c9c <HAL_TIM_Encoder_Start+0xd4>
 8009c8a:	e00f      	b.n	8009cac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2201      	movs	r2, #1
 8009c92:	2100      	movs	r1, #0
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 ffc9 	bl	800ac2c <TIM_CCxChannelCmd>
      break;
 8009c9a:	e016      	b.n	8009cca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	2104      	movs	r1, #4
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 ffc1 	bl	800ac2c <TIM_CCxChannelCmd>
      break;
 8009caa:	e00e      	b.n	8009cca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 ffb9 	bl	800ac2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	2104      	movs	r1, #4
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 ffb2 	bl	800ac2c <TIM_CCxChannelCmd>
      break;
 8009cc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f042 0201 	orr.w	r2, r2, #1
 8009cd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d122      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d11b      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f06f 0202 	mvn.w	r2, #2
 8009d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	f003 0303 	and.w	r3, r3, #3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7f7 fe96 	bl	8001a58 <HAL_TIM_IC_CaptureCallback>
 8009d2c:	e005      	b.n	8009d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fb4a 	bl	800a3c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fb51 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f003 0304 	and.w	r3, r3, #4
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d122      	bne.n	8009d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b04      	cmp	r3, #4
 8009d5a:	d11b      	bne.n	8009d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f06f 0204 	mvn.w	r2, #4
 8009d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7f7 fe6c 	bl	8001a58 <HAL_TIM_IC_CaptureCallback>
 8009d80:	e005      	b.n	8009d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fb20 	bl	800a3c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fb27 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f003 0308 	and.w	r3, r3, #8
 8009d9e:	2b08      	cmp	r3, #8
 8009da0:	d122      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f003 0308 	and.w	r3, r3, #8
 8009dac:	2b08      	cmp	r3, #8
 8009dae:	d11b      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f06f 0208 	mvn.w	r2, #8
 8009db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7f7 fe42 	bl	8001a58 <HAL_TIM_IC_CaptureCallback>
 8009dd4:	e005      	b.n	8009de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 faf6 	bl	800a3c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fafd 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	f003 0310 	and.w	r3, r3, #16
 8009df2:	2b10      	cmp	r3, #16
 8009df4:	d122      	bne.n	8009e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	f003 0310 	and.w	r3, r3, #16
 8009e00:	2b10      	cmp	r3, #16
 8009e02:	d11b      	bne.n	8009e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f06f 0210 	mvn.w	r2, #16
 8009e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2208      	movs	r2, #8
 8009e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7f7 fe18 	bl	8001a58 <HAL_TIM_IC_CaptureCallback>
 8009e28:	e005      	b.n	8009e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 facc 	bl	800a3c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fad3 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d10e      	bne.n	8009e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d107      	bne.n	8009e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f06f 0201 	mvn.w	r2, #1
 8009e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7fc f9dc 	bl	8006220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e72:	2b80      	cmp	r3, #128	; 0x80
 8009e74:	d10e      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e80:	2b80      	cmp	r3, #128	; 0x80
 8009e82:	d107      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 ffca 	bl	800ae28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e9e:	2b40      	cmp	r3, #64	; 0x40
 8009ea0:	d10e      	bne.n	8009ec0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eac:	2b40      	cmp	r3, #64	; 0x40
 8009eae:	d107      	bne.n	8009ec0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa98 	bl	800a3f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	f003 0320 	and.w	r3, r3, #32
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	d10e      	bne.n	8009eec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	f003 0320 	and.w	r3, r3, #32
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	d107      	bne.n	8009eec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f06f 0220 	mvn.w	r2, #32
 8009ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 ff94 	bl	800ae14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d101      	bne.n	8009f12 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e088      	b.n	800a024 <HAL_TIM_IC_ConfigChannel+0x130>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d11b      	bne.n	8009f58 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	6819      	ldr	r1, [r3, #0]
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f000 fcb8 	bl	800a8a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	699a      	ldr	r2, [r3, #24]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f022 020c 	bic.w	r2, r2, #12
 8009f42:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6999      	ldr	r1, [r3, #24]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	689a      	ldr	r2, [r3, #8]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	619a      	str	r2, [r3, #24]
 8009f56:	e060      	b.n	800a01a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	d11c      	bne.n	8009f98 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6818      	ldr	r0, [r3, #0]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6819      	ldr	r1, [r3, #0]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	f000 fd3c 	bl	800a9ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	699a      	ldr	r2, [r3, #24]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f80:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6999      	ldr	r1, [r3, #24]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	021a      	lsls	r2, r3, #8
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	619a      	str	r2, [r3, #24]
 8009f96:	e040      	b.n	800a01a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b08      	cmp	r3, #8
 8009f9c:	d11b      	bne.n	8009fd6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6818      	ldr	r0, [r3, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	6819      	ldr	r1, [r3, #0]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	f000 fd89 	bl	800aac4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 020c 	bic.w	r2, r2, #12
 8009fc0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69d9      	ldr	r1, [r3, #28]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	689a      	ldr	r2, [r3, #8]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	61da      	str	r2, [r3, #28]
 8009fd4:	e021      	b.n	800a01a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b0c      	cmp	r3, #12
 8009fda:	d11c      	bne.n	800a016 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6818      	ldr	r0, [r3, #0]
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	6819      	ldr	r1, [r3, #0]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f000 fda6 	bl	800ab3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69da      	ldr	r2, [r3, #28]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ffe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69d9      	ldr	r1, [r3, #28]
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	021a      	lsls	r2, r3, #8
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	61da      	str	r2, [r3, #28]
 800a014:	e001      	b.n	800a01a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a046:	2302      	movs	r3, #2
 800a048:	e0ae      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b0c      	cmp	r3, #12
 800a056:	f200 809f 	bhi.w	800a198 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a05a:	a201      	add	r2, pc, #4	; (adr r2, 800a060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a060:	0800a095 	.word	0x0800a095
 800a064:	0800a199 	.word	0x0800a199
 800a068:	0800a199 	.word	0x0800a199
 800a06c:	0800a199 	.word	0x0800a199
 800a070:	0800a0d5 	.word	0x0800a0d5
 800a074:	0800a199 	.word	0x0800a199
 800a078:	0800a199 	.word	0x0800a199
 800a07c:	0800a199 	.word	0x0800a199
 800a080:	0800a117 	.word	0x0800a117
 800a084:	0800a199 	.word	0x0800a199
 800a088:	0800a199 	.word	0x0800a199
 800a08c:	0800a199 	.word	0x0800a199
 800a090:	0800a157 	.word	0x0800a157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 fa52 	bl	800a544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699a      	ldr	r2, [r3, #24]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0208 	orr.w	r2, r2, #8
 800a0ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	699a      	ldr	r2, [r3, #24]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f022 0204 	bic.w	r2, r2, #4
 800a0be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6999      	ldr	r1, [r3, #24]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	619a      	str	r2, [r3, #24]
      break;
 800a0d2:	e064      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 faa2 	bl	800a624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	699a      	ldr	r2, [r3, #24]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	699a      	ldr	r2, [r3, #24]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6999      	ldr	r1, [r3, #24]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	021a      	lsls	r2, r3, #8
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	619a      	str	r2, [r3, #24]
      break;
 800a114:	e043      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 faf7 	bl	800a710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69da      	ldr	r2, [r3, #28]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f042 0208 	orr.w	r2, r2, #8
 800a130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69da      	ldr	r2, [r3, #28]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 0204 	bic.w	r2, r2, #4
 800a140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	69d9      	ldr	r1, [r3, #28]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	691a      	ldr	r2, [r3, #16]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	61da      	str	r2, [r3, #28]
      break;
 800a154:	e023      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 fb4b 	bl	800a7f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69da      	ldr	r2, [r3, #28]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	69da      	ldr	r2, [r3, #28]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	69d9      	ldr	r1, [r3, #28]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	021a      	lsls	r2, r3, #8
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	61da      	str	r2, [r3, #28]
      break;
 800a196:	e002      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	75fb      	strb	r3, [r7, #23]
      break;
 800a19c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3718      	adds	r7, #24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d101      	bne.n	800a1cc <HAL_TIM_ConfigClockSource+0x1c>
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	e0b4      	b.n	800a336 <HAL_TIM_ConfigClockSource+0x186>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a204:	d03e      	beq.n	800a284 <HAL_TIM_ConfigClockSource+0xd4>
 800a206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a20a:	f200 8087 	bhi.w	800a31c <HAL_TIM_ConfigClockSource+0x16c>
 800a20e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a212:	f000 8086 	beq.w	800a322 <HAL_TIM_ConfigClockSource+0x172>
 800a216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21a:	d87f      	bhi.n	800a31c <HAL_TIM_ConfigClockSource+0x16c>
 800a21c:	2b70      	cmp	r3, #112	; 0x70
 800a21e:	d01a      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0xa6>
 800a220:	2b70      	cmp	r3, #112	; 0x70
 800a222:	d87b      	bhi.n	800a31c <HAL_TIM_ConfigClockSource+0x16c>
 800a224:	2b60      	cmp	r3, #96	; 0x60
 800a226:	d050      	beq.n	800a2ca <HAL_TIM_ConfigClockSource+0x11a>
 800a228:	2b60      	cmp	r3, #96	; 0x60
 800a22a:	d877      	bhi.n	800a31c <HAL_TIM_ConfigClockSource+0x16c>
 800a22c:	2b50      	cmp	r3, #80	; 0x50
 800a22e:	d03c      	beq.n	800a2aa <HAL_TIM_ConfigClockSource+0xfa>
 800a230:	2b50      	cmp	r3, #80	; 0x50
 800a232:	d873      	bhi.n	800a31c <HAL_TIM_ConfigClockSource+0x16c>
 800a234:	2b40      	cmp	r3, #64	; 0x40
 800a236:	d058      	beq.n	800a2ea <HAL_TIM_ConfigClockSource+0x13a>
 800a238:	2b40      	cmp	r3, #64	; 0x40
 800a23a:	d86f      	bhi.n	800a31c <HAL_TIM_ConfigClockSource+0x16c>
 800a23c:	2b30      	cmp	r3, #48	; 0x30
 800a23e:	d064      	beq.n	800a30a <HAL_TIM_ConfigClockSource+0x15a>
 800a240:	2b30      	cmp	r3, #48	; 0x30
 800a242:	d86b      	bhi.n	800a31c <HAL_TIM_ConfigClockSource+0x16c>
 800a244:	2b20      	cmp	r3, #32
 800a246:	d060      	beq.n	800a30a <HAL_TIM_ConfigClockSource+0x15a>
 800a248:	2b20      	cmp	r3, #32
 800a24a:	d867      	bhi.n	800a31c <HAL_TIM_ConfigClockSource+0x16c>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d05c      	beq.n	800a30a <HAL_TIM_ConfigClockSource+0x15a>
 800a250:	2b10      	cmp	r3, #16
 800a252:	d05a      	beq.n	800a30a <HAL_TIM_ConfigClockSource+0x15a>
 800a254:	e062      	b.n	800a31c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	6899      	ldr	r1, [r3, #8]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	f000 fcc1 	bl	800abec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	609a      	str	r2, [r3, #8]
      break;
 800a282:	e04f      	b.n	800a324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6818      	ldr	r0, [r3, #0]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	6899      	ldr	r1, [r3, #8]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f000 fcaa 	bl	800abec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689a      	ldr	r2, [r3, #8]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2a6:	609a      	str	r2, [r3, #8]
      break;
 800a2a8:	e03c      	b.n	800a324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6818      	ldr	r0, [r3, #0]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	6859      	ldr	r1, [r3, #4]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f000 fb68 	bl	800a98c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2150      	movs	r1, #80	; 0x50
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f000 fc77 	bl	800abb6 <TIM_ITRx_SetConfig>
      break;
 800a2c8:	e02c      	b.n	800a324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6818      	ldr	r0, [r3, #0]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6859      	ldr	r1, [r3, #4]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	f000 fbc4 	bl	800aa64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2160      	movs	r1, #96	; 0x60
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 fc67 	bl	800abb6 <TIM_ITRx_SetConfig>
      break;
 800a2e8:	e01c      	b.n	800a324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6818      	ldr	r0, [r3, #0]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	6859      	ldr	r1, [r3, #4]
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f000 fb48 	bl	800a98c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2140      	movs	r1, #64	; 0x40
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fc57 	bl	800abb6 <TIM_ITRx_SetConfig>
      break;
 800a308:	e00c      	b.n	800a324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4619      	mov	r1, r3
 800a314:	4610      	mov	r0, r2
 800a316:	f000 fc4e 	bl	800abb6 <TIM_ITRx_SetConfig>
      break;
 800a31a:	e003      	b.n	800a324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	73fb      	strb	r3, [r7, #15]
      break;
 800a320:	e000      	b.n	800a324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a334:	7bfb      	ldrb	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b0c      	cmp	r3, #12
 800a352:	d831      	bhi.n	800a3b8 <HAL_TIM_ReadCapturedValue+0x78>
 800a354:	a201      	add	r2, pc, #4	; (adr r2, 800a35c <HAL_TIM_ReadCapturedValue+0x1c>)
 800a356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35a:	bf00      	nop
 800a35c:	0800a391 	.word	0x0800a391
 800a360:	0800a3b9 	.word	0x0800a3b9
 800a364:	0800a3b9 	.word	0x0800a3b9
 800a368:	0800a3b9 	.word	0x0800a3b9
 800a36c:	0800a39b 	.word	0x0800a39b
 800a370:	0800a3b9 	.word	0x0800a3b9
 800a374:	0800a3b9 	.word	0x0800a3b9
 800a378:	0800a3b9 	.word	0x0800a3b9
 800a37c:	0800a3a5 	.word	0x0800a3a5
 800a380:	0800a3b9 	.word	0x0800a3b9
 800a384:	0800a3b9 	.word	0x0800a3b9
 800a388:	0800a3b9 	.word	0x0800a3b9
 800a38c:	0800a3af 	.word	0x0800a3af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a396:	60fb      	str	r3, [r7, #12]

      break;
 800a398:	e00f      	b.n	800a3ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a0:	60fb      	str	r3, [r7, #12]

      break;
 800a3a2:	e00a      	b.n	800a3ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3aa:	60fb      	str	r3, [r7, #12]

      break;
 800a3ac:	e005      	b.n	800a3ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b4:	60fb      	str	r3, [r7, #12]

      break;
 800a3b6:	e000      	b.n	800a3ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a3b8:	bf00      	nop
  }

  return tmpreg;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a40      	ldr	r2, [pc, #256]	; (800a518 <TIM_Base_SetConfig+0x114>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d013      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a422:	d00f      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a3d      	ldr	r2, [pc, #244]	; (800a51c <TIM_Base_SetConfig+0x118>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d00b      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a3c      	ldr	r2, [pc, #240]	; (800a520 <TIM_Base_SetConfig+0x11c>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d007      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a3b      	ldr	r2, [pc, #236]	; (800a524 <TIM_Base_SetConfig+0x120>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d003      	beq.n	800a444 <TIM_Base_SetConfig+0x40>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a3a      	ldr	r2, [pc, #232]	; (800a528 <TIM_Base_SetConfig+0x124>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d108      	bne.n	800a456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a44a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a2f      	ldr	r2, [pc, #188]	; (800a518 <TIM_Base_SetConfig+0x114>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d02b      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a464:	d027      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a2c      	ldr	r2, [pc, #176]	; (800a51c <TIM_Base_SetConfig+0x118>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d023      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a2b      	ldr	r2, [pc, #172]	; (800a520 <TIM_Base_SetConfig+0x11c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d01f      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a2a      	ldr	r2, [pc, #168]	; (800a524 <TIM_Base_SetConfig+0x120>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d01b      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a29      	ldr	r2, [pc, #164]	; (800a528 <TIM_Base_SetConfig+0x124>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d017      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a28      	ldr	r2, [pc, #160]	; (800a52c <TIM_Base_SetConfig+0x128>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d013      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a27      	ldr	r2, [pc, #156]	; (800a530 <TIM_Base_SetConfig+0x12c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d00f      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a26      	ldr	r2, [pc, #152]	; (800a534 <TIM_Base_SetConfig+0x130>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d00b      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a25      	ldr	r2, [pc, #148]	; (800a538 <TIM_Base_SetConfig+0x134>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d007      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a24      	ldr	r2, [pc, #144]	; (800a53c <TIM_Base_SetConfig+0x138>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d003      	beq.n	800a4b6 <TIM_Base_SetConfig+0xb2>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a23      	ldr	r2, [pc, #140]	; (800a540 <TIM_Base_SetConfig+0x13c>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d108      	bne.n	800a4c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	689a      	ldr	r2, [r3, #8]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a0a      	ldr	r2, [pc, #40]	; (800a518 <TIM_Base_SetConfig+0x114>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d003      	beq.n	800a4fc <TIM_Base_SetConfig+0xf8>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a0c      	ldr	r2, [pc, #48]	; (800a528 <TIM_Base_SetConfig+0x124>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d103      	bne.n	800a504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	691a      	ldr	r2, [r3, #16]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	615a      	str	r2, [r3, #20]
}
 800a50a:	bf00      	nop
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	40010000 	.word	0x40010000
 800a51c:	40000400 	.word	0x40000400
 800a520:	40000800 	.word	0x40000800
 800a524:	40000c00 	.word	0x40000c00
 800a528:	40010400 	.word	0x40010400
 800a52c:	40014000 	.word	0x40014000
 800a530:	40014400 	.word	0x40014400
 800a534:	40014800 	.word	0x40014800
 800a538:	40001800 	.word	0x40001800
 800a53c:	40001c00 	.word	0x40001c00
 800a540:	40002000 	.word	0x40002000

0800a544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	f023 0201 	bic.w	r2, r3, #1
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0303 	bic.w	r3, r3, #3
 800a57a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	4313      	orrs	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f023 0302 	bic.w	r3, r3, #2
 800a58c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	4313      	orrs	r3, r2
 800a596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a20      	ldr	r2, [pc, #128]	; (800a61c <TIM_OC1_SetConfig+0xd8>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d003      	beq.n	800a5a8 <TIM_OC1_SetConfig+0x64>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a1f      	ldr	r2, [pc, #124]	; (800a620 <TIM_OC1_SetConfig+0xdc>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d10c      	bne.n	800a5c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f023 0308 	bic.w	r3, r3, #8
 800a5ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f023 0304 	bic.w	r3, r3, #4
 800a5c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a15      	ldr	r2, [pc, #84]	; (800a61c <TIM_OC1_SetConfig+0xd8>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d003      	beq.n	800a5d2 <TIM_OC1_SetConfig+0x8e>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a14      	ldr	r2, [pc, #80]	; (800a620 <TIM_OC1_SetConfig+0xdc>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d111      	bne.n	800a5f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	621a      	str	r2, [r3, #32]
}
 800a610:	bf00      	nop
 800a612:	371c      	adds	r7, #28
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	40010000 	.word	0x40010000
 800a620:	40010400 	.word	0x40010400

0800a624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	f023 0210 	bic.w	r2, r3, #16
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f023 0320 	bic.w	r3, r3, #32
 800a66e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	011b      	lsls	r3, r3, #4
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	4313      	orrs	r3, r2
 800a67a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a22      	ldr	r2, [pc, #136]	; (800a708 <TIM_OC2_SetConfig+0xe4>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d003      	beq.n	800a68c <TIM_OC2_SetConfig+0x68>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a21      	ldr	r2, [pc, #132]	; (800a70c <TIM_OC2_SetConfig+0xe8>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d10d      	bne.n	800a6a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	011b      	lsls	r3, r3, #4
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a17      	ldr	r2, [pc, #92]	; (800a708 <TIM_OC2_SetConfig+0xe4>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d003      	beq.n	800a6b8 <TIM_OC2_SetConfig+0x94>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a16      	ldr	r2, [pc, #88]	; (800a70c <TIM_OC2_SetConfig+0xe8>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d113      	bne.n	800a6e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	621a      	str	r2, [r3, #32]
}
 800a6fa:	bf00      	nop
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	40010000 	.word	0x40010000
 800a70c:	40010400 	.word	0x40010400

0800a710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a73e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f023 0303 	bic.w	r3, r3, #3
 800a746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	021b      	lsls	r3, r3, #8
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	4313      	orrs	r3, r2
 800a764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a21      	ldr	r2, [pc, #132]	; (800a7f0 <TIM_OC3_SetConfig+0xe0>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d003      	beq.n	800a776 <TIM_OC3_SetConfig+0x66>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a20      	ldr	r2, [pc, #128]	; (800a7f4 <TIM_OC3_SetConfig+0xe4>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d10d      	bne.n	800a792 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a77c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	021b      	lsls	r3, r3, #8
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	4313      	orrs	r3, r2
 800a788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a16      	ldr	r2, [pc, #88]	; (800a7f0 <TIM_OC3_SetConfig+0xe0>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d003      	beq.n	800a7a2 <TIM_OC3_SetConfig+0x92>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a15      	ldr	r2, [pc, #84]	; (800a7f4 <TIM_OC3_SetConfig+0xe4>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d113      	bne.n	800a7ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	011b      	lsls	r3, r3, #4
 800a7b8:	693a      	ldr	r2, [r7, #16]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	685a      	ldr	r2, [r3, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	621a      	str	r2, [r3, #32]
}
 800a7e4:	bf00      	nop
 800a7e6:	371c      	adds	r7, #28
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	40010000 	.word	0x40010000
 800a7f4:	40010400 	.word	0x40010400

0800a7f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a82e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	021b      	lsls	r3, r3, #8
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	4313      	orrs	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	031b      	lsls	r3, r3, #12
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a12      	ldr	r2, [pc, #72]	; (800a89c <TIM_OC4_SetConfig+0xa4>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d003      	beq.n	800a860 <TIM_OC4_SetConfig+0x68>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a11      	ldr	r2, [pc, #68]	; (800a8a0 <TIM_OC4_SetConfig+0xa8>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d109      	bne.n	800a874 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	019b      	lsls	r3, r3, #6
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	4313      	orrs	r3, r2
 800a872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	621a      	str	r2, [r3, #32]
}
 800a88e:	bf00      	nop
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	40010000 	.word	0x40010000
 800a8a0:	40010400 	.word	0x40010400

0800a8a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	f023 0201 	bic.w	r2, r3, #1
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6a1b      	ldr	r3, [r3, #32]
 800a8c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4a28      	ldr	r2, [pc, #160]	; (800a970 <TIM_TI1_SetConfig+0xcc>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d01b      	beq.n	800a90a <TIM_TI1_SetConfig+0x66>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8d8:	d017      	beq.n	800a90a <TIM_TI1_SetConfig+0x66>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4a25      	ldr	r2, [pc, #148]	; (800a974 <TIM_TI1_SetConfig+0xd0>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d013      	beq.n	800a90a <TIM_TI1_SetConfig+0x66>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	4a24      	ldr	r2, [pc, #144]	; (800a978 <TIM_TI1_SetConfig+0xd4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d00f      	beq.n	800a90a <TIM_TI1_SetConfig+0x66>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4a23      	ldr	r2, [pc, #140]	; (800a97c <TIM_TI1_SetConfig+0xd8>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d00b      	beq.n	800a90a <TIM_TI1_SetConfig+0x66>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4a22      	ldr	r2, [pc, #136]	; (800a980 <TIM_TI1_SetConfig+0xdc>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d007      	beq.n	800a90a <TIM_TI1_SetConfig+0x66>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	4a21      	ldr	r2, [pc, #132]	; (800a984 <TIM_TI1_SetConfig+0xe0>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d003      	beq.n	800a90a <TIM_TI1_SetConfig+0x66>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	4a20      	ldr	r2, [pc, #128]	; (800a988 <TIM_TI1_SetConfig+0xe4>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d101      	bne.n	800a90e <TIM_TI1_SetConfig+0x6a>
 800a90a:	2301      	movs	r3, #1
 800a90c:	e000      	b.n	800a910 <TIM_TI1_SetConfig+0x6c>
 800a90e:	2300      	movs	r3, #0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d008      	beq.n	800a926 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f023 0303 	bic.w	r3, r3, #3
 800a91a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4313      	orrs	r3, r2
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	e003      	b.n	800a92e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f043 0301 	orr.w	r3, r3, #1
 800a92c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	011b      	lsls	r3, r3, #4
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	4313      	orrs	r3, r2
 800a940:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f023 030a 	bic.w	r3, r3, #10
 800a948:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f003 030a 	and.w	r3, r3, #10
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	4313      	orrs	r3, r2
 800a954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	621a      	str	r2, [r3, #32]
}
 800a962:	bf00      	nop
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	40010000 	.word	0x40010000
 800a974:	40000400 	.word	0x40000400
 800a978:	40000800 	.word	0x40000800
 800a97c:	40000c00 	.word	0x40000c00
 800a980:	40010400 	.word	0x40010400
 800a984:	40014000 	.word	0x40014000
 800a988:	40001800 	.word	0x40001800

0800a98c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6a1b      	ldr	r3, [r3, #32]
 800a99c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	f023 0201 	bic.w	r2, r3, #1
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f023 030a 	bic.w	r3, r3, #10
 800a9c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	621a      	str	r2, [r3, #32]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b087      	sub	sp, #28
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	60b9      	str	r1, [r7, #8]
 800a9f4:	607a      	str	r2, [r7, #4]
 800a9f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	f023 0210 	bic.w	r2, r3, #16
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	021b      	lsls	r3, r3, #8
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	031b      	lsls	r3, r3, #12
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	621a      	str	r2, [r3, #32]
}
 800aa58:	bf00      	nop
 800aa5a:	371c      	adds	r7, #28
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6a1b      	ldr	r3, [r3, #32]
 800aa74:	f023 0210 	bic.w	r2, r3, #16
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	031b      	lsls	r3, r3, #12
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aaa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	011b      	lsls	r3, r3, #4
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	621a      	str	r2, [r3, #32]
}
 800aab8:	bf00      	nop
 800aaba:	371c      	adds	r7, #28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b087      	sub	sp, #28
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6a1b      	ldr	r3, [r3, #32]
 800aae8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f023 0303 	bic.w	r3, r3, #3
 800aaf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ab14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	021b      	lsls	r3, r3, #8
 800ab1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	621a      	str	r2, [r3, #32]
}
 800ab30:	bf00      	nop
 800ab32:	371c      	adds	r7, #28
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a1b      	ldr	r3, [r3, #32]
 800ab60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	021b      	lsls	r3, r3, #8
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	031b      	lsls	r3, r3, #12
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ab8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	031b      	lsls	r3, r3, #12
 800ab94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	621a      	str	r2, [r3, #32]
}
 800abaa:	bf00      	nop
 800abac:	371c      	adds	r7, #28
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b085      	sub	sp, #20
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	f043 0307 	orr.w	r3, r3, #7
 800abd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	609a      	str	r2, [r3, #8]
}
 800abe0:	bf00      	nop
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abec:	b480      	push	{r7}
 800abee:	b087      	sub	sp, #28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	021a      	lsls	r2, r3, #8
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	431a      	orrs	r2, r3
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	609a      	str	r2, [r3, #8]
}
 800ac20:	bf00      	nop
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	f003 031f 	and.w	r3, r3, #31
 800ac3e:	2201      	movs	r2, #1
 800ac40:	fa02 f303 	lsl.w	r3, r2, r3
 800ac44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6a1a      	ldr	r2, [r3, #32]
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	43db      	mvns	r3, r3
 800ac4e:	401a      	ands	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a1a      	ldr	r2, [r3, #32]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f003 031f 	and.w	r3, r3, #31
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	fa01 f303 	lsl.w	r3, r1, r3
 800ac64:	431a      	orrs	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	621a      	str	r2, [r3, #32]
}
 800ac6a:	bf00      	nop
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
	...

0800ac78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e05a      	b.n	800ad46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a21      	ldr	r2, [pc, #132]	; (800ad54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d022      	beq.n	800ad1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acdc:	d01d      	beq.n	800ad1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a1d      	ldr	r2, [pc, #116]	; (800ad58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d018      	beq.n	800ad1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1b      	ldr	r2, [pc, #108]	; (800ad5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d013      	beq.n	800ad1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a1a      	ldr	r2, [pc, #104]	; (800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d00e      	beq.n	800ad1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a18      	ldr	r2, [pc, #96]	; (800ad64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d009      	beq.n	800ad1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a17      	ldr	r2, [pc, #92]	; (800ad68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d004      	beq.n	800ad1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a15      	ldr	r2, [pc, #84]	; (800ad6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d10c      	bne.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	40010000 	.word	0x40010000
 800ad58:	40000400 	.word	0x40000400
 800ad5c:	40000800 	.word	0x40000800
 800ad60:	40000c00 	.word	0x40000c00
 800ad64:	40010400 	.word	0x40010400
 800ad68:	40014000 	.word	0x40014000
 800ad6c:	40001800 	.word	0x40001800

0800ad70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d101      	bne.n	800ad8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad88:	2302      	movs	r3, #2
 800ad8a:	e03d      	b.n	800ae08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	4313      	orrs	r3, r2
 800adae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	4313      	orrs	r3, r2
 800adbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4313      	orrs	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	4313      	orrs	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e03f      	b.n	800aece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d106      	bne.n	800ae68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7fb fc36 	bl	80066d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2224      	movs	r2, #36	; 0x24
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fddf 	bl	800ba44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	691a      	ldr	r2, [r3, #16]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	695a      	ldr	r2, [r3, #20]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68da      	ldr	r2, [r3, #12]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aeb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2220      	movs	r2, #32
 800aec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b08a      	sub	sp, #40	; 0x28
 800aeda:	af02      	add	r7, sp, #8
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	4613      	mov	r3, r2
 800aee4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b20      	cmp	r3, #32
 800aef4:	d17c      	bne.n	800aff0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <HAL_UART_Transmit+0x2c>
 800aefc:	88fb      	ldrh	r3, [r7, #6]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e075      	b.n	800aff2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d101      	bne.n	800af14 <HAL_UART_Transmit+0x3e>
 800af10:	2302      	movs	r3, #2
 800af12:	e06e      	b.n	800aff2 <HAL_UART_Transmit+0x11c>
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2221      	movs	r2, #33	; 0x21
 800af26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af2a:	f7fb fd61 	bl	80069f0 <HAL_GetTick>
 800af2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	88fa      	ldrh	r2, [r7, #6]
 800af34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	88fa      	ldrh	r2, [r7, #6]
 800af3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af44:	d108      	bne.n	800af58 <HAL_UART_Transmit+0x82>
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d104      	bne.n	800af58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	61bb      	str	r3, [r7, #24]
 800af56:	e003      	b.n	800af60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af5c:	2300      	movs	r3, #0
 800af5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800af68:	e02a      	b.n	800afc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2200      	movs	r2, #0
 800af72:	2180      	movs	r1, #128	; 0x80
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 fb1f 	bl	800b5b8 <UART_WaitOnFlagUntilTimeout>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e036      	b.n	800aff2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10b      	bne.n	800afa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	3302      	adds	r3, #2
 800af9e:	61bb      	str	r3, [r7, #24]
 800afa0:	e007      	b.n	800afb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	781a      	ldrb	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	3301      	adds	r3, #1
 800afb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	3b01      	subs	r3, #1
 800afba:	b29a      	uxth	r2, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1cf      	bne.n	800af6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2200      	movs	r2, #0
 800afd2:	2140      	movs	r1, #64	; 0x40
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 faef 	bl	800b5b8 <UART_WaitOnFlagUntilTimeout>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e006      	b.n	800aff2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2220      	movs	r2, #32
 800afe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	e000      	b.n	800aff2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aff0:	2302      	movs	r3, #2
  }
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3720      	adds	r7, #32
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	60b9      	str	r1, [r7, #8]
 800b004:	4613      	mov	r3, r2
 800b006:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b20      	cmp	r3, #32
 800b012:	d11d      	bne.n	800b050 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <HAL_UART_Receive_IT+0x26>
 800b01a:	88fb      	ldrh	r3, [r7, #6]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e016      	b.n	800b052 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d101      	bne.n	800b032 <HAL_UART_Receive_IT+0x38>
 800b02e:	2302      	movs	r3, #2
 800b030:	e00f      	b.n	800b052 <HAL_UART_Receive_IT+0x58>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2201      	movs	r2, #1
 800b036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b040:	88fb      	ldrh	r3, [r7, #6]
 800b042:	461a      	mov	r2, r3
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f000 fb24 	bl	800b694 <UART_Start_Receive_IT>
 800b04c:	4603      	mov	r3, r0
 800b04e:	e000      	b.n	800b052 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b050:	2302      	movs	r3, #2
  }
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b0ba      	sub	sp, #232	; 0xe8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b082:	2300      	movs	r3, #0
 800b084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b088:	2300      	movs	r3, #0
 800b08a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b092:	f003 030f 	and.w	r3, r3, #15
 800b096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b09a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10f      	bne.n	800b0c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d009      	beq.n	800b0c2 <HAL_UART_IRQHandler+0x66>
 800b0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d003      	beq.n	800b0c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fc07 	bl	800b8ce <UART_Receive_IT>
      return;
 800b0c0:	e256      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b0c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 80de 	beq.w	800b288 <HAL_UART_IRQHandler+0x22c>
 800b0cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80d1 	beq.w	800b288 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b0e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00b      	beq.n	800b10a <HAL_UART_IRQHandler+0xae>
 800b0f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d005      	beq.n	800b10a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b102:	f043 0201 	orr.w	r2, r3, #1
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b10e:	f003 0304 	and.w	r3, r3, #4
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00b      	beq.n	800b12e <HAL_UART_IRQHandler+0xd2>
 800b116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b126:	f043 0202 	orr.w	r2, r3, #2
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00b      	beq.n	800b152 <HAL_UART_IRQHandler+0xf6>
 800b13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	2b00      	cmp	r3, #0
 800b144:	d005      	beq.n	800b152 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14a:	f043 0204 	orr.w	r2, r3, #4
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b156:	f003 0308 	and.w	r3, r3, #8
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d011      	beq.n	800b182 <HAL_UART_IRQHandler+0x126>
 800b15e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b162:	f003 0320 	and.w	r3, r3, #32
 800b166:	2b00      	cmp	r3, #0
 800b168:	d105      	bne.n	800b176 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b16a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	2b00      	cmp	r3, #0
 800b174:	d005      	beq.n	800b182 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	f043 0208 	orr.w	r2, r3, #8
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 81ed 	beq.w	800b566 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b190:	f003 0320 	and.w	r3, r3, #32
 800b194:	2b00      	cmp	r3, #0
 800b196:	d008      	beq.n	800b1aa <HAL_UART_IRQHandler+0x14e>
 800b198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b19c:	f003 0320 	and.w	r3, r3, #32
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fb92 	bl	800b8ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1b4:	2b40      	cmp	r3, #64	; 0x40
 800b1b6:	bf0c      	ite	eq
 800b1b8:	2301      	moveq	r3, #1
 800b1ba:	2300      	movne	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	f003 0308 	and.w	r3, r3, #8
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d103      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x17a>
 800b1ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d04f      	beq.n	800b276 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fa9a 	bl	800b710 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e6:	2b40      	cmp	r3, #64	; 0x40
 800b1e8:	d141      	bne.n	800b26e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3314      	adds	r3, #20
 800b1f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1f8:	e853 3f00 	ldrex	r3, [r3]
 800b1fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b200:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3314      	adds	r3, #20
 800b212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b216:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b21a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b226:	e841 2300 	strex	r3, r2, [r1]
 800b22a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b22e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1d9      	bne.n	800b1ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d013      	beq.n	800b266 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b242:	4a7d      	ldr	r2, [pc, #500]	; (800b438 <HAL_UART_IRQHandler+0x3dc>)
 800b244:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fc f952 	bl	80074f4 <HAL_DMA_Abort_IT>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d016      	beq.n	800b284 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b264:	e00e      	b.n	800b284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f990 	bl	800b58c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b26c:	e00a      	b.n	800b284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f98c 	bl	800b58c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b274:	e006      	b.n	800b284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f988 	bl	800b58c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b282:	e170      	b.n	800b566 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b284:	bf00      	nop
    return;
 800b286:	e16e      	b.n	800b566 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	f040 814a 	bne.w	800b526 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b296:	f003 0310 	and.w	r3, r3, #16
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 8143 	beq.w	800b526 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2a4:	f003 0310 	and.w	r3, r3, #16
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 813c 	beq.w	800b526 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60bb      	str	r3, [r7, #8]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	60bb      	str	r3, [r7, #8]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	60bb      	str	r3, [r7, #8]
 800b2c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ce:	2b40      	cmp	r3, #64	; 0x40
 800b2d0:	f040 80b4 	bne.w	800b43c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 8140 	beq.w	800b56a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	f080 8139 	bcs.w	800b56a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b30a:	f000 8088 	beq.w	800b41e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	330c      	adds	r3, #12
 800b314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b32c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	330c      	adds	r3, #12
 800b336:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b33a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b33e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b342:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b346:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b34a:	e841 2300 	strex	r3, r2, [r1]
 800b34e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1d9      	bne.n	800b30e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3314      	adds	r3, #20
 800b360:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b36a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b36c:	f023 0301 	bic.w	r3, r3, #1
 800b370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	3314      	adds	r3, #20
 800b37a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b37e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b382:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b384:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b386:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e1      	bne.n	800b35a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3314      	adds	r3, #20
 800b39c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3a0:	e853 3f00 	ldrex	r3, [r3]
 800b3a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3314      	adds	r3, #20
 800b3b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1e3      	bne.n	800b396 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	330c      	adds	r3, #12
 800b3e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e6:	e853 3f00 	ldrex	r3, [r3]
 800b3ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ee:	f023 0310 	bic.w	r3, r3, #16
 800b3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	330c      	adds	r3, #12
 800b3fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b400:	65ba      	str	r2, [r7, #88]	; 0x58
 800b402:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b408:	e841 2300 	strex	r3, r2, [r1]
 800b40c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e3      	bne.n	800b3dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fb fffb 	bl	8007414 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b426:	b29b      	uxth	r3, r3
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f8b6 	bl	800b5a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b434:	e099      	b.n	800b56a <HAL_UART_IRQHandler+0x50e>
 800b436:	bf00      	nop
 800b438:	0800b7d7 	.word	0x0800b7d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b444:	b29b      	uxth	r3, r3
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b450:	b29b      	uxth	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 808b 	beq.w	800b56e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 8086 	beq.w	800b56e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	330c      	adds	r3, #12
 800b468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	e853 3f00 	ldrex	r3, [r3]
 800b470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	330c      	adds	r3, #12
 800b482:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b486:	647a      	str	r2, [r7, #68]	; 0x44
 800b488:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b48c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b48e:	e841 2300 	strex	r3, r2, [r1]
 800b492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1e3      	bne.n	800b462 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3314      	adds	r3, #20
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	e853 3f00 	ldrex	r3, [r3]
 800b4a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	f023 0301 	bic.w	r3, r3, #1
 800b4b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3314      	adds	r3, #20
 800b4ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4be:	633a      	str	r2, [r7, #48]	; 0x30
 800b4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	e841 2300 	strex	r3, r2, [r1]
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1e3      	bne.n	800b49a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2220      	movs	r2, #32
 800b4d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	330c      	adds	r3, #12
 800b4e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f023 0310 	bic.w	r3, r3, #16
 800b4f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	330c      	adds	r3, #12
 800b500:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b504:	61fa      	str	r2, [r7, #28]
 800b506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	69b9      	ldr	r1, [r7, #24]
 800b50a:	69fa      	ldr	r2, [r7, #28]
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	617b      	str	r3, [r7, #20]
   return(result);
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e3      	bne.n	800b4e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f83e 	bl	800b5a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b524:	e023      	b.n	800b56e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d009      	beq.n	800b546 <HAL_UART_IRQHandler+0x4ea>
 800b532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f95d 	bl	800b7fe <UART_Transmit_IT>
    return;
 800b544:	e014      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00e      	beq.n	800b570 <HAL_UART_IRQHandler+0x514>
 800b552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d008      	beq.n	800b570 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f99d 	bl	800b89e <UART_EndTransmit_IT>
    return;
 800b564:	e004      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
    return;
 800b566:	bf00      	nop
 800b568:	e002      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
      return;
 800b56a:	bf00      	nop
 800b56c:	e000      	b.n	800b570 <HAL_UART_IRQHandler+0x514>
      return;
 800b56e:	bf00      	nop
  }
}
 800b570:	37e8      	adds	r7, #232	; 0xe8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop

0800b578 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b090      	sub	sp, #64	; 0x40
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	603b      	str	r3, [r7, #0]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5c8:	e050      	b.n	800b66c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5d0:	d04c      	beq.n	800b66c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b5d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d007      	beq.n	800b5e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b5d8:	f7fb fa0a 	bl	80069f0 <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d241      	bcs.n	800b66c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	330c      	adds	r3, #12
 800b5ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	330c      	adds	r3, #12
 800b606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b608:	637a      	str	r2, [r7, #52]	; 0x34
 800b60a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b60e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e5      	bne.n	800b5e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3314      	adds	r3, #20
 800b622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	613b      	str	r3, [r7, #16]
   return(result);
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f023 0301 	bic.w	r3, r3, #1
 800b632:	63bb      	str	r3, [r7, #56]	; 0x38
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3314      	adds	r3, #20
 800b63a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b63c:	623a      	str	r2, [r7, #32]
 800b63e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b640:	69f9      	ldr	r1, [r7, #28]
 800b642:	6a3a      	ldr	r2, [r7, #32]
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	61bb      	str	r3, [r7, #24]
   return(result);
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e5      	bne.n	800b61c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2220      	movs	r2, #32
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2220      	movs	r2, #32
 800b65c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b668:	2303      	movs	r3, #3
 800b66a:	e00f      	b.n	800b68c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	4013      	ands	r3, r2
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	429a      	cmp	r2, r3
 800b67a:	bf0c      	ite	eq
 800b67c:	2301      	moveq	r3, #1
 800b67e:	2300      	movne	r3, #0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	461a      	mov	r2, r3
 800b684:	79fb      	ldrb	r3, [r7, #7]
 800b686:	429a      	cmp	r2, r3
 800b688:	d09f      	beq.n	800b5ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3740      	adds	r7, #64	; 0x40
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	88fa      	ldrh	r2, [r7, #6]
 800b6ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	88fa      	ldrh	r2, [r7, #6]
 800b6b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2222      	movs	r2, #34	; 0x22
 800b6be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d007      	beq.n	800b6e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68da      	ldr	r2, [r3, #12]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	695a      	ldr	r2, [r3, #20]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f042 0201 	orr.w	r2, r2, #1
 800b6f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f042 0220 	orr.w	r2, r2, #32
 800b700:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3714      	adds	r7, #20
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b710:	b480      	push	{r7}
 800b712:	b095      	sub	sp, #84	; 0x54
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	330c      	adds	r3, #12
 800b71e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b722:	e853 3f00 	ldrex	r3, [r3]
 800b726:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b72e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	330c      	adds	r3, #12
 800b736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b738:	643a      	str	r2, [r7, #64]	; 0x40
 800b73a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b73e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b740:	e841 2300 	strex	r3, r2, [r1]
 800b744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e5      	bne.n	800b718 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	3314      	adds	r3, #20
 800b752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	e853 3f00 	ldrex	r3, [r3]
 800b75a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	f023 0301 	bic.w	r3, r3, #1
 800b762:	64bb      	str	r3, [r7, #72]	; 0x48
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3314      	adds	r3, #20
 800b76a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b76c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b76e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b774:	e841 2300 	strex	r3, r2, [r1]
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1e5      	bne.n	800b74c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b784:	2b01      	cmp	r3, #1
 800b786:	d119      	bne.n	800b7bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	330c      	adds	r3, #12
 800b78e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	e853 3f00 	ldrex	r3, [r3]
 800b796:	60bb      	str	r3, [r7, #8]
   return(result);
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	f023 0310 	bic.w	r3, r3, #16
 800b79e:	647b      	str	r3, [r7, #68]	; 0x44
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	330c      	adds	r3, #12
 800b7a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7a8:	61ba      	str	r2, [r7, #24]
 800b7aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ac:	6979      	ldr	r1, [r7, #20]
 800b7ae:	69ba      	ldr	r2, [r7, #24]
 800b7b0:	e841 2300 	strex	r3, r2, [r1]
 800b7b4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e5      	bne.n	800b788 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2220      	movs	r2, #32
 800b7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b7ca:	bf00      	nop
 800b7cc:	3754      	adds	r7, #84	; 0x54
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b084      	sub	sp, #16
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f7ff fecb 	bl	800b58c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7f6:	bf00      	nop
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b085      	sub	sp, #20
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b21      	cmp	r3, #33	; 0x21
 800b810:	d13e      	bne.n	800b890 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b81a:	d114      	bne.n	800b846 <UART_Transmit_IT+0x48>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d110      	bne.n	800b846 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	881b      	ldrh	r3, [r3, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b838:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	1c9a      	adds	r2, r3, #2
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	621a      	str	r2, [r3, #32]
 800b844:	e008      	b.n	800b858 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a1b      	ldr	r3, [r3, #32]
 800b84a:	1c59      	adds	r1, r3, #1
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	6211      	str	r1, [r2, #32]
 800b850:	781a      	ldrb	r2, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	3b01      	subs	r3, #1
 800b860:	b29b      	uxth	r3, r3
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	4619      	mov	r1, r3
 800b866:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10f      	bne.n	800b88c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b87a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68da      	ldr	r2, [r3, #12]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b88a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	e000      	b.n	800b892 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b890:	2302      	movs	r3, #2
  }
}
 800b892:	4618      	mov	r0, r3
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2220      	movs	r2, #32
 800b8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f7ff fe5a 	bl	800b578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b08c      	sub	sp, #48	; 0x30
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b22      	cmp	r3, #34	; 0x22
 800b8e0:	f040 80ab 	bne.w	800ba3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ec:	d117      	bne.n	800b91e <UART_Receive_IT+0x50>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d113      	bne.n	800b91e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	b29b      	uxth	r3, r3
 800b908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b910:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b916:	1c9a      	adds	r2, r3, #2
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	629a      	str	r2, [r3, #40]	; 0x28
 800b91c:	e026      	b.n	800b96c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b924:	2300      	movs	r3, #0
 800b926:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b930:	d007      	beq.n	800b942 <UART_Receive_IT+0x74>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10a      	bne.n	800b950 <UART_Receive_IT+0x82>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d106      	bne.n	800b950 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	b2da      	uxtb	r2, r3
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94c:	701a      	strb	r2, [r3, #0]
 800b94e:	e008      	b.n	800b962 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	b2db      	uxtb	r3, r3
 800b958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b966:	1c5a      	adds	r2, r3, #1
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b970:	b29b      	uxth	r3, r3
 800b972:	3b01      	subs	r3, #1
 800b974:	b29b      	uxth	r3, r3
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	4619      	mov	r1, r3
 800b97a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d15a      	bne.n	800ba36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68da      	ldr	r2, [r3, #12]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f022 0220 	bic.w	r2, r2, #32
 800b98e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68da      	ldr	r2, [r3, #12]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b99e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	695a      	ldr	r2, [r3, #20]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f022 0201 	bic.w	r2, r2, #1
 800b9ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d135      	bne.n	800ba2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	330c      	adds	r3, #12
 800b9cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f023 0310 	bic.w	r3, r3, #16
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	330c      	adds	r3, #12
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e6:	623a      	str	r2, [r7, #32]
 800b9e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ea:	69f9      	ldr	r1, [r7, #28]
 800b9ec:	6a3a      	ldr	r2, [r7, #32]
 800b9ee:	e841 2300 	strex	r3, r2, [r1]
 800b9f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e5      	bne.n	800b9c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f003 0310 	and.w	r3, r3, #16
 800ba04:	2b10      	cmp	r3, #16
 800ba06:	d10a      	bne.n	800ba1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba08:	2300      	movs	r3, #0
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	60fb      	str	r3, [r7, #12]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff fdbb 	bl	800b5a0 <HAL_UARTEx_RxEventCallback>
 800ba2a:	e002      	b.n	800ba32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7f6 f8bd 	bl	8001bac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	e002      	b.n	800ba3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	e000      	b.n	800ba3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ba3a:	2302      	movs	r3, #2
  }
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3730      	adds	r7, #48	; 0x30
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba48:	b0c0      	sub	sp, #256	; 0x100
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ba5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba60:	68d9      	ldr	r1, [r3, #12]
 800ba62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	ea40 0301 	orr.w	r3, r0, r1
 800ba6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ba6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba72:	689a      	ldr	r2, [r3, #8]
 800ba74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	431a      	orrs	r2, r3
 800ba7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	431a      	orrs	r2, r3
 800ba84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba88:	69db      	ldr	r3, [r3, #28]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ba90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba9c:	f021 010c 	bic.w	r1, r1, #12
 800baa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800baaa:	430b      	orrs	r3, r1
 800baac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800baae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800baba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800babe:	6999      	ldr	r1, [r3, #24]
 800bac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	ea40 0301 	orr.w	r3, r0, r1
 800baca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bacc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	4b8f      	ldr	r3, [pc, #572]	; (800bd10 <UART_SetConfig+0x2cc>)
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d005      	beq.n	800bae4 <UART_SetConfig+0xa0>
 800bad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	4b8d      	ldr	r3, [pc, #564]	; (800bd14 <UART_SetConfig+0x2d0>)
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d104      	bne.n	800baee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bae4:	f7fd fb0a 	bl	80090fc <HAL_RCC_GetPCLK2Freq>
 800bae8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800baec:	e003      	b.n	800baf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800baee:	f7fd faf1 	bl	80090d4 <HAL_RCC_GetPCLK1Freq>
 800baf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800baf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb00:	f040 810c 	bne.w	800bd1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bb12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bb16:	4622      	mov	r2, r4
 800bb18:	462b      	mov	r3, r5
 800bb1a:	1891      	adds	r1, r2, r2
 800bb1c:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb1e:	415b      	adcs	r3, r3
 800bb20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bb26:	4621      	mov	r1, r4
 800bb28:	eb12 0801 	adds.w	r8, r2, r1
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	eb43 0901 	adc.w	r9, r3, r1
 800bb32:	f04f 0200 	mov.w	r2, #0
 800bb36:	f04f 0300 	mov.w	r3, #0
 800bb3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb46:	4690      	mov	r8, r2
 800bb48:	4699      	mov	r9, r3
 800bb4a:	4623      	mov	r3, r4
 800bb4c:	eb18 0303 	adds.w	r3, r8, r3
 800bb50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bb54:	462b      	mov	r3, r5
 800bb56:	eb49 0303 	adc.w	r3, r9, r3
 800bb5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bb6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb72:	460b      	mov	r3, r1
 800bb74:	18db      	adds	r3, r3, r3
 800bb76:	653b      	str	r3, [r7, #80]	; 0x50
 800bb78:	4613      	mov	r3, r2
 800bb7a:	eb42 0303 	adc.w	r3, r2, r3
 800bb7e:	657b      	str	r3, [r7, #84]	; 0x54
 800bb80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bb84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bb88:	f7f5 f838 	bl	8000bfc <__aeabi_uldivmod>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4b61      	ldr	r3, [pc, #388]	; (800bd18 <UART_SetConfig+0x2d4>)
 800bb92:	fba3 2302 	umull	r2, r3, r3, r2
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	011c      	lsls	r4, r3, #4
 800bb9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bba4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bba8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bbac:	4642      	mov	r2, r8
 800bbae:	464b      	mov	r3, r9
 800bbb0:	1891      	adds	r1, r2, r2
 800bbb2:	64b9      	str	r1, [r7, #72]	; 0x48
 800bbb4:	415b      	adcs	r3, r3
 800bbb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bbbc:	4641      	mov	r1, r8
 800bbbe:	eb12 0a01 	adds.w	sl, r2, r1
 800bbc2:	4649      	mov	r1, r9
 800bbc4:	eb43 0b01 	adc.w	fp, r3, r1
 800bbc8:	f04f 0200 	mov.w	r2, #0
 800bbcc:	f04f 0300 	mov.w	r3, #0
 800bbd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bbd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bbd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbdc:	4692      	mov	sl, r2
 800bbde:	469b      	mov	fp, r3
 800bbe0:	4643      	mov	r3, r8
 800bbe2:	eb1a 0303 	adds.w	r3, sl, r3
 800bbe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbea:	464b      	mov	r3, r9
 800bbec:	eb4b 0303 	adc.w	r3, fp, r3
 800bbf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bbf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	18db      	adds	r3, r3, r3
 800bc0c:	643b      	str	r3, [r7, #64]	; 0x40
 800bc0e:	4613      	mov	r3, r2
 800bc10:	eb42 0303 	adc.w	r3, r2, r3
 800bc14:	647b      	str	r3, [r7, #68]	; 0x44
 800bc16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bc1e:	f7f4 ffed 	bl	8000bfc <__aeabi_uldivmod>
 800bc22:	4602      	mov	r2, r0
 800bc24:	460b      	mov	r3, r1
 800bc26:	4611      	mov	r1, r2
 800bc28:	4b3b      	ldr	r3, [pc, #236]	; (800bd18 <UART_SetConfig+0x2d4>)
 800bc2a:	fba3 2301 	umull	r2, r3, r3, r1
 800bc2e:	095b      	lsrs	r3, r3, #5
 800bc30:	2264      	movs	r2, #100	; 0x64
 800bc32:	fb02 f303 	mul.w	r3, r2, r3
 800bc36:	1acb      	subs	r3, r1, r3
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bc3e:	4b36      	ldr	r3, [pc, #216]	; (800bd18 <UART_SetConfig+0x2d4>)
 800bc40:	fba3 2302 	umull	r2, r3, r3, r2
 800bc44:	095b      	lsrs	r3, r3, #5
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bc4c:	441c      	add	r4, r3
 800bc4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc52:	2200      	movs	r2, #0
 800bc54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bc5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bc60:	4642      	mov	r2, r8
 800bc62:	464b      	mov	r3, r9
 800bc64:	1891      	adds	r1, r2, r2
 800bc66:	63b9      	str	r1, [r7, #56]	; 0x38
 800bc68:	415b      	adcs	r3, r3
 800bc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bc70:	4641      	mov	r1, r8
 800bc72:	1851      	adds	r1, r2, r1
 800bc74:	6339      	str	r1, [r7, #48]	; 0x30
 800bc76:	4649      	mov	r1, r9
 800bc78:	414b      	adcs	r3, r1
 800bc7a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc7c:	f04f 0200 	mov.w	r2, #0
 800bc80:	f04f 0300 	mov.w	r3, #0
 800bc84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bc88:	4659      	mov	r1, fp
 800bc8a:	00cb      	lsls	r3, r1, #3
 800bc8c:	4651      	mov	r1, sl
 800bc8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc92:	4651      	mov	r1, sl
 800bc94:	00ca      	lsls	r2, r1, #3
 800bc96:	4610      	mov	r0, r2
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4642      	mov	r2, r8
 800bc9e:	189b      	adds	r3, r3, r2
 800bca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bca4:	464b      	mov	r3, r9
 800bca6:	460a      	mov	r2, r1
 800bca8:	eb42 0303 	adc.w	r3, r2, r3
 800bcac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bcbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bcc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	18db      	adds	r3, r3, r3
 800bcc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcca:	4613      	mov	r3, r2
 800bccc:	eb42 0303 	adc.w	r3, r2, r3
 800bcd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bcd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bcda:	f7f4 ff8f 	bl	8000bfc <__aeabi_uldivmod>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4b0d      	ldr	r3, [pc, #52]	; (800bd18 <UART_SetConfig+0x2d4>)
 800bce4:	fba3 1302 	umull	r1, r3, r3, r2
 800bce8:	095b      	lsrs	r3, r3, #5
 800bcea:	2164      	movs	r1, #100	; 0x64
 800bcec:	fb01 f303 	mul.w	r3, r1, r3
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	3332      	adds	r3, #50	; 0x32
 800bcf6:	4a08      	ldr	r2, [pc, #32]	; (800bd18 <UART_SetConfig+0x2d4>)
 800bcf8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcfc:	095b      	lsrs	r3, r3, #5
 800bcfe:	f003 0207 	and.w	r2, r3, #7
 800bd02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4422      	add	r2, r4
 800bd0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd0c:	e106      	b.n	800bf1c <UART_SetConfig+0x4d8>
 800bd0e:	bf00      	nop
 800bd10:	40011000 	.word	0x40011000
 800bd14:	40011400 	.word	0x40011400
 800bd18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd20:	2200      	movs	r2, #0
 800bd22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bd2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bd2e:	4642      	mov	r2, r8
 800bd30:	464b      	mov	r3, r9
 800bd32:	1891      	adds	r1, r2, r2
 800bd34:	6239      	str	r1, [r7, #32]
 800bd36:	415b      	adcs	r3, r3
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
 800bd3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bd3e:	4641      	mov	r1, r8
 800bd40:	1854      	adds	r4, r2, r1
 800bd42:	4649      	mov	r1, r9
 800bd44:	eb43 0501 	adc.w	r5, r3, r1
 800bd48:	f04f 0200 	mov.w	r2, #0
 800bd4c:	f04f 0300 	mov.w	r3, #0
 800bd50:	00eb      	lsls	r3, r5, #3
 800bd52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd56:	00e2      	lsls	r2, r4, #3
 800bd58:	4614      	mov	r4, r2
 800bd5a:	461d      	mov	r5, r3
 800bd5c:	4643      	mov	r3, r8
 800bd5e:	18e3      	adds	r3, r4, r3
 800bd60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd64:	464b      	mov	r3, r9
 800bd66:	eb45 0303 	adc.w	r3, r5, r3
 800bd6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd7e:	f04f 0200 	mov.w	r2, #0
 800bd82:	f04f 0300 	mov.w	r3, #0
 800bd86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	008b      	lsls	r3, r1, #2
 800bd8e:	4621      	mov	r1, r4
 800bd90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd94:	4621      	mov	r1, r4
 800bd96:	008a      	lsls	r2, r1, #2
 800bd98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bd9c:	f7f4 ff2e 	bl	8000bfc <__aeabi_uldivmod>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4b60      	ldr	r3, [pc, #384]	; (800bf28 <UART_SetConfig+0x4e4>)
 800bda6:	fba3 2302 	umull	r2, r3, r3, r2
 800bdaa:	095b      	lsrs	r3, r3, #5
 800bdac:	011c      	lsls	r4, r3, #4
 800bdae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bdb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bdbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bdc0:	4642      	mov	r2, r8
 800bdc2:	464b      	mov	r3, r9
 800bdc4:	1891      	adds	r1, r2, r2
 800bdc6:	61b9      	str	r1, [r7, #24]
 800bdc8:	415b      	adcs	r3, r3
 800bdca:	61fb      	str	r3, [r7, #28]
 800bdcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bdd0:	4641      	mov	r1, r8
 800bdd2:	1851      	adds	r1, r2, r1
 800bdd4:	6139      	str	r1, [r7, #16]
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	414b      	adcs	r3, r1
 800bdda:	617b      	str	r3, [r7, #20]
 800bddc:	f04f 0200 	mov.w	r2, #0
 800bde0:	f04f 0300 	mov.w	r3, #0
 800bde4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bde8:	4659      	mov	r1, fp
 800bdea:	00cb      	lsls	r3, r1, #3
 800bdec:	4651      	mov	r1, sl
 800bdee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bdf2:	4651      	mov	r1, sl
 800bdf4:	00ca      	lsls	r2, r1, #3
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	4642      	mov	r2, r8
 800bdfe:	189b      	adds	r3, r3, r2
 800be00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be04:	464b      	mov	r3, r9
 800be06:	460a      	mov	r2, r1
 800be08:	eb42 0303 	adc.w	r3, r2, r3
 800be0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	67bb      	str	r3, [r7, #120]	; 0x78
 800be1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800be1c:	f04f 0200 	mov.w	r2, #0
 800be20:	f04f 0300 	mov.w	r3, #0
 800be24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800be28:	4649      	mov	r1, r9
 800be2a:	008b      	lsls	r3, r1, #2
 800be2c:	4641      	mov	r1, r8
 800be2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be32:	4641      	mov	r1, r8
 800be34:	008a      	lsls	r2, r1, #2
 800be36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800be3a:	f7f4 fedf 	bl	8000bfc <__aeabi_uldivmod>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4611      	mov	r1, r2
 800be44:	4b38      	ldr	r3, [pc, #224]	; (800bf28 <UART_SetConfig+0x4e4>)
 800be46:	fba3 2301 	umull	r2, r3, r3, r1
 800be4a:	095b      	lsrs	r3, r3, #5
 800be4c:	2264      	movs	r2, #100	; 0x64
 800be4e:	fb02 f303 	mul.w	r3, r2, r3
 800be52:	1acb      	subs	r3, r1, r3
 800be54:	011b      	lsls	r3, r3, #4
 800be56:	3332      	adds	r3, #50	; 0x32
 800be58:	4a33      	ldr	r2, [pc, #204]	; (800bf28 <UART_SetConfig+0x4e4>)
 800be5a:	fba2 2303 	umull	r2, r3, r2, r3
 800be5e:	095b      	lsrs	r3, r3, #5
 800be60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be64:	441c      	add	r4, r3
 800be66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be6a:	2200      	movs	r2, #0
 800be6c:	673b      	str	r3, [r7, #112]	; 0x70
 800be6e:	677a      	str	r2, [r7, #116]	; 0x74
 800be70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800be74:	4642      	mov	r2, r8
 800be76:	464b      	mov	r3, r9
 800be78:	1891      	adds	r1, r2, r2
 800be7a:	60b9      	str	r1, [r7, #8]
 800be7c:	415b      	adcs	r3, r3
 800be7e:	60fb      	str	r3, [r7, #12]
 800be80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be84:	4641      	mov	r1, r8
 800be86:	1851      	adds	r1, r2, r1
 800be88:	6039      	str	r1, [r7, #0]
 800be8a:	4649      	mov	r1, r9
 800be8c:	414b      	adcs	r3, r1
 800be8e:	607b      	str	r3, [r7, #4]
 800be90:	f04f 0200 	mov.w	r2, #0
 800be94:	f04f 0300 	mov.w	r3, #0
 800be98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800be9c:	4659      	mov	r1, fp
 800be9e:	00cb      	lsls	r3, r1, #3
 800bea0:	4651      	mov	r1, sl
 800bea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bea6:	4651      	mov	r1, sl
 800bea8:	00ca      	lsls	r2, r1, #3
 800beaa:	4610      	mov	r0, r2
 800beac:	4619      	mov	r1, r3
 800beae:	4603      	mov	r3, r0
 800beb0:	4642      	mov	r2, r8
 800beb2:	189b      	adds	r3, r3, r2
 800beb4:	66bb      	str	r3, [r7, #104]	; 0x68
 800beb6:	464b      	mov	r3, r9
 800beb8:	460a      	mov	r2, r1
 800beba:	eb42 0303 	adc.w	r3, r2, r3
 800bebe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	663b      	str	r3, [r7, #96]	; 0x60
 800beca:	667a      	str	r2, [r7, #100]	; 0x64
 800becc:	f04f 0200 	mov.w	r2, #0
 800bed0:	f04f 0300 	mov.w	r3, #0
 800bed4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bed8:	4649      	mov	r1, r9
 800beda:	008b      	lsls	r3, r1, #2
 800bedc:	4641      	mov	r1, r8
 800bede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bee2:	4641      	mov	r1, r8
 800bee4:	008a      	lsls	r2, r1, #2
 800bee6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800beea:	f7f4 fe87 	bl	8000bfc <__aeabi_uldivmod>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	4b0d      	ldr	r3, [pc, #52]	; (800bf28 <UART_SetConfig+0x4e4>)
 800bef4:	fba3 1302 	umull	r1, r3, r3, r2
 800bef8:	095b      	lsrs	r3, r3, #5
 800befa:	2164      	movs	r1, #100	; 0x64
 800befc:	fb01 f303 	mul.w	r3, r1, r3
 800bf00:	1ad3      	subs	r3, r2, r3
 800bf02:	011b      	lsls	r3, r3, #4
 800bf04:	3332      	adds	r3, #50	; 0x32
 800bf06:	4a08      	ldr	r2, [pc, #32]	; (800bf28 <UART_SetConfig+0x4e4>)
 800bf08:	fba2 2303 	umull	r2, r3, r2, r3
 800bf0c:	095b      	lsrs	r3, r3, #5
 800bf0e:	f003 020f 	and.w	r2, r3, #15
 800bf12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4422      	add	r2, r4
 800bf1a:	609a      	str	r2, [r3, #8]
}
 800bf1c:	bf00      	nop
 800bf1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bf22:	46bd      	mov	sp, r7
 800bf24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf28:	51eb851f 	.word	0x51eb851f

0800bf2c <__NVIC_SetPriority>:
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	4603      	mov	r3, r0
 800bf34:	6039      	str	r1, [r7, #0]
 800bf36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	db0a      	blt.n	800bf56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	490c      	ldr	r1, [pc, #48]	; (800bf78 <__NVIC_SetPriority+0x4c>)
 800bf46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf4a:	0112      	lsls	r2, r2, #4
 800bf4c:	b2d2      	uxtb	r2, r2
 800bf4e:	440b      	add	r3, r1
 800bf50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bf54:	e00a      	b.n	800bf6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	4908      	ldr	r1, [pc, #32]	; (800bf7c <__NVIC_SetPriority+0x50>)
 800bf5c:	79fb      	ldrb	r3, [r7, #7]
 800bf5e:	f003 030f 	and.w	r3, r3, #15
 800bf62:	3b04      	subs	r3, #4
 800bf64:	0112      	lsls	r2, r2, #4
 800bf66:	b2d2      	uxtb	r2, r2
 800bf68:	440b      	add	r3, r1
 800bf6a:	761a      	strb	r2, [r3, #24]
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	e000e100 	.word	0xe000e100
 800bf7c:	e000ed00 	.word	0xe000ed00

0800bf80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bf80:	b580      	push	{r7, lr}
 800bf82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bf84:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <SysTick_Handler+0x1c>)
 800bf86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf88:	f001 fcfe 	bl	800d988 <xTaskGetSchedulerState>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d001      	beq.n	800bf96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bf92:	f002 fae9 	bl	800e568 <xPortSysTickHandler>
  }
}
 800bf96:	bf00      	nop
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	e000e010 	.word	0xe000e010

0800bfa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	f06f 0004 	mvn.w	r0, #4
 800bfaa:	f7ff ffbf 	bl	800bf2c <__NVIC_SetPriority>
#endif
}
 800bfae:	bf00      	nop
 800bfb0:	bd80      	pop	{r7, pc}
	...

0800bfb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfba:	f3ef 8305 	mrs	r3, IPSR
 800bfbe:	603b      	str	r3, [r7, #0]
  return(result);
 800bfc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d003      	beq.n	800bfce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bfc6:	f06f 0305 	mvn.w	r3, #5
 800bfca:	607b      	str	r3, [r7, #4]
 800bfcc:	e00c      	b.n	800bfe8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bfce:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <osKernelInitialize+0x44>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d105      	bne.n	800bfe2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bfd6:	4b08      	ldr	r3, [pc, #32]	; (800bff8 <osKernelInitialize+0x44>)
 800bfd8:	2201      	movs	r2, #1
 800bfda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	607b      	str	r3, [r7, #4]
 800bfe0:	e002      	b.n	800bfe8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bfe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfe6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bfe8:	687b      	ldr	r3, [r7, #4]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	370c      	adds	r7, #12
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	200005b8 	.word	0x200005b8

0800bffc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c002:	f3ef 8305 	mrs	r3, IPSR
 800c006:	603b      	str	r3, [r7, #0]
  return(result);
 800c008:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d003      	beq.n	800c016 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c00e:	f06f 0305 	mvn.w	r3, #5
 800c012:	607b      	str	r3, [r7, #4]
 800c014:	e010      	b.n	800c038 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c016:	4b0b      	ldr	r3, [pc, #44]	; (800c044 <osKernelStart+0x48>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d109      	bne.n	800c032 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c01e:	f7ff ffbf 	bl	800bfa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c022:	4b08      	ldr	r3, [pc, #32]	; (800c044 <osKernelStart+0x48>)
 800c024:	2202      	movs	r2, #2
 800c026:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c028:	f001 f866 	bl	800d0f8 <vTaskStartScheduler>
      stat = osOK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	607b      	str	r3, [r7, #4]
 800c030:	e002      	b.n	800c038 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c036:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c038:	687b      	ldr	r3, [r7, #4]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	200005b8 	.word	0x200005b8

0800c048 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08e      	sub	sp, #56	; 0x38
 800c04c:	af04      	add	r7, sp, #16
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c054:	2300      	movs	r3, #0
 800c056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c058:	f3ef 8305 	mrs	r3, IPSR
 800c05c:	617b      	str	r3, [r7, #20]
  return(result);
 800c05e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c060:	2b00      	cmp	r3, #0
 800c062:	d17e      	bne.n	800c162 <osThreadNew+0x11a>
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d07b      	beq.n	800c162 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c06a:	2380      	movs	r3, #128	; 0x80
 800c06c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c06e:	2318      	movs	r3, #24
 800c070:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c072:	2300      	movs	r3, #0
 800c074:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c07a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d045      	beq.n	800c10e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d002      	beq.n	800c090 <osThreadNew+0x48>
        name = attr->name;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d008      	beq.n	800c0b6 <osThreadNew+0x6e>
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	2b38      	cmp	r3, #56	; 0x38
 800c0a8:	d805      	bhi.n	800c0b6 <osThreadNew+0x6e>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <osThreadNew+0x72>
        return (NULL);
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	e054      	b.n	800c164 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	695b      	ldr	r3, [r3, #20]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d003      	beq.n	800c0ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	089b      	lsrs	r3, r3, #2
 800c0c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00e      	beq.n	800c0f0 <osThreadNew+0xa8>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	2b5b      	cmp	r3, #91	; 0x5b
 800c0d8:	d90a      	bls.n	800c0f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d006      	beq.n	800c0f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	695b      	ldr	r3, [r3, #20]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d002      	beq.n	800c0f0 <osThreadNew+0xa8>
        mem = 1;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	61bb      	str	r3, [r7, #24]
 800c0ee:	e010      	b.n	800c112 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10c      	bne.n	800c112 <osThreadNew+0xca>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d108      	bne.n	800c112 <osThreadNew+0xca>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d104      	bne.n	800c112 <osThreadNew+0xca>
          mem = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	61bb      	str	r3, [r7, #24]
 800c10c:	e001      	b.n	800c112 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d110      	bne.n	800c13a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c120:	9202      	str	r2, [sp, #8]
 800c122:	9301      	str	r3, [sp, #4]
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	6a3a      	ldr	r2, [r7, #32]
 800c12c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 fe0c 	bl	800cd4c <xTaskCreateStatic>
 800c134:	4603      	mov	r3, r0
 800c136:	613b      	str	r3, [r7, #16]
 800c138:	e013      	b.n	800c162 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d110      	bne.n	800c162 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c140:	6a3b      	ldr	r3, [r7, #32]
 800c142:	b29a      	uxth	r2, r3
 800c144:	f107 0310 	add.w	r3, r7, #16
 800c148:	9301      	str	r3, [sp, #4]
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f000 fe57 	bl	800ce06 <xTaskCreate>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d001      	beq.n	800c162 <osThreadNew+0x11a>
            hTask = NULL;
 800c15e:	2300      	movs	r3, #0
 800c160:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c162:	693b      	ldr	r3, [r7, #16]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3728      	adds	r7, #40	; 0x28
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c174:	f3ef 8305 	mrs	r3, IPSR
 800c178:	60bb      	str	r3, [r7, #8]
  return(result);
 800c17a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d003      	beq.n	800c188 <osDelay+0x1c>
    stat = osErrorISR;
 800c180:	f06f 0305 	mvn.w	r3, #5
 800c184:	60fb      	str	r3, [r7, #12]
 800c186:	e007      	b.n	800c198 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c188:	2300      	movs	r3, #0
 800c18a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 ff7c 	bl	800d090 <vTaskDelay>
    }
  }

  return (stat);
 800c198:	68fb      	ldr	r3, [r7, #12]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4a07      	ldr	r2, [pc, #28]	; (800c1d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c1b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	4a06      	ldr	r2, [pc, #24]	; (800c1d4 <vApplicationGetIdleTaskMemory+0x30>)
 800c1ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2280      	movs	r2, #128	; 0x80
 800c1c0:	601a      	str	r2, [r3, #0]
}
 800c1c2:	bf00      	nop
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	200005bc 	.word	0x200005bc
 800c1d4:	20000618 	.word	0x20000618

0800c1d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	4a07      	ldr	r2, [pc, #28]	; (800c204 <vApplicationGetTimerTaskMemory+0x2c>)
 800c1e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	4a06      	ldr	r2, [pc, #24]	; (800c208 <vApplicationGetTimerTaskMemory+0x30>)
 800c1ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1f6:	601a      	str	r2, [r3, #0]
}
 800c1f8:	bf00      	nop
 800c1fa:	3714      	adds	r7, #20
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr
 800c204:	20000818 	.word	0x20000818
 800c208:	20000874 	.word	0x20000874

0800c20c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f103 0208 	add.w	r2, r3, #8
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c224:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f103 0208 	add.w	r2, r3, #8
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f103 0208 	add.w	r2, r3, #8
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c25a:	bf00      	nop
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c266:	b480      	push	{r7}
 800c268:	b085      	sub	sp, #20
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	689a      	ldr	r2, [r3, #8]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	1c5a      	adds	r2, r3, #1
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	601a      	str	r2, [r3, #0]
}
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b085      	sub	sp, #20
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2c4:	d103      	bne.n	800c2ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	60fb      	str	r3, [r7, #12]
 800c2cc:	e00c      	b.n	800c2e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e002      	b.n	800c2dc <vListInsert+0x2e>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	60fb      	str	r3, [r7, #12]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d2f6      	bcs.n	800c2d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	683a      	ldr	r2, [r7, #0]
 800c302:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	1c5a      	adds	r2, r3, #1
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	601a      	str	r2, [r3, #0]
}
 800c314:	bf00      	nop
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	6892      	ldr	r2, [r2, #8]
 800c336:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	6852      	ldr	r2, [r2, #4]
 800c340:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d103      	bne.n	800c354 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	689a      	ldr	r2, [r3, #8]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	1e5a      	subs	r2, r3, #1
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10a      	bne.n	800c39e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38c:	f383 8811 	msr	BASEPRI, r3
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c39a:	bf00      	nop
 800c39c:	e7fe      	b.n	800c39c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c39e:	f002 f851 	bl	800e444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3aa:	68f9      	ldr	r1, [r7, #12]
 800c3ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3ae:	fb01 f303 	mul.w	r3, r1, r3
 800c3b2:	441a      	add	r2, r3
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	68f9      	ldr	r1, [r7, #12]
 800c3d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3d4:	fb01 f303 	mul.w	r3, r1, r3
 800c3d8:	441a      	add	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	22ff      	movs	r2, #255	; 0xff
 800c3e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	22ff      	movs	r2, #255	; 0xff
 800c3ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d114      	bne.n	800c41e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d01a      	beq.n	800c432 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3310      	adds	r3, #16
 800c400:	4618      	mov	r0, r3
 800c402:	f001 f903 	bl	800d60c <xTaskRemoveFromEventList>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d012      	beq.n	800c432 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c40c:	4b0c      	ldr	r3, [pc, #48]	; (800c440 <xQueueGenericReset+0xcc>)
 800c40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	e009      	b.n	800c432 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3310      	adds	r3, #16
 800c422:	4618      	mov	r0, r3
 800c424:	f7ff fef2 	bl	800c20c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3324      	adds	r3, #36	; 0x24
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7ff feed 	bl	800c20c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c432:	f002 f837 	bl	800e4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c436:	2301      	movs	r3, #1
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	e000ed04 	.word	0xe000ed04

0800c444 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c444:	b580      	push	{r7, lr}
 800c446:	b08e      	sub	sp, #56	; 0x38
 800c448:	af02      	add	r7, sp, #8
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
 800c450:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d10a      	bne.n	800c46e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45c:	f383 8811 	msr	BASEPRI, r3
 800c460:	f3bf 8f6f 	isb	sy
 800c464:	f3bf 8f4f 	dsb	sy
 800c468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c46a:	bf00      	nop
 800c46c:	e7fe      	b.n	800c46c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10a      	bne.n	800c48a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c486:	bf00      	nop
 800c488:	e7fe      	b.n	800c488 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <xQueueGenericCreateStatic+0x52>
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d001      	beq.n	800c49a <xQueueGenericCreateStatic+0x56>
 800c496:	2301      	movs	r3, #1
 800c498:	e000      	b.n	800c49c <xQueueGenericCreateStatic+0x58>
 800c49a:	2300      	movs	r3, #0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10a      	bne.n	800c4b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	623b      	str	r3, [r7, #32]
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <xQueueGenericCreateStatic+0x7e>
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <xQueueGenericCreateStatic+0x82>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e000      	b.n	800c4c8 <xQueueGenericCreateStatic+0x84>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10a      	bne.n	800c4e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	61fb      	str	r3, [r7, #28]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c4e2:	2350      	movs	r3, #80	; 0x50
 800c4e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2b50      	cmp	r3, #80	; 0x50
 800c4ea:	d00a      	beq.n	800c502 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	61bb      	str	r3, [r7, #24]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c502:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00d      	beq.n	800c52a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c510:	2201      	movs	r2, #1
 800c512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c516:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	4613      	mov	r3, r2
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	68b9      	ldr	r1, [r7, #8]
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f000 f805 	bl	800c534 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3730      	adds	r7, #48	; 0x30
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d103      	bne.n	800c550 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	601a      	str	r2, [r3, #0]
 800c54e:	e002      	b.n	800c556 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c562:	2101      	movs	r1, #1
 800c564:	69b8      	ldr	r0, [r7, #24]
 800c566:	f7ff ff05 	bl	800c374 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	78fa      	ldrb	r2, [r7, #3]
 800c56e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
	...

0800c57c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b08e      	sub	sp, #56	; 0x38
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
 800c588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c58a:	2300      	movs	r3, #0
 800c58c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10a      	bne.n	800c5ae <xQueueGenericSend+0x32>
	__asm volatile
 800c598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5aa:	bf00      	nop
 800c5ac:	e7fe      	b.n	800c5ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d103      	bne.n	800c5bc <xQueueGenericSend+0x40>
 800c5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d101      	bne.n	800c5c0 <xQueueGenericSend+0x44>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e000      	b.n	800c5c2 <xQueueGenericSend+0x46>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10a      	bne.n	800c5dc <xQueueGenericSend+0x60>
	__asm volatile
 800c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5d8:	bf00      	nop
 800c5da:	e7fe      	b.n	800c5da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d103      	bne.n	800c5ea <xQueueGenericSend+0x6e>
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d101      	bne.n	800c5ee <xQueueGenericSend+0x72>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e000      	b.n	800c5f0 <xQueueGenericSend+0x74>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10a      	bne.n	800c60a <xQueueGenericSend+0x8e>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	623b      	str	r3, [r7, #32]
}
 800c606:	bf00      	nop
 800c608:	e7fe      	b.n	800c608 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c60a:	f001 f9bd 	bl	800d988 <xTaskGetSchedulerState>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d102      	bne.n	800c61a <xQueueGenericSend+0x9e>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <xQueueGenericSend+0xa2>
 800c61a:	2301      	movs	r3, #1
 800c61c:	e000      	b.n	800c620 <xQueueGenericSend+0xa4>
 800c61e:	2300      	movs	r3, #0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10a      	bne.n	800c63a <xQueueGenericSend+0xbe>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	61fb      	str	r3, [r7, #28]
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c63a:	f001 ff03 	bl	800e444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c646:	429a      	cmp	r2, r3
 800c648:	d302      	bcc.n	800c650 <xQueueGenericSend+0xd4>
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d129      	bne.n	800c6a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c656:	f000 fa0b 	bl	800ca70 <prvCopyDataToQueue>
 800c65a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c660:	2b00      	cmp	r3, #0
 800c662:	d010      	beq.n	800c686 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c666:	3324      	adds	r3, #36	; 0x24
 800c668:	4618      	mov	r0, r3
 800c66a:	f000 ffcf 	bl	800d60c <xTaskRemoveFromEventList>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d013      	beq.n	800c69c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c674:	4b3f      	ldr	r3, [pc, #252]	; (800c774 <xQueueGenericSend+0x1f8>)
 800c676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	f3bf 8f6f 	isb	sy
 800c684:	e00a      	b.n	800c69c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d007      	beq.n	800c69c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c68c:	4b39      	ldr	r3, [pc, #228]	; (800c774 <xQueueGenericSend+0x1f8>)
 800c68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c69c:	f001 ff02 	bl	800e4a4 <vPortExitCritical>
				return pdPASS;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e063      	b.n	800c76c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d103      	bne.n	800c6b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6aa:	f001 fefb 	bl	800e4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e05c      	b.n	800c76c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d106      	bne.n	800c6c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6b8:	f107 0314 	add.w	r3, r7, #20
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f001 f809 	bl	800d6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6c6:	f001 feed 	bl	800e4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6ca:	f000 fd7b 	bl	800d1c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6ce:	f001 feb9 	bl	800e444 <vPortEnterCritical>
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6d8:	b25b      	sxtb	r3, r3
 800c6da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6de:	d103      	bne.n	800c6e8 <xQueueGenericSend+0x16c>
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6ee:	b25b      	sxtb	r3, r3
 800c6f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6f4:	d103      	bne.n	800c6fe <xQueueGenericSend+0x182>
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6fe:	f001 fed1 	bl	800e4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c702:	1d3a      	adds	r2, r7, #4
 800c704:	f107 0314 	add.w	r3, r7, #20
 800c708:	4611      	mov	r1, r2
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 fff8 	bl	800d700 <xTaskCheckForTimeOut>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d124      	bne.n	800c760 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c718:	f000 faa2 	bl	800cc60 <prvIsQueueFull>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d018      	beq.n	800c754 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	3310      	adds	r3, #16
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	4611      	mov	r1, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 ff1e 	bl	800d56c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c732:	f000 fa2d 	bl	800cb90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c736:	f000 fd53 	bl	800d1e0 <xTaskResumeAll>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f47f af7c 	bne.w	800c63a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c742:	4b0c      	ldr	r3, [pc, #48]	; (800c774 <xQueueGenericSend+0x1f8>)
 800c744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c748:	601a      	str	r2, [r3, #0]
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	e772      	b.n	800c63a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c756:	f000 fa1b 	bl	800cb90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c75a:	f000 fd41 	bl	800d1e0 <xTaskResumeAll>
 800c75e:	e76c      	b.n	800c63a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c762:	f000 fa15 	bl	800cb90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c766:	f000 fd3b 	bl	800d1e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c76a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3738      	adds	r7, #56	; 0x38
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	e000ed04 	.word	0xe000ed04

0800c778 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b090      	sub	sp, #64	; 0x40
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d103      	bne.n	800c7b4 <xQueueGenericSendFromISR+0x3c>
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <xQueueGenericSendFromISR+0x40>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e000      	b.n	800c7ba <xQueueGenericSendFromISR+0x42>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d10a      	bne.n	800c7d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7d0:	bf00      	nop
 800c7d2:	e7fe      	b.n	800c7d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d103      	bne.n	800c7e2 <xQueueGenericSendFromISR+0x6a>
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d101      	bne.n	800c7e6 <xQueueGenericSendFromISR+0x6e>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e000      	b.n	800c7e8 <xQueueGenericSendFromISR+0x70>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10a      	bne.n	800c802 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	623b      	str	r3, [r7, #32]
}
 800c7fe:	bf00      	nop
 800c800:	e7fe      	b.n	800c800 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c802:	f001 ff01 	bl	800e608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c806:	f3ef 8211 	mrs	r2, BASEPRI
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	61fa      	str	r2, [r7, #28]
 800c81c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c81e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c820:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d302      	bcc.n	800c834 <xQueueGenericSendFromISR+0xbc>
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	2b02      	cmp	r3, #2
 800c832:	d12f      	bne.n	800c894 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	68b9      	ldr	r1, [r7, #8]
 800c848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c84a:	f000 f911 	bl	800ca70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c84e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c856:	d112      	bne.n	800c87e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d016      	beq.n	800c88e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	3324      	adds	r3, #36	; 0x24
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fed1 	bl	800d60c <xTaskRemoveFromEventList>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00e      	beq.n	800c88e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00b      	beq.n	800c88e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	601a      	str	r2, [r3, #0]
 800c87c:	e007      	b.n	800c88e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c87e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c882:	3301      	adds	r3, #1
 800c884:	b2db      	uxtb	r3, r3
 800c886:	b25a      	sxtb	r2, r3
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c88e:	2301      	movs	r3, #1
 800c890:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c892:	e001      	b.n	800c898 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c894:	2300      	movs	r3, #0
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c8a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3740      	adds	r7, #64	; 0x40
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08c      	sub	sp, #48	; 0x30
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <xQueueReceive+0x30>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	623b      	str	r3, [r7, #32]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d103      	bne.n	800c8ee <xQueueReceive+0x3e>
 800c8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <xQueueReceive+0x42>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e000      	b.n	800c8f4 <xQueueReceive+0x44>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10a      	bne.n	800c90e <xQueueReceive+0x5e>
	__asm volatile
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	61fb      	str	r3, [r7, #28]
}
 800c90a:	bf00      	nop
 800c90c:	e7fe      	b.n	800c90c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c90e:	f001 f83b 	bl	800d988 <xTaskGetSchedulerState>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d102      	bne.n	800c91e <xQueueReceive+0x6e>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <xQueueReceive+0x72>
 800c91e:	2301      	movs	r3, #1
 800c920:	e000      	b.n	800c924 <xQueueReceive+0x74>
 800c922:	2300      	movs	r3, #0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10a      	bne.n	800c93e <xQueueReceive+0x8e>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	61bb      	str	r3, [r7, #24]
}
 800c93a:	bf00      	nop
 800c93c:	e7fe      	b.n	800c93c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c93e:	f001 fd81 	bl	800e444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c946:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d01f      	beq.n	800c98e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c94e:	68b9      	ldr	r1, [r7, #8]
 800c950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c952:	f000 f8f7 	bl	800cb44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	1e5a      	subs	r2, r3, #1
 800c95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00f      	beq.n	800c986 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c968:	3310      	adds	r3, #16
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 fe4e 	bl	800d60c <xTaskRemoveFromEventList>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d007      	beq.n	800c986 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c976:	4b3d      	ldr	r3, [pc, #244]	; (800ca6c <xQueueReceive+0x1bc>)
 800c978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c986:	f001 fd8d 	bl	800e4a4 <vPortExitCritical>
				return pdPASS;
 800c98a:	2301      	movs	r3, #1
 800c98c:	e069      	b.n	800ca62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d103      	bne.n	800c99c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c994:	f001 fd86 	bl	800e4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c998:	2300      	movs	r3, #0
 800c99a:	e062      	b.n	800ca62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d106      	bne.n	800c9b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9a2:	f107 0310 	add.w	r3, r7, #16
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 fe94 	bl	800d6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9b0:	f001 fd78 	bl	800e4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9b4:	f000 fc06 	bl	800d1c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9b8:	f001 fd44 	bl	800e444 <vPortEnterCritical>
 800c9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9c2:	b25b      	sxtb	r3, r3
 800c9c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9c8:	d103      	bne.n	800c9d2 <xQueueReceive+0x122>
 800c9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9d8:	b25b      	sxtb	r3, r3
 800c9da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9de:	d103      	bne.n	800c9e8 <xQueueReceive+0x138>
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9e8:	f001 fd5c 	bl	800e4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9ec:	1d3a      	adds	r2, r7, #4
 800c9ee:	f107 0310 	add.w	r3, r7, #16
 800c9f2:	4611      	mov	r1, r2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 fe83 	bl	800d700 <xTaskCheckForTimeOut>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d123      	bne.n	800ca48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca02:	f000 f917 	bl	800cc34 <prvIsQueueEmpty>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d017      	beq.n	800ca3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0e:	3324      	adds	r3, #36	; 0x24
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	4611      	mov	r1, r2
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 fda9 	bl	800d56c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca1c:	f000 f8b8 	bl	800cb90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca20:	f000 fbde 	bl	800d1e0 <xTaskResumeAll>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d189      	bne.n	800c93e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ca2a:	4b10      	ldr	r3, [pc, #64]	; (800ca6c <xQueueReceive+0x1bc>)
 800ca2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	e780      	b.n	800c93e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca3e:	f000 f8a7 	bl	800cb90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca42:	f000 fbcd 	bl	800d1e0 <xTaskResumeAll>
 800ca46:	e77a      	b.n	800c93e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca4a:	f000 f8a1 	bl	800cb90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca4e:	f000 fbc7 	bl	800d1e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca54:	f000 f8ee 	bl	800cc34 <prvIsQueueEmpty>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f43f af6f 	beq.w	800c93e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3730      	adds	r7, #48	; 0x30
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	e000ed04 	.word	0xe000ed04

0800ca70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	60b9      	str	r1, [r7, #8]
 800ca7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10d      	bne.n	800caaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d14d      	bne.n	800cb32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 ff92 	bl	800d9c4 <xTaskPriorityDisinherit>
 800caa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	609a      	str	r2, [r3, #8]
 800caa8:	e043      	b.n	800cb32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d119      	bne.n	800cae4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6858      	ldr	r0, [r3, #4]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab8:	461a      	mov	r2, r3
 800caba:	68b9      	ldr	r1, [r7, #8]
 800cabc:	f002 fbf2 	bl	800f2a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	685a      	ldr	r2, [r3, #4]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac8:	441a      	add	r2, r3
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	685a      	ldr	r2, [r3, #4]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d32b      	bcc.n	800cb32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	605a      	str	r2, [r3, #4]
 800cae2:	e026      	b.n	800cb32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	68d8      	ldr	r0, [r3, #12]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caec:	461a      	mov	r2, r3
 800caee:	68b9      	ldr	r1, [r7, #8]
 800caf0:	f002 fbd8 	bl	800f2a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	68da      	ldr	r2, [r3, #12]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cafc:	425b      	negs	r3, r3
 800cafe:	441a      	add	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	68da      	ldr	r2, [r3, #12]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d207      	bcs.n	800cb20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	689a      	ldr	r2, [r3, #8]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb18:	425b      	negs	r3, r3
 800cb1a:	441a      	add	r2, r3
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d105      	bne.n	800cb32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cb3a:	697b      	ldr	r3, [r7, #20]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d018      	beq.n	800cb88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	68da      	ldr	r2, [r3, #12]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5e:	441a      	add	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	68da      	ldr	r2, [r3, #12]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d303      	bcc.n	800cb78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	68d9      	ldr	r1, [r3, #12]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb80:	461a      	mov	r2, r3
 800cb82:	6838      	ldr	r0, [r7, #0]
 800cb84:	f002 fb8e 	bl	800f2a4 <memcpy>
	}
}
 800cb88:	bf00      	nop
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb98:	f001 fc54 	bl	800e444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cba2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cba4:	e011      	b.n	800cbca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d012      	beq.n	800cbd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	3324      	adds	r3, #36	; 0x24
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 fd2a 	bl	800d60c <xTaskRemoveFromEventList>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d001      	beq.n	800cbc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cbbe:	f000 fe01 	bl	800d7c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	dce9      	bgt.n	800cba6 <prvUnlockQueue+0x16>
 800cbd2:	e000      	b.n	800cbd6 <prvUnlockQueue+0x46>
					break;
 800cbd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	22ff      	movs	r2, #255	; 0xff
 800cbda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cbde:	f001 fc61 	bl	800e4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cbe2:	f001 fc2f 	bl	800e444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbee:	e011      	b.n	800cc14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d012      	beq.n	800cc1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3310      	adds	r3, #16
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 fd05 	bl	800d60c <xTaskRemoveFromEventList>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cc08:	f000 fddc 	bl	800d7c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cc0c:	7bbb      	ldrb	r3, [r7, #14]
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	dce9      	bgt.n	800cbf0 <prvUnlockQueue+0x60>
 800cc1c:	e000      	b.n	800cc20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cc1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	22ff      	movs	r2, #255	; 0xff
 800cc24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cc28:	f001 fc3c 	bl	800e4a4 <vPortExitCritical>
}
 800cc2c:	bf00      	nop
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc3c:	f001 fc02 	bl	800e444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d102      	bne.n	800cc4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	60fb      	str	r3, [r7, #12]
 800cc4c:	e001      	b.n	800cc52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc52:	f001 fc27 	bl	800e4a4 <vPortExitCritical>

	return xReturn;
 800cc56:	68fb      	ldr	r3, [r7, #12]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc68:	f001 fbec 	bl	800e444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d102      	bne.n	800cc7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	e001      	b.n	800cc82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc82:	f001 fc0f 	bl	800e4a4 <vPortExitCritical>

	return xReturn;
 800cc86:	68fb      	ldr	r3, [r7, #12]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	e014      	b.n	800ccca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cca0:	4a0f      	ldr	r2, [pc, #60]	; (800cce0 <vQueueAddToRegistry+0x50>)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10b      	bne.n	800ccc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ccac:	490c      	ldr	r1, [pc, #48]	; (800cce0 <vQueueAddToRegistry+0x50>)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ccb6:	4a0a      	ldr	r2, [pc, #40]	; (800cce0 <vQueueAddToRegistry+0x50>)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	00db      	lsls	r3, r3, #3
 800ccbc:	4413      	add	r3, r2
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ccc2:	e006      	b.n	800ccd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2b07      	cmp	r3, #7
 800ccce:	d9e7      	bls.n	800cca0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ccd0:	bf00      	nop
 800ccd2:	bf00      	nop
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	20000c74 	.word	0x20000c74

0800cce4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ccf4:	f001 fba6 	bl	800e444 <vPortEnterCritical>
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccfe:	b25b      	sxtb	r3, r3
 800cd00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd04:	d103      	bne.n	800cd0e <vQueueWaitForMessageRestricted+0x2a>
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd14:	b25b      	sxtb	r3, r3
 800cd16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd1a:	d103      	bne.n	800cd24 <vQueueWaitForMessageRestricted+0x40>
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd24:	f001 fbbe 	bl	800e4a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d106      	bne.n	800cd3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	3324      	adds	r3, #36	; 0x24
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	68b9      	ldr	r1, [r7, #8]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 fc3b 	bl	800d5b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cd3e:	6978      	ldr	r0, [r7, #20]
 800cd40:	f7ff ff26 	bl	800cb90 <prvUnlockQueue>
	}
 800cd44:	bf00      	nop
 800cd46:	3718      	adds	r7, #24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08e      	sub	sp, #56	; 0x38
 800cd50:	af04      	add	r7, sp, #16
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10a      	bne.n	800cd76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	623b      	str	r3, [r7, #32]
}
 800cd72:	bf00      	nop
 800cd74:	e7fe      	b.n	800cd74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10a      	bne.n	800cd92 <xTaskCreateStatic+0x46>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	61fb      	str	r3, [r7, #28]
}
 800cd8e:	bf00      	nop
 800cd90:	e7fe      	b.n	800cd90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd92:	235c      	movs	r3, #92	; 0x5c
 800cd94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	2b5c      	cmp	r3, #92	; 0x5c
 800cd9a:	d00a      	beq.n	800cdb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	61bb      	str	r3, [r7, #24]
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cdb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d01e      	beq.n	800cdf8 <xTaskCreateStatic+0xac>
 800cdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d01b      	beq.n	800cdf8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdcc:	2202      	movs	r2, #2
 800cdce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	9303      	str	r3, [sp, #12]
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd8:	9302      	str	r3, [sp, #8]
 800cdda:	f107 0314 	add.w	r3, r7, #20
 800cdde:	9301      	str	r3, [sp, #4]
 800cde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	68b9      	ldr	r1, [r7, #8]
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f000 f850 	bl	800ce90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdf2:	f000 f8dd 	bl	800cfb0 <prvAddNewTaskToReadyList>
 800cdf6:	e001      	b.n	800cdfc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cdfc:	697b      	ldr	r3, [r7, #20]
	}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3728      	adds	r7, #40	; 0x28
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b08c      	sub	sp, #48	; 0x30
 800ce0a:	af04      	add	r7, sp, #16
 800ce0c:	60f8      	str	r0, [r7, #12]
 800ce0e:	60b9      	str	r1, [r7, #8]
 800ce10:	603b      	str	r3, [r7, #0]
 800ce12:	4613      	mov	r3, r2
 800ce14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce16:	88fb      	ldrh	r3, [r7, #6]
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f001 fc34 	bl	800e688 <pvPortMalloc>
 800ce20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00e      	beq.n	800ce46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce28:	205c      	movs	r0, #92	; 0x5c
 800ce2a:	f001 fc2d 	bl	800e688 <pvPortMalloc>
 800ce2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	697a      	ldr	r2, [r7, #20]
 800ce3a:	631a      	str	r2, [r3, #48]	; 0x30
 800ce3c:	e005      	b.n	800ce4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce3e:	6978      	ldr	r0, [r7, #20]
 800ce40:	f001 fcee 	bl	800e820 <vPortFree>
 800ce44:	e001      	b.n	800ce4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d017      	beq.n	800ce80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce58:	88fa      	ldrh	r2, [r7, #6]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	9303      	str	r3, [sp, #12]
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	9302      	str	r3, [sp, #8]
 800ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce64:	9301      	str	r3, [sp, #4]
 800ce66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	68b9      	ldr	r1, [r7, #8]
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f000 f80e 	bl	800ce90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce74:	69f8      	ldr	r0, [r7, #28]
 800ce76:	f000 f89b 	bl	800cfb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	61bb      	str	r3, [r7, #24]
 800ce7e:	e002      	b.n	800ce86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce86:	69bb      	ldr	r3, [r7, #24]
	}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3720      	adds	r7, #32
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b088      	sub	sp, #32
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	461a      	mov	r2, r3
 800cea8:	21a5      	movs	r1, #165	; 0xa5
 800ceaa:	f002 f9c7 	bl	800f23c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	f023 0307 	bic.w	r3, r3, #7
 800cec6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	f003 0307 	and.w	r3, r3, #7
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00a      	beq.n	800cee8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	617b      	str	r3, [r7, #20]
}
 800cee4:	bf00      	nop
 800cee6:	e7fe      	b.n	800cee6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d01f      	beq.n	800cf2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ceee:	2300      	movs	r3, #0
 800cef0:	61fb      	str	r3, [r7, #28]
 800cef2:	e012      	b.n	800cf1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	4413      	add	r3, r2
 800cefa:	7819      	ldrb	r1, [r3, #0]
 800cefc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	4413      	add	r3, r2
 800cf02:	3334      	adds	r3, #52	; 0x34
 800cf04:	460a      	mov	r2, r1
 800cf06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d006      	beq.n	800cf22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	3301      	adds	r3, #1
 800cf18:	61fb      	str	r3, [r7, #28]
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	2b0f      	cmp	r3, #15
 800cf1e:	d9e9      	bls.n	800cef4 <prvInitialiseNewTask+0x64>
 800cf20:	e000      	b.n	800cf24 <prvInitialiseNewTask+0x94>
			{
				break;
 800cf22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf2c:	e003      	b.n	800cf36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf38:	2b37      	cmp	r3, #55	; 0x37
 800cf3a:	d901      	bls.n	800cf40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf3c:	2337      	movs	r3, #55	; 0x37
 800cf3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4e:	2200      	movs	r2, #0
 800cf50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	3304      	adds	r3, #4
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff f978 	bl	800c24c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5e:	3318      	adds	r3, #24
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7ff f973 	bl	800c24c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	2200      	movs	r2, #0
 800cf80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	2200      	movs	r2, #0
 800cf86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	68f9      	ldr	r1, [r7, #12]
 800cf8e:	69b8      	ldr	r0, [r7, #24]
 800cf90:	f001 f928 	bl	800e1e4 <pxPortInitialiseStack>
 800cf94:	4602      	mov	r2, r0
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfa6:	bf00      	nop
 800cfa8:	3720      	adds	r7, #32
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
	...

0800cfb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cfb8:	f001 fa44 	bl	800e444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cfbc:	4b2d      	ldr	r3, [pc, #180]	; (800d074 <prvAddNewTaskToReadyList+0xc4>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	4a2c      	ldr	r2, [pc, #176]	; (800d074 <prvAddNewTaskToReadyList+0xc4>)
 800cfc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cfc6:	4b2c      	ldr	r3, [pc, #176]	; (800d078 <prvAddNewTaskToReadyList+0xc8>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d109      	bne.n	800cfe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cfce:	4a2a      	ldr	r2, [pc, #168]	; (800d078 <prvAddNewTaskToReadyList+0xc8>)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfd4:	4b27      	ldr	r3, [pc, #156]	; (800d074 <prvAddNewTaskToReadyList+0xc4>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d110      	bne.n	800cffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfdc:	f000 fc16 	bl	800d80c <prvInitialiseTaskLists>
 800cfe0:	e00d      	b.n	800cffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfe2:	4b26      	ldr	r3, [pc, #152]	; (800d07c <prvAddNewTaskToReadyList+0xcc>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d109      	bne.n	800cffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfea:	4b23      	ldr	r3, [pc, #140]	; (800d078 <prvAddNewTaskToReadyList+0xc8>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d802      	bhi.n	800cffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cff8:	4a1f      	ldr	r2, [pc, #124]	; (800d078 <prvAddNewTaskToReadyList+0xc8>)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cffe:	4b20      	ldr	r3, [pc, #128]	; (800d080 <prvAddNewTaskToReadyList+0xd0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	3301      	adds	r3, #1
 800d004:	4a1e      	ldr	r2, [pc, #120]	; (800d080 <prvAddNewTaskToReadyList+0xd0>)
 800d006:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d008:	4b1d      	ldr	r3, [pc, #116]	; (800d080 <prvAddNewTaskToReadyList+0xd0>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d014:	4b1b      	ldr	r3, [pc, #108]	; (800d084 <prvAddNewTaskToReadyList+0xd4>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d903      	bls.n	800d024 <prvAddNewTaskToReadyList+0x74>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d020:	4a18      	ldr	r2, [pc, #96]	; (800d084 <prvAddNewTaskToReadyList+0xd4>)
 800d022:	6013      	str	r3, [r2, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d028:	4613      	mov	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4413      	add	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4a15      	ldr	r2, [pc, #84]	; (800d088 <prvAddNewTaskToReadyList+0xd8>)
 800d032:	441a      	add	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	3304      	adds	r3, #4
 800d038:	4619      	mov	r1, r3
 800d03a:	4610      	mov	r0, r2
 800d03c:	f7ff f913 	bl	800c266 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d040:	f001 fa30 	bl	800e4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d044:	4b0d      	ldr	r3, [pc, #52]	; (800d07c <prvAddNewTaskToReadyList+0xcc>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00e      	beq.n	800d06a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d04c:	4b0a      	ldr	r3, [pc, #40]	; (800d078 <prvAddNewTaskToReadyList+0xc8>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d056:	429a      	cmp	r2, r3
 800d058:	d207      	bcs.n	800d06a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d05a:	4b0c      	ldr	r3, [pc, #48]	; (800d08c <prvAddNewTaskToReadyList+0xdc>)
 800d05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d060:	601a      	str	r2, [r3, #0]
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d06a:	bf00      	nop
 800d06c:	3708      	adds	r7, #8
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	20001188 	.word	0x20001188
 800d078:	20000cb4 	.word	0x20000cb4
 800d07c:	20001194 	.word	0x20001194
 800d080:	200011a4 	.word	0x200011a4
 800d084:	20001190 	.word	0x20001190
 800d088:	20000cb8 	.word	0x20000cb8
 800d08c:	e000ed04 	.word	0xe000ed04

0800d090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d098:	2300      	movs	r3, #0
 800d09a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d017      	beq.n	800d0d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d0a2:	4b13      	ldr	r3, [pc, #76]	; (800d0f0 <vTaskDelay+0x60>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00a      	beq.n	800d0c0 <vTaskDelay+0x30>
	__asm volatile
 800d0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ae:	f383 8811 	msr	BASEPRI, r3
 800d0b2:	f3bf 8f6f 	isb	sy
 800d0b6:	f3bf 8f4f 	dsb	sy
 800d0ba:	60bb      	str	r3, [r7, #8]
}
 800d0bc:	bf00      	nop
 800d0be:	e7fe      	b.n	800d0be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d0c0:	f000 f880 	bl	800d1c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 fcea 	bl	800daa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0cc:	f000 f888 	bl	800d1e0 <xTaskResumeAll>
 800d0d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d107      	bne.n	800d0e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d0d8:	4b06      	ldr	r3, [pc, #24]	; (800d0f4 <vTaskDelay+0x64>)
 800d0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0de:	601a      	str	r2, [r3, #0]
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0e8:	bf00      	nop
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	200011b0 	.word	0x200011b0
 800d0f4:	e000ed04 	.word	0xe000ed04

0800d0f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08a      	sub	sp, #40	; 0x28
 800d0fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0fe:	2300      	movs	r3, #0
 800d100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d102:	2300      	movs	r3, #0
 800d104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d106:	463a      	mov	r2, r7
 800d108:	1d39      	adds	r1, r7, #4
 800d10a:	f107 0308 	add.w	r3, r7, #8
 800d10e:	4618      	mov	r0, r3
 800d110:	f7ff f848 	bl	800c1a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	68ba      	ldr	r2, [r7, #8]
 800d11a:	9202      	str	r2, [sp, #8]
 800d11c:	9301      	str	r3, [sp, #4]
 800d11e:	2300      	movs	r3, #0
 800d120:	9300      	str	r3, [sp, #0]
 800d122:	2300      	movs	r3, #0
 800d124:	460a      	mov	r2, r1
 800d126:	4921      	ldr	r1, [pc, #132]	; (800d1ac <vTaskStartScheduler+0xb4>)
 800d128:	4821      	ldr	r0, [pc, #132]	; (800d1b0 <vTaskStartScheduler+0xb8>)
 800d12a:	f7ff fe0f 	bl	800cd4c <xTaskCreateStatic>
 800d12e:	4603      	mov	r3, r0
 800d130:	4a20      	ldr	r2, [pc, #128]	; (800d1b4 <vTaskStartScheduler+0xbc>)
 800d132:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d134:	4b1f      	ldr	r3, [pc, #124]	; (800d1b4 <vTaskStartScheduler+0xbc>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d13c:	2301      	movs	r3, #1
 800d13e:	617b      	str	r3, [r7, #20]
 800d140:	e001      	b.n	800d146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d142:	2300      	movs	r3, #0
 800d144:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d102      	bne.n	800d152 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d14c:	f000 fcfc 	bl	800db48 <xTimerCreateTimerTask>
 800d150:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d116      	bne.n	800d186 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15c:	f383 8811 	msr	BASEPRI, r3
 800d160:	f3bf 8f6f 	isb	sy
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	613b      	str	r3, [r7, #16]
}
 800d16a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d16c:	4b12      	ldr	r3, [pc, #72]	; (800d1b8 <vTaskStartScheduler+0xc0>)
 800d16e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d172:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d174:	4b11      	ldr	r3, [pc, #68]	; (800d1bc <vTaskStartScheduler+0xc4>)
 800d176:	2201      	movs	r2, #1
 800d178:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d17a:	4b11      	ldr	r3, [pc, #68]	; (800d1c0 <vTaskStartScheduler+0xc8>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d180:	f001 f8be 	bl	800e300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d184:	e00e      	b.n	800d1a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d18c:	d10a      	bne.n	800d1a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	60fb      	str	r3, [r7, #12]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <vTaskStartScheduler+0xaa>
}
 800d1a4:	bf00      	nop
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	0800fbfc 	.word	0x0800fbfc
 800d1b0:	0800d7dd 	.word	0x0800d7dd
 800d1b4:	200011ac 	.word	0x200011ac
 800d1b8:	200011a8 	.word	0x200011a8
 800d1bc:	20001194 	.word	0x20001194
 800d1c0:	2000118c 	.word	0x2000118c

0800d1c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d1c8:	4b04      	ldr	r3, [pc, #16]	; (800d1dc <vTaskSuspendAll+0x18>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	4a03      	ldr	r2, [pc, #12]	; (800d1dc <vTaskSuspendAll+0x18>)
 800d1d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d1d2:	bf00      	nop
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	200011b0 	.word	0x200011b0

0800d1e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1ee:	4b42      	ldr	r3, [pc, #264]	; (800d2f8 <xTaskResumeAll+0x118>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d10a      	bne.n	800d20c <xTaskResumeAll+0x2c>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	603b      	str	r3, [r7, #0]
}
 800d208:	bf00      	nop
 800d20a:	e7fe      	b.n	800d20a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d20c:	f001 f91a 	bl	800e444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d210:	4b39      	ldr	r3, [pc, #228]	; (800d2f8 <xTaskResumeAll+0x118>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3b01      	subs	r3, #1
 800d216:	4a38      	ldr	r2, [pc, #224]	; (800d2f8 <xTaskResumeAll+0x118>)
 800d218:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d21a:	4b37      	ldr	r3, [pc, #220]	; (800d2f8 <xTaskResumeAll+0x118>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d162      	bne.n	800d2e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d222:	4b36      	ldr	r3, [pc, #216]	; (800d2fc <xTaskResumeAll+0x11c>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d05e      	beq.n	800d2e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d22a:	e02f      	b.n	800d28c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d22c:	4b34      	ldr	r3, [pc, #208]	; (800d300 <xTaskResumeAll+0x120>)
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	3318      	adds	r3, #24
 800d238:	4618      	mov	r0, r3
 800d23a:	f7ff f871 	bl	800c320 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	3304      	adds	r3, #4
 800d242:	4618      	mov	r0, r3
 800d244:	f7ff f86c 	bl	800c320 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24c:	4b2d      	ldr	r3, [pc, #180]	; (800d304 <xTaskResumeAll+0x124>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	429a      	cmp	r2, r3
 800d252:	d903      	bls.n	800d25c <xTaskResumeAll+0x7c>
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d258:	4a2a      	ldr	r2, [pc, #168]	; (800d304 <xTaskResumeAll+0x124>)
 800d25a:	6013      	str	r3, [r2, #0]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d260:	4613      	mov	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4a27      	ldr	r2, [pc, #156]	; (800d308 <xTaskResumeAll+0x128>)
 800d26a:	441a      	add	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	3304      	adds	r3, #4
 800d270:	4619      	mov	r1, r3
 800d272:	4610      	mov	r0, r2
 800d274:	f7fe fff7 	bl	800c266 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27c:	4b23      	ldr	r3, [pc, #140]	; (800d30c <xTaskResumeAll+0x12c>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d282:	429a      	cmp	r2, r3
 800d284:	d302      	bcc.n	800d28c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d286:	4b22      	ldr	r3, [pc, #136]	; (800d310 <xTaskResumeAll+0x130>)
 800d288:	2201      	movs	r2, #1
 800d28a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d28c:	4b1c      	ldr	r3, [pc, #112]	; (800d300 <xTaskResumeAll+0x120>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1cb      	bne.n	800d22c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d001      	beq.n	800d29e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d29a:	f000 fb55 	bl	800d948 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d29e:	4b1d      	ldr	r3, [pc, #116]	; (800d314 <xTaskResumeAll+0x134>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d010      	beq.n	800d2cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d2aa:	f000 f847 	bl	800d33c <xTaskIncrementTick>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d2b4:	4b16      	ldr	r3, [pc, #88]	; (800d310 <xTaskResumeAll+0x130>)
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1f1      	bne.n	800d2aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d2c6:	4b13      	ldr	r3, [pc, #76]	; (800d314 <xTaskResumeAll+0x134>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d2cc:	4b10      	ldr	r3, [pc, #64]	; (800d310 <xTaskResumeAll+0x130>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d009      	beq.n	800d2e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d2d8:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <xTaskResumeAll+0x138>)
 800d2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2e8:	f001 f8dc 	bl	800e4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800d2ec:	68bb      	ldr	r3, [r7, #8]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	200011b0 	.word	0x200011b0
 800d2fc:	20001188 	.word	0x20001188
 800d300:	20001148 	.word	0x20001148
 800d304:	20001190 	.word	0x20001190
 800d308:	20000cb8 	.word	0x20000cb8
 800d30c:	20000cb4 	.word	0x20000cb4
 800d310:	2000119c 	.word	0x2000119c
 800d314:	20001198 	.word	0x20001198
 800d318:	e000ed04 	.word	0xe000ed04

0800d31c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d322:	4b05      	ldr	r3, [pc, #20]	; (800d338 <xTaskGetTickCount+0x1c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d328:	687b      	ldr	r3, [r7, #4]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	2000118c 	.word	0x2000118c

0800d33c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d342:	2300      	movs	r3, #0
 800d344:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d346:	4b4f      	ldr	r3, [pc, #316]	; (800d484 <xTaskIncrementTick+0x148>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f040 808f 	bne.w	800d46e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d350:	4b4d      	ldr	r3, [pc, #308]	; (800d488 <xTaskIncrementTick+0x14c>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	3301      	adds	r3, #1
 800d356:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d358:	4a4b      	ldr	r2, [pc, #300]	; (800d488 <xTaskIncrementTick+0x14c>)
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d120      	bne.n	800d3a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d364:	4b49      	ldr	r3, [pc, #292]	; (800d48c <xTaskIncrementTick+0x150>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00a      	beq.n	800d384 <xTaskIncrementTick+0x48>
	__asm volatile
 800d36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	603b      	str	r3, [r7, #0]
}
 800d380:	bf00      	nop
 800d382:	e7fe      	b.n	800d382 <xTaskIncrementTick+0x46>
 800d384:	4b41      	ldr	r3, [pc, #260]	; (800d48c <xTaskIncrementTick+0x150>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	60fb      	str	r3, [r7, #12]
 800d38a:	4b41      	ldr	r3, [pc, #260]	; (800d490 <xTaskIncrementTick+0x154>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a3f      	ldr	r2, [pc, #252]	; (800d48c <xTaskIncrementTick+0x150>)
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	4a3f      	ldr	r2, [pc, #252]	; (800d490 <xTaskIncrementTick+0x154>)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	4b3e      	ldr	r3, [pc, #248]	; (800d494 <xTaskIncrementTick+0x158>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	3301      	adds	r3, #1
 800d39e:	4a3d      	ldr	r2, [pc, #244]	; (800d494 <xTaskIncrementTick+0x158>)
 800d3a0:	6013      	str	r3, [r2, #0]
 800d3a2:	f000 fad1 	bl	800d948 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d3a6:	4b3c      	ldr	r3, [pc, #240]	; (800d498 <xTaskIncrementTick+0x15c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	693a      	ldr	r2, [r7, #16]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d349      	bcc.n	800d444 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3b0:	4b36      	ldr	r3, [pc, #216]	; (800d48c <xTaskIncrementTick+0x150>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d104      	bne.n	800d3c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3ba:	4b37      	ldr	r3, [pc, #220]	; (800d498 <xTaskIncrementTick+0x15c>)
 800d3bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3c0:	601a      	str	r2, [r3, #0]
					break;
 800d3c2:	e03f      	b.n	800d444 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c4:	4b31      	ldr	r3, [pc, #196]	; (800d48c <xTaskIncrementTick+0x150>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d203      	bcs.n	800d3e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3dc:	4a2e      	ldr	r2, [pc, #184]	; (800d498 <xTaskIncrementTick+0x15c>)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3e2:	e02f      	b.n	800d444 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fe ff99 	bl	800c320 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d004      	beq.n	800d400 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	3318      	adds	r3, #24
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fe ff90 	bl	800c320 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d404:	4b25      	ldr	r3, [pc, #148]	; (800d49c <xTaskIncrementTick+0x160>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d903      	bls.n	800d414 <xTaskIncrementTick+0xd8>
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d410:	4a22      	ldr	r2, [pc, #136]	; (800d49c <xTaskIncrementTick+0x160>)
 800d412:	6013      	str	r3, [r2, #0]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d418:	4613      	mov	r3, r2
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	4a1f      	ldr	r2, [pc, #124]	; (800d4a0 <xTaskIncrementTick+0x164>)
 800d422:	441a      	add	r2, r3
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	3304      	adds	r3, #4
 800d428:	4619      	mov	r1, r3
 800d42a:	4610      	mov	r0, r2
 800d42c:	f7fe ff1b 	bl	800c266 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d434:	4b1b      	ldr	r3, [pc, #108]	; (800d4a4 <xTaskIncrementTick+0x168>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d3b8      	bcc.n	800d3b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d43e:	2301      	movs	r3, #1
 800d440:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d442:	e7b5      	b.n	800d3b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d444:	4b17      	ldr	r3, [pc, #92]	; (800d4a4 <xTaskIncrementTick+0x168>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d44a:	4915      	ldr	r1, [pc, #84]	; (800d4a0 <xTaskIncrementTick+0x164>)
 800d44c:	4613      	mov	r3, r2
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	4413      	add	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	440b      	add	r3, r1
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d901      	bls.n	800d460 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d45c:	2301      	movs	r3, #1
 800d45e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d460:	4b11      	ldr	r3, [pc, #68]	; (800d4a8 <xTaskIncrementTick+0x16c>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d007      	beq.n	800d478 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d468:	2301      	movs	r3, #1
 800d46a:	617b      	str	r3, [r7, #20]
 800d46c:	e004      	b.n	800d478 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d46e:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <xTaskIncrementTick+0x170>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3301      	adds	r3, #1
 800d474:	4a0d      	ldr	r2, [pc, #52]	; (800d4ac <xTaskIncrementTick+0x170>)
 800d476:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d478:	697b      	ldr	r3, [r7, #20]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	200011b0 	.word	0x200011b0
 800d488:	2000118c 	.word	0x2000118c
 800d48c:	20001140 	.word	0x20001140
 800d490:	20001144 	.word	0x20001144
 800d494:	200011a0 	.word	0x200011a0
 800d498:	200011a8 	.word	0x200011a8
 800d49c:	20001190 	.word	0x20001190
 800d4a0:	20000cb8 	.word	0x20000cb8
 800d4a4:	20000cb4 	.word	0x20000cb4
 800d4a8:	2000119c 	.word	0x2000119c
 800d4ac:	20001198 	.word	0x20001198

0800d4b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4b6:	4b28      	ldr	r3, [pc, #160]	; (800d558 <vTaskSwitchContext+0xa8>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d4be:	4b27      	ldr	r3, [pc, #156]	; (800d55c <vTaskSwitchContext+0xac>)
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d4c4:	e041      	b.n	800d54a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d4c6:	4b25      	ldr	r3, [pc, #148]	; (800d55c <vTaskSwitchContext+0xac>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4cc:	4b24      	ldr	r3, [pc, #144]	; (800d560 <vTaskSwitchContext+0xb0>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	60fb      	str	r3, [r7, #12]
 800d4d2:	e010      	b.n	800d4f6 <vTaskSwitchContext+0x46>
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10a      	bne.n	800d4f0 <vTaskSwitchContext+0x40>
	__asm volatile
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	607b      	str	r3, [r7, #4]
}
 800d4ec:	bf00      	nop
 800d4ee:	e7fe      	b.n	800d4ee <vTaskSwitchContext+0x3e>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	491b      	ldr	r1, [pc, #108]	; (800d564 <vTaskSwitchContext+0xb4>)
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	4413      	add	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	440b      	add	r3, r1
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d0e4      	beq.n	800d4d4 <vTaskSwitchContext+0x24>
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	4613      	mov	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4413      	add	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4a13      	ldr	r2, [pc, #76]	; (800d564 <vTaskSwitchContext+0xb4>)
 800d516:	4413      	add	r3, r2
 800d518:	60bb      	str	r3, [r7, #8]
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	685a      	ldr	r2, [r3, #4]
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	605a      	str	r2, [r3, #4]
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	3308      	adds	r3, #8
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d104      	bne.n	800d53a <vTaskSwitchContext+0x8a>
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	605a      	str	r2, [r3, #4]
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	4a09      	ldr	r2, [pc, #36]	; (800d568 <vTaskSwitchContext+0xb8>)
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	4a06      	ldr	r2, [pc, #24]	; (800d560 <vTaskSwitchContext+0xb0>)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6013      	str	r3, [r2, #0]
}
 800d54a:	bf00      	nop
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	200011b0 	.word	0x200011b0
 800d55c:	2000119c 	.word	0x2000119c
 800d560:	20001190 	.word	0x20001190
 800d564:	20000cb8 	.word	0x20000cb8
 800d568:	20000cb4 	.word	0x20000cb4

0800d56c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10a      	bne.n	800d592 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d580:	f383 8811 	msr	BASEPRI, r3
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	60fb      	str	r3, [r7, #12]
}
 800d58e:	bf00      	nop
 800d590:	e7fe      	b.n	800d590 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d592:	4b07      	ldr	r3, [pc, #28]	; (800d5b0 <vTaskPlaceOnEventList+0x44>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	3318      	adds	r3, #24
 800d598:	4619      	mov	r1, r3
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7fe fe87 	bl	800c2ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d5a0:	2101      	movs	r1, #1
 800d5a2:	6838      	ldr	r0, [r7, #0]
 800d5a4:	f000 fa7c 	bl	800daa0 <prvAddCurrentTaskToDelayedList>
}
 800d5a8:	bf00      	nop
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	20000cb4 	.word	0x20000cb4

0800d5b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b086      	sub	sp, #24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10a      	bne.n	800d5dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	617b      	str	r3, [r7, #20]
}
 800d5d8:	bf00      	nop
 800d5da:	e7fe      	b.n	800d5da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5dc:	4b0a      	ldr	r3, [pc, #40]	; (800d608 <vTaskPlaceOnEventListRestricted+0x54>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3318      	adds	r3, #24
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f7fe fe3e 	bl	800c266 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d5f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d5f6:	6879      	ldr	r1, [r7, #4]
 800d5f8:	68b8      	ldr	r0, [r7, #8]
 800d5fa:	f000 fa51 	bl	800daa0 <prvAddCurrentTaskToDelayedList>
	}
 800d5fe:	bf00      	nop
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	20000cb4 	.word	0x20000cb4

0800d60c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10a      	bne.n	800d638 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	60fb      	str	r3, [r7, #12]
}
 800d634:	bf00      	nop
 800d636:	e7fe      	b.n	800d636 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	3318      	adds	r3, #24
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fe fe6f 	bl	800c320 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d642:	4b1e      	ldr	r3, [pc, #120]	; (800d6bc <xTaskRemoveFromEventList+0xb0>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d11d      	bne.n	800d686 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	3304      	adds	r3, #4
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fe66 	bl	800c320 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d658:	4b19      	ldr	r3, [pc, #100]	; (800d6c0 <xTaskRemoveFromEventList+0xb4>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d903      	bls.n	800d668 <xTaskRemoveFromEventList+0x5c>
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d664:	4a16      	ldr	r2, [pc, #88]	; (800d6c0 <xTaskRemoveFromEventList+0xb4>)
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d66c:	4613      	mov	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	4413      	add	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4a13      	ldr	r2, [pc, #76]	; (800d6c4 <xTaskRemoveFromEventList+0xb8>)
 800d676:	441a      	add	r2, r3
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	3304      	adds	r3, #4
 800d67c:	4619      	mov	r1, r3
 800d67e:	4610      	mov	r0, r2
 800d680:	f7fe fdf1 	bl	800c266 <vListInsertEnd>
 800d684:	e005      	b.n	800d692 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	3318      	adds	r3, #24
 800d68a:	4619      	mov	r1, r3
 800d68c:	480e      	ldr	r0, [pc, #56]	; (800d6c8 <xTaskRemoveFromEventList+0xbc>)
 800d68e:	f7fe fdea 	bl	800c266 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d696:	4b0d      	ldr	r3, [pc, #52]	; (800d6cc <xTaskRemoveFromEventList+0xc0>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d905      	bls.n	800d6ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d6a4:	4b0a      	ldr	r3, [pc, #40]	; (800d6d0 <xTaskRemoveFromEventList+0xc4>)
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	e001      	b.n	800d6b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d6b0:	697b      	ldr	r3, [r7, #20]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3718      	adds	r7, #24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	200011b0 	.word	0x200011b0
 800d6c0:	20001190 	.word	0x20001190
 800d6c4:	20000cb8 	.word	0x20000cb8
 800d6c8:	20001148 	.word	0x20001148
 800d6cc:	20000cb4 	.word	0x20000cb4
 800d6d0:	2000119c 	.word	0x2000119c

0800d6d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6dc:	4b06      	ldr	r3, [pc, #24]	; (800d6f8 <vTaskInternalSetTimeOutState+0x24>)
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6e4:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <vTaskInternalSetTimeOutState+0x28>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	605a      	str	r2, [r3, #4]
}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr
 800d6f8:	200011a0 	.word	0x200011a0
 800d6fc:	2000118c 	.word	0x2000118c

0800d700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b088      	sub	sp, #32
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10a      	bne.n	800d726 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	613b      	str	r3, [r7, #16]
}
 800d722:	bf00      	nop
 800d724:	e7fe      	b.n	800d724 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d10a      	bne.n	800d742 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	60fb      	str	r3, [r7, #12]
}
 800d73e:	bf00      	nop
 800d740:	e7fe      	b.n	800d740 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d742:	f000 fe7f 	bl	800e444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d746:	4b1d      	ldr	r3, [pc, #116]	; (800d7bc <xTaskCheckForTimeOut+0xbc>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	69ba      	ldr	r2, [r7, #24]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d75e:	d102      	bne.n	800d766 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d760:	2300      	movs	r3, #0
 800d762:	61fb      	str	r3, [r7, #28]
 800d764:	e023      	b.n	800d7ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	4b15      	ldr	r3, [pc, #84]	; (800d7c0 <xTaskCheckForTimeOut+0xc0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d007      	beq.n	800d782 <xTaskCheckForTimeOut+0x82>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	69ba      	ldr	r2, [r7, #24]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d302      	bcc.n	800d782 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d77c:	2301      	movs	r3, #1
 800d77e:	61fb      	str	r3, [r7, #28]
 800d780:	e015      	b.n	800d7ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d20b      	bcs.n	800d7a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	1ad2      	subs	r2, r2, r3
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff ff9b 	bl	800d6d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	61fb      	str	r3, [r7, #28]
 800d7a2:	e004      	b.n	800d7ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d7ae:	f000 fe79 	bl	800e4a4 <vPortExitCritical>

	return xReturn;
 800d7b2:	69fb      	ldr	r3, [r7, #28]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3720      	adds	r7, #32
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	2000118c 	.word	0x2000118c
 800d7c0:	200011a0 	.word	0x200011a0

0800d7c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7c8:	4b03      	ldr	r3, [pc, #12]	; (800d7d8 <vTaskMissedYield+0x14>)
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	601a      	str	r2, [r3, #0]
}
 800d7ce:	bf00      	nop
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	2000119c 	.word	0x2000119c

0800d7dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d7e4:	f000 f852 	bl	800d88c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d7e8:	4b06      	ldr	r3, [pc, #24]	; (800d804 <prvIdleTask+0x28>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d9f9      	bls.n	800d7e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d7f0:	4b05      	ldr	r3, [pc, #20]	; (800d808 <prvIdleTask+0x2c>)
 800d7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f6:	601a      	str	r2, [r3, #0]
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d800:	e7f0      	b.n	800d7e4 <prvIdleTask+0x8>
 800d802:	bf00      	nop
 800d804:	20000cb8 	.word	0x20000cb8
 800d808:	e000ed04 	.word	0xe000ed04

0800d80c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d812:	2300      	movs	r3, #0
 800d814:	607b      	str	r3, [r7, #4]
 800d816:	e00c      	b.n	800d832 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	4613      	mov	r3, r2
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	4413      	add	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4a12      	ldr	r2, [pc, #72]	; (800d86c <prvInitialiseTaskLists+0x60>)
 800d824:	4413      	add	r3, r2
 800d826:	4618      	mov	r0, r3
 800d828:	f7fe fcf0 	bl	800c20c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	3301      	adds	r3, #1
 800d830:	607b      	str	r3, [r7, #4]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b37      	cmp	r3, #55	; 0x37
 800d836:	d9ef      	bls.n	800d818 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d838:	480d      	ldr	r0, [pc, #52]	; (800d870 <prvInitialiseTaskLists+0x64>)
 800d83a:	f7fe fce7 	bl	800c20c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d83e:	480d      	ldr	r0, [pc, #52]	; (800d874 <prvInitialiseTaskLists+0x68>)
 800d840:	f7fe fce4 	bl	800c20c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d844:	480c      	ldr	r0, [pc, #48]	; (800d878 <prvInitialiseTaskLists+0x6c>)
 800d846:	f7fe fce1 	bl	800c20c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d84a:	480c      	ldr	r0, [pc, #48]	; (800d87c <prvInitialiseTaskLists+0x70>)
 800d84c:	f7fe fcde 	bl	800c20c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d850:	480b      	ldr	r0, [pc, #44]	; (800d880 <prvInitialiseTaskLists+0x74>)
 800d852:	f7fe fcdb 	bl	800c20c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d856:	4b0b      	ldr	r3, [pc, #44]	; (800d884 <prvInitialiseTaskLists+0x78>)
 800d858:	4a05      	ldr	r2, [pc, #20]	; (800d870 <prvInitialiseTaskLists+0x64>)
 800d85a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d85c:	4b0a      	ldr	r3, [pc, #40]	; (800d888 <prvInitialiseTaskLists+0x7c>)
 800d85e:	4a05      	ldr	r2, [pc, #20]	; (800d874 <prvInitialiseTaskLists+0x68>)
 800d860:	601a      	str	r2, [r3, #0]
}
 800d862:	bf00      	nop
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	20000cb8 	.word	0x20000cb8
 800d870:	20001118 	.word	0x20001118
 800d874:	2000112c 	.word	0x2000112c
 800d878:	20001148 	.word	0x20001148
 800d87c:	2000115c 	.word	0x2000115c
 800d880:	20001174 	.word	0x20001174
 800d884:	20001140 	.word	0x20001140
 800d888:	20001144 	.word	0x20001144

0800d88c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d892:	e019      	b.n	800d8c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d894:	f000 fdd6 	bl	800e444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d898:	4b10      	ldr	r3, [pc, #64]	; (800d8dc <prvCheckTasksWaitingTermination+0x50>)
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3304      	adds	r3, #4
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fe fd3b 	bl	800c320 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8aa:	4b0d      	ldr	r3, [pc, #52]	; (800d8e0 <prvCheckTasksWaitingTermination+0x54>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	4a0b      	ldr	r2, [pc, #44]	; (800d8e0 <prvCheckTasksWaitingTermination+0x54>)
 800d8b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8b4:	4b0b      	ldr	r3, [pc, #44]	; (800d8e4 <prvCheckTasksWaitingTermination+0x58>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	4a0a      	ldr	r2, [pc, #40]	; (800d8e4 <prvCheckTasksWaitingTermination+0x58>)
 800d8bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8be:	f000 fdf1 	bl	800e4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f810 	bl	800d8e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8c8:	4b06      	ldr	r3, [pc, #24]	; (800d8e4 <prvCheckTasksWaitingTermination+0x58>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d1e1      	bne.n	800d894 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8d0:	bf00      	nop
 800d8d2:	bf00      	nop
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	2000115c 	.word	0x2000115c
 800d8e0:	20001188 	.word	0x20001188
 800d8e4:	20001170 	.word	0x20001170

0800d8e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d108      	bne.n	800d90c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 ff8e 	bl	800e820 <vPortFree>
				vPortFree( pxTCB );
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 ff8b 	bl	800e820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d90a:	e018      	b.n	800d93e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d912:	2b01      	cmp	r3, #1
 800d914:	d103      	bne.n	800d91e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 ff82 	bl	800e820 <vPortFree>
	}
 800d91c:	e00f      	b.n	800d93e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d924:	2b02      	cmp	r3, #2
 800d926:	d00a      	beq.n	800d93e <prvDeleteTCB+0x56>
	__asm volatile
 800d928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	60fb      	str	r3, [r7, #12]
}
 800d93a:	bf00      	nop
 800d93c:	e7fe      	b.n	800d93c <prvDeleteTCB+0x54>
	}
 800d93e:	bf00      	nop
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d94e:	4b0c      	ldr	r3, [pc, #48]	; (800d980 <prvResetNextTaskUnblockTime+0x38>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d104      	bne.n	800d962 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d958:	4b0a      	ldr	r3, [pc, #40]	; (800d984 <prvResetNextTaskUnblockTime+0x3c>)
 800d95a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d95e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d960:	e008      	b.n	800d974 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d962:	4b07      	ldr	r3, [pc, #28]	; (800d980 <prvResetNextTaskUnblockTime+0x38>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	4a04      	ldr	r2, [pc, #16]	; (800d984 <prvResetNextTaskUnblockTime+0x3c>)
 800d972:	6013      	str	r3, [r2, #0]
}
 800d974:	bf00      	nop
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	20001140 	.word	0x20001140
 800d984:	200011a8 	.word	0x200011a8

0800d988 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d98e:	4b0b      	ldr	r3, [pc, #44]	; (800d9bc <xTaskGetSchedulerState+0x34>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d102      	bne.n	800d99c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d996:	2301      	movs	r3, #1
 800d998:	607b      	str	r3, [r7, #4]
 800d99a:	e008      	b.n	800d9ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d99c:	4b08      	ldr	r3, [pc, #32]	; (800d9c0 <xTaskGetSchedulerState+0x38>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d102      	bne.n	800d9aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d9a4:	2302      	movs	r3, #2
 800d9a6:	607b      	str	r3, [r7, #4]
 800d9a8:	e001      	b.n	800d9ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d9ae:	687b      	ldr	r3, [r7, #4]
	}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	20001194 	.word	0x20001194
 800d9c0:	200011b0 	.word	0x200011b0

0800d9c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d056      	beq.n	800da88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9da:	4b2e      	ldr	r3, [pc, #184]	; (800da94 <xTaskPriorityDisinherit+0xd0>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	693a      	ldr	r2, [r7, #16]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d00a      	beq.n	800d9fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	60fb      	str	r3, [r7, #12]
}
 800d9f6:	bf00      	nop
 800d9f8:	e7fe      	b.n	800d9f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d10a      	bne.n	800da18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da06:	f383 8811 	msr	BASEPRI, r3
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	60bb      	str	r3, [r7, #8]
}
 800da14:	bf00      	nop
 800da16:	e7fe      	b.n	800da16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da1c:	1e5a      	subs	r2, r3, #1
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d02c      	beq.n	800da88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da32:	2b00      	cmp	r3, #0
 800da34:	d128      	bne.n	800da88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	3304      	adds	r3, #4
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fe fc70 	bl	800c320 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da58:	4b0f      	ldr	r3, [pc, #60]	; (800da98 <xTaskPriorityDisinherit+0xd4>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d903      	bls.n	800da68 <xTaskPriorityDisinherit+0xa4>
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da64:	4a0c      	ldr	r2, [pc, #48]	; (800da98 <xTaskPriorityDisinherit+0xd4>)
 800da66:	6013      	str	r3, [r2, #0]
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da6c:	4613      	mov	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4413      	add	r3, r2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4a09      	ldr	r2, [pc, #36]	; (800da9c <xTaskPriorityDisinherit+0xd8>)
 800da76:	441a      	add	r2, r3
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	3304      	adds	r3, #4
 800da7c:	4619      	mov	r1, r3
 800da7e:	4610      	mov	r0, r2
 800da80:	f7fe fbf1 	bl	800c266 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da84:	2301      	movs	r3, #1
 800da86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da88:	697b      	ldr	r3, [r7, #20]
	}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3718      	adds	r7, #24
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	20000cb4 	.word	0x20000cb4
 800da98:	20001190 	.word	0x20001190
 800da9c:	20000cb8 	.word	0x20000cb8

0800daa0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800daaa:	4b21      	ldr	r3, [pc, #132]	; (800db30 <prvAddCurrentTaskToDelayedList+0x90>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dab0:	4b20      	ldr	r3, [pc, #128]	; (800db34 <prvAddCurrentTaskToDelayedList+0x94>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	3304      	adds	r3, #4
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fe fc32 	bl	800c320 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dac2:	d10a      	bne.n	800dada <prvAddCurrentTaskToDelayedList+0x3a>
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d007      	beq.n	800dada <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daca:	4b1a      	ldr	r3, [pc, #104]	; (800db34 <prvAddCurrentTaskToDelayedList+0x94>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3304      	adds	r3, #4
 800dad0:	4619      	mov	r1, r3
 800dad2:	4819      	ldr	r0, [pc, #100]	; (800db38 <prvAddCurrentTaskToDelayedList+0x98>)
 800dad4:	f7fe fbc7 	bl	800c266 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dad8:	e026      	b.n	800db28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4413      	add	r3, r2
 800dae0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dae2:	4b14      	ldr	r3, [pc, #80]	; (800db34 <prvAddCurrentTaskToDelayedList+0x94>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	68ba      	ldr	r2, [r7, #8]
 800dae8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800daea:	68ba      	ldr	r2, [r7, #8]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d209      	bcs.n	800db06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daf2:	4b12      	ldr	r3, [pc, #72]	; (800db3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	4b0f      	ldr	r3, [pc, #60]	; (800db34 <prvAddCurrentTaskToDelayedList+0x94>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	3304      	adds	r3, #4
 800dafc:	4619      	mov	r1, r3
 800dafe:	4610      	mov	r0, r2
 800db00:	f7fe fbd5 	bl	800c2ae <vListInsert>
}
 800db04:	e010      	b.n	800db28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db06:	4b0e      	ldr	r3, [pc, #56]	; (800db40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	4b0a      	ldr	r3, [pc, #40]	; (800db34 <prvAddCurrentTaskToDelayedList+0x94>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3304      	adds	r3, #4
 800db10:	4619      	mov	r1, r3
 800db12:	4610      	mov	r0, r2
 800db14:	f7fe fbcb 	bl	800c2ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db18:	4b0a      	ldr	r3, [pc, #40]	; (800db44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d202      	bcs.n	800db28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db22:	4a08      	ldr	r2, [pc, #32]	; (800db44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	6013      	str	r3, [r2, #0]
}
 800db28:	bf00      	nop
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	2000118c 	.word	0x2000118c
 800db34:	20000cb4 	.word	0x20000cb4
 800db38:	20001174 	.word	0x20001174
 800db3c:	20001144 	.word	0x20001144
 800db40:	20001140 	.word	0x20001140
 800db44:	200011a8 	.word	0x200011a8

0800db48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b08a      	sub	sp, #40	; 0x28
 800db4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db4e:	2300      	movs	r3, #0
 800db50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db52:	f000 fb07 	bl	800e164 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db56:	4b1c      	ldr	r3, [pc, #112]	; (800dbc8 <xTimerCreateTimerTask+0x80>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d021      	beq.n	800dba2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db5e:	2300      	movs	r3, #0
 800db60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db62:	2300      	movs	r3, #0
 800db64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db66:	1d3a      	adds	r2, r7, #4
 800db68:	f107 0108 	add.w	r1, r7, #8
 800db6c:	f107 030c 	add.w	r3, r7, #12
 800db70:	4618      	mov	r0, r3
 800db72:	f7fe fb31 	bl	800c1d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db76:	6879      	ldr	r1, [r7, #4]
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	68fa      	ldr	r2, [r7, #12]
 800db7c:	9202      	str	r2, [sp, #8]
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	2302      	movs	r3, #2
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	2300      	movs	r3, #0
 800db86:	460a      	mov	r2, r1
 800db88:	4910      	ldr	r1, [pc, #64]	; (800dbcc <xTimerCreateTimerTask+0x84>)
 800db8a:	4811      	ldr	r0, [pc, #68]	; (800dbd0 <xTimerCreateTimerTask+0x88>)
 800db8c:	f7ff f8de 	bl	800cd4c <xTaskCreateStatic>
 800db90:	4603      	mov	r3, r0
 800db92:	4a10      	ldr	r2, [pc, #64]	; (800dbd4 <xTimerCreateTimerTask+0x8c>)
 800db94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800db96:	4b0f      	ldr	r3, [pc, #60]	; (800dbd4 <xTimerCreateTimerTask+0x8c>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d001      	beq.n	800dba2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800db9e:	2301      	movs	r3, #1
 800dba0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d10a      	bne.n	800dbbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbac:	f383 8811 	msr	BASEPRI, r3
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	613b      	str	r3, [r7, #16]
}
 800dbba:	bf00      	nop
 800dbbc:	e7fe      	b.n	800dbbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dbbe:	697b      	ldr	r3, [r7, #20]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3718      	adds	r7, #24
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	200011e4 	.word	0x200011e4
 800dbcc:	0800fc04 	.word	0x0800fc04
 800dbd0:	0800dd0d 	.word	0x0800dd0d
 800dbd4:	200011e8 	.word	0x200011e8

0800dbd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08a      	sub	sp, #40	; 0x28
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
 800dbe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d10a      	bne.n	800dc06 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	623b      	str	r3, [r7, #32]
}
 800dc02:	bf00      	nop
 800dc04:	e7fe      	b.n	800dc04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc06:	4b1a      	ldr	r3, [pc, #104]	; (800dc70 <xTimerGenericCommand+0x98>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d02a      	beq.n	800dc64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	2b05      	cmp	r3, #5
 800dc1e:	dc18      	bgt.n	800dc52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc20:	f7ff feb2 	bl	800d988 <xTaskGetSchedulerState>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b02      	cmp	r3, #2
 800dc28:	d109      	bne.n	800dc3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc2a:	4b11      	ldr	r3, [pc, #68]	; (800dc70 <xTimerGenericCommand+0x98>)
 800dc2c:	6818      	ldr	r0, [r3, #0]
 800dc2e:	f107 0110 	add.w	r1, r7, #16
 800dc32:	2300      	movs	r3, #0
 800dc34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc36:	f7fe fca1 	bl	800c57c <xQueueGenericSend>
 800dc3a:	6278      	str	r0, [r7, #36]	; 0x24
 800dc3c:	e012      	b.n	800dc64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc3e:	4b0c      	ldr	r3, [pc, #48]	; (800dc70 <xTimerGenericCommand+0x98>)
 800dc40:	6818      	ldr	r0, [r3, #0]
 800dc42:	f107 0110 	add.w	r1, r7, #16
 800dc46:	2300      	movs	r3, #0
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f7fe fc97 	bl	800c57c <xQueueGenericSend>
 800dc4e:	6278      	str	r0, [r7, #36]	; 0x24
 800dc50:	e008      	b.n	800dc64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc52:	4b07      	ldr	r3, [pc, #28]	; (800dc70 <xTimerGenericCommand+0x98>)
 800dc54:	6818      	ldr	r0, [r3, #0]
 800dc56:	f107 0110 	add.w	r1, r7, #16
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	f7fe fd8b 	bl	800c778 <xQueueGenericSendFromISR>
 800dc62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3728      	adds	r7, #40	; 0x28
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	200011e4 	.word	0x200011e4

0800dc74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af02      	add	r7, sp, #8
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc7e:	4b22      	ldr	r3, [pc, #136]	; (800dd08 <prvProcessExpiredTimer+0x94>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7fe fb47 	bl	800c320 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc98:	f003 0304 	and.w	r3, r3, #4
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d022      	beq.n	800dce6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	699a      	ldr	r2, [r3, #24]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	18d1      	adds	r1, r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	6978      	ldr	r0, [r7, #20]
 800dcae:	f000 f8d1 	bl	800de54 <prvInsertTimerInActiveList>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d01f      	beq.n	800dcf8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcb8:	2300      	movs	r3, #0
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	6978      	ldr	r0, [r7, #20]
 800dcc4:	f7ff ff88 	bl	800dbd8 <xTimerGenericCommand>
 800dcc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d113      	bne.n	800dcf8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	60fb      	str	r3, [r7, #12]
}
 800dce2:	bf00      	nop
 800dce4:	e7fe      	b.n	800dce4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcec:	f023 0301 	bic.w	r3, r3, #1
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	6a1b      	ldr	r3, [r3, #32]
 800dcfc:	6978      	ldr	r0, [r7, #20]
 800dcfe:	4798      	blx	r3
}
 800dd00:	bf00      	nop
 800dd02:	3718      	adds	r7, #24
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	200011dc 	.word	0x200011dc

0800dd0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd14:	f107 0308 	add.w	r3, r7, #8
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f000 f857 	bl	800ddcc <prvGetNextExpireTime>
 800dd1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	4619      	mov	r1, r3
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f000 f803 	bl	800dd30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd2a:	f000 f8d5 	bl	800ded8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd2e:	e7f1      	b.n	800dd14 <prvTimerTask+0x8>

0800dd30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd3a:	f7ff fa43 	bl	800d1c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd3e:	f107 0308 	add.w	r3, r7, #8
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 f866 	bl	800de14 <prvSampleTimeNow>
 800dd48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d130      	bne.n	800ddb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d10a      	bne.n	800dd6c <prvProcessTimerOrBlockTask+0x3c>
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d806      	bhi.n	800dd6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd5e:	f7ff fa3f 	bl	800d1e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd62:	68f9      	ldr	r1, [r7, #12]
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff ff85 	bl	800dc74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd6a:	e024      	b.n	800ddb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d008      	beq.n	800dd84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd72:	4b13      	ldr	r3, [pc, #76]	; (800ddc0 <prvProcessTimerOrBlockTask+0x90>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d101      	bne.n	800dd80 <prvProcessTimerOrBlockTask+0x50>
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e000      	b.n	800dd82 <prvProcessTimerOrBlockTask+0x52>
 800dd80:	2300      	movs	r3, #0
 800dd82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dd84:	4b0f      	ldr	r3, [pc, #60]	; (800ddc4 <prvProcessTimerOrBlockTask+0x94>)
 800dd86:	6818      	ldr	r0, [r3, #0]
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	683a      	ldr	r2, [r7, #0]
 800dd90:	4619      	mov	r1, r3
 800dd92:	f7fe ffa7 	bl	800cce4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dd96:	f7ff fa23 	bl	800d1e0 <xTaskResumeAll>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10a      	bne.n	800ddb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dda0:	4b09      	ldr	r3, [pc, #36]	; (800ddc8 <prvProcessTimerOrBlockTask+0x98>)
 800dda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dda6:	601a      	str	r2, [r3, #0]
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	f3bf 8f6f 	isb	sy
}
 800ddb0:	e001      	b.n	800ddb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ddb2:	f7ff fa15 	bl	800d1e0 <xTaskResumeAll>
}
 800ddb6:	bf00      	nop
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	200011e0 	.word	0x200011e0
 800ddc4:	200011e4 	.word	0x200011e4
 800ddc8:	e000ed04 	.word	0xe000ed04

0800ddcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b085      	sub	sp, #20
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ddd4:	4b0e      	ldr	r3, [pc, #56]	; (800de10 <prvGetNextExpireTime+0x44>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d101      	bne.n	800dde2 <prvGetNextExpireTime+0x16>
 800ddde:	2201      	movs	r2, #1
 800dde0:	e000      	b.n	800dde4 <prvGetNextExpireTime+0x18>
 800dde2:	2200      	movs	r2, #0
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d105      	bne.n	800ddfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddf0:	4b07      	ldr	r3, [pc, #28]	; (800de10 <prvGetNextExpireTime+0x44>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	60fb      	str	r3, [r7, #12]
 800ddfa:	e001      	b.n	800de00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de00:	68fb      	ldr	r3, [r7, #12]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3714      	adds	r7, #20
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	200011dc 	.word	0x200011dc

0800de14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de1c:	f7ff fa7e 	bl	800d31c <xTaskGetTickCount>
 800de20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de22:	4b0b      	ldr	r3, [pc, #44]	; (800de50 <prvSampleTimeNow+0x3c>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d205      	bcs.n	800de38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de2c:	f000 f936 	bl	800e09c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	e002      	b.n	800de3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de3e:	4a04      	ldr	r2, [pc, #16]	; (800de50 <prvSampleTimeNow+0x3c>)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de44:	68fb      	ldr	r3, [r7, #12]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	200011ec 	.word	0x200011ec

0800de54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]
 800de60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de62:	2300      	movs	r3, #0
 800de64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	68ba      	ldr	r2, [r7, #8]
 800de6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	429a      	cmp	r2, r3
 800de78:	d812      	bhi.n	800dea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	1ad2      	subs	r2, r2, r3
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	699b      	ldr	r3, [r3, #24]
 800de84:	429a      	cmp	r2, r3
 800de86:	d302      	bcc.n	800de8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800de88:	2301      	movs	r3, #1
 800de8a:	617b      	str	r3, [r7, #20]
 800de8c:	e01b      	b.n	800dec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800de8e:	4b10      	ldr	r3, [pc, #64]	; (800ded0 <prvInsertTimerInActiveList+0x7c>)
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	3304      	adds	r3, #4
 800de96:	4619      	mov	r1, r3
 800de98:	4610      	mov	r0, r2
 800de9a:	f7fe fa08 	bl	800c2ae <vListInsert>
 800de9e:	e012      	b.n	800dec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d206      	bcs.n	800deb6 <prvInsertTimerInActiveList+0x62>
 800dea8:	68ba      	ldr	r2, [r7, #8]
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	429a      	cmp	r2, r3
 800deae:	d302      	bcc.n	800deb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800deb0:	2301      	movs	r3, #1
 800deb2:	617b      	str	r3, [r7, #20]
 800deb4:	e007      	b.n	800dec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800deb6:	4b07      	ldr	r3, [pc, #28]	; (800ded4 <prvInsertTimerInActiveList+0x80>)
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	3304      	adds	r3, #4
 800debe:	4619      	mov	r1, r3
 800dec0:	4610      	mov	r0, r2
 800dec2:	f7fe f9f4 	bl	800c2ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dec6:	697b      	ldr	r3, [r7, #20]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	200011e0 	.word	0x200011e0
 800ded4:	200011dc 	.word	0x200011dc

0800ded8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b08e      	sub	sp, #56	; 0x38
 800dedc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dede:	e0ca      	b.n	800e076 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	da18      	bge.n	800df18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dee6:	1d3b      	adds	r3, r7, #4
 800dee8:	3304      	adds	r3, #4
 800deea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800deec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deee:	2b00      	cmp	r3, #0
 800def0:	d10a      	bne.n	800df08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800def2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def6:	f383 8811 	msr	BASEPRI, r3
 800defa:	f3bf 8f6f 	isb	sy
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	61fb      	str	r3, [r7, #28]
}
 800df04:	bf00      	nop
 800df06:	e7fe      	b.n	800df06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df0e:	6850      	ldr	r0, [r2, #4]
 800df10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df12:	6892      	ldr	r2, [r2, #8]
 800df14:	4611      	mov	r1, r2
 800df16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f2c0 80ab 	blt.w	800e076 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df26:	695b      	ldr	r3, [r3, #20]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d004      	beq.n	800df36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	3304      	adds	r3, #4
 800df30:	4618      	mov	r0, r3
 800df32:	f7fe f9f5 	bl	800c320 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df36:	463b      	mov	r3, r7
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff ff6b 	bl	800de14 <prvSampleTimeNow>
 800df3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b09      	cmp	r3, #9
 800df44:	f200 8096 	bhi.w	800e074 <prvProcessReceivedCommands+0x19c>
 800df48:	a201      	add	r2, pc, #4	; (adr r2, 800df50 <prvProcessReceivedCommands+0x78>)
 800df4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df4e:	bf00      	nop
 800df50:	0800df79 	.word	0x0800df79
 800df54:	0800df79 	.word	0x0800df79
 800df58:	0800df79 	.word	0x0800df79
 800df5c:	0800dfed 	.word	0x0800dfed
 800df60:	0800e001 	.word	0x0800e001
 800df64:	0800e04b 	.word	0x0800e04b
 800df68:	0800df79 	.word	0x0800df79
 800df6c:	0800df79 	.word	0x0800df79
 800df70:	0800dfed 	.word	0x0800dfed
 800df74:	0800e001 	.word	0x0800e001
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df7e:	f043 0301 	orr.w	r3, r3, #1
 800df82:	b2da      	uxtb	r2, r3
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8e:	699b      	ldr	r3, [r3, #24]
 800df90:	18d1      	adds	r1, r2, r3
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df98:	f7ff ff5c 	bl	800de54 <prvInsertTimerInActiveList>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d069      	beq.n	800e076 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfa8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfb0:	f003 0304 	and.w	r3, r3, #4
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d05e      	beq.n	800e076 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbc:	699b      	ldr	r3, [r3, #24]
 800dfbe:	441a      	add	r2, r3
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfca:	f7ff fe05 	bl	800dbd8 <xTimerGenericCommand>
 800dfce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d14f      	bne.n	800e076 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	61bb      	str	r3, [r7, #24]
}
 800dfe8:	bf00      	nop
 800dfea:	e7fe      	b.n	800dfea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dff2:	f023 0301 	bic.w	r3, r3, #1
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dffe:	e03a      	b.n	800e076 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e006:	f043 0301 	orr.w	r3, r3, #1
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	699b      	ldr	r3, [r3, #24]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d10a      	bne.n	800e036 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	617b      	str	r3, [r7, #20]
}
 800e032:	bf00      	nop
 800e034:	e7fe      	b.n	800e034 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e038:	699a      	ldr	r2, [r3, #24]
 800e03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03c:	18d1      	adds	r1, r2, r3
 800e03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e044:	f7ff ff06 	bl	800de54 <prvInsertTimerInActiveList>
					break;
 800e048:	e015      	b.n	800e076 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e050:	f003 0302 	and.w	r3, r3, #2
 800e054:	2b00      	cmp	r3, #0
 800e056:	d103      	bne.n	800e060 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e05a:	f000 fbe1 	bl	800e820 <vPortFree>
 800e05e:	e00a      	b.n	800e076 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e066:	f023 0301 	bic.w	r3, r3, #1
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e072:	e000      	b.n	800e076 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e074:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e076:	4b08      	ldr	r3, [pc, #32]	; (800e098 <prvProcessReceivedCommands+0x1c0>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	1d39      	adds	r1, r7, #4
 800e07c:	2200      	movs	r2, #0
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fe fc16 	bl	800c8b0 <xQueueReceive>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	f47f af2a 	bne.w	800dee0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e08c:	bf00      	nop
 800e08e:	bf00      	nop
 800e090:	3730      	adds	r7, #48	; 0x30
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	200011e4 	.word	0x200011e4

0800e09c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b088      	sub	sp, #32
 800e0a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0a2:	e048      	b.n	800e136 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0a4:	4b2d      	ldr	r3, [pc, #180]	; (800e15c <prvSwitchTimerLists+0xc0>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ae:	4b2b      	ldr	r3, [pc, #172]	; (800e15c <prvSwitchTimerLists+0xc0>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe f92f 	bl	800c320 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	6a1b      	ldr	r3, [r3, #32]
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0d0:	f003 0304 	and.w	r3, r3, #4
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d02e      	beq.n	800e136 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	693a      	ldr	r2, [r7, #16]
 800e0de:	4413      	add	r3, r2
 800e0e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e0e2:	68ba      	ldr	r2, [r7, #8]
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d90e      	bls.n	800e108 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	68fa      	ldr	r2, [r7, #12]
 800e0f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e0f6:	4b19      	ldr	r3, [pc, #100]	; (800e15c <prvSwitchTimerLists+0xc0>)
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	4619      	mov	r1, r3
 800e100:	4610      	mov	r0, r2
 800e102:	f7fe f8d4 	bl	800c2ae <vListInsert>
 800e106:	e016      	b.n	800e136 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e108:	2300      	movs	r3, #0
 800e10a:	9300      	str	r3, [sp, #0]
 800e10c:	2300      	movs	r3, #0
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	2100      	movs	r1, #0
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f7ff fd60 	bl	800dbd8 <xTimerGenericCommand>
 800e118:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10a      	bne.n	800e136 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	603b      	str	r3, [r7, #0]
}
 800e132:	bf00      	nop
 800e134:	e7fe      	b.n	800e134 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e136:	4b09      	ldr	r3, [pc, #36]	; (800e15c <prvSwitchTimerLists+0xc0>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1b1      	bne.n	800e0a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e140:	4b06      	ldr	r3, [pc, #24]	; (800e15c <prvSwitchTimerLists+0xc0>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e146:	4b06      	ldr	r3, [pc, #24]	; (800e160 <prvSwitchTimerLists+0xc4>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a04      	ldr	r2, [pc, #16]	; (800e15c <prvSwitchTimerLists+0xc0>)
 800e14c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e14e:	4a04      	ldr	r2, [pc, #16]	; (800e160 <prvSwitchTimerLists+0xc4>)
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	6013      	str	r3, [r2, #0]
}
 800e154:	bf00      	nop
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	200011dc 	.word	0x200011dc
 800e160:	200011e0 	.word	0x200011e0

0800e164 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e16a:	f000 f96b 	bl	800e444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e16e:	4b15      	ldr	r3, [pc, #84]	; (800e1c4 <prvCheckForValidListAndQueue+0x60>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d120      	bne.n	800e1b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e176:	4814      	ldr	r0, [pc, #80]	; (800e1c8 <prvCheckForValidListAndQueue+0x64>)
 800e178:	f7fe f848 	bl	800c20c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e17c:	4813      	ldr	r0, [pc, #76]	; (800e1cc <prvCheckForValidListAndQueue+0x68>)
 800e17e:	f7fe f845 	bl	800c20c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e182:	4b13      	ldr	r3, [pc, #76]	; (800e1d0 <prvCheckForValidListAndQueue+0x6c>)
 800e184:	4a10      	ldr	r2, [pc, #64]	; (800e1c8 <prvCheckForValidListAndQueue+0x64>)
 800e186:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e188:	4b12      	ldr	r3, [pc, #72]	; (800e1d4 <prvCheckForValidListAndQueue+0x70>)
 800e18a:	4a10      	ldr	r2, [pc, #64]	; (800e1cc <prvCheckForValidListAndQueue+0x68>)
 800e18c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e18e:	2300      	movs	r3, #0
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	4b11      	ldr	r3, [pc, #68]	; (800e1d8 <prvCheckForValidListAndQueue+0x74>)
 800e194:	4a11      	ldr	r2, [pc, #68]	; (800e1dc <prvCheckForValidListAndQueue+0x78>)
 800e196:	2110      	movs	r1, #16
 800e198:	200a      	movs	r0, #10
 800e19a:	f7fe f953 	bl	800c444 <xQueueGenericCreateStatic>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	4a08      	ldr	r2, [pc, #32]	; (800e1c4 <prvCheckForValidListAndQueue+0x60>)
 800e1a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e1a4:	4b07      	ldr	r3, [pc, #28]	; (800e1c4 <prvCheckForValidListAndQueue+0x60>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d005      	beq.n	800e1b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e1ac:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <prvCheckForValidListAndQueue+0x60>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	490b      	ldr	r1, [pc, #44]	; (800e1e0 <prvCheckForValidListAndQueue+0x7c>)
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fe fd6c 	bl	800cc90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1b8:	f000 f974 	bl	800e4a4 <vPortExitCritical>
}
 800e1bc:	bf00      	nop
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	200011e4 	.word	0x200011e4
 800e1c8:	200011b4 	.word	0x200011b4
 800e1cc:	200011c8 	.word	0x200011c8
 800e1d0:	200011dc 	.word	0x200011dc
 800e1d4:	200011e0 	.word	0x200011e0
 800e1d8:	20001290 	.word	0x20001290
 800e1dc:	200011f0 	.word	0x200011f0
 800e1e0:	0800fc0c 	.word	0x0800fc0c

0800e1e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	3b04      	subs	r3, #4
 800e1f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e1fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	3b04      	subs	r3, #4
 800e202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	f023 0201 	bic.w	r2, r3, #1
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	3b04      	subs	r3, #4
 800e212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e214:	4a0c      	ldr	r2, [pc, #48]	; (800e248 <pxPortInitialiseStack+0x64>)
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	3b14      	subs	r3, #20
 800e21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3b04      	subs	r3, #4
 800e22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f06f 0202 	mvn.w	r2, #2
 800e232:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	3b20      	subs	r3, #32
 800e238:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e23a:	68fb      	ldr	r3, [r7, #12]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3714      	adds	r7, #20
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr
 800e248:	0800e24d 	.word	0x0800e24d

0800e24c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e252:	2300      	movs	r3, #0
 800e254:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e256:	4b12      	ldr	r3, [pc, #72]	; (800e2a0 <prvTaskExitError+0x54>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e25e:	d00a      	beq.n	800e276 <prvTaskExitError+0x2a>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	60fb      	str	r3, [r7, #12]
}
 800e272:	bf00      	nop
 800e274:	e7fe      	b.n	800e274 <prvTaskExitError+0x28>
	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27a:	f383 8811 	msr	BASEPRI, r3
 800e27e:	f3bf 8f6f 	isb	sy
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	60bb      	str	r3, [r7, #8]
}
 800e288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e28a:	bf00      	nop
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d0fc      	beq.n	800e28c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e292:	bf00      	nop
 800e294:	bf00      	nop
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr
 800e2a0:	20000150 	.word	0x20000150
	...

0800e2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e2b0:	4b07      	ldr	r3, [pc, #28]	; (800e2d0 <pxCurrentTCBConst2>)
 800e2b2:	6819      	ldr	r1, [r3, #0]
 800e2b4:	6808      	ldr	r0, [r1, #0]
 800e2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ba:	f380 8809 	msr	PSP, r0
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f04f 0000 	mov.w	r0, #0
 800e2c6:	f380 8811 	msr	BASEPRI, r0
 800e2ca:	4770      	bx	lr
 800e2cc:	f3af 8000 	nop.w

0800e2d0 <pxCurrentTCBConst2>:
 800e2d0:	20000cb4 	.word	0x20000cb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e2d4:	bf00      	nop
 800e2d6:	bf00      	nop

0800e2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e2d8:	4808      	ldr	r0, [pc, #32]	; (800e2fc <prvPortStartFirstTask+0x24>)
 800e2da:	6800      	ldr	r0, [r0, #0]
 800e2dc:	6800      	ldr	r0, [r0, #0]
 800e2de:	f380 8808 	msr	MSP, r0
 800e2e2:	f04f 0000 	mov.w	r0, #0
 800e2e6:	f380 8814 	msr	CONTROL, r0
 800e2ea:	b662      	cpsie	i
 800e2ec:	b661      	cpsie	f
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	df00      	svc	0
 800e2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e2fa:	bf00      	nop
 800e2fc:	e000ed08 	.word	0xe000ed08

0800e300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e306:	4b46      	ldr	r3, [pc, #280]	; (800e420 <xPortStartScheduler+0x120>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a46      	ldr	r2, [pc, #280]	; (800e424 <xPortStartScheduler+0x124>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d10a      	bne.n	800e326 <xPortStartScheduler+0x26>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	613b      	str	r3, [r7, #16]
}
 800e322:	bf00      	nop
 800e324:	e7fe      	b.n	800e324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e326:	4b3e      	ldr	r3, [pc, #248]	; (800e420 <xPortStartScheduler+0x120>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a3f      	ldr	r2, [pc, #252]	; (800e428 <xPortStartScheduler+0x128>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d10a      	bne.n	800e346 <xPortStartScheduler+0x46>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	60fb      	str	r3, [r7, #12]
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e346:	4b39      	ldr	r3, [pc, #228]	; (800e42c <xPortStartScheduler+0x12c>)
 800e348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	22ff      	movs	r2, #255	; 0xff
 800e356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e360:	78fb      	ldrb	r3, [r7, #3]
 800e362:	b2db      	uxtb	r3, r3
 800e364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e368:	b2da      	uxtb	r2, r3
 800e36a:	4b31      	ldr	r3, [pc, #196]	; (800e430 <xPortStartScheduler+0x130>)
 800e36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e36e:	4b31      	ldr	r3, [pc, #196]	; (800e434 <xPortStartScheduler+0x134>)
 800e370:	2207      	movs	r2, #7
 800e372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e374:	e009      	b.n	800e38a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e376:	4b2f      	ldr	r3, [pc, #188]	; (800e434 <xPortStartScheduler+0x134>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	4a2d      	ldr	r2, [pc, #180]	; (800e434 <xPortStartScheduler+0x134>)
 800e37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	005b      	lsls	r3, r3, #1
 800e386:	b2db      	uxtb	r3, r3
 800e388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e38a:	78fb      	ldrb	r3, [r7, #3]
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e392:	2b80      	cmp	r3, #128	; 0x80
 800e394:	d0ef      	beq.n	800e376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e396:	4b27      	ldr	r3, [pc, #156]	; (800e434 <xPortStartScheduler+0x134>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f1c3 0307 	rsb	r3, r3, #7
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	d00a      	beq.n	800e3b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	60bb      	str	r3, [r7, #8]
}
 800e3b4:	bf00      	nop
 800e3b6:	e7fe      	b.n	800e3b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e3b8:	4b1e      	ldr	r3, [pc, #120]	; (800e434 <xPortStartScheduler+0x134>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	021b      	lsls	r3, r3, #8
 800e3be:	4a1d      	ldr	r2, [pc, #116]	; (800e434 <xPortStartScheduler+0x134>)
 800e3c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e3c2:	4b1c      	ldr	r3, [pc, #112]	; (800e434 <xPortStartScheduler+0x134>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3ca:	4a1a      	ldr	r2, [pc, #104]	; (800e434 <xPortStartScheduler+0x134>)
 800e3cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e3d6:	4b18      	ldr	r3, [pc, #96]	; (800e438 <xPortStartScheduler+0x138>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a17      	ldr	r2, [pc, #92]	; (800e438 <xPortStartScheduler+0x138>)
 800e3dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e3e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e3e2:	4b15      	ldr	r3, [pc, #84]	; (800e438 <xPortStartScheduler+0x138>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a14      	ldr	r2, [pc, #80]	; (800e438 <xPortStartScheduler+0x138>)
 800e3e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e3ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e3ee:	f000 f8dd 	bl	800e5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e3f2:	4b12      	ldr	r3, [pc, #72]	; (800e43c <xPortStartScheduler+0x13c>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e3f8:	f000 f8fc 	bl	800e5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e3fc:	4b10      	ldr	r3, [pc, #64]	; (800e440 <xPortStartScheduler+0x140>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a0f      	ldr	r2, [pc, #60]	; (800e440 <xPortStartScheduler+0x140>)
 800e402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e408:	f7ff ff66 	bl	800e2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e40c:	f7ff f850 	bl	800d4b0 <vTaskSwitchContext>
	prvTaskExitError();
 800e410:	f7ff ff1c 	bl	800e24c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3718      	adds	r7, #24
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	e000ed00 	.word	0xe000ed00
 800e424:	410fc271 	.word	0x410fc271
 800e428:	410fc270 	.word	0x410fc270
 800e42c:	e000e400 	.word	0xe000e400
 800e430:	200012e0 	.word	0x200012e0
 800e434:	200012e4 	.word	0x200012e4
 800e438:	e000ed20 	.word	0xe000ed20
 800e43c:	20000150 	.word	0x20000150
 800e440:	e000ef34 	.word	0xe000ef34

0800e444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	607b      	str	r3, [r7, #4]
}
 800e45c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e45e:	4b0f      	ldr	r3, [pc, #60]	; (800e49c <vPortEnterCritical+0x58>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3301      	adds	r3, #1
 800e464:	4a0d      	ldr	r2, [pc, #52]	; (800e49c <vPortEnterCritical+0x58>)
 800e466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e468:	4b0c      	ldr	r3, [pc, #48]	; (800e49c <vPortEnterCritical+0x58>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d10f      	bne.n	800e490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e470:	4b0b      	ldr	r3, [pc, #44]	; (800e4a0 <vPortEnterCritical+0x5c>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	b2db      	uxtb	r3, r3
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00a      	beq.n	800e490 <vPortEnterCritical+0x4c>
	__asm volatile
 800e47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47e:	f383 8811 	msr	BASEPRI, r3
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	f3bf 8f4f 	dsb	sy
 800e48a:	603b      	str	r3, [r7, #0]
}
 800e48c:	bf00      	nop
 800e48e:	e7fe      	b.n	800e48e <vPortEnterCritical+0x4a>
	}
}
 800e490:	bf00      	nop
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr
 800e49c:	20000150 	.word	0x20000150
 800e4a0:	e000ed04 	.word	0xe000ed04

0800e4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4aa:	4b12      	ldr	r3, [pc, #72]	; (800e4f4 <vPortExitCritical+0x50>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d10a      	bne.n	800e4c8 <vPortExitCritical+0x24>
	__asm volatile
 800e4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b6:	f383 8811 	msr	BASEPRI, r3
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	607b      	str	r3, [r7, #4]
}
 800e4c4:	bf00      	nop
 800e4c6:	e7fe      	b.n	800e4c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e4c8:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <vPortExitCritical+0x50>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	4a09      	ldr	r2, [pc, #36]	; (800e4f4 <vPortExitCritical+0x50>)
 800e4d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e4d2:	4b08      	ldr	r3, [pc, #32]	; (800e4f4 <vPortExitCritical+0x50>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d105      	bne.n	800e4e6 <vPortExitCritical+0x42>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	f383 8811 	msr	BASEPRI, r3
}
 800e4e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e4e6:	bf00      	nop
 800e4e8:	370c      	adds	r7, #12
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	20000150 	.word	0x20000150
	...

0800e500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e500:	f3ef 8009 	mrs	r0, PSP
 800e504:	f3bf 8f6f 	isb	sy
 800e508:	4b15      	ldr	r3, [pc, #84]	; (800e560 <pxCurrentTCBConst>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	f01e 0f10 	tst.w	lr, #16
 800e510:	bf08      	it	eq
 800e512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51a:	6010      	str	r0, [r2, #0]
 800e51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e524:	f380 8811 	msr	BASEPRI, r0
 800e528:	f3bf 8f4f 	dsb	sy
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	f7fe ffbe 	bl	800d4b0 <vTaskSwitchContext>
 800e534:	f04f 0000 	mov.w	r0, #0
 800e538:	f380 8811 	msr	BASEPRI, r0
 800e53c:	bc09      	pop	{r0, r3}
 800e53e:	6819      	ldr	r1, [r3, #0]
 800e540:	6808      	ldr	r0, [r1, #0]
 800e542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e546:	f01e 0f10 	tst.w	lr, #16
 800e54a:	bf08      	it	eq
 800e54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e550:	f380 8809 	msr	PSP, r0
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop
 800e55c:	f3af 8000 	nop.w

0800e560 <pxCurrentTCBConst>:
 800e560:	20000cb4 	.word	0x20000cb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e564:	bf00      	nop
 800e566:	bf00      	nop

0800e568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
	__asm volatile
 800e56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e572:	f383 8811 	msr	BASEPRI, r3
 800e576:	f3bf 8f6f 	isb	sy
 800e57a:	f3bf 8f4f 	dsb	sy
 800e57e:	607b      	str	r3, [r7, #4]
}
 800e580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e582:	f7fe fedb 	bl	800d33c <xTaskIncrementTick>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d003      	beq.n	800e594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e58c:	4b06      	ldr	r3, [pc, #24]	; (800e5a8 <xPortSysTickHandler+0x40>)
 800e58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	2300      	movs	r3, #0
 800e596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	f383 8811 	msr	BASEPRI, r3
}
 800e59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	e000ed04 	.word	0xe000ed04

0800e5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5b0:	4b0b      	ldr	r3, [pc, #44]	; (800e5e0 <vPortSetupTimerInterrupt+0x34>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5b6:	4b0b      	ldr	r3, [pc, #44]	; (800e5e4 <vPortSetupTimerInterrupt+0x38>)
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5bc:	4b0a      	ldr	r3, [pc, #40]	; (800e5e8 <vPortSetupTimerInterrupt+0x3c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a0a      	ldr	r2, [pc, #40]	; (800e5ec <vPortSetupTimerInterrupt+0x40>)
 800e5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5c6:	099b      	lsrs	r3, r3, #6
 800e5c8:	4a09      	ldr	r2, [pc, #36]	; (800e5f0 <vPortSetupTimerInterrupt+0x44>)
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5ce:	4b04      	ldr	r3, [pc, #16]	; (800e5e0 <vPortSetupTimerInterrupt+0x34>)
 800e5d0:	2207      	movs	r2, #7
 800e5d2:	601a      	str	r2, [r3, #0]
}
 800e5d4:	bf00      	nop
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	e000e010 	.word	0xe000e010
 800e5e4:	e000e018 	.word	0xe000e018
 800e5e8:	20000144 	.word	0x20000144
 800e5ec:	10624dd3 	.word	0x10624dd3
 800e5f0:	e000e014 	.word	0xe000e014

0800e5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e604 <vPortEnableVFP+0x10>
 800e5f8:	6801      	ldr	r1, [r0, #0]
 800e5fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e5fe:	6001      	str	r1, [r0, #0]
 800e600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e602:	bf00      	nop
 800e604:	e000ed88 	.word	0xe000ed88

0800e608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e60e:	f3ef 8305 	mrs	r3, IPSR
 800e612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b0f      	cmp	r3, #15
 800e618:	d914      	bls.n	800e644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e61a:	4a17      	ldr	r2, [pc, #92]	; (800e678 <vPortValidateInterruptPriority+0x70>)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	4413      	add	r3, r2
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e624:	4b15      	ldr	r3, [pc, #84]	; (800e67c <vPortValidateInterruptPriority+0x74>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	7afa      	ldrb	r2, [r7, #11]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d20a      	bcs.n	800e644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	607b      	str	r3, [r7, #4]
}
 800e640:	bf00      	nop
 800e642:	e7fe      	b.n	800e642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e644:	4b0e      	ldr	r3, [pc, #56]	; (800e680 <vPortValidateInterruptPriority+0x78>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e64c:	4b0d      	ldr	r3, [pc, #52]	; (800e684 <vPortValidateInterruptPriority+0x7c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	429a      	cmp	r2, r3
 800e652:	d90a      	bls.n	800e66a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	603b      	str	r3, [r7, #0]
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <vPortValidateInterruptPriority+0x60>
	}
 800e66a:	bf00      	nop
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	e000e3f0 	.word	0xe000e3f0
 800e67c:	200012e0 	.word	0x200012e0
 800e680:	e000ed0c 	.word	0xe000ed0c
 800e684:	200012e4 	.word	0x200012e4

0800e688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b08a      	sub	sp, #40	; 0x28
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e690:	2300      	movs	r3, #0
 800e692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e694:	f7fe fd96 	bl	800d1c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e698:	4b5b      	ldr	r3, [pc, #364]	; (800e808 <pvPortMalloc+0x180>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d101      	bne.n	800e6a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6a0:	f000 f920 	bl	800e8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6a4:	4b59      	ldr	r3, [pc, #356]	; (800e80c <pvPortMalloc+0x184>)
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4013      	ands	r3, r2
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f040 8093 	bne.w	800e7d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d01d      	beq.n	800e6f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e6b8:	2208      	movs	r2, #8
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4413      	add	r3, r2
 800e6be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f003 0307 	and.w	r3, r3, #7
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d014      	beq.n	800e6f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f023 0307 	bic.w	r3, r3, #7
 800e6d0:	3308      	adds	r3, #8
 800e6d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f003 0307 	and.w	r3, r3, #7
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00a      	beq.n	800e6f4 <pvPortMalloc+0x6c>
	__asm volatile
 800e6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e2:	f383 8811 	msr	BASEPRI, r3
 800e6e6:	f3bf 8f6f 	isb	sy
 800e6ea:	f3bf 8f4f 	dsb	sy
 800e6ee:	617b      	str	r3, [r7, #20]
}
 800e6f0:	bf00      	nop
 800e6f2:	e7fe      	b.n	800e6f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d06e      	beq.n	800e7d8 <pvPortMalloc+0x150>
 800e6fa:	4b45      	ldr	r3, [pc, #276]	; (800e810 <pvPortMalloc+0x188>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	429a      	cmp	r2, r3
 800e702:	d869      	bhi.n	800e7d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e704:	4b43      	ldr	r3, [pc, #268]	; (800e814 <pvPortMalloc+0x18c>)
 800e706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e708:	4b42      	ldr	r3, [pc, #264]	; (800e814 <pvPortMalloc+0x18c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e70e:	e004      	b.n	800e71a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	429a      	cmp	r2, r3
 800e722:	d903      	bls.n	800e72c <pvPortMalloc+0xa4>
 800e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1f1      	bne.n	800e710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e72c:	4b36      	ldr	r3, [pc, #216]	; (800e808 <pvPortMalloc+0x180>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e732:	429a      	cmp	r2, r3
 800e734:	d050      	beq.n	800e7d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e736:	6a3b      	ldr	r3, [r7, #32]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2208      	movs	r2, #8
 800e73c:	4413      	add	r3, r2
 800e73e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74a:	685a      	ldr	r2, [r3, #4]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	1ad2      	subs	r2, r2, r3
 800e750:	2308      	movs	r3, #8
 800e752:	005b      	lsls	r3, r3, #1
 800e754:	429a      	cmp	r2, r3
 800e756:	d91f      	bls.n	800e798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4413      	add	r3, r2
 800e75e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	f003 0307 	and.w	r3, r3, #7
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00a      	beq.n	800e780 <pvPortMalloc+0xf8>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	613b      	str	r3, [r7, #16]
}
 800e77c:	bf00      	nop
 800e77e:	e7fe      	b.n	800e77e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	1ad2      	subs	r2, r2, r3
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e792:	69b8      	ldr	r0, [r7, #24]
 800e794:	f000 f908 	bl	800e9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e798:	4b1d      	ldr	r3, [pc, #116]	; (800e810 <pvPortMalloc+0x188>)
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	4a1b      	ldr	r2, [pc, #108]	; (800e810 <pvPortMalloc+0x188>)
 800e7a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7a6:	4b1a      	ldr	r3, [pc, #104]	; (800e810 <pvPortMalloc+0x188>)
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	4b1b      	ldr	r3, [pc, #108]	; (800e818 <pvPortMalloc+0x190>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d203      	bcs.n	800e7ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7b2:	4b17      	ldr	r3, [pc, #92]	; (800e810 <pvPortMalloc+0x188>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a18      	ldr	r2, [pc, #96]	; (800e818 <pvPortMalloc+0x190>)
 800e7b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	685a      	ldr	r2, [r3, #4]
 800e7be:	4b13      	ldr	r3, [pc, #76]	; (800e80c <pvPortMalloc+0x184>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	431a      	orrs	r2, r3
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e7ce:	4b13      	ldr	r3, [pc, #76]	; (800e81c <pvPortMalloc+0x194>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	4a11      	ldr	r2, [pc, #68]	; (800e81c <pvPortMalloc+0x194>)
 800e7d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e7d8:	f7fe fd02 	bl	800d1e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	f003 0307 	and.w	r3, r3, #7
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00a      	beq.n	800e7fc <pvPortMalloc+0x174>
	__asm volatile
 800e7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	60fb      	str	r3, [r7, #12]
}
 800e7f8:	bf00      	nop
 800e7fa:	e7fe      	b.n	800e7fa <pvPortMalloc+0x172>
	return pvReturn;
 800e7fc:	69fb      	ldr	r3, [r7, #28]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3728      	adds	r7, #40	; 0x28
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20004ef0 	.word	0x20004ef0
 800e80c:	20004f04 	.word	0x20004f04
 800e810:	20004ef4 	.word	0x20004ef4
 800e814:	20004ee8 	.word	0x20004ee8
 800e818:	20004ef8 	.word	0x20004ef8
 800e81c:	20004efc 	.word	0x20004efc

0800e820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d04d      	beq.n	800e8ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e832:	2308      	movs	r3, #8
 800e834:	425b      	negs	r3, r3
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	4413      	add	r3, r2
 800e83a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	685a      	ldr	r2, [r3, #4]
 800e844:	4b24      	ldr	r3, [pc, #144]	; (800e8d8 <vPortFree+0xb8>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4013      	ands	r3, r2
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d10a      	bne.n	800e864 <vPortFree+0x44>
	__asm volatile
 800e84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	60fb      	str	r3, [r7, #12]
}
 800e860:	bf00      	nop
 800e862:	e7fe      	b.n	800e862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00a      	beq.n	800e882 <vPortFree+0x62>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	60bb      	str	r3, [r7, #8]
}
 800e87e:	bf00      	nop
 800e880:	e7fe      	b.n	800e880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	685a      	ldr	r2, [r3, #4]
 800e886:	4b14      	ldr	r3, [pc, #80]	; (800e8d8 <vPortFree+0xb8>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4013      	ands	r3, r2
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d01e      	beq.n	800e8ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d11a      	bne.n	800e8ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	685a      	ldr	r2, [r3, #4]
 800e89c:	4b0e      	ldr	r3, [pc, #56]	; (800e8d8 <vPortFree+0xb8>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	43db      	mvns	r3, r3
 800e8a2:	401a      	ands	r2, r3
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8a8:	f7fe fc8c 	bl	800d1c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	685a      	ldr	r2, [r3, #4]
 800e8b0:	4b0a      	ldr	r3, [pc, #40]	; (800e8dc <vPortFree+0xbc>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	4a09      	ldr	r2, [pc, #36]	; (800e8dc <vPortFree+0xbc>)
 800e8b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8ba:	6938      	ldr	r0, [r7, #16]
 800e8bc:	f000 f874 	bl	800e9a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e8c0:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <vPortFree+0xc0>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	4a06      	ldr	r2, [pc, #24]	; (800e8e0 <vPortFree+0xc0>)
 800e8c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e8ca:	f7fe fc89 	bl	800d1e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e8ce:	bf00      	nop
 800e8d0:	3718      	adds	r7, #24
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20004f04 	.word	0x20004f04
 800e8dc:	20004ef4 	.word	0x20004ef4
 800e8e0:	20004f00 	.word	0x20004f00

0800e8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e8ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e8f0:	4b27      	ldr	r3, [pc, #156]	; (800e990 <prvHeapInit+0xac>)
 800e8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f003 0307 	and.w	r3, r3, #7
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00c      	beq.n	800e918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	3307      	adds	r3, #7
 800e902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f023 0307 	bic.w	r3, r3, #7
 800e90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	4a1f      	ldr	r2, [pc, #124]	; (800e990 <prvHeapInit+0xac>)
 800e914:	4413      	add	r3, r2
 800e916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e91c:	4a1d      	ldr	r2, [pc, #116]	; (800e994 <prvHeapInit+0xb0>)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e922:	4b1c      	ldr	r3, [pc, #112]	; (800e994 <prvHeapInit+0xb0>)
 800e924:	2200      	movs	r2, #0
 800e926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	68ba      	ldr	r2, [r7, #8]
 800e92c:	4413      	add	r3, r2
 800e92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e930:	2208      	movs	r2, #8
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	1a9b      	subs	r3, r3, r2
 800e936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f023 0307 	bic.w	r3, r3, #7
 800e93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	4a15      	ldr	r2, [pc, #84]	; (800e998 <prvHeapInit+0xb4>)
 800e944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e946:	4b14      	ldr	r3, [pc, #80]	; (800e998 <prvHeapInit+0xb4>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2200      	movs	r2, #0
 800e94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e94e:	4b12      	ldr	r3, [pc, #72]	; (800e998 <prvHeapInit+0xb4>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	1ad2      	subs	r2, r2, r3
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e964:	4b0c      	ldr	r3, [pc, #48]	; (800e998 <prvHeapInit+0xb4>)
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	4a0a      	ldr	r2, [pc, #40]	; (800e99c <prvHeapInit+0xb8>)
 800e972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	4a09      	ldr	r2, [pc, #36]	; (800e9a0 <prvHeapInit+0xbc>)
 800e97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e97c:	4b09      	ldr	r3, [pc, #36]	; (800e9a4 <prvHeapInit+0xc0>)
 800e97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e982:	601a      	str	r2, [r3, #0]
}
 800e984:	bf00      	nop
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	200012e8 	.word	0x200012e8
 800e994:	20004ee8 	.word	0x20004ee8
 800e998:	20004ef0 	.word	0x20004ef0
 800e99c:	20004ef8 	.word	0x20004ef8
 800e9a0:	20004ef4 	.word	0x20004ef4
 800e9a4:	20004f04 	.word	0x20004f04

0800e9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9b0:	4b28      	ldr	r3, [pc, #160]	; (800ea54 <prvInsertBlockIntoFreeList+0xac>)
 800e9b2:	60fb      	str	r3, [r7, #12]
 800e9b4:	e002      	b.n	800e9bc <prvInsertBlockIntoFreeList+0x14>
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	60fb      	str	r3, [r7, #12]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d8f7      	bhi.n	800e9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d108      	bne.n	800e9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	441a      	add	r2, r3
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	68ba      	ldr	r2, [r7, #8]
 800e9f4:	441a      	add	r2, r3
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d118      	bne.n	800ea30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b15      	ldr	r3, [pc, #84]	; (800ea58 <prvInsertBlockIntoFreeList+0xb0>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d00d      	beq.n	800ea26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	441a      	add	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	601a      	str	r2, [r3, #0]
 800ea24:	e008      	b.n	800ea38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea26:	4b0c      	ldr	r3, [pc, #48]	; (800ea58 <prvInsertBlockIntoFreeList+0xb0>)
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	601a      	str	r2, [r3, #0]
 800ea2e:	e003      	b.n	800ea38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d002      	beq.n	800ea46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea46:	bf00      	nop
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	20004ee8 	.word	0x20004ee8
 800ea58:	20004ef0 	.word	0x20004ef0

0800ea5c <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b08a      	sub	sp, #40	; 0x28
 800ea60:	af04      	add	r7, sp, #16
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	460b      	mov	r3, r1
 800ea66:	607a      	str	r2, [r7, #4]
 800ea68:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	011b      	lsls	r3, r3, #4
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800ea78:	7afb      	ldrb	r3, [r7, #11]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d101      	bne.n	800ea82 <_ICM20948_SelectUserBank+0x26>
 800ea7e:	2368      	movs	r3, #104	; 0x68
 800ea80:	e000      	b.n	800ea84 <_ICM20948_SelectUserBank+0x28>
 800ea82:	2369      	movs	r3, #105	; 0x69
 800ea84:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800ea86:	7dbb      	ldrb	r3, [r7, #22]
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	005b      	lsls	r3, r3, #1
 800ea8c:	b299      	uxth	r1, r3
 800ea8e:	230a      	movs	r3, #10
 800ea90:	9302      	str	r3, [sp, #8]
 800ea92:	2301      	movs	r3, #1
 800ea94:	9301      	str	r3, [sp, #4]
 800ea96:	f107 0315 	add.w	r3, r7, #21
 800ea9a:	9300      	str	r3, [sp, #0]
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	227f      	movs	r2, #127	; 0x7f
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f7f9 f843 	bl	8007b2c <HAL_I2C_Mem_Write>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800eaaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b088      	sub	sp, #32
 800eab8:	af04      	add	r7, sp, #16
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	4608      	mov	r0, r1
 800eabe:	4611      	mov	r1, r2
 800eac0:	461a      	mov	r2, r3
 800eac2:	4603      	mov	r3, r0
 800eac4:	70fb      	strb	r3, [r7, #3]
 800eac6:	460b      	mov	r3, r1
 800eac8:	70bb      	strb	r3, [r7, #2]
 800eaca:	4613      	mov	r3, r2
 800eacc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800eace:	2300      	movs	r3, #0
 800ead0:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800ead2:	78fb      	ldrb	r3, [r7, #3]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d101      	bne.n	800eadc <_ICM20948_WriteByte+0x28>
 800ead8:	2368      	movs	r3, #104	; 0x68
 800eada:	e000      	b.n	800eade <_ICM20948_WriteByte+0x2a>
 800eadc:	2369      	movs	r3, #105	; 0x69
 800eade:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800eae0:	7bbb      	ldrb	r3, [r7, #14]
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	b299      	uxth	r1, r3
 800eae8:	78bb      	ldrb	r3, [r7, #2]
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	230a      	movs	r3, #10
 800eaee:	9302      	str	r3, [sp, #8]
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	9301      	str	r3, [sp, #4]
 800eaf4:	1c7b      	adds	r3, r7, #1
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	2301      	movs	r3, #1
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7f9 f816 	bl	8007b2c <HAL_I2C_Mem_Write>
 800eb00:	4603      	mov	r3, r0
 800eb02:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b084      	sub	sp, #16
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	4608      	mov	r0, r1
 800eb18:	4611      	mov	r1, r2
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	70fb      	strb	r3, [r7, #3]
 800eb20:	460b      	mov	r3, r1
 800eb22:	70bb      	strb	r3, [r7, #2]
 800eb24:	4613      	mov	r3, r2
 800eb26:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800eb2c:	78fb      	ldrb	r3, [r7, #3]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	4619      	mov	r1, r3
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7ff ff92 	bl	800ea5c <_ICM20948_SelectUserBank>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800eb3c:	78f9      	ldrb	r1, [r7, #3]
 800eb3e:	2380      	movs	r3, #128	; 0x80
 800eb40:	2206      	movs	r2, #6
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7ff ffb6 	bl	800eab4 <_ICM20948_WriteByte>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800eb4c:	20c8      	movs	r0, #200	; 0xc8
 800eb4e:	f7f7 ff5b 	bl	8006a08 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800eb52:	78f9      	ldrb	r1, [r7, #3]
 800eb54:	2301      	movs	r3, #1
 800eb56:	2206      	movs	r2, #6
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7ff ffab 	bl	800eab4 <_ICM20948_WriteByte>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800eb62:	78f9      	ldrb	r1, [r7, #3]
 800eb64:	2300      	movs	r3, #0
 800eb66:	2207      	movs	r2, #7
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7ff ffa3 	bl	800eab4 <_ICM20948_WriteByte>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800eb72:	78fb      	ldrb	r3, [r7, #3]
 800eb74:	2202      	movs	r2, #2
 800eb76:	4619      	mov	r1, r3
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7ff ff6f 	bl	800ea5c <_ICM20948_SelectUserBank>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800eb82:	78bb      	ldrb	r3, [r7, #2]
 800eb84:	005b      	lsls	r3, r3, #1
 800eb86:	b25b      	sxtb	r3, r3
 800eb88:	f043 0319 	orr.w	r3, r3, #25
 800eb8c:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	78f9      	ldrb	r1, [r7, #3]
 800eb92:	2201      	movs	r2, #1
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f7ff ff8d 	bl	800eab4 <_ICM20948_WriteByte>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800eb9e:	78f9      	ldrb	r1, [r7, #3]
 800eba0:	2303      	movs	r3, #3
 800eba2:	2253      	movs	r2, #83	; 0x53
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff ff85 	bl	800eab4 <_ICM20948_WriteByte>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800ebae:	78f9      	ldrb	r1, [r7, #3]
 800ebb0:	2304      	movs	r3, #4
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7ff ff7d 	bl	800eab4 <_ICM20948_WriteByte>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800ebbe:	787b      	ldrb	r3, [r7, #1]
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	b25b      	sxtb	r3, r3
 800ebc4:	f043 0319 	orr.w	r3, r3, #25
 800ebc8:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	78f9      	ldrb	r1, [r7, #3]
 800ebce:	2214      	movs	r2, #20
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f7ff ff6f 	bl	800eab4 <_ICM20948_WriteByte>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800ebda:	78f9      	ldrb	r1, [r7, #3]
 800ebdc:	2304      	movs	r3, #4
 800ebde:	2211      	movs	r2, #17
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7ff ff67 	bl	800eab4 <_ICM20948_WriteByte>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800ebea:	78fb      	ldrb	r3, [r7, #3]
 800ebec:	2200      	movs	r2, #0
 800ebee:	4619      	mov	r1, r3
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7ff ff33 	bl	800ea5c <_ICM20948_SelectUserBank>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800ebfa:	78f9      	ldrb	r1, [r7, #3]
 800ebfc:	2302      	movs	r3, #2
 800ebfe:	220f      	movs	r2, #15
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7ff ff57 	bl	800eab4 <_ICM20948_WriteByte>
 800ec06:	4603      	mov	r3, r0
 800ec08:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800ec0a:	2208      	movs	r2, #8
 800ec0c:	2131      	movs	r1, #49	; 0x31
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f000 f806 	bl	800ec20 <_AK09918_WriteByte>
 800ec14:	4603      	mov	r3, r0
 800ec16:	73fb      	strb	r3, [r7, #15]
}
 800ec18:	bf00      	nop
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b088      	sub	sp, #32
 800ec24:	af04      	add	r7, sp, #16
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	70fb      	strb	r3, [r7, #3]
 800ec2c:	4613      	mov	r3, r2
 800ec2e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800ec30:	2300      	movs	r3, #0
 800ec32:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800ec34:	78fb      	ldrb	r3, [r7, #3]
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	230a      	movs	r3, #10
 800ec3a:	9302      	str	r3, [sp, #8]
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	9301      	str	r3, [sp, #4]
 800ec40:	1cbb      	adds	r3, r7, #2
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	2301      	movs	r3, #1
 800ec46:	2118      	movs	r1, #24
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7f8 ff6f 	bl	8007b2c <HAL_I2C_Mem_Write>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800ec52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3710      	adds	r7, #16
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800ec62:	2300      	movs	r3, #0
 800ec64:	71fb      	strb	r3, [r7, #7]
 800ec66:	e026      	b.n	800ecb6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800ec68:	79fb      	ldrb	r3, [r7, #7]
 800ec6a:	3b50      	subs	r3, #80	; 0x50
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	2100      	movs	r1, #0
 800ec70:	4618      	mov	r0, r3
 800ec72:	f000 f82b 	bl	800eccc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800ec76:	2100      	movs	r1, #0
 800ec78:	2000      	movs	r0, #0
 800ec7a:	f000 f827 	bl	800eccc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800ec7e:	2100      	movs	r1, #0
 800ec80:	2010      	movs	r0, #16
 800ec82:	f000 f823 	bl	800eccc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800ec86:	2300      	movs	r3, #0
 800ec88:	71bb      	strb	r3, [r7, #6]
 800ec8a:	e00d      	b.n	800eca8 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800ec8c:	79ba      	ldrb	r2, [r7, #6]
 800ec8e:	79fb      	ldrb	r3, [r7, #7]
 800ec90:	490d      	ldr	r1, [pc, #52]	; (800ecc8 <OLED_Refresh_Gram+0x6c>)
 800ec92:	00d2      	lsls	r2, r2, #3
 800ec94:	440a      	add	r2, r1
 800ec96:	4413      	add	r3, r2
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	2101      	movs	r1, #1
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f000 f815 	bl	800eccc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800eca2:	79bb      	ldrb	r3, [r7, #6]
 800eca4:	3301      	adds	r3, #1
 800eca6:	71bb      	strb	r3, [r7, #6]
 800eca8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	daed      	bge.n	800ec8c <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800ecb0:	79fb      	ldrb	r3, [r7, #7]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	71fb      	strb	r3, [r7, #7]
 800ecb6:	79fb      	ldrb	r3, [r7, #7]
 800ecb8:	2b07      	cmp	r3, #7
 800ecba:	d9d5      	bls.n	800ec68 <OLED_Refresh_Gram+0xc>
	}
}
 800ecbc:	bf00      	nop
 800ecbe:	bf00      	nop
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	20004f08 	.word	0x20004f08

0800eccc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	460a      	mov	r2, r1
 800ecd6:	71fb      	strb	r3, [r7, #7]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800ecdc:	79bb      	ldrb	r3, [r7, #6]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d006      	beq.n	800ecf0 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800ece2:	2201      	movs	r2, #1
 800ece4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ece8:	481c      	ldr	r0, [pc, #112]	; (800ed5c <OLED_WR_Byte+0x90>)
 800ecea:	f7f8 fdc1 	bl	8007870 <HAL_GPIO_WritePin>
 800ecee:	e005      	b.n	800ecfc <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ecf6:	4819      	ldr	r0, [pc, #100]	; (800ed5c <OLED_WR_Byte+0x90>)
 800ecf8:	f7f8 fdba 	bl	8007870 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	73fb      	strb	r3, [r7, #15]
 800ed00:	e01e      	b.n	800ed40 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800ed02:	2200      	movs	r2, #0
 800ed04:	2120      	movs	r1, #32
 800ed06:	4815      	ldr	r0, [pc, #84]	; (800ed5c <OLED_WR_Byte+0x90>)
 800ed08:	f7f8 fdb2 	bl	8007870 <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800ed0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	da05      	bge.n	800ed20 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800ed14:	2201      	movs	r2, #1
 800ed16:	2140      	movs	r1, #64	; 0x40
 800ed18:	4810      	ldr	r0, [pc, #64]	; (800ed5c <OLED_WR_Byte+0x90>)
 800ed1a:	f7f8 fda9 	bl	8007870 <HAL_GPIO_WritePin>
 800ed1e:	e004      	b.n	800ed2a <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800ed20:	2200      	movs	r2, #0
 800ed22:	2140      	movs	r1, #64	; 0x40
 800ed24:	480d      	ldr	r0, [pc, #52]	; (800ed5c <OLED_WR_Byte+0x90>)
 800ed26:	f7f8 fda3 	bl	8007870 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	2120      	movs	r1, #32
 800ed2e:	480b      	ldr	r0, [pc, #44]	; (800ed5c <OLED_WR_Byte+0x90>)
 800ed30:	f7f8 fd9e 	bl	8007870 <HAL_GPIO_WritePin>
		dat <<= 1;
 800ed34:	79fb      	ldrb	r3, [r7, #7]
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800ed3a:	7bfb      	ldrb	r3, [r7, #15]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	73fb      	strb	r3, [r7, #15]
 800ed40:	7bfb      	ldrb	r3, [r7, #15]
 800ed42:	2b07      	cmp	r3, #7
 800ed44:	d9dd      	bls.n	800ed02 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800ed46:	2201      	movs	r2, #1
 800ed48:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ed4c:	4803      	ldr	r0, [pc, #12]	; (800ed5c <OLED_WR_Byte+0x90>)
 800ed4e:	f7f8 fd8f 	bl	8007870 <HAL_GPIO_WritePin>
}
 800ed52:	bf00      	nop
 800ed54:	3710      	adds	r7, #16
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	40021000 	.word	0x40021000

0800ed60 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800ed66:	2300      	movs	r3, #0
 800ed68:	71fb      	strb	r3, [r7, #7]
 800ed6a:	e014      	b.n	800ed96 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	71bb      	strb	r3, [r7, #6]
 800ed70:	e00a      	b.n	800ed88 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800ed72:	79ba      	ldrb	r2, [r7, #6]
 800ed74:	79fb      	ldrb	r3, [r7, #7]
 800ed76:	490c      	ldr	r1, [pc, #48]	; (800eda8 <OLED_Clear+0x48>)
 800ed78:	00d2      	lsls	r2, r2, #3
 800ed7a:	440a      	add	r2, r1
 800ed7c:	4413      	add	r3, r2
 800ed7e:	2200      	movs	r2, #0
 800ed80:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800ed82:	79bb      	ldrb	r3, [r7, #6]
 800ed84:	3301      	adds	r3, #1
 800ed86:	71bb      	strb	r3, [r7, #6]
 800ed88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	daf0      	bge.n	800ed72 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	3301      	adds	r3, #1
 800ed94:	71fb      	strb	r3, [r7, #7]
 800ed96:	79fb      	ldrb	r3, [r7, #7]
 800ed98:	2b07      	cmp	r3, #7
 800ed9a:	d9e7      	bls.n	800ed6c <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800ed9c:	f7ff ff5e 	bl	800ec5c <OLED_Refresh_Gram>
}
 800eda0:	bf00      	nop
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	20004f08 	.word	0x20004f08

0800edac <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	4603      	mov	r3, r0
 800edb4:	71fb      	strb	r3, [r7, #7]
 800edb6:	460b      	mov	r3, r1
 800edb8:	71bb      	strb	r3, [r7, #6]
 800edba:	4613      	mov	r3, r2
 800edbc:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800edc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	db41      	blt.n	800ee4e <OLED_DrawPoint+0xa2>
 800edca:	79bb      	ldrb	r3, [r7, #6]
 800edcc:	2b3f      	cmp	r3, #63	; 0x3f
 800edce:	d83e      	bhi.n	800ee4e <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800edd0:	79bb      	ldrb	r3, [r7, #6]
 800edd2:	08db      	lsrs	r3, r3, #3
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	f1c3 0307 	rsb	r3, r3, #7
 800edda:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800eddc:	79bb      	ldrb	r3, [r7, #6]
 800edde:	f003 0307 	and.w	r3, r3, #7
 800ede2:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800ede4:	7b7b      	ldrb	r3, [r7, #13]
 800ede6:	f1c3 0307 	rsb	r3, r3, #7
 800edea:	2201      	movs	r2, #1
 800edec:	fa02 f303 	lsl.w	r3, r2, r3
 800edf0:	73fb      	strb	r3, [r7, #15]
	if (t)
 800edf2:	797b      	ldrb	r3, [r7, #5]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d012      	beq.n	800ee1e <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800edf8:	79fa      	ldrb	r2, [r7, #7]
 800edfa:	7bbb      	ldrb	r3, [r7, #14]
 800edfc:	4917      	ldr	r1, [pc, #92]	; (800ee5c <OLED_DrawPoint+0xb0>)
 800edfe:	00d2      	lsls	r2, r2, #3
 800ee00:	440a      	add	r2, r1
 800ee02:	4413      	add	r3, r2
 800ee04:	7818      	ldrb	r0, [r3, #0]
 800ee06:	79fa      	ldrb	r2, [r7, #7]
 800ee08:	7bbb      	ldrb	r3, [r7, #14]
 800ee0a:	7bf9      	ldrb	r1, [r7, #15]
 800ee0c:	4301      	orrs	r1, r0
 800ee0e:	b2c8      	uxtb	r0, r1
 800ee10:	4912      	ldr	r1, [pc, #72]	; (800ee5c <OLED_DrawPoint+0xb0>)
 800ee12:	00d2      	lsls	r2, r2, #3
 800ee14:	440a      	add	r2, r1
 800ee16:	4413      	add	r3, r2
 800ee18:	4602      	mov	r2, r0
 800ee1a:	701a      	strb	r2, [r3, #0]
 800ee1c:	e018      	b.n	800ee50 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800ee1e:	79fa      	ldrb	r2, [r7, #7]
 800ee20:	7bbb      	ldrb	r3, [r7, #14]
 800ee22:	490e      	ldr	r1, [pc, #56]	; (800ee5c <OLED_DrawPoint+0xb0>)
 800ee24:	00d2      	lsls	r2, r2, #3
 800ee26:	440a      	add	r2, r1
 800ee28:	4413      	add	r3, r2
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	b25a      	sxtb	r2, r3
 800ee2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee32:	43db      	mvns	r3, r3
 800ee34:	b25b      	sxtb	r3, r3
 800ee36:	4013      	ands	r3, r2
 800ee38:	b259      	sxtb	r1, r3
 800ee3a:	79fa      	ldrb	r2, [r7, #7]
 800ee3c:	7bbb      	ldrb	r3, [r7, #14]
 800ee3e:	b2c8      	uxtb	r0, r1
 800ee40:	4906      	ldr	r1, [pc, #24]	; (800ee5c <OLED_DrawPoint+0xb0>)
 800ee42:	00d2      	lsls	r2, r2, #3
 800ee44:	440a      	add	r2, r1
 800ee46:	4413      	add	r3, r2
 800ee48:	4602      	mov	r2, r0
 800ee4a:	701a      	strb	r2, [r3, #0]
 800ee4c:	e000      	b.n	800ee50 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800ee4e:	bf00      	nop
}
 800ee50:	3714      	adds	r7, #20
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	20004f08 	.word	0x20004f08

0800ee60 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800ee60:	b590      	push	{r4, r7, lr}
 800ee62:	b085      	sub	sp, #20
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	4604      	mov	r4, r0
 800ee68:	4608      	mov	r0, r1
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	4623      	mov	r3, r4
 800ee70:	71fb      	strb	r3, [r7, #7]
 800ee72:	4603      	mov	r3, r0
 800ee74:	71bb      	strb	r3, [r7, #6]
 800ee76:	460b      	mov	r3, r1
 800ee78:	717b      	strb	r3, [r7, #5]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800ee7e:	79bb      	ldrb	r3, [r7, #6]
 800ee80:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800ee82:	797b      	ldrb	r3, [r7, #5]
 800ee84:	3b20      	subs	r3, #32
 800ee86:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800ee88:	2300      	movs	r3, #0
 800ee8a:	73bb      	strb	r3, [r7, #14]
 800ee8c:	e04d      	b.n	800ef2a <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800ee8e:	793b      	ldrb	r3, [r7, #4]
 800ee90:	2b0c      	cmp	r3, #12
 800ee92:	d10b      	bne.n	800eeac <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800ee94:	797a      	ldrb	r2, [r7, #5]
 800ee96:	7bb9      	ldrb	r1, [r7, #14]
 800ee98:	4828      	ldr	r0, [pc, #160]	; (800ef3c <OLED_ShowChar+0xdc>)
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	4413      	add	r3, r2
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	4403      	add	r3, r0
 800eea4:	440b      	add	r3, r1
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	73fb      	strb	r3, [r7, #15]
 800eeaa:	e007      	b.n	800eebc <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800eeac:	797a      	ldrb	r2, [r7, #5]
 800eeae:	7bbb      	ldrb	r3, [r7, #14]
 800eeb0:	4923      	ldr	r1, [pc, #140]	; (800ef40 <OLED_ShowChar+0xe0>)
 800eeb2:	0112      	lsls	r2, r2, #4
 800eeb4:	440a      	add	r2, r1
 800eeb6:	4413      	add	r3, r2
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800eebc:	2300      	movs	r3, #0
 800eebe:	737b      	strb	r3, [r7, #13]
 800eec0:	e02d      	b.n	800ef1e <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800eec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	da07      	bge.n	800eeda <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800eeca:	f897 2020 	ldrb.w	r2, [r7, #32]
 800eece:	79b9      	ldrb	r1, [r7, #6]
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7ff ff6a 	bl	800edac <OLED_DrawPoint>
 800eed8:	e00c      	b.n	800eef4 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800eeda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	bf0c      	ite	eq
 800eee2:	2301      	moveq	r3, #1
 800eee4:	2300      	movne	r3, #0
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	461a      	mov	r2, r3
 800eeea:	79b9      	ldrb	r1, [r7, #6]
 800eeec:	79fb      	ldrb	r3, [r7, #7]
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7ff ff5c 	bl	800edac <OLED_DrawPoint>
			temp <<= 1;
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
 800eef6:	005b      	lsls	r3, r3, #1
 800eef8:	73fb      	strb	r3, [r7, #15]
			y++;
 800eefa:	79bb      	ldrb	r3, [r7, #6]
 800eefc:	3301      	adds	r3, #1
 800eefe:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800ef00:	79ba      	ldrb	r2, [r7, #6]
 800ef02:	7b3b      	ldrb	r3, [r7, #12]
 800ef04:	1ad2      	subs	r2, r2, r3
 800ef06:	793b      	ldrb	r3, [r7, #4]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d105      	bne.n	800ef18 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800ef0c:	7b3b      	ldrb	r3, [r7, #12]
 800ef0e:	71bb      	strb	r3, [r7, #6]
				x++;
 800ef10:	79fb      	ldrb	r3, [r7, #7]
 800ef12:	3301      	adds	r3, #1
 800ef14:	71fb      	strb	r3, [r7, #7]
				break;
 800ef16:	e005      	b.n	800ef24 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800ef18:	7b7b      	ldrb	r3, [r7, #13]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	737b      	strb	r3, [r7, #13]
 800ef1e:	7b7b      	ldrb	r3, [r7, #13]
 800ef20:	2b07      	cmp	r3, #7
 800ef22:	d9ce      	bls.n	800eec2 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800ef24:	7bbb      	ldrb	r3, [r7, #14]
 800ef26:	3301      	adds	r3, #1
 800ef28:	73bb      	strb	r3, [r7, #14]
 800ef2a:	7bba      	ldrb	r2, [r7, #14]
 800ef2c:	793b      	ldrb	r3, [r7, #4]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d3ad      	bcc.n	800ee8e <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800ef32:	bf00      	nop
 800ef34:	bf00      	nop
 800ef36:	3714      	adds	r7, #20
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd90      	pop	{r4, r7, pc}
 800ef3c:	0800fe24 	.word	0x0800fe24
 800ef40:	08010298 	.word	0x08010298

0800ef44 <oled_pow>:

uint32_t oled_pow(uint8_t m, uint8_t n)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	460a      	mov	r2, r1
 800ef4e:	71fb      	strb	r3, [r7, #7]
 800ef50:	4613      	mov	r3, r2
 800ef52:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800ef54:	2301      	movs	r3, #1
 800ef56:	60fb      	str	r3, [r7, #12]
	while (n--)
 800ef58:	e004      	b.n	800ef64 <oled_pow+0x20>
		result *= m;
 800ef5a:	79fa      	ldrb	r2, [r7, #7]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	fb02 f303 	mul.w	r3, r2, r3
 800ef62:	60fb      	str	r3, [r7, #12]
	while (n--)
 800ef64:	79bb      	ldrb	r3, [r7, #6]
 800ef66:	1e5a      	subs	r2, r3, #1
 800ef68:	71ba      	strb	r2, [r7, #6]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1f5      	bne.n	800ef5a <oled_pow+0x16>
	return result;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr

0800ef7c <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 800ef7c:	b590      	push	{r4, r7, lr}
 800ef7e:	b087      	sub	sp, #28
 800ef80:	af02      	add	r7, sp, #8
 800ef82:	603a      	str	r2, [r7, #0]
 800ef84:	461a      	mov	r2, r3
 800ef86:	4603      	mov	r3, r0
 800ef88:	71fb      	strb	r3, [r7, #7]
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	71bb      	strb	r3, [r7, #6]
 800ef8e:	4613      	mov	r3, r2
 800ef90:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800ef92:	2300      	movs	r3, #0
 800ef94:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 800ef96:	2300      	movs	r3, #0
 800ef98:	73fb      	strb	r3, [r7, #15]
 800ef9a:	e051      	b.n	800f040 <OLED_ShowNumber+0xc4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 800ef9c:	797a      	ldrb	r2, [r7, #5]
 800ef9e:	7bfb      	ldrb	r3, [r7, #15]
 800efa0:	1ad3      	subs	r3, r2, r3
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	3b01      	subs	r3, #1
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	4619      	mov	r1, r3
 800efaa:	200a      	movs	r0, #10
 800efac:	f7ff ffca 	bl	800ef44 <oled_pow>
 800efb0:	4602      	mov	r2, r0
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800efb8:	4b26      	ldr	r3, [pc, #152]	; (800f054 <OLED_ShowNumber+0xd8>)
 800efba:	fba3 2301 	umull	r2, r3, r3, r1
 800efbe:	08da      	lsrs	r2, r3, #3
 800efc0:	4613      	mov	r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	4413      	add	r3, r2
 800efc6:	005b      	lsls	r3, r3, #1
 800efc8:	1aca      	subs	r2, r1, r3
 800efca:	4613      	mov	r3, r2
 800efcc:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 800efce:	7bbb      	ldrb	r3, [r7, #14]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d11d      	bne.n	800f010 <OLED_ShowNumber+0x94>
 800efd4:	7bfa      	ldrb	r2, [r7, #15]
 800efd6:	797b      	ldrb	r3, [r7, #5]
 800efd8:	3b01      	subs	r3, #1
 800efda:	429a      	cmp	r2, r3
 800efdc:	da18      	bge.n	800f010 <OLED_ShowNumber+0x94>
		{
			if (temp == 0)
 800efde:	7b7b      	ldrb	r3, [r7, #13]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d113      	bne.n	800f00c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ', size, 1);
 800efe4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efe8:	085b      	lsrs	r3, r3, #1
 800efea:	b2db      	uxtb	r3, r3
 800efec:	7bfa      	ldrb	r2, [r7, #15]
 800efee:	fb12 f303 	smulbb	r3, r2, r3
 800eff2:	b2da      	uxtb	r2, r3
 800eff4:	79fb      	ldrb	r3, [r7, #7]
 800eff6:	4413      	add	r3, r2
 800eff8:	b2d8      	uxtb	r0, r3
 800effa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800effe:	79b9      	ldrb	r1, [r7, #6]
 800f000:	2201      	movs	r2, #1
 800f002:	9200      	str	r2, [sp, #0]
 800f004:	2220      	movs	r2, #32
 800f006:	f7ff ff2b 	bl	800ee60 <OLED_ShowChar>
				continue;
 800f00a:	e016      	b.n	800f03a <OLED_ShowNumber+0xbe>
			}
			else
				enshow = 1;
 800f00c:	2301      	movs	r3, #1
 800f00e:	73bb      	strb	r3, [r7, #14]
		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
 800f010:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f014:	085b      	lsrs	r3, r3, #1
 800f016:	b2db      	uxtb	r3, r3
 800f018:	7bfa      	ldrb	r2, [r7, #15]
 800f01a:	fb12 f303 	smulbb	r3, r2, r3
 800f01e:	b2da      	uxtb	r2, r3
 800f020:	79fb      	ldrb	r3, [r7, #7]
 800f022:	4413      	add	r3, r2
 800f024:	b2d8      	uxtb	r0, r3
 800f026:	7b7b      	ldrb	r3, [r7, #13]
 800f028:	3330      	adds	r3, #48	; 0x30
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f030:	79b9      	ldrb	r1, [r7, #6]
 800f032:	2401      	movs	r4, #1
 800f034:	9400      	str	r4, [sp, #0]
 800f036:	f7ff ff13 	bl	800ee60 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 800f03a:	7bfb      	ldrb	r3, [r7, #15]
 800f03c:	3301      	adds	r3, #1
 800f03e:	73fb      	strb	r3, [r7, #15]
 800f040:	7bfa      	ldrb	r2, [r7, #15]
 800f042:	797b      	ldrb	r3, [r7, #5]
 800f044:	429a      	cmp	r2, r3
 800f046:	d3a9      	bcc.n	800ef9c <OLED_ShowNumber+0x20>
	}
}
 800f048:	bf00      	nop
 800f04a:	bf00      	nop
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd90      	pop	{r4, r7, pc}
 800f052:	bf00      	nop
 800f054:	cccccccd 	.word	0xcccccccd

0800f058 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af02      	add	r7, sp, #8
 800f05e:	4603      	mov	r3, r0
 800f060:	603a      	str	r2, [r7, #0]
 800f062:	71fb      	strb	r3, [r7, #7]
 800f064:	460b      	mov	r3, r1
 800f066:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800f068:	e01f      	b.n	800f0aa <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800f06a:	79fb      	ldrb	r3, [r7, #7]
 800f06c:	2b7a      	cmp	r3, #122	; 0x7a
 800f06e:	d904      	bls.n	800f07a <OLED_ShowString+0x22>
		{
			x = 0;
 800f070:	2300      	movs	r3, #0
 800f072:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800f074:	79bb      	ldrb	r3, [r7, #6]
 800f076:	3310      	adds	r3, #16
 800f078:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800f07a:	79bb      	ldrb	r3, [r7, #6]
 800f07c:	2b3a      	cmp	r3, #58	; 0x3a
 800f07e:	d905      	bls.n	800f08c <OLED_ShowString+0x34>
		{
			y = x = 0;
 800f080:	2300      	movs	r3, #0
 800f082:	71fb      	strb	r3, [r7, #7]
 800f084:	79fb      	ldrb	r3, [r7, #7]
 800f086:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800f088:	f7ff fe6a 	bl	800ed60 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	781a      	ldrb	r2, [r3, #0]
 800f090:	79b9      	ldrb	r1, [r7, #6]
 800f092:	79f8      	ldrb	r0, [r7, #7]
 800f094:	2301      	movs	r3, #1
 800f096:	9300      	str	r3, [sp, #0]
 800f098:	230c      	movs	r3, #12
 800f09a:	f7ff fee1 	bl	800ee60 <OLED_ShowChar>
		x += 8;
 800f09e:	79fb      	ldrb	r3, [r7, #7]
 800f0a0:	3308      	adds	r3, #8
 800f0a2:	71fb      	strb	r3, [r7, #7]
		p++;
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1db      	bne.n	800f06a <OLED_ShowString+0x12>
	}
}
 800f0b2:	bf00      	nop
 800f0b4:	bf00      	nop
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800f0c0:	f7f9 fbb0 	bl	8008824 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800f0c4:	4b41      	ldr	r3, [pc, #260]	; (800f1cc <OLED_Init+0x110>)
 800f0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0c8:	4a40      	ldr	r2, [pc, #256]	; (800f1cc <OLED_Init+0x110>)
 800f0ca:	f023 0301 	bic.w	r3, r3, #1
 800f0ce:	6713      	str	r3, [r2, #112]	; 0x70
 800f0d0:	4b3e      	ldr	r3, [pc, #248]	; (800f1cc <OLED_Init+0x110>)
 800f0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0d4:	4a3d      	ldr	r2, [pc, #244]	; (800f1cc <OLED_Init+0x110>)
 800f0d6:	f023 0304 	bic.w	r3, r3, #4
 800f0da:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800f0dc:	f7f9 fbb6 	bl	800884c <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	2180      	movs	r1, #128	; 0x80
 800f0e4:	483a      	ldr	r0, [pc, #232]	; (800f1d0 <OLED_Init+0x114>)
 800f0e6:	f7f8 fbc3 	bl	8007870 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800f0ea:	2064      	movs	r0, #100	; 0x64
 800f0ec:	f7f7 fc8c 	bl	8006a08 <HAL_Delay>
	OLED_RST_Set();
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	2180      	movs	r1, #128	; 0x80
 800f0f4:	4836      	ldr	r0, [pc, #216]	; (800f1d0 <OLED_Init+0x114>)
 800f0f6:	f7f8 fbbb 	bl	8007870 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	20ae      	movs	r0, #174	; 0xae
 800f0fe:	f7ff fde5 	bl	800eccc <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800f102:	2100      	movs	r1, #0
 800f104:	20d5      	movs	r0, #213	; 0xd5
 800f106:	f7ff fde1 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800f10a:	2100      	movs	r1, #0
 800f10c:	2050      	movs	r0, #80	; 0x50
 800f10e:	f7ff fddd 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800f112:	2100      	movs	r1, #0
 800f114:	20a8      	movs	r0, #168	; 0xa8
 800f116:	f7ff fdd9 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800f11a:	2100      	movs	r1, #0
 800f11c:	203f      	movs	r0, #63	; 0x3f
 800f11e:	f7ff fdd5 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800f122:	2100      	movs	r1, #0
 800f124:	20d3      	movs	r0, #211	; 0xd3
 800f126:	f7ff fdd1 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800f12a:	2100      	movs	r1, #0
 800f12c:	2000      	movs	r0, #0
 800f12e:	f7ff fdcd 	bl	800eccc <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800f132:	2100      	movs	r1, #0
 800f134:	2040      	movs	r0, #64	; 0x40
 800f136:	f7ff fdc9 	bl	800eccc <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800f13a:	2100      	movs	r1, #0
 800f13c:	208d      	movs	r0, #141	; 0x8d
 800f13e:	f7ff fdc5 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800f142:	2100      	movs	r1, #0
 800f144:	2014      	movs	r0, #20
 800f146:	f7ff fdc1 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800f14a:	2100      	movs	r1, #0
 800f14c:	2020      	movs	r0, #32
 800f14e:	f7ff fdbd 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800f152:	2100      	movs	r1, #0
 800f154:	2002      	movs	r0, #2
 800f156:	f7ff fdb9 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800f15a:	2100      	movs	r1, #0
 800f15c:	20a1      	movs	r0, #161	; 0xa1
 800f15e:	f7ff fdb5 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800f162:	2100      	movs	r1, #0
 800f164:	20c0      	movs	r0, #192	; 0xc0
 800f166:	f7ff fdb1 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800f16a:	2100      	movs	r1, #0
 800f16c:	20da      	movs	r0, #218	; 0xda
 800f16e:	f7ff fdad 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800f172:	2100      	movs	r1, #0
 800f174:	2012      	movs	r0, #18
 800f176:	f7ff fda9 	bl	800eccc <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800f17a:	2100      	movs	r1, #0
 800f17c:	2081      	movs	r0, #129	; 0x81
 800f17e:	f7ff fda5 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800f182:	2100      	movs	r1, #0
 800f184:	20ef      	movs	r0, #239	; 0xef
 800f186:	f7ff fda1 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800f18a:	2100      	movs	r1, #0
 800f18c:	20d9      	movs	r0, #217	; 0xd9
 800f18e:	f7ff fd9d 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800f192:	2100      	movs	r1, #0
 800f194:	20f1      	movs	r0, #241	; 0xf1
 800f196:	f7ff fd99 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800f19a:	2100      	movs	r1, #0
 800f19c:	20db      	movs	r0, #219	; 0xdb
 800f19e:	f7ff fd95 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	2030      	movs	r0, #48	; 0x30
 800f1a6:	f7ff fd91 	bl	800eccc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800f1aa:	2100      	movs	r1, #0
 800f1ac:	20a4      	movs	r0, #164	; 0xa4
 800f1ae:	f7ff fd8d 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	20a6      	movs	r0, #166	; 0xa6
 800f1b6:	f7ff fd89 	bl	800eccc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	20af      	movs	r0, #175	; 0xaf
 800f1be:	f7ff fd85 	bl	800eccc <OLED_WR_Byte>
	OLED_Clear();
 800f1c2:	f7ff fdcd 	bl	800ed60 <OLED_Clear>
 800f1c6:	bf00      	nop
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	40023800 	.word	0x40023800
 800f1d0:	40021000 	.word	0x40021000

0800f1d4 <sniprintf>:
 800f1d4:	b40c      	push	{r2, r3}
 800f1d6:	b530      	push	{r4, r5, lr}
 800f1d8:	4b17      	ldr	r3, [pc, #92]	; (800f238 <sniprintf+0x64>)
 800f1da:	1e0c      	subs	r4, r1, #0
 800f1dc:	681d      	ldr	r5, [r3, #0]
 800f1de:	b09d      	sub	sp, #116	; 0x74
 800f1e0:	da08      	bge.n	800f1f4 <sniprintf+0x20>
 800f1e2:	238b      	movs	r3, #139	; 0x8b
 800f1e4:	602b      	str	r3, [r5, #0]
 800f1e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1ea:	b01d      	add	sp, #116	; 0x74
 800f1ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1f0:	b002      	add	sp, #8
 800f1f2:	4770      	bx	lr
 800f1f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f1f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f1fc:	bf14      	ite	ne
 800f1fe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f202:	4623      	moveq	r3, r4
 800f204:	9304      	str	r3, [sp, #16]
 800f206:	9307      	str	r3, [sp, #28]
 800f208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f20c:	9002      	str	r0, [sp, #8]
 800f20e:	9006      	str	r0, [sp, #24]
 800f210:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f214:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f216:	ab21      	add	r3, sp, #132	; 0x84
 800f218:	a902      	add	r1, sp, #8
 800f21a:	4628      	mov	r0, r5
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	f000 f8a9 	bl	800f374 <_svfiprintf_r>
 800f222:	1c43      	adds	r3, r0, #1
 800f224:	bfbc      	itt	lt
 800f226:	238b      	movlt	r3, #139	; 0x8b
 800f228:	602b      	strlt	r3, [r5, #0]
 800f22a:	2c00      	cmp	r4, #0
 800f22c:	d0dd      	beq.n	800f1ea <sniprintf+0x16>
 800f22e:	9b02      	ldr	r3, [sp, #8]
 800f230:	2200      	movs	r2, #0
 800f232:	701a      	strb	r2, [r3, #0]
 800f234:	e7d9      	b.n	800f1ea <sniprintf+0x16>
 800f236:	bf00      	nop
 800f238:	200001a0 	.word	0x200001a0

0800f23c <memset>:
 800f23c:	4402      	add	r2, r0
 800f23e:	4603      	mov	r3, r0
 800f240:	4293      	cmp	r3, r2
 800f242:	d100      	bne.n	800f246 <memset+0xa>
 800f244:	4770      	bx	lr
 800f246:	f803 1b01 	strb.w	r1, [r3], #1
 800f24a:	e7f9      	b.n	800f240 <memset+0x4>

0800f24c <__errno>:
 800f24c:	4b01      	ldr	r3, [pc, #4]	; (800f254 <__errno+0x8>)
 800f24e:	6818      	ldr	r0, [r3, #0]
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	200001a0 	.word	0x200001a0

0800f258 <__libc_init_array>:
 800f258:	b570      	push	{r4, r5, r6, lr}
 800f25a:	4d0d      	ldr	r5, [pc, #52]	; (800f290 <__libc_init_array+0x38>)
 800f25c:	4c0d      	ldr	r4, [pc, #52]	; (800f294 <__libc_init_array+0x3c>)
 800f25e:	1b64      	subs	r4, r4, r5
 800f260:	10a4      	asrs	r4, r4, #2
 800f262:	2600      	movs	r6, #0
 800f264:	42a6      	cmp	r6, r4
 800f266:	d109      	bne.n	800f27c <__libc_init_array+0x24>
 800f268:	4d0b      	ldr	r5, [pc, #44]	; (800f298 <__libc_init_array+0x40>)
 800f26a:	4c0c      	ldr	r4, [pc, #48]	; (800f29c <__libc_init_array+0x44>)
 800f26c:	f000 fc6a 	bl	800fb44 <_init>
 800f270:	1b64      	subs	r4, r4, r5
 800f272:	10a4      	asrs	r4, r4, #2
 800f274:	2600      	movs	r6, #0
 800f276:	42a6      	cmp	r6, r4
 800f278:	d105      	bne.n	800f286 <__libc_init_array+0x2e>
 800f27a:	bd70      	pop	{r4, r5, r6, pc}
 800f27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f280:	4798      	blx	r3
 800f282:	3601      	adds	r6, #1
 800f284:	e7ee      	b.n	800f264 <__libc_init_array+0xc>
 800f286:	f855 3b04 	ldr.w	r3, [r5], #4
 800f28a:	4798      	blx	r3
 800f28c:	3601      	adds	r6, #1
 800f28e:	e7f2      	b.n	800f276 <__libc_init_array+0x1e>
 800f290:	080108c4 	.word	0x080108c4
 800f294:	080108c4 	.word	0x080108c4
 800f298:	080108c4 	.word	0x080108c4
 800f29c:	080108c8 	.word	0x080108c8

0800f2a0 <__retarget_lock_acquire_recursive>:
 800f2a0:	4770      	bx	lr

0800f2a2 <__retarget_lock_release_recursive>:
 800f2a2:	4770      	bx	lr

0800f2a4 <memcpy>:
 800f2a4:	440a      	add	r2, r1
 800f2a6:	4291      	cmp	r1, r2
 800f2a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f2ac:	d100      	bne.n	800f2b0 <memcpy+0xc>
 800f2ae:	4770      	bx	lr
 800f2b0:	b510      	push	{r4, lr}
 800f2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2ba:	4291      	cmp	r1, r2
 800f2bc:	d1f9      	bne.n	800f2b2 <memcpy+0xe>
 800f2be:	bd10      	pop	{r4, pc}

0800f2c0 <__ssputs_r>:
 800f2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2c4:	688e      	ldr	r6, [r1, #8]
 800f2c6:	461f      	mov	r7, r3
 800f2c8:	42be      	cmp	r6, r7
 800f2ca:	680b      	ldr	r3, [r1, #0]
 800f2cc:	4682      	mov	sl, r0
 800f2ce:	460c      	mov	r4, r1
 800f2d0:	4690      	mov	r8, r2
 800f2d2:	d82c      	bhi.n	800f32e <__ssputs_r+0x6e>
 800f2d4:	898a      	ldrh	r2, [r1, #12]
 800f2d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f2da:	d026      	beq.n	800f32a <__ssputs_r+0x6a>
 800f2dc:	6965      	ldr	r5, [r4, #20]
 800f2de:	6909      	ldr	r1, [r1, #16]
 800f2e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2e4:	eba3 0901 	sub.w	r9, r3, r1
 800f2e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f2ec:	1c7b      	adds	r3, r7, #1
 800f2ee:	444b      	add	r3, r9
 800f2f0:	106d      	asrs	r5, r5, #1
 800f2f2:	429d      	cmp	r5, r3
 800f2f4:	bf38      	it	cc
 800f2f6:	461d      	movcc	r5, r3
 800f2f8:	0553      	lsls	r3, r2, #21
 800f2fa:	d527      	bpl.n	800f34c <__ssputs_r+0x8c>
 800f2fc:	4629      	mov	r1, r5
 800f2fe:	f000 f957 	bl	800f5b0 <_malloc_r>
 800f302:	4606      	mov	r6, r0
 800f304:	b360      	cbz	r0, 800f360 <__ssputs_r+0xa0>
 800f306:	6921      	ldr	r1, [r4, #16]
 800f308:	464a      	mov	r2, r9
 800f30a:	f7ff ffcb 	bl	800f2a4 <memcpy>
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f318:	81a3      	strh	r3, [r4, #12]
 800f31a:	6126      	str	r6, [r4, #16]
 800f31c:	6165      	str	r5, [r4, #20]
 800f31e:	444e      	add	r6, r9
 800f320:	eba5 0509 	sub.w	r5, r5, r9
 800f324:	6026      	str	r6, [r4, #0]
 800f326:	60a5      	str	r5, [r4, #8]
 800f328:	463e      	mov	r6, r7
 800f32a:	42be      	cmp	r6, r7
 800f32c:	d900      	bls.n	800f330 <__ssputs_r+0x70>
 800f32e:	463e      	mov	r6, r7
 800f330:	6820      	ldr	r0, [r4, #0]
 800f332:	4632      	mov	r2, r6
 800f334:	4641      	mov	r1, r8
 800f336:	f000 fb86 	bl	800fa46 <memmove>
 800f33a:	68a3      	ldr	r3, [r4, #8]
 800f33c:	1b9b      	subs	r3, r3, r6
 800f33e:	60a3      	str	r3, [r4, #8]
 800f340:	6823      	ldr	r3, [r4, #0]
 800f342:	4433      	add	r3, r6
 800f344:	6023      	str	r3, [r4, #0]
 800f346:	2000      	movs	r0, #0
 800f348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f34c:	462a      	mov	r2, r5
 800f34e:	f000 fb4b 	bl	800f9e8 <_realloc_r>
 800f352:	4606      	mov	r6, r0
 800f354:	2800      	cmp	r0, #0
 800f356:	d1e0      	bne.n	800f31a <__ssputs_r+0x5a>
 800f358:	6921      	ldr	r1, [r4, #16]
 800f35a:	4650      	mov	r0, sl
 800f35c:	f000 fb9e 	bl	800fa9c <_free_r>
 800f360:	230c      	movs	r3, #12
 800f362:	f8ca 3000 	str.w	r3, [sl]
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f36c:	81a3      	strh	r3, [r4, #12]
 800f36e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f372:	e7e9      	b.n	800f348 <__ssputs_r+0x88>

0800f374 <_svfiprintf_r>:
 800f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f378:	4698      	mov	r8, r3
 800f37a:	898b      	ldrh	r3, [r1, #12]
 800f37c:	061b      	lsls	r3, r3, #24
 800f37e:	b09d      	sub	sp, #116	; 0x74
 800f380:	4607      	mov	r7, r0
 800f382:	460d      	mov	r5, r1
 800f384:	4614      	mov	r4, r2
 800f386:	d50e      	bpl.n	800f3a6 <_svfiprintf_r+0x32>
 800f388:	690b      	ldr	r3, [r1, #16]
 800f38a:	b963      	cbnz	r3, 800f3a6 <_svfiprintf_r+0x32>
 800f38c:	2140      	movs	r1, #64	; 0x40
 800f38e:	f000 f90f 	bl	800f5b0 <_malloc_r>
 800f392:	6028      	str	r0, [r5, #0]
 800f394:	6128      	str	r0, [r5, #16]
 800f396:	b920      	cbnz	r0, 800f3a2 <_svfiprintf_r+0x2e>
 800f398:	230c      	movs	r3, #12
 800f39a:	603b      	str	r3, [r7, #0]
 800f39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3a0:	e0d0      	b.n	800f544 <_svfiprintf_r+0x1d0>
 800f3a2:	2340      	movs	r3, #64	; 0x40
 800f3a4:	616b      	str	r3, [r5, #20]
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3aa:	2320      	movs	r3, #32
 800f3ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3b4:	2330      	movs	r3, #48	; 0x30
 800f3b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f55c <_svfiprintf_r+0x1e8>
 800f3ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3be:	f04f 0901 	mov.w	r9, #1
 800f3c2:	4623      	mov	r3, r4
 800f3c4:	469a      	mov	sl, r3
 800f3c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3ca:	b10a      	cbz	r2, 800f3d0 <_svfiprintf_r+0x5c>
 800f3cc:	2a25      	cmp	r2, #37	; 0x25
 800f3ce:	d1f9      	bne.n	800f3c4 <_svfiprintf_r+0x50>
 800f3d0:	ebba 0b04 	subs.w	fp, sl, r4
 800f3d4:	d00b      	beq.n	800f3ee <_svfiprintf_r+0x7a>
 800f3d6:	465b      	mov	r3, fp
 800f3d8:	4622      	mov	r2, r4
 800f3da:	4629      	mov	r1, r5
 800f3dc:	4638      	mov	r0, r7
 800f3de:	f7ff ff6f 	bl	800f2c0 <__ssputs_r>
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	f000 80a9 	beq.w	800f53a <_svfiprintf_r+0x1c6>
 800f3e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3ea:	445a      	add	r2, fp
 800f3ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f000 80a1 	beq.w	800f53a <_svfiprintf_r+0x1c6>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f402:	f10a 0a01 	add.w	sl, sl, #1
 800f406:	9304      	str	r3, [sp, #16]
 800f408:	9307      	str	r3, [sp, #28]
 800f40a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f40e:	931a      	str	r3, [sp, #104]	; 0x68
 800f410:	4654      	mov	r4, sl
 800f412:	2205      	movs	r2, #5
 800f414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f418:	4850      	ldr	r0, [pc, #320]	; (800f55c <_svfiprintf_r+0x1e8>)
 800f41a:	f7f0 fed9 	bl	80001d0 <memchr>
 800f41e:	9a04      	ldr	r2, [sp, #16]
 800f420:	b9d8      	cbnz	r0, 800f45a <_svfiprintf_r+0xe6>
 800f422:	06d0      	lsls	r0, r2, #27
 800f424:	bf44      	itt	mi
 800f426:	2320      	movmi	r3, #32
 800f428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f42c:	0711      	lsls	r1, r2, #28
 800f42e:	bf44      	itt	mi
 800f430:	232b      	movmi	r3, #43	; 0x2b
 800f432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f436:	f89a 3000 	ldrb.w	r3, [sl]
 800f43a:	2b2a      	cmp	r3, #42	; 0x2a
 800f43c:	d015      	beq.n	800f46a <_svfiprintf_r+0xf6>
 800f43e:	9a07      	ldr	r2, [sp, #28]
 800f440:	4654      	mov	r4, sl
 800f442:	2000      	movs	r0, #0
 800f444:	f04f 0c0a 	mov.w	ip, #10
 800f448:	4621      	mov	r1, r4
 800f44a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f44e:	3b30      	subs	r3, #48	; 0x30
 800f450:	2b09      	cmp	r3, #9
 800f452:	d94d      	bls.n	800f4f0 <_svfiprintf_r+0x17c>
 800f454:	b1b0      	cbz	r0, 800f484 <_svfiprintf_r+0x110>
 800f456:	9207      	str	r2, [sp, #28]
 800f458:	e014      	b.n	800f484 <_svfiprintf_r+0x110>
 800f45a:	eba0 0308 	sub.w	r3, r0, r8
 800f45e:	fa09 f303 	lsl.w	r3, r9, r3
 800f462:	4313      	orrs	r3, r2
 800f464:	9304      	str	r3, [sp, #16]
 800f466:	46a2      	mov	sl, r4
 800f468:	e7d2      	b.n	800f410 <_svfiprintf_r+0x9c>
 800f46a:	9b03      	ldr	r3, [sp, #12]
 800f46c:	1d19      	adds	r1, r3, #4
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	9103      	str	r1, [sp, #12]
 800f472:	2b00      	cmp	r3, #0
 800f474:	bfbb      	ittet	lt
 800f476:	425b      	neglt	r3, r3
 800f478:	f042 0202 	orrlt.w	r2, r2, #2
 800f47c:	9307      	strge	r3, [sp, #28]
 800f47e:	9307      	strlt	r3, [sp, #28]
 800f480:	bfb8      	it	lt
 800f482:	9204      	strlt	r2, [sp, #16]
 800f484:	7823      	ldrb	r3, [r4, #0]
 800f486:	2b2e      	cmp	r3, #46	; 0x2e
 800f488:	d10c      	bne.n	800f4a4 <_svfiprintf_r+0x130>
 800f48a:	7863      	ldrb	r3, [r4, #1]
 800f48c:	2b2a      	cmp	r3, #42	; 0x2a
 800f48e:	d134      	bne.n	800f4fa <_svfiprintf_r+0x186>
 800f490:	9b03      	ldr	r3, [sp, #12]
 800f492:	1d1a      	adds	r2, r3, #4
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	9203      	str	r2, [sp, #12]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	bfb8      	it	lt
 800f49c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f4a0:	3402      	adds	r4, #2
 800f4a2:	9305      	str	r3, [sp, #20]
 800f4a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f56c <_svfiprintf_r+0x1f8>
 800f4a8:	7821      	ldrb	r1, [r4, #0]
 800f4aa:	2203      	movs	r2, #3
 800f4ac:	4650      	mov	r0, sl
 800f4ae:	f7f0 fe8f 	bl	80001d0 <memchr>
 800f4b2:	b138      	cbz	r0, 800f4c4 <_svfiprintf_r+0x150>
 800f4b4:	9b04      	ldr	r3, [sp, #16]
 800f4b6:	eba0 000a 	sub.w	r0, r0, sl
 800f4ba:	2240      	movs	r2, #64	; 0x40
 800f4bc:	4082      	lsls	r2, r0
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	3401      	adds	r4, #1
 800f4c2:	9304      	str	r3, [sp, #16]
 800f4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4c8:	4825      	ldr	r0, [pc, #148]	; (800f560 <_svfiprintf_r+0x1ec>)
 800f4ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4ce:	2206      	movs	r2, #6
 800f4d0:	f7f0 fe7e 	bl	80001d0 <memchr>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d038      	beq.n	800f54a <_svfiprintf_r+0x1d6>
 800f4d8:	4b22      	ldr	r3, [pc, #136]	; (800f564 <_svfiprintf_r+0x1f0>)
 800f4da:	bb1b      	cbnz	r3, 800f524 <_svfiprintf_r+0x1b0>
 800f4dc:	9b03      	ldr	r3, [sp, #12]
 800f4de:	3307      	adds	r3, #7
 800f4e0:	f023 0307 	bic.w	r3, r3, #7
 800f4e4:	3308      	adds	r3, #8
 800f4e6:	9303      	str	r3, [sp, #12]
 800f4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ea:	4433      	add	r3, r6
 800f4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ee:	e768      	b.n	800f3c2 <_svfiprintf_r+0x4e>
 800f4f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4f4:	460c      	mov	r4, r1
 800f4f6:	2001      	movs	r0, #1
 800f4f8:	e7a6      	b.n	800f448 <_svfiprintf_r+0xd4>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	3401      	adds	r4, #1
 800f4fe:	9305      	str	r3, [sp, #20]
 800f500:	4619      	mov	r1, r3
 800f502:	f04f 0c0a 	mov.w	ip, #10
 800f506:	4620      	mov	r0, r4
 800f508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f50c:	3a30      	subs	r2, #48	; 0x30
 800f50e:	2a09      	cmp	r2, #9
 800f510:	d903      	bls.n	800f51a <_svfiprintf_r+0x1a6>
 800f512:	2b00      	cmp	r3, #0
 800f514:	d0c6      	beq.n	800f4a4 <_svfiprintf_r+0x130>
 800f516:	9105      	str	r1, [sp, #20]
 800f518:	e7c4      	b.n	800f4a4 <_svfiprintf_r+0x130>
 800f51a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f51e:	4604      	mov	r4, r0
 800f520:	2301      	movs	r3, #1
 800f522:	e7f0      	b.n	800f506 <_svfiprintf_r+0x192>
 800f524:	ab03      	add	r3, sp, #12
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	462a      	mov	r2, r5
 800f52a:	4b0f      	ldr	r3, [pc, #60]	; (800f568 <_svfiprintf_r+0x1f4>)
 800f52c:	a904      	add	r1, sp, #16
 800f52e:	4638      	mov	r0, r7
 800f530:	f3af 8000 	nop.w
 800f534:	1c42      	adds	r2, r0, #1
 800f536:	4606      	mov	r6, r0
 800f538:	d1d6      	bne.n	800f4e8 <_svfiprintf_r+0x174>
 800f53a:	89ab      	ldrh	r3, [r5, #12]
 800f53c:	065b      	lsls	r3, r3, #25
 800f53e:	f53f af2d 	bmi.w	800f39c <_svfiprintf_r+0x28>
 800f542:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f544:	b01d      	add	sp, #116	; 0x74
 800f546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54a:	ab03      	add	r3, sp, #12
 800f54c:	9300      	str	r3, [sp, #0]
 800f54e:	462a      	mov	r2, r5
 800f550:	4b05      	ldr	r3, [pc, #20]	; (800f568 <_svfiprintf_r+0x1f4>)
 800f552:	a904      	add	r1, sp, #16
 800f554:	4638      	mov	r0, r7
 800f556:	f000 f919 	bl	800f78c <_printf_i>
 800f55a:	e7eb      	b.n	800f534 <_svfiprintf_r+0x1c0>
 800f55c:	08010888 	.word	0x08010888
 800f560:	08010892 	.word	0x08010892
 800f564:	00000000 	.word	0x00000000
 800f568:	0800f2c1 	.word	0x0800f2c1
 800f56c:	0801088e 	.word	0x0801088e

0800f570 <sbrk_aligned>:
 800f570:	b570      	push	{r4, r5, r6, lr}
 800f572:	4e0e      	ldr	r6, [pc, #56]	; (800f5ac <sbrk_aligned+0x3c>)
 800f574:	460c      	mov	r4, r1
 800f576:	6831      	ldr	r1, [r6, #0]
 800f578:	4605      	mov	r5, r0
 800f57a:	b911      	cbnz	r1, 800f582 <sbrk_aligned+0x12>
 800f57c:	f000 fa7e 	bl	800fa7c <_sbrk_r>
 800f580:	6030      	str	r0, [r6, #0]
 800f582:	4621      	mov	r1, r4
 800f584:	4628      	mov	r0, r5
 800f586:	f000 fa79 	bl	800fa7c <_sbrk_r>
 800f58a:	1c43      	adds	r3, r0, #1
 800f58c:	d00a      	beq.n	800f5a4 <sbrk_aligned+0x34>
 800f58e:	1cc4      	adds	r4, r0, #3
 800f590:	f024 0403 	bic.w	r4, r4, #3
 800f594:	42a0      	cmp	r0, r4
 800f596:	d007      	beq.n	800f5a8 <sbrk_aligned+0x38>
 800f598:	1a21      	subs	r1, r4, r0
 800f59a:	4628      	mov	r0, r5
 800f59c:	f000 fa6e 	bl	800fa7c <_sbrk_r>
 800f5a0:	3001      	adds	r0, #1
 800f5a2:	d101      	bne.n	800f5a8 <sbrk_aligned+0x38>
 800f5a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}
 800f5ac:	20005448 	.word	0x20005448

0800f5b0 <_malloc_r>:
 800f5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5b4:	1ccd      	adds	r5, r1, #3
 800f5b6:	f025 0503 	bic.w	r5, r5, #3
 800f5ba:	3508      	adds	r5, #8
 800f5bc:	2d0c      	cmp	r5, #12
 800f5be:	bf38      	it	cc
 800f5c0:	250c      	movcc	r5, #12
 800f5c2:	2d00      	cmp	r5, #0
 800f5c4:	4607      	mov	r7, r0
 800f5c6:	db01      	blt.n	800f5cc <_malloc_r+0x1c>
 800f5c8:	42a9      	cmp	r1, r5
 800f5ca:	d905      	bls.n	800f5d8 <_malloc_r+0x28>
 800f5cc:	230c      	movs	r3, #12
 800f5ce:	603b      	str	r3, [r7, #0]
 800f5d0:	2600      	movs	r6, #0
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f6ac <_malloc_r+0xfc>
 800f5dc:	f000 f9f8 	bl	800f9d0 <__malloc_lock>
 800f5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800f5e4:	461c      	mov	r4, r3
 800f5e6:	bb5c      	cbnz	r4, 800f640 <_malloc_r+0x90>
 800f5e8:	4629      	mov	r1, r5
 800f5ea:	4638      	mov	r0, r7
 800f5ec:	f7ff ffc0 	bl	800f570 <sbrk_aligned>
 800f5f0:	1c43      	adds	r3, r0, #1
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	d155      	bne.n	800f6a2 <_malloc_r+0xf2>
 800f5f6:	f8d8 4000 	ldr.w	r4, [r8]
 800f5fa:	4626      	mov	r6, r4
 800f5fc:	2e00      	cmp	r6, #0
 800f5fe:	d145      	bne.n	800f68c <_malloc_r+0xdc>
 800f600:	2c00      	cmp	r4, #0
 800f602:	d048      	beq.n	800f696 <_malloc_r+0xe6>
 800f604:	6823      	ldr	r3, [r4, #0]
 800f606:	4631      	mov	r1, r6
 800f608:	4638      	mov	r0, r7
 800f60a:	eb04 0903 	add.w	r9, r4, r3
 800f60e:	f000 fa35 	bl	800fa7c <_sbrk_r>
 800f612:	4581      	cmp	r9, r0
 800f614:	d13f      	bne.n	800f696 <_malloc_r+0xe6>
 800f616:	6821      	ldr	r1, [r4, #0]
 800f618:	1a6d      	subs	r5, r5, r1
 800f61a:	4629      	mov	r1, r5
 800f61c:	4638      	mov	r0, r7
 800f61e:	f7ff ffa7 	bl	800f570 <sbrk_aligned>
 800f622:	3001      	adds	r0, #1
 800f624:	d037      	beq.n	800f696 <_malloc_r+0xe6>
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	442b      	add	r3, r5
 800f62a:	6023      	str	r3, [r4, #0]
 800f62c:	f8d8 3000 	ldr.w	r3, [r8]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d038      	beq.n	800f6a6 <_malloc_r+0xf6>
 800f634:	685a      	ldr	r2, [r3, #4]
 800f636:	42a2      	cmp	r2, r4
 800f638:	d12b      	bne.n	800f692 <_malloc_r+0xe2>
 800f63a:	2200      	movs	r2, #0
 800f63c:	605a      	str	r2, [r3, #4]
 800f63e:	e00f      	b.n	800f660 <_malloc_r+0xb0>
 800f640:	6822      	ldr	r2, [r4, #0]
 800f642:	1b52      	subs	r2, r2, r5
 800f644:	d41f      	bmi.n	800f686 <_malloc_r+0xd6>
 800f646:	2a0b      	cmp	r2, #11
 800f648:	d917      	bls.n	800f67a <_malloc_r+0xca>
 800f64a:	1961      	adds	r1, r4, r5
 800f64c:	42a3      	cmp	r3, r4
 800f64e:	6025      	str	r5, [r4, #0]
 800f650:	bf18      	it	ne
 800f652:	6059      	strne	r1, [r3, #4]
 800f654:	6863      	ldr	r3, [r4, #4]
 800f656:	bf08      	it	eq
 800f658:	f8c8 1000 	streq.w	r1, [r8]
 800f65c:	5162      	str	r2, [r4, r5]
 800f65e:	604b      	str	r3, [r1, #4]
 800f660:	4638      	mov	r0, r7
 800f662:	f104 060b 	add.w	r6, r4, #11
 800f666:	f000 f9b9 	bl	800f9dc <__malloc_unlock>
 800f66a:	f026 0607 	bic.w	r6, r6, #7
 800f66e:	1d23      	adds	r3, r4, #4
 800f670:	1af2      	subs	r2, r6, r3
 800f672:	d0ae      	beq.n	800f5d2 <_malloc_r+0x22>
 800f674:	1b9b      	subs	r3, r3, r6
 800f676:	50a3      	str	r3, [r4, r2]
 800f678:	e7ab      	b.n	800f5d2 <_malloc_r+0x22>
 800f67a:	42a3      	cmp	r3, r4
 800f67c:	6862      	ldr	r2, [r4, #4]
 800f67e:	d1dd      	bne.n	800f63c <_malloc_r+0x8c>
 800f680:	f8c8 2000 	str.w	r2, [r8]
 800f684:	e7ec      	b.n	800f660 <_malloc_r+0xb0>
 800f686:	4623      	mov	r3, r4
 800f688:	6864      	ldr	r4, [r4, #4]
 800f68a:	e7ac      	b.n	800f5e6 <_malloc_r+0x36>
 800f68c:	4634      	mov	r4, r6
 800f68e:	6876      	ldr	r6, [r6, #4]
 800f690:	e7b4      	b.n	800f5fc <_malloc_r+0x4c>
 800f692:	4613      	mov	r3, r2
 800f694:	e7cc      	b.n	800f630 <_malloc_r+0x80>
 800f696:	230c      	movs	r3, #12
 800f698:	603b      	str	r3, [r7, #0]
 800f69a:	4638      	mov	r0, r7
 800f69c:	f000 f99e 	bl	800f9dc <__malloc_unlock>
 800f6a0:	e797      	b.n	800f5d2 <_malloc_r+0x22>
 800f6a2:	6025      	str	r5, [r4, #0]
 800f6a4:	e7dc      	b.n	800f660 <_malloc_r+0xb0>
 800f6a6:	605b      	str	r3, [r3, #4]
 800f6a8:	deff      	udf	#255	; 0xff
 800f6aa:	bf00      	nop
 800f6ac:	20005444 	.word	0x20005444

0800f6b0 <_printf_common>:
 800f6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b4:	4616      	mov	r6, r2
 800f6b6:	4699      	mov	r9, r3
 800f6b8:	688a      	ldr	r2, [r1, #8]
 800f6ba:	690b      	ldr	r3, [r1, #16]
 800f6bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	bfb8      	it	lt
 800f6c4:	4613      	movlt	r3, r2
 800f6c6:	6033      	str	r3, [r6, #0]
 800f6c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6cc:	4607      	mov	r7, r0
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	b10a      	cbz	r2, 800f6d6 <_printf_common+0x26>
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	6033      	str	r3, [r6, #0]
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	0699      	lsls	r1, r3, #26
 800f6da:	bf42      	ittt	mi
 800f6dc:	6833      	ldrmi	r3, [r6, #0]
 800f6de:	3302      	addmi	r3, #2
 800f6e0:	6033      	strmi	r3, [r6, #0]
 800f6e2:	6825      	ldr	r5, [r4, #0]
 800f6e4:	f015 0506 	ands.w	r5, r5, #6
 800f6e8:	d106      	bne.n	800f6f8 <_printf_common+0x48>
 800f6ea:	f104 0a19 	add.w	sl, r4, #25
 800f6ee:	68e3      	ldr	r3, [r4, #12]
 800f6f0:	6832      	ldr	r2, [r6, #0]
 800f6f2:	1a9b      	subs	r3, r3, r2
 800f6f4:	42ab      	cmp	r3, r5
 800f6f6:	dc26      	bgt.n	800f746 <_printf_common+0x96>
 800f6f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f6fc:	1e13      	subs	r3, r2, #0
 800f6fe:	6822      	ldr	r2, [r4, #0]
 800f700:	bf18      	it	ne
 800f702:	2301      	movne	r3, #1
 800f704:	0692      	lsls	r2, r2, #26
 800f706:	d42b      	bmi.n	800f760 <_printf_common+0xb0>
 800f708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f70c:	4649      	mov	r1, r9
 800f70e:	4638      	mov	r0, r7
 800f710:	47c0      	blx	r8
 800f712:	3001      	adds	r0, #1
 800f714:	d01e      	beq.n	800f754 <_printf_common+0xa4>
 800f716:	6823      	ldr	r3, [r4, #0]
 800f718:	6922      	ldr	r2, [r4, #16]
 800f71a:	f003 0306 	and.w	r3, r3, #6
 800f71e:	2b04      	cmp	r3, #4
 800f720:	bf02      	ittt	eq
 800f722:	68e5      	ldreq	r5, [r4, #12]
 800f724:	6833      	ldreq	r3, [r6, #0]
 800f726:	1aed      	subeq	r5, r5, r3
 800f728:	68a3      	ldr	r3, [r4, #8]
 800f72a:	bf0c      	ite	eq
 800f72c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f730:	2500      	movne	r5, #0
 800f732:	4293      	cmp	r3, r2
 800f734:	bfc4      	itt	gt
 800f736:	1a9b      	subgt	r3, r3, r2
 800f738:	18ed      	addgt	r5, r5, r3
 800f73a:	2600      	movs	r6, #0
 800f73c:	341a      	adds	r4, #26
 800f73e:	42b5      	cmp	r5, r6
 800f740:	d11a      	bne.n	800f778 <_printf_common+0xc8>
 800f742:	2000      	movs	r0, #0
 800f744:	e008      	b.n	800f758 <_printf_common+0xa8>
 800f746:	2301      	movs	r3, #1
 800f748:	4652      	mov	r2, sl
 800f74a:	4649      	mov	r1, r9
 800f74c:	4638      	mov	r0, r7
 800f74e:	47c0      	blx	r8
 800f750:	3001      	adds	r0, #1
 800f752:	d103      	bne.n	800f75c <_printf_common+0xac>
 800f754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f75c:	3501      	adds	r5, #1
 800f75e:	e7c6      	b.n	800f6ee <_printf_common+0x3e>
 800f760:	18e1      	adds	r1, r4, r3
 800f762:	1c5a      	adds	r2, r3, #1
 800f764:	2030      	movs	r0, #48	; 0x30
 800f766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f76a:	4422      	add	r2, r4
 800f76c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f774:	3302      	adds	r3, #2
 800f776:	e7c7      	b.n	800f708 <_printf_common+0x58>
 800f778:	2301      	movs	r3, #1
 800f77a:	4622      	mov	r2, r4
 800f77c:	4649      	mov	r1, r9
 800f77e:	4638      	mov	r0, r7
 800f780:	47c0      	blx	r8
 800f782:	3001      	adds	r0, #1
 800f784:	d0e6      	beq.n	800f754 <_printf_common+0xa4>
 800f786:	3601      	adds	r6, #1
 800f788:	e7d9      	b.n	800f73e <_printf_common+0x8e>
	...

0800f78c <_printf_i>:
 800f78c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f790:	7e0f      	ldrb	r7, [r1, #24]
 800f792:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f794:	2f78      	cmp	r7, #120	; 0x78
 800f796:	4691      	mov	r9, r2
 800f798:	4680      	mov	r8, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	469a      	mov	sl, r3
 800f79e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7a2:	d807      	bhi.n	800f7b4 <_printf_i+0x28>
 800f7a4:	2f62      	cmp	r7, #98	; 0x62
 800f7a6:	d80a      	bhi.n	800f7be <_printf_i+0x32>
 800f7a8:	2f00      	cmp	r7, #0
 800f7aa:	f000 80d4 	beq.w	800f956 <_printf_i+0x1ca>
 800f7ae:	2f58      	cmp	r7, #88	; 0x58
 800f7b0:	f000 80c0 	beq.w	800f934 <_printf_i+0x1a8>
 800f7b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f7bc:	e03a      	b.n	800f834 <_printf_i+0xa8>
 800f7be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f7c2:	2b15      	cmp	r3, #21
 800f7c4:	d8f6      	bhi.n	800f7b4 <_printf_i+0x28>
 800f7c6:	a101      	add	r1, pc, #4	; (adr r1, 800f7cc <_printf_i+0x40>)
 800f7c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7cc:	0800f825 	.word	0x0800f825
 800f7d0:	0800f839 	.word	0x0800f839
 800f7d4:	0800f7b5 	.word	0x0800f7b5
 800f7d8:	0800f7b5 	.word	0x0800f7b5
 800f7dc:	0800f7b5 	.word	0x0800f7b5
 800f7e0:	0800f7b5 	.word	0x0800f7b5
 800f7e4:	0800f839 	.word	0x0800f839
 800f7e8:	0800f7b5 	.word	0x0800f7b5
 800f7ec:	0800f7b5 	.word	0x0800f7b5
 800f7f0:	0800f7b5 	.word	0x0800f7b5
 800f7f4:	0800f7b5 	.word	0x0800f7b5
 800f7f8:	0800f93d 	.word	0x0800f93d
 800f7fc:	0800f865 	.word	0x0800f865
 800f800:	0800f8f7 	.word	0x0800f8f7
 800f804:	0800f7b5 	.word	0x0800f7b5
 800f808:	0800f7b5 	.word	0x0800f7b5
 800f80c:	0800f95f 	.word	0x0800f95f
 800f810:	0800f7b5 	.word	0x0800f7b5
 800f814:	0800f865 	.word	0x0800f865
 800f818:	0800f7b5 	.word	0x0800f7b5
 800f81c:	0800f7b5 	.word	0x0800f7b5
 800f820:	0800f8ff 	.word	0x0800f8ff
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	1d1a      	adds	r2, r3, #4
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	602a      	str	r2, [r5, #0]
 800f82c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f834:	2301      	movs	r3, #1
 800f836:	e09f      	b.n	800f978 <_printf_i+0x1ec>
 800f838:	6820      	ldr	r0, [r4, #0]
 800f83a:	682b      	ldr	r3, [r5, #0]
 800f83c:	0607      	lsls	r7, r0, #24
 800f83e:	f103 0104 	add.w	r1, r3, #4
 800f842:	6029      	str	r1, [r5, #0]
 800f844:	d501      	bpl.n	800f84a <_printf_i+0xbe>
 800f846:	681e      	ldr	r6, [r3, #0]
 800f848:	e003      	b.n	800f852 <_printf_i+0xc6>
 800f84a:	0646      	lsls	r6, r0, #25
 800f84c:	d5fb      	bpl.n	800f846 <_printf_i+0xba>
 800f84e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f852:	2e00      	cmp	r6, #0
 800f854:	da03      	bge.n	800f85e <_printf_i+0xd2>
 800f856:	232d      	movs	r3, #45	; 0x2d
 800f858:	4276      	negs	r6, r6
 800f85a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f85e:	485a      	ldr	r0, [pc, #360]	; (800f9c8 <_printf_i+0x23c>)
 800f860:	230a      	movs	r3, #10
 800f862:	e012      	b.n	800f88a <_printf_i+0xfe>
 800f864:	682b      	ldr	r3, [r5, #0]
 800f866:	6820      	ldr	r0, [r4, #0]
 800f868:	1d19      	adds	r1, r3, #4
 800f86a:	6029      	str	r1, [r5, #0]
 800f86c:	0605      	lsls	r5, r0, #24
 800f86e:	d501      	bpl.n	800f874 <_printf_i+0xe8>
 800f870:	681e      	ldr	r6, [r3, #0]
 800f872:	e002      	b.n	800f87a <_printf_i+0xee>
 800f874:	0641      	lsls	r1, r0, #25
 800f876:	d5fb      	bpl.n	800f870 <_printf_i+0xe4>
 800f878:	881e      	ldrh	r6, [r3, #0]
 800f87a:	4853      	ldr	r0, [pc, #332]	; (800f9c8 <_printf_i+0x23c>)
 800f87c:	2f6f      	cmp	r7, #111	; 0x6f
 800f87e:	bf0c      	ite	eq
 800f880:	2308      	moveq	r3, #8
 800f882:	230a      	movne	r3, #10
 800f884:	2100      	movs	r1, #0
 800f886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f88a:	6865      	ldr	r5, [r4, #4]
 800f88c:	60a5      	str	r5, [r4, #8]
 800f88e:	2d00      	cmp	r5, #0
 800f890:	bfa2      	ittt	ge
 800f892:	6821      	ldrge	r1, [r4, #0]
 800f894:	f021 0104 	bicge.w	r1, r1, #4
 800f898:	6021      	strge	r1, [r4, #0]
 800f89a:	b90e      	cbnz	r6, 800f8a0 <_printf_i+0x114>
 800f89c:	2d00      	cmp	r5, #0
 800f89e:	d04b      	beq.n	800f938 <_printf_i+0x1ac>
 800f8a0:	4615      	mov	r5, r2
 800f8a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8a6:	fb03 6711 	mls	r7, r3, r1, r6
 800f8aa:	5dc7      	ldrb	r7, [r0, r7]
 800f8ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8b0:	4637      	mov	r7, r6
 800f8b2:	42bb      	cmp	r3, r7
 800f8b4:	460e      	mov	r6, r1
 800f8b6:	d9f4      	bls.n	800f8a2 <_printf_i+0x116>
 800f8b8:	2b08      	cmp	r3, #8
 800f8ba:	d10b      	bne.n	800f8d4 <_printf_i+0x148>
 800f8bc:	6823      	ldr	r3, [r4, #0]
 800f8be:	07de      	lsls	r6, r3, #31
 800f8c0:	d508      	bpl.n	800f8d4 <_printf_i+0x148>
 800f8c2:	6923      	ldr	r3, [r4, #16]
 800f8c4:	6861      	ldr	r1, [r4, #4]
 800f8c6:	4299      	cmp	r1, r3
 800f8c8:	bfde      	ittt	le
 800f8ca:	2330      	movle	r3, #48	; 0x30
 800f8cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f8d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f8d4:	1b52      	subs	r2, r2, r5
 800f8d6:	6122      	str	r2, [r4, #16]
 800f8d8:	f8cd a000 	str.w	sl, [sp]
 800f8dc:	464b      	mov	r3, r9
 800f8de:	aa03      	add	r2, sp, #12
 800f8e0:	4621      	mov	r1, r4
 800f8e2:	4640      	mov	r0, r8
 800f8e4:	f7ff fee4 	bl	800f6b0 <_printf_common>
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	d14a      	bne.n	800f982 <_printf_i+0x1f6>
 800f8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8f0:	b004      	add	sp, #16
 800f8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8f6:	6823      	ldr	r3, [r4, #0]
 800f8f8:	f043 0320 	orr.w	r3, r3, #32
 800f8fc:	6023      	str	r3, [r4, #0]
 800f8fe:	4833      	ldr	r0, [pc, #204]	; (800f9cc <_printf_i+0x240>)
 800f900:	2778      	movs	r7, #120	; 0x78
 800f902:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f906:	6823      	ldr	r3, [r4, #0]
 800f908:	6829      	ldr	r1, [r5, #0]
 800f90a:	061f      	lsls	r7, r3, #24
 800f90c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f910:	d402      	bmi.n	800f918 <_printf_i+0x18c>
 800f912:	065f      	lsls	r7, r3, #25
 800f914:	bf48      	it	mi
 800f916:	b2b6      	uxthmi	r6, r6
 800f918:	07df      	lsls	r7, r3, #31
 800f91a:	bf48      	it	mi
 800f91c:	f043 0320 	orrmi.w	r3, r3, #32
 800f920:	6029      	str	r1, [r5, #0]
 800f922:	bf48      	it	mi
 800f924:	6023      	strmi	r3, [r4, #0]
 800f926:	b91e      	cbnz	r6, 800f930 <_printf_i+0x1a4>
 800f928:	6823      	ldr	r3, [r4, #0]
 800f92a:	f023 0320 	bic.w	r3, r3, #32
 800f92e:	6023      	str	r3, [r4, #0]
 800f930:	2310      	movs	r3, #16
 800f932:	e7a7      	b.n	800f884 <_printf_i+0xf8>
 800f934:	4824      	ldr	r0, [pc, #144]	; (800f9c8 <_printf_i+0x23c>)
 800f936:	e7e4      	b.n	800f902 <_printf_i+0x176>
 800f938:	4615      	mov	r5, r2
 800f93a:	e7bd      	b.n	800f8b8 <_printf_i+0x12c>
 800f93c:	682b      	ldr	r3, [r5, #0]
 800f93e:	6826      	ldr	r6, [r4, #0]
 800f940:	6961      	ldr	r1, [r4, #20]
 800f942:	1d18      	adds	r0, r3, #4
 800f944:	6028      	str	r0, [r5, #0]
 800f946:	0635      	lsls	r5, r6, #24
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	d501      	bpl.n	800f950 <_printf_i+0x1c4>
 800f94c:	6019      	str	r1, [r3, #0]
 800f94e:	e002      	b.n	800f956 <_printf_i+0x1ca>
 800f950:	0670      	lsls	r0, r6, #25
 800f952:	d5fb      	bpl.n	800f94c <_printf_i+0x1c0>
 800f954:	8019      	strh	r1, [r3, #0]
 800f956:	2300      	movs	r3, #0
 800f958:	6123      	str	r3, [r4, #16]
 800f95a:	4615      	mov	r5, r2
 800f95c:	e7bc      	b.n	800f8d8 <_printf_i+0x14c>
 800f95e:	682b      	ldr	r3, [r5, #0]
 800f960:	1d1a      	adds	r2, r3, #4
 800f962:	602a      	str	r2, [r5, #0]
 800f964:	681d      	ldr	r5, [r3, #0]
 800f966:	6862      	ldr	r2, [r4, #4]
 800f968:	2100      	movs	r1, #0
 800f96a:	4628      	mov	r0, r5
 800f96c:	f7f0 fc30 	bl	80001d0 <memchr>
 800f970:	b108      	cbz	r0, 800f976 <_printf_i+0x1ea>
 800f972:	1b40      	subs	r0, r0, r5
 800f974:	6060      	str	r0, [r4, #4]
 800f976:	6863      	ldr	r3, [r4, #4]
 800f978:	6123      	str	r3, [r4, #16]
 800f97a:	2300      	movs	r3, #0
 800f97c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f980:	e7aa      	b.n	800f8d8 <_printf_i+0x14c>
 800f982:	6923      	ldr	r3, [r4, #16]
 800f984:	462a      	mov	r2, r5
 800f986:	4649      	mov	r1, r9
 800f988:	4640      	mov	r0, r8
 800f98a:	47d0      	blx	sl
 800f98c:	3001      	adds	r0, #1
 800f98e:	d0ad      	beq.n	800f8ec <_printf_i+0x160>
 800f990:	6823      	ldr	r3, [r4, #0]
 800f992:	079b      	lsls	r3, r3, #30
 800f994:	d413      	bmi.n	800f9be <_printf_i+0x232>
 800f996:	68e0      	ldr	r0, [r4, #12]
 800f998:	9b03      	ldr	r3, [sp, #12]
 800f99a:	4298      	cmp	r0, r3
 800f99c:	bfb8      	it	lt
 800f99e:	4618      	movlt	r0, r3
 800f9a0:	e7a6      	b.n	800f8f0 <_printf_i+0x164>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	4632      	mov	r2, r6
 800f9a6:	4649      	mov	r1, r9
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	47d0      	blx	sl
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	d09d      	beq.n	800f8ec <_printf_i+0x160>
 800f9b0:	3501      	adds	r5, #1
 800f9b2:	68e3      	ldr	r3, [r4, #12]
 800f9b4:	9903      	ldr	r1, [sp, #12]
 800f9b6:	1a5b      	subs	r3, r3, r1
 800f9b8:	42ab      	cmp	r3, r5
 800f9ba:	dcf2      	bgt.n	800f9a2 <_printf_i+0x216>
 800f9bc:	e7eb      	b.n	800f996 <_printf_i+0x20a>
 800f9be:	2500      	movs	r5, #0
 800f9c0:	f104 0619 	add.w	r6, r4, #25
 800f9c4:	e7f5      	b.n	800f9b2 <_printf_i+0x226>
 800f9c6:	bf00      	nop
 800f9c8:	08010899 	.word	0x08010899
 800f9cc:	080108aa 	.word	0x080108aa

0800f9d0 <__malloc_lock>:
 800f9d0:	4801      	ldr	r0, [pc, #4]	; (800f9d8 <__malloc_lock+0x8>)
 800f9d2:	f7ff bc65 	b.w	800f2a0 <__retarget_lock_acquire_recursive>
 800f9d6:	bf00      	nop
 800f9d8:	20005440 	.word	0x20005440

0800f9dc <__malloc_unlock>:
 800f9dc:	4801      	ldr	r0, [pc, #4]	; (800f9e4 <__malloc_unlock+0x8>)
 800f9de:	f7ff bc60 	b.w	800f2a2 <__retarget_lock_release_recursive>
 800f9e2:	bf00      	nop
 800f9e4:	20005440 	.word	0x20005440

0800f9e8 <_realloc_r>:
 800f9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ec:	4680      	mov	r8, r0
 800f9ee:	4614      	mov	r4, r2
 800f9f0:	460e      	mov	r6, r1
 800f9f2:	b921      	cbnz	r1, 800f9fe <_realloc_r+0x16>
 800f9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f8:	4611      	mov	r1, r2
 800f9fa:	f7ff bdd9 	b.w	800f5b0 <_malloc_r>
 800f9fe:	b92a      	cbnz	r2, 800fa0c <_realloc_r+0x24>
 800fa00:	f000 f84c 	bl	800fa9c <_free_r>
 800fa04:	4625      	mov	r5, r4
 800fa06:	4628      	mov	r0, r5
 800fa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa0c:	f000 f892 	bl	800fb34 <_malloc_usable_size_r>
 800fa10:	4284      	cmp	r4, r0
 800fa12:	4607      	mov	r7, r0
 800fa14:	d802      	bhi.n	800fa1c <_realloc_r+0x34>
 800fa16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fa1a:	d812      	bhi.n	800fa42 <_realloc_r+0x5a>
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	4640      	mov	r0, r8
 800fa20:	f7ff fdc6 	bl	800f5b0 <_malloc_r>
 800fa24:	4605      	mov	r5, r0
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d0ed      	beq.n	800fa06 <_realloc_r+0x1e>
 800fa2a:	42bc      	cmp	r4, r7
 800fa2c:	4622      	mov	r2, r4
 800fa2e:	4631      	mov	r1, r6
 800fa30:	bf28      	it	cs
 800fa32:	463a      	movcs	r2, r7
 800fa34:	f7ff fc36 	bl	800f2a4 <memcpy>
 800fa38:	4631      	mov	r1, r6
 800fa3a:	4640      	mov	r0, r8
 800fa3c:	f000 f82e 	bl	800fa9c <_free_r>
 800fa40:	e7e1      	b.n	800fa06 <_realloc_r+0x1e>
 800fa42:	4635      	mov	r5, r6
 800fa44:	e7df      	b.n	800fa06 <_realloc_r+0x1e>

0800fa46 <memmove>:
 800fa46:	4288      	cmp	r0, r1
 800fa48:	b510      	push	{r4, lr}
 800fa4a:	eb01 0402 	add.w	r4, r1, r2
 800fa4e:	d902      	bls.n	800fa56 <memmove+0x10>
 800fa50:	4284      	cmp	r4, r0
 800fa52:	4623      	mov	r3, r4
 800fa54:	d807      	bhi.n	800fa66 <memmove+0x20>
 800fa56:	1e43      	subs	r3, r0, #1
 800fa58:	42a1      	cmp	r1, r4
 800fa5a:	d008      	beq.n	800fa6e <memmove+0x28>
 800fa5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa60:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa64:	e7f8      	b.n	800fa58 <memmove+0x12>
 800fa66:	4402      	add	r2, r0
 800fa68:	4601      	mov	r1, r0
 800fa6a:	428a      	cmp	r2, r1
 800fa6c:	d100      	bne.n	800fa70 <memmove+0x2a>
 800fa6e:	bd10      	pop	{r4, pc}
 800fa70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa78:	e7f7      	b.n	800fa6a <memmove+0x24>
	...

0800fa7c <_sbrk_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d06      	ldr	r5, [pc, #24]	; (800fa98 <_sbrk_r+0x1c>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4604      	mov	r4, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	602b      	str	r3, [r5, #0]
 800fa88:	f7f6 ff0a 	bl	80068a0 <_sbrk>
 800fa8c:	1c43      	adds	r3, r0, #1
 800fa8e:	d102      	bne.n	800fa96 <_sbrk_r+0x1a>
 800fa90:	682b      	ldr	r3, [r5, #0]
 800fa92:	b103      	cbz	r3, 800fa96 <_sbrk_r+0x1a>
 800fa94:	6023      	str	r3, [r4, #0]
 800fa96:	bd38      	pop	{r3, r4, r5, pc}
 800fa98:	2000544c 	.word	0x2000544c

0800fa9c <_free_r>:
 800fa9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa9e:	2900      	cmp	r1, #0
 800faa0:	d044      	beq.n	800fb2c <_free_r+0x90>
 800faa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faa6:	9001      	str	r0, [sp, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f1a1 0404 	sub.w	r4, r1, #4
 800faae:	bfb8      	it	lt
 800fab0:	18e4      	addlt	r4, r4, r3
 800fab2:	f7ff ff8d 	bl	800f9d0 <__malloc_lock>
 800fab6:	4a1e      	ldr	r2, [pc, #120]	; (800fb30 <_free_r+0x94>)
 800fab8:	9801      	ldr	r0, [sp, #4]
 800faba:	6813      	ldr	r3, [r2, #0]
 800fabc:	b933      	cbnz	r3, 800facc <_free_r+0x30>
 800fabe:	6063      	str	r3, [r4, #4]
 800fac0:	6014      	str	r4, [r2, #0]
 800fac2:	b003      	add	sp, #12
 800fac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fac8:	f7ff bf88 	b.w	800f9dc <__malloc_unlock>
 800facc:	42a3      	cmp	r3, r4
 800face:	d908      	bls.n	800fae2 <_free_r+0x46>
 800fad0:	6825      	ldr	r5, [r4, #0]
 800fad2:	1961      	adds	r1, r4, r5
 800fad4:	428b      	cmp	r3, r1
 800fad6:	bf01      	itttt	eq
 800fad8:	6819      	ldreq	r1, [r3, #0]
 800fada:	685b      	ldreq	r3, [r3, #4]
 800fadc:	1949      	addeq	r1, r1, r5
 800fade:	6021      	streq	r1, [r4, #0]
 800fae0:	e7ed      	b.n	800fabe <_free_r+0x22>
 800fae2:	461a      	mov	r2, r3
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	b10b      	cbz	r3, 800faec <_free_r+0x50>
 800fae8:	42a3      	cmp	r3, r4
 800faea:	d9fa      	bls.n	800fae2 <_free_r+0x46>
 800faec:	6811      	ldr	r1, [r2, #0]
 800faee:	1855      	adds	r5, r2, r1
 800faf0:	42a5      	cmp	r5, r4
 800faf2:	d10b      	bne.n	800fb0c <_free_r+0x70>
 800faf4:	6824      	ldr	r4, [r4, #0]
 800faf6:	4421      	add	r1, r4
 800faf8:	1854      	adds	r4, r2, r1
 800fafa:	42a3      	cmp	r3, r4
 800fafc:	6011      	str	r1, [r2, #0]
 800fafe:	d1e0      	bne.n	800fac2 <_free_r+0x26>
 800fb00:	681c      	ldr	r4, [r3, #0]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	6053      	str	r3, [r2, #4]
 800fb06:	440c      	add	r4, r1
 800fb08:	6014      	str	r4, [r2, #0]
 800fb0a:	e7da      	b.n	800fac2 <_free_r+0x26>
 800fb0c:	d902      	bls.n	800fb14 <_free_r+0x78>
 800fb0e:	230c      	movs	r3, #12
 800fb10:	6003      	str	r3, [r0, #0]
 800fb12:	e7d6      	b.n	800fac2 <_free_r+0x26>
 800fb14:	6825      	ldr	r5, [r4, #0]
 800fb16:	1961      	adds	r1, r4, r5
 800fb18:	428b      	cmp	r3, r1
 800fb1a:	bf04      	itt	eq
 800fb1c:	6819      	ldreq	r1, [r3, #0]
 800fb1e:	685b      	ldreq	r3, [r3, #4]
 800fb20:	6063      	str	r3, [r4, #4]
 800fb22:	bf04      	itt	eq
 800fb24:	1949      	addeq	r1, r1, r5
 800fb26:	6021      	streq	r1, [r4, #0]
 800fb28:	6054      	str	r4, [r2, #4]
 800fb2a:	e7ca      	b.n	800fac2 <_free_r+0x26>
 800fb2c:	b003      	add	sp, #12
 800fb2e:	bd30      	pop	{r4, r5, pc}
 800fb30:	20005444 	.word	0x20005444

0800fb34 <_malloc_usable_size_r>:
 800fb34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb38:	1f18      	subs	r0, r3, #4
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	bfbc      	itt	lt
 800fb3e:	580b      	ldrlt	r3, [r1, r0]
 800fb40:	18c0      	addlt	r0, r0, r3
 800fb42:	4770      	bx	lr

0800fb44 <_init>:
 800fb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb46:	bf00      	nop
 800fb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb4a:	bc08      	pop	{r3}
 800fb4c:	469e      	mov	lr, r3
 800fb4e:	4770      	bx	lr

0800fb50 <_fini>:
 800fb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb52:	bf00      	nop
 800fb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb56:	bc08      	pop	{r3}
 800fb58:	469e      	mov	lr, r3
 800fb5a:	4770      	bx	lr
