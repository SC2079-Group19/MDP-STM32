
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca0  0800d0bc  0800d0bc  0001d0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd5c  0800dd5c  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd5c  0800dd5c  0001dd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd64  0800dd64  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd64  0800dd64  0001dd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd68  0800dd68  0001dd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800dd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a0  2**0
                  CONTENTS
 10 .bss          000051b8  200001a0  200001a0  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005358  20005358  000201a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c9bf  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c78  00000000  00000000  0003cbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001990  00000000  00000000  00040850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000140c  00000000  00000000  000421e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005207  00000000  00000000  000435ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d45e  00000000  00000000  000487f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc840  00000000  00000000  00065c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000073b4  00000000  00000000  00142494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00149848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0a4 	.word	0x0800d0a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800d0a4 	.word	0x0800d0a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f003 fd15 	bl	800492c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f945 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fbe9 	bl	80016dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fbbd 	bl	8001688 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 f99d 	bl	800124c <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fb0f 	bl	8001534 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fa65 	bl	80013e4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 f9c5 	bl	80012a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1e:	f000 fab5 	bl	800148c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f22:	f00b fb7b 	bl	800c61c <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f26:	2300      	movs	r3, #0
 8000f28:	2203      	movs	r2, #3
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4866      	ldr	r0, [pc, #408]	; (80010c8 <main+0x1d0>)
 8000f2e:	f00b f89e 	bl	800c06e <ICM20948_init>

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f32:	210c      	movs	r1, #12
 8000f34:	4865      	ldr	r0, [pc, #404]	; (80010cc <main+0x1d4>)
 8000f36:	f005 fe15 	bl	8006b64 <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4864      	ldr	r0, [pc, #400]	; (80010d0 <main+0x1d8>)
 8000f3e:	f005 fe11 	bl	8006b64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f42:	2104      	movs	r1, #4
 8000f44:	4862      	ldr	r0, [pc, #392]	; (80010d0 <main+0x1d8>)
 8000f46:	f005 fe0d 	bl	8006b64 <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f4a:	213c      	movs	r1, #60	; 0x3c
 8000f4c:	4861      	ldr	r0, [pc, #388]	; (80010d4 <main+0x1dc>)
 8000f4e:	f006 f8ef 	bl	8007130 <HAL_TIM_Encoder_Start>

  // uart
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000f52:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <main+0x1e0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4960      	ldr	r1, [pc, #384]	; (80010dc <main+0x1e4>)
 8000f5c:	4860      	ldr	r0, [pc, #384]	; (80010e0 <main+0x1e8>)
 8000f5e:	f007 fb00 	bl	8008562 <HAL_UART_Receive_IT>

  // ultrasonic
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f62:	2104      	movs	r1, #4
 8000f64:	485f      	ldr	r0, [pc, #380]	; (80010e4 <main+0x1ec>)
 8000f66:	f005 ff15 	bl	8006d94 <HAL_TIM_IC_Start_IT>
  // HAL_TIM_Base_Start(&htim1);

  __RESET_SERVO_TURN(&htim1);
 8000f6a:	4b58      	ldr	r3, [pc, #352]	; (80010cc <main+0x1d4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	228e      	movs	r2, #142	; 0x8e
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40
 8000f72:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f76:	f003 fd1b 	bl	80049b0 <HAL_Delay>

  // command queue initialization
  curCmd.index = 100;
 8000f7a:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <main+0x1f0>)
 8000f7c:	2264      	movs	r2, #100	; 0x64
 8000f7e:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f80:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <main+0x1f0>)
 8000f82:	220a      	movs	r2, #10
 8000f84:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8000f86:	4b59      	ldr	r3, [pc, #356]	; (80010ec <main+0x1f4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8000f8c:	4b57      	ldr	r3, [pc, #348]	; (80010ec <main+0x1f4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8000f92:	4b57      	ldr	r3, [pc, #348]	; (80010f0 <main+0x1f8>)
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	4b55      	ldr	r3, [pc, #340]	; (80010ec <main+0x1f4>)
 8000f98:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e00c      	b.n	8000fba <main+0xc2>
  {
    Command cmd;
    cmd.index = 100;
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000fa8:	4a50      	ldr	r2, [pc, #320]	; (80010ec <main+0x1f4>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <main+0x1f8>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	dbec      	blt.n	8000fa0 <main+0xa8>
  }
  PIDConfigInit(&pidTSlow, 2.1, 0.045, 0.8);
 8000fc6:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80010f4 <main+0x1fc>
 8000fca:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80010f8 <main+0x200>
 8000fce:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80010fc <main+0x204>
 8000fd2:	484b      	ldr	r0, [pc, #300]	; (8001100 <main+0x208>)
 8000fd4:	f001 f8ce 	bl	8002174 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.1, 0.045, 0.8);
 8000fd8:	ed9f 1a46 	vldr	s2, [pc, #280]	; 80010f4 <main+0x1fc>
 8000fdc:	eddf 0a46 	vldr	s1, [pc, #280]	; 80010f8 <main+0x200>
 8000fe0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80010fc <main+0x204>
 8000fe4:	4847      	ldr	r0, [pc, #284]	; (8001104 <main+0x20c>)
 8000fe6:	f001 f8c5 	bl	8002174 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.1, 0.05, 0.3);
 8000fea:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8001108 <main+0x210>
 8000fee:	eddf 0a47 	vldr	s1, [pc, #284]	; 800110c <main+0x214>
 8000ff2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8001110 <main+0x218>
 8000ff6:	4847      	ldr	r0, [pc, #284]	; (8001114 <main+0x21c>)
 8000ff8:	f001 f8bc 	bl	8002174 <PIDConfigInit>
  // TODO:overwrite curCmd for debugging individual task
  // curCmd.index = 1;
  // curCmd.val = 30;

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <main+0x1e0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	4935      	ldr	r1, [pc, #212]	; (80010dc <main+0x1e4>)
 8001006:	4836      	ldr	r0, [pc, #216]	; (80010e0 <main+0x1e8>)
 8001008:	f007 faab 	bl	8008562 <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 800100c:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <main+0x1d4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	228e      	movs	r2, #142	; 0x8e
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
 8001014:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001018:	f003 fcca 	bl	80049b0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800101c:	f008 fa7e 	bl	800951c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 8001020:	4a3d      	ldr	r2, [pc, #244]	; (8001118 <main+0x220>)
 8001022:	2100      	movs	r1, #0
 8001024:	483d      	ldr	r0, [pc, #244]	; (800111c <main+0x224>)
 8001026:	f008 fac3 	bl	80095b0 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a3c      	ldr	r2, [pc, #240]	; (8001120 <main+0x228>)
 800102e:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 8001030:	4a3c      	ldr	r2, [pc, #240]	; (8001124 <main+0x22c>)
 8001032:	2100      	movs	r1, #0
 8001034:	483c      	ldr	r0, [pc, #240]	; (8001128 <main+0x230>)
 8001036:	f008 fabb 	bl	80095b0 <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a3b      	ldr	r2, [pc, #236]	; (800112c <main+0x234>)
 800103e:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 8001040:	4a3b      	ldr	r2, [pc, #236]	; (8001130 <main+0x238>)
 8001042:	2100      	movs	r1, #0
 8001044:	483b      	ldr	r0, [pc, #236]	; (8001134 <main+0x23c>)
 8001046:	f008 fab3 	bl	80095b0 <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a3a      	ldr	r2, [pc, #232]	; (8001138 <main+0x240>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 8001050:	4a3a      	ldr	r2, [pc, #232]	; (800113c <main+0x244>)
 8001052:	2100      	movs	r1, #0
 8001054:	483a      	ldr	r0, [pc, #232]	; (8001140 <main+0x248>)
 8001056:	f008 faab 	bl	80095b0 <osThreadNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a39      	ldr	r2, [pc, #228]	; (8001144 <main+0x24c>)
 800105e:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001060:	4a39      	ldr	r2, [pc, #228]	; (8001148 <main+0x250>)
 8001062:	2100      	movs	r1, #0
 8001064:	4839      	ldr	r0, [pc, #228]	; (800114c <main+0x254>)
 8001066:	f008 faa3 	bl	80095b0 <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a38      	ldr	r2, [pc, #224]	; (8001150 <main+0x258>)
 800106e:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 8001070:	4a38      	ldr	r2, [pc, #224]	; (8001154 <main+0x25c>)
 8001072:	2100      	movs	r1, #0
 8001074:	4838      	ldr	r0, [pc, #224]	; (8001158 <main+0x260>)
 8001076:	f008 fa9b 	bl	80095b0 <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a37      	ldr	r2, [pc, #220]	; (800115c <main+0x264>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 8001080:	4a37      	ldr	r2, [pc, #220]	; (8001160 <main+0x268>)
 8001082:	2100      	movs	r1, #0
 8001084:	4837      	ldr	r0, [pc, #220]	; (8001164 <main+0x26c>)
 8001086:	f008 fa93 	bl	80095b0 <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a36      	ldr	r2, [pc, #216]	; (8001168 <main+0x270>)
 800108e:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 8001090:	4a36      	ldr	r2, [pc, #216]	; (800116c <main+0x274>)
 8001092:	2100      	movs	r1, #0
 8001094:	4836      	ldr	r0, [pc, #216]	; (8001170 <main+0x278>)
 8001096:	f008 fa8b 	bl	80095b0 <osThreadNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a35      	ldr	r2, [pc, #212]	; (8001174 <main+0x27c>)
 800109e:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 80010a0:	4a35      	ldr	r2, [pc, #212]	; (8001178 <main+0x280>)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4835      	ldr	r0, [pc, #212]	; (800117c <main+0x284>)
 80010a6:	f008 fa83 	bl	80095b0 <osThreadNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a34      	ldr	r2, [pc, #208]	; (8001180 <main+0x288>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80010b0:	4a34      	ldr	r2, [pc, #208]	; (8001184 <main+0x28c>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4834      	ldr	r0, [pc, #208]	; (8001188 <main+0x290>)
 80010b6:	f008 fa7b 	bl	80095b0 <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a33      	ldr	r2, [pc, #204]	; (800118c <main+0x294>)
 80010be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010c0:	f008 fa50 	bl	8009564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <main+0x1cc>
 80010c6:	bf00      	nop
 80010c8:	200001bc 	.word	0x200001bc
 80010cc:	20000210 	.word	0x20000210
 80010d0:	200002e8 	.word	0x200002e8
 80010d4:	20000258 	.word	0x20000258
 80010d8:	20000000 	.word	0x20000000
 80010dc:	2000039c 	.word	0x2000039c
 80010e0:	20000330 	.word	0x20000330
 80010e4:	200002a0 	.word	0x200002a0
 80010e8:	200003dc 	.word	0x200003dc
 80010ec:	200003a8 	.word	0x200003a8
 80010f0:	20000001 	.word	0x20000001
 80010f4:	3f4ccccd 	.word	0x3f4ccccd
 80010f8:	3d3851ec 	.word	0x3d3851ec
 80010fc:	40066666 	.word	0x40066666
 8001100:	2000042c 	.word	0x2000042c
 8001104:	20000418 	.word	0x20000418
 8001108:	3e99999a 	.word	0x3e99999a
 800110c:	3d4ccccd 	.word	0x3d4ccccd
 8001110:	3f8ccccd 	.word	0x3f8ccccd
 8001114:	20000440 	.word	0x20000440
 8001118:	0800d144 	.word	0x0800d144
 800111c:	08002ccd 	.word	0x08002ccd
 8001120:	20000374 	.word	0x20000374
 8001124:	0800d168 	.word	0x0800d168
 8001128:	08002d9d 	.word	0x08002d9d
 800112c:	20000378 	.word	0x20000378
 8001130:	0800d18c 	.word	0x0800d18c
 8001134:	08002de9 	.word	0x08002de9
 8001138:	2000037c 	.word	0x2000037c
 800113c:	0800d1b0 	.word	0x0800d1b0
 8001140:	08002ffd 	.word	0x08002ffd
 8001144:	20000380 	.word	0x20000380
 8001148:	0800d1d4 	.word	0x0800d1d4
 800114c:	08003211 	.word	0x08003211
 8001150:	20000384 	.word	0x20000384
 8001154:	0800d1f8 	.word	0x0800d1f8
 8001158:	080035a9 	.word	0x080035a9
 800115c:	20000388 	.word	0x20000388
 8001160:	0800d21c 	.word	0x0800d21c
 8001164:	080035b9 	.word	0x080035b9
 8001168:	2000038c 	.word	0x2000038c
 800116c:	0800d240 	.word	0x0800d240
 8001170:	0800394d 	.word	0x0800394d
 8001174:	20000390 	.word	0x20000390
 8001178:	0800d264 	.word	0x0800d264
 800117c:	08003ce1 	.word	0x08003ce1
 8001180:	20000394 	.word	0x20000394
 8001184:	0800d288 	.word	0x0800d288
 8001188:	08003db5 	.word	0x08003db5
 800118c:	20000398 	.word	0x20000398

08001190 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	; 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2230      	movs	r2, #48	; 0x30
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f00b fafc 	bl	800c79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <SystemClock_Config+0xb4>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <SystemClock_Config+0xb4>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <SystemClock_Config+0xb4>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <SystemClock_Config+0xb8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <SystemClock_Config+0xb8>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <SystemClock_Config+0xb8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2310      	movs	r3, #16
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4618      	mov	r0, r3
 8001202:	f004 ff0b 	bl	800601c <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800120c:	f003 f866 	bl	80042dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001210:	230f      	movs	r3, #15
 8001212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f005 f96e 	bl	800650c <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001236:	f003 f851 	bl	80042dc <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_I2C1_Init+0x50>)
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <MX_I2C1_Init+0x54>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_I2C1_Init+0x50>)
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x58>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_I2C1_Init+0x50>)
 800126a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_I2C1_Init+0x50>)
 800128a:	f003 fedf 	bl	800504c <HAL_I2C_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001294:	f003 f822 	bl	80042dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200001bc 	.word	0x200001bc
 80012a0:	40005400 	.word	0x40005400
 80012a4:	000186a0 	.word	0x000186a0

080012a8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b096      	sub	sp, #88	; 0x58
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2220      	movs	r2, #32
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f00b fa5b 	bl	800c79c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <MX_TIM1_Init+0x134>)
 80012e8:	4a3d      	ldr	r2, [pc, #244]	; (80013e0 <MX_TIM1_Init+0x138>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80012ec:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <MX_TIM1_Init+0x134>)
 80012ee:	22a0      	movs	r2, #160	; 0xa0
 80012f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <MX_TIM1_Init+0x134>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80012f8:	4b38      	ldr	r3, [pc, #224]	; (80013dc <MX_TIM1_Init+0x134>)
 80012fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <MX_TIM1_Init+0x134>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MX_TIM1_Init+0x134>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800130c:	4b33      	ldr	r3, [pc, #204]	; (80013dc <MX_TIM1_Init+0x134>)
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001312:	4832      	ldr	r0, [pc, #200]	; (80013dc <MX_TIM1_Init+0x134>)
 8001314:	f005 fb0c 	bl	8006930 <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800131e:	f002 ffdd 	bl	80042dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800132c:	4619      	mov	r1, r3
 800132e:	482b      	ldr	r0, [pc, #172]	; (80013dc <MX_TIM1_Init+0x134>)
 8001330:	f006 f9f2 	bl	8007718 <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800133a:	f002 ffcf 	bl	80042dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133e:	4827      	ldr	r0, [pc, #156]	; (80013dc <MX_TIM1_Init+0x134>)
 8001340:	f005 fbb6 	bl	8006ab0 <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800134a:	f002 ffc7 	bl	80042dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800135a:	4619      	mov	r1, r3
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <MX_TIM1_Init+0x134>)
 800135e:	f006 ff3f 	bl	80081e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001368:	f002 ffb8 	bl	80042dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	220c      	movs	r2, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4813      	ldr	r0, [pc, #76]	; (80013dc <MX_TIM1_Init+0x134>)
 800138e:	f006 f901 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001398:	f002 ffa0 	bl	80042dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_TIM1_Init+0x134>)
 80013c0:	f006 ff8a 	bl	80082d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80013ca:	f002 ff87 	bl	80042dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM1_Init+0x134>)
 80013d0:	f003 f91a 	bl	8004608 <HAL_TIM_MspPostInit>
}
 80013d4:	bf00      	nop
 80013d6:	3758      	adds	r7, #88	; 0x58
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000210 	.word	0x20000210
 80013e0:	40010000 	.word	0x40010000

080013e4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00b f9d2 	bl	800c79c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_TIM2_Init+0xa4>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800141a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_TIM2_Init+0xa4>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001428:	2303      	movs	r3, #3
 800142a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001430:	2301      	movs	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001438:	230a      	movs	r3, #10
 800143a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001440:	2301      	movs	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001448:	230a      	movs	r3, #10
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4619      	mov	r1, r3
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001454:	f005 fdc6 	bl	8006fe4 <HAL_TIM_Encoder_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800145e:	f002 ff3d 	bl	80042dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_TIM2_Init+0xa4>)
 8001470:	f006 feb6 	bl	80081e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800147a:	f002 ff2f 	bl	80042dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 800147e:	bf00      	nop
 8001480:	3730      	adds	r7, #48	; 0x30
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000258 	.word	0x20000258

0800148c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_TIM3_Init+0xa0>)
 80014aa:	4a21      	ldr	r2, [pc, #132]	; (8001530 <MX_TIM3_Init+0xa4>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_TIM3_Init+0xa0>)
 80014b0:	220f      	movs	r2, #15
 80014b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <MX_TIM3_Init+0xa0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_TIM3_Init+0xa0>)
 80014bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_TIM3_Init+0xa0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_TIM3_Init+0xa0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <MX_TIM3_Init+0xa0>)
 80014d0:	f005 fc10 	bl	8006cf4 <HAL_TIM_IC_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014da:	f002 feff 	bl	80042dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4619      	mov	r1, r3
 80014ec:	480f      	ldr	r0, [pc, #60]	; (800152c <MX_TIM3_Init+0xa0>)
 80014ee:	f006 fe77 	bl	80081e0 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014f8:	f002 fef0 	bl	80042dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800150c:	463b      	mov	r3, r7
 800150e:	2204      	movs	r2, #4
 8001510:	4619      	mov	r1, r3
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <MX_TIM3_Init+0xa0>)
 8001514:	f005 ffa2 	bl	800745c <HAL_TIM_IC_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800151e:	f002 fedd 	bl	80042dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002a0 	.word	0x200002a0
 8001530:	40000400 	.word	0x40000400

08001534 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b096      	sub	sp, #88	; 0x58
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2220      	movs	r2, #32
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f00b f915 	bl	800c79c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001572:	4b43      	ldr	r3, [pc, #268]	; (8001680 <MX_TIM8_Init+0x14c>)
 8001574:	4a43      	ldr	r2, [pc, #268]	; (8001684 <MX_TIM8_Init+0x150>)
 8001576:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001578:	4b41      	ldr	r3, [pc, #260]	; (8001680 <MX_TIM8_Init+0x14c>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b40      	ldr	r3, [pc, #256]	; (8001680 <MX_TIM8_Init+0x14c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001584:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <MX_TIM8_Init+0x14c>)
 8001586:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800158a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <MX_TIM8_Init+0x14c>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <MX_TIM8_Init+0x14c>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <MX_TIM8_Init+0x14c>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800159e:	4838      	ldr	r0, [pc, #224]	; (8001680 <MX_TIM8_Init+0x14c>)
 80015a0:	f005 f9c6 	bl	8006930 <HAL_TIM_Base_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80015aa:	f002 fe97 	bl	80042dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015b8:	4619      	mov	r1, r3
 80015ba:	4831      	ldr	r0, [pc, #196]	; (8001680 <MX_TIM8_Init+0x14c>)
 80015bc:	f006 f8ac 	bl	8007718 <HAL_TIM_ConfigClockSource>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015c6:	f002 fe89 	bl	80042dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015ca:	482d      	ldr	r0, [pc, #180]	; (8001680 <MX_TIM8_Init+0x14c>)
 80015cc:	f005 fa70 	bl	8006ab0 <HAL_TIM_PWM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80015d6:	f002 fe81 	bl	80042dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e6:	4619      	mov	r1, r3
 80015e8:	4825      	ldr	r0, [pc, #148]	; (8001680 <MX_TIM8_Init+0x14c>)
 80015ea:	f006 fdf9 	bl	80081e0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80015f4:	f002 fe72 	bl	80042dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f8:	2360      	movs	r3, #96	; 0x60
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	4818      	ldr	r0, [pc, #96]	; (8001680 <MX_TIM8_Init+0x14c>)
 800161e:	f005 ffb9 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001628:	f002 fe58 	bl	80042dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	2204      	movs	r2, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4812      	ldr	r0, [pc, #72]	; (8001680 <MX_TIM8_Init+0x14c>)
 8001636:	f005 ffad 	bl	8007594 <HAL_TIM_PWM_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001640:	f002 fe4c 	bl	80042dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	; (8001680 <MX_TIM8_Init+0x14c>)
 8001668:	f006 fe36 	bl	80082d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001672:	f002 fe33 	bl	80042dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8001676:	bf00      	nop
 8001678:	3758      	adds	r7, #88	; 0x58
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200002e8 	.word	0x200002e8
 8001684:	40010400 	.word	0x40010400

08001688 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_USART3_UART_Init+0x4c>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <MX_USART3_UART_Init+0x50>)
 8001690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <MX_USART3_UART_Init+0x4c>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_USART3_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_USART3_UART_Init+0x4c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_USART3_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_USART3_UART_Init+0x4c>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <MX_USART3_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_USART3_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_USART3_UART_Init+0x4c>)
 80016c0:	f006 fe70 	bl	80083a4 <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ca:	f002 fe07 	bl	80042dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000330 	.word	0x20000330
 80016d8:	40004800 	.word	0x40004800

080016dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <MX_GPIO_Init+0x114>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <MX_GPIO_Init+0x114>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <MX_GPIO_Init+0x114>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <MX_GPIO_Init+0x114>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a36      	ldr	r2, [pc, #216]	; (80017f0 <MX_GPIO_Init+0x114>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <MX_GPIO_Init+0x114>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <MX_GPIO_Init+0x114>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <MX_GPIO_Init+0x114>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <MX_GPIO_Init+0x114>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_GPIO_Init+0x114>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <MX_GPIO_Init+0x114>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_GPIO_Init+0x114>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 8001768:	4822      	ldr	r0, [pc, #136]	; (80017f4 <MX_GPIO_Init+0x118>)
 800176a:	f003 fc55 	bl	8005018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	213c      	movs	r1, #60	; 0x3c
 8001772:	4821      	ldr	r0, [pc, #132]	; (80017f8 <MX_GPIO_Init+0x11c>)
 8001774:	f003 fc50 	bl	8005018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin US_Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin;
 8001778:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_GPIO_Init+0x118>)
 8001792:	f003 faa5 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 8001796:	230c      	movs	r3, #12
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a2:	2302      	movs	r3, #2
 80017a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4812      	ldr	r0, [pc, #72]	; (80017f8 <MX_GPIO_Init+0x11c>)
 80017ae:	f003 fa97 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 80017b2:	2330      	movs	r3, #48	; 0x30
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <MX_GPIO_Init+0x11c>)
 80017ca:	f003 fa89 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_Echo_Pin */
  GPIO_InitStruct.Pin = US_Echo_Pin;
 80017ce:	2320      	movs	r3, #32
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(US_Echo_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4806      	ldr	r0, [pc, #24]	; (80017fc <MX_GPIO_Init+0x120>)
 80017e2:	f003 fa7d 	bl	8004ce0 <HAL_GPIO_Init>
}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400

08001800 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t US_diff = 0;
uint8_t Is_First_Captured = 0; // is the first value captured ?

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // if the interrupt source is channel2
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7f1b      	ldrb	r3, [r3, #28]
 800180c:	2b02      	cmp	r3, #2
 800180e:	f040 8082 	bne.w	8001916 <HAL_TIM_IC_CaptureCallback+0x116>
  {
    if (Is_First_Captured == 0) // if the first value is not captured
 8001812:	4b45      	ldr	r3, [pc, #276]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d11a      	bne.n	8001850 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 800181a:	2104      	movs	r1, #4
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f006 f843 	bl	80078a8 <HAL_TIM_ReadCapturedValue>
 8001822:	4603      	mov	r3, r0
 8001824:	4a41      	ldr	r2, [pc, #260]	; (800192c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001826:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;                                    // set the first captured as true
 8001828:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x128>)
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
      // Now change the polarity to falling edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800183c:	621a      	str	r2, [r3, #32]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	621a      	str	r2, [r3, #32]
      // set polarity to rising edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
    }
  }
}
 800184e:	e062      	b.n	8001916 <HAL_TIM_IC_CaptureCallback+0x116>
    else if (Is_First_Captured == 1) // if the first is already captured
 8001850:	4b35      	ldr	r3, [pc, #212]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d15e      	bne.n	8001916 <HAL_TIM_IC_CaptureCallback+0x116>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001858:	2104      	movs	r1, #4
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f006 f824 	bl	80078a8 <HAL_TIM_ReadCapturedValue>
 8001860:	4603      	mov	r3, r0
 8001862:	4a33      	ldr	r2, [pc, #204]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001864:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);                           // reset the counter
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
      if (IC_Val2 > IC_Val1)
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d907      	bls.n	800188a <HAL_TIM_IC_CaptureCallback+0x8a>
        US_diff = IC_Val2 - IC_Val1;
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x130>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e00f      	b.n	80018aa <HAL_TIM_IC_CaptureCallback+0xaa>
      else if (IC_Val1 > IC_Val2)
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d909      	bls.n	80018aa <HAL_TIM_IC_CaptureCallback+0xaa>
        US_diff = (0xffff - IC_Val1) + IC_Val2;
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018a4:	33ff      	adds	r3, #255	; 0xff
 80018a6:	4a23      	ldr	r2, [pc, #140]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x134>)
 80018a8:	6013      	str	r3, [r2, #0]
      obsDist_US = US_diff * .034 / 2;
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x134>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe20 	bl	80004f4 <__aeabi_ui2d>
 80018b4:	a31a      	add	r3, pc, #104	; (adr r3, 8001920 <HAL_TIM_IC_CaptureCallback+0x120>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fe95 	bl	80005e8 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ce:	f7fe ffb5 	bl	800083c <__aeabi_ddiv>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f93f 	bl	8000b5c <__aeabi_d2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x138>)
 80018e2:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 0; // set it back to false
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x128>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018f8:	621a      	str	r2, [r3, #32]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6a12      	ldr	r2, [r2, #32]
 8001904:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0204 	bic.w	r2, r2, #4
 8001914:	60da      	str	r2, [r3, #12]
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	b020c49c 	.word	0xb020c49c
 8001924:	3fa16872 	.word	0x3fa16872
 8001928:	20000464 	.word	0x20000464
 800192c:	20000458 	.word	0x20000458
 8001930:	2000045c 	.word	0x2000045c
 8001934:	20000460 	.word	0x20000460
 8001938:	20000454 	.word	0x20000454
 800193c:	200002a0 	.word	0x200002a0

08001940 <HAL_UART_RxCpltCallback>:
int targetD = 5;
uint8_t tempDir = 1;
int8_t step = 0;
uint8_t turnMode = 2;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  // prevent unused argument(s) compilation warning
  UNUSED(huart);
  int val;

  val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001948:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 800194a:	789b      	ldrb	r3, [r3, #2]
 800194c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	461a      	mov	r2, r3
 800195a:	4b90      	ldr	r3, [pc, #576]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 800195c:	78db      	ldrb	r3, [r3, #3]
 800195e:	3b30      	subs	r3, #48	; 0x30
 8001960:	4413      	add	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
  if (aRxBuffer[4] >= '0' && aRxBuffer[4] <= '9')
 8001964:	4b8d      	ldr	r3, [pc, #564]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001966:	791b      	ldrb	r3, [r3, #4]
 8001968:	2b2f      	cmp	r3, #47	; 0x2f
 800196a:	d90e      	bls.n	800198a <HAL_UART_RxCpltCallback+0x4a>
 800196c:	4b8b      	ldr	r3, [pc, #556]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 800196e:	791b      	ldrb	r3, [r3, #4]
 8001970:	2b39      	cmp	r3, #57	; 0x39
 8001972:	d80a      	bhi.n	800198a <HAL_UART_RxCpltCallback+0x4a>
    // val += (aRxBuffer[4] - 48) * 100;
    val = val * 10 + (aRxBuffer[4] - 48);
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	461a      	mov	r2, r3
 8001980:	4b86      	ldr	r3, [pc, #536]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001982:	791b      	ldrb	r3, [r3, #4]
 8001984:	3b30      	subs	r3, #48	; 0x30
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

  manualMode = 0;
 800198a:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <HAL_UART_RxCpltCallback+0x260>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]

  if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T')
 8001990:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b53      	cmp	r3, #83	; 0x53
 8001996:	d159      	bne.n	8001a4c <HAL_UART_RxCpltCallback+0x10c>
 8001998:	4b80      	ldr	r3, [pc, #512]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	2b54      	cmp	r3, #84	; 0x54
 800199e:	d155      	bne.n	8001a4c <HAL_UART_RxCpltCallback+0x10c>
  { // only STOP can preempt any greedy task
    //		__ADD_COMMAND(cQueue, 0, 0); // stop
    __ON_TASK_END(&htim8, prevTask, curTask);
 80019a0:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <HAL_UART_RxCpltCallback+0x264>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
 80019a8:	4b7e      	ldr	r3, [pc, #504]	; (8001ba4 <HAL_UART_RxCpltCallback+0x264>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	639a      	str	r2, [r3, #56]	; 0x38
 80019b0:	4b7d      	ldr	r3, [pc, #500]	; (8001ba8 <HAL_UART_RxCpltCallback+0x268>)
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <HAL_UART_RxCpltCallback+0x26c>)
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	4b7b      	ldr	r3, [pc, #492]	; (8001ba8 <HAL_UART_RxCpltCallback+0x268>)
 80019ba:	2209      	movs	r2, #9
 80019bc:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 80019be:	4b7c      	ldr	r3, [pc, #496]	; (8001bb0 <HAL_UART_RxCpltCallback+0x270>)
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 80019c6:	4b7b      	ldr	r3, [pc, #492]	; (8001bb4 <HAL_UART_RxCpltCallback+0x274>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 80019cc:	487a      	ldr	r0, [pc, #488]	; (8001bb8 <HAL_UART_RxCpltCallback+0x278>)
 80019ce:	f000 fbf2 	bl	80021b6 <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 80019d2:	487a      	ldr	r0, [pc, #488]	; (8001bbc <HAL_UART_RxCpltCallback+0x27c>)
 80019d4:	f000 fbef 	bl	80021b6 <PIDConfigReset>
    PIDConfigReset(&pidFast);
 80019d8:	4879      	ldr	r0, [pc, #484]	; (8001bc0 <HAL_UART_RxCpltCallback+0x280>)
 80019da:	f000 fbec 	bl	80021b6 <PIDConfigReset>
    curDistTick = 0;
 80019de:	4b79      	ldr	r3, [pc, #484]	; (8001bc4 <HAL_UART_RxCpltCallback+0x284>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80019e4:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	4b77      	ldr	r3, [pc, #476]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d112      	bne.n	8001a16 <HAL_UART_RxCpltCallback+0xd6>
    {
      __CLEAR_CURCMD(curCmd);
 80019f0:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_UART_RxCpltCallback+0x28c>)
 80019f2:	2264      	movs	r2, #100	; 0x64
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	4b75      	ldr	r3, [pc, #468]	; (8001bcc <HAL_UART_RxCpltCallback+0x28c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 80019fc:	4a74      	ldr	r2, [pc, #464]	; (8001bd0 <HAL_UART_RxCpltCallback+0x290>)
 80019fe:	210f      	movs	r1, #15
 8001a00:	4874      	ldr	r0, [pc, #464]	; (8001bd4 <HAL_UART_RxCpltCallback+0x294>)
 8001a02:	f00a fe97 	bl	800c734 <sniprintf>
 8001a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	4972      	ldr	r1, [pc, #456]	; (8001bd8 <HAL_UART_RxCpltCallback+0x298>)
 8001a0e:	4873      	ldr	r0, [pc, #460]	; (8001bdc <HAL_UART_RxCpltCallback+0x29c>)
 8001a10:	f006 fd15 	bl	800843e <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001a14:	e371      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001a16:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	4a6c      	ldr	r2, [pc, #432]	; (8001bcc <HAL_UART_RxCpltCallback+0x28c>)
 8001a1c:	496a      	ldr	r1, [pc, #424]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a66      	ldr	r2, [pc, #408]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001a2e:	7892      	ldrb	r2, [r2, #2]
 8001a30:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a34:	fb01 f202 	mul.w	r2, r1, r2
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b62      	ldr	r3, [pc, #392]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001a3e:	705a      	strb	r2, [r3, #1]
 8001a40:	4a67      	ldr	r2, [pc, #412]	; (8001be0 <HAL_UART_RxCpltCallback+0x2a0>)
 8001a42:	210f      	movs	r1, #15
 8001a44:	4863      	ldr	r0, [pc, #396]	; (8001bd4 <HAL_UART_RxCpltCallback+0x294>)
 8001a46:	f00a fe75 	bl	800c734 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001a4a:	e356      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
    }
  }
  else if (aRxBuffer[0] == 'R' && aRxBuffer[1] == 'S')
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b52      	cmp	r3, #82	; 0x52
 8001a52:	d161      	bne.n	8001b18 <HAL_UART_RxCpltCallback+0x1d8>
 8001a54:	4b51      	ldr	r3, [pc, #324]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	2b53      	cmp	r3, #83	; 0x53
 8001a5a:	d15d      	bne.n	8001b18 <HAL_UART_RxCpltCallback+0x1d8>
  {
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001a5c:	4b51      	ldr	r3, [pc, #324]	; (8001ba4 <HAL_UART_RxCpltCallback+0x264>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_UART_RxCpltCallback+0x264>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ba8 <HAL_UART_RxCpltCallback+0x268>)
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_UART_RxCpltCallback+0x26c>)
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	4b4c      	ldr	r3, [pc, #304]	; (8001ba8 <HAL_UART_RxCpltCallback+0x268>)
 8001a76:	2209      	movs	r2, #9
 8001a78:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001a7a:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <HAL_UART_RxCpltCallback+0x270>)
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001a82:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <HAL_UART_RxCpltCallback+0x274>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	801a      	strh	r2, [r3, #0]
    __RESET_SERVO_TURN(&htim1);
 8001a88:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <HAL_UART_RxCpltCallback+0x2a4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	228e      	movs	r2, #142	; 0x8e
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001a90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a94:	f002 ff8c 	bl	80049b0 <HAL_Delay>
    PIDConfigReset(&pidTSlow);
 8001a98:	4847      	ldr	r0, [pc, #284]	; (8001bb8 <HAL_UART_RxCpltCallback+0x278>)
 8001a9a:	f000 fb8c 	bl	80021b6 <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001a9e:	4847      	ldr	r0, [pc, #284]	; (8001bbc <HAL_UART_RxCpltCallback+0x27c>)
 8001aa0:	f000 fb89 	bl	80021b6 <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001aa4:	4846      	ldr	r0, [pc, #280]	; (8001bc0 <HAL_UART_RxCpltCallback+0x280>)
 8001aa6:	f000 fb86 	bl	80021b6 <PIDConfigReset>
    curDistTick = 0;
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_UART_RxCpltCallback+0x284>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001ab0:	4b45      	ldr	r3, [pc, #276]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001ab6:	785b      	ldrb	r3, [r3, #1]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d112      	bne.n	8001ae2 <HAL_UART_RxCpltCallback+0x1a2>
    {
      __CLEAR_CURCMD(curCmd);
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_UART_RxCpltCallback+0x28c>)
 8001abe:	2264      	movs	r2, #100	; 0x64
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <HAL_UART_RxCpltCallback+0x28c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001ac8:	4a41      	ldr	r2, [pc, #260]	; (8001bd0 <HAL_UART_RxCpltCallback+0x290>)
 8001aca:	210f      	movs	r1, #15
 8001acc:	4841      	ldr	r0, [pc, #260]	; (8001bd4 <HAL_UART_RxCpltCallback+0x294>)
 8001ace:	f00a fe31 	bl	800c734 <sniprintf>
 8001ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad6:	2206      	movs	r2, #6
 8001ad8:	493f      	ldr	r1, [pc, #252]	; (8001bd8 <HAL_UART_RxCpltCallback+0x298>)
 8001ada:	4840      	ldr	r0, [pc, #256]	; (8001bdc <HAL_UART_RxCpltCallback+0x29c>)
 8001adc:	f006 fcaf 	bl	800843e <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001ae0:	e30b      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001ae2:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001ae4:	785b      	ldrb	r3, [r3, #1]
 8001ae6:	4a39      	ldr	r2, [pc, #228]	; (8001bcc <HAL_UART_RxCpltCallback+0x28c>)
 8001ae8:	4937      	ldr	r1, [pc, #220]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	3301      	adds	r3, #1
 8001af8:	4a33      	ldr	r2, [pc, #204]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001afa:	7892      	ldrb	r2, [r2, #2]
 8001afc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b00:	fb01 f202 	mul.w	r2, r1, r2
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001b0a:	705a      	strb	r2, [r3, #1]
 8001b0c:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <HAL_UART_RxCpltCallback+0x2a0>)
 8001b0e:	210f      	movs	r1, #15
 8001b10:	4830      	ldr	r0, [pc, #192]	; (8001bd4 <HAL_UART_RxCpltCallback+0x294>)
 8001b12:	f00a fe0f 	bl	800c734 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001b16:	e2f0      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
    }
  }
  else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001b18:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b46      	cmp	r3, #70	; 0x46
 8001b1e:	d165      	bne.n	8001bec <HAL_UART_RxCpltCallback+0x2ac>
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001b22:	785b      	ldrb	r3, [r3, #1]
 8001b24:	2b57      	cmp	r3, #87	; 0x57
 8001b26:	d003      	beq.n	8001b30 <HAL_UART_RxCpltCallback+0x1f0>
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	2b53      	cmp	r3, #83	; 0x53
 8001b2e:	d15d      	bne.n	8001bec <HAL_UART_RxCpltCallback+0x2ac>
  { // FW or FS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001b32:	789b      	ldrb	r3, [r3, #2]
 8001b34:	2b2d      	cmp	r3, #45	; 0x2d
 8001b36:	d105      	bne.n	8001b44 <HAL_UART_RxCpltCallback+0x204>
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001b3a:	78db      	ldrb	r3, [r3, #3]
 8001b3c:	2b2d      	cmp	r3, #45	; 0x2d
 8001b3e:	d101      	bne.n	8001b44 <HAL_UART_RxCpltCallback+0x204>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_UART_RxCpltCallback+0x206>
 8001b44:	2300      	movs	r3, #0
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_UART_RxCpltCallback+0x260>)
 8001b4a:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_UART_RxCpltCallback+0x25c>)
 8001b4e:	785b      	ldrb	r3, [r3, #1]
 8001b50:	2b53      	cmp	r3, #83	; 0x53
 8001b52:	bf14      	ite	ne
 8001b54:	2301      	movne	r3, #1
 8001b56:	2300      	moveq	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_UART_RxCpltCallback+0x2a8>)
 8001b5e:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 1, val);
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	711a      	strb	r2, [r3, #4]
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	b291      	uxth	r1, r2
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	80da      	strh	r2, [r3, #6]
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001b88:	7892      	ldrb	r2, [r2, #2]
 8001b8a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b8e:	fb01 f202 	mul.w	r2, r1, r2
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_UART_RxCpltCallback+0x288>)
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e2ae      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
 8001b9c:	2000039c 	.word	0x2000039c
 8001ba0:	200003f0 	.word	0x200003f0
 8001ba4:	200002e8 	.word	0x200002e8
 8001ba8:	20000134 	.word	0x20000134
 8001bac:	20000135 	.word	0x20000135
 8001bb0:	200003f8 	.word	0x200003f8
 8001bb4:	200003fe 	.word	0x200003fe
 8001bb8:	2000042c 	.word	0x2000042c
 8001bbc:	20000418 	.word	0x20000418
 8001bc0:	20000440 	.word	0x20000440
 8001bc4:	20000410 	.word	0x20000410
 8001bc8:	200003a8 	.word	0x200003a8
 8001bcc:	200003dc 	.word	0x200003dc
 8001bd0:	0800d114 	.word	0x0800d114
 8001bd4:	200003e0 	.word	0x200003e0
 8001bd8:	0800d11c 	.word	0x0800d11c
 8001bdc:	20000330 	.word	0x20000330
 8001be0:	0800d124 	.word	0x0800d124
 8001be4:	20000210 	.word	0x20000210
 8001be8:	20000136 	.word	0x20000136
  }
  else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001bec:	4b96      	ldr	r3, [pc, #600]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b42      	cmp	r3, #66	; 0x42
 8001bf2:	d13d      	bne.n	8001c70 <HAL_UART_RxCpltCallback+0x330>
 8001bf4:	4b94      	ldr	r3, [pc, #592]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	2b57      	cmp	r3, #87	; 0x57
 8001bfa:	d003      	beq.n	8001c04 <HAL_UART_RxCpltCallback+0x2c4>
 8001bfc:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001bfe:	785b      	ldrb	r3, [r3, #1]
 8001c00:	2b53      	cmp	r3, #83	; 0x53
 8001c02:	d135      	bne.n	8001c70 <HAL_UART_RxCpltCallback+0x330>
  { // BW or BS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001c04:	4b90      	ldr	r3, [pc, #576]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001c06:	789b      	ldrb	r3, [r3, #2]
 8001c08:	2b2d      	cmp	r3, #45	; 0x2d
 8001c0a:	d105      	bne.n	8001c18 <HAL_UART_RxCpltCallback+0x2d8>
 8001c0c:	4b8e      	ldr	r3, [pc, #568]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001c0e:	78db      	ldrb	r3, [r3, #3]
 8001c10:	2b2d      	cmp	r3, #45	; 0x2d
 8001c12:	d101      	bne.n	8001c18 <HAL_UART_RxCpltCallback+0x2d8>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <HAL_UART_RxCpltCallback+0x2da>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b8b      	ldr	r3, [pc, #556]	; (8001e4c <HAL_UART_RxCpltCallback+0x50c>)
 8001c1e:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001c20:	4b89      	ldr	r3, [pc, #548]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	2b53      	cmp	r3, #83	; 0x53
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b87      	ldr	r3, [pc, #540]	; (8001e50 <HAL_UART_RxCpltCallback+0x510>)
 8001c32:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 2, val);
 8001c34:	4b87      	ldr	r3, [pc, #540]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4a86      	ldr	r2, [pc, #536]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2202      	movs	r2, #2
 8001c40:	711a      	strb	r2, [r3, #4]
 8001c42:	4b84      	ldr	r3, [pc, #528]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	b291      	uxth	r1, r2
 8001c4a:	4a82      	ldr	r2, [pc, #520]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	460a      	mov	r2, r1
 8001c52:	80da      	strh	r2, [r3, #6]
 8001c54:	4b7f      	ldr	r3, [pc, #508]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001c5c:	7892      	ldrb	r2, [r2, #2]
 8001c5e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c62:	fb01 f202 	mul.w	r2, r1, r2
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b7a      	ldr	r3, [pc, #488]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	e244      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  }

  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L')
 8001c70:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b46      	cmp	r3, #70	; 0x46
 8001c76:	d136      	bne.n	8001ce6 <HAL_UART_RxCpltCallback+0x3a6>
 8001c78:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	2b4c      	cmp	r3, #76	; 0x4c
 8001c7e:	d132      	bne.n	8001ce6 <HAL_UART_RxCpltCallback+0x3a6>
  { // FL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001c80:	4b71      	ldr	r3, [pc, #452]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001c82:	789b      	ldrb	r3, [r3, #2]
 8001c84:	2b2d      	cmp	r3, #45	; 0x2d
 8001c86:	d105      	bne.n	8001c94 <HAL_UART_RxCpltCallback+0x354>
 8001c88:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001c8a:	78db      	ldrb	r3, [r3, #3]
 8001c8c:	2b2d      	cmp	r3, #45	; 0x2d
 8001c8e:	d101      	bne.n	8001c94 <HAL_UART_RxCpltCallback+0x354>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x356>
 8001c94:	2300      	movs	r3, #0
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b6c      	ldr	r3, [pc, #432]	; (8001e4c <HAL_UART_RxCpltCallback+0x50c>)
 8001c9a:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001c9c:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <HAL_UART_RxCpltCallback+0x50c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_UART_RxCpltCallback+0x368>
 8001ca4:	2103      	movs	r1, #3
 8001ca6:	e000      	b.n	8001caa <HAL_UART_RxCpltCallback+0x36a>
 8001ca8:	2107      	movs	r1, #7
 8001caa:	4b6a      	ldr	r3, [pc, #424]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	711a      	strb	r2, [r3, #4]
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	b291      	uxth	r1, r2
 8001cc0:	4a64      	ldr	r2, [pc, #400]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	80da      	strh	r2, [r3, #6]
 8001cca:	4b62      	ldr	r3, [pc, #392]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a60      	ldr	r2, [pc, #384]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001cd2:	7892      	ldrb	r2, [r2, #2]
 8001cd4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cd8:	fb01 f202 	mul.w	r2, r1, r2
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b5c      	ldr	r3, [pc, #368]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e209      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  }
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R')
 8001ce6:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b46      	cmp	r3, #70	; 0x46
 8001cec:	d136      	bne.n	8001d5c <HAL_UART_RxCpltCallback+0x41c>
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	2b52      	cmp	r3, #82	; 0x52
 8001cf4:	d132      	bne.n	8001d5c <HAL_UART_RxCpltCallback+0x41c>
  { // FR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001cf8:	789b      	ldrb	r3, [r3, #2]
 8001cfa:	2b2d      	cmp	r3, #45	; 0x2d
 8001cfc:	d105      	bne.n	8001d0a <HAL_UART_RxCpltCallback+0x3ca>
 8001cfe:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001d00:	78db      	ldrb	r3, [r3, #3]
 8001d02:	2b2d      	cmp	r3, #45	; 0x2d
 8001d04:	d101      	bne.n	8001d0a <HAL_UART_RxCpltCallback+0x3ca>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_UART_RxCpltCallback+0x3cc>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_UART_RxCpltCallback+0x50c>)
 8001d10:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001d12:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <HAL_UART_RxCpltCallback+0x50c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_UART_RxCpltCallback+0x3de>
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	e000      	b.n	8001d20 <HAL_UART_RxCpltCallback+0x3e0>
 8001d1e:	2108      	movs	r1, #8
 8001d20:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	460a      	mov	r2, r1
 8001d2c:	711a      	strb	r2, [r3, #4]
 8001d2e:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	b291      	uxth	r1, r2
 8001d36:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	460a      	mov	r2, r1
 8001d3e:	80da      	strh	r2, [r3, #6]
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a43      	ldr	r2, [pc, #268]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001d48:	7892      	ldrb	r2, [r2, #2]
 8001d4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d4e:	fb01 f202 	mul.w	r2, r1, r2
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e1ce      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L')
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b42      	cmp	r3, #66	; 0x42
 8001d62:	d136      	bne.n	8001dd2 <HAL_UART_RxCpltCallback+0x492>
 8001d64:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	2b4c      	cmp	r3, #76	; 0x4c
 8001d6a:	d132      	bne.n	8001dd2 <HAL_UART_RxCpltCallback+0x492>
  { // BL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001d6e:	789b      	ldrb	r3, [r3, #2]
 8001d70:	2b2d      	cmp	r3, #45	; 0x2d
 8001d72:	d105      	bne.n	8001d80 <HAL_UART_RxCpltCallback+0x440>
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001d76:	78db      	ldrb	r3, [r3, #3]
 8001d78:	2b2d      	cmp	r3, #45	; 0x2d
 8001d7a:	d101      	bne.n	8001d80 <HAL_UART_RxCpltCallback+0x440>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_UART_RxCpltCallback+0x442>
 8001d80:	2300      	movs	r3, #0
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_UART_RxCpltCallback+0x50c>)
 8001d86:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8001d88:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_UART_RxCpltCallback+0x50c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_UART_RxCpltCallback+0x454>
 8001d90:	2105      	movs	r1, #5
 8001d92:	e000      	b.n	8001d96 <HAL_UART_RxCpltCallback+0x456>
 8001d94:	2109      	movs	r1, #9
 8001d96:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4a2e      	ldr	r2, [pc, #184]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	460a      	mov	r2, r1
 8001da2:	711a      	strb	r2, [r3, #4]
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	b291      	uxth	r1, r2
 8001dac:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	460a      	mov	r2, r1
 8001db4:	80da      	strh	r2, [r3, #6]
 8001db6:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001dbe:	7892      	ldrb	r2, [r2, #2]
 8001dc0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dc4:	fb01 f202 	mul.w	r2, r1, r2
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e193      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R')
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b42      	cmp	r3, #66	; 0x42
 8001dd8:	d13e      	bne.n	8001e58 <HAL_UART_RxCpltCallback+0x518>
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	2b52      	cmp	r3, #82	; 0x52
 8001de0:	d13a      	bne.n	8001e58 <HAL_UART_RxCpltCallback+0x518>
  { // BR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001de4:	789b      	ldrb	r3, [r3, #2]
 8001de6:	2b2d      	cmp	r3, #45	; 0x2d
 8001de8:	d105      	bne.n	8001df6 <HAL_UART_RxCpltCallback+0x4b6>
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_UART_RxCpltCallback+0x508>)
 8001dec:	78db      	ldrb	r3, [r3, #3]
 8001dee:	2b2d      	cmp	r3, #45	; 0x2d
 8001df0:	d101      	bne.n	8001df6 <HAL_UART_RxCpltCallback+0x4b6>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_UART_RxCpltCallback+0x4b8>
 8001df6:	2300      	movs	r3, #0
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_UART_RxCpltCallback+0x50c>)
 8001dfc:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_UART_RxCpltCallback+0x50c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_UART_RxCpltCallback+0x4ca>
 8001e06:	2106      	movs	r1, #6
 8001e08:	e000      	b.n	8001e0c <HAL_UART_RxCpltCallback+0x4cc>
 8001e0a:	210a      	movs	r1, #10
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	460a      	mov	r2, r1
 8001e18:	711a      	strb	r2, [r3, #4]
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	b291      	uxth	r1, r2
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	460a      	mov	r2, r1
 8001e2a:	80da      	strh	r2, [r3, #6]
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001e34:	7892      	ldrb	r2, [r2, #2]
 8001e36:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e3a:	fb01 f202 	mul.w	r2, r1, r2
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <HAL_UART_RxCpltCallback+0x514>)
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	e158      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
 8001e48:	2000039c 	.word	0x2000039c
 8001e4c:	200003f0 	.word	0x200003f0
 8001e50:	20000136 	.word	0x20000136
 8001e54:	200003a8 	.word	0x200003a8
  }
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L')
 8001e58:	4b95      	ldr	r3, [pc, #596]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b54      	cmp	r3, #84	; 0x54
 8001e5e:	d121      	bne.n	8001ea4 <HAL_UART_RxCpltCallback+0x564>
 8001e60:	4b93      	ldr	r3, [pc, #588]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b4c      	cmp	r3, #76	; 0x4c
 8001e66:	d11d      	bne.n	8001ea4 <HAL_UART_RxCpltCallback+0x564>
    __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 8001e68:	4b92      	ldr	r3, [pc, #584]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4a91      	ldr	r2, [pc, #580]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	220b      	movs	r2, #11
 8001e74:	711a      	strb	r2, [r3, #4]
 8001e76:	4b8f      	ldr	r3, [pc, #572]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	b291      	uxth	r1, r2
 8001e7e:	4a8d      	ldr	r2, [pc, #564]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	460a      	mov	r2, r1
 8001e86:	80da      	strh	r2, [r3, #6]
 8001e88:	4b8a      	ldr	r3, [pc, #552]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	4a89      	ldr	r2, [pc, #548]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001e90:	7892      	ldrb	r2, [r2, #2]
 8001e92:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e96:	fb01 f202 	mul.w	r2, r1, r2
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b85      	ldr	r3, [pc, #532]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e12a      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R')
 8001ea4:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b54      	cmp	r3, #84	; 0x54
 8001eaa:	d121      	bne.n	8001ef0 <HAL_UART_RxCpltCallback+0x5b0>
 8001eac:	4b80      	ldr	r3, [pc, #512]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001eae:	785b      	ldrb	r3, [r3, #1]
 8001eb0:	2b52      	cmp	r3, #82	; 0x52
 8001eb2:	d11d      	bne.n	8001ef0 <HAL_UART_RxCpltCallback+0x5b0>
    __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 8001eb4:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4a7e      	ldr	r2, [pc, #504]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	711a      	strb	r2, [r3, #4]
 8001ec2:	4b7c      	ldr	r3, [pc, #496]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	b291      	uxth	r1, r2
 8001eca:	4a7a      	ldr	r2, [pc, #488]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	80da      	strh	r2, [r3, #6]
 8001ed4:	4b77      	ldr	r3, [pc, #476]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a76      	ldr	r2, [pc, #472]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001edc:	7892      	ldrb	r2, [r2, #2]
 8001ede:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ee2:	fb01 f202 	mul.w	r2, r1, r2
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b72      	ldr	r3, [pc, #456]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e104      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R')
 8001ef0:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b49      	cmp	r3, #73	; 0x49
 8001ef6:	d121      	bne.n	8001f3c <HAL_UART_RxCpltCallback+0x5fc>
 8001ef8:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	2b52      	cmp	r3, #82	; 0x52
 8001efe:	d11d      	bne.n	8001f3c <HAL_UART_RxCpltCallback+0x5fc>
    __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 8001f00:	4b6c      	ldr	r3, [pc, #432]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4a6b      	ldr	r2, [pc, #428]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	220d      	movs	r2, #13
 8001f0c:	711a      	strb	r2, [r3, #4]
 8001f0e:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	b291      	uxth	r1, r2
 8001f16:	4a67      	ldr	r2, [pc, #412]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	80da      	strh	r2, [r3, #6]
 8001f20:	4b64      	ldr	r3, [pc, #400]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	4a63      	ldr	r2, [pc, #396]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f28:	7892      	ldrb	r2, [r2, #2]
 8001f2a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f2e:	fb01 f202 	mul.w	r2, r1, r2
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b5f      	ldr	r3, [pc, #380]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e0de      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T')
 8001f3c:	4b5c      	ldr	r3, [pc, #368]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b44      	cmp	r3, #68	; 0x44
 8001f42:	d121      	bne.n	8001f88 <HAL_UART_RxCpltCallback+0x648>
 8001f44:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001f46:	785b      	ldrb	r3, [r3, #1]
 8001f48:	2b54      	cmp	r3, #84	; 0x54
 8001f4a:	d11d      	bne.n	8001f88 <HAL_UART_RxCpltCallback+0x648>
    __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	220e      	movs	r2, #14
 8001f58:	711a      	strb	r2, [r3, #4]
 8001f5a:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	b291      	uxth	r1, r2
 8001f62:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	460a      	mov	r2, r1
 8001f6a:	80da      	strh	r2, [r3, #6]
 8001f6c:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	4a50      	ldr	r2, [pc, #320]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f74:	7892      	ldrb	r2, [r2, #2]
 8001f76:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f7a:	fb01 f202 	mul.w	r2, r1, r2
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e0b8      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z')
 8001f88:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b5a      	cmp	r3, #90	; 0x5a
 8001f8e:	d121      	bne.n	8001fd4 <HAL_UART_RxCpltCallback+0x694>
 8001f90:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	2b5a      	cmp	r3, #90	; 0x5a
 8001f96:	d11d      	bne.n	8001fd4 <HAL_UART_RxCpltCallback+0x694>
    __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
 8001f98:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4a45      	ldr	r2, [pc, #276]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	711a      	strb	r2, [r3, #4]
 8001fa6:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	b291      	uxth	r1, r2
 8001fae:	4a41      	ldr	r2, [pc, #260]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	80da      	strh	r2, [r3, #6]
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4a3d      	ldr	r2, [pc, #244]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001fc0:	7892      	ldrb	r2, [r2, #2]
 8001fc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fc6:	fb01 f202 	mul.w	r2, r1, r2
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e092      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X')
 8001fd4:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b57      	cmp	r3, #87	; 0x57
 8001fda:	d121      	bne.n	8002020 <HAL_UART_RxCpltCallback+0x6e0>
 8001fdc:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	2b58      	cmp	r3, #88	; 0x58
 8001fe2:	d11d      	bne.n	8002020 <HAL_UART_RxCpltCallback+0x6e0>
    __ADD_COMMAND(cQueue, 16, val); // WN fastest path
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4a32      	ldr	r2, [pc, #200]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	2210      	movs	r2, #16
 8001ff0:	711a      	strb	r2, [r3, #4]
 8001ff2:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	b291      	uxth	r1, r2
 8001ffa:	4a2e      	ldr	r2, [pc, #184]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	460a      	mov	r2, r1
 8002002:	80da      	strh	r2, [r3, #6]
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 800200c:	7892      	ldrb	r2, [r2, #2]
 800200e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002012:	fb01 f202 	mul.w	r2, r1, r2
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e06c      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N')
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b57      	cmp	r3, #87	; 0x57
 8002026:	d121      	bne.n	800206c <HAL_UART_RxCpltCallback+0x72c>
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b4e      	cmp	r3, #78	; 0x4e
 800202e:	d11d      	bne.n	800206c <HAL_UART_RxCpltCallback+0x72c>
    __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	2211      	movs	r2, #17
 800203c:	711a      	strb	r2, [r3, #4]
 800203e:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	b291      	uxth	r1, r2
 8002046:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	460a      	mov	r2, r1
 800204e:	80da      	strh	r2, [r3, #6]
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002058:	7892      	ldrb	r2, [r2, #2]
 800205a:	fb93 f1f2 	sdiv	r1, r3, r2
 800205e:	fb01 f202 	mul.w	r2, r1, r2
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e046      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'A')
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_UART_RxCpltCallback+0x770>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b41      	cmp	r3, #65	; 0x41
 8002072:	d121      	bne.n	80020b8 <HAL_UART_RxCpltCallback+0x778>
    __ADD_COMMAND(cQueue, 88, val); // anti-clockwise rotation with variable
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	2258      	movs	r2, #88	; 0x58
 8002080:	711a      	strb	r2, [r3, #4]
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	b291      	uxth	r1, r2
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	460a      	mov	r2, r1
 8002092:	80da      	strh	r2, [r3, #6]
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 800209c:	7892      	ldrb	r2, [r2, #2]
 800209e:	fb93 f1f2 	sdiv	r1, r3, r2
 80020a2:	fb01 f202 	mul.w	r2, r1, r2
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <HAL_UART_RxCpltCallback+0x774>)
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e024      	b.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
 80020b0:	2000039c 	.word	0x2000039c
 80020b4:	200003a8 	.word	0x200003a8
  else if (aRxBuffer[0] == 'C')
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_UART_RxCpltCallback+0x818>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b43      	cmp	r3, #67	; 0x43
 80020be:	d11c      	bne.n	80020fa <HAL_UART_RxCpltCallback+0x7ba>
    __ADD_COMMAND(cQueue, 89, val); // clockwise rotation with variable
 80020c0:	4b26      	ldr	r3, [pc, #152]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4a25      	ldr	r2, [pc, #148]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	2259      	movs	r2, #89	; 0x59
 80020cc:	711a      	strb	r2, [r3, #4]
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	b291      	uxth	r1, r2
 80020d6:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	460a      	mov	r2, r1
 80020de:	80da      	strh	r2, [r3, #6]
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 80020e8:	7892      	ldrb	r2, [r2, #2]
 80020ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80020ee:	fb01 f202 	mul.w	r2, r1, r2
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 80020f8:	701a      	strb	r2, [r3, #0]

  if (!__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 8002100:	785b      	ldrb	r3, [r3, #1]
 8002102:	429a      	cmp	r2, r3
 8002104:	d019      	beq.n	800213a <HAL_UART_RxCpltCallback+0x7fa>
  {
    __READ_COMMAND(cQueue, curCmd, rxMsg);
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 8002108:	785b      	ldrb	r3, [r3, #1]
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_UART_RxCpltCallback+0x820>)
 800210c:	4913      	ldr	r1, [pc, #76]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	3301      	adds	r3, #1
 800211c:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 800211e:	7892      	ldrb	r2, [r2, #2]
 8002120:	fb93 f1f2 	sdiv	r1, r3, r2
 8002124:	fb01 f202 	mul.w	r2, r1, r2
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_UART_RxCpltCallback+0x81c>)
 800212e:	705a      	strb	r2, [r3, #1]
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_UART_RxCpltCallback+0x824>)
 8002132:	210f      	movs	r1, #15
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <HAL_UART_RxCpltCallback+0x828>)
 8002136:	f00a fafd 	bl	800c734 <sniprintf>
  }

  // clear aRx buffer
  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_UART_RxCpltCallback+0x82c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_UART_RxCpltCallback+0x830>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	4903      	ldr	r1, [pc, #12]	; (8002158 <HAL_UART_RxCpltCallback+0x818>)
 800214a:	4808      	ldr	r0, [pc, #32]	; (800216c <HAL_UART_RxCpltCallback+0x82c>)
 800214c:	f006 fa09 	bl	8008562 <HAL_UART_Receive_IT>
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000039c 	.word	0x2000039c
 800215c:	200003a8 	.word	0x200003a8
 8002160:	200003dc 	.word	0x200003dc
 8002164:	0800d124 	.word	0x0800d124
 8002168:	200003e0 	.word	0x200003e0
 800216c:	20000330 	.word	0x20000330
 8002170:	20000000 	.word	0x20000000

08002174 <PIDConfigInit>:

// pid
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002180:	edc7 0a01 	vstr	s1, [r7, #4]
 8002184:	ed87 1a00 	vstr	s2, [r7]
  cfg->Kp = Kp;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	601a      	str	r2, [r3, #0]
  cfg->Ki = Ki;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	605a      	str	r2, [r3, #4]
  cfg->Kd = Kd;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	609a      	str	r2, [r3, #8]
  cfg->ek1 = 0;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <PIDConfigReset>:

void PIDConfigReset(PIDConfig *cfg)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HCSR04_Read>:

void HCSR04_Read(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 80021e0:	2201      	movs	r2, #1
 80021e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e6:	480e      	ldr	r0, [pc, #56]	; (8002220 <HCSR04_Read+0x44>)
 80021e8:	f002 ff16 	bl	8005018 <HAL_GPIO_WritePin>
  __delay_us(&htim3, 10);                                            // wait for 10 us
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HCSR04_Read+0x48>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HCSR04_Read+0x48>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2b09      	cmp	r3, #9
 80021fc:	d9fa      	bls.n	80021f4 <HCSR04_Read+0x18>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002204:	4806      	ldr	r0, [pc, #24]	; (8002220 <HCSR04_Read+0x44>)
 8002206:	f002 ff07 	bl	8005018 <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HCSR04_Read+0x48>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <HCSR04_Read+0x48>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0204 	orr.w	r2, r2, #4
 8002218:	60da      	str	r2, [r3, #12]
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	200002a0 	.word	0x200002a0

08002228 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;

void StraightLineMove(const uint8_t speedMode)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af04      	add	r7, sp, #16
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]

  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 8002232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002236:	9302      	str	r3, [sp, #8]
 8002238:	2302      	movs	r3, #2
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	4ba9      	ldr	r3, [pc, #676]	; (80024e4 <StraightLineMove+0x2bc>)
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2301      	movs	r3, #1
 8002242:	2237      	movs	r2, #55	; 0x37
 8002244:	21d0      	movs	r1, #208	; 0xd0
 8002246:	48a8      	ldr	r0, [pc, #672]	; (80024e8 <StraightLineMove+0x2c0>)
 8002248:	f003 f93e 	bl	80054c8 <HAL_I2C_Mem_Read>
 800224c:	4ba5      	ldr	r3, [pc, #660]	; (80024e4 <StraightLineMove+0x2bc>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	b21a      	sxth	r2, r3
 8002254:	4ba3      	ldr	r3, [pc, #652]	; (80024e4 <StraightLineMove+0x2bc>)
 8002256:	785b      	ldrb	r3, [r3, #1]
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21a      	sxth	r2, r3
 800225e:	4ba3      	ldr	r3, [pc, #652]	; (80024ec <StraightLineMove+0x2c4>)
 8002260:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8002262:	4ba3      	ldr	r3, [pc, #652]	; (80024f0 <StraightLineMove+0x2c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b10      	cmp	r3, #16
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	b25a      	sxtb	r2, r3
 8002278:	4b9e      	ldr	r3, [pc, #632]	; (80024f4 <StraightLineMove+0x2cc>)
 800227a:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 800227c:	4b9b      	ldr	r3, [pc, #620]	; (80024ec <StraightLineMove+0x2c4>)
 800227e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002282:	f113 0f04 	cmn.w	r3, #4
 8002286:	db04      	blt.n	8002292 <StraightLineMove+0x6a>
 8002288:	4b98      	ldr	r3, [pc, #608]	; (80024ec <StraightLineMove+0x2c4>)
 800228a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228e:	2b0b      	cmp	r3, #11
 8002290:	dd07      	ble.n	80022a2 <StraightLineMove+0x7a>
 8002292:	4b96      	ldr	r3, [pc, #600]	; (80024ec <StraightLineMove+0x2c4>)
 8002294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a0:	e001      	b.n	80022a6 <StraightLineMove+0x7e>
 80022a2:	eddf 7a95 	vldr	s15, [pc, #596]	; 80024f8 <StraightLineMove+0x2d0>
 80022a6:	4b95      	ldr	r3, [pc, #596]	; (80024fc <StraightLineMove+0x2d4>)
 80022a8:	ed93 7a00 	vldr	s14, [r3]
 80022ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022b0:	4b92      	ldr	r3, [pc, #584]	; (80024fc <StraightLineMove+0x2d4>)
 80022b2:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d164      	bne.n	8002386 <StraightLineMove+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80022bc:	4b90      	ldr	r3, [pc, #576]	; (8002500 <StraightLineMove+0x2d8>)
 80022be:	ed93 7a00 	vldr	s14, [r3]
 80022c2:	4b8e      	ldr	r3, [pc, #568]	; (80024fc <StraightLineMove+0x2d4>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022cc:	4b8c      	ldr	r3, [pc, #560]	; (8002500 <StraightLineMove+0x2d8>)
 80022ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <StraightLineMove+0x2d8>)
 80022d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80022d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e0:	4b87      	ldr	r3, [pc, #540]	; (8002500 <StraightLineMove+0x2d8>)
 80022e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80022e6:	4b86      	ldr	r3, [pc, #536]	; (8002500 <StraightLineMove+0x2d8>)
 80022e8:	ed93 6a03 	vldr	s12, [r3, #12]
 80022ec:	4b83      	ldr	r3, [pc, #524]	; (80024fc <StraightLineMove+0x2d4>)
 80022ee:	edd3 7a00 	vldr	s15, [r3]
 80022f2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80022f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002302:	ee17 2a90 	vmov	r2, s15
 8002306:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <StraightLineMove+0x2dc>)
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	4b7c      	ldr	r3, [pc, #496]	; (80024fc <StraightLineMove+0x2d4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7c      	ldr	r2, [pc, #496]	; (8002500 <StraightLineMove+0x2d8>)
 8002310:	60d3      	str	r3, [r2, #12]
 8002312:	4b7b      	ldr	r3, [pc, #492]	; (8002500 <StraightLineMove+0x2d8>)
 8002314:	ed93 7a04 	vldr	s14, [r3, #16]
 8002318:	4b78      	ldr	r3, [pc, #480]	; (80024fc <StraightLineMove+0x2d4>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002322:	4b77      	ldr	r3, [pc, #476]	; (8002500 <StraightLineMove+0x2d8>)
 8002324:	edc3 7a04 	vstr	s15, [r3, #16]
 8002328:	4b76      	ldr	r3, [pc, #472]	; (8002504 <StraightLineMove+0x2dc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002330:	dc06      	bgt.n	8002340 <StraightLineMove+0x118>
 8002332:	4b74      	ldr	r3, [pc, #464]	; (8002504 <StraightLineMove+0x2dc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a74      	ldr	r2, [pc, #464]	; (8002508 <StraightLineMove+0x2e0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	bfb8      	it	lt
 800233c:	4613      	movlt	r3, r2
 800233e:	e001      	b.n	8002344 <StraightLineMove+0x11c>
 8002340:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002344:	4a6f      	ldr	r2, [pc, #444]	; (8002504 <StraightLineMove+0x2dc>)
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <StraightLineMove+0x2cc>)
 800234a:	f993 3000 	ldrsb.w	r3, [r3]
 800234e:	b29a      	uxth	r2, r3
 8002350:	4b6c      	ldr	r3, [pc, #432]	; (8002504 <StraightLineMove+0x2dc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	fb12 f303 	smulbb	r3, r2, r3
 800235a:	b29b      	uxth	r3, r3
 800235c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b6a      	ldr	r3, [pc, #424]	; (800250c <StraightLineMove+0x2e4>)
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <StraightLineMove+0x2cc>)
 8002368:	f993 3000 	ldrsb.w	r3, [r3]
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b65      	ldr	r3, [pc, #404]	; (8002504 <StraightLineMove+0x2dc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	fb12 f303 	smulbb	r3, r2, r3
 8002378:	b29b      	uxth	r3, r3
 800237a:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 800237e:	b29a      	uxth	r2, r3
 8002380:	4b63      	ldr	r3, [pc, #396]	; (8002510 <StraightLineMove+0x2e8>)
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	e0ef      	b.n	8002566 <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_2)
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d165      	bne.n	8002458 <StraightLineMove+0x230>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 800238c:	4b61      	ldr	r3, [pc, #388]	; (8002514 <StraightLineMove+0x2ec>)
 800238e:	ed93 7a00 	vldr	s14, [r3]
 8002392:	4b5a      	ldr	r3, [pc, #360]	; (80024fc <StraightLineMove+0x2d4>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239c:	4b5d      	ldr	r3, [pc, #372]	; (8002514 <StraightLineMove+0x2ec>)
 800239e:	edd3 6a01 	vldr	s13, [r3, #4]
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <StraightLineMove+0x2ec>)
 80023a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80023a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b0:	4b58      	ldr	r3, [pc, #352]	; (8002514 <StraightLineMove+0x2ec>)
 80023b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80023b6:	4b57      	ldr	r3, [pc, #348]	; (8002514 <StraightLineMove+0x2ec>)
 80023b8:	ed93 6a03 	vldr	s12, [r3, #12]
 80023bc:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <StraightLineMove+0x2d4>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80023c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d2:	ee17 2a90 	vmov	r2, s15
 80023d6:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <StraightLineMove+0x2dc>)
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	4b48      	ldr	r3, [pc, #288]	; (80024fc <StraightLineMove+0x2d4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a4d      	ldr	r2, [pc, #308]	; (8002514 <StraightLineMove+0x2ec>)
 80023e0:	60d3      	str	r3, [r2, #12]
 80023e2:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <StraightLineMove+0x2ec>)
 80023e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80023e8:	4b44      	ldr	r3, [pc, #272]	; (80024fc <StraightLineMove+0x2d4>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f2:	4b48      	ldr	r3, [pc, #288]	; (8002514 <StraightLineMove+0x2ec>)
 80023f4:	edc3 7a04 	vstr	s15, [r3, #16]
 80023f8:	4b42      	ldr	r3, [pc, #264]	; (8002504 <StraightLineMove+0x2dc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002400:	dc06      	bgt.n	8002410 <StraightLineMove+0x1e8>
 8002402:	4b40      	ldr	r3, [pc, #256]	; (8002504 <StraightLineMove+0x2dc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a44      	ldr	r2, [pc, #272]	; (8002518 <StraightLineMove+0x2f0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	bfb8      	it	lt
 800240c:	4613      	movlt	r3, r2
 800240e:	e001      	b.n	8002414 <StraightLineMove+0x1ec>
 8002410:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002414:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <StraightLineMove+0x2dc>)
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <StraightLineMove+0x2cc>)
 800241a:	f993 3000 	ldrsb.w	r3, [r3]
 800241e:	b29a      	uxth	r2, r3
 8002420:	4b38      	ldr	r3, [pc, #224]	; (8002504 <StraightLineMove+0x2dc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	fb12 f303 	smulbb	r3, r2, r3
 800242a:	b29b      	uxth	r3, r3
 800242c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b36      	ldr	r3, [pc, #216]	; (800250c <StraightLineMove+0x2e4>)
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <StraightLineMove+0x2cc>)
 8002438:	f993 3000 	ldrsb.w	r3, [r3]
 800243c:	b29a      	uxth	r2, r3
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <StraightLineMove+0x2dc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	fb12 f303 	smulbb	r3, r2, r3
 8002448:	b29b      	uxth	r3, r3
 800244a:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 800244e:	3308      	adds	r3, #8
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <StraightLineMove+0x2e8>)
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	e086      	b.n	8002566 <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_1)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 8083 	bne.w	8002566 <StraightLineMove+0x33e>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <StraightLineMove+0x2f4>)
 8002462:	ed93 7a00 	vldr	s14, [r3]
 8002466:	4b25      	ldr	r3, [pc, #148]	; (80024fc <StraightLineMove+0x2d4>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <StraightLineMove+0x2f4>)
 8002472:	edd3 6a01 	vldr	s13, [r3, #4]
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <StraightLineMove+0x2f4>)
 8002478:	edd3 7a04 	vldr	s15, [r3, #16]
 800247c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <StraightLineMove+0x2f4>)
 8002486:	edd3 6a02 	vldr	s13, [r3, #8]
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <StraightLineMove+0x2f4>)
 800248c:	ed93 6a03 	vldr	s12, [r3, #12]
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <StraightLineMove+0x2d4>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee76 7a67 	vsub.f32	s15, s12, s15
 800249a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800249e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a6:	ee17 2a90 	vmov	r2, s15
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <StraightLineMove+0x2dc>)
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <StraightLineMove+0x2d4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1a      	ldr	r2, [pc, #104]	; (800251c <StraightLineMove+0x2f4>)
 80024b4:	60d3      	str	r3, [r2, #12]
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <StraightLineMove+0x2f4>)
 80024b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <StraightLineMove+0x2d4>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <StraightLineMove+0x2f4>)
 80024c8:	edc3 7a04 	vstr	s15, [r3, #16]
 80024cc:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <StraightLineMove+0x2dc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80024d4:	dc24      	bgt.n	8002520 <StraightLineMove+0x2f8>
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <StraightLineMove+0x2dc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <StraightLineMove+0x2f0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	bfb8      	it	lt
 80024e0:	4613      	movlt	r3, r2
 80024e2:	e01f      	b.n	8002524 <StraightLineMove+0x2fc>
 80024e4:	200003fc 	.word	0x200003fc
 80024e8:	200001bc 	.word	0x200001bc
 80024ec:	200003fe 	.word	0x200003fe
 80024f0:	20000258 	.word	0x20000258
 80024f4:	2000013c 	.word	0x2000013c
 80024f8:	00000000 	.word	0x00000000
 80024fc:	200003f8 	.word	0x200003f8
 8002500:	2000042c 	.word	0x2000042c
 8002504:	2000046c 	.word	0x2000046c
 8002508:	fffffda8 	.word	0xfffffda8
 800250c:	20000400 	.word	0x20000400
 8002510:	20000402 	.word	0x20000402
 8002514:	20000440 	.word	0x20000440
 8002518:	fffffd44 	.word	0xfffffd44
 800251c:	20000418 	.word	0x20000418
 8002520:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <StraightLineMove+0x35c>)
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <StraightLineMove+0x360>)
 800252a:	f993 3000 	ldrsb.w	r3, [r3]
 800252e:	b29a      	uxth	r2, r3
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <StraightLineMove+0x35c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	fb12 f303 	smulbb	r3, r2, r3
 800253a:	b29b      	uxth	r3, r3
 800253c:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <StraightLineMove+0x364>)
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <StraightLineMove+0x360>)
 8002548:	f993 3000 	ldrsb.w	r3, [r3]
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <StraightLineMove+0x35c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	fb12 f303 	smulbb	r3, r2, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 800255e:	330c      	adds	r3, #12
 8002560:	b29a      	uxth	r2, r3
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <StraightLineMove+0x368>)
 8002564:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <StraightLineMove+0x364>)
 8002568:	881a      	ldrh	r2, [r3, #0]
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <StraightLineMove+0x36c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	635a      	str	r2, [r3, #52]	; 0x34
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <StraightLineMove+0x368>)
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <StraightLineMove+0x36c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	639a      	str	r2, [r3, #56]	; 0x38
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000046c 	.word	0x2000046c
 8002588:	2000013c 	.word	0x2000013c
 800258c:	20000400 	.word	0x20000400
 8002590:	20000402 	.word	0x20000402
 8002594:	200002e8 	.word	0x200002e8

08002598 <RobotMoveDist>:

void RobotMoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
 80025a4:	4613      	mov	r3, r2
 80025a6:	70bb      	strb	r3, [r7, #2]
  {
    angleNow = 0;
 80025a8:	4ba1      	ldr	r3, [pc, #644]	; (8002830 <RobotMoveDist+0x298>)
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 80025b0:	4ba0      	ldr	r3, [pc, #640]	; (8002834 <RobotMoveDist+0x29c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 80025b6:	48a0      	ldr	r0, [pc, #640]	; (8002838 <RobotMoveDist+0x2a0>)
 80025b8:	f7ff fdfd 	bl	80021b6 <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 80025bc:	489f      	ldr	r0, [pc, #636]	; (800283c <RobotMoveDist+0x2a4>)
 80025be:	f7ff fdfa 	bl	80021b6 <PIDConfigReset>
    PIDConfigReset(&pidFast);
 80025c2:	489f      	ldr	r0, [pc, #636]	; (8002840 <RobotMoveDist+0x2a8>)
 80025c4:	f7ff fdf7 	bl	80021b6 <PIDConfigReset>
    curDistTick = 0;
 80025c8:	4b9e      	ldr	r3, [pc, #632]	; (8002844 <RobotMoveDist+0x2ac>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	801a      	strh	r2, [r3, #0]

    __GET_TARGETTICK(*targetDist, targetDistTick);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ffb0 	bl	8000538 <__aeabi_f2d>
 80025d8:	a38f      	add	r3, pc, #572	; (adr r3, 8002818 <RobotMoveDist+0x280>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fe f803 	bl	80005e8 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	a38d      	add	r3, pc, #564	; (adr r3, 8002820 <RobotMoveDist+0x288>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fd fe42 	bl	8000278 <__aeabi_dsub>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b91      	ldr	r3, [pc, #580]	; (8002848 <RobotMoveDist+0x2b0>)
 8002602:	f7fe f91b 	bl	800083c <__aeabi_ddiv>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	4b8e      	ldr	r3, [pc, #568]	; (800284c <RobotMoveDist+0x2b4>)
 8002614:	f7fd ffe8 	bl	80005e8 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	4b8a      	ldr	r3, [pc, #552]	; (8002850 <RobotMoveDist+0x2b8>)
 8002626:	f7fd fe27 	bl	8000278 <__aeabi_dsub>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe fa73 	bl	8000b1c <__aeabi_d2uiz>
 8002636:	4603      	mov	r3, r0
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b86      	ldr	r3, [pc, #536]	; (8002854 <RobotMoveDist+0x2bc>)
 800263c:	801a      	strh	r2, [r3, #0]

    last_curTask_tick = HAL_GetTick();
 800263e:	f002 f9ab 	bl	8004998 <HAL_GetTick>
 8002642:	4603      	mov	r3, r0
 8002644:	4a84      	ldr	r2, [pc, #528]	; (8002858 <RobotMoveDist+0x2c0>)
 8002646:	6013      	str	r3, [r2, #0]
    __SET_MOTOR_DIRECTION(dir);
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	2104      	movs	r1, #4
 8002658:	4880      	ldr	r0, [pc, #512]	; (800285c <RobotMoveDist+0x2c4>)
 800265a:	f002 fcdd 	bl	8005018 <HAL_GPIO_WritePin>
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	2108      	movs	r1, #8
 800266e:	487b      	ldr	r0, [pc, #492]	; (800285c <RobotMoveDist+0x2c4>)
 8002670:	f002 fcd2 	bl	8005018 <HAL_GPIO_WritePin>
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	2120      	movs	r1, #32
 8002684:	4875      	ldr	r0, [pc, #468]	; (800285c <RobotMoveDist+0x2c4>)
 8002686:	f002 fcc7 	bl	8005018 <HAL_GPIO_WritePin>
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	2110      	movs	r1, #16
 800269a:	4870      	ldr	r0, [pc, #448]	; (800285c <RobotMoveDist+0x2c4>)
 800269c:	f002 fcbc 	bl	8005018 <HAL_GPIO_WritePin>
    __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 80026a0:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <RobotMoveDist+0x2c8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b6e      	ldr	r3, [pc, #440]	; (8002864 <RobotMoveDist+0x2cc>)
 80026aa:	801a      	strh	r2, [r3, #0]
    do
    {
      __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 80026ac:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <RobotMoveDist+0x2c8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <RobotMoveDist+0x2c8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d117      	bne.n	80026f2 <RobotMoveDist+0x15a>
 80026c2:	4b68      	ldr	r3, [pc, #416]	; (8002864 <RobotMoveDist+0x2cc>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d806      	bhi.n	80026dc <RobotMoveDist+0x144>
 80026ce:	4b65      	ldr	r3, [pc, #404]	; (8002864 <RobotMoveDist+0x2cc>)
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	e007      	b.n	80026ec <RobotMoveDist+0x154>
 80026dc:	4b61      	ldr	r3, [pc, #388]	; (8002864 <RobotMoveDist+0x2cc>)
 80026de:	881a      	ldrh	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	4a5e      	ldr	r2, [pc, #376]	; (8002868 <RobotMoveDist+0x2d0>)
 80026ee:	8013      	strh	r3, [r2, #0]
 80026f0:	e016      	b.n	8002720 <RobotMoveDist+0x188>
 80026f2:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <RobotMoveDist+0x2cc>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d306      	bcc.n	800270c <RobotMoveDist+0x174>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	b29a      	uxth	r2, r3
 8002702:	4b58      	ldr	r3, [pc, #352]	; (8002864 <RobotMoveDist+0x2cc>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	b29b      	uxth	r3, r3
 800270a:	e007      	b.n	800271c <RobotMoveDist+0x184>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	b29a      	uxth	r2, r3
 8002710:	4b54      	ldr	r3, [pc, #336]	; (8002864 <RobotMoveDist+0x2cc>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29b      	uxth	r3, r3
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <RobotMoveDist+0x2d0>)
 800271e:	8013      	strh	r3, [r2, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <RobotMoveDist+0x2cc>)
 8002726:	801a      	strh	r2, [r3, #0]
      curDistTick += dist_dL;
 8002728:	4b46      	ldr	r3, [pc, #280]	; (8002844 <RobotMoveDist+0x2ac>)
 800272a:	881a      	ldrh	r2, [r3, #0]
 800272c:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <RobotMoveDist+0x2d0>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	4413      	add	r3, r2
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b43      	ldr	r3, [pc, #268]	; (8002844 <RobotMoveDist+0x2ac>)
 8002736:	801a      	strh	r2, [r3, #0]

      osDelay(10);
 8002738:	200a      	movs	r0, #10
 800273a:	f006 ffcb 	bl	80096d4 <osDelay>

      if (curDistTick >= targetDistTick)
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <RobotMoveDist+0x2ac>)
 8002740:	881a      	ldrh	r2, [r3, #0]
 8002742:	4b44      	ldr	r3, [pc, #272]	; (8002854 <RobotMoveDist+0x2bc>)
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	f080 80a5 	bcs.w	8002896 <RobotMoveDist+0x2fe>
        break;

      if (HAL_GetTick() - last_curTask_tick >= 10)
 800274c:	f002 f924 	bl	8004998 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <RobotMoveDist+0x2c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b09      	cmp	r3, #9
 800275a:	d9a7      	bls.n	80026ac <RobotMoveDist+0x114>
      {
        if (speedMode == SPEED_MODE_T)
 800275c:	78bb      	ldrb	r3, [r7, #2]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <RobotMoveDist+0x1d2>
        {
          StraightLineMove(SPEED_MODE_T);
 8002762:	2000      	movs	r0, #0
 8002764:	f7ff fd60 	bl	8002228 <StraightLineMove>
 8002768:	e08f      	b.n	800288a <RobotMoveDist+0x2f2>
        }
        else
        {
          speedScale = abs(curDistTick - targetDistTick) / 1100; // start to slow down at last 1100 ticks (?cm)
 800276a:	4b36      	ldr	r3, [pc, #216]	; (8002844 <RobotMoveDist+0x2ac>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	4b38      	ldr	r3, [pc, #224]	; (8002854 <RobotMoveDist+0x2bc>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	bfb8      	it	lt
 800277a:	425b      	neglt	r3, r3
 800277c:	4a3b      	ldr	r2, [pc, #236]	; (800286c <RobotMoveDist+0x2d4>)
 800277e:	fb82 1203 	smull	r1, r2, r2, r3
 8002782:	1252      	asrs	r2, r2, #9
 8002784:	17db      	asrs	r3, r3, #31
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002790:	4b37      	ldr	r3, [pc, #220]	; (8002870 <RobotMoveDist+0x2d8>)
 8002792:	edc3 7a00 	vstr	s15, [r3]
          if (speedMode == SPEED_MODE_1)
 8002796:	78bb      	ldrb	r3, [r7, #2]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d11e      	bne.n	80027da <RobotMoveDist+0x242>
            speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 800279c:	4b34      	ldr	r3, [pc, #208]	; (8002870 <RobotMoveDist+0x2d8>)
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ae:	dd02      	ble.n	80027b6 <RobotMoveDist+0x21e>
 80027b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80027b4:	e00e      	b.n	80027d4 <RobotMoveDist+0x23c>
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <RobotMoveDist+0x2d8>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80027c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d502      	bpl.n	80027d0 <RobotMoveDist+0x238>
 80027ca:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80027ce:	e001      	b.n	80027d4 <RobotMoveDist+0x23c>
 80027d0:	4b27      	ldr	r3, [pc, #156]	; (8002870 <RobotMoveDist+0x2d8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <RobotMoveDist+0x2d8>)
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e052      	b.n	8002880 <RobotMoveDist+0x2e8>
          else if (speedMode == SPEED_MODE_2)
 80027da:	78bb      	ldrb	r3, [r7, #2]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d14f      	bne.n	8002880 <RobotMoveDist+0x2e8>
            speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <RobotMoveDist+0x2d8>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	dd02      	ble.n	80027fa <RobotMoveDist+0x262>
 80027f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80027f8:	e040      	b.n	800287c <RobotMoveDist+0x2e4>
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <RobotMoveDist+0x2d8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fe9a 	bl	8000538 <__aeabi_f2d>
 8002804:	a308      	add	r3, pc, #32	; (adr r3, 8002828 <RobotMoveDist+0x290>)
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f7fe f95f 	bl	8000acc <__aeabi_dcmplt>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d031      	beq.n	8002878 <RobotMoveDist+0x2e0>
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <RobotMoveDist+0x2dc>)
 8002816:	e031      	b.n	800287c <RobotMoveDist+0x2e4>
 8002818:	fc66b22a 	.word	0xfc66b22a
 800281c:	3ff266ac 	.word	0x3ff266ac
 8002820:	bb2526f8 	.word	0xbb2526f8
 8002824:	3feee3d4 	.word	0x3feee3d4
 8002828:	9999999a 	.word	0x9999999a
 800282c:	3fd99999 	.word	0x3fd99999
 8002830:	200003f8 	.word	0x200003f8
 8002834:	200003fe 	.word	0x200003fe
 8002838:	2000042c 	.word	0x2000042c
 800283c:	20000418 	.word	0x20000418
 8002840:	20000440 	.word	0x20000440
 8002844:	20000410 	.word	0x20000410
 8002848:	40340000 	.word	0x40340000
 800284c:	4094a000 	.word	0x4094a000
 8002850:	40240000 	.word	0x40240000
 8002854:	20000412 	.word	0x20000412
 8002858:	20000404 	.word	0x20000404
 800285c:	40020000 	.word	0x40020000
 8002860:	20000258 	.word	0x20000258
 8002864:	20000416 	.word	0x20000416
 8002868:	20000414 	.word	0x20000414
 800286c:	77280773 	.word	0x77280773
 8002870:	20000138 	.word	0x20000138
 8002874:	3ecccccd 	.word	0x3ecccccd
 8002878:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <RobotMoveDist+0x318>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <RobotMoveDist+0x318>)
 800287e:	6013      	str	r3, [r2, #0]
          StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002880:	78bb      	ldrb	r3, [r7, #2]
 8002882:	490b      	ldr	r1, [pc, #44]	; (80028b0 <RobotMoveDist+0x318>)
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f819 	bl	80028bc <StraightLineMoveSpeedScale>
        }

        last_curTask_tick = HAL_GetTick();
 800288a:	f002 f885 	bl	8004998 <HAL_GetTick>
 800288e:	4603      	mov	r3, r0
 8002890:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <RobotMoveDist+0x31c>)
 8002892:	6013      	str	r3, [r2, #0]
      __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002894:	e70a      	b.n	80026ac <RobotMoveDist+0x114>
        break;
 8002896:	bf00      	nop
      }
    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <RobotMoveDist+0x320>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2200      	movs	r2, #0
 800289e:	635a      	str	r2, [r3, #52]	; 0x34
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <RobotMoveDist+0x320>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000138 	.word	0x20000138
 80028b4:	20000404 	.word	0x20000404
 80028b8:	200002e8 	.word	0x200002e8

080028bc <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float *speedScale)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 80028c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	2302      	movs	r3, #2
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	4b9b      	ldr	r3, [pc, #620]	; (8002b40 <StraightLineMoveSpeedScale+0x284>)
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2301      	movs	r3, #1
 80028d8:	2237      	movs	r2, #55	; 0x37
 80028da:	21d0      	movs	r1, #208	; 0xd0
 80028dc:	4899      	ldr	r0, [pc, #612]	; (8002b44 <StraightLineMoveSpeedScale+0x288>)
 80028de:	f002 fdf3 	bl	80054c8 <HAL_I2C_Mem_Read>
 80028e2:	4b97      	ldr	r3, [pc, #604]	; (8002b40 <StraightLineMoveSpeedScale+0x284>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	b21a      	sxth	r2, r3
 80028ea:	4b95      	ldr	r3, [pc, #596]	; (8002b40 <StraightLineMoveSpeedScale+0x284>)
 80028ec:	785b      	ldrb	r3, [r3, #1]
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	4313      	orrs	r3, r2
 80028f2:	b21a      	sxth	r2, r3
 80028f4:	4b94      	ldr	r3, [pc, #592]	; (8002b48 <StraightLineMoveSpeedScale+0x28c>)
 80028f6:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 80028f8:	4b94      	ldr	r3, [pc, #592]	; (8002b4c <StraightLineMoveSpeedScale+0x290>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b10      	cmp	r3, #16
 8002904:	d101      	bne.n	800290a <StraightLineMoveSpeedScale+0x4e>
 8002906:	2201      	movs	r2, #1
 8002908:	e001      	b.n	800290e <StraightLineMoveSpeedScale+0x52>
 800290a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290e:	4b90      	ldr	r3, [pc, #576]	; (8002b50 <StraightLineMoveSpeedScale+0x294>)
 8002910:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002912:	4b8d      	ldr	r3, [pc, #564]	; (8002b48 <StraightLineMoveSpeedScale+0x28c>)
 8002914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002918:	f113 0f04 	cmn.w	r3, #4
 800291c:	db04      	blt.n	8002928 <StraightLineMoveSpeedScale+0x6c>
 800291e:	4b8a      	ldr	r3, [pc, #552]	; (8002b48 <StraightLineMoveSpeedScale+0x28c>)
 8002920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002924:	2b0b      	cmp	r3, #11
 8002926:	dd07      	ble.n	8002938 <StraightLineMoveSpeedScale+0x7c>
 8002928:	4b87      	ldr	r3, [pc, #540]	; (8002b48 <StraightLineMoveSpeedScale+0x28c>)
 800292a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002936:	e001      	b.n	800293c <StraightLineMoveSpeedScale+0x80>
 8002938:	eddf 7a86 	vldr	s15, [pc, #536]	; 8002b54 <StraightLineMoveSpeedScale+0x298>
 800293c:	4b86      	ldr	r3, [pc, #536]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 800293e:	ed93 7a00 	vldr	s14, [r3]
 8002942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002946:	4b84      	ldr	r3, [pc, #528]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 8002948:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d165      	bne.n	8002a1e <StraightLineMoveSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002952:	4b82      	ldr	r3, [pc, #520]	; (8002b5c <StraightLineMoveSpeedScale+0x2a0>)
 8002954:	ed93 7a00 	vldr	s14, [r3]
 8002958:	4b7f      	ldr	r3, [pc, #508]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002962:	4b7e      	ldr	r3, [pc, #504]	; (8002b5c <StraightLineMoveSpeedScale+0x2a0>)
 8002964:	edd3 6a01 	vldr	s13, [r3, #4]
 8002968:	4b7c      	ldr	r3, [pc, #496]	; (8002b5c <StraightLineMoveSpeedScale+0x2a0>)
 800296a:	edd3 7a04 	vldr	s15, [r3, #16]
 800296e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002972:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002976:	4b79      	ldr	r3, [pc, #484]	; (8002b5c <StraightLineMoveSpeedScale+0x2a0>)
 8002978:	edd3 6a02 	vldr	s13, [r3, #8]
 800297c:	4b77      	ldr	r3, [pc, #476]	; (8002b5c <StraightLineMoveSpeedScale+0x2a0>)
 800297e:	ed93 6a03 	vldr	s12, [r3, #12]
 8002982:	4b75      	ldr	r3, [pc, #468]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	ee76 7a67 	vsub.f32	s15, s12, s15
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002998:	ee17 2a90 	vmov	r2, s15
 800299c:	4b70      	ldr	r3, [pc, #448]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	4b6d      	ldr	r3, [pc, #436]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6d      	ldr	r2, [pc, #436]	; (8002b5c <StraightLineMoveSpeedScale+0x2a0>)
 80029a6:	60d3      	str	r3, [r2, #12]
 80029a8:	4b6c      	ldr	r3, [pc, #432]	; (8002b5c <StraightLineMoveSpeedScale+0x2a0>)
 80029aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80029ae:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <StraightLineMoveSpeedScale+0x2a0>)
 80029ba:	edc3 7a04 	vstr	s15, [r3, #16]
 80029be:	4b68      	ldr	r3, [pc, #416]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80029c6:	dc06      	bgt.n	80029d6 <StraightLineMoveSpeedScale+0x11a>
 80029c8:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <StraightLineMoveSpeedScale+0x2a8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	bfb8      	it	lt
 80029d2:	4613      	movlt	r3, r2
 80029d4:	e001      	b.n	80029da <StraightLineMoveSpeedScale+0x11e>
 80029d6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80029da:	4a61      	ldr	r2, [pc, #388]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <StraightLineMoveSpeedScale+0x294>)
 80029e0:	f993 3000 	ldrsb.w	r3, [r3]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	4b5e      	ldr	r3, [pc, #376]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	fb12 f303 	smulbb	r3, r2, r3
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <StraightLineMoveSpeedScale+0x2ac>)
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	4b54      	ldr	r3, [pc, #336]	; (8002b50 <StraightLineMoveSpeedScale+0x294>)
 80029fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	fb12 f303 	smulbb	r3, r2, r3
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002a14:	330c      	adds	r3, #12
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b54      	ldr	r3, [pc, #336]	; (8002b6c <StraightLineMoveSpeedScale+0x2b0>)
 8002a1a:	801a      	strh	r2, [r3, #0]
 8002a1c:	e067      	b.n	8002aee <StraightLineMoveSpeedScale+0x232>
  else if (speedMode == SPEED_MODE_2)
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d164      	bne.n	8002aee <StraightLineMoveSpeedScale+0x232>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002a24:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <StraightLineMoveSpeedScale+0x2b4>)
 8002a26:	ed93 7a00 	vldr	s14, [r3]
 8002a2a:	4b4b      	ldr	r3, [pc, #300]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a34:	4b4e      	ldr	r3, [pc, #312]	; (8002b70 <StraightLineMoveSpeedScale+0x2b4>)
 8002a36:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a3a:	4b4d      	ldr	r3, [pc, #308]	; (8002b70 <StraightLineMoveSpeedScale+0x2b4>)
 8002a3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a48:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <StraightLineMoveSpeedScale+0x2b4>)
 8002a4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a4e:	4b48      	ldr	r3, [pc, #288]	; (8002b70 <StraightLineMoveSpeedScale+0x2b4>)
 8002a50:	ed93 6a03 	vldr	s12, [r3, #12]
 8002a54:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a6a:	ee17 2a90 	vmov	r2, s15
 8002a6e:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a3e      	ldr	r2, [pc, #248]	; (8002b70 <StraightLineMoveSpeedScale+0x2b4>)
 8002a78:	60d3      	str	r3, [r2, #12]
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <StraightLineMoveSpeedScale+0x2b4>)
 8002a7c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a80:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <StraightLineMoveSpeedScale+0x29c>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8a:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <StraightLineMoveSpeedScale+0x2b4>)
 8002a8c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002a90:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002a98:	dc06      	bgt.n	8002aa8 <StraightLineMoveSpeedScale+0x1ec>
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <StraightLineMoveSpeedScale+0x2a8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	bfb8      	it	lt
 8002aa4:	4613      	movlt	r3, r2
 8002aa6:	e001      	b.n	8002aac <StraightLineMoveSpeedScale+0x1f0>
 8002aa8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002aac:	4a2c      	ldr	r2, [pc, #176]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <StraightLineMoveSpeedScale+0x294>)
 8002ab2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	fb12 f303 	smulbb	r3, r2, r3
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <StraightLineMoveSpeedScale+0x2ac>)
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <StraightLineMoveSpeedScale+0x294>)
 8002ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <StraightLineMoveSpeedScale+0x2a4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	fb12 f303 	smulbb	r3, r2, r3
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <StraightLineMoveSpeedScale+0x2b0>)
 8002aec:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <StraightLineMoveSpeedScale+0x2ac>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <StraightLineMoveSpeedScale+0x2b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0c:	ee17 2a90 	vmov	r2, s15
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <StraightLineMoveSpeedScale+0x2b0>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <StraightLineMoveSpeedScale+0x2b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b30:	ee17 2a90 	vmov	r2, s15
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200003fc 	.word	0x200003fc
 8002b44:	200001bc 	.word	0x200001bc
 8002b48:	200003fe 	.word	0x200003fe
 8002b4c:	20000258 	.word	0x20000258
 8002b50:	2000013c 	.word	0x2000013c
 8002b54:	00000000 	.word	0x00000000
 8002b58:	200003f8 	.word	0x200003f8
 8002b5c:	20000418 	.word	0x20000418
 8002b60:	2000046c 	.word	0x2000046c
 8002b64:	fffffd44 	.word	0xfffffd44
 8002b68:	20000400 	.word	0x20000400
 8002b6c:	20000402 	.word	0x20000402
 8002b70:	20000440 	.word	0x20000440
 8002b74:	200002e8 	.word	0x200002e8

08002b78 <RobotTurn>:

void RobotTurn(float *targetAngle)
{
 8002b78:	b5b0      	push	{r4, r5, r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af04      	add	r7, sp, #16
 8002b7e:	6078      	str	r0, [r7, #4]
  angleNow = 0;
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <RobotTurn+0x138>)
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8002b88:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <RobotTurn+0x13c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8002b8e:	f001 ff03 	bl	8004998 <HAL_GetTick>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a48      	ldr	r2, [pc, #288]	; (8002cb8 <RobotTurn+0x140>)
 8002b96:	6013      	str	r3, [r2, #0]
  do
  {
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002b98:	f001 fefe 	bl	8004998 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <RobotTurn+0x140>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b09      	cmp	r3, #9
 8002ba6:	d9f7      	bls.n	8002b98 <RobotTurn+0x20>
    { // sample gyro every 10ms
      __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8002ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bac:	9302      	str	r3, [sp, #8]
 8002bae:	2302      	movs	r3, #2
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <RobotTurn+0x144>)
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	2237      	movs	r2, #55	; 0x37
 8002bba:	21d0      	movs	r1, #208	; 0xd0
 8002bbc:	4840      	ldr	r0, [pc, #256]	; (8002cc0 <RobotTurn+0x148>)
 8002bbe:	f002 fc83 	bl	80054c8 <HAL_I2C_Mem_Read>
 8002bc2:	4b3e      	ldr	r3, [pc, #248]	; (8002cbc <RobotTurn+0x144>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	b21a      	sxth	r2, r3
 8002bca:	4b3c      	ldr	r3, [pc, #240]	; (8002cbc <RobotTurn+0x144>)
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	b21b      	sxth	r3, r3
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b21a      	sxth	r2, r3
 8002bd4:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <RobotTurn+0x13c>)
 8002bd6:	801a      	strh	r2, [r3, #0]
      angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <RobotTurn+0x138>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fcab 	bl	8000538 <__aeabi_f2d>
 8002be2:	4604      	mov	r4, r0
 8002be4:	460d      	mov	r5, r1
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <RobotTurn+0x13c>)
 8002be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fc91 	bl	8000514 <__aeabi_i2d>
 8002bf2:	a32b      	add	r3, pc, #172	; (adr r3, 8002ca0 <RobotTurn+0x128>)
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f7fd fe20 	bl	800083c <__aeabi_ddiv>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	a328      	add	r3, pc, #160	; (adr r3, 8002ca8 <RobotTurn+0x130>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	f7fd fced 	bl	80005e8 <__aeabi_dmul>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fd fb31 	bl	800027c <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ff9b 	bl	8000b5c <__aeabi_d2f>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <RobotTurn+0x138>)
 8002c2a:	6013      	str	r3, [r2, #0]
      if (abs(angleNow - *targetAngle) < 0.01)
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <RobotTurn+0x138>)
 8002c2e:	ed93 7a00 	vldr	s14, [r3]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c40:	ee17 3a90 	vmov	r3, s15
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0d      	blt.n	8002c64 <RobotTurn+0xec>
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <RobotTurn+0x138>)
 8002c4a:	ed93 7a00 	vldr	s14, [r3]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c5c:	ee17 3a90 	vmov	r3, s15
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	dd05      	ble.n	8002c70 <RobotTurn+0xf8>
        break;
      last_curTask_tick = HAL_GetTick();
 8002c64:	f001 fe98 	bl	8004998 <HAL_GetTick>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <RobotTurn+0x140>)
 8002c6c:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002c6e:	e793      	b.n	8002b98 <RobotTurn+0x20>
        break;
 8002c70:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002c72:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <RobotTurn+0x14c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <RobotTurn+0x14c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
  __RESET_SERVO_TURN(&htim1);
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <RobotTurn+0x150>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	228e      	movs	r2, #142	; 0x8e
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
 8002c8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c8e:	f001 fe8f 	bl	80049b0 <HAL_Delay>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	66666666 	.word	0x66666666
 8002ca4:	40306666 	.word	0x40306666
 8002ca8:	47ae147b 	.word	0x47ae147b
 8002cac:	3f847ae1 	.word	0x3f847ae1
 8002cb0:	200003f8 	.word	0x200003f8
 8002cb4:	200003fe 	.word	0x200003fe
 8002cb8:	20000404 	.word	0x20000404
 8002cbc:	200003fc 	.word	0x200003fc
 8002cc0:	200001bc 	.word	0x200001bc
 8002cc4:	200002e8 	.word	0x200002e8
 8002cc8:	20000210 	.word	0x20000210

08002ccc <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08e      	sub	sp, #56	; 0x38
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  // HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  int cnt1 = 0, cnt2 = 0, diff = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	2300      	movs	r3, #0
 8002cde:	633b      	str	r3, [r7, #48]	; 0x30

  uint32_t tick = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <runEncoder+0xc4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
  tick = HAL_GetTick();
 8002cec:	f001 fe54 	bl	8004998 <HAL_GetTick>
 8002cf0:	62f8      	str	r0, [r7, #44]	; 0x2c

  // uint8_t encoderBuffer[20];
  uint8_t speedBuffer[20];
  uint8_t directionBuffer[10];
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <runEncoder+0xc4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	b25a      	sxtb	r2, r3
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <runEncoder+0xc8>)
 8002d0a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */

  for (;;)
  {
    // HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
    if (HAL_GetTick() - tick > 1000L)
 8002d0c:	f001 fe44 	bl	8004998 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d1a:	d935      	bls.n	8002d88 <runEncoder+0xbc>
    {
      cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <runEncoder+0xc4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <runEncoder+0xc4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d110      	bne.n	8002d54 <runEncoder+0x88>
      {
        if (cnt2 < cnt1)
 8002d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d36:	429a      	cmp	r2, r3
 8002d38:	da04      	bge.n	8002d44 <runEncoder+0x78>
        {
          diff = cnt1 - cnt2;
 8002d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	633b      	str	r3, [r7, #48]	; 0x30
 8002d42:	e017      	b.n	8002d74 <runEncoder+0xa8>
        }
        else
          diff = (65535 - cnt2) + cnt1;
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002d4a:	33ff      	adds	r3, #255	; 0xff
 8002d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d4e:	4413      	add	r3, r2
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
 8002d52:	e00f      	b.n	8002d74 <runEncoder+0xa8>
      }
      else
      {
        if (cnt2 > cnt1)
 8002d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dd04      	ble.n	8002d66 <runEncoder+0x9a>
        {
          diff = cnt2 - cnt1;
 8002d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
 8002d64:	e006      	b.n	8002d74 <runEncoder+0xa8>
        }
        else
          diff = (65535 - cnt1) + cnt2;
 8002d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d68:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002d6c:	33ff      	adds	r3, #255	; 0xff
 8002d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d70:	4413      	add	r3, r2
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
      }
      curSpeed = diff;
 8002d74:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <runEncoder+0xcc>)
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	6013      	str	r3, [r2, #0]
      // OLED_ShowString(0, 0, speedBuffer);
      // sprintf(directionBuffer, "Dir:%5d\0", dir);
      // OLED_ShowString(0, 15, directionBuffer);

      // OLED_Refresh_Gram();
      cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <runEncoder+0xc4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
      tick = HAL_GetTick();
 8002d82:	f001 fe09 	bl	8004998 <HAL_GetTick>
 8002d86:	62f8      	str	r0, [r7, #44]	; 0x2c
    }

    osDelay(100);
 8002d88:	2064      	movs	r0, #100	; 0x64
 8002d8a:	f006 fca3 	bl	80096d4 <osDelay>
    if (HAL_GetTick() - tick > 1000L)
 8002d8e:	e7bd      	b.n	8002d0c <runEncoder+0x40>
 8002d90:	20000258 	.word	0x20000258
 8002d94:	2000013c 	.word	0x2000013c
 8002d98:	20000408 	.word	0x20000408

08002d9c <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	6078      	str	r0, [r7, #4]
    //  OLED_ShowString(0, 40, (char *)ch);

    // uart received cmd
    // __ACK_TASK_DONE(&huart3, rxMsg);
    // HAL_UART_Transmit(&huart3, aRxBuffer, RX_BUFFER_SIZE, 0xFFFF);
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 8002da4:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <runOledTask+0x3c>)
 8002da6:	2128      	movs	r1, #40	; 0x28
 8002da8:	2000      	movs	r0, #0
 8002daa:	f009 fc05 	bl	800c5b8 <OLED_ShowString>

    obsDist_US = 1000;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <runOledTask+0x40>)
 8002db0:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <runOledTask+0x44>)
 8002db2:	601a      	str	r2, [r3, #0]

    HCSR04_Read();
 8002db4:	f7ff fa12 	bl	80021dc <HCSR04_Read>
    OLED_ShowNumber(0, 0, IC_Val2, 5, 12);
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <runOledTask+0x48>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2305      	movs	r3, #5
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f009 fb89 	bl	800c4dc <OLED_ShowNumber>

    OLED_Refresh_Gram();
 8002dca:	f009 f9f7 	bl	800c1bc <OLED_Refresh_Gram>
    osDelay(1000);
 8002dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dd2:	f006 fc7f 	bl	80096d4 <osDelay>
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 8002dd6:	e7e5      	b.n	8002da4 <runOledTask+0x8>
 8002dd8:	2000039c 	.word	0x2000039c
 8002ddc:	20000454 	.word	0x20000454
 8002de0:	447a0000 	.word	0x447a0000
 8002de4:	2000045c 	.word	0x2000045c

08002de8 <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  // float targetAngle = 90;
  /* Infinite loop */
  for (;;)
  {

    if (curTask != TASK_MOVE_FOREWARD)
 8002df0:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <runFWTask+0x1c0>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <runFWTask+0x1a>
      osDelay(1000);
 8002df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dfc:	f006 fc6a 	bl	80096d4 <osDelay>
 8002e00:	e7f6      	b.n	8002df0 <runFWTask+0x8>
    else
    {

      if (manualMode)
 8002e02:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <runFWTask+0x1c4>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d061      	beq.n	8002ece <runFWTask+0xe6>
      {

        angleNow = 0;
 8002e0a:	4b69      	ldr	r3, [pc, #420]	; (8002fb0 <runFWTask+0x1c8>)
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 8002e12:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <runFWTask+0x1cc>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 8002e18:	4867      	ldr	r0, [pc, #412]	; (8002fb8 <runFWTask+0x1d0>)
 8002e1a:	f7ff f9cc 	bl	80021b6 <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 8002e1e:	4867      	ldr	r0, [pc, #412]	; (8002fbc <runFWTask+0x1d4>)
 8002e20:	f7ff f9c9 	bl	80021b6 <PIDConfigReset>
        PIDConfigReset(&pidFast);
 8002e24:	4866      	ldr	r0, [pc, #408]	; (8002fc0 <runFWTask+0x1d8>)
 8002e26:	f7ff f9c6 	bl	80021b6 <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	4865      	ldr	r0, [pc, #404]	; (8002fc4 <runFWTask+0x1dc>)
 8002e30:	f002 f8f2 	bl	8005018 <HAL_GPIO_WritePin>
 8002e34:	2201      	movs	r2, #1
 8002e36:	2108      	movs	r1, #8
 8002e38:	4862      	ldr	r0, [pc, #392]	; (8002fc4 <runFWTask+0x1dc>)
 8002e3a:	f002 f8ed 	bl	8005018 <HAL_GPIO_WritePin>
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2120      	movs	r1, #32
 8002e42:	4860      	ldr	r0, [pc, #384]	; (8002fc4 <runFWTask+0x1dc>)
 8002e44:	f002 f8e8 	bl	8005018 <HAL_GPIO_WritePin>
 8002e48:	2201      	movs	r2, #1
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	485d      	ldr	r0, [pc, #372]	; (8002fc4 <runFWTask+0x1dc>)
 8002e4e:	f002 f8e3 	bl	8005018 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <runFWTask+0x1e0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <runFWTask+0x1e0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <runFWTask+0x1c0>)
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	4b59      	ldr	r3, [pc, #356]	; (8002fcc <runFWTask+0x1e4>)
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <runFWTask+0x1c0>)
 8002e6c:	2209      	movs	r2, #9
 8002e6e:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8002e70:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <runFWTask+0x1e8>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <runFWTask+0x1ec>)
 8002e78:	2264      	movs	r2, #100	; 0x64
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <runFWTask+0x1ec>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8002e82:	4a55      	ldr	r2, [pc, #340]	; (8002fd8 <runFWTask+0x1f0>)
 8002e84:	210f      	movs	r1, #15
 8002e86:	4855      	ldr	r0, [pc, #340]	; (8002fdc <runFWTask+0x1f4>)
 8002e88:	f009 fc54 	bl	800c734 <sniprintf>
 8002e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e90:	2206      	movs	r2, #6
 8002e92:	4953      	ldr	r1, [pc, #332]	; (8002fe0 <runFWTask+0x1f8>)
 8002e94:	4853      	ldr	r0, [pc, #332]	; (8002fe4 <runFWTask+0x1fc>)
 8002e96:	f005 fad2 	bl	800843e <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 8002e9a:	f001 fd7d 	bl	8004998 <HAL_GetTick>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4a51      	ldr	r2, [pc, #324]	; (8002fe8 <runFWTask+0x200>)
 8002ea2:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 8002ea4:	4b41      	ldr	r3, [pc, #260]	; (8002fac <runFWTask+0x1c4>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d07b      	beq.n	8002fa4 <runFWTask+0x1bc>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 8002eac:	f001 fd74 	bl	8004998 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b4d      	ldr	r3, [pc, #308]	; (8002fe8 <runFWTask+0x200>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b09      	cmp	r3, #9
 8002eba:	d9f3      	bls.n	8002ea4 <runFWTask+0xbc>
          {
            StraightLineMove(SPEED_MODE_T);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff f9b3 	bl	8002228 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 8002ec2:	f001 fd69 	bl	8004998 <HAL_GetTick>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4a47      	ldr	r2, [pc, #284]	; (8002fe8 <runFWTask+0x200>)
 8002eca:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 8002ecc:	e7ea      	b.n	8002ea4 <runFWTask+0xbc>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 8002ece:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <runFWTask+0x1ec>)
 8002ed0:	885b      	ldrh	r3, [r3, #2]
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eda:	4b44      	ldr	r3, [pc, #272]	; (8002fec <runFWTask+0x204>)
 8002edc:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 8002ee0:	4b42      	ldr	r3, [pc, #264]	; (8002fec <runFWTask+0x204>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef2:	d802      	bhi.n	8002efa <runFWTask+0x112>
          moveMode = SLOW;
 8002ef4:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <runFWTask+0x208>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]

        if (moveMode == SLOW)
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <runFWTask+0x208>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <runFWTask+0x126>
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8002f02:	2201      	movs	r2, #1
 8002f04:	2101      	movs	r1, #1
 8002f06:	4839      	ldr	r0, [pc, #228]	; (8002fec <runFWTask+0x204>)
 8002f08:	f7ff fb46 	bl	8002598 <RobotMoveDist>
 8002f0c:	e004      	b.n	8002f18 <runFWTask+0x130>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_2);
 8002f0e:	2202      	movs	r2, #2
 8002f10:	2101      	movs	r1, #1
 8002f12:	4836      	ldr	r0, [pc, #216]	; (8002fec <runFWTask+0x204>)
 8002f14:	f7ff fb40 	bl	8002598 <RobotMoveDist>
          // OLED_ShowString(40, 40, (uint8_t *)"FW");
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <runFWTask+0x1e0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	635a      	str	r2, [r3, #52]	; 0x34
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <runFWTask+0x1e0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
 8002f28:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <runFWTask+0x1c0>)
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <runFWTask+0x1e4>)
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <runFWTask+0x1c0>)
 8002f32:	2209      	movs	r2, #9
 8002f34:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <runFWTask+0x1e8>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <runFWTask+0x20c>)
 8002f3e:	781a      	ldrb	r2, [r3, #0]
 8002f40:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <runFWTask+0x20c>)
 8002f42:	785b      	ldrb	r3, [r3, #1]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d112      	bne.n	8002f6e <runFWTask+0x186>
        {
          __CLEAR_CURCMD(curCmd);
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <runFWTask+0x1ec>)
 8002f4a:	2264      	movs	r2, #100	; 0x64
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <runFWTask+0x1ec>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 8002f54:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <runFWTask+0x1f0>)
 8002f56:	210f      	movs	r1, #15
 8002f58:	4820      	ldr	r0, [pc, #128]	; (8002fdc <runFWTask+0x1f4>)
 8002f5a:	f009 fbeb 	bl	800c734 <sniprintf>
 8002f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f62:	2206      	movs	r2, #6
 8002f64:	491e      	ldr	r1, [pc, #120]	; (8002fe0 <runFWTask+0x1f8>)
 8002f66:	481f      	ldr	r0, [pc, #124]	; (8002fe4 <runFWTask+0x1fc>)
 8002f68:	f005 fa69 	bl	800843e <HAL_UART_Transmit>
 8002f6c:	e740      	b.n	8002df0 <runFWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <runFWTask+0x20c>)
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <runFWTask+0x1ec>)
 8002f74:	491f      	ldr	r1, [pc, #124]	; (8002ff4 <runFWTask+0x20c>)
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <runFWTask+0x20c>)
 8002f80:	785b      	ldrb	r3, [r3, #1]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <runFWTask+0x20c>)
 8002f86:	7892      	ldrb	r2, [r2, #2]
 8002f88:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f8c:	fb01 f202 	mul.w	r2, r1, r2
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <runFWTask+0x20c>)
 8002f96:	705a      	strb	r2, [r3, #1]
 8002f98:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <runFWTask+0x210>)
 8002f9a:	210f      	movs	r1, #15
 8002f9c:	480f      	ldr	r0, [pc, #60]	; (8002fdc <runFWTask+0x1f4>)
 8002f9e:	f009 fbc9 	bl	800c734 <sniprintf>
 8002fa2:	e725      	b.n	8002df0 <runFWTask+0x8>
            break;
 8002fa4:	bf00      	nop
    if (curTask != TASK_MOVE_FOREWARD)
 8002fa6:	e723      	b.n	8002df0 <runFWTask+0x8>
 8002fa8:	20000134 	.word	0x20000134
 8002fac:	200003f0 	.word	0x200003f0
 8002fb0:	200003f8 	.word	0x200003f8
 8002fb4:	200003fe 	.word	0x200003fe
 8002fb8:	2000042c 	.word	0x2000042c
 8002fbc:	20000418 	.word	0x20000418
 8002fc0:	20000440 	.word	0x20000440
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	200002e8 	.word	0x200002e8
 8002fcc:	20000135 	.word	0x20000135
 8002fd0:	20000468 	.word	0x20000468
 8002fd4:	200003dc 	.word	0x200003dc
 8002fd8:	0800d114 	.word	0x0800d114
 8002fdc:	200003e0 	.word	0x200003e0
 8002fe0:	0800d11c 	.word	0x0800d11c
 8002fe4:	20000330 	.word	0x20000330
 8002fe8:	20000404 	.word	0x20000404
 8002fec:	2000040c 	.word	0x2000040c
 8002ff0:	20000136 	.word	0x20000136
 8002ff4:	200003a8 	.word	0x200003a8
 8002ff8:	0800d124 	.word	0x0800d124

08002ffc <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 8003004:	4b6d      	ldr	r3, [pc, #436]	; (80031bc <runBWTask+0x1c0>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d004      	beq.n	8003016 <runBWTask+0x1a>
      osDelay(1000);
 800300c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003010:	f006 fb60 	bl	80096d4 <osDelay>
 8003014:	e7f6      	b.n	8003004 <runBWTask+0x8>
    else
    {
      if (manualMode)
 8003016:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <runBWTask+0x1c4>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d061      	beq.n	80030e2 <runBWTask+0xe6>
      {
        angleNow = 0;
 800301e:	4b69      	ldr	r3, [pc, #420]	; (80031c4 <runBWTask+0x1c8>)
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 8003026:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <runBWTask+0x1cc>)
 8003028:	2200      	movs	r2, #0
 800302a:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 800302c:	4867      	ldr	r0, [pc, #412]	; (80031cc <runBWTask+0x1d0>)
 800302e:	f7ff f8c2 	bl	80021b6 <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 8003032:	4867      	ldr	r0, [pc, #412]	; (80031d0 <runBWTask+0x1d4>)
 8003034:	f7ff f8bf 	bl	80021b6 <PIDConfigReset>
        PIDConfigReset(&pidFast);
 8003038:	4866      	ldr	r0, [pc, #408]	; (80031d4 <runBWTask+0x1d8>)
 800303a:	f7ff f8bc 	bl	80021b6 <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 800303e:	2201      	movs	r2, #1
 8003040:	2104      	movs	r1, #4
 8003042:	4865      	ldr	r0, [pc, #404]	; (80031d8 <runBWTask+0x1dc>)
 8003044:	f001 ffe8 	bl	8005018 <HAL_GPIO_WritePin>
 8003048:	2200      	movs	r2, #0
 800304a:	2108      	movs	r1, #8
 800304c:	4862      	ldr	r0, [pc, #392]	; (80031d8 <runBWTask+0x1dc>)
 800304e:	f001 ffe3 	bl	8005018 <HAL_GPIO_WritePin>
 8003052:	2201      	movs	r2, #1
 8003054:	2120      	movs	r1, #32
 8003056:	4860      	ldr	r0, [pc, #384]	; (80031d8 <runBWTask+0x1dc>)
 8003058:	f001 ffde 	bl	8005018 <HAL_GPIO_WritePin>
 800305c:	2200      	movs	r2, #0
 800305e:	2110      	movs	r1, #16
 8003060:	485d      	ldr	r0, [pc, #372]	; (80031d8 <runBWTask+0x1dc>)
 8003062:	f001 ffd9 	bl	8005018 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <runBWTask+0x1e0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	635a      	str	r2, [r3, #52]	; 0x34
 800306e:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <runBWTask+0x1e0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
 8003076:	4b51      	ldr	r3, [pc, #324]	; (80031bc <runBWTask+0x1c0>)
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <runBWTask+0x1e4>)
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	4b4f      	ldr	r3, [pc, #316]	; (80031bc <runBWTask+0x1c0>)
 8003080:	2209      	movs	r2, #9
 8003082:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8003084:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <runBWTask+0x1e8>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 800308a:	4b57      	ldr	r3, [pc, #348]	; (80031e8 <runBWTask+0x1ec>)
 800308c:	2264      	movs	r2, #100	; 0x64
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <runBWTask+0x1ec>)
 8003092:	2200      	movs	r2, #0
 8003094:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8003096:	4a55      	ldr	r2, [pc, #340]	; (80031ec <runBWTask+0x1f0>)
 8003098:	210f      	movs	r1, #15
 800309a:	4855      	ldr	r0, [pc, #340]	; (80031f0 <runBWTask+0x1f4>)
 800309c:	f009 fb4a 	bl	800c734 <sniprintf>
 80030a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a4:	2206      	movs	r2, #6
 80030a6:	4953      	ldr	r1, [pc, #332]	; (80031f4 <runBWTask+0x1f8>)
 80030a8:	4853      	ldr	r0, [pc, #332]	; (80031f8 <runBWTask+0x1fc>)
 80030aa:	f005 f9c8 	bl	800843e <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 80030ae:	f001 fc73 	bl	8004998 <HAL_GetTick>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4a51      	ldr	r2, [pc, #324]	; (80031fc <runBWTask+0x200>)
 80030b6:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <runBWTask+0x1c4>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d07b      	beq.n	80031b8 <runBWTask+0x1bc>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 80030c0:	f001 fc6a 	bl	8004998 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b4d      	ldr	r3, [pc, #308]	; (80031fc <runBWTask+0x200>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d9f3      	bls.n	80030b8 <runBWTask+0xbc>
          {
            StraightLineMove(SPEED_MODE_T);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7ff f8a9 	bl	8002228 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 80030d6:	f001 fc5f 	bl	8004998 <HAL_GetTick>
 80030da:	4603      	mov	r3, r0
 80030dc:	4a47      	ldr	r2, [pc, #284]	; (80031fc <runBWTask+0x200>)
 80030de:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 80030e0:	e7ea      	b.n	80030b8 <runBWTask+0xbc>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <runBWTask+0x1ec>)
 80030e4:	885b      	ldrh	r3, [r3, #2]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <runBWTask+0x204>)
 80030f0:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 80030f4:	4b42      	ldr	r3, [pc, #264]	; (8003200 <runBWTask+0x204>)
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80030fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003106:	d802      	bhi.n	800310e <runBWTask+0x112>
          moveMode = SLOW;
 8003108:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <runBWTask+0x208>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]

        if (moveMode == SLOW)
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <runBWTask+0x208>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <runBWTask+0x126>
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_1);
 8003116:	2201      	movs	r2, #1
 8003118:	2100      	movs	r1, #0
 800311a:	4839      	ldr	r0, [pc, #228]	; (8003200 <runBWTask+0x204>)
 800311c:	f7ff fa3c 	bl	8002598 <RobotMoveDist>
 8003120:	e004      	b.n	800312c <runBWTask+0x130>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_2);
 8003122:	2202      	movs	r2, #2
 8003124:	2100      	movs	r1, #0
 8003126:	4836      	ldr	r0, [pc, #216]	; (8003200 <runBWTask+0x204>)
 8003128:	f7ff fa36 	bl	8002598 <RobotMoveDist>
          // OLED_ShowString(40, 40, (uint8_t *)"BW");
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <runBWTask+0x1e0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2200      	movs	r2, #0
 8003132:	635a      	str	r2, [r3, #52]	; 0x34
 8003134:	4b29      	ldr	r3, [pc, #164]	; (80031dc <runBWTask+0x1e0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2200      	movs	r2, #0
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
 800313c:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <runBWTask+0x1c0>)
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <runBWTask+0x1e4>)
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <runBWTask+0x1c0>)
 8003146:	2209      	movs	r2, #9
 8003148:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <runBWTask+0x1e8>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <runBWTask+0x20c>)
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <runBWTask+0x20c>)
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	429a      	cmp	r2, r3
 800315a:	d112      	bne.n	8003182 <runBWTask+0x186>
        {
          __CLEAR_CURCMD(curCmd);
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <runBWTask+0x1ec>)
 800315e:	2264      	movs	r2, #100	; 0x64
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <runBWTask+0x1ec>)
 8003164:	2200      	movs	r2, #0
 8003166:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <runBWTask+0x1f0>)
 800316a:	210f      	movs	r1, #15
 800316c:	4820      	ldr	r0, [pc, #128]	; (80031f0 <runBWTask+0x1f4>)
 800316e:	f009 fae1 	bl	800c734 <sniprintf>
 8003172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003176:	2206      	movs	r2, #6
 8003178:	491e      	ldr	r1, [pc, #120]	; (80031f4 <runBWTask+0x1f8>)
 800317a:	481f      	ldr	r0, [pc, #124]	; (80031f8 <runBWTask+0x1fc>)
 800317c:	f005 f95f 	bl	800843e <HAL_UART_Transmit>
 8003180:	e740      	b.n	8003004 <runBWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003182:	4b21      	ldr	r3, [pc, #132]	; (8003208 <runBWTask+0x20c>)
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	4a18      	ldr	r2, [pc, #96]	; (80031e8 <runBWTask+0x1ec>)
 8003188:	491f      	ldr	r1, [pc, #124]	; (8003208 <runBWTask+0x20c>)
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <runBWTask+0x20c>)
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	3301      	adds	r3, #1
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <runBWTask+0x20c>)
 800319a:	7892      	ldrb	r2, [r2, #2]
 800319c:	fb93 f1f2 	sdiv	r1, r3, r2
 80031a0:	fb01 f202 	mul.w	r2, r1, r2
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <runBWTask+0x20c>)
 80031aa:	705a      	strb	r2, [r3, #1]
 80031ac:	4a17      	ldr	r2, [pc, #92]	; (800320c <runBWTask+0x210>)
 80031ae:	210f      	movs	r1, #15
 80031b0:	480f      	ldr	r0, [pc, #60]	; (80031f0 <runBWTask+0x1f4>)
 80031b2:	f009 fabf 	bl	800c734 <sniprintf>
 80031b6:	e725      	b.n	8003004 <runBWTask+0x8>
            break;
 80031b8:	bf00      	nop
    if (curTask != TASK_MOVE_BACKWARD)
 80031ba:	e723      	b.n	8003004 <runBWTask+0x8>
 80031bc:	20000134 	.word	0x20000134
 80031c0:	200003f0 	.word	0x200003f0
 80031c4:	200003f8 	.word	0x200003f8
 80031c8:	200003fe 	.word	0x200003fe
 80031cc:	2000042c 	.word	0x2000042c
 80031d0:	20000418 	.word	0x20000418
 80031d4:	20000440 	.word	0x20000440
 80031d8:	40020000 	.word	0x40020000
 80031dc:	200002e8 	.word	0x200002e8
 80031e0:	20000135 	.word	0x20000135
 80031e4:	20000468 	.word	0x20000468
 80031e8:	200003dc 	.word	0x200003dc
 80031ec:	0800d114 	.word	0x0800d114
 80031f0:	200003e0 	.word	0x200003e0
 80031f4:	0800d11c 	.word	0x0800d11c
 80031f8:	20000330 	.word	0x20000330
 80031fc:	20000404 	.word	0x20000404
 8003200:	2000040c 	.word	0x2000040c
 8003204:	20000136 	.word	0x20000136
 8003208:	200003a8 	.word	0x200003a8
 800320c:	0800d124 	.word	0x0800d124

08003210 <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */

  // for OLED refresh when debugging
  osDelay(100);
 8003218:	2064      	movs	r0, #100	; 0x64
 800321a:	f006 fa5b 	bl	80096d4 <osDelay>

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 800321e:	4b9d      	ldr	r3, [pc, #628]	; (8003494 <runFLTask+0x284>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d003      	beq.n	800322e <runFLTask+0x1e>
      osDelay(100);
 8003226:	2064      	movs	r0, #100	; 0x64
 8003228:	f006 fa54 	bl	80096d4 <osDelay>
 800322c:	e7f7      	b.n	800321e <runFLTask+0xe>
    else
    {

      switch (curCmd.val)
 800322e:	4b9a      	ldr	r3, [pc, #616]	; (8003498 <runFLTask+0x288>)
 8003230:	885b      	ldrh	r3, [r3, #2]
 8003232:	2b14      	cmp	r3, #20
 8003234:	f000 8081 	beq.w	800333a <runFLTask+0x12a>
 8003238:	2b1e      	cmp	r3, #30
 800323a:	f040 8107 	bne.w	800344c <runFLTask+0x23c>
      {
      case 30: // FL30 (4x2)
        __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 800323e:	4b97      	ldr	r3, [pc, #604]	; (800349c <runFLTask+0x28c>)
 8003240:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003244:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80034a0 <runFLTask+0x290>
 8003248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	dd01      	ble.n	8003256 <runFLTask+0x46>
 8003252:	23e1      	movs	r3, #225	; 0xe1
 8003254:	e012      	b.n	800327c <runFLTask+0x6c>
 8003256:	4b91      	ldr	r3, [pc, #580]	; (800349c <runFLTask+0x28c>)
 8003258:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800325c:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80034a4 <runFLTask+0x294>
 8003260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003268:	d501      	bpl.n	800326e <runFLTask+0x5e>
 800326a:	2355      	movs	r3, #85	; 0x55
 800326c:	e006      	b.n	800327c <runFLTask+0x6c>
 800326e:	4b8b      	ldr	r3, [pc, #556]	; (800349c <runFLTask+0x28c>)
 8003270:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003278:	ee17 3a90 	vmov	r3, s15
 800327c:	4a8a      	ldr	r2, [pc, #552]	; (80034a8 <runFLTask+0x298>)
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
 8003282:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003286:	f001 fb93 	bl	80049b0 <HAL_Delay>
 800328a:	4b84      	ldr	r3, [pc, #528]	; (800349c <runFLTask+0x28c>)
 800328c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003290:	4a86      	ldr	r2, [pc, #536]	; (80034ac <runFLTask+0x29c>)
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b81      	ldr	r3, [pc, #516]	; (800349c <runFLTask+0x28c>)
 8003296:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800329a:	2b00      	cmp	r3, #0
 800329c:	bf0c      	ite	eq
 800329e:	2301      	moveq	r3, #1
 80032a0:	2300      	movne	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	2104      	movs	r1, #4
 80032a8:	4881      	ldr	r0, [pc, #516]	; (80034b0 <runFLTask+0x2a0>)
 80032aa:	f001 feb5 	bl	8005018 <HAL_GPIO_WritePin>
 80032ae:	4b7b      	ldr	r3, [pc, #492]	; (800349c <runFLTask+0x28c>)
 80032b0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	2108      	movs	r1, #8
 80032c2:	487b      	ldr	r0, [pc, #492]	; (80034b0 <runFLTask+0x2a0>)
 80032c4:	f001 fea8 	bl	8005018 <HAL_GPIO_WritePin>
 80032c8:	4b74      	ldr	r3, [pc, #464]	; (800349c <runFLTask+0x28c>)
 80032ca:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	2120      	movs	r1, #32
 80032dc:	4874      	ldr	r0, [pc, #464]	; (80034b0 <runFLTask+0x2a0>)
 80032de:	f001 fe9b 	bl	8005018 <HAL_GPIO_WritePin>
 80032e2:	4b6e      	ldr	r3, [pc, #440]	; (800349c <runFLTask+0x28c>)
 80032e4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	2110      	movs	r1, #16
 80032f6:	486e      	ldr	r0, [pc, #440]	; (80034b0 <runFLTask+0x2a0>)
 80032f8:	f001 fe8e 	bl	8005018 <HAL_GPIO_WritePin>
 80032fc:	4b67      	ldr	r3, [pc, #412]	; (800349c <runFLTask+0x28c>)
 80032fe:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 8003302:	4b6c      	ldr	r3, [pc, #432]	; (80034b4 <runFLTask+0x2a4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	635a      	str	r2, [r3, #52]	; 0x34
 8003308:	4b64      	ldr	r3, [pc, #400]	; (800349c <runFLTask+0x28c>)
 800330a:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 800330e:	4b69      	ldr	r3, [pc, #420]	; (80034b4 <runFLTask+0x2a4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
        // OLED_ShowString(0, 50, (uint8_t *)"FL30");
        RobotTurn(&targetAngle);
 8003314:	4865      	ldr	r0, [pc, #404]	; (80034ac <runFLTask+0x29c>)
 8003316:	f7ff fc2f 	bl	8002b78 <RobotTurn>
        osDelay(10);
 800331a:	200a      	movs	r0, #10
 800331c:	f006 f9da 	bl	80096d4 <osDelay>
        targetDist = 4;
 8003320:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <runFLTask+0x2a8>)
 8003322:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003326:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003328:	2200      	movs	r2, #0
 800332a:	2101      	movs	r1, #1
 800332c:	4862      	ldr	r0, [pc, #392]	; (80034b8 <runFLTask+0x2a8>)
 800332e:	f7ff f933 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003332:	200a      	movs	r0, #10
 8003334:	f006 f9ce 	bl	80096d4 <osDelay>
        break;
 8003338:	e126      	b.n	8003588 <runFLTask+0x378>
      case 20: // FL20 (outdoor 3x1)
        targetDist = 4;
 800333a:	4b5f      	ldr	r3, [pc, #380]	; (80034b8 <runFLTask+0x2a8>)
 800333c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003340:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003342:	2200      	movs	r2, #0
 8003344:	2101      	movs	r1, #1
 8003346:	485c      	ldr	r0, [pc, #368]	; (80034b8 <runFLTask+0x2a8>)
 8003348:	f7ff f926 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 800334c:	200a      	movs	r0, #10
 800334e:	f006 f9c1 	bl	80096d4 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 8003352:	4b52      	ldr	r3, [pc, #328]	; (800349c <runFLTask+0x28c>)
 8003354:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003358:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80034a0 <runFLTask+0x290>
 800335c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	dd01      	ble.n	800336a <runFLTask+0x15a>
 8003366:	23e1      	movs	r3, #225	; 0xe1
 8003368:	e012      	b.n	8003390 <runFLTask+0x180>
 800336a:	4b4c      	ldr	r3, [pc, #304]	; (800349c <runFLTask+0x28c>)
 800336c:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003370:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80034a4 <runFLTask+0x294>
 8003374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d501      	bpl.n	8003382 <runFLTask+0x172>
 800337e:	2355      	movs	r3, #85	; 0x55
 8003380:	e006      	b.n	8003390 <runFLTask+0x180>
 8003382:	4b46      	ldr	r3, [pc, #280]	; (800349c <runFLTask+0x28c>)
 8003384:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800338c:	ee17 3a90 	vmov	r3, s15
 8003390:	4a45      	ldr	r2, [pc, #276]	; (80034a8 <runFLTask+0x298>)
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800339a:	f001 fb09 	bl	80049b0 <HAL_Delay>
 800339e:	4b3f      	ldr	r3, [pc, #252]	; (800349c <runFLTask+0x28c>)
 80033a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80033a4:	4a41      	ldr	r2, [pc, #260]	; (80034ac <runFLTask+0x29c>)
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b3c      	ldr	r3, [pc, #240]	; (800349c <runFLTask+0x28c>)
 80033aa:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	2104      	movs	r1, #4
 80033bc:	483c      	ldr	r0, [pc, #240]	; (80034b0 <runFLTask+0x2a0>)
 80033be:	f001 fe2b 	bl	8005018 <HAL_GPIO_WritePin>
 80033c2:	4b36      	ldr	r3, [pc, #216]	; (800349c <runFLTask+0x28c>)
 80033c4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	2108      	movs	r1, #8
 80033d6:	4836      	ldr	r0, [pc, #216]	; (80034b0 <runFLTask+0x2a0>)
 80033d8:	f001 fe1e 	bl	8005018 <HAL_GPIO_WritePin>
 80033dc:	4b2f      	ldr	r3, [pc, #188]	; (800349c <runFLTask+0x28c>)
 80033de:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	2120      	movs	r1, #32
 80033f0:	482f      	ldr	r0, [pc, #188]	; (80034b0 <runFLTask+0x2a0>)
 80033f2:	f001 fe11 	bl	8005018 <HAL_GPIO_WritePin>
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <runFLTask+0x28c>)
 80033f8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	2110      	movs	r1, #16
 800340a:	4829      	ldr	r0, [pc, #164]	; (80034b0 <runFLTask+0x2a0>)
 800340c:	f001 fe04 	bl	8005018 <HAL_GPIO_WritePin>
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <runFLTask+0x28c>)
 8003412:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8003416:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <runFLTask+0x2a4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	635a      	str	r2, [r3, #52]	; 0x34
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <runFLTask+0x28c>)
 800341e:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 8003422:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <runFLTask+0x2a4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003428:	4820      	ldr	r0, [pc, #128]	; (80034ac <runFLTask+0x29c>)
 800342a:	f7ff fba5 	bl	8002b78 <RobotTurn>
        osDelay(10);
 800342e:	200a      	movs	r0, #10
 8003430:	f006 f950 	bl	80096d4 <osDelay>
        targetDist = 7;
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <runFLTask+0x2a8>)
 8003436:	4a21      	ldr	r2, [pc, #132]	; (80034bc <runFLTask+0x2ac>)
 8003438:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800343a:	2200      	movs	r2, #0
 800343c:	2101      	movs	r1, #1
 800343e:	481e      	ldr	r0, [pc, #120]	; (80034b8 <runFLTask+0x2a8>)
 8003440:	f7ff f8aa 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003444:	200a      	movs	r0, #10
 8003446:	f006 f945 	bl	80096d4 <osDelay>
        break;
 800344a:	e09d      	b.n	8003588 <runFLTask+0x378>
      default: // FL00 (indoor 3x1)
        targetDist = 4;
 800344c:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <runFLTask+0x2a8>)
 800344e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003452:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003454:	2200      	movs	r2, #0
 8003456:	2101      	movs	r1, #1
 8003458:	4817      	ldr	r0, [pc, #92]	; (80034b8 <runFLTask+0x2a8>)
 800345a:	f7ff f89d 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 800345e:	200a      	movs	r0, #10
 8003460:	f006 f938 	bl	80096d4 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <runFLTask+0x28c>)
 8003466:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800346a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80034a0 <runFLTask+0x290>
 800346e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	dd01      	ble.n	800347c <runFLTask+0x26c>
 8003478:	23e1      	movs	r3, #225	; 0xe1
 800347a:	e028      	b.n	80034ce <runFLTask+0x2be>
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <runFLTask+0x28c>)
 800347e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003482:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80034a4 <runFLTask+0x294>
 8003486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348e:	d517      	bpl.n	80034c0 <runFLTask+0x2b0>
 8003490:	2355      	movs	r3, #85	; 0x55
 8003492:	e01c      	b.n	80034ce <runFLTask+0x2be>
 8003494:	20000134 	.word	0x20000134
 8003498:	200003dc 	.word	0x200003dc
 800349c:	20000004 	.word	0x20000004
 80034a0:	43610000 	.word	0x43610000
 80034a4:	42aa0000 	.word	0x42aa0000
 80034a8:	20000210 	.word	0x20000210
 80034ac:	200003f4 	.word	0x200003f4
 80034b0:	40020000 	.word	0x40020000
 80034b4:	200002e8 	.word	0x200002e8
 80034b8:	2000040c 	.word	0x2000040c
 80034bc:	40e00000 	.word	0x40e00000
 80034c0:	4b32      	ldr	r3, [pc, #200]	; (800358c <runFLTask+0x37c>)
 80034c2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80034c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ca:	ee17 3a90 	vmov	r3, s15
 80034ce:	4a30      	ldr	r2, [pc, #192]	; (8003590 <runFLTask+0x380>)
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	6413      	str	r3, [r2, #64]	; 0x40
 80034d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80034d8:	f001 fa6a 	bl	80049b0 <HAL_Delay>
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <runFLTask+0x37c>)
 80034de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034e0:	4a2c      	ldr	r2, [pc, #176]	; (8003594 <runFLTask+0x384>)
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b29      	ldr	r3, [pc, #164]	; (800358c <runFLTask+0x37c>)
 80034e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	2104      	movs	r1, #4
 80034f8:	4827      	ldr	r0, [pc, #156]	; (8003598 <runFLTask+0x388>)
 80034fa:	f001 fd8d 	bl	8005018 <HAL_GPIO_WritePin>
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <runFLTask+0x37c>)
 8003500:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	2108      	movs	r1, #8
 8003512:	4821      	ldr	r0, [pc, #132]	; (8003598 <runFLTask+0x388>)
 8003514:	f001 fd80 	bl	8005018 <HAL_GPIO_WritePin>
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <runFLTask+0x37c>)
 800351a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	2120      	movs	r1, #32
 800352c:	481a      	ldr	r0, [pc, #104]	; (8003598 <runFLTask+0x388>)
 800352e:	f001 fd73 	bl	8005018 <HAL_GPIO_WritePin>
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <runFLTask+0x37c>)
 8003534:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	2110      	movs	r1, #16
 8003546:	4814      	ldr	r0, [pc, #80]	; (8003598 <runFLTask+0x388>)
 8003548:	f001 fd66 	bl	8005018 <HAL_GPIO_WritePin>
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <runFLTask+0x37c>)
 800354e:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <runFLTask+0x38c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	635a      	str	r2, [r3, #52]	; 0x34
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <runFLTask+0x37c>)
 800355a:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <runFLTask+0x38c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003564:	480b      	ldr	r0, [pc, #44]	; (8003594 <runFLTask+0x384>)
 8003566:	f7ff fb07 	bl	8002b78 <RobotTurn>
        osDelay(10);
 800356a:	200a      	movs	r0, #10
 800356c:	f006 f8b2 	bl	80096d4 <osDelay>
        targetDist = 7;
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <runFLTask+0x390>)
 8003572:	4a0c      	ldr	r2, [pc, #48]	; (80035a4 <runFLTask+0x394>)
 8003574:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003576:	2200      	movs	r2, #0
 8003578:	2101      	movs	r1, #1
 800357a:	4809      	ldr	r0, [pc, #36]	; (80035a0 <runFLTask+0x390>)
 800357c:	f7ff f80c 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003580:	200a      	movs	r0, #10
 8003582:	f006 f8a7 	bl	80096d4 <osDelay>
        break;
 8003586:	bf00      	nop
    if (curTask != TASK_FL)
 8003588:	e649      	b.n	800321e <runFLTask+0xe>
 800358a:	bf00      	nop
 800358c:	20000004 	.word	0x20000004
 8003590:	20000210 	.word	0x20000210
 8003594:	200003f4 	.word	0x200003f4
 8003598:	40020000 	.word	0x40020000
 800359c:	200002e8 	.word	0x200002e8
 80035a0:	2000040c 	.word	0x2000040c
 80035a4:	40e00000 	.word	0x40e00000

080035a8 <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 80035b0:	2001      	movs	r0, #1
 80035b2:	f006 f88f 	bl	80096d4 <osDelay>
 80035b6:	e7fb      	b.n	80035b0 <runFRTask+0x8>

080035b8 <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 80035c0:	4b9d      	ldr	r3, [pc, #628]	; (8003838 <runBLTask+0x280>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d003      	beq.n	80035d0 <runBLTask+0x18>
      osDelay(100);
 80035c8:	2064      	movs	r0, #100	; 0x64
 80035ca:	f006 f883 	bl	80096d4 <osDelay>
 80035ce:	e7f7      	b.n	80035c0 <runBLTask+0x8>
    else
    {

      switch (curCmd.val)
 80035d0:	4b9a      	ldr	r3, [pc, #616]	; (800383c <runBLTask+0x284>)
 80035d2:	885b      	ldrh	r3, [r3, #2]
 80035d4:	2b14      	cmp	r3, #20
 80035d6:	f000 8081 	beq.w	80036dc <runBLTask+0x124>
 80035da:	2b1e      	cmp	r3, #30
 80035dc:	f040 8107 	bne.w	80037ee <runBLTask+0x236>
      {
      case 30: // BL30 (4x2)
        __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 80035e0:	4b97      	ldr	r3, [pc, #604]	; (8003840 <runBLTask+0x288>)
 80035e2:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80035e6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8003844 <runBLTask+0x28c>
 80035ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	dd01      	ble.n	80035f8 <runBLTask+0x40>
 80035f4:	23e1      	movs	r3, #225	; 0xe1
 80035f6:	e012      	b.n	800361e <runBLTask+0x66>
 80035f8:	4b91      	ldr	r3, [pc, #580]	; (8003840 <runBLTask+0x288>)
 80035fa:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80035fe:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003848 <runBLTask+0x290>
 8003602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360a:	d501      	bpl.n	8003610 <runBLTask+0x58>
 800360c:	2355      	movs	r3, #85	; 0x55
 800360e:	e006      	b.n	800361e <runBLTask+0x66>
 8003610:	4b8b      	ldr	r3, [pc, #556]	; (8003840 <runBLTask+0x288>)
 8003612:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8003616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361a:	ee17 3a90 	vmov	r3, s15
 800361e:	4a8b      	ldr	r2, [pc, #556]	; (800384c <runBLTask+0x294>)
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	6413      	str	r3, [r2, #64]	; 0x40
 8003624:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003628:	f001 f9c2 	bl	80049b0 <HAL_Delay>
 800362c:	4b84      	ldr	r3, [pc, #528]	; (8003840 <runBLTask+0x288>)
 800362e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003632:	4a87      	ldr	r2, [pc, #540]	; (8003850 <runBLTask+0x298>)
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b82      	ldr	r3, [pc, #520]	; (8003840 <runBLTask+0x288>)
 8003638:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	2104      	movs	r1, #4
 800364a:	4882      	ldr	r0, [pc, #520]	; (8003854 <runBLTask+0x29c>)
 800364c:	f001 fce4 	bl	8005018 <HAL_GPIO_WritePin>
 8003650:	4b7b      	ldr	r3, [pc, #492]	; (8003840 <runBLTask+0x288>)
 8003652:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	2108      	movs	r1, #8
 8003664:	487b      	ldr	r0, [pc, #492]	; (8003854 <runBLTask+0x29c>)
 8003666:	f001 fcd7 	bl	8005018 <HAL_GPIO_WritePin>
 800366a:	4b75      	ldr	r3, [pc, #468]	; (8003840 <runBLTask+0x288>)
 800366c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	2120      	movs	r1, #32
 800367e:	4875      	ldr	r0, [pc, #468]	; (8003854 <runBLTask+0x29c>)
 8003680:	f001 fcca 	bl	8005018 <HAL_GPIO_WritePin>
 8003684:	4b6e      	ldr	r3, [pc, #440]	; (8003840 <runBLTask+0x288>)
 8003686:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	2110      	movs	r1, #16
 8003698:	486e      	ldr	r0, [pc, #440]	; (8003854 <runBLTask+0x29c>)
 800369a:	f001 fcbd 	bl	8005018 <HAL_GPIO_WritePin>
 800369e:	4b68      	ldr	r3, [pc, #416]	; (8003840 <runBLTask+0x288>)
 80036a0:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 80036a4:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <runBLTask+0x2a0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <runBLTask+0x288>)
 80036ac:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 80036b0:	4b69      	ldr	r3, [pc, #420]	; (8003858 <runBLTask+0x2a0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80036b6:	4866      	ldr	r0, [pc, #408]	; (8003850 <runBLTask+0x298>)
 80036b8:	f7ff fa5e 	bl	8002b78 <RobotTurn>
        osDelay(10);
 80036bc:	200a      	movs	r0, #10
 80036be:	f006 f809 	bl	80096d4 <osDelay>
        targetDist = 4;
 80036c2:	4b66      	ldr	r3, [pc, #408]	; (800385c <runBLTask+0x2a4>)
 80036c4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80036c8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2100      	movs	r1, #0
 80036ce:	4863      	ldr	r0, [pc, #396]	; (800385c <runBLTask+0x2a4>)
 80036d0:	f7fe ff62 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 80036d4:	200a      	movs	r0, #10
 80036d6:	f005 fffd 	bl	80096d4 <osDelay>
        break;
 80036da:	e128      	b.n	800392e <runBLTask+0x376>
      case 20: // BL20 (outdoor 3x1)
        targetDist = 4;
 80036dc:	4b5f      	ldr	r3, [pc, #380]	; (800385c <runBLTask+0x2a4>)
 80036de:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80036e2:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	485c      	ldr	r0, [pc, #368]	; (800385c <runBLTask+0x2a4>)
 80036ea:	f7fe ff55 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 80036ee:	200a      	movs	r0, #10
 80036f0:	f005 fff0 	bl	80096d4 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 80036f4:	4b52      	ldr	r3, [pc, #328]	; (8003840 <runBLTask+0x288>)
 80036f6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80036fa:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003844 <runBLTask+0x28c>
 80036fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003706:	dd01      	ble.n	800370c <runBLTask+0x154>
 8003708:	23e1      	movs	r3, #225	; 0xe1
 800370a:	e012      	b.n	8003732 <runBLTask+0x17a>
 800370c:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <runBLTask+0x288>)
 800370e:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003712:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003848 <runBLTask+0x290>
 8003716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	d501      	bpl.n	8003724 <runBLTask+0x16c>
 8003720:	2355      	movs	r3, #85	; 0x55
 8003722:	e006      	b.n	8003732 <runBLTask+0x17a>
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <runBLTask+0x288>)
 8003726:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800372a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800372e:	ee17 3a90 	vmov	r3, s15
 8003732:	4a46      	ldr	r2, [pc, #280]	; (800384c <runBLTask+0x294>)
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	6413      	str	r3, [r2, #64]	; 0x40
 8003738:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800373c:	f001 f938 	bl	80049b0 <HAL_Delay>
 8003740:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <runBLTask+0x288>)
 8003742:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003746:	4a42      	ldr	r2, [pc, #264]	; (8003850 <runBLTask+0x298>)
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <runBLTask+0x288>)
 800374c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	2104      	movs	r1, #4
 800375e:	483d      	ldr	r0, [pc, #244]	; (8003854 <runBLTask+0x29c>)
 8003760:	f001 fc5a 	bl	8005018 <HAL_GPIO_WritePin>
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <runBLTask+0x288>)
 8003766:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	2108      	movs	r1, #8
 8003778:	4836      	ldr	r0, [pc, #216]	; (8003854 <runBLTask+0x29c>)
 800377a:	f001 fc4d 	bl	8005018 <HAL_GPIO_WritePin>
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <runBLTask+0x288>)
 8003780:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	2120      	movs	r1, #32
 8003792:	4830      	ldr	r0, [pc, #192]	; (8003854 <runBLTask+0x29c>)
 8003794:	f001 fc40 	bl	8005018 <HAL_GPIO_WritePin>
 8003798:	4b29      	ldr	r3, [pc, #164]	; (8003840 <runBLTask+0x288>)
 800379a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf14      	ite	ne
 80037a2:	2301      	movne	r3, #1
 80037a4:	2300      	moveq	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	2110      	movs	r1, #16
 80037ac:	4829      	ldr	r0, [pc, #164]	; (8003854 <runBLTask+0x29c>)
 80037ae:	f001 fc33 	bl	8005018 <HAL_GPIO_WritePin>
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <runBLTask+0x288>)
 80037b4:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80037b8:	4b27      	ldr	r3, [pc, #156]	; (8003858 <runBLTask+0x2a0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <runBLTask+0x288>)
 80037c0:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80037c4:	4b24      	ldr	r3, [pc, #144]	; (8003858 <runBLTask+0x2a0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80037ca:	4821      	ldr	r0, [pc, #132]	; (8003850 <runBLTask+0x298>)
 80037cc:	f7ff f9d4 	bl	8002b78 <RobotTurn>
        osDelay(10);
 80037d0:	200a      	movs	r0, #10
 80037d2:	f005 ff7f 	bl	80096d4 <osDelay>
        targetDist = 7;
 80037d6:	4b21      	ldr	r3, [pc, #132]	; (800385c <runBLTask+0x2a4>)
 80037d8:	4a21      	ldr	r2, [pc, #132]	; (8003860 <runBLTask+0x2a8>)
 80037da:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80037dc:	2200      	movs	r2, #0
 80037de:	2100      	movs	r1, #0
 80037e0:	481e      	ldr	r0, [pc, #120]	; (800385c <runBLTask+0x2a4>)
 80037e2:	f7fe fed9 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 80037e6:	200a      	movs	r0, #10
 80037e8:	f005 ff74 	bl	80096d4 <osDelay>
        break;
 80037ec:	e09f      	b.n	800392e <runBLTask+0x376>
      default: // BL00 (indoor 3x1)
        targetDist = 4;
 80037ee:	4b1b      	ldr	r3, [pc, #108]	; (800385c <runBLTask+0x2a4>)
 80037f0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80037f4:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2100      	movs	r1, #0
 80037fa:	4818      	ldr	r0, [pc, #96]	; (800385c <runBLTask+0x2a4>)
 80037fc:	f7fe fecc 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003800:	200a      	movs	r0, #10
 8003802:	f005 ff67 	bl	80096d4 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 8003806:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <runBLTask+0x288>)
 8003808:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800380c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003844 <runBLTask+0x28c>
 8003810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003818:	dd01      	ble.n	800381e <runBLTask+0x266>
 800381a:	23e1      	movs	r3, #225	; 0xe1
 800381c:	e029      	b.n	8003872 <runBLTask+0x2ba>
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <runBLTask+0x288>)
 8003820:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8003824:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003848 <runBLTask+0x290>
 8003828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	d518      	bpl.n	8003864 <runBLTask+0x2ac>
 8003832:	2355      	movs	r3, #85	; 0x55
 8003834:	e01d      	b.n	8003872 <runBLTask+0x2ba>
 8003836:	bf00      	nop
 8003838:	20000134 	.word	0x20000134
 800383c:	200003dc 	.word	0x200003dc
 8003840:	20000004 	.word	0x20000004
 8003844:	43610000 	.word	0x43610000
 8003848:	42aa0000 	.word	0x42aa0000
 800384c:	20000210 	.word	0x20000210
 8003850:	200003f4 	.word	0x200003f4
 8003854:	40020000 	.word	0x40020000
 8003858:	200002e8 	.word	0x200002e8
 800385c:	2000040c 	.word	0x2000040c
 8003860:	40e00000 	.word	0x40e00000
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <runBLTask+0x378>)
 8003866:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800386a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800386e:	ee17 3a90 	vmov	r3, s15
 8003872:	4a30      	ldr	r2, [pc, #192]	; (8003934 <runBLTask+0x37c>)
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	6413      	str	r3, [r2, #64]	; 0x40
 8003878:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800387c:	f001 f898 	bl	80049b0 <HAL_Delay>
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <runBLTask+0x378>)
 8003882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003886:	4a2c      	ldr	r2, [pc, #176]	; (8003938 <runBLTask+0x380>)
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <runBLTask+0x378>)
 800388c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	2104      	movs	r1, #4
 800389e:	4827      	ldr	r0, [pc, #156]	; (800393c <runBLTask+0x384>)
 80038a0:	f001 fbba 	bl	8005018 <HAL_GPIO_WritePin>
 80038a4:	4b22      	ldr	r3, [pc, #136]	; (8003930 <runBLTask+0x378>)
 80038a6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bf14      	ite	ne
 80038ae:	2301      	movne	r3, #1
 80038b0:	2300      	moveq	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	2108      	movs	r1, #8
 80038b8:	4820      	ldr	r0, [pc, #128]	; (800393c <runBLTask+0x384>)
 80038ba:	f001 fbad 	bl	8005018 <HAL_GPIO_WritePin>
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <runBLTask+0x378>)
 80038c0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	2120      	movs	r1, #32
 80038d2:	481a      	ldr	r0, [pc, #104]	; (800393c <runBLTask+0x384>)
 80038d4:	f001 fba0 	bl	8005018 <HAL_GPIO_WritePin>
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <runBLTask+0x378>)
 80038da:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	2110      	movs	r1, #16
 80038ec:	4813      	ldr	r0, [pc, #76]	; (800393c <runBLTask+0x384>)
 80038ee:	f001 fb93 	bl	8005018 <HAL_GPIO_WritePin>
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <runBLTask+0x378>)
 80038f4:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <runBLTask+0x388>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	635a      	str	r2, [r3, #52]	; 0x34
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <runBLTask+0x378>)
 8003900:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <runBLTask+0x388>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 800390a:	480b      	ldr	r0, [pc, #44]	; (8003938 <runBLTask+0x380>)
 800390c:	f7ff f934 	bl	8002b78 <RobotTurn>
        osDelay(10);
 8003910:	200a      	movs	r0, #10
 8003912:	f005 fedf 	bl	80096d4 <osDelay>
        targetDist = 7;
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <runBLTask+0x38c>)
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <runBLTask+0x390>)
 800391a:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800391c:	2200      	movs	r2, #0
 800391e:	2100      	movs	r1, #0
 8003920:	4808      	ldr	r0, [pc, #32]	; (8003944 <runBLTask+0x38c>)
 8003922:	f7fe fe39 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003926:	200a      	movs	r0, #10
 8003928:	f005 fed4 	bl	80096d4 <osDelay>
        break;
 800392c:	bf00      	nop
    if (curTask != TASK_BL)
 800392e:	e647      	b.n	80035c0 <runBLTask+0x8>
 8003930:	20000004 	.word	0x20000004
 8003934:	20000210 	.word	0x20000210
 8003938:	200003f4 	.word	0x200003f4
 800393c:	40020000 	.word	0x40020000
 8003940:	200002e8 	.word	0x200002e8
 8003944:	2000040c 	.word	0x2000040c
 8003948:	40e00000 	.word	0x40e00000

0800394c <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 8003954:	4b9d      	ldr	r3, [pc, #628]	; (8003bcc <runBRTask+0x280>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b05      	cmp	r3, #5
 800395a:	d003      	beq.n	8003964 <runBRTask+0x18>
      osDelay(100);
 800395c:	2064      	movs	r0, #100	; 0x64
 800395e:	f005 feb9 	bl	80096d4 <osDelay>
 8003962:	e7f7      	b.n	8003954 <runBRTask+0x8>
    else
    {

      switch (curCmd.val)
 8003964:	4b9a      	ldr	r3, [pc, #616]	; (8003bd0 <runBRTask+0x284>)
 8003966:	885b      	ldrh	r3, [r3, #2]
 8003968:	2b14      	cmp	r3, #20
 800396a:	f000 8081 	beq.w	8003a70 <runBRTask+0x124>
 800396e:	2b1e      	cmp	r3, #30
 8003970:	f040 8107 	bne.w	8003b82 <runBRTask+0x236>
      {
      case 30: // BR30 (4x2)
        __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 8003974:	4b97      	ldr	r3, [pc, #604]	; (8003bd4 <runBRTask+0x288>)
 8003976:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 800397a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8003bd8 <runBRTask+0x28c>
 800397e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003986:	dd01      	ble.n	800398c <runBRTask+0x40>
 8003988:	23e1      	movs	r3, #225	; 0xe1
 800398a:	e012      	b.n	80039b2 <runBRTask+0x66>
 800398c:	4b91      	ldr	r3, [pc, #580]	; (8003bd4 <runBRTask+0x288>)
 800398e:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8003992:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003bdc <runBRTask+0x290>
 8003996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399e:	d501      	bpl.n	80039a4 <runBRTask+0x58>
 80039a0:	2355      	movs	r3, #85	; 0x55
 80039a2:	e006      	b.n	80039b2 <runBRTask+0x66>
 80039a4:	4b8b      	ldr	r3, [pc, #556]	; (8003bd4 <runBRTask+0x288>)
 80039a6:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80039aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ae:	ee17 3a90 	vmov	r3, s15
 80039b2:	4a8b      	ldr	r2, [pc, #556]	; (8003be0 <runBRTask+0x294>)
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	6413      	str	r3, [r2, #64]	; 0x40
 80039b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039bc:	f000 fff8 	bl	80049b0 <HAL_Delay>
 80039c0:	4b84      	ldr	r3, [pc, #528]	; (8003bd4 <runBRTask+0x288>)
 80039c2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80039c6:	4a87      	ldr	r2, [pc, #540]	; (8003be4 <runBRTask+0x298>)
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b82      	ldr	r3, [pc, #520]	; (8003bd4 <runBRTask+0x288>)
 80039cc:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	2104      	movs	r1, #4
 80039de:	4882      	ldr	r0, [pc, #520]	; (8003be8 <runBRTask+0x29c>)
 80039e0:	f001 fb1a 	bl	8005018 <HAL_GPIO_WritePin>
 80039e4:	4b7b      	ldr	r3, [pc, #492]	; (8003bd4 <runBRTask+0x288>)
 80039e6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	2108      	movs	r1, #8
 80039f8:	487b      	ldr	r0, [pc, #492]	; (8003be8 <runBRTask+0x29c>)
 80039fa:	f001 fb0d 	bl	8005018 <HAL_GPIO_WritePin>
 80039fe:	4b75      	ldr	r3, [pc, #468]	; (8003bd4 <runBRTask+0x288>)
 8003a00:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2120      	movs	r1, #32
 8003a12:	4875      	ldr	r0, [pc, #468]	; (8003be8 <runBRTask+0x29c>)
 8003a14:	f001 fb00 	bl	8005018 <HAL_GPIO_WritePin>
 8003a18:	4b6e      	ldr	r3, [pc, #440]	; (8003bd4 <runBRTask+0x288>)
 8003a1a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2110      	movs	r1, #16
 8003a2c:	486e      	ldr	r0, [pc, #440]	; (8003be8 <runBRTask+0x29c>)
 8003a2e:	f001 faf3 	bl	8005018 <HAL_GPIO_WritePin>
 8003a32:	4b68      	ldr	r3, [pc, #416]	; (8003bd4 <runBRTask+0x288>)
 8003a34:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 8003a38:	4b6c      	ldr	r3, [pc, #432]	; (8003bec <runBRTask+0x2a0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a3e:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <runBRTask+0x288>)
 8003a40:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 8003a44:	4b69      	ldr	r3, [pc, #420]	; (8003bec <runBRTask+0x2a0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003a4a:	4866      	ldr	r0, [pc, #408]	; (8003be4 <runBRTask+0x298>)
 8003a4c:	f7ff f894 	bl	8002b78 <RobotTurn>
        osDelay(10);
 8003a50:	200a      	movs	r0, #10
 8003a52:	f005 fe3f 	bl	80096d4 <osDelay>
        targetDist = 4;
 8003a56:	4b66      	ldr	r3, [pc, #408]	; (8003bf0 <runBRTask+0x2a4>)
 8003a58:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003a5c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2100      	movs	r1, #0
 8003a62:	4863      	ldr	r0, [pc, #396]	; (8003bf0 <runBRTask+0x2a4>)
 8003a64:	f7fe fd98 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003a68:	200a      	movs	r0, #10
 8003a6a:	f005 fe33 	bl	80096d4 <osDelay>
        break;
 8003a6e:	e128      	b.n	8003cc2 <runBRTask+0x376>
      case 20: // BR20 (outdoor 3x1)
        targetDist = 4;
 8003a70:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <runBRTask+0x2a4>)
 8003a72:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003a76:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	485c      	ldr	r0, [pc, #368]	; (8003bf0 <runBRTask+0x2a4>)
 8003a7e:	f7fe fd8b 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003a82:	200a      	movs	r0, #10
 8003a84:	f005 fe26 	bl	80096d4 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 8003a88:	4b52      	ldr	r3, [pc, #328]	; (8003bd4 <runBRTask+0x288>)
 8003a8a:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8003a8e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003bd8 <runBRTask+0x28c>
 8003a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	dd01      	ble.n	8003aa0 <runBRTask+0x154>
 8003a9c:	23e1      	movs	r3, #225	; 0xe1
 8003a9e:	e012      	b.n	8003ac6 <runBRTask+0x17a>
 8003aa0:	4b4c      	ldr	r3, [pc, #304]	; (8003bd4 <runBRTask+0x288>)
 8003aa2:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8003aa6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003bdc <runBRTask+0x290>
 8003aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	d501      	bpl.n	8003ab8 <runBRTask+0x16c>
 8003ab4:	2355      	movs	r3, #85	; 0x55
 8003ab6:	e006      	b.n	8003ac6 <runBRTask+0x17a>
 8003ab8:	4b46      	ldr	r3, [pc, #280]	; (8003bd4 <runBRTask+0x288>)
 8003aba:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8003abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac2:	ee17 3a90 	vmov	r3, s15
 8003ac6:	4a46      	ldr	r2, [pc, #280]	; (8003be0 <runBRTask+0x294>)
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
 8003acc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ad0:	f000 ff6e 	bl	80049b0 <HAL_Delay>
 8003ad4:	4b3f      	ldr	r3, [pc, #252]	; (8003bd4 <runBRTask+0x288>)
 8003ad6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ada:	4a42      	ldr	r2, [pc, #264]	; (8003be4 <runBRTask+0x298>)
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b3d      	ldr	r3, [pc, #244]	; (8003bd4 <runBRTask+0x288>)
 8003ae0:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	2104      	movs	r1, #4
 8003af2:	483d      	ldr	r0, [pc, #244]	; (8003be8 <runBRTask+0x29c>)
 8003af4:	f001 fa90 	bl	8005018 <HAL_GPIO_WritePin>
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <runBRTask+0x288>)
 8003afa:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2108      	movs	r1, #8
 8003b0c:	4836      	ldr	r0, [pc, #216]	; (8003be8 <runBRTask+0x29c>)
 8003b0e:	f001 fa83 	bl	8005018 <HAL_GPIO_WritePin>
 8003b12:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <runBRTask+0x288>)
 8003b14:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	2120      	movs	r1, #32
 8003b26:	4830      	ldr	r0, [pc, #192]	; (8003be8 <runBRTask+0x29c>)
 8003b28:	f001 fa76 	bl	8005018 <HAL_GPIO_WritePin>
 8003b2c:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <runBRTask+0x288>)
 8003b2e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf14      	ite	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	2300      	moveq	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	2110      	movs	r1, #16
 8003b40:	4829      	ldr	r0, [pc, #164]	; (8003be8 <runBRTask+0x29c>)
 8003b42:	f001 fa69 	bl	8005018 <HAL_GPIO_WritePin>
 8003b46:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <runBRTask+0x288>)
 8003b48:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <runBRTask+0x2a0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <runBRTask+0x288>)
 8003b54:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <runBRTask+0x2a0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003b5e:	4821      	ldr	r0, [pc, #132]	; (8003be4 <runBRTask+0x298>)
 8003b60:	f7ff f80a 	bl	8002b78 <RobotTurn>
        osDelay(10);
 8003b64:	200a      	movs	r0, #10
 8003b66:	f005 fdb5 	bl	80096d4 <osDelay>
        targetDist = 7;
 8003b6a:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <runBRTask+0x2a4>)
 8003b6c:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <runBRTask+0x2a8>)
 8003b6e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003b70:	2200      	movs	r2, #0
 8003b72:	2100      	movs	r1, #0
 8003b74:	481e      	ldr	r0, [pc, #120]	; (8003bf0 <runBRTask+0x2a4>)
 8003b76:	f7fe fd0f 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003b7a:	200a      	movs	r0, #10
 8003b7c:	f005 fdaa 	bl	80096d4 <osDelay>
        break;
 8003b80:	e09f      	b.n	8003cc2 <runBRTask+0x376>
      default: // BR00 (indoor 3x1)
        targetDist = 4;
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <runBRTask+0x2a4>)
 8003b84:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003b88:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4818      	ldr	r0, [pc, #96]	; (8003bf0 <runBRTask+0x2a4>)
 8003b90:	f7fe fd02 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003b94:	200a      	movs	r0, #10
 8003b96:	f005 fd9d 	bl	80096d4 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <runBRTask+0x288>)
 8003b9c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003ba0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003bd8 <runBRTask+0x28c>
 8003ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bac:	dd01      	ble.n	8003bb2 <runBRTask+0x266>
 8003bae:	23e1      	movs	r3, #225	; 0xe1
 8003bb0:	e029      	b.n	8003c06 <runBRTask+0x2ba>
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <runBRTask+0x288>)
 8003bb4:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003bb8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003bdc <runBRTask+0x290>
 8003bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc4:	d518      	bpl.n	8003bf8 <runBRTask+0x2ac>
 8003bc6:	2355      	movs	r3, #85	; 0x55
 8003bc8:	e01d      	b.n	8003c06 <runBRTask+0x2ba>
 8003bca:	bf00      	nop
 8003bcc:	20000134 	.word	0x20000134
 8003bd0:	200003dc 	.word	0x200003dc
 8003bd4:	20000004 	.word	0x20000004
 8003bd8:	43610000 	.word	0x43610000
 8003bdc:	42aa0000 	.word	0x42aa0000
 8003be0:	20000210 	.word	0x20000210
 8003be4:	200003f4 	.word	0x200003f4
 8003be8:	40020000 	.word	0x40020000
 8003bec:	200002e8 	.word	0x200002e8
 8003bf0:	2000040c 	.word	0x2000040c
 8003bf4:	40e00000 	.word	0x40e00000
 8003bf8:	4b32      	ldr	r3, [pc, #200]	; (8003cc4 <runBRTask+0x378>)
 8003bfa:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8003bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c02:	ee17 3a90 	vmov	r3, s15
 8003c06:	4a30      	ldr	r2, [pc, #192]	; (8003cc8 <runBRTask+0x37c>)
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c10:	f000 fece 	bl	80049b0 <HAL_Delay>
 8003c14:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <runBRTask+0x378>)
 8003c16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c1a:	4a2c      	ldr	r2, [pc, #176]	; (8003ccc <runBRTask+0x380>)
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <runBRTask+0x378>)
 8003c20:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2104      	movs	r1, #4
 8003c32:	4827      	ldr	r0, [pc, #156]	; (8003cd0 <runBRTask+0x384>)
 8003c34:	f001 f9f0 	bl	8005018 <HAL_GPIO_WritePin>
 8003c38:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <runBRTask+0x378>)
 8003c3a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2108      	movs	r1, #8
 8003c4c:	4820      	ldr	r0, [pc, #128]	; (8003cd0 <runBRTask+0x384>)
 8003c4e:	f001 f9e3 	bl	8005018 <HAL_GPIO_WritePin>
 8003c52:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <runBRTask+0x378>)
 8003c54:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	2120      	movs	r1, #32
 8003c66:	481a      	ldr	r0, [pc, #104]	; (8003cd0 <runBRTask+0x384>)
 8003c68:	f001 f9d6 	bl	8005018 <HAL_GPIO_WritePin>
 8003c6c:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <runBRTask+0x378>)
 8003c6e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2110      	movs	r1, #16
 8003c80:	4813      	ldr	r0, [pc, #76]	; (8003cd0 <runBRTask+0x384>)
 8003c82:	f001 f9c9 	bl	8005018 <HAL_GPIO_WritePin>
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <runBRTask+0x378>)
 8003c88:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <runBRTask+0x388>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <runBRTask+0x378>)
 8003c94:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8003c98:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <runBRTask+0x388>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003c9e:	480b      	ldr	r0, [pc, #44]	; (8003ccc <runBRTask+0x380>)
 8003ca0:	f7fe ff6a 	bl	8002b78 <RobotTurn>
        osDelay(10);
 8003ca4:	200a      	movs	r0, #10
 8003ca6:	f005 fd15 	bl	80096d4 <osDelay>
        targetDist = 7;
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <runBRTask+0x38c>)
 8003cac:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <runBRTask+0x390>)
 8003cae:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <runBRTask+0x38c>)
 8003cb6:	f7fe fc6f 	bl	8002598 <RobotMoveDist>
        osDelay(10);
 8003cba:	200a      	movs	r0, #10
 8003cbc:	f005 fd0a 	bl	80096d4 <osDelay>
        break;
 8003cc0:	bf00      	nop
    if (curTask != TASK_BR)
 8003cc2:	e647      	b.n	8003954 <runBRTask+0x8>
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	20000210 	.word	0x20000210
 8003ccc:	200003f4 	.word	0x200003f4
 8003cd0:	40020000 	.word	0x40020000
 8003cd4:	200002e8 	.word	0x200002e8
 8003cd8:	2000040c 	.word	0x2000040c
 8003cdc:	40e00000 	.word	0x40e00000

08003ce0 <runADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
  for (;;)
  {
    if (curTask != TASK_ADC)
 8003ce8:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <runADCTask+0xa4>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d004      	beq.n	8003cfa <runADCTask+0x1a>
      osDelay(1000);
 8003cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cf4:	f005 fcee 	bl	80096d4 <osDelay>
 8003cf8:	e7f6      	b.n	8003ce8 <runADCTask+0x8>
    else
    {
      //			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
      //			last_curTask_tick = HAL_GetTick();
      __PEND_CURCMD(curCmd);
 8003cfa:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <runADCTask+0xa8>)
 8003cfc:	2263      	movs	r2, #99	; 0x63
 8003cfe:	701a      	strb	r2, [r3, #0]
      targetDist = 40;
 8003d00:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <runADCTask+0xac>)
 8003d02:	4a23      	ldr	r2, [pc, #140]	; (8003d90 <runADCTask+0xb0>)
 8003d04:	601a      	str	r2, [r3, #0]
      //			  osDelay(5);
      //			} while (1);
      //
      //		  __ON_TASK_END(&htim8, prevTask, curTask);
      //		  HAL_ADC_Stop(&hadc1);
      clickOnce = 0;
 8003d06:	4b23      	ldr	r3, [pc, #140]	; (8003d94 <runADCTask+0xb4>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <runADCTask+0xa4>)
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <runADCTask+0xb8>)
 8003d12:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <runADCTask+0xa4>)
 8003d16:	2209      	movs	r2, #9
 8003d18:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8003d1a:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <runADCTask+0xbc>)
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <runADCTask+0xbc>)
 8003d20:	785b      	ldrb	r3, [r3, #1]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d112      	bne.n	8003d4c <runADCTask+0x6c>
      {
        __CLEAR_CURCMD(curCmd);
 8003d26:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <runADCTask+0xa8>)
 8003d28:	2264      	movs	r2, #100	; 0x64
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <runADCTask+0xa8>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <runADCTask+0xc0>)
 8003d34:	210f      	movs	r1, #15
 8003d36:	481b      	ldr	r0, [pc, #108]	; (8003da4 <runADCTask+0xc4>)
 8003d38:	f008 fcfc 	bl	800c734 <sniprintf>
 8003d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d40:	2206      	movs	r2, #6
 8003d42:	4919      	ldr	r1, [pc, #100]	; (8003da8 <runADCTask+0xc8>)
 8003d44:	4819      	ldr	r0, [pc, #100]	; (8003dac <runADCTask+0xcc>)
 8003d46:	f004 fb7a 	bl	800843e <HAL_UART_Transmit>
 8003d4a:	e7cd      	b.n	8003ce8 <runADCTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <runADCTask+0xbc>)
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <runADCTask+0xa8>)
 8003d52:	4912      	ldr	r1, [pc, #72]	; (8003d9c <runADCTask+0xbc>)
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <runADCTask+0xbc>)
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	3301      	adds	r3, #1
 8003d62:	4a0e      	ldr	r2, [pc, #56]	; (8003d9c <runADCTask+0xbc>)
 8003d64:	7892      	ldrb	r2, [r2, #2]
 8003d66:	fb93 f1f2 	sdiv	r1, r3, r2
 8003d6a:	fb01 f202 	mul.w	r2, r1, r2
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <runADCTask+0xbc>)
 8003d74:	705a      	strb	r2, [r3, #1]
 8003d76:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <runADCTask+0xd0>)
 8003d78:	210f      	movs	r1, #15
 8003d7a:	480a      	ldr	r0, [pc, #40]	; (8003da4 <runADCTask+0xc4>)
 8003d7c:	f008 fcda 	bl	800c734 <sniprintf>
    if (curTask != TASK_ADC)
 8003d80:	e7b2      	b.n	8003ce8 <runADCTask+0x8>
 8003d82:	bf00      	nop
 8003d84:	20000134 	.word	0x20000134
 8003d88:	200003dc 	.word	0x200003dc
 8003d8c:	2000040c 	.word	0x2000040c
 8003d90:	42200000 	.word	0x42200000
 8003d94:	20000468 	.word	0x20000468
 8003d98:	20000135 	.word	0x20000135
 8003d9c:	200003a8 	.word	0x200003a8
 8003da0:	0800d114 	.word	0x0800d114
 8003da4:	200003e0 	.word	0x200003e0
 8003da8:	0800d11c 	.word	0x0800d11c
 8003dac:	20000330 	.word	0x20000330
 8003db0:	0800d124 	.word	0x0800d124

08003db4 <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 8003dbc:	4bc6      	ldr	r3, [pc, #792]	; (80040d8 <runCmdTask+0x324>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	2b63      	cmp	r3, #99	; 0x63
 8003dc4:	f200 825b 	bhi.w	800427e <runCmdTask+0x4ca>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <runCmdTask+0x1c>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003f61 	.word	0x08003f61
 8003dd4:	08003f61 	.word	0x08003f61
 8003dd8:	08003f7d 	.word	0x08003f7d
 8003ddc:	08003f7d 	.word	0x08003f7d
 8003de0:	08003f7d 	.word	0x08003f7d
 8003de4:	08003f7d 	.word	0x08003f7d
 8003de8:	0800414d 	.word	0x0800414d
 8003dec:	0800415b 	.word	0x0800415b
 8003df0:	08004169 	.word	0x08004169
 8003df4:	08004177 	.word	0x08004177
 8003df8:	08004185 	.word	0x08004185
 8003dfc:	08004185 	.word	0x08004185
 8003e00:	080041cd 	.word	0x080041cd
 8003e04:	0800427f 	.word	0x0800427f
 8003e08:	0800427f 	.word	0x0800427f
 8003e0c:	0800427f 	.word	0x0800427f
 8003e10:	0800427f 	.word	0x0800427f
 8003e14:	0800427f 	.word	0x0800427f
 8003e18:	0800427f 	.word	0x0800427f
 8003e1c:	0800427f 	.word	0x0800427f
 8003e20:	0800427f 	.word	0x0800427f
 8003e24:	0800427f 	.word	0x0800427f
 8003e28:	0800427f 	.word	0x0800427f
 8003e2c:	0800427f 	.word	0x0800427f
 8003e30:	0800427f 	.word	0x0800427f
 8003e34:	0800427f 	.word	0x0800427f
 8003e38:	0800427f 	.word	0x0800427f
 8003e3c:	0800427f 	.word	0x0800427f
 8003e40:	0800427f 	.word	0x0800427f
 8003e44:	0800427f 	.word	0x0800427f
 8003e48:	0800427f 	.word	0x0800427f
 8003e4c:	0800427f 	.word	0x0800427f
 8003e50:	0800427f 	.word	0x0800427f
 8003e54:	0800427f 	.word	0x0800427f
 8003e58:	0800427f 	.word	0x0800427f
 8003e5c:	0800427f 	.word	0x0800427f
 8003e60:	0800427f 	.word	0x0800427f
 8003e64:	0800427f 	.word	0x0800427f
 8003e68:	0800427f 	.word	0x0800427f
 8003e6c:	0800427f 	.word	0x0800427f
 8003e70:	0800427f 	.word	0x0800427f
 8003e74:	0800427f 	.word	0x0800427f
 8003e78:	0800427f 	.word	0x0800427f
 8003e7c:	0800427f 	.word	0x0800427f
 8003e80:	0800427f 	.word	0x0800427f
 8003e84:	0800427f 	.word	0x0800427f
 8003e88:	0800427f 	.word	0x0800427f
 8003e8c:	0800427f 	.word	0x0800427f
 8003e90:	0800427f 	.word	0x0800427f
 8003e94:	0800427f 	.word	0x0800427f
 8003e98:	0800427f 	.word	0x0800427f
 8003e9c:	0800427f 	.word	0x0800427f
 8003ea0:	0800427f 	.word	0x0800427f
 8003ea4:	0800427f 	.word	0x0800427f
 8003ea8:	0800427f 	.word	0x0800427f
 8003eac:	0800427f 	.word	0x0800427f
 8003eb0:	0800427f 	.word	0x0800427f
 8003eb4:	0800427f 	.word	0x0800427f
 8003eb8:	0800427f 	.word	0x0800427f
 8003ebc:	0800427f 	.word	0x0800427f
 8003ec0:	0800427f 	.word	0x0800427f
 8003ec4:	0800427f 	.word	0x0800427f
 8003ec8:	0800427f 	.word	0x0800427f
 8003ecc:	0800427f 	.word	0x0800427f
 8003ed0:	0800427f 	.word	0x0800427f
 8003ed4:	0800427f 	.word	0x0800427f
 8003ed8:	0800427f 	.word	0x0800427f
 8003edc:	0800427f 	.word	0x0800427f
 8003ee0:	0800427f 	.word	0x0800427f
 8003ee4:	0800427f 	.word	0x0800427f
 8003ee8:	0800427f 	.word	0x0800427f
 8003eec:	0800427f 	.word	0x0800427f
 8003ef0:	0800427f 	.word	0x0800427f
 8003ef4:	0800427f 	.word	0x0800427f
 8003ef8:	0800427f 	.word	0x0800427f
 8003efc:	0800427f 	.word	0x0800427f
 8003f00:	0800427f 	.word	0x0800427f
 8003f04:	0800427f 	.word	0x0800427f
 8003f08:	0800427f 	.word	0x0800427f
 8003f0c:	0800427f 	.word	0x0800427f
 8003f10:	0800427f 	.word	0x0800427f
 8003f14:	0800427f 	.word	0x0800427f
 8003f18:	0800427f 	.word	0x0800427f
 8003f1c:	0800427f 	.word	0x0800427f
 8003f20:	0800427f 	.word	0x0800427f
 8003f24:	0800427f 	.word	0x0800427f
 8003f28:	0800427f 	.word	0x0800427f
 8003f2c:	080041d5 	.word	0x080041d5
 8003f30:	080041d5 	.word	0x080041d5
 8003f34:	0800427f 	.word	0x0800427f
 8003f38:	0800427f 	.word	0x0800427f
 8003f3c:	0800427f 	.word	0x0800427f
 8003f40:	0800427f 	.word	0x0800427f
 8003f44:	0800427f 	.word	0x0800427f
 8003f48:	0800427f 	.word	0x0800427f
 8003f4c:	0800427f 	.word	0x0800427f
 8003f50:	0800427f 	.word	0x0800427f
 8003f54:	0800427f 	.word	0x0800427f
 8003f58:	0800427f 	.word	0x0800427f
 8003f5c:	0800427f 	.word	0x0800427f
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
    case 2: // BW
      curTask = curCmd.index == 1 ? TASK_MOVE_FOREWARD : TASK_MOVE_BACKWARD;
 8003f60:	4b5d      	ldr	r3, [pc, #372]	; (80040d8 <runCmdTask+0x324>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b5a      	ldr	r3, [pc, #360]	; (80040dc <runCmdTask+0x328>)
 8003f72:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8003f74:	4b58      	ldr	r3, [pc, #352]	; (80040d8 <runCmdTask+0x324>)
 8003f76:	2263      	movs	r2, #99	; 0x63
 8003f78:	701a      	strb	r2, [r3, #0]
      break;
 8003f7a:	e181      	b.n	8004280 <runCmdTask+0x4cc>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8003f7c:	4b56      	ldr	r3, [pc, #344]	; (80040d8 <runCmdTask+0x324>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	4a57      	ldr	r2, [pc, #348]	; (80040e0 <runCmdTask+0x32c>)
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	4413      	add	r3, r2
 8003f86:	3304      	adds	r3, #4
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80040e4 <runCmdTask+0x330>
 8003f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f98:	dd01      	ble.n	8003f9e <runCmdTask+0x1ea>
 8003f9a:	23e1      	movs	r3, #225	; 0xe1
 8003f9c:	e01c      	b.n	8003fd8 <runCmdTask+0x224>
 8003f9e:	4b4e      	ldr	r3, [pc, #312]	; (80040d8 <runCmdTask+0x324>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	4a4f      	ldr	r2, [pc, #316]	; (80040e0 <runCmdTask+0x32c>)
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3304      	adds	r3, #4
 8003faa:	edd3 7a00 	vldr	s15, [r3]
 8003fae:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80040e8 <runCmdTask+0x334>
 8003fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fba:	d501      	bpl.n	8003fc0 <runCmdTask+0x20c>
 8003fbc:	2355      	movs	r3, #85	; 0x55
 8003fbe:	e00b      	b.n	8003fd8 <runCmdTask+0x224>
 8003fc0:	4b45      	ldr	r3, [pc, #276]	; (80040d8 <runCmdTask+0x324>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	4a46      	ldr	r2, [pc, #280]	; (80040e0 <runCmdTask+0x32c>)
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	4413      	add	r3, r2
 8003fca:	3304      	adds	r3, #4
 8003fcc:	edd3 7a00 	vldr	s15, [r3]
 8003fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd4:	ee17 3a90 	vmov	r3, s15
 8003fd8:	4a44      	ldr	r2, [pc, #272]	; (80040ec <runCmdTask+0x338>)
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003fe2:	f000 fce5 	bl	80049b0 <HAL_Delay>
 8003fe6:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <runCmdTask+0x324>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4a3d      	ldr	r2, [pc, #244]	; (80040e0 <runCmdTask+0x32c>)
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	4413      	add	r3, r2
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a3e      	ldr	r2, [pc, #248]	; (80040f0 <runCmdTask+0x33c>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <runCmdTask+0x324>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	4a38      	ldr	r2, [pc, #224]	; (80040e0 <runCmdTask+0x32c>)
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	4413      	add	r3, r2
 8004002:	330c      	adds	r3, #12
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	2104      	movs	r1, #4
 8004014:	4837      	ldr	r0, [pc, #220]	; (80040f4 <runCmdTask+0x340>)
 8004016:	f000 ffff 	bl	8005018 <HAL_GPIO_WritePin>
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <runCmdTask+0x324>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	4a30      	ldr	r2, [pc, #192]	; (80040e0 <runCmdTask+0x32c>)
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	4413      	add	r3, r2
 8004024:	330c      	adds	r3, #12
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	2108      	movs	r1, #8
 8004036:	482f      	ldr	r0, [pc, #188]	; (80040f4 <runCmdTask+0x340>)
 8004038:	f000 ffee 	bl	8005018 <HAL_GPIO_WritePin>
 800403c:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <runCmdTask+0x324>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <runCmdTask+0x32c>)
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	4413      	add	r3, r2
 8004046:	330c      	adds	r3, #12
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	2120      	movs	r1, #32
 8004058:	4826      	ldr	r0, [pc, #152]	; (80040f4 <runCmdTask+0x340>)
 800405a:	f000 ffdd 	bl	8005018 <HAL_GPIO_WritePin>
 800405e:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <runCmdTask+0x324>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <runCmdTask+0x32c>)
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	4413      	add	r3, r2
 8004068:	330c      	adds	r3, #12
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	2110      	movs	r1, #16
 800407a:	481e      	ldr	r0, [pc, #120]	; (80040f4 <runCmdTask+0x340>)
 800407c:	f000 ffcc 	bl	8005018 <HAL_GPIO_WritePin>
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <runCmdTask+0x324>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <runCmdTask+0x32c>)
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	4413      	add	r3, r2
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <runCmdTask+0x344>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	635a      	str	r2, [r3, #52]	; 0x34
 8004092:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <runCmdTask+0x324>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <runCmdTask+0x32c>)
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	4413      	add	r3, r2
 800409c:	3302      	adds	r3, #2
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <runCmdTask+0x344>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <runCmdTask+0x348>)
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <runCmdTask+0x348>)
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d12e      	bne.n	8004110 <runCmdTask+0x35c>
      {
        __CLEAR_CURCMD(curCmd);
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <runCmdTask+0x324>)
 80040b4:	2264      	movs	r2, #100	; 0x64
 80040b6:	701a      	strb	r2, [r3, #0]
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <runCmdTask+0x324>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80040be:	4a10      	ldr	r2, [pc, #64]	; (8004100 <runCmdTask+0x34c>)
 80040c0:	210f      	movs	r1, #15
 80040c2:	4810      	ldr	r0, [pc, #64]	; (8004104 <runCmdTask+0x350>)
 80040c4:	f008 fb36 	bl	800c734 <sniprintf>
 80040c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040cc:	2206      	movs	r2, #6
 80040ce:	490e      	ldr	r1, [pc, #56]	; (8004108 <runCmdTask+0x354>)
 80040d0:	480e      	ldr	r0, [pc, #56]	; (800410c <runCmdTask+0x358>)
 80040d2:	f004 f9b4 	bl	800843e <HAL_UART_Transmit>
 80040d6:	e035      	b.n	8004144 <runCmdTask+0x390>
 80040d8:	200003dc 	.word	0x200003dc
 80040dc:	20000134 	.word	0x20000134
 80040e0:	20000004 	.word	0x20000004
 80040e4:	43610000 	.word	0x43610000
 80040e8:	42aa0000 	.word	0x42aa0000
 80040ec:	20000210 	.word	0x20000210
 80040f0:	200003f4 	.word	0x200003f4
 80040f4:	40020000 	.word	0x40020000
 80040f8:	200002e8 	.word	0x200002e8
 80040fc:	200003a8 	.word	0x200003a8
 8004100:	0800d114 	.word	0x0800d114
 8004104:	200003e0 	.word	0x200003e0
 8004108:	0800d11c 	.word	0x0800d11c
 800410c:	20000330 	.word	0x20000330
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004110:	4b5d      	ldr	r3, [pc, #372]	; (8004288 <runCmdTask+0x4d4>)
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	4a5d      	ldr	r2, [pc, #372]	; (800428c <runCmdTask+0x4d8>)
 8004116:	495c      	ldr	r1, [pc, #368]	; (8004288 <runCmdTask+0x4d4>)
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <runCmdTask+0x4d4>)
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	3301      	adds	r3, #1
 8004126:	4a58      	ldr	r2, [pc, #352]	; (8004288 <runCmdTask+0x4d4>)
 8004128:	7892      	ldrb	r2, [r2, #2]
 800412a:	fb93 f1f2 	sdiv	r1, r3, r2
 800412e:	fb01 f202 	mul.w	r2, r1, r2
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4b54      	ldr	r3, [pc, #336]	; (8004288 <runCmdTask+0x4d4>)
 8004138:	705a      	strb	r2, [r3, #1]
 800413a:	4a55      	ldr	r2, [pc, #340]	; (8004290 <runCmdTask+0x4dc>)
 800413c:	210f      	movs	r1, #15
 800413e:	4855      	ldr	r0, [pc, #340]	; (8004294 <runCmdTask+0x4e0>)
 8004140:	f008 faf8 	bl	800c734 <sniprintf>
      __PEND_CURCMD(curCmd);
 8004144:	4b51      	ldr	r3, [pc, #324]	; (800428c <runCmdTask+0x4d8>)
 8004146:	2263      	movs	r2, #99	; 0x63
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	e099      	b.n	8004280 <runCmdTask+0x4cc>
    case 7: // FL
      curTask = TASK_FL;
 800414c:	4b52      	ldr	r3, [pc, #328]	; (8004298 <runCmdTask+0x4e4>)
 800414e:	2202      	movs	r2, #2
 8004150:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004152:	4b4e      	ldr	r3, [pc, #312]	; (800428c <runCmdTask+0x4d8>)
 8004154:	2263      	movs	r2, #99	; 0x63
 8004156:	701a      	strb	r2, [r3, #0]
      break;
 8004158:	e092      	b.n	8004280 <runCmdTask+0x4cc>
    case 8: // FR
      curTask = TASK_FR;
 800415a:	4b4f      	ldr	r3, [pc, #316]	; (8004298 <runCmdTask+0x4e4>)
 800415c:	2203      	movs	r2, #3
 800415e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004160:	4b4a      	ldr	r3, [pc, #296]	; (800428c <runCmdTask+0x4d8>)
 8004162:	2263      	movs	r2, #99	; 0x63
 8004164:	701a      	strb	r2, [r3, #0]
      break;
 8004166:	e08b      	b.n	8004280 <runCmdTask+0x4cc>
    case 9: // BL
      curTask = TASK_BL;
 8004168:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <runCmdTask+0x4e4>)
 800416a:	2204      	movs	r2, #4
 800416c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <runCmdTask+0x4d8>)
 8004170:	2263      	movs	r2, #99	; 0x63
 8004172:	701a      	strb	r2, [r3, #0]
      break;
 8004174:	e084      	b.n	8004280 <runCmdTask+0x4cc>
    case 10: // BR
      curTask = TASK_BR;
 8004176:	4b48      	ldr	r3, [pc, #288]	; (8004298 <runCmdTask+0x4e4>)
 8004178:	2205      	movs	r2, #5
 800417a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800417c:	4b43      	ldr	r3, [pc, #268]	; (800428c <runCmdTask+0x4d8>)
 800417e:	2263      	movs	r2, #99	; 0x63
 8004180:	701a      	strb	r2, [r3, #0]
      break;
 8004182:	e07d      	b.n	8004280 <runCmdTask+0x4cc>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8004184:	4b41      	ldr	r3, [pc, #260]	; (800428c <runCmdTask+0x4d8>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b0b      	cmp	r3, #11
 800418a:	d004      	beq.n	8004196 <runCmdTask+0x3e2>
 800418c:	4b43      	ldr	r3, [pc, #268]	; (800429c <runCmdTask+0x4e8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	22e1      	movs	r2, #225	; 0xe1
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
 8004194:	e003      	b.n	800419e <runCmdTask+0x3ea>
 8004196:	4b41      	ldr	r3, [pc, #260]	; (800429c <runCmdTask+0x4e8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2255      	movs	r2, #85	; 0x55
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
 800419e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80041a2:	f000 fc05 	bl	80049b0 <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 80041a6:	4b39      	ldr	r3, [pc, #228]	; (800428c <runCmdTask+0x4d8>)
 80041a8:	2264      	movs	r2, #100	; 0x64
 80041aa:	701a      	strb	r2, [r3, #0]
 80041ac:	4b37      	ldr	r3, [pc, #220]	; (800428c <runCmdTask+0x4d8>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 80041b2:	4a3b      	ldr	r2, [pc, #236]	; (80042a0 <runCmdTask+0x4ec>)
 80041b4:	210f      	movs	r1, #15
 80041b6:	4837      	ldr	r0, [pc, #220]	; (8004294 <runCmdTask+0x4e0>)
 80041b8:	f008 fabc 	bl	800c734 <sniprintf>
 80041bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041c0:	2206      	movs	r2, #6
 80041c2:	4938      	ldr	r1, [pc, #224]	; (80042a4 <runCmdTask+0x4f0>)
 80041c4:	4838      	ldr	r0, [pc, #224]	; (80042a8 <runCmdTask+0x4f4>)
 80041c6:	f004 f93a 	bl	800843e <HAL_UART_Transmit>
      break;
 80041ca:	e059      	b.n	8004280 <runCmdTask+0x4cc>
    case 13: // debug IR sensor
      curTask = TASK_ADC;
 80041cc:	4b32      	ldr	r3, [pc, #200]	; (8004298 <runCmdTask+0x4e4>)
 80041ce:	2208      	movs	r2, #8
 80041d0:	701a      	strb	r2, [r3, #0]
      break;
 80041d2:	e055      	b.n	8004280 <runCmdTask+0x4cc>
    //   curTask = TASK_FASTESTPATH_V2;
    //   __PEND_CURCMD(curCmd);
    //   break;
    case 88: // Axxx, rotate left by xxx degree
    case 89: // Cxxx, rotate right by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 80041d4:	4b2d      	ldr	r3, [pc, #180]	; (800428c <runCmdTask+0x4d8>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b58      	cmp	r3, #88	; 0x58
 80041da:	d004      	beq.n	80041e6 <runCmdTask+0x432>
 80041dc:	4b2f      	ldr	r3, [pc, #188]	; (800429c <runCmdTask+0x4e8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	22e1      	movs	r2, #225	; 0xe1
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
 80041e4:	e003      	b.n	80041ee <runCmdTask+0x43a>
 80041e6:	4b2d      	ldr	r3, [pc, #180]	; (800429c <runCmdTask+0x4e8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2255      	movs	r2, #85	; 0x55
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
 80041ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80041f2:	f000 fbdd 	bl	80049b0 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2104      	movs	r1, #4
 80041fa:	482c      	ldr	r0, [pc, #176]	; (80042ac <runCmdTask+0x4f8>)
 80041fc:	f000 ff0c 	bl	8005018 <HAL_GPIO_WritePin>
 8004200:	2201      	movs	r2, #1
 8004202:	2108      	movs	r1, #8
 8004204:	4829      	ldr	r0, [pc, #164]	; (80042ac <runCmdTask+0x4f8>)
 8004206:	f000 ff07 	bl	8005018 <HAL_GPIO_WritePin>
 800420a:	2200      	movs	r2, #0
 800420c:	2120      	movs	r1, #32
 800420e:	4827      	ldr	r0, [pc, #156]	; (80042ac <runCmdTask+0x4f8>)
 8004210:	f000 ff02 	bl	8005018 <HAL_GPIO_WritePin>
 8004214:	2201      	movs	r2, #1
 8004216:	2110      	movs	r1, #16
 8004218:	4824      	ldr	r0, [pc, #144]	; (80042ac <runCmdTask+0x4f8>)
 800421a:	f000 fefd 	bl	8005018 <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 800421e:	4b1b      	ldr	r3, [pc, #108]	; (800428c <runCmdTask+0x4d8>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b58      	cmp	r3, #88	; 0x58
 8004224:	d113      	bne.n	800424e <runCmdTask+0x49a>
      {
        targetAngle = curCmd.val;
 8004226:	4b19      	ldr	r3, [pc, #100]	; (800428c <runCmdTask+0x4d8>)
 8004228:	885b      	ldrh	r3, [r3, #2]
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <runCmdTask+0x4fc>)
 8004234:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 800, 1200);
 8004238:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <runCmdTask+0x500>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004240:	635a      	str	r2, [r3, #52]	; 0x34
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <runCmdTask+0x500>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
 800424c:	e013      	b.n	8004276 <runCmdTask+0x4c2>
      }
      else
      {
        targetAngle = -curCmd.val;
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <runCmdTask+0x4d8>)
 8004250:	885b      	ldrh	r3, [r3, #2]
 8004252:	425b      	negs	r3, r3
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <runCmdTask+0x4fc>)
 800425e:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1200, 800);
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <runCmdTask+0x500>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800426a:	635a      	str	r2, [r3, #52]	; 0x34
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <runCmdTask+0x500>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <runCmdTask+0x4d8>)
 8004278:	2263      	movs	r2, #99	; 0x63
 800427a:	701a      	strb	r2, [r3, #0]
      // RobotTurn(&targetAngle);
      break;
 800427c:	e000      	b.n	8004280 <runCmdTask+0x4cc>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 800427e:	bf00      	nop
    }
    osDelay(1);
 8004280:	2001      	movs	r0, #1
 8004282:	f005 fa27 	bl	80096d4 <osDelay>
    switch (curCmd.index)
 8004286:	e599      	b.n	8003dbc <runCmdTask+0x8>
 8004288:	200003a8 	.word	0x200003a8
 800428c:	200003dc 	.word	0x200003dc
 8004290:	0800d124 	.word	0x0800d124
 8004294:	200003e0 	.word	0x200003e0
 8004298:	20000134 	.word	0x20000134
 800429c:	20000210 	.word	0x20000210
 80042a0:	0800d114 	.word	0x0800d114
 80042a4:	0800d11c 	.word	0x0800d11c
 80042a8:	20000330 	.word	0x20000330
 80042ac:	40020000 	.word	0x40020000
 80042b0:	200003f4 	.word	0x200003f4
 80042b4:	200002e8 	.word	0x200002e8

080042b8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80042ca:	f000 fb51 	bl	8004970 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40000800 	.word	0x40000800

080042dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042e0:	b672      	cpsid	i
}
 80042e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042e4:	e7fe      	b.n	80042e4 <Error_Handler+0x8>
	...

080042e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <HAL_MspInit+0x54>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	4a11      	ldr	r2, [pc, #68]	; (800433c <HAL_MspInit+0x54>)
 80042f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042fc:	6453      	str	r3, [r2, #68]	; 0x44
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <HAL_MspInit+0x54>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_MspInit+0x54>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a0a      	ldr	r2, [pc, #40]	; (800433c <HAL_MspInit+0x54>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_MspInit+0x54>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004326:	2200      	movs	r2, #0
 8004328:	210f      	movs	r1, #15
 800432a:	f06f 0001 	mvn.w	r0, #1
 800432e:	f000 fc1b 	bl	8004b68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800

08004340 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a19      	ldr	r2, [pc, #100]	; (80043c4 <HAL_I2C_MspInit+0x84>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d12c      	bne.n	80043bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <HAL_I2C_MspInit+0x88>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <HAL_I2C_MspInit+0x88>)
 800436c:	f043 0302 	orr.w	r3, r3, #2
 8004370:	6313      	str	r3, [r2, #48]	; 0x30
 8004372:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <HAL_I2C_MspInit+0x88>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800437e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004384:	2312      	movs	r3, #18
 8004386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800438c:	2303      	movs	r3, #3
 800438e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004390:	2304      	movs	r3, #4
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	4619      	mov	r1, r3
 800439a:	480c      	ldr	r0, [pc, #48]	; (80043cc <HAL_I2C_MspInit+0x8c>)
 800439c:	f000 fca0 	bl	8004ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <HAL_I2C_MspInit+0x88>)
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <HAL_I2C_MspInit+0x88>)
 80043aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043ae:	6413      	str	r3, [r2, #64]	; 0x40
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_I2C_MspInit+0x88>)
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80043bc:	bf00      	nop
 80043be:	3728      	adds	r7, #40	; 0x28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40005400 	.word	0x40005400
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40020400 	.word	0x40020400

080043d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a27      	ldr	r2, [pc, #156]	; (800448c <HAL_TIM_Base_MspInit+0xbc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d116      	bne.n	8004420 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	4b26      	ldr	r3, [pc, #152]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	4a25      	ldr	r2, [pc, #148]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6453      	str	r3, [r2, #68]	; 0x44
 8004402:	4b23      	ldr	r3, [pc, #140]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	2105      	movs	r1, #5
 8004412:	201b      	movs	r0, #27
 8004414:	f000 fba8 	bl	8004b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004418:	201b      	movs	r0, #27
 800441a:	f000 fbc1 	bl	8004ba0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800441e:	e030      	b.n	8004482 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM8)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <HAL_TIM_Base_MspInit+0xc4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d12b      	bne.n	8004482 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	4b18      	ldr	r3, [pc, #96]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	4a17      	ldr	r2, [pc, #92]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004434:	f043 0302 	orr.w	r3, r3, #2
 8004438:	6453      	str	r3, [r2, #68]	; 0x44
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a10      	ldr	r2, [pc, #64]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	6313      	str	r3, [r2, #48]	; 0x30
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <HAL_TIM_Base_MspInit+0xc0>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8004462:	23c0      	movs	r3, #192	; 0xc0
 8004464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	2300      	movs	r3, #0
 8004470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004472:	2303      	movs	r3, #3
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004476:	f107 0314 	add.w	r3, r7, #20
 800447a:	4619      	mov	r1, r3
 800447c:	4806      	ldr	r0, [pc, #24]	; (8004498 <HAL_TIM_Base_MspInit+0xc8>)
 800447e:	f000 fc2f 	bl	8004ce0 <HAL_GPIO_Init>
}
 8004482:	bf00      	nop
 8004484:	3728      	adds	r7, #40	; 0x28
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40023800 	.word	0x40023800
 8004494:	40010400 	.word	0x40010400
 8004498:	40020800 	.word	0x40020800

0800449c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044bc:	d14a      	bne.n	8004554 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	4b26      	ldr	r3, [pc, #152]	; (800455c <HAL_TIM_Encoder_MspInit+0xc0>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	4a25      	ldr	r2, [pc, #148]	; (800455c <HAL_TIM_Encoder_MspInit+0xc0>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6413      	str	r3, [r2, #64]	; 0x40
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <HAL_TIM_Encoder_MspInit+0xc0>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	4b1f      	ldr	r3, [pc, #124]	; (800455c <HAL_TIM_Encoder_MspInit+0xc0>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	4a1e      	ldr	r2, [pc, #120]	; (800455c <HAL_TIM_Encoder_MspInit+0xc0>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ea:	4b1c      	ldr	r3, [pc, #112]	; (800455c <HAL_TIM_Encoder_MspInit+0xc0>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	4b18      	ldr	r3, [pc, #96]	; (800455c <HAL_TIM_Encoder_MspInit+0xc0>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	4a17      	ldr	r2, [pc, #92]	; (800455c <HAL_TIM_Encoder_MspInit+0xc0>)
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	6313      	str	r3, [r2, #48]	; 0x30
 8004506:	4b15      	ldr	r3, [pc, #84]	; (800455c <HAL_TIM_Encoder_MspInit+0xc0>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004518:	2302      	movs	r3, #2
 800451a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004524:	2301      	movs	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004528:	f107 0314 	add.w	r3, r7, #20
 800452c:	4619      	mov	r1, r3
 800452e:	480c      	ldr	r0, [pc, #48]	; (8004560 <HAL_TIM_Encoder_MspInit+0xc4>)
 8004530:	f000 fbd6 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004534:	2308      	movs	r3, #8
 8004536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004538:	2302      	movs	r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004540:	2300      	movs	r3, #0
 8004542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004544:	2301      	movs	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4619      	mov	r1, r3
 800454e:	4805      	ldr	r0, [pc, #20]	; (8004564 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004550:	f000 fbc6 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004554:	bf00      	nop
 8004556:	3728      	adds	r7, #40	; 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	40020000 	.word	0x40020000
 8004564:	40020400 	.word	0x40020400

08004568 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <HAL_TIM_IC_MspInit+0x94>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d133      	bne.n	80045f2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <HAL_TIM_IC_MspInit+0x98>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_TIM_IC_MspInit+0x98>)
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	6413      	str	r3, [r2, #64]	; 0x40
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_TIM_IC_MspInit+0x98>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	4b15      	ldr	r3, [pc, #84]	; (8004600 <HAL_TIM_IC_MspInit+0x98>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4a14      	ldr	r2, [pc, #80]	; (8004600 <HAL_TIM_IC_MspInit+0x98>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	6313      	str	r3, [r2, #48]	; 0x30
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_TIM_IC_MspInit+0x98>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c6:	2302      	movs	r3, #2
 80045c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ce:	2300      	movs	r3, #0
 80045d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045d2:	2302      	movs	r3, #2
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d6:	f107 0314 	add.w	r3, r7, #20
 80045da:	4619      	mov	r1, r3
 80045dc:	4809      	ldr	r0, [pc, #36]	; (8004604 <HAL_TIM_IC_MspInit+0x9c>)
 80045de:	f000 fb7f 	bl	8004ce0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80045e2:	2200      	movs	r2, #0
 80045e4:	2105      	movs	r1, #5
 80045e6:	201d      	movs	r0, #29
 80045e8:	f000 fabe 	bl	8004b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80045ec:	201d      	movs	r0, #29
 80045ee:	f000 fad7 	bl	8004ba0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80045f2:	bf00      	nop
 80045f4:	3728      	adds	r7, #40	; 0x28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40000400 	.word	0x40000400
 8004600:	40023800 	.word	0x40023800
 8004604:	40020000 	.word	0x40020000

08004608 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004610:	f107 030c 	add.w	r3, r7, #12
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a12      	ldr	r2, [pc, #72]	; (8004670 <HAL_TIM_MspPostInit+0x68>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d11e      	bne.n	8004668 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	60bb      	str	r3, [r7, #8]
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_TIM_MspPostInit+0x6c>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	4a10      	ldr	r2, [pc, #64]	; (8004674 <HAL_TIM_MspPostInit+0x6c>)
 8004634:	f043 0310 	orr.w	r3, r3, #16
 8004638:	6313      	str	r3, [r2, #48]	; 0x30
 800463a:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <HAL_TIM_MspPostInit+0x6c>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004646:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800464a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464c:	2302      	movs	r3, #2
 800464e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004658:	2301      	movs	r3, #1
 800465a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800465c:	f107 030c 	add.w	r3, r7, #12
 8004660:	4619      	mov	r1, r3
 8004662:	4805      	ldr	r0, [pc, #20]	; (8004678 <HAL_TIM_MspPostInit+0x70>)
 8004664:	f000 fb3c 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004668:	bf00      	nop
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40010000 	.word	0x40010000
 8004674:	40023800 	.word	0x40023800
 8004678:	40021000 	.word	0x40021000

0800467c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <HAL_UART_MspInit+0x94>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d134      	bne.n	8004708 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	4b1c      	ldr	r3, [pc, #112]	; (8004714 <HAL_UART_MspInit+0x98>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4a1b      	ldr	r2, [pc, #108]	; (8004714 <HAL_UART_MspInit+0x98>)
 80046a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ac:	6413      	str	r3, [r2, #64]	; 0x40
 80046ae:	4b19      	ldr	r3, [pc, #100]	; (8004714 <HAL_UART_MspInit+0x98>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <HAL_UART_MspInit+0x98>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	4a14      	ldr	r2, [pc, #80]	; (8004714 <HAL_UART_MspInit+0x98>)
 80046c4:	f043 0304 	orr.w	r3, r3, #4
 80046c8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_UART_MspInit+0x98>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80046d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046dc:	2302      	movs	r3, #2
 80046de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e4:	2303      	movs	r3, #3
 80046e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046e8:	2307      	movs	r3, #7
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ec:	f107 0314 	add.w	r3, r7, #20
 80046f0:	4619      	mov	r1, r3
 80046f2:	4809      	ldr	r0, [pc, #36]	; (8004718 <HAL_UART_MspInit+0x9c>)
 80046f4:	f000 faf4 	bl	8004ce0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80046f8:	2200      	movs	r2, #0
 80046fa:	2105      	movs	r1, #5
 80046fc:	2027      	movs	r0, #39	; 0x27
 80046fe:	f000 fa33 	bl	8004b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004702:	2027      	movs	r0, #39	; 0x27
 8004704:	f000 fa4c 	bl	8004ba0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004708:	bf00      	nop
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40004800 	.word	0x40004800
 8004714:	40023800 	.word	0x40023800
 8004718:	40020800 	.word	0x40020800

0800471c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08c      	sub	sp, #48	; 0x30
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800472c:	2200      	movs	r2, #0
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	201e      	movs	r0, #30
 8004732:	f000 fa19 	bl	8004b68 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004736:	201e      	movs	r0, #30
 8004738:	f000 fa32 	bl	8004ba0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	4b1e      	ldr	r3, [pc, #120]	; (80047bc <HAL_InitTick+0xa0>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <HAL_InitTick+0xa0>)
 8004746:	f043 0304 	orr.w	r3, r3, #4
 800474a:	6413      	str	r3, [r2, #64]	; 0x40
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_InitTick+0xa0>)
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004758:	f107 0210 	add.w	r2, r7, #16
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	4611      	mov	r1, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f002 f8b2 	bl	80068cc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004768:	f002 f888 	bl	800687c <HAL_RCC_GetPCLK1Freq>
 800476c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <HAL_InitTick+0xa4>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	0c9b      	lsrs	r3, r3, #18
 8004778:	3b01      	subs	r3, #1
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_InitTick+0xa8>)
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <HAL_InitTick+0xac>)
 8004780:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_InitTick+0xa8>)
 8004784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004788:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800478a:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <HAL_InitTick+0xa8>)
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <HAL_InitTick+0xa8>)
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_InitTick+0xa8>)
 8004798:	2200      	movs	r2, #0
 800479a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800479c:	4809      	ldr	r0, [pc, #36]	; (80047c4 <HAL_InitTick+0xa8>)
 800479e:	f002 f8c7 	bl	8006930 <HAL_TIM_Base_Init>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d104      	bne.n	80047b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80047a8:	4806      	ldr	r0, [pc, #24]	; (80047c4 <HAL_InitTick+0xa8>)
 80047aa:	f002 f911 	bl	80069d0 <HAL_TIM_Base_Start_IT>
 80047ae:	4603      	mov	r3, r0
 80047b0:	e000      	b.n	80047b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3730      	adds	r7, #48	; 0x30
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800
 80047c0:	431bde83 	.word	0x431bde83
 80047c4:	20000470 	.word	0x20000470
 80047c8:	40000800 	.word	0x40000800

080047cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047d0:	e7fe      	b.n	80047d0 <NMI_Handler+0x4>

080047d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047d2:	b480      	push	{r7}
 80047d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047d6:	e7fe      	b.n	80047d6 <HardFault_Handler+0x4>

080047d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047dc:	e7fe      	b.n	80047dc <MemManage_Handler+0x4>

080047de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047de:	b480      	push	{r7}
 80047e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047e2:	e7fe      	b.n	80047e2 <BusFault_Handler+0x4>

080047e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047e8:	e7fe      	b.n	80047e8 <UsageFault_Handler+0x4>

080047ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047ea:	b480      	push	{r7}
 80047ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047ee:	bf00      	nop
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047fc:	4802      	ldr	r0, [pc, #8]	; (8004808 <TIM1_CC_IRQHandler+0x10>)
 80047fe:	f002 fd25 	bl	800724c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000210 	.word	0x20000210

0800480c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004810:	4802      	ldr	r0, [pc, #8]	; (800481c <TIM3_IRQHandler+0x10>)
 8004812:	f002 fd1b 	bl	800724c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	200002a0 	.word	0x200002a0

08004820 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004824:	4802      	ldr	r0, [pc, #8]	; (8004830 <TIM4_IRQHandler+0x10>)
 8004826:	f002 fd11 	bl	800724c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000470 	.word	0x20000470

08004834 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004838:	4802      	ldr	r0, [pc, #8]	; (8004844 <USART3_IRQHandler+0x10>)
 800483a:	f003 fec3 	bl	80085c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000330 	.word	0x20000330

08004848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004850:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <_sbrk+0x5c>)
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <_sbrk+0x60>)
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800485c:	4b13      	ldr	r3, [pc, #76]	; (80048ac <_sbrk+0x64>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <_sbrk+0x64>)
 8004866:	4a12      	ldr	r2, [pc, #72]	; (80048b0 <_sbrk+0x68>)
 8004868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <_sbrk+0x64>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	429a      	cmp	r2, r3
 8004876:	d207      	bcs.n	8004888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004878:	f007 ff98 	bl	800c7ac <__errno>
 800487c:	4603      	mov	r3, r0
 800487e:	220c      	movs	r2, #12
 8004880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004886:	e009      	b.n	800489c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <_sbrk+0x64>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <_sbrk+0x64>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	4a05      	ldr	r2, [pc, #20]	; (80048ac <_sbrk+0x64>)
 8004898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800489a:	68fb      	ldr	r3, [r7, #12]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20020000 	.word	0x20020000
 80048a8:	00000400 	.word	0x00000400
 80048ac:	200004b8 	.word	0x200004b8
 80048b0:	20005358 	.word	0x20005358

080048b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <SystemInit+0x20>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	4a05      	ldr	r2, [pc, #20]	; (80048d4 <SystemInit+0x20>)
 80048c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048dc:	480d      	ldr	r0, [pc, #52]	; (8004914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048de:	490e      	ldr	r1, [pc, #56]	; (8004918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048e0:	4a0e      	ldr	r2, [pc, #56]	; (800491c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048e4:	e002      	b.n	80048ec <LoopCopyDataInit>

080048e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ea:	3304      	adds	r3, #4

080048ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048f0:	d3f9      	bcc.n	80048e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048f2:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80048f4:	4c0b      	ldr	r4, [pc, #44]	; (8004924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80048f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048f8:	e001      	b.n	80048fe <LoopFillZerobss>

080048fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048fc:	3204      	adds	r2, #4

080048fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004900:	d3fb      	bcc.n	80048fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004902:	f7ff ffd7 	bl	80048b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004906:	f007 ff57 	bl	800c7b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800490a:	f7fc faf5 	bl	8000ef8 <main>
  bx  lr    
 800490e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004918:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 800491c:	0800dd6c 	.word	0x0800dd6c
  ldr r2, =_sbss
 8004920:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8004924:	20005358 	.word	0x20005358

08004928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004928:	e7fe      	b.n	8004928 <ADC_IRQHandler>
	...

0800492c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <HAL_Init+0x40>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a0d      	ldr	r2, [pc, #52]	; (800496c <HAL_Init+0x40>)
 8004936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800493a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_Init+0x40>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <HAL_Init+0x40>)
 8004942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004948:	4b08      	ldr	r3, [pc, #32]	; (800496c <HAL_Init+0x40>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a07      	ldr	r2, [pc, #28]	; (800496c <HAL_Init+0x40>)
 800494e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004954:	2003      	movs	r0, #3
 8004956:	f000 f8fc 	bl	8004b52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800495a:	200f      	movs	r0, #15
 800495c:	f7ff fede 	bl	800471c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004960:	f7ff fcc2 	bl	80042e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023c00 	.word	0x40023c00

08004970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_IncTick+0x20>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_IncTick+0x24>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4413      	add	r3, r2
 8004980:	4a04      	ldr	r2, [pc, #16]	; (8004994 <HAL_IncTick+0x24>)
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000148 	.word	0x20000148
 8004994:	200004bc 	.word	0x200004bc

08004998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return uwTick;
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <HAL_GetTick+0x14>)
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	200004bc 	.word	0x200004bc

080049b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049b8:	f7ff ffee 	bl	8004998 <HAL_GetTick>
 80049bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c8:	d005      	beq.n	80049d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049ca:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <HAL_Delay+0x44>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049d6:	bf00      	nop
 80049d8:	f7ff ffde 	bl	8004998 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d8f7      	bhi.n	80049d8 <HAL_Delay+0x28>
  {
  }
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20000148 	.word	0x20000148

080049f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <__NVIC_SetPriorityGrouping+0x44>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a14:	4013      	ands	r3, r2
 8004a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a2a:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <__NVIC_SetPriorityGrouping+0x44>)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	60d3      	str	r3, [r2, #12]
}
 8004a30:	bf00      	nop
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a44:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <__NVIC_GetPriorityGrouping+0x18>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	0a1b      	lsrs	r3, r3, #8
 8004a4a:	f003 0307 	and.w	r3, r3, #7
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	db0b      	blt.n	8004a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	f003 021f 	and.w	r2, r3, #31
 8004a74:	4907      	ldr	r1, [pc, #28]	; (8004a94 <__NVIC_EnableIRQ+0x38>)
 8004a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	e000e100 	.word	0xe000e100

08004a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	6039      	str	r1, [r7, #0]
 8004aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	db0a      	blt.n	8004ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	490c      	ldr	r1, [pc, #48]	; (8004ae4 <__NVIC_SetPriority+0x4c>)
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	440b      	add	r3, r1
 8004abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ac0:	e00a      	b.n	8004ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	4908      	ldr	r1, [pc, #32]	; (8004ae8 <__NVIC_SetPriority+0x50>)
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	0112      	lsls	r2, r2, #4
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	761a      	strb	r2, [r3, #24]
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000e100 	.word	0xe000e100
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	; 0x24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f1c3 0307 	rsb	r3, r3, #7
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	bf28      	it	cs
 8004b0a:	2304      	movcs	r3, #4
 8004b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3304      	adds	r3, #4
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d902      	bls.n	8004b1c <NVIC_EncodePriority+0x30>
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	3b03      	subs	r3, #3
 8004b1a:	e000      	b.n	8004b1e <NVIC_EncodePriority+0x32>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	401a      	ands	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3e:	43d9      	mvns	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b44:	4313      	orrs	r3, r2
         );
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3724      	adds	r7, #36	; 0x24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ff4c 	bl	80049f8 <__NVIC_SetPriorityGrouping>
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b7a:	f7ff ff61 	bl	8004a40 <__NVIC_GetPriorityGrouping>
 8004b7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	6978      	ldr	r0, [r7, #20]
 8004b86:	f7ff ffb1 	bl	8004aec <NVIC_EncodePriority>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff ff80 	bl	8004a98 <__NVIC_SetPriority>
}
 8004b98:	bf00      	nop
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ff54 	bl	8004a5c <__NVIC_EnableIRQ>
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bca:	f7ff fee5 	bl	8004998 <HAL_GetTick>
 8004bce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d008      	beq.n	8004bee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2280      	movs	r2, #128	; 0x80
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e052      	b.n	8004c94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0216 	bic.w	r2, r2, #22
 8004bfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_DMA_Abort+0x62>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0208 	bic.w	r2, r2, #8
 8004c2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c3e:	e013      	b.n	8004c68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c40:	f7ff feaa 	bl	8004998 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d90c      	bls.n	8004c68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2203      	movs	r2, #3
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e015      	b.n	8004c94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e4      	bne.n	8004c40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7a:	223f      	movs	r2, #63	; 0x3f
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d004      	beq.n	8004cba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e00c      	b.n	8004cd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2205      	movs	r2, #5
 8004cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	e16b      	b.n	8004fd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	f040 815a 	bne.w	8004fce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d005      	beq.n	8004d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d130      	bne.n	8004d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4013      	ands	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d68:	2201      	movs	r2, #1
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f003 0201 	and.w	r2, r3, #1
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d017      	beq.n	8004dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	2203      	movs	r2, #3
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d123      	bne.n	8004e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	08da      	lsrs	r2, r3, #3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3208      	adds	r2, #8
 8004de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	220f      	movs	r2, #15
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	08da      	lsrs	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3208      	adds	r2, #8
 8004e1e:	69b9      	ldr	r1, [r7, #24]
 8004e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	2203      	movs	r2, #3
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 0203 	and.w	r2, r3, #3
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80b4 	beq.w	8004fce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	4b60      	ldr	r3, [pc, #384]	; (8004fec <HAL_GPIO_Init+0x30c>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	4a5f      	ldr	r2, [pc, #380]	; (8004fec <HAL_GPIO_Init+0x30c>)
 8004e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e74:	6453      	str	r3, [r2, #68]	; 0x44
 8004e76:	4b5d      	ldr	r3, [pc, #372]	; (8004fec <HAL_GPIO_Init+0x30c>)
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e82:	4a5b      	ldr	r2, [pc, #364]	; (8004ff0 <HAL_GPIO_Init+0x310>)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	3302      	adds	r3, #2
 8004e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	220f      	movs	r2, #15
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a52      	ldr	r2, [pc, #328]	; (8004ff4 <HAL_GPIO_Init+0x314>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d02b      	beq.n	8004f06 <HAL_GPIO_Init+0x226>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a51      	ldr	r2, [pc, #324]	; (8004ff8 <HAL_GPIO_Init+0x318>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d025      	beq.n	8004f02 <HAL_GPIO_Init+0x222>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a50      	ldr	r2, [pc, #320]	; (8004ffc <HAL_GPIO_Init+0x31c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01f      	beq.n	8004efe <HAL_GPIO_Init+0x21e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a4f      	ldr	r2, [pc, #316]	; (8005000 <HAL_GPIO_Init+0x320>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d019      	beq.n	8004efa <HAL_GPIO_Init+0x21a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a4e      	ldr	r2, [pc, #312]	; (8005004 <HAL_GPIO_Init+0x324>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <HAL_GPIO_Init+0x216>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a4d      	ldr	r2, [pc, #308]	; (8005008 <HAL_GPIO_Init+0x328>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00d      	beq.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a4c      	ldr	r2, [pc, #304]	; (800500c <HAL_GPIO_Init+0x32c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <HAL_GPIO_Init+0x20e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a4b      	ldr	r2, [pc, #300]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d101      	bne.n	8004eea <HAL_GPIO_Init+0x20a>
 8004ee6:	2307      	movs	r3, #7
 8004ee8:	e00e      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004eea:	2308      	movs	r3, #8
 8004eec:	e00c      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004eee:	2306      	movs	r3, #6
 8004ef0:	e00a      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004ef2:	2305      	movs	r3, #5
 8004ef4:	e008      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	e006      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004efa:	2303      	movs	r3, #3
 8004efc:	e004      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e002      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004f06:	2300      	movs	r3, #0
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	f002 0203 	and.w	r2, r2, #3
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	4093      	lsls	r3, r2
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f18:	4935      	ldr	r1, [pc, #212]	; (8004ff0 <HAL_GPIO_Init+0x310>)
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	089b      	lsrs	r3, r3, #2
 8004f1e:	3302      	adds	r3, #2
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f26:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <HAL_GPIO_Init+0x334>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f4a:	4a32      	ldr	r2, [pc, #200]	; (8005014 <HAL_GPIO_Init+0x334>)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f50:	4b30      	ldr	r3, [pc, #192]	; (8005014 <HAL_GPIO_Init+0x334>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f74:	4a27      	ldr	r2, [pc, #156]	; (8005014 <HAL_GPIO_Init+0x334>)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f7a:	4b26      	ldr	r3, [pc, #152]	; (8005014 <HAL_GPIO_Init+0x334>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f9e:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <HAL_GPIO_Init+0x334>)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_GPIO_Init+0x334>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc8:	4a12      	ldr	r2, [pc, #72]	; (8005014 <HAL_GPIO_Init+0x334>)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	f67f ae90 	bls.w	8004cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	3724      	adds	r7, #36	; 0x24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40013800 	.word	0x40013800
 8004ff4:	40020000 	.word	0x40020000
 8004ff8:	40020400 	.word	0x40020400
 8004ffc:	40020800 	.word	0x40020800
 8005000:	40020c00 	.word	0x40020c00
 8005004:	40021000 	.word	0x40021000
 8005008:	40021400 	.word	0x40021400
 800500c:	40021800 	.word	0x40021800
 8005010:	40021c00 	.word	0x40021c00
 8005014:	40013c00 	.word	0x40013c00

08005018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	807b      	strh	r3, [r7, #2]
 8005024:	4613      	mov	r3, r2
 8005026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005028:	787b      	ldrb	r3, [r7, #1]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005034:	e003      	b.n	800503e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	041a      	lsls	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	619a      	str	r2, [r3, #24]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e12b      	b.n	80052b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff f964 	bl	8004340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	; 0x24
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800509e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050b0:	f001 fbe4 	bl	800687c <HAL_RCC_GetPCLK1Freq>
 80050b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4a81      	ldr	r2, [pc, #516]	; (80052c0 <HAL_I2C_Init+0x274>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d807      	bhi.n	80050d0 <HAL_I2C_Init+0x84>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a80      	ldr	r2, [pc, #512]	; (80052c4 <HAL_I2C_Init+0x278>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bf94      	ite	ls
 80050c8:	2301      	movls	r3, #1
 80050ca:	2300      	movhi	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e006      	b.n	80050de <HAL_I2C_Init+0x92>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a7d      	ldr	r2, [pc, #500]	; (80052c8 <HAL_I2C_Init+0x27c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	bf94      	ite	ls
 80050d8:	2301      	movls	r3, #1
 80050da:	2300      	movhi	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0e7      	b.n	80052b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4a78      	ldr	r2, [pc, #480]	; (80052cc <HAL_I2C_Init+0x280>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	0c9b      	lsrs	r3, r3, #18
 80050f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4a6a      	ldr	r2, [pc, #424]	; (80052c0 <HAL_I2C_Init+0x274>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d802      	bhi.n	8005120 <HAL_I2C_Init+0xd4>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3301      	adds	r3, #1
 800511e:	e009      	b.n	8005134 <HAL_I2C_Init+0xe8>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	4a69      	ldr	r2, [pc, #420]	; (80052d0 <HAL_I2C_Init+0x284>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	099b      	lsrs	r3, r3, #6
 8005132:	3301      	adds	r3, #1
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005146:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	495c      	ldr	r1, [pc, #368]	; (80052c0 <HAL_I2C_Init+0x274>)
 8005150:	428b      	cmp	r3, r1
 8005152:	d819      	bhi.n	8005188 <HAL_I2C_Init+0x13c>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1e59      	subs	r1, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005168:	400b      	ands	r3, r1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_I2C_Init+0x138>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1e59      	subs	r1, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	fbb1 f3f3 	udiv	r3, r1, r3
 800517c:	3301      	adds	r3, #1
 800517e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005182:	e051      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 8005184:	2304      	movs	r3, #4
 8005186:	e04f      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d111      	bne.n	80051b4 <HAL_I2C_Init+0x168>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1e58      	subs	r0, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6859      	ldr	r1, [r3, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	440b      	add	r3, r1
 800519e:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a2:	3301      	adds	r3, #1
 80051a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e012      	b.n	80051da <HAL_I2C_Init+0x18e>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1e58      	subs	r0, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	0099      	lsls	r1, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Init+0x196>
 80051de:	2301      	movs	r3, #1
 80051e0:	e022      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10e      	bne.n	8005208 <HAL_I2C_Init+0x1bc>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1e58      	subs	r0, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6859      	ldr	r1, [r3, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	440b      	add	r3, r1
 80051f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80051fc:	3301      	adds	r3, #1
 80051fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005206:	e00f      	b.n	8005228 <HAL_I2C_Init+0x1dc>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1e58      	subs	r0, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6859      	ldr	r1, [r3, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	0099      	lsls	r1, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	fbb0 f3f3 	udiv	r3, r0, r3
 800521e:	3301      	adds	r3, #1
 8005220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	6809      	ldr	r1, [r1, #0]
 800522c:	4313      	orrs	r3, r2
 800522e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005256:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6911      	ldr	r1, [r2, #16]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68d2      	ldr	r2, [r2, #12]
 8005262:	4311      	orrs	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	430b      	orrs	r3, r1
 800526a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	000186a0 	.word	0x000186a0
 80052c4:	001e847f 	.word	0x001e847f
 80052c8:	003d08ff 	.word	0x003d08ff
 80052cc:	431bde83 	.word	0x431bde83
 80052d0:	10624dd3 	.word	0x10624dd3

080052d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	4608      	mov	r0, r1
 80052de:	4611      	mov	r1, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	817b      	strh	r3, [r7, #10]
 80052e6:	460b      	mov	r3, r1
 80052e8:	813b      	strh	r3, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052ee:	f7ff fb53 	bl	8004998 <HAL_GetTick>
 80052f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	f040 80d9 	bne.w	80054b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	2319      	movs	r3, #25
 8005308:	2201      	movs	r2, #1
 800530a:	496d      	ldr	r1, [pc, #436]	; (80054c0 <HAL_I2C_Mem_Write+0x1ec>)
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fc7f 	bl	8005c10 <I2C_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
 800531a:	e0cc      	b.n	80054b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_I2C_Mem_Write+0x56>
 8005326:	2302      	movs	r3, #2
 8005328:	e0c5      	b.n	80054b6 <HAL_I2C_Mem_Write+0x1e2>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d007      	beq.n	8005350 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800535e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2221      	movs	r2, #33	; 0x21
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2240      	movs	r2, #64	; 0x40
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a3a      	ldr	r2, [r7, #32]
 800537a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4a4d      	ldr	r2, [pc, #308]	; (80054c4 <HAL_I2C_Mem_Write+0x1f0>)
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005392:	88f8      	ldrh	r0, [r7, #6]
 8005394:	893a      	ldrh	r2, [r7, #8]
 8005396:	8979      	ldrh	r1, [r7, #10]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	9301      	str	r3, [sp, #4]
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	4603      	mov	r3, r0
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fab6 	bl	8005914 <I2C_RequestMemoryWrite>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d052      	beq.n	8005454 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e081      	b.n	80054b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fd00 	bl	8005dbc <I2C_WaitOnTXEFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00d      	beq.n	80053de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d107      	bne.n	80053da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e06b      	b.n	80054b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	781a      	ldrb	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b04      	cmp	r3, #4
 800541a:	d11b      	bne.n	8005454 <HAL_I2C_Mem_Write+0x180>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d017      	beq.n	8005454 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	781a      	ldrb	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1aa      	bne.n	80053b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fcec 	bl	8005e3e <I2C_WaitOnBTFFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00d      	beq.n	8005488 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	2b04      	cmp	r3, #4
 8005472:	d107      	bne.n	8005484 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005482:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e016      	b.n	80054b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e000      	b.n	80054b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80054b4:	2302      	movs	r3, #2
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	00100002 	.word	0x00100002
 80054c4:	ffff0000 	.word	0xffff0000

080054c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08c      	sub	sp, #48	; 0x30
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	4608      	mov	r0, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	461a      	mov	r2, r3
 80054d6:	4603      	mov	r3, r0
 80054d8:	817b      	strh	r3, [r7, #10]
 80054da:	460b      	mov	r3, r1
 80054dc:	813b      	strh	r3, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054e2:	f7ff fa59 	bl	8004998 <HAL_GetTick>
 80054e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	f040 8208 	bne.w	8005906 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	2319      	movs	r3, #25
 80054fc:	2201      	movs	r2, #1
 80054fe:	497b      	ldr	r1, [pc, #492]	; (80056ec <HAL_I2C_Mem_Read+0x224>)
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fb85 	bl	8005c10 <I2C_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800550c:	2302      	movs	r3, #2
 800550e:	e1fb      	b.n	8005908 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_I2C_Mem_Read+0x56>
 800551a:	2302      	movs	r3, #2
 800551c:	e1f4      	b.n	8005908 <HAL_I2C_Mem_Read+0x440>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d007      	beq.n	8005544 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2222      	movs	r2, #34	; 0x22
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2240      	movs	r2, #64	; 0x40
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a5b      	ldr	r2, [pc, #364]	; (80056f0 <HAL_I2C_Mem_Read+0x228>)
 8005584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005586:	88f8      	ldrh	r0, [r7, #6]
 8005588:	893a      	ldrh	r2, [r7, #8]
 800558a:	8979      	ldrh	r1, [r7, #10]
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	4603      	mov	r3, r0
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 fa52 	bl	8005a40 <I2C_RequestMemoryRead>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e1b0      	b.n	8005908 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d113      	bne.n	80055d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ae:	2300      	movs	r3, #0
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	623b      	str	r3, [r7, #32]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e184      	b.n	80058e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d11b      	bne.n	8005616 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	61fb      	str	r3, [r7, #28]
 8005602:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e164      	b.n	80058e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561a:	2b02      	cmp	r3, #2
 800561c:	d11b      	bne.n	8005656 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563e:	2300      	movs	r3, #0
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	e144      	b.n	80058e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800566c:	e138      	b.n	80058e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005672:	2b03      	cmp	r3, #3
 8005674:	f200 80f1 	bhi.w	800585a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	2b01      	cmp	r3, #1
 800567e:	d123      	bne.n	80056c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fc1b 	bl	8005ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e139      	b.n	8005908 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056c6:	e10b      	b.n	80058e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d14e      	bne.n	800576e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	2200      	movs	r2, #0
 80056d8:	4906      	ldr	r1, [pc, #24]	; (80056f4 <HAL_I2C_Mem_Read+0x22c>)
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fa98 	bl	8005c10 <I2C_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e10e      	b.n	8005908 <HAL_I2C_Mem_Read+0x440>
 80056ea:	bf00      	nop
 80056ec:	00100002 	.word	0x00100002
 80056f0:	ffff0000 	.word	0xffff0000
 80056f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800576c:	e0b8      	b.n	80058e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	2200      	movs	r2, #0
 8005776:	4966      	ldr	r1, [pc, #408]	; (8005910 <HAL_I2C_Mem_Read+0x448>)
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fa49 	bl	8005c10 <I2C_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0bf      	b.n	8005908 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	2200      	movs	r2, #0
 80057d2:	494f      	ldr	r1, [pc, #316]	; (8005910 <HAL_I2C_Mem_Read+0x448>)
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 fa1b 	bl	8005c10 <I2C_WaitOnFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e091      	b.n	8005908 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005858:	e042      	b.n	80058e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fb2e 	bl	8005ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e04c      	b.n	8005908 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d118      	bne.n	80058e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f47f aec2 	bne.w	800566e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005906:	2302      	movs	r3, #2
  }
}
 8005908:	4618      	mov	r0, r3
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	00010004 	.word	0x00010004

08005914 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af02      	add	r7, sp, #8
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	4608      	mov	r0, r1
 800591e:	4611      	mov	r1, r2
 8005920:	461a      	mov	r2, r3
 8005922:	4603      	mov	r3, r0
 8005924:	817b      	strh	r3, [r7, #10]
 8005926:	460b      	mov	r3, r1
 8005928:	813b      	strh	r3, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800593c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	2200      	movs	r2, #0
 8005946:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f960 	bl	8005c10 <I2C_WaitOnFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00d      	beq.n	8005972 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005964:	d103      	bne.n	800596e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e05f      	b.n	8005a32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005972:	897b      	ldrh	r3, [r7, #10]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005980:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	492d      	ldr	r1, [pc, #180]	; (8005a3c <I2C_RequestMemoryWrite+0x128>)
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f998 	bl	8005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e04c      	b.n	8005a32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b0:	6a39      	ldr	r1, [r7, #32]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fa02 	bl	8005dbc <I2C_WaitOnTXEFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00d      	beq.n	80059da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d107      	bne.n	80059d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e02b      	b.n	8005a32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059e0:	893b      	ldrh	r3, [r7, #8]
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	611a      	str	r2, [r3, #16]
 80059ea:	e021      	b.n	8005a30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059ec:	893b      	ldrh	r3, [r7, #8]
 80059ee:	0a1b      	lsrs	r3, r3, #8
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fc:	6a39      	ldr	r1, [r7, #32]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f9dc 	bl	8005dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d107      	bne.n	8005a22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e005      	b.n	8005a32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a26:	893b      	ldrh	r3, [r7, #8]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	00010002 	.word	0x00010002

08005a40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	4608      	mov	r0, r1
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	817b      	strh	r3, [r7, #10]
 8005a52:	460b      	mov	r3, r1
 8005a54:	813b      	strh	r3, [r7, #8]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f8c2 	bl	8005c10 <I2C_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00d      	beq.n	8005aae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa0:	d103      	bne.n	8005aaa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e0aa      	b.n	8005c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aae:	897b      	ldrh	r3, [r7, #10]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005abc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	6a3a      	ldr	r2, [r7, #32]
 8005ac2:	4952      	ldr	r1, [pc, #328]	; (8005c0c <I2C_RequestMemoryRead+0x1cc>)
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f8fa 	bl	8005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e097      	b.n	8005c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 f964 	bl	8005dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d107      	bne.n	8005b12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e076      	b.n	8005c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d105      	bne.n	8005b28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b1c:	893b      	ldrh	r3, [r7, #8]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	611a      	str	r2, [r3, #16]
 8005b26:	e021      	b.n	8005b6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b28:	893b      	ldrh	r3, [r7, #8]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b38:	6a39      	ldr	r1, [r7, #32]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f93e 	bl	8005dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00d      	beq.n	8005b62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d107      	bne.n	8005b5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e050      	b.n	8005c04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b62:	893b      	ldrh	r3, [r7, #8]
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6e:	6a39      	ldr	r1, [r7, #32]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f923 	bl	8005dbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00d      	beq.n	8005b98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d107      	bne.n	8005b94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e035      	b.n	8005c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f82b 	bl	8005c10 <I2C_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00d      	beq.n	8005bdc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bce:	d103      	bne.n	8005bd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e013      	b.n	8005c04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bdc:	897b      	ldrh	r3, [r7, #10]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	4906      	ldr	r1, [pc, #24]	; (8005c0c <I2C_RequestMemoryRead+0x1cc>)
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f863 	bl	8005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	00010002 	.word	0x00010002

08005c10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	603b      	str	r3, [r7, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c20:	e025      	b.n	8005c6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c28:	d021      	beq.n	8005c6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2a:	f7fe feb5 	bl	8004998 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d116      	bne.n	8005c6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e023      	b.n	8005cb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d10d      	bne.n	8005c94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	43da      	mvns	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bf0c      	ite	eq
 8005c8a:	2301      	moveq	r3, #1
 8005c8c:	2300      	movne	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	e00c      	b.n	8005cae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	43da      	mvns	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bf0c      	ite	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	2300      	movne	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d0b6      	beq.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
 8005cca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ccc:	e051      	b.n	8005d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cdc:	d123      	bne.n	8005d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cf6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f043 0204 	orr.w	r2, r3, #4
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e046      	b.n	8005db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d2c:	d021      	beq.n	8005d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2e:	f7fe fe33 	bl	8004998 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d302      	bcc.n	8005d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d116      	bne.n	8005d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f043 0220 	orr.w	r2, r3, #32
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e020      	b.n	8005db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d10c      	bne.n	8005d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	43da      	mvns	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4013      	ands	r3, r2
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bf14      	ite	ne
 8005d8e:	2301      	movne	r3, #1
 8005d90:	2300      	moveq	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	e00b      	b.n	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	43da      	mvns	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	4013      	ands	r3, r2
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bf14      	ite	ne
 8005da8:	2301      	movne	r3, #1
 8005daa:	2300      	moveq	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d18d      	bne.n	8005cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dc8:	e02d      	b.n	8005e26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 f8ce 	bl	8005f6c <I2C_IsAcknowledgeFailed>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e02d      	b.n	8005e36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de0:	d021      	beq.n	8005e26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de2:	f7fe fdd9 	bl	8004998 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d302      	bcc.n	8005df8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d116      	bne.n	8005e26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e007      	b.n	8005e36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d1ca      	bne.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e4a:	e02d      	b.n	8005ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f88d 	bl	8005f6c <I2C_IsAcknowledgeFailed>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e02d      	b.n	8005eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e62:	d021      	beq.n	8005ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e64:	f7fe fd98 	bl	8004998 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d302      	bcc.n	8005e7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d116      	bne.n	8005ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f043 0220 	orr.w	r2, r3, #32
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e007      	b.n	8005eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d1ca      	bne.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ecc:	e042      	b.n	8005f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d119      	bne.n	8005f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0210 	mvn.w	r2, #16
 8005ee4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e029      	b.n	8005f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f10:	f7fe fd42 	bl	8004998 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d302      	bcc.n	8005f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d116      	bne.n	8005f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f043 0220 	orr.w	r2, r3, #32
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e007      	b.n	8005f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5e:	2b40      	cmp	r3, #64	; 0x40
 8005f60:	d1b5      	bne.n	8005ece <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f82:	d11b      	bne.n	8005fbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	f043 0204 	orr.w	r2, r3, #4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
	...

08005fcc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_PWR_EnableBkUpAccess+0x20>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005fde:	687b      	ldr	r3, [r7, #4]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	420e0020 	.word	0x420e0020
 8005ff0:	40007000 	.word	0x40007000

08005ff4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005ffa:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006006:	687b      	ldr	r3, [r7, #4]
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	420e0020 	.word	0x420e0020
 8006018:	40007000 	.word	0x40007000

0800601c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e267      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d075      	beq.n	8006126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800603a:	4b88      	ldr	r3, [pc, #544]	; (800625c <HAL_RCC_OscConfig+0x240>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b04      	cmp	r3, #4
 8006044:	d00c      	beq.n	8006060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006046:	4b85      	ldr	r3, [pc, #532]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800604e:	2b08      	cmp	r3, #8
 8006050:	d112      	bne.n	8006078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006052:	4b82      	ldr	r3, [pc, #520]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800605e:	d10b      	bne.n	8006078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006060:	4b7e      	ldr	r3, [pc, #504]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d05b      	beq.n	8006124 <HAL_RCC_OscConfig+0x108>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d157      	bne.n	8006124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e242      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d106      	bne.n	8006090 <HAL_RCC_OscConfig+0x74>
 8006082:	4b76      	ldr	r3, [pc, #472]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a75      	ldr	r2, [pc, #468]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e01d      	b.n	80060cc <HAL_RCC_OscConfig+0xb0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006098:	d10c      	bne.n	80060b4 <HAL_RCC_OscConfig+0x98>
 800609a:	4b70      	ldr	r3, [pc, #448]	; (800625c <HAL_RCC_OscConfig+0x240>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a6f      	ldr	r2, [pc, #444]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	4b6d      	ldr	r3, [pc, #436]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a6c      	ldr	r2, [pc, #432]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e00b      	b.n	80060cc <HAL_RCC_OscConfig+0xb0>
 80060b4:	4b69      	ldr	r3, [pc, #420]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a68      	ldr	r2, [pc, #416]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	4b66      	ldr	r3, [pc, #408]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a65      	ldr	r2, [pc, #404]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d013      	beq.n	80060fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fe fc60 	bl	8004998 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060dc:	f7fe fc5c 	bl	8004998 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b64      	cmp	r3, #100	; 0x64
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e207      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ee:	4b5b      	ldr	r3, [pc, #364]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0xc0>
 80060fa:	e014      	b.n	8006126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fc:	f7fe fc4c 	bl	8004998 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006104:	f7fe fc48 	bl	8004998 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b64      	cmp	r3, #100	; 0x64
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e1f3      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006116:	4b51      	ldr	r3, [pc, #324]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0xe8>
 8006122:	e000      	b.n	8006126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d063      	beq.n	80061fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006132:	4b4a      	ldr	r3, [pc, #296]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 030c 	and.w	r3, r3, #12
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800613e:	4b47      	ldr	r3, [pc, #284]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006146:	2b08      	cmp	r3, #8
 8006148:	d11c      	bne.n	8006184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800614a:	4b44      	ldr	r3, [pc, #272]	; (800625c <HAL_RCC_OscConfig+0x240>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d116      	bne.n	8006184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006156:	4b41      	ldr	r3, [pc, #260]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_RCC_OscConfig+0x152>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d001      	beq.n	800616e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e1c7      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616e:	4b3b      	ldr	r3, [pc, #236]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4937      	ldr	r1, [pc, #220]	; (800625c <HAL_RCC_OscConfig+0x240>)
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006182:	e03a      	b.n	80061fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d020      	beq.n	80061ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800618c:	4b34      	ldr	r3, [pc, #208]	; (8006260 <HAL_RCC_OscConfig+0x244>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fe fc01 	bl	8004998 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800619a:	f7fe fbfd 	bl	8004998 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e1a8      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ac:	4b2b      	ldr	r3, [pc, #172]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b8:	4b28      	ldr	r3, [pc, #160]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	4925      	ldr	r1, [pc, #148]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	600b      	str	r3, [r1, #0]
 80061cc:	e015      	b.n	80061fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ce:	4b24      	ldr	r3, [pc, #144]	; (8006260 <HAL_RCC_OscConfig+0x244>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d4:	f7fe fbe0 	bl	8004998 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061dc:	f7fe fbdc 	bl	8004998 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e187      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_RCC_OscConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f0      	bne.n	80061dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d036      	beq.n	8006274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d016      	beq.n	800623c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800620e:	4b15      	ldr	r3, [pc, #84]	; (8006264 <HAL_RCC_OscConfig+0x248>)
 8006210:	2201      	movs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006214:	f7fe fbc0 	bl	8004998 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800621c:	f7fe fbbc 	bl	8004998 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e167      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800622e:	4b0b      	ldr	r3, [pc, #44]	; (800625c <HAL_RCC_OscConfig+0x240>)
 8006230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0f0      	beq.n	800621c <HAL_RCC_OscConfig+0x200>
 800623a:	e01b      	b.n	8006274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800623c:	4b09      	ldr	r3, [pc, #36]	; (8006264 <HAL_RCC_OscConfig+0x248>)
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006242:	f7fe fba9 	bl	8004998 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006248:	e00e      	b.n	8006268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800624a:	f7fe fba5 	bl	8004998 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d907      	bls.n	8006268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e150      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
 800625c:	40023800 	.word	0x40023800
 8006260:	42470000 	.word	0x42470000
 8006264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006268:	4b88      	ldr	r3, [pc, #544]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800626a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1ea      	bne.n	800624a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8097 	beq.w	80063b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006286:	4b81      	ldr	r3, [pc, #516]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10f      	bne.n	80062b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]
 8006296:	4b7d      	ldr	r3, [pc, #500]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	4a7c      	ldr	r2, [pc, #496]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800629c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a0:	6413      	str	r3, [r2, #64]	; 0x40
 80062a2:	4b7a      	ldr	r3, [pc, #488]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062aa:	60bb      	str	r3, [r7, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b2:	4b77      	ldr	r3, [pc, #476]	; (8006490 <HAL_RCC_OscConfig+0x474>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d118      	bne.n	80062f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062be:	4b74      	ldr	r3, [pc, #464]	; (8006490 <HAL_RCC_OscConfig+0x474>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a73      	ldr	r2, [pc, #460]	; (8006490 <HAL_RCC_OscConfig+0x474>)
 80062c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ca:	f7fe fb65 	bl	8004998 <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d0:	e008      	b.n	80062e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d2:	f7fe fb61 	bl	8004998 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e10c      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e4:	4b6a      	ldr	r3, [pc, #424]	; (8006490 <HAL_RCC_OscConfig+0x474>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0f0      	beq.n	80062d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d106      	bne.n	8006306 <HAL_RCC_OscConfig+0x2ea>
 80062f8:	4b64      	ldr	r3, [pc, #400]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	4a63      	ldr	r2, [pc, #396]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	6713      	str	r3, [r2, #112]	; 0x70
 8006304:	e01c      	b.n	8006340 <HAL_RCC_OscConfig+0x324>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b05      	cmp	r3, #5
 800630c:	d10c      	bne.n	8006328 <HAL_RCC_OscConfig+0x30c>
 800630e:	4b5f      	ldr	r3, [pc, #380]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	4a5e      	ldr	r2, [pc, #376]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006314:	f043 0304 	orr.w	r3, r3, #4
 8006318:	6713      	str	r3, [r2, #112]	; 0x70
 800631a:	4b5c      	ldr	r3, [pc, #368]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	4a5b      	ldr	r2, [pc, #364]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	6713      	str	r3, [r2, #112]	; 0x70
 8006326:	e00b      	b.n	8006340 <HAL_RCC_OscConfig+0x324>
 8006328:	4b58      	ldr	r3, [pc, #352]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800632a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632c:	4a57      	ldr	r2, [pc, #348]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800632e:	f023 0301 	bic.w	r3, r3, #1
 8006332:	6713      	str	r3, [r2, #112]	; 0x70
 8006334:	4b55      	ldr	r3, [pc, #340]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	4a54      	ldr	r2, [pc, #336]	; (800648c <HAL_RCC_OscConfig+0x470>)
 800633a:	f023 0304 	bic.w	r3, r3, #4
 800633e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d015      	beq.n	8006374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006348:	f7fe fb26 	bl	8004998 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800634e:	e00a      	b.n	8006366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006350:	f7fe fb22 	bl	8004998 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	; 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e0cb      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006366:	4b49      	ldr	r3, [pc, #292]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0ee      	beq.n	8006350 <HAL_RCC_OscConfig+0x334>
 8006372:	e014      	b.n	800639e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006374:	f7fe fb10 	bl	8004998 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800637a:	e00a      	b.n	8006392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800637c:	f7fe fb0c 	bl	8004998 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	f241 3288 	movw	r2, #5000	; 0x1388
 800638a:	4293      	cmp	r3, r2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e0b5      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006392:	4b3e      	ldr	r3, [pc, #248]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1ee      	bne.n	800637c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d105      	bne.n	80063b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063a4:	4b39      	ldr	r3, [pc, #228]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	4a38      	ldr	r2, [pc, #224]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80063aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80a1 	beq.w	80064fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063ba:	4b34      	ldr	r3, [pc, #208]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d05c      	beq.n	8006480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d141      	bne.n	8006452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ce:	4b31      	ldr	r3, [pc, #196]	; (8006494 <HAL_RCC_OscConfig+0x478>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fe fae0 	bl	8004998 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fe fadc 	bl	8004998 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e087      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ee:	4b27      	ldr	r3, [pc, #156]	; (800648c <HAL_RCC_OscConfig+0x470>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69da      	ldr	r2, [r3, #28]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	3b01      	subs	r3, #1
 8006414:	041b      	lsls	r3, r3, #16
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	491b      	ldr	r1, [pc, #108]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006420:	4313      	orrs	r3, r2
 8006422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006424:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <HAL_RCC_OscConfig+0x478>)
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642a:	f7fe fab5 	bl	8004998 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006432:	f7fe fab1 	bl	8004998 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e05c      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006444:	4b11      	ldr	r3, [pc, #68]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x416>
 8006450:	e054      	b.n	80064fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006452:	4b10      	ldr	r3, [pc, #64]	; (8006494 <HAL_RCC_OscConfig+0x478>)
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fe fa9e 	bl	8004998 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006460:	f7fe fa9a 	bl	8004998 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e045      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <HAL_RCC_OscConfig+0x470>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x444>
 800647e:	e03d      	b.n	80064fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d107      	bne.n	8006498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e038      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
 800648c:	40023800 	.word	0x40023800
 8006490:	40007000 	.word	0x40007000
 8006494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006498:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <HAL_RCC_OscConfig+0x4ec>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d028      	beq.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d121      	bne.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064be:	429a      	cmp	r2, r3
 80064c0:	d11a      	bne.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064c8:	4013      	ands	r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d111      	bne.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	3b01      	subs	r3, #1
 80064e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d107      	bne.n	80064f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d001      	beq.n	80064fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	40023800 	.word	0x40023800

0800650c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0cc      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006520:	4b68      	ldr	r3, [pc, #416]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d90c      	bls.n	8006548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652e:	4b65      	ldr	r3, [pc, #404]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006536:	4b63      	ldr	r3, [pc, #396]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d001      	beq.n	8006548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0b8      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d020      	beq.n	8006596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006560:	4b59      	ldr	r3, [pc, #356]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4a58      	ldr	r2, [pc, #352]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800656a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006578:	4b53      	ldr	r3, [pc, #332]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	4a52      	ldr	r2, [pc, #328]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006584:	4b50      	ldr	r3, [pc, #320]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	494d      	ldr	r1, [pc, #308]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d044      	beq.n	800662c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d107      	bne.n	80065ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065aa:	4b47      	ldr	r3, [pc, #284]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d119      	bne.n	80065ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e07f      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d003      	beq.n	80065ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d107      	bne.n	80065da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ca:	4b3f      	ldr	r3, [pc, #252]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e06f      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065da:	4b3b      	ldr	r3, [pc, #236]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e067      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ea:	4b37      	ldr	r3, [pc, #220]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 0203 	bic.w	r2, r3, #3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	4934      	ldr	r1, [pc, #208]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065fc:	f7fe f9cc 	bl	8004998 <HAL_GetTick>
 8006600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006602:	e00a      	b.n	800661a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006604:	f7fe f9c8 	bl	8004998 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e04f      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800661a:	4b2b      	ldr	r3, [pc, #172]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 020c 	and.w	r2, r3, #12
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	429a      	cmp	r2, r3
 800662a:	d1eb      	bne.n	8006604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800662c:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d20c      	bcs.n	8006654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663a:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006642:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d001      	beq.n	8006654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e032      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006660:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	4916      	ldr	r1, [pc, #88]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800666e:	4313      	orrs	r3, r2
 8006670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	490e      	ldr	r1, [pc, #56]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	4313      	orrs	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006692:	f000 f821 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 8006696:	4602      	mov	r2, r0
 8006698:	4b0b      	ldr	r3, [pc, #44]	; (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	490a      	ldr	r1, [pc, #40]	; (80066cc <HAL_RCC_ClockConfig+0x1c0>)
 80066a4:	5ccb      	ldrb	r3, [r1, r3]
 80066a6:	fa22 f303 	lsr.w	r3, r2, r3
 80066aa:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <HAL_RCC_ClockConfig+0x1c4>)
 80066ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <HAL_RCC_ClockConfig+0x1c8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe f832 	bl	800471c <HAL_InitTick>

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40023c00 	.word	0x40023c00
 80066c8:	40023800 	.word	0x40023800
 80066cc:	0800d2ac 	.word	0x0800d2ac
 80066d0:	20000140 	.word	0x20000140
 80066d4:	20000144 	.word	0x20000144

080066d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066dc:	b090      	sub	sp, #64	; 0x40
 80066de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
 80066e4:	2300      	movs	r3, #0
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e8:	2300      	movs	r3, #0
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066f0:	4b59      	ldr	r3, [pc, #356]	; (8006858 <HAL_RCC_GetSysClockFreq+0x180>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 030c 	and.w	r3, r3, #12
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d00d      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0x40>
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	f200 80a1 	bhi.w	8006844 <HAL_RCC_GetSysClockFreq+0x16c>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <HAL_RCC_GetSysClockFreq+0x34>
 8006706:	2b04      	cmp	r3, #4
 8006708:	d003      	beq.n	8006712 <HAL_RCC_GetSysClockFreq+0x3a>
 800670a:	e09b      	b.n	8006844 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800670c:	4b53      	ldr	r3, [pc, #332]	; (800685c <HAL_RCC_GetSysClockFreq+0x184>)
 800670e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006710:	e09b      	b.n	800684a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006712:	4b53      	ldr	r3, [pc, #332]	; (8006860 <HAL_RCC_GetSysClockFreq+0x188>)
 8006714:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006716:	e098      	b.n	800684a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006718:	4b4f      	ldr	r3, [pc, #316]	; (8006858 <HAL_RCC_GetSysClockFreq+0x180>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006722:	4b4d      	ldr	r3, [pc, #308]	; (8006858 <HAL_RCC_GetSysClockFreq+0x180>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d028      	beq.n	8006780 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800672e:	4b4a      	ldr	r3, [pc, #296]	; (8006858 <HAL_RCC_GetSysClockFreq+0x180>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	099b      	lsrs	r3, r3, #6
 8006734:	2200      	movs	r2, #0
 8006736:	623b      	str	r3, [r7, #32]
 8006738:	627a      	str	r2, [r7, #36]	; 0x24
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006740:	2100      	movs	r1, #0
 8006742:	4b47      	ldr	r3, [pc, #284]	; (8006860 <HAL_RCC_GetSysClockFreq+0x188>)
 8006744:	fb03 f201 	mul.w	r2, r3, r1
 8006748:	2300      	movs	r3, #0
 800674a:	fb00 f303 	mul.w	r3, r0, r3
 800674e:	4413      	add	r3, r2
 8006750:	4a43      	ldr	r2, [pc, #268]	; (8006860 <HAL_RCC_GetSysClockFreq+0x188>)
 8006752:	fba0 1202 	umull	r1, r2, r0, r2
 8006756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006758:	460a      	mov	r2, r1
 800675a:	62ba      	str	r2, [r7, #40]	; 0x28
 800675c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800675e:	4413      	add	r3, r2
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006764:	2200      	movs	r2, #0
 8006766:	61bb      	str	r3, [r7, #24]
 8006768:	61fa      	str	r2, [r7, #28]
 800676a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800676e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006772:	f7fa fa43 	bl	8000bfc <__aeabi_uldivmod>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4613      	mov	r3, r2
 800677c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800677e:	e053      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006780:	4b35      	ldr	r3, [pc, #212]	; (8006858 <HAL_RCC_GetSysClockFreq+0x180>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	099b      	lsrs	r3, r3, #6
 8006786:	2200      	movs	r2, #0
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	617a      	str	r2, [r7, #20]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006792:	f04f 0b00 	mov.w	fp, #0
 8006796:	4652      	mov	r2, sl
 8006798:	465b      	mov	r3, fp
 800679a:	f04f 0000 	mov.w	r0, #0
 800679e:	f04f 0100 	mov.w	r1, #0
 80067a2:	0159      	lsls	r1, r3, #5
 80067a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067a8:	0150      	lsls	r0, r2, #5
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	ebb2 080a 	subs.w	r8, r2, sl
 80067b2:	eb63 090b 	sbc.w	r9, r3, fp
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80067c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80067c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80067ca:	ebb2 0408 	subs.w	r4, r2, r8
 80067ce:	eb63 0509 	sbc.w	r5, r3, r9
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	00eb      	lsls	r3, r5, #3
 80067dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067e0:	00e2      	lsls	r2, r4, #3
 80067e2:	4614      	mov	r4, r2
 80067e4:	461d      	mov	r5, r3
 80067e6:	eb14 030a 	adds.w	r3, r4, sl
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	eb45 030b 	adc.w	r3, r5, fp
 80067f0:	607b      	str	r3, [r7, #4]
 80067f2:	f04f 0200 	mov.w	r2, #0
 80067f6:	f04f 0300 	mov.w	r3, #0
 80067fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067fe:	4629      	mov	r1, r5
 8006800:	028b      	lsls	r3, r1, #10
 8006802:	4621      	mov	r1, r4
 8006804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006808:	4621      	mov	r1, r4
 800680a:	028a      	lsls	r2, r1, #10
 800680c:	4610      	mov	r0, r2
 800680e:	4619      	mov	r1, r3
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	2200      	movs	r2, #0
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	60fa      	str	r2, [r7, #12]
 8006818:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800681c:	f7fa f9ee 	bl	8000bfc <__aeabi_uldivmod>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4613      	mov	r3, r2
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <HAL_RCC_GetSysClockFreq+0x180>)
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	3301      	adds	r3, #1
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006840:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006842:	e002      	b.n	800684a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <HAL_RCC_GetSysClockFreq+0x184>)
 8006846:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800684c:	4618      	mov	r0, r3
 800684e:	3740      	adds	r7, #64	; 0x40
 8006850:	46bd      	mov	sp, r7
 8006852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006856:	bf00      	nop
 8006858:	40023800 	.word	0x40023800
 800685c:	00f42400 	.word	0x00f42400
 8006860:	017d7840 	.word	0x017d7840

08006864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006868:	4b03      	ldr	r3, [pc, #12]	; (8006878 <HAL_RCC_GetHCLKFreq+0x14>)
 800686a:	681b      	ldr	r3, [r3, #0]
}
 800686c:	4618      	mov	r0, r3
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	20000140 	.word	0x20000140

0800687c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006880:	f7ff fff0 	bl	8006864 <HAL_RCC_GetHCLKFreq>
 8006884:	4602      	mov	r2, r0
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	0a9b      	lsrs	r3, r3, #10
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	4903      	ldr	r1, [pc, #12]	; (80068a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006892:	5ccb      	ldrb	r3, [r1, r3]
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006898:	4618      	mov	r0, r3
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40023800 	.word	0x40023800
 80068a0:	0800d2bc 	.word	0x0800d2bc

080068a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068a8:	f7ff ffdc 	bl	8006864 <HAL_RCC_GetHCLKFreq>
 80068ac:	4602      	mov	r2, r0
 80068ae:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	0b5b      	lsrs	r3, r3, #13
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	4903      	ldr	r1, [pc, #12]	; (80068c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ba:	5ccb      	ldrb	r3, [r1, r3]
 80068bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	40023800 	.word	0x40023800
 80068c8:	0800d2bc 	.word	0x0800d2bc

080068cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	220f      	movs	r2, #15
 80068da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068dc:	4b12      	ldr	r3, [pc, #72]	; (8006928 <HAL_RCC_GetClockConfig+0x5c>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 0203 	and.w	r2, r3, #3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068e8:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <HAL_RCC_GetClockConfig+0x5c>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <HAL_RCC_GetClockConfig+0x5c>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006900:	4b09      	ldr	r3, [pc, #36]	; (8006928 <HAL_RCC_GetClockConfig+0x5c>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	08db      	lsrs	r3, r3, #3
 8006906:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800690e:	4b07      	ldr	r3, [pc, #28]	; (800692c <HAL_RCC_GetClockConfig+0x60>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0207 	and.w	r2, r3, #7
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	601a      	str	r2, [r3, #0]
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40023800 	.word	0x40023800
 800692c:	40023c00 	.word	0x40023c00

08006930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e041      	b.n	80069c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fd fd3a 	bl	80043d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f000 fffc 	bl	800796c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d001      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e04e      	b.n	8006a86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d022      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a12:	d01d      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1f      	ldr	r2, [pc, #124]	; (8006a98 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d018      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1e      	ldr	r2, [pc, #120]	; (8006a9c <HAL_TIM_Base_Start_IT+0xcc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1c      	ldr	r2, [pc, #112]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1b      	ldr	r2, [pc, #108]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a19      	ldr	r2, [pc, #100]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a18      	ldr	r2, [pc, #96]	; (8006aac <HAL_TIM_Base_Start_IT+0xdc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d111      	bne.n	8006a74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d010      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0201 	orr.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a72:	e007      	b.n	8006a84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40000400 	.word	0x40000400
 8006a9c:	40000800 	.word	0x40000800
 8006aa0:	40000c00 	.word	0x40000c00
 8006aa4:	40010400 	.word	0x40010400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40001800 	.word	0x40001800

08006ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e041      	b.n	8006b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f839 	bl	8006b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f000 ff3c 	bl	800796c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <HAL_TIM_PWM_Start+0x24>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	bf14      	ite	ne
 8006b80:	2301      	movne	r3, #1
 8006b82:	2300      	moveq	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	e022      	b.n	8006bce <HAL_TIM_PWM_Start+0x6a>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d109      	bne.n	8006ba2 <HAL_TIM_PWM_Start+0x3e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	bf14      	ite	ne
 8006b9a:	2301      	movne	r3, #1
 8006b9c:	2300      	moveq	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	e015      	b.n	8006bce <HAL_TIM_PWM_Start+0x6a>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d109      	bne.n	8006bbc <HAL_TIM_PWM_Start+0x58>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	bf14      	ite	ne
 8006bb4:	2301      	movne	r3, #1
 8006bb6:	2300      	moveq	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e008      	b.n	8006bce <HAL_TIM_PWM_Start+0x6a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	bf14      	ite	ne
 8006bc8:	2301      	movne	r3, #1
 8006bca:	2300      	moveq	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e07c      	b.n	8006cd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <HAL_TIM_PWM_Start+0x82>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006be4:	e013      	b.n	8006c0e <HAL_TIM_PWM_Start+0xaa>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b04      	cmp	r3, #4
 8006bea:	d104      	bne.n	8006bf6 <HAL_TIM_PWM_Start+0x92>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf4:	e00b      	b.n	8006c0e <HAL_TIM_PWM_Start+0xaa>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d104      	bne.n	8006c06 <HAL_TIM_PWM_Start+0xa2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c04:	e003      	b.n	8006c0e <HAL_TIM_PWM_Start+0xaa>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2201      	movs	r2, #1
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f001 fabc 	bl	8008194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a2d      	ldr	r2, [pc, #180]	; (8006cd8 <HAL_TIM_PWM_Start+0x174>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_TIM_PWM_Start+0xcc>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a2c      	ldr	r2, [pc, #176]	; (8006cdc <HAL_TIM_PWM_Start+0x178>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d101      	bne.n	8006c34 <HAL_TIM_PWM_Start+0xd0>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <HAL_TIM_PWM_Start+0xd2>
 8006c34:	2300      	movs	r3, #0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a22      	ldr	r2, [pc, #136]	; (8006cd8 <HAL_TIM_PWM_Start+0x174>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d022      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x136>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5c:	d01d      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x136>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1f      	ldr	r2, [pc, #124]	; (8006ce0 <HAL_TIM_PWM_Start+0x17c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d018      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x136>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ce4 <HAL_TIM_PWM_Start+0x180>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x136>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1c      	ldr	r2, [pc, #112]	; (8006ce8 <HAL_TIM_PWM_Start+0x184>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00e      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x136>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a16      	ldr	r2, [pc, #88]	; (8006cdc <HAL_TIM_PWM_Start+0x178>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d009      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x136>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a18      	ldr	r2, [pc, #96]	; (8006cec <HAL_TIM_PWM_Start+0x188>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x136>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a16      	ldr	r2, [pc, #88]	; (8006cf0 <HAL_TIM_PWM_Start+0x18c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d111      	bne.n	8006cbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 0307 	and.w	r3, r3, #7
 8006ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b06      	cmp	r3, #6
 8006caa:	d010      	beq.n	8006cce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cbc:	e007      	b.n	8006cce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0201 	orr.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40010400 	.word	0x40010400
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800
 8006ce8:	40000c00 	.word	0x40000c00
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40001800 	.word	0x40001800

08006cf4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e041      	b.n	8006d8a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fd fc24 	bl	8004568 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f000 fe1a 	bl	800796c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <HAL_TIM_IC_Start_IT+0x1e>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	e013      	b.n	8006dda <HAL_TIM_IC_Start_IT+0x46>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_IC_Start_IT+0x2e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	e00b      	b.n	8006dda <HAL_TIM_IC_Start_IT+0x46>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d104      	bne.n	8006dd2 <HAL_TIM_IC_Start_IT+0x3e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	e003      	b.n	8006dda <HAL_TIM_IC_Start_IT+0x46>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d104      	bne.n	8006dec <HAL_TIM_IC_Start_IT+0x58>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	e013      	b.n	8006e14 <HAL_TIM_IC_Start_IT+0x80>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d104      	bne.n	8006dfc <HAL_TIM_IC_Start_IT+0x68>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	e00b      	b.n	8006e14 <HAL_TIM_IC_Start_IT+0x80>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d104      	bne.n	8006e0c <HAL_TIM_IC_Start_IT+0x78>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	e003      	b.n	8006e14 <HAL_TIM_IC_Start_IT+0x80>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d102      	bne.n	8006e22 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e1c:	7b7b      	ldrb	r3, [r7, #13]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d001      	beq.n	8006e26 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e0cc      	b.n	8006fc0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <HAL_TIM_IC_Start_IT+0xa2>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e34:	e013      	b.n	8006e5e <HAL_TIM_IC_Start_IT+0xca>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_IC_Start_IT+0xb2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e44:	e00b      	b.n	8006e5e <HAL_TIM_IC_Start_IT+0xca>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_IC_Start_IT+0xc2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e54:	e003      	b.n	8006e5e <HAL_TIM_IC_Start_IT+0xca>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <HAL_TIM_IC_Start_IT+0xda>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e6c:	e013      	b.n	8006e96 <HAL_TIM_IC_Start_IT+0x102>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d104      	bne.n	8006e7e <HAL_TIM_IC_Start_IT+0xea>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e7c:	e00b      	b.n	8006e96 <HAL_TIM_IC_Start_IT+0x102>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d104      	bne.n	8006e8e <HAL_TIM_IC_Start_IT+0xfa>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e8c:	e003      	b.n	8006e96 <HAL_TIM_IC_Start_IT+0x102>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b0c      	cmp	r3, #12
 8006e9a:	d841      	bhi.n	8006f20 <HAL_TIM_IC_Start_IT+0x18c>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <HAL_TIM_IC_Start_IT+0x110>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006ed9 	.word	0x08006ed9
 8006ea8:	08006f21 	.word	0x08006f21
 8006eac:	08006f21 	.word	0x08006f21
 8006eb0:	08006f21 	.word	0x08006f21
 8006eb4:	08006eeb 	.word	0x08006eeb
 8006eb8:	08006f21 	.word	0x08006f21
 8006ebc:	08006f21 	.word	0x08006f21
 8006ec0:	08006f21 	.word	0x08006f21
 8006ec4:	08006efd 	.word	0x08006efd
 8006ec8:	08006f21 	.word	0x08006f21
 8006ecc:	08006f21 	.word	0x08006f21
 8006ed0:	08006f21 	.word	0x08006f21
 8006ed4:	08006f0f 	.word	0x08006f0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0202 	orr.w	r2, r2, #2
 8006ee6:	60da      	str	r2, [r3, #12]
      break;
 8006ee8:	e01d      	b.n	8006f26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0204 	orr.w	r2, r2, #4
 8006ef8:	60da      	str	r2, [r3, #12]
      break;
 8006efa:	e014      	b.n	8006f26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0208 	orr.w	r2, r2, #8
 8006f0a:	60da      	str	r2, [r3, #12]
      break;
 8006f0c:	e00b      	b.n	8006f26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0210 	orr.w	r2, r2, #16
 8006f1c:	60da      	str	r2, [r3, #12]
      break;
 8006f1e:	e002      	b.n	8006f26 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
      break;
 8006f24:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d148      	bne.n	8006fbe <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2201      	movs	r2, #1
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f92d 	bl	8008194 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a22      	ldr	r2, [pc, #136]	; (8006fc8 <HAL_TIM_IC_Start_IT+0x234>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d022      	beq.n	8006f8a <HAL_TIM_IC_Start_IT+0x1f6>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d01d      	beq.n	8006f8a <HAL_TIM_IC_Start_IT+0x1f6>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a1e      	ldr	r2, [pc, #120]	; (8006fcc <HAL_TIM_IC_Start_IT+0x238>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d018      	beq.n	8006f8a <HAL_TIM_IC_Start_IT+0x1f6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1c      	ldr	r2, [pc, #112]	; (8006fd0 <HAL_TIM_IC_Start_IT+0x23c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_TIM_IC_Start_IT+0x1f6>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <HAL_TIM_IC_Start_IT+0x240>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_TIM_IC_Start_IT+0x1f6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a19      	ldr	r2, [pc, #100]	; (8006fd8 <HAL_TIM_IC_Start_IT+0x244>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d009      	beq.n	8006f8a <HAL_TIM_IC_Start_IT+0x1f6>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <HAL_TIM_IC_Start_IT+0x248>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d004      	beq.n	8006f8a <HAL_TIM_IC_Start_IT+0x1f6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <HAL_TIM_IC_Start_IT+0x24c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d111      	bne.n	8006fae <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b06      	cmp	r3, #6
 8006f9a:	d010      	beq.n	8006fbe <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fac:	e007      	b.n	8006fbe <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0201 	orr.w	r2, r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800
 8006fd4:	40000c00 	.word	0x40000c00
 8006fd8:	40010400 	.word	0x40010400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40001800 	.word	0x40001800

08006fe4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e097      	b.n	8007128 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d106      	bne.n	8007012 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7fd fa45 	bl	800449c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007028:	f023 0307 	bic.w	r3, r3, #7
 800702c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3304      	adds	r3, #4
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f000 fc97 	bl	800796c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007066:	f023 0303 	bic.w	r3, r3, #3
 800706a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689a      	ldr	r2, [r3, #8]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	4313      	orrs	r3, r2
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007084:	f023 030c 	bic.w	r3, r3, #12
 8007088:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007090:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	4313      	orrs	r3, r2
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	011a      	lsls	r2, r3, #4
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	031b      	lsls	r3, r3, #12
 80070b4:	4313      	orrs	r3, r2
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80070c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80070ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	4313      	orrs	r3, r2
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007140:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007148:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007150:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007158:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d110      	bne.n	8007182 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d102      	bne.n	800716c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007166:	7b7b      	ldrb	r3, [r7, #13]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d001      	beq.n	8007170 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e069      	b.n	8007244 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007180:	e031      	b.n	80071e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d110      	bne.n	80071aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d102      	bne.n	8007194 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800718e:	7b3b      	ldrb	r3, [r7, #12]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d001      	beq.n	8007198 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e055      	b.n	8007244 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071a8:	e01d      	b.n	80071e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d108      	bne.n	80071c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d105      	bne.n	80071c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071b6:	7b7b      	ldrb	r3, [r7, #13]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d102      	bne.n	80071c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80071bc:	7b3b      	ldrb	r3, [r7, #12]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d001      	beq.n	80071c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e03e      	b.n	8007244 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2202      	movs	r2, #2
 80071ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2202      	movs	r2, #2
 80071da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <HAL_TIM_Encoder_Start+0xc4>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d008      	beq.n	8007204 <HAL_TIM_Encoder_Start+0xd4>
 80071f2:	e00f      	b.n	8007214 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2201      	movs	r2, #1
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 ffc9 	bl	8008194 <TIM_CCxChannelCmd>
      break;
 8007202:	e016      	b.n	8007232 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2201      	movs	r2, #1
 800720a:	2104      	movs	r1, #4
 800720c:	4618      	mov	r0, r3
 800720e:	f000 ffc1 	bl	8008194 <TIM_CCxChannelCmd>
      break;
 8007212:	e00e      	b.n	8007232 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2201      	movs	r2, #1
 800721a:	2100      	movs	r1, #0
 800721c:	4618      	mov	r0, r3
 800721e:	f000 ffb9 	bl	8008194 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2201      	movs	r2, #1
 8007228:	2104      	movs	r1, #4
 800722a:	4618      	mov	r0, r3
 800722c:	f000 ffb2 	bl	8008194 <TIM_CCxChannelCmd>
      break;
 8007230:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0201 	orr.w	r2, r2, #1
 8007240:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b02      	cmp	r3, #2
 8007260:	d122      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b02      	cmp	r3, #2
 800726e:	d11b      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0202 	mvn.w	r2, #2
 8007278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fa fab6 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8007294:	e005      	b.n	80072a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fb4a 	bl	8007930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fb51 	bl	8007944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d122      	bne.n	80072fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	d11b      	bne.n	80072fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0204 	mvn.w	r2, #4
 80072cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2202      	movs	r2, #2
 80072d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fa fa8c 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 80072e8:	e005      	b.n	80072f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fb20 	bl	8007930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fb27 	bl	8007944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b08      	cmp	r3, #8
 8007308:	d122      	bne.n	8007350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b08      	cmp	r3, #8
 8007316:	d11b      	bne.n	8007350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0208 	mvn.w	r2, #8
 8007320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2204      	movs	r2, #4
 8007326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fa fa62 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 800733c:	e005      	b.n	800734a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 faf6 	bl	8007930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fafd 	bl	8007944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	2b10      	cmp	r3, #16
 800735c:	d122      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0310 	and.w	r3, r3, #16
 8007368:	2b10      	cmp	r3, #16
 800736a:	d11b      	bne.n	80073a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0210 	mvn.w	r2, #16
 8007374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2208      	movs	r2, #8
 800737a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fa fa38 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8007390:	e005      	b.n	800739e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 facc 	bl	8007930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fad3 	bl	8007944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d10e      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d107      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0201 	mvn.w	r2, #1
 80073c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fc ff74 	bl	80042b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073da:	2b80      	cmp	r3, #128	; 0x80
 80073dc:	d10e      	bne.n	80073fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e8:	2b80      	cmp	r3, #128	; 0x80
 80073ea:	d107      	bne.n	80073fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 ffca 	bl	8008390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b40      	cmp	r3, #64	; 0x40
 8007408:	d10e      	bne.n	8007428 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	d107      	bne.n	8007428 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa98 	bl	8007958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b20      	cmp	r3, #32
 8007434:	d10e      	bne.n	8007454 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b20      	cmp	r3, #32
 8007442:	d107      	bne.n	8007454 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0220 	mvn.w	r2, #32
 800744c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 ff94 	bl	800837c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007476:	2302      	movs	r3, #2
 8007478:	e088      	b.n	800758c <HAL_TIM_IC_ConfigChannel+0x130>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d11b      	bne.n	80074c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f000 fcb8 	bl	8007e0c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699a      	ldr	r2, [r3, #24]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 020c 	bic.w	r2, r2, #12
 80074aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6999      	ldr	r1, [r3, #24]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	619a      	str	r2, [r3, #24]
 80074be:	e060      	b.n	8007582 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d11c      	bne.n	8007500 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6819      	ldr	r1, [r3, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f000 fd3c 	bl	8007f52 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699a      	ldr	r2, [r3, #24]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80074e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6999      	ldr	r1, [r3, #24]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	021a      	lsls	r2, r3, #8
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	619a      	str	r2, [r3, #24]
 80074fe:	e040      	b.n	8007582 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b08      	cmp	r3, #8
 8007504:	d11b      	bne.n	800753e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6819      	ldr	r1, [r3, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f000 fd89 	bl	800802c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69da      	ldr	r2, [r3, #28]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 020c 	bic.w	r2, r2, #12
 8007528:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69d9      	ldr	r1, [r3, #28]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	61da      	str	r2, [r3, #28]
 800753c:	e021      	b.n	8007582 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b0c      	cmp	r3, #12
 8007542:	d11c      	bne.n	800757e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6819      	ldr	r1, [r3, #0]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f000 fda6 	bl	80080a4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	69da      	ldr	r2, [r3, #28]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007566:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69d9      	ldr	r1, [r3, #28]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	021a      	lsls	r2, r3, #8
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	61da      	str	r2, [r3, #28]
 800757c:	e001      	b.n	8007582 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e0ae      	b.n	8007710 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b0c      	cmp	r3, #12
 80075be:	f200 809f 	bhi.w	8007700 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075c2:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075fd 	.word	0x080075fd
 80075cc:	08007701 	.word	0x08007701
 80075d0:	08007701 	.word	0x08007701
 80075d4:	08007701 	.word	0x08007701
 80075d8:	0800763d 	.word	0x0800763d
 80075dc:	08007701 	.word	0x08007701
 80075e0:	08007701 	.word	0x08007701
 80075e4:	08007701 	.word	0x08007701
 80075e8:	0800767f 	.word	0x0800767f
 80075ec:	08007701 	.word	0x08007701
 80075f0:	08007701 	.word	0x08007701
 80075f4:	08007701 	.word	0x08007701
 80075f8:	080076bf 	.word	0x080076bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fa52 	bl	8007aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0208 	orr.w	r2, r2, #8
 8007616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0204 	bic.w	r2, r2, #4
 8007626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6999      	ldr	r1, [r3, #24]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	619a      	str	r2, [r3, #24]
      break;
 800763a:	e064      	b.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 faa2 	bl	8007b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6999      	ldr	r1, [r3, #24]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	021a      	lsls	r2, r3, #8
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	619a      	str	r2, [r3, #24]
      break;
 800767c:	e043      	b.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	4618      	mov	r0, r3
 8007686:	f000 faf7 	bl	8007c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0208 	orr.w	r2, r2, #8
 8007698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69da      	ldr	r2, [r3, #28]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0204 	bic.w	r2, r2, #4
 80076a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69d9      	ldr	r1, [r3, #28]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	61da      	str	r2, [r3, #28]
      break;
 80076bc:	e023      	b.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 fb4b 	bl	8007d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69d9      	ldr	r1, [r3, #28]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	021a      	lsls	r2, r3, #8
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	61da      	str	r2, [r3, #28]
      break;
 80076fe:	e002      	b.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800770e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_TIM_ConfigClockSource+0x1c>
 8007730:	2302      	movs	r3, #2
 8007732:	e0b4      	b.n	800789e <HAL_TIM_ConfigClockSource+0x186>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800775a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800776c:	d03e      	beq.n	80077ec <HAL_TIM_ConfigClockSource+0xd4>
 800776e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007772:	f200 8087 	bhi.w	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 8007776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777a:	f000 8086 	beq.w	800788a <HAL_TIM_ConfigClockSource+0x172>
 800777e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007782:	d87f      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 8007784:	2b70      	cmp	r3, #112	; 0x70
 8007786:	d01a      	beq.n	80077be <HAL_TIM_ConfigClockSource+0xa6>
 8007788:	2b70      	cmp	r3, #112	; 0x70
 800778a:	d87b      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 800778c:	2b60      	cmp	r3, #96	; 0x60
 800778e:	d050      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x11a>
 8007790:	2b60      	cmp	r3, #96	; 0x60
 8007792:	d877      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 8007794:	2b50      	cmp	r3, #80	; 0x50
 8007796:	d03c      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0xfa>
 8007798:	2b50      	cmp	r3, #80	; 0x50
 800779a:	d873      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 800779c:	2b40      	cmp	r3, #64	; 0x40
 800779e:	d058      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x13a>
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	d86f      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 80077a4:	2b30      	cmp	r3, #48	; 0x30
 80077a6:	d064      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x15a>
 80077a8:	2b30      	cmp	r3, #48	; 0x30
 80077aa:	d86b      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d060      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x15a>
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d867      	bhi.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d05c      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x15a>
 80077b8:	2b10      	cmp	r3, #16
 80077ba:	d05a      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x15a>
 80077bc:	e062      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	6899      	ldr	r1, [r3, #8]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f000 fcc1 	bl	8008154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	609a      	str	r2, [r3, #8]
      break;
 80077ea:	e04f      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6899      	ldr	r1, [r3, #8]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f000 fcaa 	bl	8008154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800780e:	609a      	str	r2, [r3, #8]
      break;
 8007810:	e03c      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6859      	ldr	r1, [r3, #4]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	461a      	mov	r2, r3
 8007820:	f000 fb68 	bl	8007ef4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2150      	movs	r1, #80	; 0x50
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fc77 	bl	800811e <TIM_ITRx_SetConfig>
      break;
 8007830:	e02c      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6859      	ldr	r1, [r3, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	461a      	mov	r2, r3
 8007840:	f000 fbc4 	bl	8007fcc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2160      	movs	r1, #96	; 0x60
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fc67 	bl	800811e <TIM_ITRx_SetConfig>
      break;
 8007850:	e01c      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	6859      	ldr	r1, [r3, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	461a      	mov	r2, r3
 8007860:	f000 fb48 	bl	8007ef4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2140      	movs	r1, #64	; 0x40
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fc57 	bl	800811e <TIM_ITRx_SetConfig>
      break;
 8007870:	e00c      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	4610      	mov	r0, r2
 800787e:	f000 fc4e 	bl	800811e <TIM_ITRx_SetConfig>
      break;
 8007882:	e003      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	73fb      	strb	r3, [r7, #15]
      break;
 8007888:	e000      	b.n	800788c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800788a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b0c      	cmp	r3, #12
 80078ba:	d831      	bhi.n	8007920 <HAL_TIM_ReadCapturedValue+0x78>
 80078bc:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	080078f9 	.word	0x080078f9
 80078c8:	08007921 	.word	0x08007921
 80078cc:	08007921 	.word	0x08007921
 80078d0:	08007921 	.word	0x08007921
 80078d4:	08007903 	.word	0x08007903
 80078d8:	08007921 	.word	0x08007921
 80078dc:	08007921 	.word	0x08007921
 80078e0:	08007921 	.word	0x08007921
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	08007921 	.word	0x08007921
 80078ec:	08007921 	.word	0x08007921
 80078f0:	08007921 	.word	0x08007921
 80078f4:	08007917 	.word	0x08007917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fe:	60fb      	str	r3, [r7, #12]

      break;
 8007900:	e00f      	b.n	8007922 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	60fb      	str	r3, [r7, #12]

      break;
 800790a:	e00a      	b.n	8007922 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	60fb      	str	r3, [r7, #12]

      break;
 8007914:	e005      	b.n	8007922 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791c:	60fb      	str	r3, [r7, #12]

      break;
 800791e:	e000      	b.n	8007922 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007920:	bf00      	nop
  }

  return tmpreg;
 8007922:	68fb      	ldr	r3, [r7, #12]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a40      	ldr	r2, [pc, #256]	; (8007a80 <TIM_Base_SetConfig+0x114>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d013      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798a:	d00f      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a3d      	ldr	r2, [pc, #244]	; (8007a84 <TIM_Base_SetConfig+0x118>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00b      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a3c      	ldr	r2, [pc, #240]	; (8007a88 <TIM_Base_SetConfig+0x11c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d007      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a3b      	ldr	r2, [pc, #236]	; (8007a8c <TIM_Base_SetConfig+0x120>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a3a      	ldr	r2, [pc, #232]	; (8007a90 <TIM_Base_SetConfig+0x124>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d108      	bne.n	80079be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a2f      	ldr	r2, [pc, #188]	; (8007a80 <TIM_Base_SetConfig+0x114>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d02b      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079cc:	d027      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2c      	ldr	r2, [pc, #176]	; (8007a84 <TIM_Base_SetConfig+0x118>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d023      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a2b      	ldr	r2, [pc, #172]	; (8007a88 <TIM_Base_SetConfig+0x11c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d01f      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2a      	ldr	r2, [pc, #168]	; (8007a8c <TIM_Base_SetConfig+0x120>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01b      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a29      	ldr	r2, [pc, #164]	; (8007a90 <TIM_Base_SetConfig+0x124>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d017      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a28      	ldr	r2, [pc, #160]	; (8007a94 <TIM_Base_SetConfig+0x128>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a27      	ldr	r2, [pc, #156]	; (8007a98 <TIM_Base_SetConfig+0x12c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00f      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a26      	ldr	r2, [pc, #152]	; (8007a9c <TIM_Base_SetConfig+0x130>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00b      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <TIM_Base_SetConfig+0x134>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d007      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a24      	ldr	r2, [pc, #144]	; (8007aa4 <TIM_Base_SetConfig+0x138>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a23      	ldr	r2, [pc, #140]	; (8007aa8 <TIM_Base_SetConfig+0x13c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d108      	bne.n	8007a30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a0a      	ldr	r2, [pc, #40]	; (8007a80 <TIM_Base_SetConfig+0x114>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_Base_SetConfig+0xf8>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a0c      	ldr	r2, [pc, #48]	; (8007a90 <TIM_Base_SetConfig+0x124>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d103      	bne.n	8007a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	615a      	str	r2, [r3, #20]
}
 8007a72:	bf00      	nop
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40010000 	.word	0x40010000
 8007a84:	40000400 	.word	0x40000400
 8007a88:	40000800 	.word	0x40000800
 8007a8c:	40000c00 	.word	0x40000c00
 8007a90:	40010400 	.word	0x40010400
 8007a94:	40014000 	.word	0x40014000
 8007a98:	40014400 	.word	0x40014400
 8007a9c:	40014800 	.word	0x40014800
 8007aa0:	40001800 	.word	0x40001800
 8007aa4:	40001c00 	.word	0x40001c00
 8007aa8:	40002000 	.word	0x40002000

08007aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	f023 0201 	bic.w	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0303 	bic.w	r3, r3, #3
 8007ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f023 0302 	bic.w	r3, r3, #2
 8007af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a20      	ldr	r2, [pc, #128]	; (8007b84 <TIM_OC1_SetConfig+0xd8>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_OC1_SetConfig+0x64>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a1f      	ldr	r2, [pc, #124]	; (8007b88 <TIM_OC1_SetConfig+0xdc>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d10c      	bne.n	8007b2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f023 0308 	bic.w	r3, r3, #8
 8007b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f023 0304 	bic.w	r3, r3, #4
 8007b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a15      	ldr	r2, [pc, #84]	; (8007b84 <TIM_OC1_SetConfig+0xd8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d003      	beq.n	8007b3a <TIM_OC1_SetConfig+0x8e>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <TIM_OC1_SetConfig+0xdc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d111      	bne.n	8007b5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	621a      	str	r2, [r3, #32]
}
 8007b78:	bf00      	nop
 8007b7a:	371c      	adds	r7, #28
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	40010000 	.word	0x40010000
 8007b88:	40010400 	.word	0x40010400

08007b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f023 0210 	bic.w	r2, r3, #16
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f023 0320 	bic.w	r3, r3, #32
 8007bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a22      	ldr	r2, [pc, #136]	; (8007c70 <TIM_OC2_SetConfig+0xe4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_OC2_SetConfig+0x68>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a21      	ldr	r2, [pc, #132]	; (8007c74 <TIM_OC2_SetConfig+0xe8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d10d      	bne.n	8007c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a17      	ldr	r2, [pc, #92]	; (8007c70 <TIM_OC2_SetConfig+0xe4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_OC2_SetConfig+0x94>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a16      	ldr	r2, [pc, #88]	; (8007c74 <TIM_OC2_SetConfig+0xe8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d113      	bne.n	8007c48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	621a      	str	r2, [r3, #32]
}
 8007c62:	bf00      	nop
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	40010000 	.word	0x40010000
 8007c74:	40010400 	.word	0x40010400

08007c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a21      	ldr	r2, [pc, #132]	; (8007d58 <TIM_OC3_SetConfig+0xe0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d003      	beq.n	8007cde <TIM_OC3_SetConfig+0x66>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a20      	ldr	r2, [pc, #128]	; (8007d5c <TIM_OC3_SetConfig+0xe4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d10d      	bne.n	8007cfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	021b      	lsls	r3, r3, #8
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a16      	ldr	r2, [pc, #88]	; (8007d58 <TIM_OC3_SetConfig+0xe0>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d003      	beq.n	8007d0a <TIM_OC3_SetConfig+0x92>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a15      	ldr	r2, [pc, #84]	; (8007d5c <TIM_OC3_SetConfig+0xe4>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d113      	bne.n	8007d32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	621a      	str	r2, [r3, #32]
}
 8007d4c:	bf00      	nop
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	40010000 	.word	0x40010000
 8007d5c:	40010400 	.word	0x40010400

08007d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	031b      	lsls	r3, r3, #12
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a12      	ldr	r2, [pc, #72]	; (8007e04 <TIM_OC4_SetConfig+0xa4>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_OC4_SetConfig+0x68>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a11      	ldr	r2, [pc, #68]	; (8007e08 <TIM_OC4_SetConfig+0xa8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d109      	bne.n	8007ddc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	019b      	lsls	r3, r3, #6
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40010000 	.word	0x40010000
 8007e08:	40010400 	.word	0x40010400

08007e0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f023 0201 	bic.w	r2, r3, #1
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a28      	ldr	r2, [pc, #160]	; (8007ed8 <TIM_TI1_SetConfig+0xcc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d01b      	beq.n	8007e72 <TIM_TI1_SetConfig+0x66>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e40:	d017      	beq.n	8007e72 <TIM_TI1_SetConfig+0x66>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a25      	ldr	r2, [pc, #148]	; (8007edc <TIM_TI1_SetConfig+0xd0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d013      	beq.n	8007e72 <TIM_TI1_SetConfig+0x66>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a24      	ldr	r2, [pc, #144]	; (8007ee0 <TIM_TI1_SetConfig+0xd4>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00f      	beq.n	8007e72 <TIM_TI1_SetConfig+0x66>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4a23      	ldr	r2, [pc, #140]	; (8007ee4 <TIM_TI1_SetConfig+0xd8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00b      	beq.n	8007e72 <TIM_TI1_SetConfig+0x66>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4a22      	ldr	r2, [pc, #136]	; (8007ee8 <TIM_TI1_SetConfig+0xdc>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d007      	beq.n	8007e72 <TIM_TI1_SetConfig+0x66>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4a21      	ldr	r2, [pc, #132]	; (8007eec <TIM_TI1_SetConfig+0xe0>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d003      	beq.n	8007e72 <TIM_TI1_SetConfig+0x66>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	4a20      	ldr	r2, [pc, #128]	; (8007ef0 <TIM_TI1_SetConfig+0xe4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d101      	bne.n	8007e76 <TIM_TI1_SetConfig+0x6a>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <TIM_TI1_SetConfig+0x6c>
 8007e76:	2300      	movs	r3, #0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	e003      	b.n	8007e96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f043 0301 	orr.w	r3, r3, #1
 8007e94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f023 030a 	bic.w	r3, r3, #10
 8007eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f003 030a 	and.w	r3, r3, #10
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40010000 	.word	0x40010000
 8007edc:	40000400 	.word	0x40000400
 8007ee0:	40000800 	.word	0x40000800
 8007ee4:	40000c00 	.word	0x40000c00
 8007ee8:	40010400 	.word	0x40010400
 8007eec:	40014000 	.word	0x40014000
 8007ef0:	40001800 	.word	0x40001800

08007ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	f023 0201 	bic.w	r2, r3, #1
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f023 030a 	bic.w	r3, r3, #10
 8007f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	621a      	str	r2, [r3, #32]
}
 8007f46:	bf00      	nop
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b087      	sub	sp, #28
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	f023 0210 	bic.w	r2, r3, #16
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	031b      	lsls	r3, r3, #12
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	621a      	str	r2, [r3, #32]
}
 8007fc0:	bf00      	nop
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	f023 0210 	bic.w	r2, r3, #16
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ff6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	031b      	lsls	r3, r3, #12
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008008:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	011b      	lsls	r3, r3, #4
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	621a      	str	r2, [r3, #32]
}
 8008020:	bf00      	nop
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f023 0303 	bic.w	r3, r3, #3
 8008058:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008068:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	011b      	lsls	r3, r3, #4
 800806e:	b2db      	uxtb	r3, r3
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	4313      	orrs	r3, r2
 8008074:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800807c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	621a      	str	r2, [r3, #32]
}
 8008098:	bf00      	nop
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	031b      	lsls	r3, r3, #12
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	031b      	lsls	r3, r3, #12
 80080fc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	4313      	orrs	r3, r2
 8008104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	621a      	str	r2, [r3, #32]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4313      	orrs	r3, r2
 800813c:	f043 0307 	orr.w	r3, r3, #7
 8008140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	609a      	str	r2, [r3, #8]
}
 8008148:	bf00      	nop
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800816e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	021a      	lsls	r2, r3, #8
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	431a      	orrs	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4313      	orrs	r3, r2
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	609a      	str	r2, [r3, #8]
}
 8008188:	bf00      	nop
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008194:	b480      	push	{r7}
 8008196:	b087      	sub	sp, #28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f003 031f 	and.w	r3, r3, #31
 80081a6:	2201      	movs	r2, #1
 80081a8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6a1a      	ldr	r2, [r3, #32]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	43db      	mvns	r3, r3
 80081b6:	401a      	ands	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6a1a      	ldr	r2, [r3, #32]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	fa01 f303 	lsl.w	r3, r1, r3
 80081cc:	431a      	orrs	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	621a      	str	r2, [r3, #32]
}
 80081d2:	bf00      	nop
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
	...

080081e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e05a      	b.n	80082ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a21      	ldr	r2, [pc, #132]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d022      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008244:	d01d      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a1d      	ldr	r2, [pc, #116]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d018      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a1b      	ldr	r2, [pc, #108]	; (80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a1a      	ldr	r2, [pc, #104]	; (80082c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00e      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a18      	ldr	r2, [pc, #96]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d009      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a17      	ldr	r2, [pc, #92]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d004      	beq.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d10c      	bne.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	4313      	orrs	r3, r2
 8008292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	40010000 	.word	0x40010000
 80082c0:	40000400 	.word	0x40000400
 80082c4:	40000800 	.word	0x40000800
 80082c8:	40000c00 	.word	0x40000c00
 80082cc:	40010400 	.word	0x40010400
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40001800 	.word	0x40001800

080082d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d101      	bne.n	80082f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082f0:	2302      	movs	r3, #2
 80082f2:	e03d      	b.n	8008370 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e03f      	b.n	8008436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7fc f956 	bl	800467c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2224      	movs	r2, #36	; 0x24
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fddf 	bl	8008fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	695a      	ldr	r2, [r3, #20]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800840c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800841c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2220      	movs	r2, #32
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b08a      	sub	sp, #40	; 0x28
 8008442:	af02      	add	r7, sp, #8
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	603b      	str	r3, [r7, #0]
 800844a:	4613      	mov	r3, r2
 800844c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b20      	cmp	r3, #32
 800845c:	d17c      	bne.n	8008558 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <HAL_UART_Transmit+0x2c>
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e075      	b.n	800855a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_UART_Transmit+0x3e>
 8008478:	2302      	movs	r3, #2
 800847a:	e06e      	b.n	800855a <HAL_UART_Transmit+0x11c>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2221      	movs	r2, #33	; 0x21
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008492:	f7fc fa81 	bl	8004998 <HAL_GetTick>
 8008496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	88fa      	ldrh	r2, [r7, #6]
 800849c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	88fa      	ldrh	r2, [r7, #6]
 80084a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ac:	d108      	bne.n	80084c0 <HAL_UART_Transmit+0x82>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d104      	bne.n	80084c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	61bb      	str	r3, [r7, #24]
 80084be:	e003      	b.n	80084c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80084d0:	e02a      	b.n	8008528 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2200      	movs	r2, #0
 80084da:	2180      	movs	r1, #128	; 0x80
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 fb1f 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e036      	b.n	800855a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10b      	bne.n	800850a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008500:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	3302      	adds	r3, #2
 8008506:	61bb      	str	r3, [r7, #24]
 8008508:	e007      	b.n	800851a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	781a      	ldrb	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	3301      	adds	r3, #1
 8008518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800851e:	b29b      	uxth	r3, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800852c:	b29b      	uxth	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1cf      	bne.n	80084d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2200      	movs	r2, #0
 800853a:	2140      	movs	r1, #64	; 0x40
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 faef 	bl	8008b20 <UART_WaitOnFlagUntilTimeout>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e006      	b.n	800855a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	e000      	b.n	800855a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008558:	2302      	movs	r3, #2
  }
}
 800855a:	4618      	mov	r0, r3
 800855c:	3720      	adds	r7, #32
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	4613      	mov	r3, r2
 800856e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b20      	cmp	r3, #32
 800857a:	d11d      	bne.n	80085b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_UART_Receive_IT+0x26>
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e016      	b.n	80085ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008592:	2b01      	cmp	r3, #1
 8008594:	d101      	bne.n	800859a <HAL_UART_Receive_IT+0x38>
 8008596:	2302      	movs	r3, #2
 8008598:	e00f      	b.n	80085ba <HAL_UART_Receive_IT+0x58>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085a8:	88fb      	ldrh	r3, [r7, #6]
 80085aa:	461a      	mov	r2, r3
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 fb24 	bl	8008bfc <UART_Start_Receive_IT>
 80085b4:	4603      	mov	r3, r0
 80085b6:	e000      	b.n	80085ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80085b8:	2302      	movs	r3, #2
  }
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b0ba      	sub	sp, #232	; 0xe8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10f      	bne.n	800862a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <HAL_UART_IRQHandler+0x66>
 8008616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fc07 	bl	8008e36 <UART_Receive_IT>
      return;
 8008628:	e256      	b.n	8008ad8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800862a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80de 	beq.w	80087f0 <HAL_UART_IRQHandler+0x22c>
 8008634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d106      	bne.n	800864e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008644:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 80d1 	beq.w	80087f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00b      	beq.n	8008672 <HAL_UART_IRQHandler+0xae>
 800865a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800865e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f043 0201 	orr.w	r2, r3, #1
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008676:	f003 0304 	and.w	r3, r3, #4
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00b      	beq.n	8008696 <HAL_UART_IRQHandler+0xd2>
 800867e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d005      	beq.n	8008696 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	f043 0202 	orr.w	r2, r3, #2
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00b      	beq.n	80086ba <HAL_UART_IRQHandler+0xf6>
 80086a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d005      	beq.n	80086ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	f043 0204 	orr.w	r2, r3, #4
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d011      	beq.n	80086ea <HAL_UART_IRQHandler+0x126>
 80086c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d105      	bne.n	80086de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d005      	beq.n	80086ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	f043 0208 	orr.w	r2, r3, #8
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 81ed 	beq.w	8008ace <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f8:	f003 0320 	and.w	r3, r3, #32
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <HAL_UART_IRQHandler+0x14e>
 8008700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008704:	f003 0320 	and.w	r3, r3, #32
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fb92 	bl	8008e36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b40      	cmp	r3, #64	; 0x40
 800871e:	bf0c      	ite	eq
 8008720:	2301      	moveq	r3, #1
 8008722:	2300      	movne	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d103      	bne.n	800873e <HAL_UART_IRQHandler+0x17a>
 8008736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800873a:	2b00      	cmp	r3, #0
 800873c:	d04f      	beq.n	80087de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fa9a 	bl	8008c78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874e:	2b40      	cmp	r3, #64	; 0x40
 8008750:	d141      	bne.n	80087d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3314      	adds	r3, #20
 8008758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800876c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3314      	adds	r3, #20
 800877a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800877e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800878a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1d9      	bne.n	8008752 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d013      	beq.n	80087ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	4a7d      	ldr	r2, [pc, #500]	; (80089a0 <HAL_UART_IRQHandler+0x3dc>)
 80087ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fc fa72 	bl	8004c9c <HAL_DMA_Abort_IT>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d016      	beq.n	80087ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087cc:	e00e      	b.n	80087ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f990 	bl	8008af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d4:	e00a      	b.n	80087ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f98c 	bl	8008af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087dc:	e006      	b.n	80087ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f988 	bl	8008af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087ea:	e170      	b.n	8008ace <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ec:	bf00      	nop
    return;
 80087ee:	e16e      	b.n	8008ace <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	f040 814a 	bne.w	8008a8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fe:	f003 0310 	and.w	r3, r3, #16
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 8143 	beq.w	8008a8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800880c:	f003 0310 	and.w	r3, r3, #16
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 813c 	beq.w	8008a8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	60bb      	str	r3, [r7, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	60bb      	str	r3, [r7, #8]
 800882a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008836:	2b40      	cmp	r3, #64	; 0x40
 8008838:	f040 80b4 	bne.w	80089a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008848:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 8140 	beq.w	8008ad2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800885a:	429a      	cmp	r2, r3
 800885c:	f080 8139 	bcs.w	8008ad2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008866:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008872:	f000 8088 	beq.w	8008986 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	330c      	adds	r3, #12
 800887c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800888c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	330c      	adds	r3, #12
 800889e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1d9      	bne.n	8008876 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3314      	adds	r3, #20
 80088c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3314      	adds	r3, #20
 80088e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e1      	bne.n	80088c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3314      	adds	r3, #20
 8008904:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800890e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3314      	adds	r3, #20
 800891e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008922:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008924:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e3      	bne.n	80088fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	330c      	adds	r3, #12
 800894a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800894e:	e853 3f00 	ldrex	r3, [r3]
 8008952:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008956:	f023 0310 	bic.w	r3, r3, #16
 800895a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	330c      	adds	r3, #12
 8008964:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008968:	65ba      	str	r2, [r7, #88]	; 0x58
 800896a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800896e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e3      	bne.n	8008944 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008980:	4618      	mov	r0, r3
 8008982:	f7fc f91b 	bl	8004bbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800898e:	b29b      	uxth	r3, r3
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	b29b      	uxth	r3, r3
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f8b6 	bl	8008b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800899c:	e099      	b.n	8008ad2 <HAL_UART_IRQHandler+0x50e>
 800899e:	bf00      	nop
 80089a0:	08008d3f 	.word	0x08008d3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 808b 	beq.w	8008ad6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80089c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 8086 	beq.w	8008ad6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	330c      	adds	r3, #12
 80089d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	330c      	adds	r3, #12
 80089ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089ee:	647a      	str	r2, [r7, #68]	; 0x44
 80089f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e3      	bne.n	80089ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3314      	adds	r3, #20
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	623b      	str	r3, [r7, #32]
   return(result);
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	f023 0301 	bic.w	r3, r3, #1
 8008a18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3314      	adds	r3, #20
 8008a22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a26:	633a      	str	r2, [r7, #48]	; 0x30
 8008a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e3      	bne.n	8008a02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	330c      	adds	r3, #12
 8008a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 0310 	bic.w	r3, r3, #16
 8008a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	330c      	adds	r3, #12
 8008a68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a6c:	61fa      	str	r2, [r7, #28]
 8008a6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	69b9      	ldr	r1, [r7, #24]
 8008a72:	69fa      	ldr	r2, [r7, #28]
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	617b      	str	r3, [r7, #20]
   return(result);
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e3      	bne.n	8008a48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f83e 	bl	8008b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a8c:	e023      	b.n	8008ad6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d009      	beq.n	8008aae <HAL_UART_IRQHandler+0x4ea>
 8008a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f95d 	bl	8008d66 <UART_Transmit_IT>
    return;
 8008aac:	e014      	b.n	8008ad8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00e      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x514>
 8008aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d008      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f99d 	bl	8008e06 <UART_EndTransmit_IT>
    return;
 8008acc:	e004      	b.n	8008ad8 <HAL_UART_IRQHandler+0x514>
    return;
 8008ace:	bf00      	nop
 8008ad0:	e002      	b.n	8008ad8 <HAL_UART_IRQHandler+0x514>
      return;
 8008ad2:	bf00      	nop
 8008ad4:	e000      	b.n	8008ad8 <HAL_UART_IRQHandler+0x514>
      return;
 8008ad6:	bf00      	nop
  }
}
 8008ad8:	37e8      	adds	r7, #232	; 0xe8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop

08008ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b090      	sub	sp, #64	; 0x40
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b30:	e050      	b.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b38:	d04c      	beq.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d007      	beq.n	8008b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b40:	f7fb ff2a 	bl	8004998 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d241      	bcs.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	330c      	adds	r3, #12
 8008b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	330c      	adds	r3, #12
 8008b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b70:	637a      	str	r2, [r7, #52]	; 0x34
 8008b72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e5      	bne.n	8008b50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	3314      	adds	r3, #20
 8008b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	613b      	str	r3, [r7, #16]
   return(result);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f023 0301 	bic.w	r3, r3, #1
 8008b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3314      	adds	r3, #20
 8008ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ba4:	623a      	str	r2, [r7, #32]
 8008ba6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	69f9      	ldr	r1, [r7, #28]
 8008baa:	6a3a      	ldr	r2, [r7, #32]
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e5      	bne.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e00f      	b.n	8008bf4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	4013      	ands	r3, r2
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	bf0c      	ite	eq
 8008be4:	2301      	moveq	r3, #1
 8008be6:	2300      	movne	r3, #0
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	461a      	mov	r2, r3
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d09f      	beq.n	8008b32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3740      	adds	r7, #64	; 0x40
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4613      	mov	r3, r2
 8008c08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	88fa      	ldrh	r2, [r7, #6]
 8008c14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	88fa      	ldrh	r2, [r7, #6]
 8008c1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2222      	movs	r2, #34	; 0x22
 8008c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68da      	ldr	r2, [r3, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	695a      	ldr	r2, [r3, #20]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0201 	orr.w	r2, r2, #1
 8008c58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f042 0220 	orr.w	r2, r2, #32
 8008c68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b095      	sub	sp, #84	; 0x54
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	330c      	adds	r3, #12
 8008c86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	330c      	adds	r3, #12
 8008c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ca0:	643a      	str	r2, [r7, #64]	; 0x40
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ca8:	e841 2300 	strex	r3, r2, [r1]
 8008cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e5      	bne.n	8008c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3314      	adds	r3, #20
 8008cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f023 0301 	bic.w	r3, r3, #1
 8008cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e5      	bne.n	8008cb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d119      	bne.n	8008d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	330c      	adds	r3, #12
 8008cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f023 0310 	bic.w	r3, r3, #16
 8008d06:	647b      	str	r3, [r7, #68]	; 0x44
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d10:	61ba      	str	r2, [r7, #24]
 8008d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6979      	ldr	r1, [r7, #20]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e5      	bne.n	8008cf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d32:	bf00      	nop
 8008d34:	3754      	adds	r7, #84	; 0x54
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f7ff fecb 	bl	8008af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d5e:	bf00      	nop
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b085      	sub	sp, #20
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b21      	cmp	r3, #33	; 0x21
 8008d78:	d13e      	bne.n	8008df8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d82:	d114      	bne.n	8008dae <UART_Transmit_IT+0x48>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d110      	bne.n	8008dae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008da0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	1c9a      	adds	r2, r3, #2
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	621a      	str	r2, [r3, #32]
 8008dac:	e008      	b.n	8008dc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	1c59      	adds	r1, r3, #1
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	6211      	str	r1, [r2, #32]
 8008db8:	781a      	ldrb	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10f      	bne.n	8008df4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008de2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	e000      	b.n	8008dfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008df8:	2302      	movs	r3, #2
  }
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fe5a 	bl	8008ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b08c      	sub	sp, #48	; 0x30
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b22      	cmp	r3, #34	; 0x22
 8008e48:	f040 80ab 	bne.w	8008fa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e54:	d117      	bne.n	8008e86 <UART_Receive_IT+0x50>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d113      	bne.n	8008e86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7e:	1c9a      	adds	r2, r3, #2
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	629a      	str	r2, [r3, #40]	; 0x28
 8008e84:	e026      	b.n	8008ed4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e98:	d007      	beq.n	8008eaa <UART_Receive_IT+0x74>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <UART_Receive_IT+0x82>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d106      	bne.n	8008eb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	701a      	strb	r2, [r3, #0]
 8008eb6:	e008      	b.n	8008eca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d15a      	bne.n	8008f9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0220 	bic.w	r2, r2, #32
 8008ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	695a      	ldr	r2, [r3, #20]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0201 	bic.w	r2, r2, #1
 8008f16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d135      	bne.n	8008f94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	330c      	adds	r3, #12
 8008f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f023 0310 	bic.w	r3, r3, #16
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	330c      	adds	r3, #12
 8008f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4e:	623a      	str	r2, [r7, #32]
 8008f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	69f9      	ldr	r1, [r7, #28]
 8008f54:	6a3a      	ldr	r2, [r7, #32]
 8008f56:	e841 2300 	strex	r3, r2, [r1]
 8008f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1e5      	bne.n	8008f2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0310 	and.w	r3, r3, #16
 8008f6c:	2b10      	cmp	r3, #16
 8008f6e:	d10a      	bne.n	8008f86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff fdbb 	bl	8008b08 <HAL_UARTEx_RxEventCallback>
 8008f92:	e002      	b.n	8008f9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7f8 fcd3 	bl	8001940 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e002      	b.n	8008fa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e000      	b.n	8008fa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008fa2:	2302      	movs	r3, #2
  }
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3730      	adds	r7, #48	; 0x30
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fb0:	b0c0      	sub	sp, #256	; 0x100
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc8:	68d9      	ldr	r1, [r3, #12]
 8008fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	ea40 0301 	orr.w	r3, r0, r1
 8008fd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	431a      	orrs	r2, r3
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009004:	f021 010c 	bic.w	r1, r1, #12
 8009008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009012:	430b      	orrs	r3, r1
 8009014:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009026:	6999      	ldr	r1, [r3, #24]
 8009028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	ea40 0301 	orr.w	r3, r0, r1
 8009032:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	4b8f      	ldr	r3, [pc, #572]	; (8009278 <UART_SetConfig+0x2cc>)
 800903c:	429a      	cmp	r2, r3
 800903e:	d005      	beq.n	800904c <UART_SetConfig+0xa0>
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4b8d      	ldr	r3, [pc, #564]	; (800927c <UART_SetConfig+0x2d0>)
 8009048:	429a      	cmp	r2, r3
 800904a:	d104      	bne.n	8009056 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800904c:	f7fd fc2a 	bl	80068a4 <HAL_RCC_GetPCLK2Freq>
 8009050:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009054:	e003      	b.n	800905e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009056:	f7fd fc11 	bl	800687c <HAL_RCC_GetPCLK1Freq>
 800905a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800905e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009068:	f040 810c 	bne.w	8009284 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800906c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009070:	2200      	movs	r2, #0
 8009072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009076:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800907a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800907e:	4622      	mov	r2, r4
 8009080:	462b      	mov	r3, r5
 8009082:	1891      	adds	r1, r2, r2
 8009084:	65b9      	str	r1, [r7, #88]	; 0x58
 8009086:	415b      	adcs	r3, r3
 8009088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800908a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800908e:	4621      	mov	r1, r4
 8009090:	eb12 0801 	adds.w	r8, r2, r1
 8009094:	4629      	mov	r1, r5
 8009096:	eb43 0901 	adc.w	r9, r3, r1
 800909a:	f04f 0200 	mov.w	r2, #0
 800909e:	f04f 0300 	mov.w	r3, #0
 80090a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090ae:	4690      	mov	r8, r2
 80090b0:	4699      	mov	r9, r3
 80090b2:	4623      	mov	r3, r4
 80090b4:	eb18 0303 	adds.w	r3, r8, r3
 80090b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090bc:	462b      	mov	r3, r5
 80090be:	eb49 0303 	adc.w	r3, r9, r3
 80090c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80090d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80090da:	460b      	mov	r3, r1
 80090dc:	18db      	adds	r3, r3, r3
 80090de:	653b      	str	r3, [r7, #80]	; 0x50
 80090e0:	4613      	mov	r3, r2
 80090e2:	eb42 0303 	adc.w	r3, r2, r3
 80090e6:	657b      	str	r3, [r7, #84]	; 0x54
 80090e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80090f0:	f7f7 fd84 	bl	8000bfc <__aeabi_uldivmod>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4b61      	ldr	r3, [pc, #388]	; (8009280 <UART_SetConfig+0x2d4>)
 80090fa:	fba3 2302 	umull	r2, r3, r3, r2
 80090fe:	095b      	lsrs	r3, r3, #5
 8009100:	011c      	lsls	r4, r3, #4
 8009102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009106:	2200      	movs	r2, #0
 8009108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800910c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009110:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009114:	4642      	mov	r2, r8
 8009116:	464b      	mov	r3, r9
 8009118:	1891      	adds	r1, r2, r2
 800911a:	64b9      	str	r1, [r7, #72]	; 0x48
 800911c:	415b      	adcs	r3, r3
 800911e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009120:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009124:	4641      	mov	r1, r8
 8009126:	eb12 0a01 	adds.w	sl, r2, r1
 800912a:	4649      	mov	r1, r9
 800912c:	eb43 0b01 	adc.w	fp, r3, r1
 8009130:	f04f 0200 	mov.w	r2, #0
 8009134:	f04f 0300 	mov.w	r3, #0
 8009138:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800913c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009144:	4692      	mov	sl, r2
 8009146:	469b      	mov	fp, r3
 8009148:	4643      	mov	r3, r8
 800914a:	eb1a 0303 	adds.w	r3, sl, r3
 800914e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009152:	464b      	mov	r3, r9
 8009154:	eb4b 0303 	adc.w	r3, fp, r3
 8009158:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009168:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800916c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009170:	460b      	mov	r3, r1
 8009172:	18db      	adds	r3, r3, r3
 8009174:	643b      	str	r3, [r7, #64]	; 0x40
 8009176:	4613      	mov	r3, r2
 8009178:	eb42 0303 	adc.w	r3, r2, r3
 800917c:	647b      	str	r3, [r7, #68]	; 0x44
 800917e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009182:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009186:	f7f7 fd39 	bl	8000bfc <__aeabi_uldivmod>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4611      	mov	r1, r2
 8009190:	4b3b      	ldr	r3, [pc, #236]	; (8009280 <UART_SetConfig+0x2d4>)
 8009192:	fba3 2301 	umull	r2, r3, r3, r1
 8009196:	095b      	lsrs	r3, r3, #5
 8009198:	2264      	movs	r2, #100	; 0x64
 800919a:	fb02 f303 	mul.w	r3, r2, r3
 800919e:	1acb      	subs	r3, r1, r3
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80091a6:	4b36      	ldr	r3, [pc, #216]	; (8009280 <UART_SetConfig+0x2d4>)
 80091a8:	fba3 2302 	umull	r2, r3, r3, r2
 80091ac:	095b      	lsrs	r3, r3, #5
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091b4:	441c      	add	r4, r3
 80091b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80091c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80091c8:	4642      	mov	r2, r8
 80091ca:	464b      	mov	r3, r9
 80091cc:	1891      	adds	r1, r2, r2
 80091ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80091d0:	415b      	adcs	r3, r3
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091d8:	4641      	mov	r1, r8
 80091da:	1851      	adds	r1, r2, r1
 80091dc:	6339      	str	r1, [r7, #48]	; 0x30
 80091de:	4649      	mov	r1, r9
 80091e0:	414b      	adcs	r3, r1
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
 80091e4:	f04f 0200 	mov.w	r2, #0
 80091e8:	f04f 0300 	mov.w	r3, #0
 80091ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80091f0:	4659      	mov	r1, fp
 80091f2:	00cb      	lsls	r3, r1, #3
 80091f4:	4651      	mov	r1, sl
 80091f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091fa:	4651      	mov	r1, sl
 80091fc:	00ca      	lsls	r2, r1, #3
 80091fe:	4610      	mov	r0, r2
 8009200:	4619      	mov	r1, r3
 8009202:	4603      	mov	r3, r0
 8009204:	4642      	mov	r2, r8
 8009206:	189b      	adds	r3, r3, r2
 8009208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800920c:	464b      	mov	r3, r9
 800920e:	460a      	mov	r2, r1
 8009210:	eb42 0303 	adc.w	r3, r2, r3
 8009214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009224:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009228:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800922c:	460b      	mov	r3, r1
 800922e:	18db      	adds	r3, r3, r3
 8009230:	62bb      	str	r3, [r7, #40]	; 0x28
 8009232:	4613      	mov	r3, r2
 8009234:	eb42 0303 	adc.w	r3, r2, r3
 8009238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800923a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800923e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009242:	f7f7 fcdb 	bl	8000bfc <__aeabi_uldivmod>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4b0d      	ldr	r3, [pc, #52]	; (8009280 <UART_SetConfig+0x2d4>)
 800924c:	fba3 1302 	umull	r1, r3, r3, r2
 8009250:	095b      	lsrs	r3, r3, #5
 8009252:	2164      	movs	r1, #100	; 0x64
 8009254:	fb01 f303 	mul.w	r3, r1, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	3332      	adds	r3, #50	; 0x32
 800925e:	4a08      	ldr	r2, [pc, #32]	; (8009280 <UART_SetConfig+0x2d4>)
 8009260:	fba2 2303 	umull	r2, r3, r2, r3
 8009264:	095b      	lsrs	r3, r3, #5
 8009266:	f003 0207 	and.w	r2, r3, #7
 800926a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4422      	add	r2, r4
 8009272:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009274:	e106      	b.n	8009484 <UART_SetConfig+0x4d8>
 8009276:	bf00      	nop
 8009278:	40011000 	.word	0x40011000
 800927c:	40011400 	.word	0x40011400
 8009280:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009288:	2200      	movs	r2, #0
 800928a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800928e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009292:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009296:	4642      	mov	r2, r8
 8009298:	464b      	mov	r3, r9
 800929a:	1891      	adds	r1, r2, r2
 800929c:	6239      	str	r1, [r7, #32]
 800929e:	415b      	adcs	r3, r3
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
 80092a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092a6:	4641      	mov	r1, r8
 80092a8:	1854      	adds	r4, r2, r1
 80092aa:	4649      	mov	r1, r9
 80092ac:	eb43 0501 	adc.w	r5, r3, r1
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	00eb      	lsls	r3, r5, #3
 80092ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092be:	00e2      	lsls	r2, r4, #3
 80092c0:	4614      	mov	r4, r2
 80092c2:	461d      	mov	r5, r3
 80092c4:	4643      	mov	r3, r8
 80092c6:	18e3      	adds	r3, r4, r3
 80092c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092cc:	464b      	mov	r3, r9
 80092ce:	eb45 0303 	adc.w	r3, r5, r3
 80092d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092e6:	f04f 0200 	mov.w	r2, #0
 80092ea:	f04f 0300 	mov.w	r3, #0
 80092ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80092f2:	4629      	mov	r1, r5
 80092f4:	008b      	lsls	r3, r1, #2
 80092f6:	4621      	mov	r1, r4
 80092f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092fc:	4621      	mov	r1, r4
 80092fe:	008a      	lsls	r2, r1, #2
 8009300:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009304:	f7f7 fc7a 	bl	8000bfc <__aeabi_uldivmod>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4b60      	ldr	r3, [pc, #384]	; (8009490 <UART_SetConfig+0x4e4>)
 800930e:	fba3 2302 	umull	r2, r3, r3, r2
 8009312:	095b      	lsrs	r3, r3, #5
 8009314:	011c      	lsls	r4, r3, #4
 8009316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800931a:	2200      	movs	r2, #0
 800931c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009320:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009324:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009328:	4642      	mov	r2, r8
 800932a:	464b      	mov	r3, r9
 800932c:	1891      	adds	r1, r2, r2
 800932e:	61b9      	str	r1, [r7, #24]
 8009330:	415b      	adcs	r3, r3
 8009332:	61fb      	str	r3, [r7, #28]
 8009334:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009338:	4641      	mov	r1, r8
 800933a:	1851      	adds	r1, r2, r1
 800933c:	6139      	str	r1, [r7, #16]
 800933e:	4649      	mov	r1, r9
 8009340:	414b      	adcs	r3, r1
 8009342:	617b      	str	r3, [r7, #20]
 8009344:	f04f 0200 	mov.w	r2, #0
 8009348:	f04f 0300 	mov.w	r3, #0
 800934c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009350:	4659      	mov	r1, fp
 8009352:	00cb      	lsls	r3, r1, #3
 8009354:	4651      	mov	r1, sl
 8009356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800935a:	4651      	mov	r1, sl
 800935c:	00ca      	lsls	r2, r1, #3
 800935e:	4610      	mov	r0, r2
 8009360:	4619      	mov	r1, r3
 8009362:	4603      	mov	r3, r0
 8009364:	4642      	mov	r2, r8
 8009366:	189b      	adds	r3, r3, r2
 8009368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800936c:	464b      	mov	r3, r9
 800936e:	460a      	mov	r2, r1
 8009370:	eb42 0303 	adc.w	r3, r2, r3
 8009374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	67bb      	str	r3, [r7, #120]	; 0x78
 8009382:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	f04f 0300 	mov.w	r3, #0
 800938c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009390:	4649      	mov	r1, r9
 8009392:	008b      	lsls	r3, r1, #2
 8009394:	4641      	mov	r1, r8
 8009396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800939a:	4641      	mov	r1, r8
 800939c:	008a      	lsls	r2, r1, #2
 800939e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80093a2:	f7f7 fc2b 	bl	8000bfc <__aeabi_uldivmod>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4611      	mov	r1, r2
 80093ac:	4b38      	ldr	r3, [pc, #224]	; (8009490 <UART_SetConfig+0x4e4>)
 80093ae:	fba3 2301 	umull	r2, r3, r3, r1
 80093b2:	095b      	lsrs	r3, r3, #5
 80093b4:	2264      	movs	r2, #100	; 0x64
 80093b6:	fb02 f303 	mul.w	r3, r2, r3
 80093ba:	1acb      	subs	r3, r1, r3
 80093bc:	011b      	lsls	r3, r3, #4
 80093be:	3332      	adds	r3, #50	; 0x32
 80093c0:	4a33      	ldr	r2, [pc, #204]	; (8009490 <UART_SetConfig+0x4e4>)
 80093c2:	fba2 2303 	umull	r2, r3, r2, r3
 80093c6:	095b      	lsrs	r3, r3, #5
 80093c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093cc:	441c      	add	r4, r3
 80093ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093d2:	2200      	movs	r2, #0
 80093d4:	673b      	str	r3, [r7, #112]	; 0x70
 80093d6:	677a      	str	r2, [r7, #116]	; 0x74
 80093d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80093dc:	4642      	mov	r2, r8
 80093de:	464b      	mov	r3, r9
 80093e0:	1891      	adds	r1, r2, r2
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	415b      	adcs	r3, r3
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093ec:	4641      	mov	r1, r8
 80093ee:	1851      	adds	r1, r2, r1
 80093f0:	6039      	str	r1, [r7, #0]
 80093f2:	4649      	mov	r1, r9
 80093f4:	414b      	adcs	r3, r1
 80093f6:	607b      	str	r3, [r7, #4]
 80093f8:	f04f 0200 	mov.w	r2, #0
 80093fc:	f04f 0300 	mov.w	r3, #0
 8009400:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009404:	4659      	mov	r1, fp
 8009406:	00cb      	lsls	r3, r1, #3
 8009408:	4651      	mov	r1, sl
 800940a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800940e:	4651      	mov	r1, sl
 8009410:	00ca      	lsls	r2, r1, #3
 8009412:	4610      	mov	r0, r2
 8009414:	4619      	mov	r1, r3
 8009416:	4603      	mov	r3, r0
 8009418:	4642      	mov	r2, r8
 800941a:	189b      	adds	r3, r3, r2
 800941c:	66bb      	str	r3, [r7, #104]	; 0x68
 800941e:	464b      	mov	r3, r9
 8009420:	460a      	mov	r2, r1
 8009422:	eb42 0303 	adc.w	r3, r2, r3
 8009426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	663b      	str	r3, [r7, #96]	; 0x60
 8009432:	667a      	str	r2, [r7, #100]	; 0x64
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	f04f 0300 	mov.w	r3, #0
 800943c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009440:	4649      	mov	r1, r9
 8009442:	008b      	lsls	r3, r1, #2
 8009444:	4641      	mov	r1, r8
 8009446:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800944a:	4641      	mov	r1, r8
 800944c:	008a      	lsls	r2, r1, #2
 800944e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009452:	f7f7 fbd3 	bl	8000bfc <__aeabi_uldivmod>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4b0d      	ldr	r3, [pc, #52]	; (8009490 <UART_SetConfig+0x4e4>)
 800945c:	fba3 1302 	umull	r1, r3, r3, r2
 8009460:	095b      	lsrs	r3, r3, #5
 8009462:	2164      	movs	r1, #100	; 0x64
 8009464:	fb01 f303 	mul.w	r3, r1, r3
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	3332      	adds	r3, #50	; 0x32
 800946e:	4a08      	ldr	r2, [pc, #32]	; (8009490 <UART_SetConfig+0x4e4>)
 8009470:	fba2 2303 	umull	r2, r3, r2, r3
 8009474:	095b      	lsrs	r3, r3, #5
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4422      	add	r2, r4
 8009482:	609a      	str	r2, [r3, #8]
}
 8009484:	bf00      	nop
 8009486:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800948a:	46bd      	mov	sp, r7
 800948c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009490:	51eb851f 	.word	0x51eb851f

08009494 <__NVIC_SetPriority>:
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	6039      	str	r1, [r7, #0]
 800949e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	db0a      	blt.n	80094be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	490c      	ldr	r1, [pc, #48]	; (80094e0 <__NVIC_SetPriority+0x4c>)
 80094ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094b2:	0112      	lsls	r2, r2, #4
 80094b4:	b2d2      	uxtb	r2, r2
 80094b6:	440b      	add	r3, r1
 80094b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80094bc:	e00a      	b.n	80094d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	4908      	ldr	r1, [pc, #32]	; (80094e4 <__NVIC_SetPriority+0x50>)
 80094c4:	79fb      	ldrb	r3, [r7, #7]
 80094c6:	f003 030f 	and.w	r3, r3, #15
 80094ca:	3b04      	subs	r3, #4
 80094cc:	0112      	lsls	r2, r2, #4
 80094ce:	b2d2      	uxtb	r2, r2
 80094d0:	440b      	add	r3, r1
 80094d2:	761a      	strb	r2, [r3, #24]
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	e000e100 	.word	0xe000e100
 80094e4:	e000ed00 	.word	0xe000ed00

080094e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80094ec:	4b05      	ldr	r3, [pc, #20]	; (8009504 <SysTick_Handler+0x1c>)
 80094ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80094f0:	f001 fcfe 	bl	800aef0 <xTaskGetSchedulerState>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d001      	beq.n	80094fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80094fa:	f002 fae5 	bl	800bac8 <xPortSysTickHandler>
  }
}
 80094fe:	bf00      	nop
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	e000e010 	.word	0xe000e010

08009508 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800950c:	2100      	movs	r1, #0
 800950e:	f06f 0004 	mvn.w	r0, #4
 8009512:	f7ff ffbf 	bl	8009494 <__NVIC_SetPriority>
#endif
}
 8009516:	bf00      	nop
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009522:	f3ef 8305 	mrs	r3, IPSR
 8009526:	603b      	str	r3, [r7, #0]
  return(result);
 8009528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800952e:	f06f 0305 	mvn.w	r3, #5
 8009532:	607b      	str	r3, [r7, #4]
 8009534:	e00c      	b.n	8009550 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009536:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <osKernelInitialize+0x44>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800953e:	4b08      	ldr	r3, [pc, #32]	; (8009560 <osKernelInitialize+0x44>)
 8009540:	2201      	movs	r2, #1
 8009542:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009544:	2300      	movs	r3, #0
 8009546:	607b      	str	r3, [r7, #4]
 8009548:	e002      	b.n	8009550 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800954a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800954e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009550:	687b      	ldr	r3, [r7, #4]
}
 8009552:	4618      	mov	r0, r3
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	200004c0 	.word	0x200004c0

08009564 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800956a:	f3ef 8305 	mrs	r3, IPSR
 800956e:	603b      	str	r3, [r7, #0]
  return(result);
 8009570:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009576:	f06f 0305 	mvn.w	r3, #5
 800957a:	607b      	str	r3, [r7, #4]
 800957c:	e010      	b.n	80095a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800957e:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <osKernelStart+0x48>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d109      	bne.n	800959a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009586:	f7ff ffbf 	bl	8009508 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800958a:	4b08      	ldr	r3, [pc, #32]	; (80095ac <osKernelStart+0x48>)
 800958c:	2202      	movs	r2, #2
 800958e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009590:	f001 f866 	bl	800a660 <vTaskStartScheduler>
      stat = osOK;
 8009594:	2300      	movs	r3, #0
 8009596:	607b      	str	r3, [r7, #4]
 8009598:	e002      	b.n	80095a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800959a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800959e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80095a0:	687b      	ldr	r3, [r7, #4]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	200004c0 	.word	0x200004c0

080095b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08e      	sub	sp, #56	; 0x38
 80095b4:	af04      	add	r7, sp, #16
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80095bc:	2300      	movs	r3, #0
 80095be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095c0:	f3ef 8305 	mrs	r3, IPSR
 80095c4:	617b      	str	r3, [r7, #20]
  return(result);
 80095c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d17e      	bne.n	80096ca <osThreadNew+0x11a>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d07b      	beq.n	80096ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80095d2:	2380      	movs	r3, #128	; 0x80
 80095d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80095d6:	2318      	movs	r3, #24
 80095d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80095de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d045      	beq.n	8009676 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <osThreadNew+0x48>
        name = attr->name;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d008      	beq.n	800961e <osThreadNew+0x6e>
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	2b38      	cmp	r3, #56	; 0x38
 8009610:	d805      	bhi.n	800961e <osThreadNew+0x6e>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <osThreadNew+0x72>
        return (NULL);
 800961e:	2300      	movs	r3, #0
 8009620:	e054      	b.n	80096cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	089b      	lsrs	r3, r3, #2
 8009630:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00e      	beq.n	8009658 <osThreadNew+0xa8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	2b5b      	cmp	r3, #91	; 0x5b
 8009640:	d90a      	bls.n	8009658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009646:	2b00      	cmp	r3, #0
 8009648:	d006      	beq.n	8009658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d002      	beq.n	8009658 <osThreadNew+0xa8>
        mem = 1;
 8009652:	2301      	movs	r3, #1
 8009654:	61bb      	str	r3, [r7, #24]
 8009656:	e010      	b.n	800967a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10c      	bne.n	800967a <osThreadNew+0xca>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d108      	bne.n	800967a <osThreadNew+0xca>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d104      	bne.n	800967a <osThreadNew+0xca>
          mem = 0;
 8009670:	2300      	movs	r3, #0
 8009672:	61bb      	str	r3, [r7, #24]
 8009674:	e001      	b.n	800967a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d110      	bne.n	80096a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009688:	9202      	str	r2, [sp, #8]
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	6a3a      	ldr	r2, [r7, #32]
 8009694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fe0c 	bl	800a2b4 <xTaskCreateStatic>
 800969c:	4603      	mov	r3, r0
 800969e:	613b      	str	r3, [r7, #16]
 80096a0:	e013      	b.n	80096ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d110      	bne.n	80096ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	f107 0310 	add.w	r3, r7, #16
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 fe57 	bl	800a36e <xTaskCreate>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d001      	beq.n	80096ca <osThreadNew+0x11a>
            hTask = NULL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80096ca:	693b      	ldr	r3, [r7, #16]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3728      	adds	r7, #40	; 0x28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096dc:	f3ef 8305 	mrs	r3, IPSR
 80096e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80096e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d003      	beq.n	80096f0 <osDelay+0x1c>
    stat = osErrorISR;
 80096e8:	f06f 0305 	mvn.w	r3, #5
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	e007      	b.n	8009700 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <osDelay+0x2c>
      vTaskDelay(ticks);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 ff7c 	bl	800a5f8 <vTaskDelay>
    }
  }

  return (stat);
 8009700:	68fb      	ldr	r3, [r7, #12]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4a07      	ldr	r2, [pc, #28]	; (8009738 <vApplicationGetIdleTaskMemory+0x2c>)
 800971c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	4a06      	ldr	r2, [pc, #24]	; (800973c <vApplicationGetIdleTaskMemory+0x30>)
 8009722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2280      	movs	r2, #128	; 0x80
 8009728:	601a      	str	r2, [r3, #0]
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	200004c4 	.word	0x200004c4
 800973c:	20000520 	.word	0x20000520

08009740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4a07      	ldr	r2, [pc, #28]	; (800976c <vApplicationGetTimerTaskMemory+0x2c>)
 8009750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4a06      	ldr	r2, [pc, #24]	; (8009770 <vApplicationGetTimerTaskMemory+0x30>)
 8009756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800975e:	601a      	str	r2, [r3, #0]
}
 8009760:	bf00      	nop
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	20000720 	.word	0x20000720
 8009770:	2000077c 	.word	0x2000077c

08009774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f103 0208 	add.w	r2, r3, #8
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800978c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f103 0208 	add.w	r2, r3, #8
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f103 0208 	add.w	r2, r3, #8
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80097c2:	bf00      	nop
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	689a      	ldr	r2, [r3, #8]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	601a      	str	r2, [r3, #0]
}
 800980a:	bf00      	nop
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009816:	b480      	push	{r7}
 8009818:	b085      	sub	sp, #20
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800982c:	d103      	bne.n	8009836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	e00c      	b.n	8009850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3308      	adds	r3, #8
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	e002      	b.n	8009844 <vListInsert+0x2e>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	429a      	cmp	r2, r3
 800984e:	d2f6      	bcs.n	800983e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	601a      	str	r2, [r3, #0]
}
 800987c:	bf00      	nop
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	6892      	ldr	r2, [r2, #8]
 800989e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	6852      	ldr	r2, [r2, #4]
 80098a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d103      	bne.n	80098bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689a      	ldr	r2, [r3, #8]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	1e5a      	subs	r2, r3, #1
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3714      	adds	r7, #20
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009906:	f002 f84d 	bl	800b9a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009916:	fb01 f303 	mul.w	r3, r1, r3
 800991a:	441a      	add	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009936:	3b01      	subs	r3, #1
 8009938:	68f9      	ldr	r1, [r7, #12]
 800993a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800993c:	fb01 f303 	mul.w	r3, r1, r3
 8009940:	441a      	add	r2, r3
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	22ff      	movs	r2, #255	; 0xff
 800994a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	22ff      	movs	r2, #255	; 0xff
 8009952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d114      	bne.n	8009986 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d01a      	beq.n	800999a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3310      	adds	r3, #16
 8009968:	4618      	mov	r0, r3
 800996a:	f001 f903 	bl	800ab74 <xTaskRemoveFromEventList>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d012      	beq.n	800999a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009974:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <xQueueGenericReset+0xcc>)
 8009976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	e009      	b.n	800999a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3310      	adds	r3, #16
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fef2 	bl	8009774 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	3324      	adds	r3, #36	; 0x24
 8009994:	4618      	mov	r0, r3
 8009996:	f7ff feed 	bl	8009774 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800999a:	f002 f833 	bl	800ba04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800999e:	2301      	movs	r3, #1
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	e000ed04 	.word	0xe000ed04

080099ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08e      	sub	sp, #56	; 0x38
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10a      	bne.n	80099d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <xQueueGenericCreateStatic+0x52>
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <xQueueGenericCreateStatic+0x56>
 80099fe:	2301      	movs	r3, #1
 8009a00:	e000      	b.n	8009a04 <xQueueGenericCreateStatic+0x58>
 8009a02:	2300      	movs	r3, #0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10a      	bne.n	8009a1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	623b      	str	r3, [r7, #32]
}
 8009a1a:	bf00      	nop
 8009a1c:	e7fe      	b.n	8009a1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d102      	bne.n	8009a2a <xQueueGenericCreateStatic+0x7e>
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <xQueueGenericCreateStatic+0x82>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e000      	b.n	8009a30 <xQueueGenericCreateStatic+0x84>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	61fb      	str	r3, [r7, #28]
}
 8009a46:	bf00      	nop
 8009a48:	e7fe      	b.n	8009a48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a4a:	2350      	movs	r3, #80	; 0x50
 8009a4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b50      	cmp	r3, #80	; 0x50
 8009a52:	d00a      	beq.n	8009a6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	61bb      	str	r3, [r7, #24]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00d      	beq.n	8009a92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4613      	mov	r3, r2
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	68b9      	ldr	r1, [r7, #8]
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 f805 	bl	8009a9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3730      	adds	r7, #48	; 0x30
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d103      	bne.n	8009ab8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	e002      	b.n	8009abe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009aca:	2101      	movs	r1, #1
 8009acc:	69b8      	ldr	r0, [r7, #24]
 8009ace:	f7ff ff05 	bl	80098dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ada:	bf00      	nop
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08e      	sub	sp, #56	; 0x38
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009af2:	2300      	movs	r3, #0
 8009af4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10a      	bne.n	8009b16 <xQueueGenericSend+0x32>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b12:	bf00      	nop
 8009b14:	e7fe      	b.n	8009b14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d103      	bne.n	8009b24 <xQueueGenericSend+0x40>
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d101      	bne.n	8009b28 <xQueueGenericSend+0x44>
 8009b24:	2301      	movs	r3, #1
 8009b26:	e000      	b.n	8009b2a <xQueueGenericSend+0x46>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10a      	bne.n	8009b44 <xQueueGenericSend+0x60>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b40:	bf00      	nop
 8009b42:	e7fe      	b.n	8009b42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d103      	bne.n	8009b52 <xQueueGenericSend+0x6e>
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d101      	bne.n	8009b56 <xQueueGenericSend+0x72>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <xQueueGenericSend+0x74>
 8009b56:	2300      	movs	r3, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10a      	bne.n	8009b72 <xQueueGenericSend+0x8e>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	623b      	str	r3, [r7, #32]
}
 8009b6e:	bf00      	nop
 8009b70:	e7fe      	b.n	8009b70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b72:	f001 f9bd 	bl	800aef0 <xTaskGetSchedulerState>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d102      	bne.n	8009b82 <xQueueGenericSend+0x9e>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <xQueueGenericSend+0xa2>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <xQueueGenericSend+0xa4>
 8009b86:	2300      	movs	r3, #0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	61fb      	str	r3, [r7, #28]
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ba2:	f001 feff 	bl	800b9a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d302      	bcc.n	8009bb8 <xQueueGenericSend+0xd4>
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d129      	bne.n	8009c0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	68b9      	ldr	r1, [r7, #8]
 8009bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bbe:	f000 fa0b 	bl	8009fd8 <prvCopyDataToQueue>
 8009bc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d010      	beq.n	8009bee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	3324      	adds	r3, #36	; 0x24
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 ffcf 	bl	800ab74 <xTaskRemoveFromEventList>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d013      	beq.n	8009c04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009bdc:	4b3f      	ldr	r3, [pc, #252]	; (8009cdc <xQueueGenericSend+0x1f8>)
 8009bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	e00a      	b.n	8009c04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d007      	beq.n	8009c04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009bf4:	4b39      	ldr	r3, [pc, #228]	; (8009cdc <xQueueGenericSend+0x1f8>)
 8009bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c04:	f001 fefe 	bl	800ba04 <vPortExitCritical>
				return pdPASS;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e063      	b.n	8009cd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c12:	f001 fef7 	bl	800ba04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	e05c      	b.n	8009cd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d106      	bne.n	8009c2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c20:	f107 0314 	add.w	r3, r7, #20
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 f809 	bl	800ac3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c2e:	f001 fee9 	bl	800ba04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c32:	f000 fd7b 	bl	800a72c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c36:	f001 feb5 	bl	800b9a4 <vPortEnterCritical>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c40:	b25b      	sxtb	r3, r3
 8009c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c46:	d103      	bne.n	8009c50 <xQueueGenericSend+0x16c>
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c56:	b25b      	sxtb	r3, r3
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c5c:	d103      	bne.n	8009c66 <xQueueGenericSend+0x182>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c66:	f001 fecd 	bl	800ba04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c6a:	1d3a      	adds	r2, r7, #4
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	4611      	mov	r1, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fff8 	bl	800ac68 <xTaskCheckForTimeOut>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d124      	bne.n	8009cc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c80:	f000 faa2 	bl	800a1c8 <prvIsQueueFull>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d018      	beq.n	8009cbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	3310      	adds	r3, #16
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	4611      	mov	r1, r2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 ff1e 	bl	800aad4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c9a:	f000 fa2d 	bl	800a0f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c9e:	f000 fd53 	bl	800a748 <xTaskResumeAll>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f47f af7c 	bne.w	8009ba2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009caa:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <xQueueGenericSend+0x1f8>)
 8009cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	e772      	b.n	8009ba2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cbe:	f000 fa1b 	bl	800a0f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cc2:	f000 fd41 	bl	800a748 <xTaskResumeAll>
 8009cc6:	e76c      	b.n	8009ba2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cca:	f000 fa15 	bl	800a0f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cce:	f000 fd3b 	bl	800a748 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009cd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3738      	adds	r7, #56	; 0x38
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b090      	sub	sp, #64	; 0x40
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d103      	bne.n	8009d1c <xQueueGenericSendFromISR+0x3c>
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <xQueueGenericSendFromISR+0x40>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e000      	b.n	8009d22 <xQueueGenericSendFromISR+0x42>
 8009d20:	2300      	movs	r3, #0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10a      	bne.n	8009d3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d38:	bf00      	nop
 8009d3a:	e7fe      	b.n	8009d3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d103      	bne.n	8009d4a <xQueueGenericSendFromISR+0x6a>
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <xQueueGenericSendFromISR+0x6e>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e000      	b.n	8009d50 <xQueueGenericSendFromISR+0x70>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	623b      	str	r3, [r7, #32]
}
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d6a:	f001 fefd 	bl	800bb68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	61fa      	str	r2, [r7, #28]
 8009d84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d302      	bcc.n	8009d9c <xQueueGenericSendFromISR+0xbc>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d12f      	bne.n	8009dfc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009daa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	68b9      	ldr	r1, [r7, #8]
 8009db0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009db2:	f000 f911 	bl	8009fd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009db6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dbe:	d112      	bne.n	8009de6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d016      	beq.n	8009df6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dca:	3324      	adds	r3, #36	; 0x24
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f000 fed1 	bl	800ab74 <xTaskRemoveFromEventList>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00e      	beq.n	8009df6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00b      	beq.n	8009df6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e007      	b.n	8009df6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009de6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dea:	3301      	adds	r3, #1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	b25a      	sxtb	r2, r3
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009df6:	2301      	movs	r3, #1
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009dfa:	e001      	b.n	8009e00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3740      	adds	r7, #64	; 0x40
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08c      	sub	sp, #48	; 0x30
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e24:	2300      	movs	r3, #0
 8009e26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <xQueueReceive+0x30>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	623b      	str	r3, [r7, #32]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d103      	bne.n	8009e56 <xQueueReceive+0x3e>
 8009e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <xQueueReceive+0x42>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e000      	b.n	8009e5c <xQueueReceive+0x44>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10a      	bne.n	8009e76 <xQueueReceive+0x5e>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	61fb      	str	r3, [r7, #28]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e76:	f001 f83b 	bl	800aef0 <xTaskGetSchedulerState>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <xQueueReceive+0x6e>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <xQueueReceive+0x72>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <xQueueReceive+0x74>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xQueueReceive+0x8e>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	61bb      	str	r3, [r7, #24]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ea6:	f001 fd7d 	bl	800b9a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01f      	beq.n	8009ef6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009eb6:	68b9      	ldr	r1, [r7, #8]
 8009eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eba:	f000 f8f7 	bl	800a0ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	1e5a      	subs	r2, r3, #1
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00f      	beq.n	8009eee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	3310      	adds	r3, #16
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fe4e 	bl	800ab74 <xTaskRemoveFromEventList>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d007      	beq.n	8009eee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ede:	4b3d      	ldr	r3, [pc, #244]	; (8009fd4 <xQueueReceive+0x1bc>)
 8009ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009eee:	f001 fd89 	bl	800ba04 <vPortExitCritical>
				return pdPASS;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e069      	b.n	8009fca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d103      	bne.n	8009f04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009efc:	f001 fd82 	bl	800ba04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f00:	2300      	movs	r3, #0
 8009f02:	e062      	b.n	8009fca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d106      	bne.n	8009f18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f0a:	f107 0310 	add.w	r3, r7, #16
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 fe94 	bl	800ac3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f14:	2301      	movs	r3, #1
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f18:	f001 fd74 	bl	800ba04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f1c:	f000 fc06 	bl	800a72c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f20:	f001 fd40 	bl	800b9a4 <vPortEnterCritical>
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f2a:	b25b      	sxtb	r3, r3
 8009f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f30:	d103      	bne.n	8009f3a <xQueueReceive+0x122>
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f40:	b25b      	sxtb	r3, r3
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f46:	d103      	bne.n	8009f50 <xQueueReceive+0x138>
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f50:	f001 fd58 	bl	800ba04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f54:	1d3a      	adds	r2, r7, #4
 8009f56:	f107 0310 	add.w	r3, r7, #16
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fe83 	bl	800ac68 <xTaskCheckForTimeOut>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d123      	bne.n	8009fb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f6a:	f000 f917 	bl	800a19c <prvIsQueueEmpty>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d017      	beq.n	8009fa4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	3324      	adds	r3, #36	; 0x24
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fda9 	bl	800aad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f84:	f000 f8b8 	bl	800a0f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f88:	f000 fbde 	bl	800a748 <xTaskResumeAll>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d189      	bne.n	8009ea6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009f92:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <xQueueReceive+0x1bc>)
 8009f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	e780      	b.n	8009ea6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fa6:	f000 f8a7 	bl	800a0f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009faa:	f000 fbcd 	bl	800a748 <xTaskResumeAll>
 8009fae:	e77a      	b.n	8009ea6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fb2:	f000 f8a1 	bl	800a0f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fb6:	f000 fbc7 	bl	800a748 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fbc:	f000 f8ee 	bl	800a19c <prvIsQueueEmpty>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f43f af6f 	beq.w	8009ea6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3730      	adds	r7, #48	; 0x30
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	e000ed04 	.word	0xe000ed04

08009fd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10d      	bne.n	800a012 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d14d      	bne.n	800a09a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 ff92 	bl	800af2c <xTaskPriorityDisinherit>
 800a008:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	609a      	str	r2, [r3, #8]
 800a010:	e043      	b.n	800a09a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d119      	bne.n	800a04c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6858      	ldr	r0, [r3, #4]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a020:	461a      	mov	r2, r3
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	f002 fbee 	bl	800c804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a030:	441a      	add	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d32b      	bcc.n	800a09a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	605a      	str	r2, [r3, #4]
 800a04a:	e026      	b.n	800a09a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	68d8      	ldr	r0, [r3, #12]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a054:	461a      	mov	r2, r3
 800a056:	68b9      	ldr	r1, [r7, #8]
 800a058:	f002 fbd4 	bl	800c804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68da      	ldr	r2, [r3, #12]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a064:	425b      	negs	r3, r3
 800a066:	441a      	add	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	68da      	ldr	r2, [r3, #12]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	429a      	cmp	r2, r3
 800a076:	d207      	bcs.n	800a088 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	425b      	negs	r3, r3
 800a082:	441a      	add	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d105      	bne.n	800a09a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	3b01      	subs	r3, #1
 800a098:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0a2:	697b      	ldr	r3, [r7, #20]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d018      	beq.n	800a0f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	441a      	add	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68da      	ldr	r2, [r3, #12]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d303      	bcc.n	800a0e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68d9      	ldr	r1, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6838      	ldr	r0, [r7, #0]
 800a0ec:	f002 fb8a 	bl	800c804 <memcpy>
	}
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a100:	f001 fc50 	bl	800b9a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a10a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a10c:	e011      	b.n	800a132 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d012      	beq.n	800a13c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3324      	adds	r3, #36	; 0x24
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 fd2a 	bl	800ab74 <xTaskRemoveFromEventList>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a126:	f000 fe01 	bl	800ad2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a136:	2b00      	cmp	r3, #0
 800a138:	dce9      	bgt.n	800a10e <prvUnlockQueue+0x16>
 800a13a:	e000      	b.n	800a13e <prvUnlockQueue+0x46>
					break;
 800a13c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	22ff      	movs	r2, #255	; 0xff
 800a142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a146:	f001 fc5d 	bl	800ba04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a14a:	f001 fc2b 	bl	800b9a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a154:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a156:	e011      	b.n	800a17c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d012      	beq.n	800a186 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3310      	adds	r3, #16
 800a164:	4618      	mov	r0, r3
 800a166:	f000 fd05 	bl	800ab74 <xTaskRemoveFromEventList>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a170:	f000 fddc 	bl	800ad2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a174:	7bbb      	ldrb	r3, [r7, #14]
 800a176:	3b01      	subs	r3, #1
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a17c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a180:	2b00      	cmp	r3, #0
 800a182:	dce9      	bgt.n	800a158 <prvUnlockQueue+0x60>
 800a184:	e000      	b.n	800a188 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a186:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	22ff      	movs	r2, #255	; 0xff
 800a18c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a190:	f001 fc38 	bl	800ba04 <vPortExitCritical>
}
 800a194:	bf00      	nop
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1a4:	f001 fbfe 	bl	800b9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	e001      	b.n	800a1ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1ba:	f001 fc23 	bl	800ba04 <vPortExitCritical>

	return xReturn;
 800a1be:	68fb      	ldr	r3, [r7, #12]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1d0:	f001 fbe8 	bl	800b9a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d102      	bne.n	800a1e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	e001      	b.n	800a1ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1ea:	f001 fc0b 	bl	800ba04 <vPortExitCritical>

	return xReturn;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	e014      	b.n	800a232 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a208:	4a0f      	ldr	r2, [pc, #60]	; (800a248 <vQueueAddToRegistry+0x50>)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a214:	490c      	ldr	r1, [pc, #48]	; (800a248 <vQueueAddToRegistry+0x50>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a21e:	4a0a      	ldr	r2, [pc, #40]	; (800a248 <vQueueAddToRegistry+0x50>)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	4413      	add	r3, r2
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a22a:	e006      	b.n	800a23a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b07      	cmp	r3, #7
 800a236:	d9e7      	bls.n	800a208 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	20000b7c 	.word	0x20000b7c

0800a24c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a25c:	f001 fba2 	bl	800b9a4 <vPortEnterCritical>
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a266:	b25b      	sxtb	r3, r3
 800a268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a26c:	d103      	bne.n	800a276 <vQueueWaitForMessageRestricted+0x2a>
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a27c:	b25b      	sxtb	r3, r3
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a282:	d103      	bne.n	800a28c <vQueueWaitForMessageRestricted+0x40>
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a28c:	f001 fbba 	bl	800ba04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a294:	2b00      	cmp	r3, #0
 800a296:	d106      	bne.n	800a2a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	3324      	adds	r3, #36	; 0x24
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	68b9      	ldr	r1, [r7, #8]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fc3b 	bl	800ab1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a2a6:	6978      	ldr	r0, [r7, #20]
 800a2a8:	f7ff ff26 	bl	800a0f8 <prvUnlockQueue>
	}
 800a2ac:	bf00      	nop
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08e      	sub	sp, #56	; 0x38
 800a2b8:	af04      	add	r7, sp, #16
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <xTaskCreateStatic+0x2a>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	623b      	str	r3, [r7, #32]
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10a      	bne.n	800a2fa <xTaskCreateStatic+0x46>
	__asm volatile
 800a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	61fb      	str	r3, [r7, #28]
}
 800a2f6:	bf00      	nop
 800a2f8:	e7fe      	b.n	800a2f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2fa:	235c      	movs	r3, #92	; 0x5c
 800a2fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2b5c      	cmp	r3, #92	; 0x5c
 800a302:	d00a      	beq.n	800a31a <xTaskCreateStatic+0x66>
	__asm volatile
 800a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	61bb      	str	r3, [r7, #24]
}
 800a316:	bf00      	nop
 800a318:	e7fe      	b.n	800a318 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a31a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d01e      	beq.n	800a360 <xTaskCreateStatic+0xac>
 800a322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01b      	beq.n	800a360 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a330:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	2202      	movs	r2, #2
 800a336:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a33a:	2300      	movs	r3, #0
 800a33c:	9303      	str	r3, [sp, #12]
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	9302      	str	r3, [sp, #8]
 800a342:	f107 0314 	add.w	r3, r7, #20
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 f850 	bl	800a3f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a35a:	f000 f8dd 	bl	800a518 <prvAddNewTaskToReadyList>
 800a35e:	e001      	b.n	800a364 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a364:	697b      	ldr	r3, [r7, #20]
	}
 800a366:	4618      	mov	r0, r3
 800a368:	3728      	adds	r7, #40	; 0x28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b08c      	sub	sp, #48	; 0x30
 800a372:	af04      	add	r7, sp, #16
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	603b      	str	r3, [r7, #0]
 800a37a:	4613      	mov	r3, r2
 800a37c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a37e:	88fb      	ldrh	r3, [r7, #6]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4618      	mov	r0, r3
 800a384:	f001 fc30 	bl	800bbe8 <pvPortMalloc>
 800a388:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00e      	beq.n	800a3ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a390:	205c      	movs	r0, #92	; 0x5c
 800a392:	f001 fc29 	bl	800bbe8 <pvPortMalloc>
 800a396:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	631a      	str	r2, [r3, #48]	; 0x30
 800a3a4:	e005      	b.n	800a3b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a3a6:	6978      	ldr	r0, [r7, #20]
 800a3a8:	f001 fcea 	bl	800bd80 <vPortFree>
 800a3ac:	e001      	b.n	800a3b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d017      	beq.n	800a3e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a3c0:	88fa      	ldrh	r2, [r7, #6]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	9302      	str	r3, [sp, #8]
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68b9      	ldr	r1, [r7, #8]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 f80e 	bl	800a3f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3dc:	69f8      	ldr	r0, [r7, #28]
 800a3de:	f000 f89b 	bl	800a518 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	61bb      	str	r3, [r7, #24]
 800a3e6:	e002      	b.n	800a3ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3ee:	69bb      	ldr	r3, [r7, #24]
	}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3720      	adds	r7, #32
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b088      	sub	sp, #32
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	461a      	mov	r2, r3
 800a410:	21a5      	movs	r1, #165	; 0xa5
 800a412:	f002 f9c3 	bl	800c79c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a420:	3b01      	subs	r3, #1
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	f023 0307 	bic.w	r3, r3, #7
 800a42e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00a      	beq.n	800a450 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	617b      	str	r3, [r7, #20]
}
 800a44c:	bf00      	nop
 800a44e:	e7fe      	b.n	800a44e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d01f      	beq.n	800a496 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a456:	2300      	movs	r3, #0
 800a458:	61fb      	str	r3, [r7, #28]
 800a45a:	e012      	b.n	800a482 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	4413      	add	r3, r2
 800a462:	7819      	ldrb	r1, [r3, #0]
 800a464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	4413      	add	r3, r2
 800a46a:	3334      	adds	r3, #52	; 0x34
 800a46c:	460a      	mov	r2, r1
 800a46e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	4413      	add	r3, r2
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d006      	beq.n	800a48a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	3301      	adds	r3, #1
 800a480:	61fb      	str	r3, [r7, #28]
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	2b0f      	cmp	r3, #15
 800a486:	d9e9      	bls.n	800a45c <prvInitialiseNewTask+0x64>
 800a488:	e000      	b.n	800a48c <prvInitialiseNewTask+0x94>
			{
				break;
 800a48a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a494:	e003      	b.n	800a49e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	2b37      	cmp	r3, #55	; 0x37
 800a4a2:	d901      	bls.n	800a4a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a4a4:	2337      	movs	r3, #55	; 0x37
 800a4a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff f978 	bl	80097b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	3318      	adds	r3, #24
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff f973 	bl	80097b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	68f9      	ldr	r1, [r7, #12]
 800a4f6:	69b8      	ldr	r0, [r7, #24]
 800a4f8:	f001 f928 	bl	800b74c <pxPortInitialiseStack>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a500:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a50c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a50e:	bf00      	nop
 800a510:	3720      	adds	r7, #32
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a520:	f001 fa40 	bl	800b9a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a524:	4b2d      	ldr	r3, [pc, #180]	; (800a5dc <prvAddNewTaskToReadyList+0xc4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3301      	adds	r3, #1
 800a52a:	4a2c      	ldr	r2, [pc, #176]	; (800a5dc <prvAddNewTaskToReadyList+0xc4>)
 800a52c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a52e:	4b2c      	ldr	r3, [pc, #176]	; (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d109      	bne.n	800a54a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a536:	4a2a      	ldr	r2, [pc, #168]	; (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a53c:	4b27      	ldr	r3, [pc, #156]	; (800a5dc <prvAddNewTaskToReadyList+0xc4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d110      	bne.n	800a566 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a544:	f000 fc16 	bl	800ad74 <prvInitialiseTaskLists>
 800a548:	e00d      	b.n	800a566 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a54a:	4b26      	ldr	r3, [pc, #152]	; (800a5e4 <prvAddNewTaskToReadyList+0xcc>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d109      	bne.n	800a566 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a552:	4b23      	ldr	r3, [pc, #140]	; (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d802      	bhi.n	800a566 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a560:	4a1f      	ldr	r2, [pc, #124]	; (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a566:	4b20      	ldr	r3, [pc, #128]	; (800a5e8 <prvAddNewTaskToReadyList+0xd0>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3301      	adds	r3, #1
 800a56c:	4a1e      	ldr	r2, [pc, #120]	; (800a5e8 <prvAddNewTaskToReadyList+0xd0>)
 800a56e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a570:	4b1d      	ldr	r3, [pc, #116]	; (800a5e8 <prvAddNewTaskToReadyList+0xd0>)
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57c:	4b1b      	ldr	r3, [pc, #108]	; (800a5ec <prvAddNewTaskToReadyList+0xd4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d903      	bls.n	800a58c <prvAddNewTaskToReadyList+0x74>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	4a18      	ldr	r2, [pc, #96]	; (800a5ec <prvAddNewTaskToReadyList+0xd4>)
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a590:	4613      	mov	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4a15      	ldr	r2, [pc, #84]	; (800a5f0 <prvAddNewTaskToReadyList+0xd8>)
 800a59a:	441a      	add	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f7ff f913 	bl	80097ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a5a8:	f001 fa2c 	bl	800ba04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a5ac:	4b0d      	ldr	r3, [pc, #52]	; (800a5e4 <prvAddNewTaskToReadyList+0xcc>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00e      	beq.n	800a5d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <prvAddNewTaskToReadyList+0xc8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d207      	bcs.n	800a5d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a5c2:	4b0c      	ldr	r3, [pc, #48]	; (800a5f4 <prvAddNewTaskToReadyList+0xdc>)
 800a5c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5d2:	bf00      	nop
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20001090 	.word	0x20001090
 800a5e0:	20000bbc 	.word	0x20000bbc
 800a5e4:	2000109c 	.word	0x2000109c
 800a5e8:	200010ac 	.word	0x200010ac
 800a5ec:	20001098 	.word	0x20001098
 800a5f0:	20000bc0 	.word	0x20000bc0
 800a5f4:	e000ed04 	.word	0xe000ed04

0800a5f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d017      	beq.n	800a63a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a60a:	4b13      	ldr	r3, [pc, #76]	; (800a658 <vTaskDelay+0x60>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <vTaskDelay+0x30>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	60bb      	str	r3, [r7, #8]
}
 800a624:	bf00      	nop
 800a626:	e7fe      	b.n	800a626 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a628:	f000 f880 	bl	800a72c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a62c:	2100      	movs	r1, #0
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fcea 	bl	800b008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a634:	f000 f888 	bl	800a748 <xTaskResumeAll>
 800a638:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d107      	bne.n	800a650 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a640:	4b06      	ldr	r3, [pc, #24]	; (800a65c <vTaskDelay+0x64>)
 800a642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	200010b8 	.word	0x200010b8
 800a65c:	e000ed04 	.word	0xe000ed04

0800a660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08a      	sub	sp, #40	; 0x28
 800a664:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a666:	2300      	movs	r3, #0
 800a668:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a66e:	463a      	mov	r2, r7
 800a670:	1d39      	adds	r1, r7, #4
 800a672:	f107 0308 	add.w	r3, r7, #8
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff f848 	bl	800970c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	9202      	str	r2, [sp, #8]
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	2300      	movs	r3, #0
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	2300      	movs	r3, #0
 800a68c:	460a      	mov	r2, r1
 800a68e:	4921      	ldr	r1, [pc, #132]	; (800a714 <vTaskStartScheduler+0xb4>)
 800a690:	4821      	ldr	r0, [pc, #132]	; (800a718 <vTaskStartScheduler+0xb8>)
 800a692:	f7ff fe0f 	bl	800a2b4 <xTaskCreateStatic>
 800a696:	4603      	mov	r3, r0
 800a698:	4a20      	ldr	r2, [pc, #128]	; (800a71c <vTaskStartScheduler+0xbc>)
 800a69a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a69c:	4b1f      	ldr	r3, [pc, #124]	; (800a71c <vTaskStartScheduler+0xbc>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	617b      	str	r3, [r7, #20]
 800a6a8:	e001      	b.n	800a6ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d102      	bne.n	800a6ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a6b4:	f000 fcfc 	bl	800b0b0 <xTimerCreateTimerTask>
 800a6b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d116      	bne.n	800a6ee <vTaskStartScheduler+0x8e>
	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	613b      	str	r3, [r7, #16]
}
 800a6d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a6d4:	4b12      	ldr	r3, [pc, #72]	; (800a720 <vTaskStartScheduler+0xc0>)
 800a6d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6dc:	4b11      	ldr	r3, [pc, #68]	; (800a724 <vTaskStartScheduler+0xc4>)
 800a6de:	2201      	movs	r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6e2:	4b11      	ldr	r3, [pc, #68]	; (800a728 <vTaskStartScheduler+0xc8>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a6e8:	f001 f8ba 	bl	800b860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a6ec:	e00e      	b.n	800a70c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6f4:	d10a      	bne.n	800a70c <vTaskStartScheduler+0xac>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	60fb      	str	r3, [r7, #12]
}
 800a708:	bf00      	nop
 800a70a:	e7fe      	b.n	800a70a <vTaskStartScheduler+0xaa>
}
 800a70c:	bf00      	nop
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	0800d12c 	.word	0x0800d12c
 800a718:	0800ad45 	.word	0x0800ad45
 800a71c:	200010b4 	.word	0x200010b4
 800a720:	200010b0 	.word	0x200010b0
 800a724:	2000109c 	.word	0x2000109c
 800a728:	20001094 	.word	0x20001094

0800a72c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a730:	4b04      	ldr	r3, [pc, #16]	; (800a744 <vTaskSuspendAll+0x18>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3301      	adds	r3, #1
 800a736:	4a03      	ldr	r2, [pc, #12]	; (800a744 <vTaskSuspendAll+0x18>)
 800a738:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a73a:	bf00      	nop
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	200010b8 	.word	0x200010b8

0800a748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a752:	2300      	movs	r3, #0
 800a754:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a756:	4b42      	ldr	r3, [pc, #264]	; (800a860 <xTaskResumeAll+0x118>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10a      	bne.n	800a774 <xTaskResumeAll+0x2c>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	603b      	str	r3, [r7, #0]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a774:	f001 f916 	bl	800b9a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a778:	4b39      	ldr	r3, [pc, #228]	; (800a860 <xTaskResumeAll+0x118>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	3b01      	subs	r3, #1
 800a77e:	4a38      	ldr	r2, [pc, #224]	; (800a860 <xTaskResumeAll+0x118>)
 800a780:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a782:	4b37      	ldr	r3, [pc, #220]	; (800a860 <xTaskResumeAll+0x118>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d162      	bne.n	800a850 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a78a:	4b36      	ldr	r3, [pc, #216]	; (800a864 <xTaskResumeAll+0x11c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d05e      	beq.n	800a850 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a792:	e02f      	b.n	800a7f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a794:	4b34      	ldr	r3, [pc, #208]	; (800a868 <xTaskResumeAll+0x120>)
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3318      	adds	r3, #24
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7ff f871 	bl	8009888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff f86c 	bl	8009888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b4:	4b2d      	ldr	r3, [pc, #180]	; (800a86c <xTaskResumeAll+0x124>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d903      	bls.n	800a7c4 <xTaskResumeAll+0x7c>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c0:	4a2a      	ldr	r2, [pc, #168]	; (800a86c <xTaskResumeAll+0x124>)
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4a27      	ldr	r2, [pc, #156]	; (800a870 <xTaskResumeAll+0x128>)
 800a7d2:	441a      	add	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	4619      	mov	r1, r3
 800a7da:	4610      	mov	r0, r2
 800a7dc:	f7fe fff7 	bl	80097ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e4:	4b23      	ldr	r3, [pc, #140]	; (800a874 <xTaskResumeAll+0x12c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d302      	bcc.n	800a7f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a7ee:	4b22      	ldr	r3, [pc, #136]	; (800a878 <xTaskResumeAll+0x130>)
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7f4:	4b1c      	ldr	r3, [pc, #112]	; (800a868 <xTaskResumeAll+0x120>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1cb      	bne.n	800a794 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a802:	f000 fb55 	bl	800aeb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a806:	4b1d      	ldr	r3, [pc, #116]	; (800a87c <xTaskResumeAll+0x134>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d010      	beq.n	800a834 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a812:	f000 f847 	bl	800a8a4 <xTaskIncrementTick>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a81c:	4b16      	ldr	r3, [pc, #88]	; (800a878 <xTaskResumeAll+0x130>)
 800a81e:	2201      	movs	r2, #1
 800a820:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	3b01      	subs	r3, #1
 800a826:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1f1      	bne.n	800a812 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a82e:	4b13      	ldr	r3, [pc, #76]	; (800a87c <xTaskResumeAll+0x134>)
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a834:	4b10      	ldr	r3, [pc, #64]	; (800a878 <xTaskResumeAll+0x130>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d009      	beq.n	800a850 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a83c:	2301      	movs	r3, #1
 800a83e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a840:	4b0f      	ldr	r3, [pc, #60]	; (800a880 <xTaskResumeAll+0x138>)
 800a842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a850:	f001 f8d8 	bl	800ba04 <vPortExitCritical>

	return xAlreadyYielded;
 800a854:	68bb      	ldr	r3, [r7, #8]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	200010b8 	.word	0x200010b8
 800a864:	20001090 	.word	0x20001090
 800a868:	20001050 	.word	0x20001050
 800a86c:	20001098 	.word	0x20001098
 800a870:	20000bc0 	.word	0x20000bc0
 800a874:	20000bbc 	.word	0x20000bbc
 800a878:	200010a4 	.word	0x200010a4
 800a87c:	200010a0 	.word	0x200010a0
 800a880:	e000ed04 	.word	0xe000ed04

0800a884 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a88a:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <xTaskGetTickCount+0x1c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a890:	687b      	ldr	r3, [r7, #4]
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	20001094 	.word	0x20001094

0800a8a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ae:	4b4f      	ldr	r3, [pc, #316]	; (800a9ec <xTaskIncrementTick+0x148>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f040 808f 	bne.w	800a9d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a8b8:	4b4d      	ldr	r3, [pc, #308]	; (800a9f0 <xTaskIncrementTick+0x14c>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a8c0:	4a4b      	ldr	r2, [pc, #300]	; (800a9f0 <xTaskIncrementTick+0x14c>)
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d120      	bne.n	800a90e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8cc:	4b49      	ldr	r3, [pc, #292]	; (800a9f4 <xTaskIncrementTick+0x150>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00a      	beq.n	800a8ec <xTaskIncrementTick+0x48>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	603b      	str	r3, [r7, #0]
}
 800a8e8:	bf00      	nop
 800a8ea:	e7fe      	b.n	800a8ea <xTaskIncrementTick+0x46>
 800a8ec:	4b41      	ldr	r3, [pc, #260]	; (800a9f4 <xTaskIncrementTick+0x150>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	60fb      	str	r3, [r7, #12]
 800a8f2:	4b41      	ldr	r3, [pc, #260]	; (800a9f8 <xTaskIncrementTick+0x154>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a3f      	ldr	r2, [pc, #252]	; (800a9f4 <xTaskIncrementTick+0x150>)
 800a8f8:	6013      	str	r3, [r2, #0]
 800a8fa:	4a3f      	ldr	r2, [pc, #252]	; (800a9f8 <xTaskIncrementTick+0x154>)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	4b3e      	ldr	r3, [pc, #248]	; (800a9fc <xTaskIncrementTick+0x158>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	4a3d      	ldr	r2, [pc, #244]	; (800a9fc <xTaskIncrementTick+0x158>)
 800a908:	6013      	str	r3, [r2, #0]
 800a90a:	f000 fad1 	bl	800aeb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a90e:	4b3c      	ldr	r3, [pc, #240]	; (800aa00 <xTaskIncrementTick+0x15c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	429a      	cmp	r2, r3
 800a916:	d349      	bcc.n	800a9ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a918:	4b36      	ldr	r3, [pc, #216]	; (800a9f4 <xTaskIncrementTick+0x150>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d104      	bne.n	800a92c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a922:	4b37      	ldr	r3, [pc, #220]	; (800aa00 <xTaskIncrementTick+0x15c>)
 800a924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a928:	601a      	str	r2, [r3, #0]
					break;
 800a92a:	e03f      	b.n	800a9ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a92c:	4b31      	ldr	r3, [pc, #196]	; (800a9f4 <xTaskIncrementTick+0x150>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	429a      	cmp	r2, r3
 800a942:	d203      	bcs.n	800a94c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a944:	4a2e      	ldr	r2, [pc, #184]	; (800aa00 <xTaskIncrementTick+0x15c>)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a94a:	e02f      	b.n	800a9ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	3304      	adds	r3, #4
 800a950:	4618      	mov	r0, r3
 800a952:	f7fe ff99 	bl	8009888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d004      	beq.n	800a968 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	3318      	adds	r3, #24
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe ff90 	bl	8009888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96c:	4b25      	ldr	r3, [pc, #148]	; (800aa04 <xTaskIncrementTick+0x160>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d903      	bls.n	800a97c <xTaskIncrementTick+0xd8>
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	4a22      	ldr	r2, [pc, #136]	; (800aa04 <xTaskIncrementTick+0x160>)
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4a1f      	ldr	r2, [pc, #124]	; (800aa08 <xTaskIncrementTick+0x164>)
 800a98a:	441a      	add	r2, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	3304      	adds	r3, #4
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f7fe ff1b 	bl	80097ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99c:	4b1b      	ldr	r3, [pc, #108]	; (800aa0c <xTaskIncrementTick+0x168>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d3b8      	bcc.n	800a918 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9aa:	e7b5      	b.n	800a918 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a9ac:	4b17      	ldr	r3, [pc, #92]	; (800aa0c <xTaskIncrementTick+0x168>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b2:	4915      	ldr	r1, [pc, #84]	; (800aa08 <xTaskIncrementTick+0x164>)
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	440b      	add	r3, r1
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d901      	bls.n	800a9c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a9c8:	4b11      	ldr	r3, [pc, #68]	; (800aa10 <xTaskIncrementTick+0x16c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d007      	beq.n	800a9e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	617b      	str	r3, [r7, #20]
 800a9d4:	e004      	b.n	800a9e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a9d6:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <xTaskIncrementTick+0x170>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	4a0d      	ldr	r2, [pc, #52]	; (800aa14 <xTaskIncrementTick+0x170>)
 800a9de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a9e0:	697b      	ldr	r3, [r7, #20]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	200010b8 	.word	0x200010b8
 800a9f0:	20001094 	.word	0x20001094
 800a9f4:	20001048 	.word	0x20001048
 800a9f8:	2000104c 	.word	0x2000104c
 800a9fc:	200010a8 	.word	0x200010a8
 800aa00:	200010b0 	.word	0x200010b0
 800aa04:	20001098 	.word	0x20001098
 800aa08:	20000bc0 	.word	0x20000bc0
 800aa0c:	20000bbc 	.word	0x20000bbc
 800aa10:	200010a4 	.word	0x200010a4
 800aa14:	200010a0 	.word	0x200010a0

0800aa18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa1e:	4b28      	ldr	r3, [pc, #160]	; (800aac0 <vTaskSwitchContext+0xa8>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d003      	beq.n	800aa2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa26:	4b27      	ldr	r3, [pc, #156]	; (800aac4 <vTaskSwitchContext+0xac>)
 800aa28:	2201      	movs	r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa2c:	e041      	b.n	800aab2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800aa2e:	4b25      	ldr	r3, [pc, #148]	; (800aac4 <vTaskSwitchContext+0xac>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa34:	4b24      	ldr	r3, [pc, #144]	; (800aac8 <vTaskSwitchContext+0xb0>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e010      	b.n	800aa5e <vTaskSwitchContext+0x46>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <vTaskSwitchContext+0x40>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	607b      	str	r3, [r7, #4]
}
 800aa54:	bf00      	nop
 800aa56:	e7fe      	b.n	800aa56 <vTaskSwitchContext+0x3e>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]
 800aa5e:	491b      	ldr	r1, [pc, #108]	; (800aacc <vTaskSwitchContext+0xb4>)
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4613      	mov	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	440b      	add	r3, r1
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0e4      	beq.n	800aa3c <vTaskSwitchContext+0x24>
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	4613      	mov	r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4a13      	ldr	r2, [pc, #76]	; (800aacc <vTaskSwitchContext+0xb4>)
 800aa7e:	4413      	add	r3, r2
 800aa80:	60bb      	str	r3, [r7, #8]
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	605a      	str	r2, [r3, #4]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	3308      	adds	r3, #8
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d104      	bne.n	800aaa2 <vTaskSwitchContext+0x8a>
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	685a      	ldr	r2, [r3, #4]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	605a      	str	r2, [r3, #4]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	4a09      	ldr	r2, [pc, #36]	; (800aad0 <vTaskSwitchContext+0xb8>)
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	4a06      	ldr	r2, [pc, #24]	; (800aac8 <vTaskSwitchContext+0xb0>)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6013      	str	r3, [r2, #0]
}
 800aab2:	bf00      	nop
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	200010b8 	.word	0x200010b8
 800aac4:	200010a4 	.word	0x200010a4
 800aac8:	20001098 	.word	0x20001098
 800aacc:	20000bc0 	.word	0x20000bc0
 800aad0:	20000bbc 	.word	0x20000bbc

0800aad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10a      	bne.n	800aafa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	60fb      	str	r3, [r7, #12]
}
 800aaf6:	bf00      	nop
 800aaf8:	e7fe      	b.n	800aaf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aafa:	4b07      	ldr	r3, [pc, #28]	; (800ab18 <vTaskPlaceOnEventList+0x44>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3318      	adds	r3, #24
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7fe fe87 	bl	8009816 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab08:	2101      	movs	r1, #1
 800ab0a:	6838      	ldr	r0, [r7, #0]
 800ab0c:	f000 fa7c 	bl	800b008 <prvAddCurrentTaskToDelayedList>
}
 800ab10:	bf00      	nop
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	20000bbc 	.word	0x20000bbc

0800ab1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b086      	sub	sp, #24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10a      	bne.n	800ab44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	617b      	str	r3, [r7, #20]
}
 800ab40:	bf00      	nop
 800ab42:	e7fe      	b.n	800ab42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab44:	4b0a      	ldr	r3, [pc, #40]	; (800ab70 <vTaskPlaceOnEventListRestricted+0x54>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3318      	adds	r3, #24
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7fe fe3e 	bl	80097ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d002      	beq.n	800ab5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ab58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ab5e:	6879      	ldr	r1, [r7, #4]
 800ab60:	68b8      	ldr	r0, [r7, #8]
 800ab62:	f000 fa51 	bl	800b008 <prvAddCurrentTaskToDelayedList>
	}
 800ab66:	bf00      	nop
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20000bbc 	.word	0x20000bbc

0800ab74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10a      	bne.n	800aba0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	60fb      	str	r3, [r7, #12]
}
 800ab9c:	bf00      	nop
 800ab9e:	e7fe      	b.n	800ab9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	3318      	adds	r3, #24
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe fe6f 	bl	8009888 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abaa:	4b1e      	ldr	r3, [pc, #120]	; (800ac24 <xTaskRemoveFromEventList+0xb0>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d11d      	bne.n	800abee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	3304      	adds	r3, #4
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe fe66 	bl	8009888 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc0:	4b19      	ldr	r3, [pc, #100]	; (800ac28 <xTaskRemoveFromEventList+0xb4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d903      	bls.n	800abd0 <xTaskRemoveFromEventList+0x5c>
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abcc:	4a16      	ldr	r2, [pc, #88]	; (800ac28 <xTaskRemoveFromEventList+0xb4>)
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd4:	4613      	mov	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4413      	add	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4a13      	ldr	r2, [pc, #76]	; (800ac2c <xTaskRemoveFromEventList+0xb8>)
 800abde:	441a      	add	r2, r3
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4619      	mov	r1, r3
 800abe6:	4610      	mov	r0, r2
 800abe8:	f7fe fdf1 	bl	80097ce <vListInsertEnd>
 800abec:	e005      	b.n	800abfa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	3318      	adds	r3, #24
 800abf2:	4619      	mov	r1, r3
 800abf4:	480e      	ldr	r0, [pc, #56]	; (800ac30 <xTaskRemoveFromEventList+0xbc>)
 800abf6:	f7fe fdea 	bl	80097ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfe:	4b0d      	ldr	r3, [pc, #52]	; (800ac34 <xTaskRemoveFromEventList+0xc0>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d905      	bls.n	800ac14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <xTaskRemoveFromEventList+0xc4>)
 800ac0e:	2201      	movs	r2, #1
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	e001      	b.n	800ac18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ac14:	2300      	movs	r3, #0
 800ac16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac18:	697b      	ldr	r3, [r7, #20]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3718      	adds	r7, #24
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	200010b8 	.word	0x200010b8
 800ac28:	20001098 	.word	0x20001098
 800ac2c:	20000bc0 	.word	0x20000bc0
 800ac30:	20001050 	.word	0x20001050
 800ac34:	20000bbc 	.word	0x20000bbc
 800ac38:	200010a4 	.word	0x200010a4

0800ac3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac44:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <vTaskInternalSetTimeOutState+0x24>)
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac4c:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <vTaskInternalSetTimeOutState+0x28>)
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	605a      	str	r2, [r3, #4]
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	200010a8 	.word	0x200010a8
 800ac64:	20001094 	.word	0x20001094

0800ac68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	613b      	str	r3, [r7, #16]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10a      	bne.n	800acaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	60fb      	str	r3, [r7, #12]
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800acaa:	f000 fe7b 	bl	800b9a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acae:	4b1d      	ldr	r3, [pc, #116]	; (800ad24 <xTaskCheckForTimeOut+0xbc>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	69ba      	ldr	r2, [r7, #24]
 800acba:	1ad3      	subs	r3, r2, r3
 800acbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc6:	d102      	bne.n	800acce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800acc8:	2300      	movs	r3, #0
 800acca:	61fb      	str	r3, [r7, #28]
 800accc:	e023      	b.n	800ad16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	4b15      	ldr	r3, [pc, #84]	; (800ad28 <xTaskCheckForTimeOut+0xc0>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d007      	beq.n	800acea <xTaskCheckForTimeOut+0x82>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	69ba      	ldr	r2, [r7, #24]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d302      	bcc.n	800acea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	61fb      	str	r3, [r7, #28]
 800ace8:	e015      	b.n	800ad16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d20b      	bcs.n	800ad0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	1ad2      	subs	r2, r2, r3
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff ff9b 	bl	800ac3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	61fb      	str	r3, [r7, #28]
 800ad0a:	e004      	b.n	800ad16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad12:	2301      	movs	r3, #1
 800ad14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad16:	f000 fe75 	bl	800ba04 <vPortExitCritical>

	return xReturn;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3720      	adds	r7, #32
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	20001094 	.word	0x20001094
 800ad28:	200010a8 	.word	0x200010a8

0800ad2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad30:	4b03      	ldr	r3, [pc, #12]	; (800ad40 <vTaskMissedYield+0x14>)
 800ad32:	2201      	movs	r2, #1
 800ad34:	601a      	str	r2, [r3, #0]
}
 800ad36:	bf00      	nop
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	200010a4 	.word	0x200010a4

0800ad44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad4c:	f000 f852 	bl	800adf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad50:	4b06      	ldr	r3, [pc, #24]	; (800ad6c <prvIdleTask+0x28>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d9f9      	bls.n	800ad4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ad58:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <prvIdleTask+0x2c>)
 800ad5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ad68:	e7f0      	b.n	800ad4c <prvIdleTask+0x8>
 800ad6a:	bf00      	nop
 800ad6c:	20000bc0 	.word	0x20000bc0
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	607b      	str	r3, [r7, #4]
 800ad7e:	e00c      	b.n	800ad9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4a12      	ldr	r2, [pc, #72]	; (800add4 <prvInitialiseTaskLists+0x60>)
 800ad8c:	4413      	add	r3, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe fcf0 	bl	8009774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3301      	adds	r3, #1
 800ad98:	607b      	str	r3, [r7, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b37      	cmp	r3, #55	; 0x37
 800ad9e:	d9ef      	bls.n	800ad80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ada0:	480d      	ldr	r0, [pc, #52]	; (800add8 <prvInitialiseTaskLists+0x64>)
 800ada2:	f7fe fce7 	bl	8009774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ada6:	480d      	ldr	r0, [pc, #52]	; (800addc <prvInitialiseTaskLists+0x68>)
 800ada8:	f7fe fce4 	bl	8009774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800adac:	480c      	ldr	r0, [pc, #48]	; (800ade0 <prvInitialiseTaskLists+0x6c>)
 800adae:	f7fe fce1 	bl	8009774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800adb2:	480c      	ldr	r0, [pc, #48]	; (800ade4 <prvInitialiseTaskLists+0x70>)
 800adb4:	f7fe fcde 	bl	8009774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800adb8:	480b      	ldr	r0, [pc, #44]	; (800ade8 <prvInitialiseTaskLists+0x74>)
 800adba:	f7fe fcdb 	bl	8009774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800adbe:	4b0b      	ldr	r3, [pc, #44]	; (800adec <prvInitialiseTaskLists+0x78>)
 800adc0:	4a05      	ldr	r2, [pc, #20]	; (800add8 <prvInitialiseTaskLists+0x64>)
 800adc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adc4:	4b0a      	ldr	r3, [pc, #40]	; (800adf0 <prvInitialiseTaskLists+0x7c>)
 800adc6:	4a05      	ldr	r2, [pc, #20]	; (800addc <prvInitialiseTaskLists+0x68>)
 800adc8:	601a      	str	r2, [r3, #0]
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20000bc0 	.word	0x20000bc0
 800add8:	20001020 	.word	0x20001020
 800addc:	20001034 	.word	0x20001034
 800ade0:	20001050 	.word	0x20001050
 800ade4:	20001064 	.word	0x20001064
 800ade8:	2000107c 	.word	0x2000107c
 800adec:	20001048 	.word	0x20001048
 800adf0:	2000104c 	.word	0x2000104c

0800adf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adfa:	e019      	b.n	800ae30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800adfc:	f000 fdd2 	bl	800b9a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae00:	4b10      	ldr	r3, [pc, #64]	; (800ae44 <prvCheckTasksWaitingTermination+0x50>)
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fe fd3b 	bl	8009888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae12:	4b0d      	ldr	r3, [pc, #52]	; (800ae48 <prvCheckTasksWaitingTermination+0x54>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	4a0b      	ldr	r2, [pc, #44]	; (800ae48 <prvCheckTasksWaitingTermination+0x54>)
 800ae1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae1c:	4b0b      	ldr	r3, [pc, #44]	; (800ae4c <prvCheckTasksWaitingTermination+0x58>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	4a0a      	ldr	r2, [pc, #40]	; (800ae4c <prvCheckTasksWaitingTermination+0x58>)
 800ae24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae26:	f000 fded 	bl	800ba04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f810 	bl	800ae50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae30:	4b06      	ldr	r3, [pc, #24]	; (800ae4c <prvCheckTasksWaitingTermination+0x58>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1e1      	bne.n	800adfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae38:	bf00      	nop
 800ae3a:	bf00      	nop
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	20001064 	.word	0x20001064
 800ae48:	20001090 	.word	0x20001090
 800ae4c:	20001078 	.word	0x20001078

0800ae50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d108      	bne.n	800ae74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 ff8a 	bl	800bd80 <vPortFree>
				vPortFree( pxTCB );
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 ff87 	bl	800bd80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ae72:	e018      	b.n	800aea6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d103      	bne.n	800ae86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 ff7e 	bl	800bd80 <vPortFree>
	}
 800ae84:	e00f      	b.n	800aea6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d00a      	beq.n	800aea6 <prvDeleteTCB+0x56>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60fb      	str	r3, [r7, #12]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <prvDeleteTCB+0x54>
	}
 800aea6:	bf00      	nop
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aeb6:	4b0c      	ldr	r3, [pc, #48]	; (800aee8 <prvResetNextTaskUnblockTime+0x38>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d104      	bne.n	800aeca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aec0:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <prvResetNextTaskUnblockTime+0x3c>)
 800aec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aec8:	e008      	b.n	800aedc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeca:	4b07      	ldr	r3, [pc, #28]	; (800aee8 <prvResetNextTaskUnblockTime+0x38>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4a04      	ldr	r2, [pc, #16]	; (800aeec <prvResetNextTaskUnblockTime+0x3c>)
 800aeda:	6013      	str	r3, [r2, #0]
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	20001048 	.word	0x20001048
 800aeec:	200010b0 	.word	0x200010b0

0800aef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aef6:	4b0b      	ldr	r3, [pc, #44]	; (800af24 <xTaskGetSchedulerState+0x34>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d102      	bne.n	800af04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aefe:	2301      	movs	r3, #1
 800af00:	607b      	str	r3, [r7, #4]
 800af02:	e008      	b.n	800af16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af04:	4b08      	ldr	r3, [pc, #32]	; (800af28 <xTaskGetSchedulerState+0x38>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d102      	bne.n	800af12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af0c:	2302      	movs	r3, #2
 800af0e:	607b      	str	r3, [r7, #4]
 800af10:	e001      	b.n	800af16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af12:	2300      	movs	r3, #0
 800af14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af16:	687b      	ldr	r3, [r7, #4]
	}
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	2000109c 	.word	0x2000109c
 800af28:	200010b8 	.word	0x200010b8

0800af2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af38:	2300      	movs	r3, #0
 800af3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d056      	beq.n	800aff0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af42:	4b2e      	ldr	r3, [pc, #184]	; (800affc <xTaskPriorityDisinherit+0xd0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d00a      	beq.n	800af62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	60fb      	str	r3, [r7, #12]
}
 800af5e:	bf00      	nop
 800af60:	e7fe      	b.n	800af60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10a      	bne.n	800af80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	60bb      	str	r3, [r7, #8]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af84:	1e5a      	subs	r2, r3, #1
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af92:	429a      	cmp	r2, r3
 800af94:	d02c      	beq.n	800aff0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d128      	bne.n	800aff0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	3304      	adds	r3, #4
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fe fc70 	bl	8009888 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc0:	4b0f      	ldr	r3, [pc, #60]	; (800b000 <xTaskPriorityDisinherit+0xd4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d903      	bls.n	800afd0 <xTaskPriorityDisinherit+0xa4>
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	4a0c      	ldr	r2, [pc, #48]	; (800b000 <xTaskPriorityDisinherit+0xd4>)
 800afce:	6013      	str	r3, [r2, #0]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd4:	4613      	mov	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4a09      	ldr	r2, [pc, #36]	; (800b004 <xTaskPriorityDisinherit+0xd8>)
 800afde:	441a      	add	r2, r3
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	3304      	adds	r3, #4
 800afe4:	4619      	mov	r1, r3
 800afe6:	4610      	mov	r0, r2
 800afe8:	f7fe fbf1 	bl	80097ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afec:	2301      	movs	r3, #1
 800afee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aff0:	697b      	ldr	r3, [r7, #20]
	}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20000bbc 	.word	0x20000bbc
 800b000:	20001098 	.word	0x20001098
 800b004:	20000bc0 	.word	0x20000bc0

0800b008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b012:	4b21      	ldr	r3, [pc, #132]	; (800b098 <prvAddCurrentTaskToDelayedList+0x90>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b018:	4b20      	ldr	r3, [pc, #128]	; (800b09c <prvAddCurrentTaskToDelayedList+0x94>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3304      	adds	r3, #4
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fe fc32 	bl	8009888 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b02a:	d10a      	bne.n	800b042 <prvAddCurrentTaskToDelayedList+0x3a>
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d007      	beq.n	800b042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b032:	4b1a      	ldr	r3, [pc, #104]	; (800b09c <prvAddCurrentTaskToDelayedList+0x94>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3304      	adds	r3, #4
 800b038:	4619      	mov	r1, r3
 800b03a:	4819      	ldr	r0, [pc, #100]	; (800b0a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b03c:	f7fe fbc7 	bl	80097ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b040:	e026      	b.n	800b090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4413      	add	r3, r2
 800b048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b04a:	4b14      	ldr	r3, [pc, #80]	; (800b09c <prvAddCurrentTaskToDelayedList+0x94>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	429a      	cmp	r2, r3
 800b058:	d209      	bcs.n	800b06e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b05a:	4b12      	ldr	r3, [pc, #72]	; (800b0a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	4b0f      	ldr	r3, [pc, #60]	; (800b09c <prvAddCurrentTaskToDelayedList+0x94>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3304      	adds	r3, #4
 800b064:	4619      	mov	r1, r3
 800b066:	4610      	mov	r0, r2
 800b068:	f7fe fbd5 	bl	8009816 <vListInsert>
}
 800b06c:	e010      	b.n	800b090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b06e:	4b0e      	ldr	r3, [pc, #56]	; (800b0a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <prvAddCurrentTaskToDelayedList+0x94>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3304      	adds	r3, #4
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7fe fbcb 	bl	8009816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b080:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	429a      	cmp	r2, r3
 800b088:	d202      	bcs.n	800b090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b08a:	4a08      	ldr	r2, [pc, #32]	; (800b0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	6013      	str	r3, [r2, #0]
}
 800b090:	bf00      	nop
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	20001094 	.word	0x20001094
 800b09c:	20000bbc 	.word	0x20000bbc
 800b0a0:	2000107c 	.word	0x2000107c
 800b0a4:	2000104c 	.word	0x2000104c
 800b0a8:	20001048 	.word	0x20001048
 800b0ac:	200010b0 	.word	0x200010b0

0800b0b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08a      	sub	sp, #40	; 0x28
 800b0b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b0ba:	f000 fb07 	bl	800b6cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b0be:	4b1c      	ldr	r3, [pc, #112]	; (800b130 <xTimerCreateTimerTask+0x80>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d021      	beq.n	800b10a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b0ce:	1d3a      	adds	r2, r7, #4
 800b0d0:	f107 0108 	add.w	r1, r7, #8
 800b0d4:	f107 030c 	add.w	r3, r7, #12
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fb31 	bl	8009740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	9202      	str	r2, [sp, #8]
 800b0e6:	9301      	str	r3, [sp, #4]
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	460a      	mov	r2, r1
 800b0f0:	4910      	ldr	r1, [pc, #64]	; (800b134 <xTimerCreateTimerTask+0x84>)
 800b0f2:	4811      	ldr	r0, [pc, #68]	; (800b138 <xTimerCreateTimerTask+0x88>)
 800b0f4:	f7ff f8de 	bl	800a2b4 <xTaskCreateStatic>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	4a10      	ldr	r2, [pc, #64]	; (800b13c <xTimerCreateTimerTask+0x8c>)
 800b0fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <xTimerCreateTimerTask+0x8c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b106:	2301      	movs	r3, #1
 800b108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10a      	bne.n	800b126 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b114:	f383 8811 	msr	BASEPRI, r3
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	613b      	str	r3, [r7, #16]
}
 800b122:	bf00      	nop
 800b124:	e7fe      	b.n	800b124 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b126:	697b      	ldr	r3, [r7, #20]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	200010ec 	.word	0x200010ec
 800b134:	0800d134 	.word	0x0800d134
 800b138:	0800b275 	.word	0x0800b275
 800b13c:	200010f0 	.word	0x200010f0

0800b140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b08a      	sub	sp, #40	; 0x28
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
 800b14c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b14e:	2300      	movs	r3, #0
 800b150:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10a      	bne.n	800b16e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	623b      	str	r3, [r7, #32]
}
 800b16a:	bf00      	nop
 800b16c:	e7fe      	b.n	800b16c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b16e:	4b1a      	ldr	r3, [pc, #104]	; (800b1d8 <xTimerGenericCommand+0x98>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d02a      	beq.n	800b1cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	2b05      	cmp	r3, #5
 800b186:	dc18      	bgt.n	800b1ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b188:	f7ff feb2 	bl	800aef0 <xTaskGetSchedulerState>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d109      	bne.n	800b1a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b192:	4b11      	ldr	r3, [pc, #68]	; (800b1d8 <xTimerGenericCommand+0x98>)
 800b194:	6818      	ldr	r0, [r3, #0]
 800b196:	f107 0110 	add.w	r1, r7, #16
 800b19a:	2300      	movs	r3, #0
 800b19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b19e:	f7fe fca1 	bl	8009ae4 <xQueueGenericSend>
 800b1a2:	6278      	str	r0, [r7, #36]	; 0x24
 800b1a4:	e012      	b.n	800b1cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <xTimerGenericCommand+0x98>)
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	f107 0110 	add.w	r1, r7, #16
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f7fe fc97 	bl	8009ae4 <xQueueGenericSend>
 800b1b6:	6278      	str	r0, [r7, #36]	; 0x24
 800b1b8:	e008      	b.n	800b1cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b1ba:	4b07      	ldr	r3, [pc, #28]	; (800b1d8 <xTimerGenericCommand+0x98>)
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	f107 0110 	add.w	r1, r7, #16
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	f7fe fd8b 	bl	8009ce0 <xQueueGenericSendFromISR>
 800b1ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3728      	adds	r7, #40	; 0x28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	200010ec 	.word	0x200010ec

0800b1dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af02      	add	r7, sp, #8
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1e6:	4b22      	ldr	r3, [pc, #136]	; (800b270 <prvProcessExpiredTimer+0x94>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fe fb47 	bl	8009888 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b200:	f003 0304 	and.w	r3, r3, #4
 800b204:	2b00      	cmp	r3, #0
 800b206:	d022      	beq.n	800b24e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	699a      	ldr	r2, [r3, #24]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	18d1      	adds	r1, r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	6978      	ldr	r0, [r7, #20]
 800b216:	f000 f8d1 	bl	800b3bc <prvInsertTimerInActiveList>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d01f      	beq.n	800b260 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b220:	2300      	movs	r3, #0
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	2300      	movs	r3, #0
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	2100      	movs	r1, #0
 800b22a:	6978      	ldr	r0, [r7, #20]
 800b22c:	f7ff ff88 	bl	800b140 <xTimerGenericCommand>
 800b230:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d113      	bne.n	800b260 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23c:	f383 8811 	msr	BASEPRI, r3
 800b240:	f3bf 8f6f 	isb	sy
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	60fb      	str	r3, [r7, #12]
}
 800b24a:	bf00      	nop
 800b24c:	e7fe      	b.n	800b24c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b254:	f023 0301 	bic.w	r3, r3, #1
 800b258:	b2da      	uxtb	r2, r3
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	6978      	ldr	r0, [r7, #20]
 800b266:	4798      	blx	r3
}
 800b268:	bf00      	nop
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	200010e4 	.word	0x200010e4

0800b274 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b27c:	f107 0308 	add.w	r3, r7, #8
 800b280:	4618      	mov	r0, r3
 800b282:	f000 f857 	bl	800b334 <prvGetNextExpireTime>
 800b286:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	4619      	mov	r1, r3
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f000 f803 	bl	800b298 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b292:	f000 f8d5 	bl	800b440 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b296:	e7f1      	b.n	800b27c <prvTimerTask+0x8>

0800b298 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b2a2:	f7ff fa43 	bl	800a72c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2a6:	f107 0308 	add.w	r3, r7, #8
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 f866 	bl	800b37c <prvSampleTimeNow>
 800b2b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d130      	bne.n	800b31a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10a      	bne.n	800b2d4 <prvProcessTimerOrBlockTask+0x3c>
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d806      	bhi.n	800b2d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b2c6:	f7ff fa3f 	bl	800a748 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b2ca:	68f9      	ldr	r1, [r7, #12]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7ff ff85 	bl	800b1dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b2d2:	e024      	b.n	800b31e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d008      	beq.n	800b2ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b2da:	4b13      	ldr	r3, [pc, #76]	; (800b328 <prvProcessTimerOrBlockTask+0x90>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <prvProcessTimerOrBlockTask+0x50>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e000      	b.n	800b2ea <prvProcessTimerOrBlockTask+0x52>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b2ec:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <prvProcessTimerOrBlockTask+0x94>)
 800b2ee:	6818      	ldr	r0, [r3, #0]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	f7fe ffa7 	bl	800a24c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b2fe:	f7ff fa23 	bl	800a748 <xTaskResumeAll>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10a      	bne.n	800b31e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b308:	4b09      	ldr	r3, [pc, #36]	; (800b330 <prvProcessTimerOrBlockTask+0x98>)
 800b30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	f3bf 8f6f 	isb	sy
}
 800b318:	e001      	b.n	800b31e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b31a:	f7ff fa15 	bl	800a748 <xTaskResumeAll>
}
 800b31e:	bf00      	nop
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	200010e8 	.word	0x200010e8
 800b32c:	200010ec 	.word	0x200010ec
 800b330:	e000ed04 	.word	0xe000ed04

0800b334 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b33c:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <prvGetNextExpireTime+0x44>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d101      	bne.n	800b34a <prvGetNextExpireTime+0x16>
 800b346:	2201      	movs	r2, #1
 800b348:	e000      	b.n	800b34c <prvGetNextExpireTime+0x18>
 800b34a:	2200      	movs	r2, #0
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d105      	bne.n	800b364 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b358:	4b07      	ldr	r3, [pc, #28]	; (800b378 <prvGetNextExpireTime+0x44>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	60fb      	str	r3, [r7, #12]
 800b362:	e001      	b.n	800b368 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b364:	2300      	movs	r3, #0
 800b366:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b368:	68fb      	ldr	r3, [r7, #12]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	200010e4 	.word	0x200010e4

0800b37c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b384:	f7ff fa7e 	bl	800a884 <xTaskGetTickCount>
 800b388:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b38a:	4b0b      	ldr	r3, [pc, #44]	; (800b3b8 <prvSampleTimeNow+0x3c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	429a      	cmp	r2, r3
 800b392:	d205      	bcs.n	800b3a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b394:	f000 f936 	bl	800b604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	e002      	b.n	800b3a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b3a6:	4a04      	ldr	r2, [pc, #16]	; (800b3b8 <prvSampleTimeNow+0x3c>)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	200010f4 	.word	0x200010f4

0800b3bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d812      	bhi.n	800b408 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	1ad2      	subs	r2, r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d302      	bcc.n	800b3f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	617b      	str	r3, [r7, #20]
 800b3f4:	e01b      	b.n	800b42e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b3f6:	4b10      	ldr	r3, [pc, #64]	; (800b438 <prvInsertTimerInActiveList+0x7c>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	4619      	mov	r1, r3
 800b400:	4610      	mov	r0, r2
 800b402:	f7fe fa08 	bl	8009816 <vListInsert>
 800b406:	e012      	b.n	800b42e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d206      	bcs.n	800b41e <prvInsertTimerInActiveList+0x62>
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	429a      	cmp	r2, r3
 800b416:	d302      	bcc.n	800b41e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b418:	2301      	movs	r3, #1
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	e007      	b.n	800b42e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b41e:	4b07      	ldr	r3, [pc, #28]	; (800b43c <prvInsertTimerInActiveList+0x80>)
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	3304      	adds	r3, #4
 800b426:	4619      	mov	r1, r3
 800b428:	4610      	mov	r0, r2
 800b42a:	f7fe f9f4 	bl	8009816 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b42e:	697b      	ldr	r3, [r7, #20]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3718      	adds	r7, #24
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	200010e8 	.word	0x200010e8
 800b43c:	200010e4 	.word	0x200010e4

0800b440 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08e      	sub	sp, #56	; 0x38
 800b444:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b446:	e0ca      	b.n	800b5de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	da18      	bge.n	800b480 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b44e:	1d3b      	adds	r3, r7, #4
 800b450:	3304      	adds	r3, #4
 800b452:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10a      	bne.n	800b470 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	61fb      	str	r3, [r7, #28]
}
 800b46c:	bf00      	nop
 800b46e:	e7fe      	b.n	800b46e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b476:	6850      	ldr	r0, [r2, #4]
 800b478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b47a:	6892      	ldr	r2, [r2, #8]
 800b47c:	4611      	mov	r1, r2
 800b47e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	f2c0 80ab 	blt.w	800b5de <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d004      	beq.n	800b49e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b496:	3304      	adds	r3, #4
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fe f9f5 	bl	8009888 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b49e:	463b      	mov	r3, r7
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff ff6b 	bl	800b37c <prvSampleTimeNow>
 800b4a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b09      	cmp	r3, #9
 800b4ac:	f200 8096 	bhi.w	800b5dc <prvProcessReceivedCommands+0x19c>
 800b4b0:	a201      	add	r2, pc, #4	; (adr r2, 800b4b8 <prvProcessReceivedCommands+0x78>)
 800b4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4b6:	bf00      	nop
 800b4b8:	0800b4e1 	.word	0x0800b4e1
 800b4bc:	0800b4e1 	.word	0x0800b4e1
 800b4c0:	0800b4e1 	.word	0x0800b4e1
 800b4c4:	0800b555 	.word	0x0800b555
 800b4c8:	0800b569 	.word	0x0800b569
 800b4cc:	0800b5b3 	.word	0x0800b5b3
 800b4d0:	0800b4e1 	.word	0x0800b4e1
 800b4d4:	0800b4e1 	.word	0x0800b4e1
 800b4d8:	0800b555 	.word	0x0800b555
 800b4dc:	0800b569 	.word	0x0800b569
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4e6:	f043 0301 	orr.w	r3, r3, #1
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	18d1      	adds	r1, r2, r3
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b500:	f7ff ff5c 	bl	800b3bc <prvInsertTimerInActiveList>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d069      	beq.n	800b5de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b510:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b518:	f003 0304 	and.w	r3, r3, #4
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d05e      	beq.n	800b5de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	441a      	add	r2, r3
 800b528:	2300      	movs	r3, #0
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	2300      	movs	r3, #0
 800b52e:	2100      	movs	r1, #0
 800b530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b532:	f7ff fe05 	bl	800b140 <xTimerGenericCommand>
 800b536:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d14f      	bne.n	800b5de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	61bb      	str	r3, [r7, #24]
}
 800b550:	bf00      	nop
 800b552:	e7fe      	b.n	800b552 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b55a:	f023 0301 	bic.w	r3, r3, #1
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b566:	e03a      	b.n	800b5de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b56e:	f043 0301 	orr.w	r3, r3, #1
 800b572:	b2da      	uxtb	r2, r3
 800b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10a      	bne.n	800b59e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	617b      	str	r3, [r7, #20]
}
 800b59a:	bf00      	nop
 800b59c:	e7fe      	b.n	800b59c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a0:	699a      	ldr	r2, [r3, #24]
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	18d1      	adds	r1, r2, r3
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ac:	f7ff ff06 	bl	800b3bc <prvInsertTimerInActiveList>
					break;
 800b5b0:	e015      	b.n	800b5de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d103      	bne.n	800b5c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5c2:	f000 fbdd 	bl	800bd80 <vPortFree>
 800b5c6:	e00a      	b.n	800b5de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5ce:	f023 0301 	bic.w	r3, r3, #1
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b5da:	e000      	b.n	800b5de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b5dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5de:	4b08      	ldr	r3, [pc, #32]	; (800b600 <prvProcessReceivedCommands+0x1c0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	1d39      	adds	r1, r7, #4
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fe fc16 	bl	8009e18 <xQueueReceive>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f47f af2a 	bne.w	800b448 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b5f4:	bf00      	nop
 800b5f6:	bf00      	nop
 800b5f8:	3730      	adds	r7, #48	; 0x30
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	200010ec 	.word	0x200010ec

0800b604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b60a:	e048      	b.n	800b69e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b60c:	4b2d      	ldr	r3, [pc, #180]	; (800b6c4 <prvSwitchTimerLists+0xc0>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b616:	4b2b      	ldr	r3, [pc, #172]	; (800b6c4 <prvSwitchTimerLists+0xc0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3304      	adds	r3, #4
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe f92f 	bl	8009888 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b638:	f003 0304 	and.w	r3, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d02e      	beq.n	800b69e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	4413      	add	r3, r2
 800b648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d90e      	bls.n	800b670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b65e:	4b19      	ldr	r3, [pc, #100]	; (800b6c4 <prvSwitchTimerLists+0xc0>)
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3304      	adds	r3, #4
 800b666:	4619      	mov	r1, r3
 800b668:	4610      	mov	r0, r2
 800b66a:	f7fe f8d4 	bl	8009816 <vListInsert>
 800b66e:	e016      	b.n	800b69e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b670:	2300      	movs	r3, #0
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	2300      	movs	r3, #0
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	2100      	movs	r1, #0
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f7ff fd60 	bl	800b140 <xTimerGenericCommand>
 800b680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10a      	bne.n	800b69e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	603b      	str	r3, [r7, #0]
}
 800b69a:	bf00      	nop
 800b69c:	e7fe      	b.n	800b69c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b69e:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <prvSwitchTimerLists+0xc0>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1b1      	bne.n	800b60c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b6a8:	4b06      	ldr	r3, [pc, #24]	; (800b6c4 <prvSwitchTimerLists+0xc0>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b6ae:	4b06      	ldr	r3, [pc, #24]	; (800b6c8 <prvSwitchTimerLists+0xc4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a04      	ldr	r2, [pc, #16]	; (800b6c4 <prvSwitchTimerLists+0xc0>)
 800b6b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b6b6:	4a04      	ldr	r2, [pc, #16]	; (800b6c8 <prvSwitchTimerLists+0xc4>)
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	6013      	str	r3, [r2, #0]
}
 800b6bc:	bf00      	nop
 800b6be:	3718      	adds	r7, #24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	200010e4 	.word	0x200010e4
 800b6c8:	200010e8 	.word	0x200010e8

0800b6cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b6d2:	f000 f967 	bl	800b9a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b6d6:	4b15      	ldr	r3, [pc, #84]	; (800b72c <prvCheckForValidListAndQueue+0x60>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d120      	bne.n	800b720 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b6de:	4814      	ldr	r0, [pc, #80]	; (800b730 <prvCheckForValidListAndQueue+0x64>)
 800b6e0:	f7fe f848 	bl	8009774 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b6e4:	4813      	ldr	r0, [pc, #76]	; (800b734 <prvCheckForValidListAndQueue+0x68>)
 800b6e6:	f7fe f845 	bl	8009774 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b6ea:	4b13      	ldr	r3, [pc, #76]	; (800b738 <prvCheckForValidListAndQueue+0x6c>)
 800b6ec:	4a10      	ldr	r2, [pc, #64]	; (800b730 <prvCheckForValidListAndQueue+0x64>)
 800b6ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b6f0:	4b12      	ldr	r3, [pc, #72]	; (800b73c <prvCheckForValidListAndQueue+0x70>)
 800b6f2:	4a10      	ldr	r2, [pc, #64]	; (800b734 <prvCheckForValidListAndQueue+0x68>)
 800b6f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	4b11      	ldr	r3, [pc, #68]	; (800b740 <prvCheckForValidListAndQueue+0x74>)
 800b6fc:	4a11      	ldr	r2, [pc, #68]	; (800b744 <prvCheckForValidListAndQueue+0x78>)
 800b6fe:	2110      	movs	r1, #16
 800b700:	200a      	movs	r0, #10
 800b702:	f7fe f953 	bl	80099ac <xQueueGenericCreateStatic>
 800b706:	4603      	mov	r3, r0
 800b708:	4a08      	ldr	r2, [pc, #32]	; (800b72c <prvCheckForValidListAndQueue+0x60>)
 800b70a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b70c:	4b07      	ldr	r3, [pc, #28]	; (800b72c <prvCheckForValidListAndQueue+0x60>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b714:	4b05      	ldr	r3, [pc, #20]	; (800b72c <prvCheckForValidListAndQueue+0x60>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	490b      	ldr	r1, [pc, #44]	; (800b748 <prvCheckForValidListAndQueue+0x7c>)
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe fd6c 	bl	800a1f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b720:	f000 f970 	bl	800ba04 <vPortExitCritical>
}
 800b724:	bf00      	nop
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	200010ec 	.word	0x200010ec
 800b730:	200010bc 	.word	0x200010bc
 800b734:	200010d0 	.word	0x200010d0
 800b738:	200010e4 	.word	0x200010e4
 800b73c:	200010e8 	.word	0x200010e8
 800b740:	20001198 	.word	0x20001198
 800b744:	200010f8 	.word	0x200010f8
 800b748:	0800d13c 	.word	0x0800d13c

0800b74c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3b04      	subs	r3, #4
 800b75c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3b04      	subs	r3, #4
 800b76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	f023 0201 	bic.w	r2, r3, #1
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	3b04      	subs	r3, #4
 800b77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b77c:	4a0c      	ldr	r2, [pc, #48]	; (800b7b0 <pxPortInitialiseStack+0x64>)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	3b14      	subs	r3, #20
 800b786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3b04      	subs	r3, #4
 800b792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f06f 0202 	mvn.w	r2, #2
 800b79a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	3b20      	subs	r3, #32
 800b7a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	0800b7b5 	.word	0x0800b7b5

0800b7b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b7be:	4b12      	ldr	r3, [pc, #72]	; (800b808 <prvTaskExitError+0x54>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7c6:	d00a      	beq.n	800b7de <prvTaskExitError+0x2a>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	60fb      	str	r3, [r7, #12]
}
 800b7da:	bf00      	nop
 800b7dc:	e7fe      	b.n	800b7dc <prvTaskExitError+0x28>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	60bb      	str	r3, [r7, #8]
}
 800b7f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b7f2:	bf00      	nop
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d0fc      	beq.n	800b7f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b7fa:	bf00      	nop
 800b7fc:	bf00      	nop
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	2000014c 	.word	0x2000014c
 800b80c:	00000000 	.word	0x00000000

0800b810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b810:	4b07      	ldr	r3, [pc, #28]	; (800b830 <pxCurrentTCBConst2>)
 800b812:	6819      	ldr	r1, [r3, #0]
 800b814:	6808      	ldr	r0, [r1, #0]
 800b816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81a:	f380 8809 	msr	PSP, r0
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f04f 0000 	mov.w	r0, #0
 800b826:	f380 8811 	msr	BASEPRI, r0
 800b82a:	4770      	bx	lr
 800b82c:	f3af 8000 	nop.w

0800b830 <pxCurrentTCBConst2>:
 800b830:	20000bbc 	.word	0x20000bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop

0800b838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b838:	4808      	ldr	r0, [pc, #32]	; (800b85c <prvPortStartFirstTask+0x24>)
 800b83a:	6800      	ldr	r0, [r0, #0]
 800b83c:	6800      	ldr	r0, [r0, #0]
 800b83e:	f380 8808 	msr	MSP, r0
 800b842:	f04f 0000 	mov.w	r0, #0
 800b846:	f380 8814 	msr	CONTROL, r0
 800b84a:	b662      	cpsie	i
 800b84c:	b661      	cpsie	f
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	df00      	svc	0
 800b858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b85a:	bf00      	nop
 800b85c:	e000ed08 	.word	0xe000ed08

0800b860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b866:	4b46      	ldr	r3, [pc, #280]	; (800b980 <xPortStartScheduler+0x120>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a46      	ldr	r2, [pc, #280]	; (800b984 <xPortStartScheduler+0x124>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d10a      	bne.n	800b886 <xPortStartScheduler+0x26>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	613b      	str	r3, [r7, #16]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b886:	4b3e      	ldr	r3, [pc, #248]	; (800b980 <xPortStartScheduler+0x120>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a3f      	ldr	r2, [pc, #252]	; (800b988 <xPortStartScheduler+0x128>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d10a      	bne.n	800b8a6 <xPortStartScheduler+0x46>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	60fb      	str	r3, [r7, #12]
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8a6:	4b39      	ldr	r3, [pc, #228]	; (800b98c <xPortStartScheduler+0x12c>)
 800b8a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	22ff      	movs	r2, #255	; 0xff
 800b8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	4b31      	ldr	r3, [pc, #196]	; (800b990 <xPortStartScheduler+0x130>)
 800b8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8ce:	4b31      	ldr	r3, [pc, #196]	; (800b994 <xPortStartScheduler+0x134>)
 800b8d0:	2207      	movs	r2, #7
 800b8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8d4:	e009      	b.n	800b8ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b8d6:	4b2f      	ldr	r3, [pc, #188]	; (800b994 <xPortStartScheduler+0x134>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	4a2d      	ldr	r2, [pc, #180]	; (800b994 <xPortStartScheduler+0x134>)
 800b8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8ea:	78fb      	ldrb	r3, [r7, #3]
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8f2:	2b80      	cmp	r3, #128	; 0x80
 800b8f4:	d0ef      	beq.n	800b8d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b8f6:	4b27      	ldr	r3, [pc, #156]	; (800b994 <xPortStartScheduler+0x134>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f1c3 0307 	rsb	r3, r3, #7
 800b8fe:	2b04      	cmp	r3, #4
 800b900:	d00a      	beq.n	800b918 <xPortStartScheduler+0xb8>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	60bb      	str	r3, [r7, #8]
}
 800b914:	bf00      	nop
 800b916:	e7fe      	b.n	800b916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b918:	4b1e      	ldr	r3, [pc, #120]	; (800b994 <xPortStartScheduler+0x134>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	021b      	lsls	r3, r3, #8
 800b91e:	4a1d      	ldr	r2, [pc, #116]	; (800b994 <xPortStartScheduler+0x134>)
 800b920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b922:	4b1c      	ldr	r3, [pc, #112]	; (800b994 <xPortStartScheduler+0x134>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b92a:	4a1a      	ldr	r2, [pc, #104]	; (800b994 <xPortStartScheduler+0x134>)
 800b92c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	b2da      	uxtb	r2, r3
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b936:	4b18      	ldr	r3, [pc, #96]	; (800b998 <xPortStartScheduler+0x138>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a17      	ldr	r2, [pc, #92]	; (800b998 <xPortStartScheduler+0x138>)
 800b93c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b942:	4b15      	ldr	r3, [pc, #84]	; (800b998 <xPortStartScheduler+0x138>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a14      	ldr	r2, [pc, #80]	; (800b998 <xPortStartScheduler+0x138>)
 800b948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b94c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b94e:	f000 f8dd 	bl	800bb0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b952:	4b12      	ldr	r3, [pc, #72]	; (800b99c <xPortStartScheduler+0x13c>)
 800b954:	2200      	movs	r2, #0
 800b956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b958:	f000 f8fc 	bl	800bb54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b95c:	4b10      	ldr	r3, [pc, #64]	; (800b9a0 <xPortStartScheduler+0x140>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a0f      	ldr	r2, [pc, #60]	; (800b9a0 <xPortStartScheduler+0x140>)
 800b962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b968:	f7ff ff66 	bl	800b838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b96c:	f7ff f854 	bl	800aa18 <vTaskSwitchContext>
	prvTaskExitError();
 800b970:	f7ff ff20 	bl	800b7b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3718      	adds	r7, #24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	e000ed00 	.word	0xe000ed00
 800b984:	410fc271 	.word	0x410fc271
 800b988:	410fc270 	.word	0x410fc270
 800b98c:	e000e400 	.word	0xe000e400
 800b990:	200011e8 	.word	0x200011e8
 800b994:	200011ec 	.word	0x200011ec
 800b998:	e000ed20 	.word	0xe000ed20
 800b99c:	2000014c 	.word	0x2000014c
 800b9a0:	e000ef34 	.word	0xe000ef34

0800b9a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	607b      	str	r3, [r7, #4]
}
 800b9bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9be:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <vPortEnterCritical+0x58>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	4a0d      	ldr	r2, [pc, #52]	; (800b9fc <vPortEnterCritical+0x58>)
 800b9c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9c8:	4b0c      	ldr	r3, [pc, #48]	; (800b9fc <vPortEnterCritical+0x58>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d10f      	bne.n	800b9f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ba00 <vPortEnterCritical+0x5c>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	603b      	str	r3, [r7, #0]
}
 800b9ec:	bf00      	nop
 800b9ee:	e7fe      	b.n	800b9ee <vPortEnterCritical+0x4a>
	}
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	2000014c 	.word	0x2000014c
 800ba00:	e000ed04 	.word	0xe000ed04

0800ba04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba0a:	4b12      	ldr	r3, [pc, #72]	; (800ba54 <vPortExitCritical+0x50>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10a      	bne.n	800ba28 <vPortExitCritical+0x24>
	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	607b      	str	r3, [r7, #4]
}
 800ba24:	bf00      	nop
 800ba26:	e7fe      	b.n	800ba26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba28:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <vPortExitCritical+0x50>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	4a09      	ldr	r2, [pc, #36]	; (800ba54 <vPortExitCritical+0x50>)
 800ba30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba32:	4b08      	ldr	r3, [pc, #32]	; (800ba54 <vPortExitCritical+0x50>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d105      	bne.n	800ba46 <vPortExitCritical+0x42>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	f383 8811 	msr	BASEPRI, r3
}
 800ba44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba46:	bf00      	nop
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	2000014c 	.word	0x2000014c
	...

0800ba60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba60:	f3ef 8009 	mrs	r0, PSP
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	4b15      	ldr	r3, [pc, #84]	; (800bac0 <pxCurrentTCBConst>)
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	f01e 0f10 	tst.w	lr, #16
 800ba70:	bf08      	it	eq
 800ba72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ba76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7a:	6010      	str	r0, [r2, #0]
 800ba7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ba80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba84:	f380 8811 	msr	BASEPRI, r0
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f7fe ffc2 	bl	800aa18 <vTaskSwitchContext>
 800ba94:	f04f 0000 	mov.w	r0, #0
 800ba98:	f380 8811 	msr	BASEPRI, r0
 800ba9c:	bc09      	pop	{r0, r3}
 800ba9e:	6819      	ldr	r1, [r3, #0]
 800baa0:	6808      	ldr	r0, [r1, #0]
 800baa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa6:	f01e 0f10 	tst.w	lr, #16
 800baaa:	bf08      	it	eq
 800baac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bab0:	f380 8809 	msr	PSP, r0
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	f3af 8000 	nop.w

0800bac0 <pxCurrentTCBConst>:
 800bac0:	20000bbc 	.word	0x20000bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bac4:	bf00      	nop
 800bac6:	bf00      	nop

0800bac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	607b      	str	r3, [r7, #4]
}
 800bae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bae2:	f7fe fedf 	bl	800a8a4 <xTaskIncrementTick>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800baec:	4b06      	ldr	r3, [pc, #24]	; (800bb08 <xPortSysTickHandler+0x40>)
 800baee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	2300      	movs	r3, #0
 800baf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	f383 8811 	msr	BASEPRI, r3
}
 800bafe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	e000ed04 	.word	0xe000ed04

0800bb0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb10:	4b0b      	ldr	r3, [pc, #44]	; (800bb40 <vPortSetupTimerInterrupt+0x34>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb16:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <vPortSetupTimerInterrupt+0x38>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <vPortSetupTimerInterrupt+0x3c>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a0a      	ldr	r2, [pc, #40]	; (800bb4c <vPortSetupTimerInterrupt+0x40>)
 800bb22:	fba2 2303 	umull	r2, r3, r2, r3
 800bb26:	099b      	lsrs	r3, r3, #6
 800bb28:	4a09      	ldr	r2, [pc, #36]	; (800bb50 <vPortSetupTimerInterrupt+0x44>)
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb2e:	4b04      	ldr	r3, [pc, #16]	; (800bb40 <vPortSetupTimerInterrupt+0x34>)
 800bb30:	2207      	movs	r2, #7
 800bb32:	601a      	str	r2, [r3, #0]
}
 800bb34:	bf00      	nop
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	e000e010 	.word	0xe000e010
 800bb44:	e000e018 	.word	0xe000e018
 800bb48:	20000140 	.word	0x20000140
 800bb4c:	10624dd3 	.word	0x10624dd3
 800bb50:	e000e014 	.word	0xe000e014

0800bb54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bb54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bb64 <vPortEnableVFP+0x10>
 800bb58:	6801      	ldr	r1, [r0, #0]
 800bb5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bb5e:	6001      	str	r1, [r0, #0]
 800bb60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bb62:	bf00      	nop
 800bb64:	e000ed88 	.word	0xe000ed88

0800bb68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb68:	b480      	push	{r7}
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb6e:	f3ef 8305 	mrs	r3, IPSR
 800bb72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b0f      	cmp	r3, #15
 800bb78:	d914      	bls.n	800bba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb7a:	4a17      	ldr	r2, [pc, #92]	; (800bbd8 <vPortValidateInterruptPriority+0x70>)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	4413      	add	r3, r2
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb84:	4b15      	ldr	r3, [pc, #84]	; (800bbdc <vPortValidateInterruptPriority+0x74>)
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	7afa      	ldrb	r2, [r7, #11]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d20a      	bcs.n	800bba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	607b      	str	r3, [r7, #4]
}
 800bba0:	bf00      	nop
 800bba2:	e7fe      	b.n	800bba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bba4:	4b0e      	ldr	r3, [pc, #56]	; (800bbe0 <vPortValidateInterruptPriority+0x78>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bbac:	4b0d      	ldr	r3, [pc, #52]	; (800bbe4 <vPortValidateInterruptPriority+0x7c>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d90a      	bls.n	800bbca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	603b      	str	r3, [r7, #0]
}
 800bbc6:	bf00      	nop
 800bbc8:	e7fe      	b.n	800bbc8 <vPortValidateInterruptPriority+0x60>
	}
 800bbca:	bf00      	nop
 800bbcc:	3714      	adds	r7, #20
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	e000e3f0 	.word	0xe000e3f0
 800bbdc:	200011e8 	.word	0x200011e8
 800bbe0:	e000ed0c 	.word	0xe000ed0c
 800bbe4:	200011ec 	.word	0x200011ec

0800bbe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08a      	sub	sp, #40	; 0x28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bbf4:	f7fe fd9a 	bl	800a72c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bbf8:	4b5b      	ldr	r3, [pc, #364]	; (800bd68 <pvPortMalloc+0x180>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc00:	f000 f920 	bl	800be44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc04:	4b59      	ldr	r3, [pc, #356]	; (800bd6c <pvPortMalloc+0x184>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f040 8093 	bne.w	800bd38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d01d      	beq.n	800bc54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bc18:	2208      	movs	r2, #8
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f003 0307 	and.w	r3, r3, #7
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d014      	beq.n	800bc54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f023 0307 	bic.w	r3, r3, #7
 800bc30:	3308      	adds	r3, #8
 800bc32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f003 0307 	and.w	r3, r3, #7
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00a      	beq.n	800bc54 <pvPortMalloc+0x6c>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	617b      	str	r3, [r7, #20]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d06e      	beq.n	800bd38 <pvPortMalloc+0x150>
 800bc5a:	4b45      	ldr	r3, [pc, #276]	; (800bd70 <pvPortMalloc+0x188>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d869      	bhi.n	800bd38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc64:	4b43      	ldr	r3, [pc, #268]	; (800bd74 <pvPortMalloc+0x18c>)
 800bc66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc68:	4b42      	ldr	r3, [pc, #264]	; (800bd74 <pvPortMalloc+0x18c>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc6e:	e004      	b.n	800bc7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d903      	bls.n	800bc8c <pvPortMalloc+0xa4>
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1f1      	bne.n	800bc70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc8c:	4b36      	ldr	r3, [pc, #216]	; (800bd68 <pvPortMalloc+0x180>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d050      	beq.n	800bd38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2208      	movs	r2, #8
 800bc9c:	4413      	add	r3, r2
 800bc9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	1ad2      	subs	r2, r2, r3
 800bcb0:	2308      	movs	r3, #8
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d91f      	bls.n	800bcf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bcb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	f003 0307 	and.w	r3, r3, #7
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00a      	beq.n	800bce0 <pvPortMalloc+0xf8>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	613b      	str	r3, [r7, #16]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	685a      	ldr	r2, [r3, #4]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	1ad2      	subs	r2, r2, r3
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcf2:	69b8      	ldr	r0, [r7, #24]
 800bcf4:	f000 f908 	bl	800bf08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bcf8:	4b1d      	ldr	r3, [pc, #116]	; (800bd70 <pvPortMalloc+0x188>)
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	4a1b      	ldr	r2, [pc, #108]	; (800bd70 <pvPortMalloc+0x188>)
 800bd04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd06:	4b1a      	ldr	r3, [pc, #104]	; (800bd70 <pvPortMalloc+0x188>)
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	4b1b      	ldr	r3, [pc, #108]	; (800bd78 <pvPortMalloc+0x190>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d203      	bcs.n	800bd1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd12:	4b17      	ldr	r3, [pc, #92]	; (800bd70 <pvPortMalloc+0x188>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a18      	ldr	r2, [pc, #96]	; (800bd78 <pvPortMalloc+0x190>)
 800bd18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	4b13      	ldr	r3, [pc, #76]	; (800bd6c <pvPortMalloc+0x184>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	431a      	orrs	r2, r3
 800bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bd2e:	4b13      	ldr	r3, [pc, #76]	; (800bd7c <pvPortMalloc+0x194>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3301      	adds	r3, #1
 800bd34:	4a11      	ldr	r2, [pc, #68]	; (800bd7c <pvPortMalloc+0x194>)
 800bd36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd38:	f7fe fd06 	bl	800a748 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	f003 0307 	and.w	r3, r3, #7
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00a      	beq.n	800bd5c <pvPortMalloc+0x174>
	__asm volatile
 800bd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4a:	f383 8811 	msr	BASEPRI, r3
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f3bf 8f4f 	dsb	sy
 800bd56:	60fb      	str	r3, [r7, #12]
}
 800bd58:	bf00      	nop
 800bd5a:	e7fe      	b.n	800bd5a <pvPortMalloc+0x172>
	return pvReturn;
 800bd5c:	69fb      	ldr	r3, [r7, #28]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3728      	adds	r7, #40	; 0x28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20004df8 	.word	0x20004df8
 800bd6c:	20004e0c 	.word	0x20004e0c
 800bd70:	20004dfc 	.word	0x20004dfc
 800bd74:	20004df0 	.word	0x20004df0
 800bd78:	20004e00 	.word	0x20004e00
 800bd7c:	20004e04 	.word	0x20004e04

0800bd80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d04d      	beq.n	800be2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd92:	2308      	movs	r3, #8
 800bd94:	425b      	negs	r3, r3
 800bd96:	697a      	ldr	r2, [r7, #20]
 800bd98:	4413      	add	r3, r2
 800bd9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	4b24      	ldr	r3, [pc, #144]	; (800be38 <vPortFree+0xb8>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4013      	ands	r3, r2
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <vPortFree+0x44>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	60fb      	str	r3, [r7, #12]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d00a      	beq.n	800bde2 <vPortFree+0x62>
	__asm volatile
 800bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	60bb      	str	r3, [r7, #8]
}
 800bdde:	bf00      	nop
 800bde0:	e7fe      	b.n	800bde0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	4b14      	ldr	r3, [pc, #80]	; (800be38 <vPortFree+0xb8>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4013      	ands	r3, r2
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d01e      	beq.n	800be2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d11a      	bne.n	800be2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	4b0e      	ldr	r3, [pc, #56]	; (800be38 <vPortFree+0xb8>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	43db      	mvns	r3, r3
 800be02:	401a      	ands	r2, r3
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be08:	f7fe fc90 	bl	800a72c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	4b0a      	ldr	r3, [pc, #40]	; (800be3c <vPortFree+0xbc>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4413      	add	r3, r2
 800be16:	4a09      	ldr	r2, [pc, #36]	; (800be3c <vPortFree+0xbc>)
 800be18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be1a:	6938      	ldr	r0, [r7, #16]
 800be1c:	f000 f874 	bl	800bf08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800be20:	4b07      	ldr	r3, [pc, #28]	; (800be40 <vPortFree+0xc0>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3301      	adds	r3, #1
 800be26:	4a06      	ldr	r2, [pc, #24]	; (800be40 <vPortFree+0xc0>)
 800be28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800be2a:	f7fe fc8d 	bl	800a748 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be2e:	bf00      	nop
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20004e0c 	.word	0x20004e0c
 800be3c:	20004dfc 	.word	0x20004dfc
 800be40:	20004e08 	.word	0x20004e08

0800be44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800be4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be50:	4b27      	ldr	r3, [pc, #156]	; (800bef0 <prvHeapInit+0xac>)
 800be52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f003 0307 	and.w	r3, r3, #7
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00c      	beq.n	800be78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3307      	adds	r3, #7
 800be62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f023 0307 	bic.w	r3, r3, #7
 800be6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	4a1f      	ldr	r2, [pc, #124]	; (800bef0 <prvHeapInit+0xac>)
 800be74:	4413      	add	r3, r2
 800be76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be7c:	4a1d      	ldr	r2, [pc, #116]	; (800bef4 <prvHeapInit+0xb0>)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be82:	4b1c      	ldr	r3, [pc, #112]	; (800bef4 <prvHeapInit+0xb0>)
 800be84:	2200      	movs	r2, #0
 800be86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	4413      	add	r3, r2
 800be8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be90:	2208      	movs	r2, #8
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	1a9b      	subs	r3, r3, r2
 800be96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 0307 	bic.w	r3, r3, #7
 800be9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	4a15      	ldr	r2, [pc, #84]	; (800bef8 <prvHeapInit+0xb4>)
 800bea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bea6:	4b14      	ldr	r3, [pc, #80]	; (800bef8 <prvHeapInit+0xb4>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2200      	movs	r2, #0
 800beac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800beae:	4b12      	ldr	r3, [pc, #72]	; (800bef8 <prvHeapInit+0xb4>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	1ad2      	subs	r2, r2, r3
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bec4:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <prvHeapInit+0xb4>)
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	4a0a      	ldr	r2, [pc, #40]	; (800befc <prvHeapInit+0xb8>)
 800bed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	4a09      	ldr	r2, [pc, #36]	; (800bf00 <prvHeapInit+0xbc>)
 800beda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bedc:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <prvHeapInit+0xc0>)
 800bede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bee2:	601a      	str	r2, [r3, #0]
}
 800bee4:	bf00      	nop
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr
 800bef0:	200011f0 	.word	0x200011f0
 800bef4:	20004df0 	.word	0x20004df0
 800bef8:	20004df8 	.word	0x20004df8
 800befc:	20004e00 	.word	0x20004e00
 800bf00:	20004dfc 	.word	0x20004dfc
 800bf04:	20004e0c 	.word	0x20004e0c

0800bf08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf10:	4b28      	ldr	r3, [pc, #160]	; (800bfb4 <prvInsertBlockIntoFreeList+0xac>)
 800bf12:	60fb      	str	r3, [r7, #12]
 800bf14:	e002      	b.n	800bf1c <prvInsertBlockIntoFreeList+0x14>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d8f7      	bhi.n	800bf16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	4413      	add	r3, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d108      	bne.n	800bf4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	685a      	ldr	r2, [r3, #4]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	441a      	add	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	441a      	add	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d118      	bne.n	800bf90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d00d      	beq.n	800bf86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	441a      	add	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	601a      	str	r2, [r3, #0]
 800bf84:	e008      	b.n	800bf98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf86:	4b0c      	ldr	r3, [pc, #48]	; (800bfb8 <prvInsertBlockIntoFreeList+0xb0>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	e003      	b.n	800bf98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d002      	beq.n	800bfa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfa6:	bf00      	nop
 800bfa8:	3714      	adds	r7, #20
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	20004df0 	.word	0x20004df0
 800bfb8:	20004df8 	.word	0x20004df8

0800bfbc <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b08a      	sub	sp, #40	; 0x28
 800bfc0:	af04      	add	r7, sp, #16
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	011b      	lsls	r3, r3, #4
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800bfd8:	7afb      	ldrb	r3, [r7, #11]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d101      	bne.n	800bfe2 <_ICM20948_SelectUserBank+0x26>
 800bfde:	2368      	movs	r3, #104	; 0x68
 800bfe0:	e000      	b.n	800bfe4 <_ICM20948_SelectUserBank+0x28>
 800bfe2:	2369      	movs	r3, #105	; 0x69
 800bfe4:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800bfe6:	7dbb      	ldrb	r3, [r7, #22]
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	005b      	lsls	r3, r3, #1
 800bfec:	b299      	uxth	r1, r3
 800bfee:	230a      	movs	r3, #10
 800bff0:	9302      	str	r3, [sp, #8]
 800bff2:	2301      	movs	r3, #1
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	f107 0315 	add.w	r3, r7, #21
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	2301      	movs	r3, #1
 800bffe:	227f      	movs	r2, #127	; 0x7f
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7f9 f967 	bl	80052d4 <HAL_I2C_Mem_Write>
 800c006:	4603      	mov	r3, r0
 800c008:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3718      	adds	r7, #24
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b088      	sub	sp, #32
 800c018:	af04      	add	r7, sp, #16
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	4608      	mov	r0, r1
 800c01e:	4611      	mov	r1, r2
 800c020:	461a      	mov	r2, r3
 800c022:	4603      	mov	r3, r0
 800c024:	70fb      	strb	r3, [r7, #3]
 800c026:	460b      	mov	r3, r1
 800c028:	70bb      	strb	r3, [r7, #2]
 800c02a:	4613      	mov	r3, r2
 800c02c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800c032:	78fb      	ldrb	r3, [r7, #3]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <_ICM20948_WriteByte+0x28>
 800c038:	2368      	movs	r3, #104	; 0x68
 800c03a:	e000      	b.n	800c03e <_ICM20948_WriteByte+0x2a>
 800c03c:	2369      	movs	r3, #105	; 0x69
 800c03e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	b29b      	uxth	r3, r3
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	b299      	uxth	r1, r3
 800c048:	78bb      	ldrb	r3, [r7, #2]
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	230a      	movs	r3, #10
 800c04e:	9302      	str	r3, [sp, #8]
 800c050:	2301      	movs	r3, #1
 800c052:	9301      	str	r3, [sp, #4]
 800c054:	1c7b      	adds	r3, r7, #1
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	2301      	movs	r3, #1
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7f9 f93a 	bl	80052d4 <HAL_I2C_Mem_Write>
 800c060:	4603      	mov	r3, r0
 800c062:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800c064:	7bfb      	ldrb	r3, [r7, #15]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	4608      	mov	r0, r1
 800c078:	4611      	mov	r1, r2
 800c07a:	461a      	mov	r2, r3
 800c07c:	4603      	mov	r3, r0
 800c07e:	70fb      	strb	r3, [r7, #3]
 800c080:	460b      	mov	r3, r1
 800c082:	70bb      	strb	r3, [r7, #2]
 800c084:	4613      	mov	r3, r2
 800c086:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800c08c:	78fb      	ldrb	r3, [r7, #3]
 800c08e:	2200      	movs	r2, #0
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff ff92 	bl	800bfbc <_ICM20948_SelectUserBank>
 800c098:	4603      	mov	r3, r0
 800c09a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800c09c:	78f9      	ldrb	r1, [r7, #3]
 800c09e:	2380      	movs	r3, #128	; 0x80
 800c0a0:	2206      	movs	r2, #6
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7ff ffb6 	bl	800c014 <_ICM20948_WriteByte>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800c0ac:	20c8      	movs	r0, #200	; 0xc8
 800c0ae:	f7f8 fc7f 	bl	80049b0 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800c0b2:	78f9      	ldrb	r1, [r7, #3]
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	2206      	movs	r2, #6
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff ffab 	bl	800c014 <_ICM20948_WriteByte>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800c0c2:	78f9      	ldrb	r1, [r7, #3]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	2207      	movs	r2, #7
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff ffa3 	bl	800c014 <_ICM20948_WriteByte>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	2202      	movs	r2, #2
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7ff ff6f 	bl	800bfbc <_ICM20948_SelectUserBank>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800c0e2:	78bb      	ldrb	r3, [r7, #2]
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	b25b      	sxtb	r3, r3
 800c0e8:	f043 0319 	orr.w	r3, r3, #25
 800c0ec:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	78f9      	ldrb	r1, [r7, #3]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff ff8d 	bl	800c014 <_ICM20948_WriteByte>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800c0fe:	78f9      	ldrb	r1, [r7, #3]
 800c100:	2303      	movs	r3, #3
 800c102:	2253      	movs	r2, #83	; 0x53
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7ff ff85 	bl	800c014 <_ICM20948_WriteByte>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800c10e:	78f9      	ldrb	r1, [r7, #3]
 800c110:	2304      	movs	r3, #4
 800c112:	2200      	movs	r2, #0
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff ff7d 	bl	800c014 <_ICM20948_WriteByte>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800c11e:	787b      	ldrb	r3, [r7, #1]
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	b25b      	sxtb	r3, r3
 800c124:	f043 0319 	orr.w	r3, r3, #25
 800c128:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	78f9      	ldrb	r1, [r7, #3]
 800c12e:	2214      	movs	r2, #20
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7ff ff6f 	bl	800c014 <_ICM20948_WriteByte>
 800c136:	4603      	mov	r3, r0
 800c138:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800c13a:	78f9      	ldrb	r1, [r7, #3]
 800c13c:	2304      	movs	r3, #4
 800c13e:	2211      	movs	r2, #17
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff ff67 	bl	800c014 <_ICM20948_WriteByte>
 800c146:	4603      	mov	r3, r0
 800c148:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800c14a:	78fb      	ldrb	r3, [r7, #3]
 800c14c:	2200      	movs	r2, #0
 800c14e:	4619      	mov	r1, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff ff33 	bl	800bfbc <_ICM20948_SelectUserBank>
 800c156:	4603      	mov	r3, r0
 800c158:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800c15a:	78f9      	ldrb	r1, [r7, #3]
 800c15c:	2302      	movs	r3, #2
 800c15e:	220f      	movs	r2, #15
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff ff57 	bl	800c014 <_ICM20948_WriteByte>
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800c16a:	2208      	movs	r2, #8
 800c16c:	2131      	movs	r1, #49	; 0x31
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f806 	bl	800c180 <_AK09918_WriteByte>
 800c174:	4603      	mov	r3, r0
 800c176:	73fb      	strb	r3, [r7, #15]
}
 800c178:	bf00      	nop
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b088      	sub	sp, #32
 800c184:	af04      	add	r7, sp, #16
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	70fb      	strb	r3, [r7, #3]
 800c18c:	4613      	mov	r3, r2
 800c18e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800c194:	78fb      	ldrb	r3, [r7, #3]
 800c196:	b29a      	uxth	r2, r3
 800c198:	230a      	movs	r3, #10
 800c19a:	9302      	str	r3, [sp, #8]
 800c19c:	2301      	movs	r3, #1
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	1cbb      	adds	r3, r7, #2
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	2118      	movs	r1, #24
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7f9 f893 	bl	80052d4 <HAL_I2C_Mem_Write>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800c1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	71fb      	strb	r3, [r7, #7]
 800c1c6:	e026      	b.n	800c216 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	3b50      	subs	r3, #80	; 0x50
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 f82b 	bl	800c22c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	2000      	movs	r0, #0
 800c1da:	f000 f827 	bl	800c22c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800c1de:	2100      	movs	r1, #0
 800c1e0:	2010      	movs	r0, #16
 800c1e2:	f000 f823 	bl	800c22c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	71bb      	strb	r3, [r7, #6]
 800c1ea:	e00d      	b.n	800c208 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800c1ec:	79ba      	ldrb	r2, [r7, #6]
 800c1ee:	79fb      	ldrb	r3, [r7, #7]
 800c1f0:	490d      	ldr	r1, [pc, #52]	; (800c228 <OLED_Refresh_Gram+0x6c>)
 800c1f2:	00d2      	lsls	r2, r2, #3
 800c1f4:	440a      	add	r2, r1
 800c1f6:	4413      	add	r3, r2
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	2101      	movs	r1, #1
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 f815 	bl	800c22c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800c202:	79bb      	ldrb	r3, [r7, #6]
 800c204:	3301      	adds	r3, #1
 800c206:	71bb      	strb	r3, [r7, #6]
 800c208:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	daed      	bge.n	800c1ec <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800c210:	79fb      	ldrb	r3, [r7, #7]
 800c212:	3301      	adds	r3, #1
 800c214:	71fb      	strb	r3, [r7, #7]
 800c216:	79fb      	ldrb	r3, [r7, #7]
 800c218:	2b07      	cmp	r3, #7
 800c21a:	d9d5      	bls.n	800c1c8 <OLED_Refresh_Gram+0xc>
	}
}
 800c21c:	bf00      	nop
 800c21e:	bf00      	nop
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20004e10 	.word	0x20004e10

0800c22c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	460a      	mov	r2, r1
 800c236:	71fb      	strb	r3, [r7, #7]
 800c238:	4613      	mov	r3, r2
 800c23a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800c23c:	79bb      	ldrb	r3, [r7, #6]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d006      	beq.n	800c250 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800c242:	2201      	movs	r2, #1
 800c244:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c248:	481c      	ldr	r0, [pc, #112]	; (800c2bc <OLED_WR_Byte+0x90>)
 800c24a:	f7f8 fee5 	bl	8005018 <HAL_GPIO_WritePin>
 800c24e:	e005      	b.n	800c25c <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800c250:	2200      	movs	r2, #0
 800c252:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c256:	4819      	ldr	r0, [pc, #100]	; (800c2bc <OLED_WR_Byte+0x90>)
 800c258:	f7f8 fede 	bl	8005018 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800c25c:	2300      	movs	r3, #0
 800c25e:	73fb      	strb	r3, [r7, #15]
 800c260:	e01e      	b.n	800c2a0 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800c262:	2200      	movs	r2, #0
 800c264:	2120      	movs	r1, #32
 800c266:	4815      	ldr	r0, [pc, #84]	; (800c2bc <OLED_WR_Byte+0x90>)
 800c268:	f7f8 fed6 	bl	8005018 <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800c26c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c270:	2b00      	cmp	r3, #0
 800c272:	da05      	bge.n	800c280 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800c274:	2201      	movs	r2, #1
 800c276:	2140      	movs	r1, #64	; 0x40
 800c278:	4810      	ldr	r0, [pc, #64]	; (800c2bc <OLED_WR_Byte+0x90>)
 800c27a:	f7f8 fecd 	bl	8005018 <HAL_GPIO_WritePin>
 800c27e:	e004      	b.n	800c28a <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800c280:	2200      	movs	r2, #0
 800c282:	2140      	movs	r1, #64	; 0x40
 800c284:	480d      	ldr	r0, [pc, #52]	; (800c2bc <OLED_WR_Byte+0x90>)
 800c286:	f7f8 fec7 	bl	8005018 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800c28a:	2201      	movs	r2, #1
 800c28c:	2120      	movs	r1, #32
 800c28e:	480b      	ldr	r0, [pc, #44]	; (800c2bc <OLED_WR_Byte+0x90>)
 800c290:	f7f8 fec2 	bl	8005018 <HAL_GPIO_WritePin>
		dat <<= 1;
 800c294:	79fb      	ldrb	r3, [r7, #7]
 800c296:	005b      	lsls	r3, r3, #1
 800c298:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
 800c29c:	3301      	adds	r3, #1
 800c29e:	73fb      	strb	r3, [r7, #15]
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	2b07      	cmp	r3, #7
 800c2a4:	d9dd      	bls.n	800c262 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c2ac:	4803      	ldr	r0, [pc, #12]	; (800c2bc <OLED_WR_Byte+0x90>)
 800c2ae:	f7f8 feb3 	bl	8005018 <HAL_GPIO_WritePin>
}
 800c2b2:	bf00      	nop
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	40021000 	.word	0x40021000

0800c2c0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	71fb      	strb	r3, [r7, #7]
 800c2ca:	e014      	b.n	800c2f6 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	71bb      	strb	r3, [r7, #6]
 800c2d0:	e00a      	b.n	800c2e8 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800c2d2:	79ba      	ldrb	r2, [r7, #6]
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	490c      	ldr	r1, [pc, #48]	; (800c308 <OLED_Clear+0x48>)
 800c2d8:	00d2      	lsls	r2, r2, #3
 800c2da:	440a      	add	r2, r1
 800c2dc:	4413      	add	r3, r2
 800c2de:	2200      	movs	r2, #0
 800c2e0:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800c2e2:	79bb      	ldrb	r3, [r7, #6]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	71bb      	strb	r3, [r7, #6]
 800c2e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	daf0      	bge.n	800c2d2 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800c2f0:	79fb      	ldrb	r3, [r7, #7]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	71fb      	strb	r3, [r7, #7]
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	2b07      	cmp	r3, #7
 800c2fa:	d9e7      	bls.n	800c2cc <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800c2fc:	f7ff ff5e 	bl	800c1bc <OLED_Refresh_Gram>
}
 800c300:	bf00      	nop
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	20004e10 	.word	0x20004e10

0800c30c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	4603      	mov	r3, r0
 800c314:	71fb      	strb	r3, [r7, #7]
 800c316:	460b      	mov	r3, r1
 800c318:	71bb      	strb	r3, [r7, #6]
 800c31a:	4613      	mov	r3, r2
 800c31c:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800c322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c326:	2b00      	cmp	r3, #0
 800c328:	db41      	blt.n	800c3ae <OLED_DrawPoint+0xa2>
 800c32a:	79bb      	ldrb	r3, [r7, #6]
 800c32c:	2b3f      	cmp	r3, #63	; 0x3f
 800c32e:	d83e      	bhi.n	800c3ae <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800c330:	79bb      	ldrb	r3, [r7, #6]
 800c332:	08db      	lsrs	r3, r3, #3
 800c334:	b2db      	uxtb	r3, r3
 800c336:	f1c3 0307 	rsb	r3, r3, #7
 800c33a:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800c33c:	79bb      	ldrb	r3, [r7, #6]
 800c33e:	f003 0307 	and.w	r3, r3, #7
 800c342:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800c344:	7b7b      	ldrb	r3, [r7, #13]
 800c346:	f1c3 0307 	rsb	r3, r3, #7
 800c34a:	2201      	movs	r2, #1
 800c34c:	fa02 f303 	lsl.w	r3, r2, r3
 800c350:	73fb      	strb	r3, [r7, #15]
	if (t)
 800c352:	797b      	ldrb	r3, [r7, #5]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d012      	beq.n	800c37e <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800c358:	79fa      	ldrb	r2, [r7, #7]
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
 800c35c:	4917      	ldr	r1, [pc, #92]	; (800c3bc <OLED_DrawPoint+0xb0>)
 800c35e:	00d2      	lsls	r2, r2, #3
 800c360:	440a      	add	r2, r1
 800c362:	4413      	add	r3, r2
 800c364:	7818      	ldrb	r0, [r3, #0]
 800c366:	79fa      	ldrb	r2, [r7, #7]
 800c368:	7bbb      	ldrb	r3, [r7, #14]
 800c36a:	7bf9      	ldrb	r1, [r7, #15]
 800c36c:	4301      	orrs	r1, r0
 800c36e:	b2c8      	uxtb	r0, r1
 800c370:	4912      	ldr	r1, [pc, #72]	; (800c3bc <OLED_DrawPoint+0xb0>)
 800c372:	00d2      	lsls	r2, r2, #3
 800c374:	440a      	add	r2, r1
 800c376:	4413      	add	r3, r2
 800c378:	4602      	mov	r2, r0
 800c37a:	701a      	strb	r2, [r3, #0]
 800c37c:	e018      	b.n	800c3b0 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800c37e:	79fa      	ldrb	r2, [r7, #7]
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	490e      	ldr	r1, [pc, #56]	; (800c3bc <OLED_DrawPoint+0xb0>)
 800c384:	00d2      	lsls	r2, r2, #3
 800c386:	440a      	add	r2, r1
 800c388:	4413      	add	r3, r2
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	b25a      	sxtb	r2, r3
 800c38e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c392:	43db      	mvns	r3, r3
 800c394:	b25b      	sxtb	r3, r3
 800c396:	4013      	ands	r3, r2
 800c398:	b259      	sxtb	r1, r3
 800c39a:	79fa      	ldrb	r2, [r7, #7]
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
 800c39e:	b2c8      	uxtb	r0, r1
 800c3a0:	4906      	ldr	r1, [pc, #24]	; (800c3bc <OLED_DrawPoint+0xb0>)
 800c3a2:	00d2      	lsls	r2, r2, #3
 800c3a4:	440a      	add	r2, r1
 800c3a6:	4413      	add	r3, r2
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	701a      	strb	r2, [r3, #0]
 800c3ac:	e000      	b.n	800c3b0 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800c3ae:	bf00      	nop
}
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	20004e10 	.word	0x20004e10

0800c3c0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800c3c0:	b590      	push	{r4, r7, lr}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	4623      	mov	r3, r4
 800c3d0:	71fb      	strb	r3, [r7, #7]
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	71bb      	strb	r3, [r7, #6]
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	717b      	strb	r3, [r7, #5]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800c3de:	79bb      	ldrb	r3, [r7, #6]
 800c3e0:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800c3e2:	797b      	ldrb	r3, [r7, #5]
 800c3e4:	3b20      	subs	r3, #32
 800c3e6:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73bb      	strb	r3, [r7, #14]
 800c3ec:	e04d      	b.n	800c48a <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800c3ee:	793b      	ldrb	r3, [r7, #4]
 800c3f0:	2b0c      	cmp	r3, #12
 800c3f2:	d10b      	bne.n	800c40c <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800c3f4:	797a      	ldrb	r2, [r7, #5]
 800c3f6:	7bb9      	ldrb	r1, [r7, #14]
 800c3f8:	4828      	ldr	r0, [pc, #160]	; (800c49c <OLED_ShowChar+0xdc>)
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	4413      	add	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4403      	add	r3, r0
 800c404:	440b      	add	r3, r1
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	73fb      	strb	r3, [r7, #15]
 800c40a:	e007      	b.n	800c41c <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800c40c:	797a      	ldrb	r2, [r7, #5]
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
 800c410:	4923      	ldr	r1, [pc, #140]	; (800c4a0 <OLED_ShowChar+0xe0>)
 800c412:	0112      	lsls	r2, r2, #4
 800c414:	440a      	add	r2, r1
 800c416:	4413      	add	r3, r2
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800c41c:	2300      	movs	r3, #0
 800c41e:	737b      	strb	r3, [r7, #13]
 800c420:	e02d      	b.n	800c47e <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800c422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c426:	2b00      	cmp	r3, #0
 800c428:	da07      	bge.n	800c43a <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800c42a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c42e:	79b9      	ldrb	r1, [r7, #6]
 800c430:	79fb      	ldrb	r3, [r7, #7]
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff ff6a 	bl	800c30c <OLED_DrawPoint>
 800c438:	e00c      	b.n	800c454 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800c43a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	bf0c      	ite	eq
 800c442:	2301      	moveq	r3, #1
 800c444:	2300      	movne	r3, #0
 800c446:	b2db      	uxtb	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	79b9      	ldrb	r1, [r7, #6]
 800c44c:	79fb      	ldrb	r3, [r7, #7]
 800c44e:	4618      	mov	r0, r3
 800c450:	f7ff ff5c 	bl	800c30c <OLED_DrawPoint>
			temp <<= 1;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	005b      	lsls	r3, r3, #1
 800c458:	73fb      	strb	r3, [r7, #15]
			y++;
 800c45a:	79bb      	ldrb	r3, [r7, #6]
 800c45c:	3301      	adds	r3, #1
 800c45e:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800c460:	79ba      	ldrb	r2, [r7, #6]
 800c462:	7b3b      	ldrb	r3, [r7, #12]
 800c464:	1ad2      	subs	r2, r2, r3
 800c466:	793b      	ldrb	r3, [r7, #4]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d105      	bne.n	800c478 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800c46c:	7b3b      	ldrb	r3, [r7, #12]
 800c46e:	71bb      	strb	r3, [r7, #6]
				x++;
 800c470:	79fb      	ldrb	r3, [r7, #7]
 800c472:	3301      	adds	r3, #1
 800c474:	71fb      	strb	r3, [r7, #7]
				break;
 800c476:	e005      	b.n	800c484 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800c478:	7b7b      	ldrb	r3, [r7, #13]
 800c47a:	3301      	adds	r3, #1
 800c47c:	737b      	strb	r3, [r7, #13]
 800c47e:	7b7b      	ldrb	r3, [r7, #13]
 800c480:	2b07      	cmp	r3, #7
 800c482:	d9ce      	bls.n	800c422 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	3301      	adds	r3, #1
 800c488:	73bb      	strb	r3, [r7, #14]
 800c48a:	7bba      	ldrb	r2, [r7, #14]
 800c48c:	793b      	ldrb	r3, [r7, #4]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d3ad      	bcc.n	800c3ee <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800c492:	bf00      	nop
 800c494:	bf00      	nop
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd90      	pop	{r4, r7, pc}
 800c49c:	0800d2c4 	.word	0x0800d2c4
 800c4a0:	0800d738 	.word	0x0800d738

0800c4a4 <oled_pow>:

uint32_t oled_pow(uint8_t m, uint8_t n)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	460a      	mov	r2, r1
 800c4ae:	71fb      	strb	r3, [r7, #7]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	60fb      	str	r3, [r7, #12]
	while (n--)
 800c4b8:	e004      	b.n	800c4c4 <oled_pow+0x20>
		result *= m;
 800c4ba:	79fa      	ldrb	r2, [r7, #7]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	fb02 f303 	mul.w	r3, r2, r3
 800c4c2:	60fb      	str	r3, [r7, #12]
	while (n--)
 800c4c4:	79bb      	ldrb	r3, [r7, #6]
 800c4c6:	1e5a      	subs	r2, r3, #1
 800c4c8:	71ba      	strb	r2, [r7, #6]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1f5      	bne.n	800c4ba <oled_pow+0x16>
	return result;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 800c4dc:	b590      	push	{r4, r7, lr}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af02      	add	r7, sp, #8
 800c4e2:	603a      	str	r2, [r7, #0]
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	71fb      	strb	r3, [r7, #7]
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	71bb      	strb	r3, [r7, #6]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73fb      	strb	r3, [r7, #15]
 800c4fa:	e051      	b.n	800c5a0 <OLED_ShowNumber+0xc4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 800c4fc:	797a      	ldrb	r2, [r7, #5]
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	b2db      	uxtb	r3, r3
 800c504:	3b01      	subs	r3, #1
 800c506:	b2db      	uxtb	r3, r3
 800c508:	4619      	mov	r1, r3
 800c50a:	200a      	movs	r0, #10
 800c50c:	f7ff ffca 	bl	800c4a4 <oled_pow>
 800c510:	4602      	mov	r2, r0
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	fbb3 f1f2 	udiv	r1, r3, r2
 800c518:	4b26      	ldr	r3, [pc, #152]	; (800c5b4 <OLED_ShowNumber+0xd8>)
 800c51a:	fba3 2301 	umull	r2, r3, r3, r1
 800c51e:	08da      	lsrs	r2, r3, #3
 800c520:	4613      	mov	r3, r2
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4413      	add	r3, r2
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	1aca      	subs	r2, r1, r3
 800c52a:	4613      	mov	r3, r2
 800c52c:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 800c52e:	7bbb      	ldrb	r3, [r7, #14]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d11d      	bne.n	800c570 <OLED_ShowNumber+0x94>
 800c534:	7bfa      	ldrb	r2, [r7, #15]
 800c536:	797b      	ldrb	r3, [r7, #5]
 800c538:	3b01      	subs	r3, #1
 800c53a:	429a      	cmp	r2, r3
 800c53c:	da18      	bge.n	800c570 <OLED_ShowNumber+0x94>
		{
			if (temp == 0)
 800c53e:	7b7b      	ldrb	r3, [r7, #13]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d113      	bne.n	800c56c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ', size, 1);
 800c544:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c548:	085b      	lsrs	r3, r3, #1
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	7bfa      	ldrb	r2, [r7, #15]
 800c54e:	fb12 f303 	smulbb	r3, r2, r3
 800c552:	b2da      	uxtb	r2, r3
 800c554:	79fb      	ldrb	r3, [r7, #7]
 800c556:	4413      	add	r3, r2
 800c558:	b2d8      	uxtb	r0, r3
 800c55a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c55e:	79b9      	ldrb	r1, [r7, #6]
 800c560:	2201      	movs	r2, #1
 800c562:	9200      	str	r2, [sp, #0]
 800c564:	2220      	movs	r2, #32
 800c566:	f7ff ff2b 	bl	800c3c0 <OLED_ShowChar>
				continue;
 800c56a:	e016      	b.n	800c59a <OLED_ShowNumber+0xbe>
			}
			else
				enshow = 1;
 800c56c:	2301      	movs	r3, #1
 800c56e:	73bb      	strb	r3, [r7, #14]
		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
 800c570:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c574:	085b      	lsrs	r3, r3, #1
 800c576:	b2db      	uxtb	r3, r3
 800c578:	7bfa      	ldrb	r2, [r7, #15]
 800c57a:	fb12 f303 	smulbb	r3, r2, r3
 800c57e:	b2da      	uxtb	r2, r3
 800c580:	79fb      	ldrb	r3, [r7, #7]
 800c582:	4413      	add	r3, r2
 800c584:	b2d8      	uxtb	r0, r3
 800c586:	7b7b      	ldrb	r3, [r7, #13]
 800c588:	3330      	adds	r3, #48	; 0x30
 800c58a:	b2da      	uxtb	r2, r3
 800c58c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c590:	79b9      	ldrb	r1, [r7, #6]
 800c592:	2401      	movs	r4, #1
 800c594:	9400      	str	r4, [sp, #0]
 800c596:	f7ff ff13 	bl	800c3c0 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
 800c59c:	3301      	adds	r3, #1
 800c59e:	73fb      	strb	r3, [r7, #15]
 800c5a0:	7bfa      	ldrb	r2, [r7, #15]
 800c5a2:	797b      	ldrb	r3, [r7, #5]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d3a9      	bcc.n	800c4fc <OLED_ShowNumber+0x20>
	}
}
 800c5a8:	bf00      	nop
 800c5aa:	bf00      	nop
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd90      	pop	{r4, r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	cccccccd 	.word	0xcccccccd

0800c5b8 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af02      	add	r7, sp, #8
 800c5be:	4603      	mov	r3, r0
 800c5c0:	603a      	str	r2, [r7, #0]
 800c5c2:	71fb      	strb	r3, [r7, #7]
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800c5c8:	e01f      	b.n	800c60a <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	2b7a      	cmp	r3, #122	; 0x7a
 800c5ce:	d904      	bls.n	800c5da <OLED_ShowString+0x22>
		{
			x = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800c5d4:	79bb      	ldrb	r3, [r7, #6]
 800c5d6:	3310      	adds	r3, #16
 800c5d8:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800c5da:	79bb      	ldrb	r3, [r7, #6]
 800c5dc:	2b3a      	cmp	r3, #58	; 0x3a
 800c5de:	d905      	bls.n	800c5ec <OLED_ShowString+0x34>
		{
			y = x = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	71fb      	strb	r3, [r7, #7]
 800c5e4:	79fb      	ldrb	r3, [r7, #7]
 800c5e6:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800c5e8:	f7ff fe6a 	bl	800c2c0 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	781a      	ldrb	r2, [r3, #0]
 800c5f0:	79b9      	ldrb	r1, [r7, #6]
 800c5f2:	79f8      	ldrb	r0, [r7, #7]
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	230c      	movs	r3, #12
 800c5fa:	f7ff fee1 	bl	800c3c0 <OLED_ShowChar>
		x += 8;
 800c5fe:	79fb      	ldrb	r3, [r7, #7]
 800c600:	3308      	adds	r3, #8
 800c602:	71fb      	strb	r3, [r7, #7]
		p++;
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	3301      	adds	r3, #1
 800c608:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1db      	bne.n	800c5ca <OLED_ShowString+0x12>
	}
}
 800c612:	bf00      	nop
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800c620:	f7f9 fcd4 	bl	8005fcc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800c624:	4b41      	ldr	r3, [pc, #260]	; (800c72c <OLED_Init+0x110>)
 800c626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c628:	4a40      	ldr	r2, [pc, #256]	; (800c72c <OLED_Init+0x110>)
 800c62a:	f023 0301 	bic.w	r3, r3, #1
 800c62e:	6713      	str	r3, [r2, #112]	; 0x70
 800c630:	4b3e      	ldr	r3, [pc, #248]	; (800c72c <OLED_Init+0x110>)
 800c632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c634:	4a3d      	ldr	r2, [pc, #244]	; (800c72c <OLED_Init+0x110>)
 800c636:	f023 0304 	bic.w	r3, r3, #4
 800c63a:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800c63c:	f7f9 fcda 	bl	8005ff4 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800c640:	2200      	movs	r2, #0
 800c642:	2180      	movs	r1, #128	; 0x80
 800c644:	483a      	ldr	r0, [pc, #232]	; (800c730 <OLED_Init+0x114>)
 800c646:	f7f8 fce7 	bl	8005018 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800c64a:	2064      	movs	r0, #100	; 0x64
 800c64c:	f7f8 f9b0 	bl	80049b0 <HAL_Delay>
	OLED_RST_Set();
 800c650:	2201      	movs	r2, #1
 800c652:	2180      	movs	r1, #128	; 0x80
 800c654:	4836      	ldr	r0, [pc, #216]	; (800c730 <OLED_Init+0x114>)
 800c656:	f7f8 fcdf 	bl	8005018 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800c65a:	2100      	movs	r1, #0
 800c65c:	20ae      	movs	r0, #174	; 0xae
 800c65e:	f7ff fde5 	bl	800c22c <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800c662:	2100      	movs	r1, #0
 800c664:	20d5      	movs	r0, #213	; 0xd5
 800c666:	f7ff fde1 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800c66a:	2100      	movs	r1, #0
 800c66c:	2050      	movs	r0, #80	; 0x50
 800c66e:	f7ff fddd 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800c672:	2100      	movs	r1, #0
 800c674:	20a8      	movs	r0, #168	; 0xa8
 800c676:	f7ff fdd9 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800c67a:	2100      	movs	r1, #0
 800c67c:	203f      	movs	r0, #63	; 0x3f
 800c67e:	f7ff fdd5 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800c682:	2100      	movs	r1, #0
 800c684:	20d3      	movs	r0, #211	; 0xd3
 800c686:	f7ff fdd1 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800c68a:	2100      	movs	r1, #0
 800c68c:	2000      	movs	r0, #0
 800c68e:	f7ff fdcd 	bl	800c22c <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800c692:	2100      	movs	r1, #0
 800c694:	2040      	movs	r0, #64	; 0x40
 800c696:	f7ff fdc9 	bl	800c22c <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800c69a:	2100      	movs	r1, #0
 800c69c:	208d      	movs	r0, #141	; 0x8d
 800c69e:	f7ff fdc5 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	2014      	movs	r0, #20
 800c6a6:	f7ff fdc1 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	2020      	movs	r0, #32
 800c6ae:	f7ff fdbd 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	2002      	movs	r0, #2
 800c6b6:	f7ff fdb9 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	20a1      	movs	r0, #161	; 0xa1
 800c6be:	f7ff fdb5 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	20c0      	movs	r0, #192	; 0xc0
 800c6c6:	f7ff fdb1 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	20da      	movs	r0, #218	; 0xda
 800c6ce:	f7ff fdad 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	2012      	movs	r0, #18
 800c6d6:	f7ff fda9 	bl	800c22c <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800c6da:	2100      	movs	r1, #0
 800c6dc:	2081      	movs	r0, #129	; 0x81
 800c6de:	f7ff fda5 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	20ef      	movs	r0, #239	; 0xef
 800c6e6:	f7ff fda1 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	20d9      	movs	r0, #217	; 0xd9
 800c6ee:	f7ff fd9d 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	20f1      	movs	r0, #241	; 0xf1
 800c6f6:	f7ff fd99 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	20db      	movs	r0, #219	; 0xdb
 800c6fe:	f7ff fd95 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800c702:	2100      	movs	r1, #0
 800c704:	2030      	movs	r0, #48	; 0x30
 800c706:	f7ff fd91 	bl	800c22c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800c70a:	2100      	movs	r1, #0
 800c70c:	20a4      	movs	r0, #164	; 0xa4
 800c70e:	f7ff fd8d 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800c712:	2100      	movs	r1, #0
 800c714:	20a6      	movs	r0, #166	; 0xa6
 800c716:	f7ff fd89 	bl	800c22c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800c71a:	2100      	movs	r1, #0
 800c71c:	20af      	movs	r0, #175	; 0xaf
 800c71e:	f7ff fd85 	bl	800c22c <OLED_WR_Byte>
	OLED_Clear();
 800c722:	f7ff fdcd 	bl	800c2c0 <OLED_Clear>
 800c726:	bf00      	nop
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	40023800 	.word	0x40023800
 800c730:	40021000 	.word	0x40021000

0800c734 <sniprintf>:
 800c734:	b40c      	push	{r2, r3}
 800c736:	b530      	push	{r4, r5, lr}
 800c738:	4b17      	ldr	r3, [pc, #92]	; (800c798 <sniprintf+0x64>)
 800c73a:	1e0c      	subs	r4, r1, #0
 800c73c:	681d      	ldr	r5, [r3, #0]
 800c73e:	b09d      	sub	sp, #116	; 0x74
 800c740:	da08      	bge.n	800c754 <sniprintf+0x20>
 800c742:	238b      	movs	r3, #139	; 0x8b
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c74a:	b01d      	add	sp, #116	; 0x74
 800c74c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c750:	b002      	add	sp, #8
 800c752:	4770      	bx	lr
 800c754:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c758:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c75c:	bf14      	ite	ne
 800c75e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c762:	4623      	moveq	r3, r4
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	9307      	str	r3, [sp, #28]
 800c768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c76c:	9002      	str	r0, [sp, #8]
 800c76e:	9006      	str	r0, [sp, #24]
 800c770:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c774:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c776:	ab21      	add	r3, sp, #132	; 0x84
 800c778:	a902      	add	r1, sp, #8
 800c77a:	4628      	mov	r0, r5
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	f000 f8a9 	bl	800c8d4 <_svfiprintf_r>
 800c782:	1c43      	adds	r3, r0, #1
 800c784:	bfbc      	itt	lt
 800c786:	238b      	movlt	r3, #139	; 0x8b
 800c788:	602b      	strlt	r3, [r5, #0]
 800c78a:	2c00      	cmp	r4, #0
 800c78c:	d0dd      	beq.n	800c74a <sniprintf+0x16>
 800c78e:	9b02      	ldr	r3, [sp, #8]
 800c790:	2200      	movs	r2, #0
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	e7d9      	b.n	800c74a <sniprintf+0x16>
 800c796:	bf00      	nop
 800c798:	2000019c 	.word	0x2000019c

0800c79c <memset>:
 800c79c:	4402      	add	r2, r0
 800c79e:	4603      	mov	r3, r0
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d100      	bne.n	800c7a6 <memset+0xa>
 800c7a4:	4770      	bx	lr
 800c7a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c7aa:	e7f9      	b.n	800c7a0 <memset+0x4>

0800c7ac <__errno>:
 800c7ac:	4b01      	ldr	r3, [pc, #4]	; (800c7b4 <__errno+0x8>)
 800c7ae:	6818      	ldr	r0, [r3, #0]
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	2000019c 	.word	0x2000019c

0800c7b8 <__libc_init_array>:
 800c7b8:	b570      	push	{r4, r5, r6, lr}
 800c7ba:	4d0d      	ldr	r5, [pc, #52]	; (800c7f0 <__libc_init_array+0x38>)
 800c7bc:	4c0d      	ldr	r4, [pc, #52]	; (800c7f4 <__libc_init_array+0x3c>)
 800c7be:	1b64      	subs	r4, r4, r5
 800c7c0:	10a4      	asrs	r4, r4, #2
 800c7c2:	2600      	movs	r6, #0
 800c7c4:	42a6      	cmp	r6, r4
 800c7c6:	d109      	bne.n	800c7dc <__libc_init_array+0x24>
 800c7c8:	4d0b      	ldr	r5, [pc, #44]	; (800c7f8 <__libc_init_array+0x40>)
 800c7ca:	4c0c      	ldr	r4, [pc, #48]	; (800c7fc <__libc_init_array+0x44>)
 800c7cc:	f000 fc6a 	bl	800d0a4 <_init>
 800c7d0:	1b64      	subs	r4, r4, r5
 800c7d2:	10a4      	asrs	r4, r4, #2
 800c7d4:	2600      	movs	r6, #0
 800c7d6:	42a6      	cmp	r6, r4
 800c7d8:	d105      	bne.n	800c7e6 <__libc_init_array+0x2e>
 800c7da:	bd70      	pop	{r4, r5, r6, pc}
 800c7dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7e0:	4798      	blx	r3
 800c7e2:	3601      	adds	r6, #1
 800c7e4:	e7ee      	b.n	800c7c4 <__libc_init_array+0xc>
 800c7e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ea:	4798      	blx	r3
 800c7ec:	3601      	adds	r6, #1
 800c7ee:	e7f2      	b.n	800c7d6 <__libc_init_array+0x1e>
 800c7f0:	0800dd64 	.word	0x0800dd64
 800c7f4:	0800dd64 	.word	0x0800dd64
 800c7f8:	0800dd64 	.word	0x0800dd64
 800c7fc:	0800dd68 	.word	0x0800dd68

0800c800 <__retarget_lock_acquire_recursive>:
 800c800:	4770      	bx	lr

0800c802 <__retarget_lock_release_recursive>:
 800c802:	4770      	bx	lr

0800c804 <memcpy>:
 800c804:	440a      	add	r2, r1
 800c806:	4291      	cmp	r1, r2
 800c808:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c80c:	d100      	bne.n	800c810 <memcpy+0xc>
 800c80e:	4770      	bx	lr
 800c810:	b510      	push	{r4, lr}
 800c812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c81a:	4291      	cmp	r1, r2
 800c81c:	d1f9      	bne.n	800c812 <memcpy+0xe>
 800c81e:	bd10      	pop	{r4, pc}

0800c820 <__ssputs_r>:
 800c820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c824:	688e      	ldr	r6, [r1, #8]
 800c826:	461f      	mov	r7, r3
 800c828:	42be      	cmp	r6, r7
 800c82a:	680b      	ldr	r3, [r1, #0]
 800c82c:	4682      	mov	sl, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	4690      	mov	r8, r2
 800c832:	d82c      	bhi.n	800c88e <__ssputs_r+0x6e>
 800c834:	898a      	ldrh	r2, [r1, #12]
 800c836:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c83a:	d026      	beq.n	800c88a <__ssputs_r+0x6a>
 800c83c:	6965      	ldr	r5, [r4, #20]
 800c83e:	6909      	ldr	r1, [r1, #16]
 800c840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c844:	eba3 0901 	sub.w	r9, r3, r1
 800c848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c84c:	1c7b      	adds	r3, r7, #1
 800c84e:	444b      	add	r3, r9
 800c850:	106d      	asrs	r5, r5, #1
 800c852:	429d      	cmp	r5, r3
 800c854:	bf38      	it	cc
 800c856:	461d      	movcc	r5, r3
 800c858:	0553      	lsls	r3, r2, #21
 800c85a:	d527      	bpl.n	800c8ac <__ssputs_r+0x8c>
 800c85c:	4629      	mov	r1, r5
 800c85e:	f000 f957 	bl	800cb10 <_malloc_r>
 800c862:	4606      	mov	r6, r0
 800c864:	b360      	cbz	r0, 800c8c0 <__ssputs_r+0xa0>
 800c866:	6921      	ldr	r1, [r4, #16]
 800c868:	464a      	mov	r2, r9
 800c86a:	f7ff ffcb 	bl	800c804 <memcpy>
 800c86e:	89a3      	ldrh	r3, [r4, #12]
 800c870:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c878:	81a3      	strh	r3, [r4, #12]
 800c87a:	6126      	str	r6, [r4, #16]
 800c87c:	6165      	str	r5, [r4, #20]
 800c87e:	444e      	add	r6, r9
 800c880:	eba5 0509 	sub.w	r5, r5, r9
 800c884:	6026      	str	r6, [r4, #0]
 800c886:	60a5      	str	r5, [r4, #8]
 800c888:	463e      	mov	r6, r7
 800c88a:	42be      	cmp	r6, r7
 800c88c:	d900      	bls.n	800c890 <__ssputs_r+0x70>
 800c88e:	463e      	mov	r6, r7
 800c890:	6820      	ldr	r0, [r4, #0]
 800c892:	4632      	mov	r2, r6
 800c894:	4641      	mov	r1, r8
 800c896:	f000 fb86 	bl	800cfa6 <memmove>
 800c89a:	68a3      	ldr	r3, [r4, #8]
 800c89c:	1b9b      	subs	r3, r3, r6
 800c89e:	60a3      	str	r3, [r4, #8]
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	4433      	add	r3, r6
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ac:	462a      	mov	r2, r5
 800c8ae:	f000 fb4b 	bl	800cf48 <_realloc_r>
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d1e0      	bne.n	800c87a <__ssputs_r+0x5a>
 800c8b8:	6921      	ldr	r1, [r4, #16]
 800c8ba:	4650      	mov	r0, sl
 800c8bc:	f000 fb9e 	bl	800cffc <_free_r>
 800c8c0:	230c      	movs	r3, #12
 800c8c2:	f8ca 3000 	str.w	r3, [sl]
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8cc:	81a3      	strh	r3, [r4, #12]
 800c8ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8d2:	e7e9      	b.n	800c8a8 <__ssputs_r+0x88>

0800c8d4 <_svfiprintf_r>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	4698      	mov	r8, r3
 800c8da:	898b      	ldrh	r3, [r1, #12]
 800c8dc:	061b      	lsls	r3, r3, #24
 800c8de:	b09d      	sub	sp, #116	; 0x74
 800c8e0:	4607      	mov	r7, r0
 800c8e2:	460d      	mov	r5, r1
 800c8e4:	4614      	mov	r4, r2
 800c8e6:	d50e      	bpl.n	800c906 <_svfiprintf_r+0x32>
 800c8e8:	690b      	ldr	r3, [r1, #16]
 800c8ea:	b963      	cbnz	r3, 800c906 <_svfiprintf_r+0x32>
 800c8ec:	2140      	movs	r1, #64	; 0x40
 800c8ee:	f000 f90f 	bl	800cb10 <_malloc_r>
 800c8f2:	6028      	str	r0, [r5, #0]
 800c8f4:	6128      	str	r0, [r5, #16]
 800c8f6:	b920      	cbnz	r0, 800c902 <_svfiprintf_r+0x2e>
 800c8f8:	230c      	movs	r3, #12
 800c8fa:	603b      	str	r3, [r7, #0]
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c900:	e0d0      	b.n	800caa4 <_svfiprintf_r+0x1d0>
 800c902:	2340      	movs	r3, #64	; 0x40
 800c904:	616b      	str	r3, [r5, #20]
 800c906:	2300      	movs	r3, #0
 800c908:	9309      	str	r3, [sp, #36]	; 0x24
 800c90a:	2320      	movs	r3, #32
 800c90c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c910:	f8cd 800c 	str.w	r8, [sp, #12]
 800c914:	2330      	movs	r3, #48	; 0x30
 800c916:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cabc <_svfiprintf_r+0x1e8>
 800c91a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c91e:	f04f 0901 	mov.w	r9, #1
 800c922:	4623      	mov	r3, r4
 800c924:	469a      	mov	sl, r3
 800c926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c92a:	b10a      	cbz	r2, 800c930 <_svfiprintf_r+0x5c>
 800c92c:	2a25      	cmp	r2, #37	; 0x25
 800c92e:	d1f9      	bne.n	800c924 <_svfiprintf_r+0x50>
 800c930:	ebba 0b04 	subs.w	fp, sl, r4
 800c934:	d00b      	beq.n	800c94e <_svfiprintf_r+0x7a>
 800c936:	465b      	mov	r3, fp
 800c938:	4622      	mov	r2, r4
 800c93a:	4629      	mov	r1, r5
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7ff ff6f 	bl	800c820 <__ssputs_r>
 800c942:	3001      	adds	r0, #1
 800c944:	f000 80a9 	beq.w	800ca9a <_svfiprintf_r+0x1c6>
 800c948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c94a:	445a      	add	r2, fp
 800c94c:	9209      	str	r2, [sp, #36]	; 0x24
 800c94e:	f89a 3000 	ldrb.w	r3, [sl]
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 80a1 	beq.w	800ca9a <_svfiprintf_r+0x1c6>
 800c958:	2300      	movs	r3, #0
 800c95a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c95e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c962:	f10a 0a01 	add.w	sl, sl, #1
 800c966:	9304      	str	r3, [sp, #16]
 800c968:	9307      	str	r3, [sp, #28]
 800c96a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c96e:	931a      	str	r3, [sp, #104]	; 0x68
 800c970:	4654      	mov	r4, sl
 800c972:	2205      	movs	r2, #5
 800c974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c978:	4850      	ldr	r0, [pc, #320]	; (800cabc <_svfiprintf_r+0x1e8>)
 800c97a:	f7f3 fc29 	bl	80001d0 <memchr>
 800c97e:	9a04      	ldr	r2, [sp, #16]
 800c980:	b9d8      	cbnz	r0, 800c9ba <_svfiprintf_r+0xe6>
 800c982:	06d0      	lsls	r0, r2, #27
 800c984:	bf44      	itt	mi
 800c986:	2320      	movmi	r3, #32
 800c988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c98c:	0711      	lsls	r1, r2, #28
 800c98e:	bf44      	itt	mi
 800c990:	232b      	movmi	r3, #43	; 0x2b
 800c992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c996:	f89a 3000 	ldrb.w	r3, [sl]
 800c99a:	2b2a      	cmp	r3, #42	; 0x2a
 800c99c:	d015      	beq.n	800c9ca <_svfiprintf_r+0xf6>
 800c99e:	9a07      	ldr	r2, [sp, #28]
 800c9a0:	4654      	mov	r4, sl
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	f04f 0c0a 	mov.w	ip, #10
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9ae:	3b30      	subs	r3, #48	; 0x30
 800c9b0:	2b09      	cmp	r3, #9
 800c9b2:	d94d      	bls.n	800ca50 <_svfiprintf_r+0x17c>
 800c9b4:	b1b0      	cbz	r0, 800c9e4 <_svfiprintf_r+0x110>
 800c9b6:	9207      	str	r2, [sp, #28]
 800c9b8:	e014      	b.n	800c9e4 <_svfiprintf_r+0x110>
 800c9ba:	eba0 0308 	sub.w	r3, r0, r8
 800c9be:	fa09 f303 	lsl.w	r3, r9, r3
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	9304      	str	r3, [sp, #16]
 800c9c6:	46a2      	mov	sl, r4
 800c9c8:	e7d2      	b.n	800c970 <_svfiprintf_r+0x9c>
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	1d19      	adds	r1, r3, #4
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	9103      	str	r1, [sp, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	bfbb      	ittet	lt
 800c9d6:	425b      	neglt	r3, r3
 800c9d8:	f042 0202 	orrlt.w	r2, r2, #2
 800c9dc:	9307      	strge	r3, [sp, #28]
 800c9de:	9307      	strlt	r3, [sp, #28]
 800c9e0:	bfb8      	it	lt
 800c9e2:	9204      	strlt	r2, [sp, #16]
 800c9e4:	7823      	ldrb	r3, [r4, #0]
 800c9e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c9e8:	d10c      	bne.n	800ca04 <_svfiprintf_r+0x130>
 800c9ea:	7863      	ldrb	r3, [r4, #1]
 800c9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ee:	d134      	bne.n	800ca5a <_svfiprintf_r+0x186>
 800c9f0:	9b03      	ldr	r3, [sp, #12]
 800c9f2:	1d1a      	adds	r2, r3, #4
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	9203      	str	r2, [sp, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	bfb8      	it	lt
 800c9fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca00:	3402      	adds	r4, #2
 800ca02:	9305      	str	r3, [sp, #20]
 800ca04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cacc <_svfiprintf_r+0x1f8>
 800ca08:	7821      	ldrb	r1, [r4, #0]
 800ca0a:	2203      	movs	r2, #3
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	f7f3 fbdf 	bl	80001d0 <memchr>
 800ca12:	b138      	cbz	r0, 800ca24 <_svfiprintf_r+0x150>
 800ca14:	9b04      	ldr	r3, [sp, #16]
 800ca16:	eba0 000a 	sub.w	r0, r0, sl
 800ca1a:	2240      	movs	r2, #64	; 0x40
 800ca1c:	4082      	lsls	r2, r0
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	3401      	adds	r4, #1
 800ca22:	9304      	str	r3, [sp, #16]
 800ca24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca28:	4825      	ldr	r0, [pc, #148]	; (800cac0 <_svfiprintf_r+0x1ec>)
 800ca2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca2e:	2206      	movs	r2, #6
 800ca30:	f7f3 fbce 	bl	80001d0 <memchr>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d038      	beq.n	800caaa <_svfiprintf_r+0x1d6>
 800ca38:	4b22      	ldr	r3, [pc, #136]	; (800cac4 <_svfiprintf_r+0x1f0>)
 800ca3a:	bb1b      	cbnz	r3, 800ca84 <_svfiprintf_r+0x1b0>
 800ca3c:	9b03      	ldr	r3, [sp, #12]
 800ca3e:	3307      	adds	r3, #7
 800ca40:	f023 0307 	bic.w	r3, r3, #7
 800ca44:	3308      	adds	r3, #8
 800ca46:	9303      	str	r3, [sp, #12]
 800ca48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca4a:	4433      	add	r3, r6
 800ca4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca4e:	e768      	b.n	800c922 <_svfiprintf_r+0x4e>
 800ca50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca54:	460c      	mov	r4, r1
 800ca56:	2001      	movs	r0, #1
 800ca58:	e7a6      	b.n	800c9a8 <_svfiprintf_r+0xd4>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	3401      	adds	r4, #1
 800ca5e:	9305      	str	r3, [sp, #20]
 800ca60:	4619      	mov	r1, r3
 800ca62:	f04f 0c0a 	mov.w	ip, #10
 800ca66:	4620      	mov	r0, r4
 800ca68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca6c:	3a30      	subs	r2, #48	; 0x30
 800ca6e:	2a09      	cmp	r2, #9
 800ca70:	d903      	bls.n	800ca7a <_svfiprintf_r+0x1a6>
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0c6      	beq.n	800ca04 <_svfiprintf_r+0x130>
 800ca76:	9105      	str	r1, [sp, #20]
 800ca78:	e7c4      	b.n	800ca04 <_svfiprintf_r+0x130>
 800ca7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca7e:	4604      	mov	r4, r0
 800ca80:	2301      	movs	r3, #1
 800ca82:	e7f0      	b.n	800ca66 <_svfiprintf_r+0x192>
 800ca84:	ab03      	add	r3, sp, #12
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	462a      	mov	r2, r5
 800ca8a:	4b0f      	ldr	r3, [pc, #60]	; (800cac8 <_svfiprintf_r+0x1f4>)
 800ca8c:	a904      	add	r1, sp, #16
 800ca8e:	4638      	mov	r0, r7
 800ca90:	f3af 8000 	nop.w
 800ca94:	1c42      	adds	r2, r0, #1
 800ca96:	4606      	mov	r6, r0
 800ca98:	d1d6      	bne.n	800ca48 <_svfiprintf_r+0x174>
 800ca9a:	89ab      	ldrh	r3, [r5, #12]
 800ca9c:	065b      	lsls	r3, r3, #25
 800ca9e:	f53f af2d 	bmi.w	800c8fc <_svfiprintf_r+0x28>
 800caa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caa4:	b01d      	add	sp, #116	; 0x74
 800caa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caaa:	ab03      	add	r3, sp, #12
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	462a      	mov	r2, r5
 800cab0:	4b05      	ldr	r3, [pc, #20]	; (800cac8 <_svfiprintf_r+0x1f4>)
 800cab2:	a904      	add	r1, sp, #16
 800cab4:	4638      	mov	r0, r7
 800cab6:	f000 f919 	bl	800ccec <_printf_i>
 800caba:	e7eb      	b.n	800ca94 <_svfiprintf_r+0x1c0>
 800cabc:	0800dd28 	.word	0x0800dd28
 800cac0:	0800dd32 	.word	0x0800dd32
 800cac4:	00000000 	.word	0x00000000
 800cac8:	0800c821 	.word	0x0800c821
 800cacc:	0800dd2e 	.word	0x0800dd2e

0800cad0 <sbrk_aligned>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	4e0e      	ldr	r6, [pc, #56]	; (800cb0c <sbrk_aligned+0x3c>)
 800cad4:	460c      	mov	r4, r1
 800cad6:	6831      	ldr	r1, [r6, #0]
 800cad8:	4605      	mov	r5, r0
 800cada:	b911      	cbnz	r1, 800cae2 <sbrk_aligned+0x12>
 800cadc:	f000 fa7e 	bl	800cfdc <_sbrk_r>
 800cae0:	6030      	str	r0, [r6, #0]
 800cae2:	4621      	mov	r1, r4
 800cae4:	4628      	mov	r0, r5
 800cae6:	f000 fa79 	bl	800cfdc <_sbrk_r>
 800caea:	1c43      	adds	r3, r0, #1
 800caec:	d00a      	beq.n	800cb04 <sbrk_aligned+0x34>
 800caee:	1cc4      	adds	r4, r0, #3
 800caf0:	f024 0403 	bic.w	r4, r4, #3
 800caf4:	42a0      	cmp	r0, r4
 800caf6:	d007      	beq.n	800cb08 <sbrk_aligned+0x38>
 800caf8:	1a21      	subs	r1, r4, r0
 800cafa:	4628      	mov	r0, r5
 800cafc:	f000 fa6e 	bl	800cfdc <_sbrk_r>
 800cb00:	3001      	adds	r0, #1
 800cb02:	d101      	bne.n	800cb08 <sbrk_aligned+0x38>
 800cb04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cb08:	4620      	mov	r0, r4
 800cb0a:	bd70      	pop	{r4, r5, r6, pc}
 800cb0c:	20005350 	.word	0x20005350

0800cb10 <_malloc_r>:
 800cb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb14:	1ccd      	adds	r5, r1, #3
 800cb16:	f025 0503 	bic.w	r5, r5, #3
 800cb1a:	3508      	adds	r5, #8
 800cb1c:	2d0c      	cmp	r5, #12
 800cb1e:	bf38      	it	cc
 800cb20:	250c      	movcc	r5, #12
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	4607      	mov	r7, r0
 800cb26:	db01      	blt.n	800cb2c <_malloc_r+0x1c>
 800cb28:	42a9      	cmp	r1, r5
 800cb2a:	d905      	bls.n	800cb38 <_malloc_r+0x28>
 800cb2c:	230c      	movs	r3, #12
 800cb2e:	603b      	str	r3, [r7, #0]
 800cb30:	2600      	movs	r6, #0
 800cb32:	4630      	mov	r0, r6
 800cb34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cc0c <_malloc_r+0xfc>
 800cb3c:	f000 f9f8 	bl	800cf30 <__malloc_lock>
 800cb40:	f8d8 3000 	ldr.w	r3, [r8]
 800cb44:	461c      	mov	r4, r3
 800cb46:	bb5c      	cbnz	r4, 800cba0 <_malloc_r+0x90>
 800cb48:	4629      	mov	r1, r5
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	f7ff ffc0 	bl	800cad0 <sbrk_aligned>
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	4604      	mov	r4, r0
 800cb54:	d155      	bne.n	800cc02 <_malloc_r+0xf2>
 800cb56:	f8d8 4000 	ldr.w	r4, [r8]
 800cb5a:	4626      	mov	r6, r4
 800cb5c:	2e00      	cmp	r6, #0
 800cb5e:	d145      	bne.n	800cbec <_malloc_r+0xdc>
 800cb60:	2c00      	cmp	r4, #0
 800cb62:	d048      	beq.n	800cbf6 <_malloc_r+0xe6>
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	4631      	mov	r1, r6
 800cb68:	4638      	mov	r0, r7
 800cb6a:	eb04 0903 	add.w	r9, r4, r3
 800cb6e:	f000 fa35 	bl	800cfdc <_sbrk_r>
 800cb72:	4581      	cmp	r9, r0
 800cb74:	d13f      	bne.n	800cbf6 <_malloc_r+0xe6>
 800cb76:	6821      	ldr	r1, [r4, #0]
 800cb78:	1a6d      	subs	r5, r5, r1
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	f7ff ffa7 	bl	800cad0 <sbrk_aligned>
 800cb82:	3001      	adds	r0, #1
 800cb84:	d037      	beq.n	800cbf6 <_malloc_r+0xe6>
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	442b      	add	r3, r5
 800cb8a:	6023      	str	r3, [r4, #0]
 800cb8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d038      	beq.n	800cc06 <_malloc_r+0xf6>
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	42a2      	cmp	r2, r4
 800cb98:	d12b      	bne.n	800cbf2 <_malloc_r+0xe2>
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	605a      	str	r2, [r3, #4]
 800cb9e:	e00f      	b.n	800cbc0 <_malloc_r+0xb0>
 800cba0:	6822      	ldr	r2, [r4, #0]
 800cba2:	1b52      	subs	r2, r2, r5
 800cba4:	d41f      	bmi.n	800cbe6 <_malloc_r+0xd6>
 800cba6:	2a0b      	cmp	r2, #11
 800cba8:	d917      	bls.n	800cbda <_malloc_r+0xca>
 800cbaa:	1961      	adds	r1, r4, r5
 800cbac:	42a3      	cmp	r3, r4
 800cbae:	6025      	str	r5, [r4, #0]
 800cbb0:	bf18      	it	ne
 800cbb2:	6059      	strne	r1, [r3, #4]
 800cbb4:	6863      	ldr	r3, [r4, #4]
 800cbb6:	bf08      	it	eq
 800cbb8:	f8c8 1000 	streq.w	r1, [r8]
 800cbbc:	5162      	str	r2, [r4, r5]
 800cbbe:	604b      	str	r3, [r1, #4]
 800cbc0:	4638      	mov	r0, r7
 800cbc2:	f104 060b 	add.w	r6, r4, #11
 800cbc6:	f000 f9b9 	bl	800cf3c <__malloc_unlock>
 800cbca:	f026 0607 	bic.w	r6, r6, #7
 800cbce:	1d23      	adds	r3, r4, #4
 800cbd0:	1af2      	subs	r2, r6, r3
 800cbd2:	d0ae      	beq.n	800cb32 <_malloc_r+0x22>
 800cbd4:	1b9b      	subs	r3, r3, r6
 800cbd6:	50a3      	str	r3, [r4, r2]
 800cbd8:	e7ab      	b.n	800cb32 <_malloc_r+0x22>
 800cbda:	42a3      	cmp	r3, r4
 800cbdc:	6862      	ldr	r2, [r4, #4]
 800cbde:	d1dd      	bne.n	800cb9c <_malloc_r+0x8c>
 800cbe0:	f8c8 2000 	str.w	r2, [r8]
 800cbe4:	e7ec      	b.n	800cbc0 <_malloc_r+0xb0>
 800cbe6:	4623      	mov	r3, r4
 800cbe8:	6864      	ldr	r4, [r4, #4]
 800cbea:	e7ac      	b.n	800cb46 <_malloc_r+0x36>
 800cbec:	4634      	mov	r4, r6
 800cbee:	6876      	ldr	r6, [r6, #4]
 800cbf0:	e7b4      	b.n	800cb5c <_malloc_r+0x4c>
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	e7cc      	b.n	800cb90 <_malloc_r+0x80>
 800cbf6:	230c      	movs	r3, #12
 800cbf8:	603b      	str	r3, [r7, #0]
 800cbfa:	4638      	mov	r0, r7
 800cbfc:	f000 f99e 	bl	800cf3c <__malloc_unlock>
 800cc00:	e797      	b.n	800cb32 <_malloc_r+0x22>
 800cc02:	6025      	str	r5, [r4, #0]
 800cc04:	e7dc      	b.n	800cbc0 <_malloc_r+0xb0>
 800cc06:	605b      	str	r3, [r3, #4]
 800cc08:	deff      	udf	#255	; 0xff
 800cc0a:	bf00      	nop
 800cc0c:	2000534c 	.word	0x2000534c

0800cc10 <_printf_common>:
 800cc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc14:	4616      	mov	r6, r2
 800cc16:	4699      	mov	r9, r3
 800cc18:	688a      	ldr	r2, [r1, #8]
 800cc1a:	690b      	ldr	r3, [r1, #16]
 800cc1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc20:	4293      	cmp	r3, r2
 800cc22:	bfb8      	it	lt
 800cc24:	4613      	movlt	r3, r2
 800cc26:	6033      	str	r3, [r6, #0]
 800cc28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	b10a      	cbz	r2, 800cc36 <_printf_common+0x26>
 800cc32:	3301      	adds	r3, #1
 800cc34:	6033      	str	r3, [r6, #0]
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	0699      	lsls	r1, r3, #26
 800cc3a:	bf42      	ittt	mi
 800cc3c:	6833      	ldrmi	r3, [r6, #0]
 800cc3e:	3302      	addmi	r3, #2
 800cc40:	6033      	strmi	r3, [r6, #0]
 800cc42:	6825      	ldr	r5, [r4, #0]
 800cc44:	f015 0506 	ands.w	r5, r5, #6
 800cc48:	d106      	bne.n	800cc58 <_printf_common+0x48>
 800cc4a:	f104 0a19 	add.w	sl, r4, #25
 800cc4e:	68e3      	ldr	r3, [r4, #12]
 800cc50:	6832      	ldr	r2, [r6, #0]
 800cc52:	1a9b      	subs	r3, r3, r2
 800cc54:	42ab      	cmp	r3, r5
 800cc56:	dc26      	bgt.n	800cca6 <_printf_common+0x96>
 800cc58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc5c:	1e13      	subs	r3, r2, #0
 800cc5e:	6822      	ldr	r2, [r4, #0]
 800cc60:	bf18      	it	ne
 800cc62:	2301      	movne	r3, #1
 800cc64:	0692      	lsls	r2, r2, #26
 800cc66:	d42b      	bmi.n	800ccc0 <_printf_common+0xb0>
 800cc68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc6c:	4649      	mov	r1, r9
 800cc6e:	4638      	mov	r0, r7
 800cc70:	47c0      	blx	r8
 800cc72:	3001      	adds	r0, #1
 800cc74:	d01e      	beq.n	800ccb4 <_printf_common+0xa4>
 800cc76:	6823      	ldr	r3, [r4, #0]
 800cc78:	6922      	ldr	r2, [r4, #16]
 800cc7a:	f003 0306 	and.w	r3, r3, #6
 800cc7e:	2b04      	cmp	r3, #4
 800cc80:	bf02      	ittt	eq
 800cc82:	68e5      	ldreq	r5, [r4, #12]
 800cc84:	6833      	ldreq	r3, [r6, #0]
 800cc86:	1aed      	subeq	r5, r5, r3
 800cc88:	68a3      	ldr	r3, [r4, #8]
 800cc8a:	bf0c      	ite	eq
 800cc8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc90:	2500      	movne	r5, #0
 800cc92:	4293      	cmp	r3, r2
 800cc94:	bfc4      	itt	gt
 800cc96:	1a9b      	subgt	r3, r3, r2
 800cc98:	18ed      	addgt	r5, r5, r3
 800cc9a:	2600      	movs	r6, #0
 800cc9c:	341a      	adds	r4, #26
 800cc9e:	42b5      	cmp	r5, r6
 800cca0:	d11a      	bne.n	800ccd8 <_printf_common+0xc8>
 800cca2:	2000      	movs	r0, #0
 800cca4:	e008      	b.n	800ccb8 <_printf_common+0xa8>
 800cca6:	2301      	movs	r3, #1
 800cca8:	4652      	mov	r2, sl
 800ccaa:	4649      	mov	r1, r9
 800ccac:	4638      	mov	r0, r7
 800ccae:	47c0      	blx	r8
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	d103      	bne.n	800ccbc <_printf_common+0xac>
 800ccb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccbc:	3501      	adds	r5, #1
 800ccbe:	e7c6      	b.n	800cc4e <_printf_common+0x3e>
 800ccc0:	18e1      	adds	r1, r4, r3
 800ccc2:	1c5a      	adds	r2, r3, #1
 800ccc4:	2030      	movs	r0, #48	; 0x30
 800ccc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccca:	4422      	add	r2, r4
 800cccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ccd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ccd4:	3302      	adds	r3, #2
 800ccd6:	e7c7      	b.n	800cc68 <_printf_common+0x58>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	4622      	mov	r2, r4
 800ccdc:	4649      	mov	r1, r9
 800ccde:	4638      	mov	r0, r7
 800cce0:	47c0      	blx	r8
 800cce2:	3001      	adds	r0, #1
 800cce4:	d0e6      	beq.n	800ccb4 <_printf_common+0xa4>
 800cce6:	3601      	adds	r6, #1
 800cce8:	e7d9      	b.n	800cc9e <_printf_common+0x8e>
	...

0800ccec <_printf_i>:
 800ccec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccf0:	7e0f      	ldrb	r7, [r1, #24]
 800ccf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ccf4:	2f78      	cmp	r7, #120	; 0x78
 800ccf6:	4691      	mov	r9, r2
 800ccf8:	4680      	mov	r8, r0
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	469a      	mov	sl, r3
 800ccfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd02:	d807      	bhi.n	800cd14 <_printf_i+0x28>
 800cd04:	2f62      	cmp	r7, #98	; 0x62
 800cd06:	d80a      	bhi.n	800cd1e <_printf_i+0x32>
 800cd08:	2f00      	cmp	r7, #0
 800cd0a:	f000 80d4 	beq.w	800ceb6 <_printf_i+0x1ca>
 800cd0e:	2f58      	cmp	r7, #88	; 0x58
 800cd10:	f000 80c0 	beq.w	800ce94 <_printf_i+0x1a8>
 800cd14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd1c:	e03a      	b.n	800cd94 <_printf_i+0xa8>
 800cd1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd22:	2b15      	cmp	r3, #21
 800cd24:	d8f6      	bhi.n	800cd14 <_printf_i+0x28>
 800cd26:	a101      	add	r1, pc, #4	; (adr r1, 800cd2c <_printf_i+0x40>)
 800cd28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd2c:	0800cd85 	.word	0x0800cd85
 800cd30:	0800cd99 	.word	0x0800cd99
 800cd34:	0800cd15 	.word	0x0800cd15
 800cd38:	0800cd15 	.word	0x0800cd15
 800cd3c:	0800cd15 	.word	0x0800cd15
 800cd40:	0800cd15 	.word	0x0800cd15
 800cd44:	0800cd99 	.word	0x0800cd99
 800cd48:	0800cd15 	.word	0x0800cd15
 800cd4c:	0800cd15 	.word	0x0800cd15
 800cd50:	0800cd15 	.word	0x0800cd15
 800cd54:	0800cd15 	.word	0x0800cd15
 800cd58:	0800ce9d 	.word	0x0800ce9d
 800cd5c:	0800cdc5 	.word	0x0800cdc5
 800cd60:	0800ce57 	.word	0x0800ce57
 800cd64:	0800cd15 	.word	0x0800cd15
 800cd68:	0800cd15 	.word	0x0800cd15
 800cd6c:	0800cebf 	.word	0x0800cebf
 800cd70:	0800cd15 	.word	0x0800cd15
 800cd74:	0800cdc5 	.word	0x0800cdc5
 800cd78:	0800cd15 	.word	0x0800cd15
 800cd7c:	0800cd15 	.word	0x0800cd15
 800cd80:	0800ce5f 	.word	0x0800ce5f
 800cd84:	682b      	ldr	r3, [r5, #0]
 800cd86:	1d1a      	adds	r2, r3, #4
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	602a      	str	r2, [r5, #0]
 800cd8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd94:	2301      	movs	r3, #1
 800cd96:	e09f      	b.n	800ced8 <_printf_i+0x1ec>
 800cd98:	6820      	ldr	r0, [r4, #0]
 800cd9a:	682b      	ldr	r3, [r5, #0]
 800cd9c:	0607      	lsls	r7, r0, #24
 800cd9e:	f103 0104 	add.w	r1, r3, #4
 800cda2:	6029      	str	r1, [r5, #0]
 800cda4:	d501      	bpl.n	800cdaa <_printf_i+0xbe>
 800cda6:	681e      	ldr	r6, [r3, #0]
 800cda8:	e003      	b.n	800cdb2 <_printf_i+0xc6>
 800cdaa:	0646      	lsls	r6, r0, #25
 800cdac:	d5fb      	bpl.n	800cda6 <_printf_i+0xba>
 800cdae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cdb2:	2e00      	cmp	r6, #0
 800cdb4:	da03      	bge.n	800cdbe <_printf_i+0xd2>
 800cdb6:	232d      	movs	r3, #45	; 0x2d
 800cdb8:	4276      	negs	r6, r6
 800cdba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdbe:	485a      	ldr	r0, [pc, #360]	; (800cf28 <_printf_i+0x23c>)
 800cdc0:	230a      	movs	r3, #10
 800cdc2:	e012      	b.n	800cdea <_printf_i+0xfe>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	6820      	ldr	r0, [r4, #0]
 800cdc8:	1d19      	adds	r1, r3, #4
 800cdca:	6029      	str	r1, [r5, #0]
 800cdcc:	0605      	lsls	r5, r0, #24
 800cdce:	d501      	bpl.n	800cdd4 <_printf_i+0xe8>
 800cdd0:	681e      	ldr	r6, [r3, #0]
 800cdd2:	e002      	b.n	800cdda <_printf_i+0xee>
 800cdd4:	0641      	lsls	r1, r0, #25
 800cdd6:	d5fb      	bpl.n	800cdd0 <_printf_i+0xe4>
 800cdd8:	881e      	ldrh	r6, [r3, #0]
 800cdda:	4853      	ldr	r0, [pc, #332]	; (800cf28 <_printf_i+0x23c>)
 800cddc:	2f6f      	cmp	r7, #111	; 0x6f
 800cdde:	bf0c      	ite	eq
 800cde0:	2308      	moveq	r3, #8
 800cde2:	230a      	movne	r3, #10
 800cde4:	2100      	movs	r1, #0
 800cde6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdea:	6865      	ldr	r5, [r4, #4]
 800cdec:	60a5      	str	r5, [r4, #8]
 800cdee:	2d00      	cmp	r5, #0
 800cdf0:	bfa2      	ittt	ge
 800cdf2:	6821      	ldrge	r1, [r4, #0]
 800cdf4:	f021 0104 	bicge.w	r1, r1, #4
 800cdf8:	6021      	strge	r1, [r4, #0]
 800cdfa:	b90e      	cbnz	r6, 800ce00 <_printf_i+0x114>
 800cdfc:	2d00      	cmp	r5, #0
 800cdfe:	d04b      	beq.n	800ce98 <_printf_i+0x1ac>
 800ce00:	4615      	mov	r5, r2
 800ce02:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce06:	fb03 6711 	mls	r7, r3, r1, r6
 800ce0a:	5dc7      	ldrb	r7, [r0, r7]
 800ce0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce10:	4637      	mov	r7, r6
 800ce12:	42bb      	cmp	r3, r7
 800ce14:	460e      	mov	r6, r1
 800ce16:	d9f4      	bls.n	800ce02 <_printf_i+0x116>
 800ce18:	2b08      	cmp	r3, #8
 800ce1a:	d10b      	bne.n	800ce34 <_printf_i+0x148>
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	07de      	lsls	r6, r3, #31
 800ce20:	d508      	bpl.n	800ce34 <_printf_i+0x148>
 800ce22:	6923      	ldr	r3, [r4, #16]
 800ce24:	6861      	ldr	r1, [r4, #4]
 800ce26:	4299      	cmp	r1, r3
 800ce28:	bfde      	ittt	le
 800ce2a:	2330      	movle	r3, #48	; 0x30
 800ce2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ce34:	1b52      	subs	r2, r2, r5
 800ce36:	6122      	str	r2, [r4, #16]
 800ce38:	f8cd a000 	str.w	sl, [sp]
 800ce3c:	464b      	mov	r3, r9
 800ce3e:	aa03      	add	r2, sp, #12
 800ce40:	4621      	mov	r1, r4
 800ce42:	4640      	mov	r0, r8
 800ce44:	f7ff fee4 	bl	800cc10 <_printf_common>
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d14a      	bne.n	800cee2 <_printf_i+0x1f6>
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce50:	b004      	add	sp, #16
 800ce52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	f043 0320 	orr.w	r3, r3, #32
 800ce5c:	6023      	str	r3, [r4, #0]
 800ce5e:	4833      	ldr	r0, [pc, #204]	; (800cf2c <_printf_i+0x240>)
 800ce60:	2778      	movs	r7, #120	; 0x78
 800ce62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce66:	6823      	ldr	r3, [r4, #0]
 800ce68:	6829      	ldr	r1, [r5, #0]
 800ce6a:	061f      	lsls	r7, r3, #24
 800ce6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce70:	d402      	bmi.n	800ce78 <_printf_i+0x18c>
 800ce72:	065f      	lsls	r7, r3, #25
 800ce74:	bf48      	it	mi
 800ce76:	b2b6      	uxthmi	r6, r6
 800ce78:	07df      	lsls	r7, r3, #31
 800ce7a:	bf48      	it	mi
 800ce7c:	f043 0320 	orrmi.w	r3, r3, #32
 800ce80:	6029      	str	r1, [r5, #0]
 800ce82:	bf48      	it	mi
 800ce84:	6023      	strmi	r3, [r4, #0]
 800ce86:	b91e      	cbnz	r6, 800ce90 <_printf_i+0x1a4>
 800ce88:	6823      	ldr	r3, [r4, #0]
 800ce8a:	f023 0320 	bic.w	r3, r3, #32
 800ce8e:	6023      	str	r3, [r4, #0]
 800ce90:	2310      	movs	r3, #16
 800ce92:	e7a7      	b.n	800cde4 <_printf_i+0xf8>
 800ce94:	4824      	ldr	r0, [pc, #144]	; (800cf28 <_printf_i+0x23c>)
 800ce96:	e7e4      	b.n	800ce62 <_printf_i+0x176>
 800ce98:	4615      	mov	r5, r2
 800ce9a:	e7bd      	b.n	800ce18 <_printf_i+0x12c>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	6826      	ldr	r6, [r4, #0]
 800cea0:	6961      	ldr	r1, [r4, #20]
 800cea2:	1d18      	adds	r0, r3, #4
 800cea4:	6028      	str	r0, [r5, #0]
 800cea6:	0635      	lsls	r5, r6, #24
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	d501      	bpl.n	800ceb0 <_printf_i+0x1c4>
 800ceac:	6019      	str	r1, [r3, #0]
 800ceae:	e002      	b.n	800ceb6 <_printf_i+0x1ca>
 800ceb0:	0670      	lsls	r0, r6, #25
 800ceb2:	d5fb      	bpl.n	800ceac <_printf_i+0x1c0>
 800ceb4:	8019      	strh	r1, [r3, #0]
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	6123      	str	r3, [r4, #16]
 800ceba:	4615      	mov	r5, r2
 800cebc:	e7bc      	b.n	800ce38 <_printf_i+0x14c>
 800cebe:	682b      	ldr	r3, [r5, #0]
 800cec0:	1d1a      	adds	r2, r3, #4
 800cec2:	602a      	str	r2, [r5, #0]
 800cec4:	681d      	ldr	r5, [r3, #0]
 800cec6:	6862      	ldr	r2, [r4, #4]
 800cec8:	2100      	movs	r1, #0
 800ceca:	4628      	mov	r0, r5
 800cecc:	f7f3 f980 	bl	80001d0 <memchr>
 800ced0:	b108      	cbz	r0, 800ced6 <_printf_i+0x1ea>
 800ced2:	1b40      	subs	r0, r0, r5
 800ced4:	6060      	str	r0, [r4, #4]
 800ced6:	6863      	ldr	r3, [r4, #4]
 800ced8:	6123      	str	r3, [r4, #16]
 800ceda:	2300      	movs	r3, #0
 800cedc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cee0:	e7aa      	b.n	800ce38 <_printf_i+0x14c>
 800cee2:	6923      	ldr	r3, [r4, #16]
 800cee4:	462a      	mov	r2, r5
 800cee6:	4649      	mov	r1, r9
 800cee8:	4640      	mov	r0, r8
 800ceea:	47d0      	blx	sl
 800ceec:	3001      	adds	r0, #1
 800ceee:	d0ad      	beq.n	800ce4c <_printf_i+0x160>
 800cef0:	6823      	ldr	r3, [r4, #0]
 800cef2:	079b      	lsls	r3, r3, #30
 800cef4:	d413      	bmi.n	800cf1e <_printf_i+0x232>
 800cef6:	68e0      	ldr	r0, [r4, #12]
 800cef8:	9b03      	ldr	r3, [sp, #12]
 800cefa:	4298      	cmp	r0, r3
 800cefc:	bfb8      	it	lt
 800cefe:	4618      	movlt	r0, r3
 800cf00:	e7a6      	b.n	800ce50 <_printf_i+0x164>
 800cf02:	2301      	movs	r3, #1
 800cf04:	4632      	mov	r2, r6
 800cf06:	4649      	mov	r1, r9
 800cf08:	4640      	mov	r0, r8
 800cf0a:	47d0      	blx	sl
 800cf0c:	3001      	adds	r0, #1
 800cf0e:	d09d      	beq.n	800ce4c <_printf_i+0x160>
 800cf10:	3501      	adds	r5, #1
 800cf12:	68e3      	ldr	r3, [r4, #12]
 800cf14:	9903      	ldr	r1, [sp, #12]
 800cf16:	1a5b      	subs	r3, r3, r1
 800cf18:	42ab      	cmp	r3, r5
 800cf1a:	dcf2      	bgt.n	800cf02 <_printf_i+0x216>
 800cf1c:	e7eb      	b.n	800cef6 <_printf_i+0x20a>
 800cf1e:	2500      	movs	r5, #0
 800cf20:	f104 0619 	add.w	r6, r4, #25
 800cf24:	e7f5      	b.n	800cf12 <_printf_i+0x226>
 800cf26:	bf00      	nop
 800cf28:	0800dd39 	.word	0x0800dd39
 800cf2c:	0800dd4a 	.word	0x0800dd4a

0800cf30 <__malloc_lock>:
 800cf30:	4801      	ldr	r0, [pc, #4]	; (800cf38 <__malloc_lock+0x8>)
 800cf32:	f7ff bc65 	b.w	800c800 <__retarget_lock_acquire_recursive>
 800cf36:	bf00      	nop
 800cf38:	20005348 	.word	0x20005348

0800cf3c <__malloc_unlock>:
 800cf3c:	4801      	ldr	r0, [pc, #4]	; (800cf44 <__malloc_unlock+0x8>)
 800cf3e:	f7ff bc60 	b.w	800c802 <__retarget_lock_release_recursive>
 800cf42:	bf00      	nop
 800cf44:	20005348 	.word	0x20005348

0800cf48 <_realloc_r>:
 800cf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4c:	4680      	mov	r8, r0
 800cf4e:	4614      	mov	r4, r2
 800cf50:	460e      	mov	r6, r1
 800cf52:	b921      	cbnz	r1, 800cf5e <_realloc_r+0x16>
 800cf54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf58:	4611      	mov	r1, r2
 800cf5a:	f7ff bdd9 	b.w	800cb10 <_malloc_r>
 800cf5e:	b92a      	cbnz	r2, 800cf6c <_realloc_r+0x24>
 800cf60:	f000 f84c 	bl	800cffc <_free_r>
 800cf64:	4625      	mov	r5, r4
 800cf66:	4628      	mov	r0, r5
 800cf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf6c:	f000 f892 	bl	800d094 <_malloc_usable_size_r>
 800cf70:	4284      	cmp	r4, r0
 800cf72:	4607      	mov	r7, r0
 800cf74:	d802      	bhi.n	800cf7c <_realloc_r+0x34>
 800cf76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf7a:	d812      	bhi.n	800cfa2 <_realloc_r+0x5a>
 800cf7c:	4621      	mov	r1, r4
 800cf7e:	4640      	mov	r0, r8
 800cf80:	f7ff fdc6 	bl	800cb10 <_malloc_r>
 800cf84:	4605      	mov	r5, r0
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d0ed      	beq.n	800cf66 <_realloc_r+0x1e>
 800cf8a:	42bc      	cmp	r4, r7
 800cf8c:	4622      	mov	r2, r4
 800cf8e:	4631      	mov	r1, r6
 800cf90:	bf28      	it	cs
 800cf92:	463a      	movcs	r2, r7
 800cf94:	f7ff fc36 	bl	800c804 <memcpy>
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	f000 f82e 	bl	800cffc <_free_r>
 800cfa0:	e7e1      	b.n	800cf66 <_realloc_r+0x1e>
 800cfa2:	4635      	mov	r5, r6
 800cfa4:	e7df      	b.n	800cf66 <_realloc_r+0x1e>

0800cfa6 <memmove>:
 800cfa6:	4288      	cmp	r0, r1
 800cfa8:	b510      	push	{r4, lr}
 800cfaa:	eb01 0402 	add.w	r4, r1, r2
 800cfae:	d902      	bls.n	800cfb6 <memmove+0x10>
 800cfb0:	4284      	cmp	r4, r0
 800cfb2:	4623      	mov	r3, r4
 800cfb4:	d807      	bhi.n	800cfc6 <memmove+0x20>
 800cfb6:	1e43      	subs	r3, r0, #1
 800cfb8:	42a1      	cmp	r1, r4
 800cfba:	d008      	beq.n	800cfce <memmove+0x28>
 800cfbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfc4:	e7f8      	b.n	800cfb8 <memmove+0x12>
 800cfc6:	4402      	add	r2, r0
 800cfc8:	4601      	mov	r1, r0
 800cfca:	428a      	cmp	r2, r1
 800cfcc:	d100      	bne.n	800cfd0 <memmove+0x2a>
 800cfce:	bd10      	pop	{r4, pc}
 800cfd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfd4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfd8:	e7f7      	b.n	800cfca <memmove+0x24>
	...

0800cfdc <_sbrk_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4d06      	ldr	r5, [pc, #24]	; (800cff8 <_sbrk_r+0x1c>)
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	4608      	mov	r0, r1
 800cfe6:	602b      	str	r3, [r5, #0]
 800cfe8:	f7f7 fc2e 	bl	8004848 <_sbrk>
 800cfec:	1c43      	adds	r3, r0, #1
 800cfee:	d102      	bne.n	800cff6 <_sbrk_r+0x1a>
 800cff0:	682b      	ldr	r3, [r5, #0]
 800cff2:	b103      	cbz	r3, 800cff6 <_sbrk_r+0x1a>
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	bd38      	pop	{r3, r4, r5, pc}
 800cff8:	20005354 	.word	0x20005354

0800cffc <_free_r>:
 800cffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cffe:	2900      	cmp	r1, #0
 800d000:	d044      	beq.n	800d08c <_free_r+0x90>
 800d002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d006:	9001      	str	r0, [sp, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f1a1 0404 	sub.w	r4, r1, #4
 800d00e:	bfb8      	it	lt
 800d010:	18e4      	addlt	r4, r4, r3
 800d012:	f7ff ff8d 	bl	800cf30 <__malloc_lock>
 800d016:	4a1e      	ldr	r2, [pc, #120]	; (800d090 <_free_r+0x94>)
 800d018:	9801      	ldr	r0, [sp, #4]
 800d01a:	6813      	ldr	r3, [r2, #0]
 800d01c:	b933      	cbnz	r3, 800d02c <_free_r+0x30>
 800d01e:	6063      	str	r3, [r4, #4]
 800d020:	6014      	str	r4, [r2, #0]
 800d022:	b003      	add	sp, #12
 800d024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d028:	f7ff bf88 	b.w	800cf3c <__malloc_unlock>
 800d02c:	42a3      	cmp	r3, r4
 800d02e:	d908      	bls.n	800d042 <_free_r+0x46>
 800d030:	6825      	ldr	r5, [r4, #0]
 800d032:	1961      	adds	r1, r4, r5
 800d034:	428b      	cmp	r3, r1
 800d036:	bf01      	itttt	eq
 800d038:	6819      	ldreq	r1, [r3, #0]
 800d03a:	685b      	ldreq	r3, [r3, #4]
 800d03c:	1949      	addeq	r1, r1, r5
 800d03e:	6021      	streq	r1, [r4, #0]
 800d040:	e7ed      	b.n	800d01e <_free_r+0x22>
 800d042:	461a      	mov	r2, r3
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	b10b      	cbz	r3, 800d04c <_free_r+0x50>
 800d048:	42a3      	cmp	r3, r4
 800d04a:	d9fa      	bls.n	800d042 <_free_r+0x46>
 800d04c:	6811      	ldr	r1, [r2, #0]
 800d04e:	1855      	adds	r5, r2, r1
 800d050:	42a5      	cmp	r5, r4
 800d052:	d10b      	bne.n	800d06c <_free_r+0x70>
 800d054:	6824      	ldr	r4, [r4, #0]
 800d056:	4421      	add	r1, r4
 800d058:	1854      	adds	r4, r2, r1
 800d05a:	42a3      	cmp	r3, r4
 800d05c:	6011      	str	r1, [r2, #0]
 800d05e:	d1e0      	bne.n	800d022 <_free_r+0x26>
 800d060:	681c      	ldr	r4, [r3, #0]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	6053      	str	r3, [r2, #4]
 800d066:	440c      	add	r4, r1
 800d068:	6014      	str	r4, [r2, #0]
 800d06a:	e7da      	b.n	800d022 <_free_r+0x26>
 800d06c:	d902      	bls.n	800d074 <_free_r+0x78>
 800d06e:	230c      	movs	r3, #12
 800d070:	6003      	str	r3, [r0, #0]
 800d072:	e7d6      	b.n	800d022 <_free_r+0x26>
 800d074:	6825      	ldr	r5, [r4, #0]
 800d076:	1961      	adds	r1, r4, r5
 800d078:	428b      	cmp	r3, r1
 800d07a:	bf04      	itt	eq
 800d07c:	6819      	ldreq	r1, [r3, #0]
 800d07e:	685b      	ldreq	r3, [r3, #4]
 800d080:	6063      	str	r3, [r4, #4]
 800d082:	bf04      	itt	eq
 800d084:	1949      	addeq	r1, r1, r5
 800d086:	6021      	streq	r1, [r4, #0]
 800d088:	6054      	str	r4, [r2, #4]
 800d08a:	e7ca      	b.n	800d022 <_free_r+0x26>
 800d08c:	b003      	add	sp, #12
 800d08e:	bd30      	pop	{r4, r5, pc}
 800d090:	2000534c 	.word	0x2000534c

0800d094 <_malloc_usable_size_r>:
 800d094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d098:	1f18      	subs	r0, r3, #4
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	bfbc      	itt	lt
 800d09e:	580b      	ldrlt	r3, [r1, r0]
 800d0a0:	18c0      	addlt	r0, r0, r3
 800d0a2:	4770      	bx	lr

0800d0a4 <_init>:
 800d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a6:	bf00      	nop
 800d0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0aa:	bc08      	pop	{r3}
 800d0ac:	469e      	mov	lr, r3
 800d0ae:	4770      	bx	lr

0800d0b0 <_fini>:
 800d0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b2:	bf00      	nop
 800d0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0b6:	bc08      	pop	{r3}
 800d0b8:	469e      	mov	lr, r3
 800d0ba:	4770      	bx	lr
