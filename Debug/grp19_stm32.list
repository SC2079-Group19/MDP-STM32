
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fddc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0800ff6c  0800ff6c  0001ff6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cf0  08010cf0  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  08010cf0  08010cf0  00020cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cf8  08010cf8  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cf8  08010cf8  00020cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cfc  08010cfc  00020cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08010d00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a4  2**0
                  CONTENTS
 10 .bss          000052c0  200001a4  200001a4  000301a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005464  20005464  000301a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dfd9  00000000  00000000  00030217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ebe  00000000  00000000  0004e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b28  00000000  00000000  000520b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000155d  00000000  00000000  00053bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000056cc  00000000  00000000  00055135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f7b6  00000000  00000000  0005a801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e98ce  00000000  00000000  00079fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a74  00000000  00000000  00163888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0016b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff54 	.word	0x0800ff54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	0800ff54 	.word	0x0800ff54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f005 ff49 	bl	8006d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f9a5 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fd3f 	bl	8001988 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fd13 	bl	8001934 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 faa1 	bl	8001454 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fc65 	bl	80017e0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fb69 	bl	80015ec <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 fac9 	bl	80014b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1e:	f000 fbb9 	bl	8001694 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f22:	f000 fc27 	bl	8001774 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000f26:	f000 f9f1 	bl	800130c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f2a:	f000 fa41 	bl	80013b0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f2e:	f00e facd 	bl	800f4cc <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f32:	2300      	movs	r3, #0
 8000f34:	2203      	movs	r2, #3
 8000f36:	2100      	movs	r1, #0
 8000f38:	4880      	ldr	r0, [pc, #512]	; (800113c <main+0x244>)
 8000f3a:	f00d fff0 	bl	800ef1e <ICM20948_init>

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f3e:	210c      	movs	r1, #12
 8000f40:	487f      	ldr	r0, [pc, #508]	; (8001140 <main+0x248>)
 8000f42:	f008 fcab 	bl	800989c <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	487e      	ldr	r0, [pc, #504]	; (8001144 <main+0x24c>)
 8000f4a:	f008 fca7 	bl	800989c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	487c      	ldr	r0, [pc, #496]	; (8001144 <main+0x24c>)
 8000f52:	f008 fca3 	bl	800989c <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f56:	213c      	movs	r1, #60	; 0x3c
 8000f58:	487b      	ldr	r0, [pc, #492]	; (8001148 <main+0x250>)
 8000f5a:	f009 f83d 	bl	8009fd8 <HAL_TIM_Encoder_Start>

  // uart
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000f5e:	4b7b      	ldr	r3, [pc, #492]	; (800114c <main+0x254>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	497a      	ldr	r1, [pc, #488]	; (8001150 <main+0x258>)
 8000f68:	487a      	ldr	r0, [pc, #488]	; (8001154 <main+0x25c>)
 8000f6a:	f00a fa4e 	bl	800b40a <HAL_UART_Receive_IT>

  // ultrasonic
  HAL_TIM_Base_Start(&htim6);
 8000f6e:	487a      	ldr	r0, [pc, #488]	; (8001158 <main+0x260>)
 8000f70:	f008 fb62 	bl	8009638 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f74:	2104      	movs	r1, #4
 8000f76:	4879      	ldr	r0, [pc, #484]	; (800115c <main+0x264>)
 8000f78:	f008 fdb2 	bl	8009ae0 <HAL_TIM_IC_Start_IT>

  // IR
  // HAL_ADC_Start(&hadc1);
  // HAL_ADC_Start(&hadc2);

  __RESET_SERVO_TURN(&htim1);
 8000f7c:	4b70      	ldr	r3, [pc, #448]	; (8001140 <main+0x248>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2291      	movs	r2, #145	; 0x91
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
 8000f84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f88:	f005 ff46 	bl	8006e18 <HAL_Delay>

  // command queue initialization
  curCmd.index = 100;
 8000f8c:	4b74      	ldr	r3, [pc, #464]	; (8001160 <main+0x268>)
 8000f8e:	2264      	movs	r2, #100	; 0x64
 8000f90:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f92:	4b73      	ldr	r3, [pc, #460]	; (8001160 <main+0x268>)
 8000f94:	220a      	movs	r2, #10
 8000f96:	805a      	strh	r2, [r3, #2]

  cmdQ.head = 0;
 8000f98:	4b72      	ldr	r3, [pc, #456]	; (8001164 <main+0x26c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
  cmdQ.tail = 0;
 8000f9e:	4b71      	ldr	r3, [pc, #452]	; (8001164 <main+0x26c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	705a      	strb	r2, [r3, #1]
  cmdQ.size = CMD_BUFFER_SIZE;
 8000fa4:	4b70      	ldr	r3, [pc, #448]	; (8001168 <main+0x270>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b6e      	ldr	r3, [pc, #440]	; (8001164 <main+0x26c>)
 8000faa:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	e00c      	b.n	8000fcc <main+0xd4>
  {
    Command cmd;
    cmd.index = 100;
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	807b      	strh	r3, [r7, #2]
    cmdQ.buffer[i] = cmd;
 8000fba:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <main+0x26c>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b66      	ldr	r3, [pc, #408]	; (8001168 <main+0x270>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	dbec      	blt.n	8000fb2 <main+0xba>
  }
  PIDConfigInit(&pidTSlow, 2.1, 0.045, 0.8);
 8000fd8:	ed9f 1a64 	vldr	s2, [pc, #400]	; 800116c <main+0x274>
 8000fdc:	eddf 0a64 	vldr	s1, [pc, #400]	; 8001170 <main+0x278>
 8000fe0:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8001174 <main+0x27c>
 8000fe4:	4864      	ldr	r0, [pc, #400]	; (8001178 <main+0x280>)
 8000fe6:	f001 fac7 	bl	8002578 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.1, 0.045, 0.8);
 8000fea:	ed9f 1a60 	vldr	s2, [pc, #384]	; 800116c <main+0x274>
 8000fee:	eddf 0a60 	vldr	s1, [pc, #384]	; 8001170 <main+0x278>
 8000ff2:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8001174 <main+0x27c>
 8000ff6:	4861      	ldr	r0, [pc, #388]	; (800117c <main+0x284>)
 8000ff8:	f001 fabe 	bl	8002578 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.1, 0.05, 0.3);
 8000ffc:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8001180 <main+0x288>
 8001000:	eddf 0a60 	vldr	s1, [pc, #384]	; 8001184 <main+0x28c>
 8001004:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8001188 <main+0x290>
 8001008:	4860      	ldr	r0, [pc, #384]	; (800118c <main+0x294>)
 800100a:	f001 fab5 	bl	8002578 <PIDConfigInit>
  PIDConfigInit(&pidZoomZoom, 0.6, 0.05, 0.2);
 800100e:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8001190 <main+0x298>
 8001012:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8001184 <main+0x28c>
 8001016:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8001194 <main+0x29c>
 800101a:	485f      	ldr	r0, [pc, #380]	; (8001198 <main+0x2a0>)
 800101c:	f001 faac 	bl	8002578 <PIDConfigInit>

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <main+0x254>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	4949      	ldr	r1, [pc, #292]	; (8001150 <main+0x258>)
 800102a:	484a      	ldr	r0, [pc, #296]	; (8001154 <main+0x25c>)
 800102c:	f00a f9ed 	bl	800b40a <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <main+0x248>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2291      	movs	r2, #145	; 0x91
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
 8001038:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800103c:	f005 feec 	bl	8006e18 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001040:	f00b f9c0 	bl	800c3c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 8001044:	4a55      	ldr	r2, [pc, #340]	; (800119c <main+0x2a4>)
 8001046:	2100      	movs	r1, #0
 8001048:	4855      	ldr	r0, [pc, #340]	; (80011a0 <main+0x2a8>)
 800104a:	f00b fa05 	bl	800c458 <osThreadNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a54      	ldr	r2, [pc, #336]	; (80011a4 <main+0x2ac>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 8001054:	4a54      	ldr	r2, [pc, #336]	; (80011a8 <main+0x2b0>)
 8001056:	2100      	movs	r1, #0
 8001058:	4854      	ldr	r0, [pc, #336]	; (80011ac <main+0x2b4>)
 800105a:	f00b f9fd 	bl	800c458 <osThreadNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a53      	ldr	r2, [pc, #332]	; (80011b0 <main+0x2b8>)
 8001062:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 8001064:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <main+0x2bc>)
 8001066:	2100      	movs	r1, #0
 8001068:	4853      	ldr	r0, [pc, #332]	; (80011b8 <main+0x2c0>)
 800106a:	f00b f9f5 	bl	800c458 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a52      	ldr	r2, [pc, #328]	; (80011bc <main+0x2c4>)
 8001072:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 8001074:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <main+0x2c8>)
 8001076:	2100      	movs	r1, #0
 8001078:	4852      	ldr	r0, [pc, #328]	; (80011c4 <main+0x2cc>)
 800107a:	f00b f9ed 	bl	800c458 <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a51      	ldr	r2, [pc, #324]	; (80011c8 <main+0x2d0>)
 8001082:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001084:	4a51      	ldr	r2, [pc, #324]	; (80011cc <main+0x2d4>)
 8001086:	2100      	movs	r1, #0
 8001088:	4851      	ldr	r0, [pc, #324]	; (80011d0 <main+0x2d8>)
 800108a:	f00b f9e5 	bl	800c458 <osThreadNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <main+0x2dc>)
 8001092:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 8001094:	4a50      	ldr	r2, [pc, #320]	; (80011d8 <main+0x2e0>)
 8001096:	2100      	movs	r1, #0
 8001098:	4850      	ldr	r0, [pc, #320]	; (80011dc <main+0x2e4>)
 800109a:	f00b f9dd 	bl	800c458 <osThreadNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <main+0x2e8>)
 80010a2:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 80010a4:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <main+0x2ec>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	484f      	ldr	r0, [pc, #316]	; (80011e8 <main+0x2f0>)
 80010aa:	f00b f9d5 	bl	800c458 <osThreadNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a4e      	ldr	r2, [pc, #312]	; (80011ec <main+0x2f4>)
 80010b2:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 80010b4:	4a4e      	ldr	r2, [pc, #312]	; (80011f0 <main+0x2f8>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	484e      	ldr	r0, [pc, #312]	; (80011f4 <main+0x2fc>)
 80010ba:	f00b f9cd 	bl	800c458 <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a4d      	ldr	r2, [pc, #308]	; (80011f8 <main+0x300>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80010c4:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <main+0x304>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	484d      	ldr	r0, [pc, #308]	; (8001200 <main+0x308>)
 80010ca:	f00b f9c5 	bl	800c458 <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a4c      	ldr	r2, [pc, #304]	; (8001204 <main+0x30c>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80010d4:	4a4c      	ldr	r2, [pc, #304]	; (8001208 <main+0x310>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	484c      	ldr	r0, [pc, #304]	; (800120c <main+0x314>)
 80010da:	f00b f9bd 	bl	800c458 <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <main+0x318>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* creation of turnATask */
  turnATaskHandle = osThreadNew(runTurnATask, NULL, &turnATask_attributes);
 80010e4:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <main+0x31c>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	484b      	ldr	r0, [pc, #300]	; (8001218 <main+0x320>)
 80010ea:	f00b f9b5 	bl	800c458 <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a4a      	ldr	r2, [pc, #296]	; (800121c <main+0x324>)
 80010f2:	6013      	str	r3, [r2, #0]

  /* creation of turnBTask */
  turnBTaskHandle = osThreadNew(runTurnBTask, NULL, &turnBTask_attributes);
 80010f4:	4a4a      	ldr	r2, [pc, #296]	; (8001220 <main+0x328>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	484a      	ldr	r0, [pc, #296]	; (8001224 <main+0x32c>)
 80010fa:	f00b f9ad 	bl	800c458 <osThreadNew>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a49      	ldr	r2, [pc, #292]	; (8001228 <main+0x330>)
 8001102:	6013      	str	r3, [r2, #0]

  /* creation of GHTask */
  GHTaskHandle = osThreadNew(runGHTask, NULL, &GHTask_attributes);
 8001104:	4a49      	ldr	r2, [pc, #292]	; (800122c <main+0x334>)
 8001106:	2100      	movs	r1, #0
 8001108:	4849      	ldr	r0, [pc, #292]	; (8001230 <main+0x338>)
 800110a:	f00b f9a5 	bl	800c458 <osThreadNew>
 800110e:	4603      	mov	r3, r0
 8001110:	4a48      	ldr	r2, [pc, #288]	; (8001234 <main+0x33c>)
 8001112:	6013      	str	r3, [r2, #0]

  /* creation of AMTask */
  AMTaskHandle = osThreadNew(runAMTask, NULL, &AMTask_attributes);
 8001114:	4a48      	ldr	r2, [pc, #288]	; (8001238 <main+0x340>)
 8001116:	2100      	movs	r1, #0
 8001118:	4848      	ldr	r0, [pc, #288]	; (800123c <main+0x344>)
 800111a:	f00b f99d 	bl	800c458 <osThreadNew>
 800111e:	4603      	mov	r3, r0
 8001120:	4a47      	ldr	r2, [pc, #284]	; (8001240 <main+0x348>)
 8001122:	6013      	str	r3, [r2, #0]

  /* creation of DZTask */
  DZTaskHandle = osThreadNew(runDZTask, NULL, &DZTask_attributes);
 8001124:	4a47      	ldr	r2, [pc, #284]	; (8001244 <main+0x34c>)
 8001126:	2100      	movs	r1, #0
 8001128:	4847      	ldr	r0, [pc, #284]	; (8001248 <main+0x350>)
 800112a:	f00b f995 	bl	800c458 <osThreadNew>
 800112e:	4603      	mov	r3, r0
 8001130:	4a46      	ldr	r2, [pc, #280]	; (800124c <main+0x354>)
 8001132:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001134:	f00b f96a 	bl	800c40c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001138:	e7fe      	b.n	8001138 <main+0x240>
 800113a:	bf00      	nop
 800113c:	20000250 	.word	0x20000250
 8001140:	200002a4 	.word	0x200002a4
 8001144:	200003c4 	.word	0x200003c4
 8001148:	200002ec 	.word	0x200002ec
 800114c:	20000000 	.word	0x20000000
 8001150:	2000048c 	.word	0x2000048c
 8001154:	2000040c 	.word	0x2000040c
 8001158:	2000037c 	.word	0x2000037c
 800115c:	20000334 	.word	0x20000334
 8001160:	200004cc 	.word	0x200004cc
 8001164:	20000498 	.word	0x20000498
 8001168:	20000001 	.word	0x20000001
 800116c:	3f4ccccd 	.word	0x3f4ccccd
 8001170:	3d3851ec 	.word	0x3d3851ec
 8001174:	40066666 	.word	0x40066666
 8001178:	20000518 	.word	0x20000518
 800117c:	20000504 	.word	0x20000504
 8001180:	3e99999a 	.word	0x3e99999a
 8001184:	3d4ccccd 	.word	0x3d4ccccd
 8001188:	3f8ccccd 	.word	0x3f8ccccd
 800118c:	2000052c 	.word	0x2000052c
 8001190:	3e4ccccd 	.word	0x3e4ccccd
 8001194:	3f19999a 	.word	0x3f19999a
 8001198:	20000540 	.word	0x20000540
 800119c:	08010024 	.word	0x08010024
 80011a0:	0800444d 	.word	0x0800444d
 80011a4:	20000450 	.word	0x20000450
 80011a8:	08010048 	.word	0x08010048
 80011ac:	0800445d 	.word	0x0800445d
 80011b0:	20000454 	.word	0x20000454
 80011b4:	0801006c 	.word	0x0801006c
 80011b8:	080044dd 	.word	0x080044dd
 80011bc:	20000458 	.word	0x20000458
 80011c0:	08010090 	.word	0x08010090
 80011c4:	08004715 	.word	0x08004715
 80011c8:	2000045c 	.word	0x2000045c
 80011cc:	080100b4 	.word	0x080100b4
 80011d0:	0800491d 	.word	0x0800491d
 80011d4:	20000460 	.word	0x20000460
 80011d8:	080100d8 	.word	0x080100d8
 80011dc:	08004bfd 	.word	0x08004bfd
 80011e0:	20000464 	.word	0x20000464
 80011e4:	080100fc 	.word	0x080100fc
 80011e8:	08004edd 	.word	0x08004edd
 80011ec:	20000468 	.word	0x20000468
 80011f0:	08010120 	.word	0x08010120
 80011f4:	080051bd 	.word	0x080051bd
 80011f8:	2000046c 	.word	0x2000046c
 80011fc:	08010144 	.word	0x08010144
 8001200:	080054a1 	.word	0x080054a1
 8001204:	20000470 	.word	0x20000470
 8001208:	08010168 	.word	0x08010168
 800120c:	08005b39 	.word	0x08005b39
 8001210:	20000474 	.word	0x20000474
 8001214:	0801018c 	.word	0x0801018c
 8001218:	08005c19 	.word	0x08005c19
 800121c:	20000478 	.word	0x20000478
 8001220:	080101b0 	.word	0x080101b0
 8001224:	08005dc5 	.word	0x08005dc5
 8001228:	2000047c 	.word	0x2000047c
 800122c:	080101d4 	.word	0x080101d4
 8001230:	0800610d 	.word	0x0800610d
 8001234:	20000480 	.word	0x20000480
 8001238:	080101f8 	.word	0x080101f8
 800123c:	080062c1 	.word	0x080062c1
 8001240:	20000484 	.word	0x20000484
 8001244:	0801021c 	.word	0x0801021c
 8001248:	08006551 	.word	0x08006551
 800124c:	20000488 	.word	0x20000488

08001250 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	; 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	2230      	movs	r2, #48	; 0x30
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f00e f9f4 	bl	800f64c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <SystemClock_Config+0xb4>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a21      	ldr	r2, [pc, #132]	; (8001304 <SystemClock_Config+0xb4>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <SystemClock_Config+0xb4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <SystemClock_Config+0xb8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <SystemClock_Config+0xb8>)
 800129a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <SystemClock_Config+0xb8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b4:	2310      	movs	r3, #16
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0320 	add.w	r3, r7, #32
 80012c0:	4618      	mov	r0, r3
 80012c2:	f007 fcdf 	bl	8008c84 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012cc:	f005 f9c2 	bl	8006654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012d0:	230f      	movs	r3, #15
 80012d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f007 ff42 	bl	8009174 <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012f6:	f005 f9ad 	bl	8006654 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3750      	adds	r7, #80	; 0x50
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <MX_ADC1_Init+0x98>)
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <MX_ADC1_Init+0x9c>)
 8001322:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_ADC1_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_ADC1_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_ADC1_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_ADC1_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_ADC1_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_ADC1_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_ADC1_Init+0x98>)
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <MX_ADC1_Init+0xa0>)
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_ADC1_Init+0x98>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_ADC1_Init+0x98>)
 8001358:	2201      	movs	r2, #1
 800135a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_ADC1_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_ADC1_Init+0x98>)
 8001366:	2201      	movs	r2, #1
 8001368:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <MX_ADC1_Init+0x98>)
 800136c:	f005 fd78 	bl	8006e60 <HAL_ADC_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001376:	f005 f96d 	bl	8006654 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_11;
 800137a:	230b      	movs	r3, #11
 800137c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001386:	463b      	mov	r3, r7
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_ADC1_Init+0x98>)
 800138c:	f005 ff4a 	bl	8007224 <HAL_ADC_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001396:	f005 f95d 	bl	8006654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200001c0 	.word	0x200001c0
 80013a8:	40012000 	.word	0x40012000
 80013ac:	0f000001 	.word	0x0f000001

080013b0 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b6:	463b      	mov	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc2.Instance = ADC2;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_ADC2_Init+0x98>)
 80013c4:	4a21      	ldr	r2, [pc, #132]	; (800144c <MX_ADC2_Init+0x9c>)
 80013c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_ADC2_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_ADC2_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_ADC2_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_ADC2_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_ADC2_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_ADC2_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_ADC2_Init+0x98>)
 80013f0:	4a17      	ldr	r2, [pc, #92]	; (8001450 <MX_ADC2_Init+0xa0>)
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_ADC2_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_ADC2_Init+0x98>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_ADC2_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_ADC2_Init+0x98>)
 800140a:	2201      	movs	r2, #1
 800140c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <MX_ADC2_Init+0x98>)
 8001410:	f005 fd26 	bl	8006e60 <HAL_ADC_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800141a:	f005 f91b 	bl	8006654 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_12;
 800141e:	230c      	movs	r3, #12
 8001420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_ADC2_Init+0x98>)
 8001430:	f005 fef8 	bl	8007224 <HAL_ADC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800143a:	f005 f90b 	bl	8006654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000208 	.word	0x20000208
 800144c:	40012100 	.word	0x40012100
 8001450:	0f000001 	.word	0x0f000001

08001454 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <MX_I2C1_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <MX_I2C1_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_I2C1_Init+0x58>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <MX_I2C1_Init+0x50>)
 8001492:	f006 fc0f 	bl	8007cb4 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800149c:	f005 f8da 	bl	8006654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000250 	.word	0x20000250
 80014a8:	40005400 	.word	0x40005400
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b096      	sub	sp, #88	; 0x58
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2220      	movs	r2, #32
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00e f8af 	bl	800f64c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ee:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <MX_TIM1_Init+0x134>)
 80014f0:	4a3d      	ldr	r2, [pc, #244]	; (80015e8 <MX_TIM1_Init+0x138>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80014f4:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <MX_TIM1_Init+0x134>)
 80014f6:	22a0      	movs	r2, #160	; 0xa0
 80014f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <MX_TIM1_Init+0x134>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <MX_TIM1_Init+0x134>)
 8001502:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001506:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <MX_TIM1_Init+0x134>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800150e:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <MX_TIM1_Init+0x134>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <MX_TIM1_Init+0x134>)
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800151a:	4832      	ldr	r0, [pc, #200]	; (80015e4 <MX_TIM1_Init+0x134>)
 800151c:	f008 f83c 	bl	8009598 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001526:	f005 f895 	bl	8006654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001530:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001534:	4619      	mov	r1, r3
 8001536:	482b      	ldr	r0, [pc, #172]	; (80015e4 <MX_TIM1_Init+0x134>)
 8001538:	f009 f842 	bl	800a5c0 <HAL_TIM_ConfigClockSource>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001542:	f005 f887 	bl	8006654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001546:	4827      	ldr	r0, [pc, #156]	; (80015e4 <MX_TIM1_Init+0x134>)
 8001548:	f008 f94e 	bl	80097e8 <HAL_TIM_PWM_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001552:	f005 f87f 	bl	8006654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800155e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001562:	4619      	mov	r1, r3
 8001564:	481f      	ldr	r0, [pc, #124]	; (80015e4 <MX_TIM1_Init+0x134>)
 8001566:	f009 fd8f 	bl	800b088 <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001570:	f005 f870 	bl	8006654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001574:	2360      	movs	r3, #96	; 0x60
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	220c      	movs	r2, #12
 8001592:	4619      	mov	r1, r3
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <MX_TIM1_Init+0x134>)
 8001596:	f008 ff51 	bl	800a43c <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80015a0:	f005 f858 	bl	8006654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <MX_TIM1_Init+0x134>)
 80015c8:	f009 fdda 	bl	800b180 <HAL_TIMEx_ConfigBreakDeadTime>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80015d2:	f005 f83f 	bl	8006654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015d6:	4803      	ldr	r0, [pc, #12]	; (80015e4 <MX_TIM1_Init+0x134>)
 80015d8:	f005 fa4a 	bl	8006a70 <HAL_TIM_MspPostInit>
}
 80015dc:	bf00      	nop
 80015de:	3758      	adds	r7, #88	; 0x58
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200002a4 	.word	0x200002a4
 80015e8:	40010000 	.word	0x40010000

080015ec <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	; 0x30
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00e f826 	bl	800f64c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_TIM2_Init+0xa4>)
 800160a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_TIM2_Init+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_TIM2_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_TIM2_Init+0xa4>)
 800161e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001622:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_TIM2_Init+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_TIM2_Init+0xa4>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001630:	2303      	movs	r3, #3
 8001632:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001638:	2301      	movs	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001640:	230a      	movs	r3, #10
 8001642:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001648:	2301      	movs	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001650:	230a      	movs	r3, #10
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_TIM2_Init+0xa4>)
 800165c:	f008 fc16 	bl	8009e8c <HAL_TIM_Encoder_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001666:	f004 fff5 	bl	8006654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM2_Init+0xa4>)
 8001678:	f009 fd06 	bl	800b088 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001682:	f004 ffe7 	bl	8006654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001686:	bf00      	nop
 8001688:	3730      	adds	r7, #48	; 0x30
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002ec 	.word	0x200002ec

08001694 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <MX_TIM3_Init+0xd8>)
 80016c0:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <MX_TIM3_Init+0xdc>)
 80016c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <MX_TIM3_Init+0xd8>)
 80016c6:	220f      	movs	r2, #15
 80016c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <MX_TIM3_Init+0xd8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_TIM3_Init+0xd8>)
 80016d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <MX_TIM3_Init+0xd8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_TIM3_Init+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <MX_TIM3_Init+0xd8>)
 80016e6:	f007 ff57 	bl	8009598 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80016f0:	f004 ffb0 	bl	8006654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fa:	f107 0318 	add.w	r3, r7, #24
 80016fe:	4619      	mov	r1, r3
 8001700:	481a      	ldr	r0, [pc, #104]	; (800176c <MX_TIM3_Init+0xd8>)
 8001702:	f008 ff5d 	bl	800a5c0 <HAL_TIM_ConfigClockSource>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800170c:	f004 ffa2 	bl	8006654 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001710:	4816      	ldr	r0, [pc, #88]	; (800176c <MX_TIM3_Init+0xd8>)
 8001712:	f008 f98b 	bl	8009a2c <HAL_TIM_IC_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800171c:	f004 ff9a 	bl	8006654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4619      	mov	r1, r3
 800172e:	480f      	ldr	r0, [pc, #60]	; (800176c <MX_TIM3_Init+0xd8>)
 8001730:	f009 fcaa 	bl	800b088 <HAL_TIMEx_MasterConfigSynchronization>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800173a:	f004 ff8b 	bl	8006654 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800173e:	230a      	movs	r3, #10
 8001740:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001742:	2301      	movs	r3, #1
 8001744:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	2204      	movs	r2, #4
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_TIM3_Init+0xd8>)
 8001756:	f008 fdd5 	bl	800a304 <HAL_TIM_IC_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001760:	f004 ff78 	bl	8006654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000334 	.word	0x20000334
 8001770:	40000400 	.word	0x40000400

08001774 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177a:	463b      	mov	r3, r7
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_TIM6_Init+0x64>)
 8001784:	4a15      	ldr	r2, [pc, #84]	; (80017dc <MX_TIM6_Init+0x68>)
 8001786:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_TIM6_Init+0x64>)
 800178a:	220f      	movs	r2, #15
 800178c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_TIM6_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_TIM6_Init+0x64>)
 8001796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800179a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_TIM6_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_TIM6_Init+0x64>)
 80017a4:	f007 fef8 	bl	8009598 <HAL_TIM_Base_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80017ae:	f004 ff51 	bl	8006654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <MX_TIM6_Init+0x64>)
 80017c0:	f009 fc62 	bl	800b088 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80017ca:	f004 ff43 	bl	8006654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000037c 	.word	0x2000037c
 80017dc:	40001000 	.word	0x40001000

080017e0 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b096      	sub	sp, #88	; 0x58
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	615a      	str	r2, [r3, #20]
 8001810:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2220      	movs	r2, #32
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f00d ff17 	bl	800f64c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <MX_TIM8_Init+0x14c>)
 8001820:	4a43      	ldr	r2, [pc, #268]	; (8001930 <MX_TIM8_Init+0x150>)
 8001822:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001824:	4b41      	ldr	r3, [pc, #260]	; (800192c <MX_TIM8_Init+0x14c>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b40      	ldr	r3, [pc, #256]	; (800192c <MX_TIM8_Init+0x14c>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001830:	4b3e      	ldr	r3, [pc, #248]	; (800192c <MX_TIM8_Init+0x14c>)
 8001832:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001836:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b3c      	ldr	r3, [pc, #240]	; (800192c <MX_TIM8_Init+0x14c>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800183e:	4b3b      	ldr	r3, [pc, #236]	; (800192c <MX_TIM8_Init+0x14c>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <MX_TIM8_Init+0x14c>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800184a:	4838      	ldr	r0, [pc, #224]	; (800192c <MX_TIM8_Init+0x14c>)
 800184c:	f007 fea4 	bl	8009598 <HAL_TIM_Base_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001856:	f004 fefd 	bl	8006654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001860:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001864:	4619      	mov	r1, r3
 8001866:	4831      	ldr	r0, [pc, #196]	; (800192c <MX_TIM8_Init+0x14c>)
 8001868:	f008 feaa 	bl	800a5c0 <HAL_TIM_ConfigClockSource>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001872:	f004 feef 	bl	8006654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001876:	482d      	ldr	r0, [pc, #180]	; (800192c <MX_TIM8_Init+0x14c>)
 8001878:	f007 ffb6 	bl	80097e8 <HAL_TIM_PWM_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001882:	f004 fee7 	bl	8006654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800188e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001892:	4619      	mov	r1, r3
 8001894:	4825      	ldr	r0, [pc, #148]	; (800192c <MX_TIM8_Init+0x14c>)
 8001896:	f009 fbf7 	bl	800b088 <HAL_TIMEx_MasterConfigSynchronization>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80018a0:	f004 fed8 	bl	8006654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a4:	2360      	movs	r3, #96	; 0x60
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b0:	2300      	movs	r3, #0
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4818      	ldr	r0, [pc, #96]	; (800192c <MX_TIM8_Init+0x14c>)
 80018ca:	f008 fdb7 	bl	800a43c <HAL_TIM_PWM_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80018d4:	f004 febe 	bl	8006654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	2204      	movs	r2, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4812      	ldr	r0, [pc, #72]	; (800192c <MX_TIM8_Init+0x14c>)
 80018e2:	f008 fdab 	bl	800a43c <HAL_TIM_PWM_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80018ec:	f004 feb2 	bl	8006654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001908:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	4619      	mov	r1, r3
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <MX_TIM8_Init+0x14c>)
 8001914:	f009 fc34 	bl	800b180 <HAL_TIMEx_ConfigBreakDeadTime>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800191e:	f004 fe99 	bl	8006654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8001922:	bf00      	nop
 8001924:	3758      	adds	r7, #88	; 0x58
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200003c4 	.word	0x200003c4
 8001930:	40010400 	.word	0x40010400

08001934 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_USART3_UART_Init+0x4c>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <MX_USART3_UART_Init+0x50>)
 800193c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_USART3_UART_Init+0x4c>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_USART3_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART3_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_USART3_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_USART3_UART_Init+0x4c>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART3_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_USART3_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_USART3_UART_Init+0x4c>)
 800196c:	f009 fc6e 	bl	800b24c <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001976:	f004 fe6d 	bl	8006654 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000040c 	.word	0x2000040c
 8001984:	40004800 	.word	0x40004800

08001988 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a37      	ldr	r2, [pc, #220]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a30      	ldr	r2, [pc, #192]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <MX_GPIO_Init+0xfc>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MX_GPIO_Init+0xfc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 8001a14:	481c      	ldr	r0, [pc, #112]	; (8001a88 <MX_GPIO_Init+0x100>)
 8001a16:	f006 f933 	bl	8007c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	213c      	movs	r1, #60	; 0x3c
 8001a1e:	481b      	ldr	r0, [pc, #108]	; (8001a8c <MX_GPIO_Init+0x104>)
 8001a20:	f006 f92e 	bl	8007c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin US_Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin;
 8001a24:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4812      	ldr	r0, [pc, #72]	; (8001a88 <MX_GPIO_Init+0x100>)
 8001a3e:	f005 ff83 	bl	8007948 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 8001a42:	230c      	movs	r3, #12
 8001a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <MX_GPIO_Init+0x104>)
 8001a5a:	f005 ff75 	bl	8007948 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 8001a5e:	2330      	movs	r3, #48	; 0x30
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_GPIO_Init+0x104>)
 8001a76:	f005 ff67 	bl	8007948 <HAL_GPIO_Init>
}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40020000 	.word	0x40020000

08001a90 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t US_diff = 0;
uint8_t Is_First_Captured = 0; // is the first value captured

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // if the interrupt source is channel 2
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7f1b      	ldrb	r3, [r3, #28]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	f040 808c 	bne.w	8001bba <HAL_TIM_IC_CaptureCallback+0x12a>
  {
    if (Is_First_Captured == 0) // if the first value is not captured
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d11a      	bne.n	8001ae0 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001aaa:	2104      	movs	r1, #4
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f008 fe4f 	bl	800a750 <HAL_TIM_ReadCapturedValue>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a47      	ldr	r2, [pc, #284]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ab6:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;                                    // set the first captured as true
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
      // Now change the polarity to falling edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a1a      	ldr	r2, [r3, #32]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001acc:	621a      	str	r2, [r3, #32]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0220 	orr.w	r2, r2, #32
 8001adc:	621a      	str	r2, [r3, #32]
      // set polarity to rising edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
    }
  }
}
 8001ade:	e06c      	b.n	8001bba <HAL_TIM_IC_CaptureCallback+0x12a>
    else if (Is_First_Captured == 1) // if the first is already captured
 8001ae0:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d168      	bne.n	8001bba <HAL_TIM_IC_CaptureCallback+0x12a>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001ae8:	2104      	movs	r1, #4
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f008 fe30 	bl	800a750 <HAL_TIM_ReadCapturedValue>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a39      	ldr	r2, [pc, #228]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001af4:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);                           // reset the counter
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
      if (IC_Val2 > IC_Val1)
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d90c      	bls.n	8001b24 <HAL_TIM_IC_CaptureCallback+0x94>
        obsDist_Ultrasonic = IC_Val2 - IC_Val1;
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b1e:	edc3 7a00 	vstr	s15, [r3]
 8001b22:	e014      	b.n	8001b4e <HAL_TIM_IC_CaptureCallback+0xbe>
      else if (IC_Val1 > IC_Val2)
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d90e      	bls.n	8001b4e <HAL_TIM_IC_CaptureCallback+0xbe>
        obsDist_Ultrasonic = (0xffff - IC_Val1) + IC_Val2;
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b3e:	33ff      	adds	r3, #255	; 0xff
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]
      obsDist_Ultrasonic = obsDist_Ultrasonic * .034 / 2;
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcf0 	bl	8000538 <__aeabi_f2d>
 8001b58:	a31b      	add	r3, pc, #108	; (adr r3, 8001bc8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd43 	bl	80005e8 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b72:	f7fe fe63 	bl	800083c <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7fe ffed 	bl	8000b5c <__aeabi_d2f>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b86:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 0; // set it back to false
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b9c:	621a      	str	r2, [r3, #32]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a12      	ldr	r2, [r2, #32]
 8001ba8:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0204 	bic.w	r2, r2, #4
 8001bb8:	60da      	str	r2, [r3, #12]
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	b020c49c 	.word	0xb020c49c
 8001bcc:	3fa16872 	.word	0x3fa16872
 8001bd0:	20000574 	.word	0x20000574
 8001bd4:	2000056c 	.word	0x2000056c
 8001bd8:	20000570 	.word	0x20000570
 8001bdc:	20000568 	.word	0x20000568
 8001be0:	20000334 	.word	0x20000334

08001be4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  //  prevent unused argument(s) compilation warning
  UNUSED(huart);
  int val;

  val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001bec:	4b97      	ldr	r3, [pc, #604]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001bee:	789b      	ldrb	r3, [r3, #2]
 8001bf0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b93      	ldr	r3, [pc, #588]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001c00:	78db      	ldrb	r3, [r3, #3]
 8001c02:	3b30      	subs	r3, #48	; 0x30
 8001c04:	4413      	add	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
  if (aRxBuffer[4] >= '0' && aRxBuffer[4] <= '9')
 8001c08:	4b90      	ldr	r3, [pc, #576]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001c0a:	791b      	ldrb	r3, [r3, #4]
 8001c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8001c0e:	d90e      	bls.n	8001c2e <HAL_UART_RxCpltCallback+0x4a>
 8001c10:	4b8e      	ldr	r3, [pc, #568]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001c12:	791b      	ldrb	r3, [r3, #4]
 8001c14:	2b39      	cmp	r3, #57	; 0x39
 8001c16:	d80a      	bhi.n	8001c2e <HAL_UART_RxCpltCallback+0x4a>
    // val += (aRxBuffer[4] - 48) * 100;
    val = val * 10 + (aRxBuffer[4] - 48);
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001c26:	791b      	ldrb	r3, [r3, #4]
 8001c28:	3b30      	subs	r3, #48	; 0x30
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

  manualMode = 0;
 8001c2e:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_UART_RxCpltCallback+0x26c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]

  if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T')
 8001c34:	4b85      	ldr	r3, [pc, #532]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b53      	cmp	r3, #83	; 0x53
 8001c3a:	d159      	bne.n	8001cf0 <HAL_UART_RxCpltCallback+0x10c>
 8001c3c:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001c3e:	785b      	ldrb	r3, [r3, #1]
 8001c40:	2b54      	cmp	r3, #84	; 0x54
 8001c42:	d155      	bne.n	8001cf0 <HAL_UART_RxCpltCallback+0x10c>
  { // only STOP can preempt any greedy task
    //		__ADD_COMMAND(cQueue, 0, 0); // stop
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001c44:	4b83      	ldr	r3, [pc, #524]	; (8001e54 <HAL_UART_RxCpltCallback+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4c:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <HAL_UART_RxCpltCallback+0x270>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38
 8001c54:	4b80      	ldr	r3, [pc, #512]	; (8001e58 <HAL_UART_RxCpltCallback+0x274>)
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	4b80      	ldr	r3, [pc, #512]	; (8001e5c <HAL_UART_RxCpltCallback+0x278>)
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	4b7e      	ldr	r3, [pc, #504]	; (8001e58 <HAL_UART_RxCpltCallback+0x274>)
 8001c5e:	2211      	movs	r2, #17
 8001c60:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001c62:	4b7f      	ldr	r3, [pc, #508]	; (8001e60 <HAL_UART_RxCpltCallback+0x27c>)
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001c6a:	4b7e      	ldr	r3, [pc, #504]	; (8001e64 <HAL_UART_RxCpltCallback+0x280>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 8001c70:	487d      	ldr	r0, [pc, #500]	; (8001e68 <HAL_UART_RxCpltCallback+0x284>)
 8001c72:	f000 fca2 	bl	80025ba <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001c76:	487d      	ldr	r0, [pc, #500]	; (8001e6c <HAL_UART_RxCpltCallback+0x288>)
 8001c78:	f000 fc9f 	bl	80025ba <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001c7c:	487c      	ldr	r0, [pc, #496]	; (8001e70 <HAL_UART_RxCpltCallback+0x28c>)
 8001c7e:	f000 fc9c 	bl	80025ba <PIDConfigReset>
    PIDConfigReset(&pidZoomZoom);
 8001c82:	487c      	ldr	r0, [pc, #496]	; (8001e74 <HAL_UART_RxCpltCallback+0x290>)
 8001c84:	f000 fc99 	bl	80025ba <PIDConfigReset>
    curDistTick = 0;
 8001c88:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <HAL_UART_RxCpltCallback+0x294>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8001c8e:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001c94:	785b      	ldrb	r3, [r3, #1]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d10e      	bne.n	8001cb8 <HAL_UART_RxCpltCallback+0xd4>
    {
      __CLEAR_CURCMD(curCmd);
 8001c9a:	4b79      	ldr	r3, [pc, #484]	; (8001e80 <HAL_UART_RxCpltCallback+0x29c>)
 8001c9c:	2264      	movs	r2, #100	; 0x64
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	4b77      	ldr	r3, [pc, #476]	; (8001e80 <HAL_UART_RxCpltCallback+0x29c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001caa:	2206      	movs	r2, #6
 8001cac:	4975      	ldr	r1, [pc, #468]	; (8001e84 <HAL_UART_RxCpltCallback+0x2a0>)
 8001cae:	4876      	ldr	r0, [pc, #472]	; (8001e88 <HAL_UART_RxCpltCallback+0x2a4>)
 8001cb0:	f009 fb19 	bl	800b2e6 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8001cb4:	f000 bc23 	b.w	80024fe <HAL_UART_RxCpltCallback+0x91a>
    }
    else
    {
      __READ_COMMAND(cmdQ, curCmd, rxMsg);
 8001cb8:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001cba:	785b      	ldrb	r3, [r3, #1]
 8001cbc:	4a70      	ldr	r2, [pc, #448]	; (8001e80 <HAL_UART_RxCpltCallback+0x29c>)
 8001cbe:	496f      	ldr	r1, [pc, #444]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b6c      	ldr	r3, [pc, #432]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	4a6b      	ldr	r2, [pc, #428]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001cd0:	7892      	ldrb	r2, [r2, #2]
 8001cd2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cd6:	fb01 f202 	mul.w	r2, r1, r2
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001ce0:	705a      	strb	r2, [r3, #1]
 8001ce2:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_UART_RxCpltCallback+0x2a8>)
 8001ce4:	210f      	movs	r1, #15
 8001ce6:	486a      	ldr	r0, [pc, #424]	; (8001e90 <HAL_UART_RxCpltCallback+0x2ac>)
 8001ce8:	f00d fc7c 	bl	800f5e4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8001cec:	f000 bc07 	b.w	80024fe <HAL_UART_RxCpltCallback+0x91a>
    }
  }
  else if (aRxBuffer[0] == 'R' && aRxBuffer[1] == 'S')
 8001cf0:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b52      	cmp	r3, #82	; 0x52
 8001cf6:	d15f      	bne.n	8001db8 <HAL_UART_RxCpltCallback+0x1d4>
 8001cf8:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	2b53      	cmp	r3, #83	; 0x53
 8001cfe:	d15b      	bne.n	8001db8 <HAL_UART_RxCpltCallback+0x1d4>
  {
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001d00:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <HAL_UART_RxCpltCallback+0x270>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
 8001d08:	4b52      	ldr	r3, [pc, #328]	; (8001e54 <HAL_UART_RxCpltCallback+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
 8001d10:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <HAL_UART_RxCpltCallback+0x274>)
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_UART_RxCpltCallback+0x278>)
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <HAL_UART_RxCpltCallback+0x274>)
 8001d1a:	2211      	movs	r2, #17
 8001d1c:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001d1e:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <HAL_UART_RxCpltCallback+0x27c>)
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001d26:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_UART_RxCpltCallback+0x280>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	801a      	strh	r2, [r3, #0]
    __RESET_SERVO_TURN(&htim1);
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_UART_RxCpltCallback+0x2b0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2291      	movs	r2, #145	; 0x91
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
 8001d34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d38:	f005 f86e 	bl	8006e18 <HAL_Delay>
    PIDConfigReset(&pidTSlow);
 8001d3c:	484a      	ldr	r0, [pc, #296]	; (8001e68 <HAL_UART_RxCpltCallback+0x284>)
 8001d3e:	f000 fc3c 	bl	80025ba <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001d42:	484a      	ldr	r0, [pc, #296]	; (8001e6c <HAL_UART_RxCpltCallback+0x288>)
 8001d44:	f000 fc39 	bl	80025ba <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001d48:	4849      	ldr	r0, [pc, #292]	; (8001e70 <HAL_UART_RxCpltCallback+0x28c>)
 8001d4a:	f000 fc36 	bl	80025ba <PIDConfigReset>
    PIDConfigReset(&pidZoomZoom);
 8001d4e:	4849      	ldr	r0, [pc, #292]	; (8001e74 <HAL_UART_RxCpltCallback+0x290>)
 8001d50:	f000 fc33 	bl	80025ba <PIDConfigReset>
    curDistTick = 0;
 8001d54:	4b48      	ldr	r3, [pc, #288]	; (8001e78 <HAL_UART_RxCpltCallback+0x294>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d10d      	bne.n	8001d82 <HAL_UART_RxCpltCallback+0x19e>
    {
      __CLEAR_CURCMD(curCmd);
 8001d66:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_UART_RxCpltCallback+0x29c>)
 8001d68:	2264      	movs	r2, #100	; 0x64
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_UART_RxCpltCallback+0x29c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d76:	2206      	movs	r2, #6
 8001d78:	4942      	ldr	r1, [pc, #264]	; (8001e84 <HAL_UART_RxCpltCallback+0x2a0>)
 8001d7a:	4843      	ldr	r0, [pc, #268]	; (8001e88 <HAL_UART_RxCpltCallback+0x2a4>)
 8001d7c:	f009 fab3 	bl	800b2e6 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8001d80:	e3bd      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
    }
    else
    {
      __READ_COMMAND(cmdQ, curCmd, rxMsg);
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001d84:	785b      	ldrb	r3, [r3, #1]
 8001d86:	4a3e      	ldr	r2, [pc, #248]	; (8001e80 <HAL_UART_RxCpltCallback+0x29c>)
 8001d88:	493c      	ldr	r1, [pc, #240]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001d94:	785b      	ldrb	r3, [r3, #1]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a38      	ldr	r2, [pc, #224]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001d9a:	7892      	ldrb	r2, [r2, #2]
 8001d9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001da0:	fb01 f202 	mul.w	r2, r1, r2
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001daa:	705a      	strb	r2, [r3, #1]
 8001dac:	4a37      	ldr	r2, [pc, #220]	; (8001e8c <HAL_UART_RxCpltCallback+0x2a8>)
 8001dae:	210f      	movs	r1, #15
 8001db0:	4837      	ldr	r0, [pc, #220]	; (8001e90 <HAL_UART_RxCpltCallback+0x2ac>)
 8001db2:	f00d fc17 	bl	800f5e4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8001db6:	e3a2      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
    }
  }
  else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W'))
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b46      	cmp	r3, #70	; 0x46
 8001dbe:	d132      	bne.n	8001e26 <HAL_UART_RxCpltCallback+0x242>
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001dc2:	785b      	ldrb	r3, [r3, #1]
 8001dc4:	2b57      	cmp	r3, #87	; 0x57
 8001dc6:	d12e      	bne.n	8001e26 <HAL_UART_RxCpltCallback+0x242>
  { // FW
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001dca:	789b      	ldrb	r3, [r3, #2]
 8001dcc:	2b2d      	cmp	r3, #45	; 0x2d
 8001dce:	d105      	bne.n	8001ddc <HAL_UART_RxCpltCallback+0x1f8>
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001dd2:	78db      	ldrb	r3, [r3, #3]
 8001dd4:	2b2d      	cmp	r3, #45	; 0x2d
 8001dd6:	d101      	bne.n	8001ddc <HAL_UART_RxCpltCallback+0x1f8>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_UART_RxCpltCallback+0x1fa>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_UART_RxCpltCallback+0x26c>)
 8001de2:	701a      	strb	r2, [r3, #0]
    moveMode = FAST;
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <HAL_UART_RxCpltCallback+0x2b4>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cmdQ, 1, val);
 8001dea:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	2201      	movs	r2, #1
 8001df6:	711a      	strb	r2, [r3, #4]
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	b291      	uxth	r1, r2
 8001e00:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	460a      	mov	r2, r1
 8001e08:	80da      	strh	r2, [r3, #6]
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001e12:	7892      	ldrb	r2, [r2, #2]
 8001e14:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e18:	fb01 f202 	mul.w	r2, r1, r2
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_UART_RxCpltCallback+0x298>)
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e36b      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  }
  else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W'))
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b42      	cmp	r3, #66	; 0x42
 8001e2c:	d15b      	bne.n	8001ee6 <HAL_UART_RxCpltCallback+0x302>
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	2b57      	cmp	r3, #87	; 0x57
 8001e34:	d157      	bne.n	8001ee6 <HAL_UART_RxCpltCallback+0x302>
  { // BW
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001e38:	789b      	ldrb	r3, [r3, #2]
 8001e3a:	2b2d      	cmp	r3, #45	; 0x2d
 8001e3c:	d12e      	bne.n	8001e9c <HAL_UART_RxCpltCallback+0x2b8>
 8001e3e:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_UART_RxCpltCallback+0x268>)
 8001e40:	78db      	ldrb	r3, [r3, #3]
 8001e42:	2b2d      	cmp	r3, #45	; 0x2d
 8001e44:	d12a      	bne.n	8001e9c <HAL_UART_RxCpltCallback+0x2b8>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e029      	b.n	8001e9e <HAL_UART_RxCpltCallback+0x2ba>
 8001e4a:	bf00      	nop
 8001e4c:	2000048c 	.word	0x2000048c
 8001e50:	200004e0 	.word	0x200004e0
 8001e54:	200003c4 	.word	0x200003c4
 8001e58:	20000134 	.word	0x20000134
 8001e5c:	20000135 	.word	0x20000135
 8001e60:	200004e8 	.word	0x200004e8
 8001e64:	200004ee 	.word	0x200004ee
 8001e68:	20000518 	.word	0x20000518
 8001e6c:	20000504 	.word	0x20000504
 8001e70:	2000052c 	.word	0x2000052c
 8001e74:	20000540 	.word	0x20000540
 8001e78:	200004fc 	.word	0x200004fc
 8001e7c:	20000498 	.word	0x20000498
 8001e80:	200004cc 	.word	0x200004cc
 8001e84:	0800fffc 	.word	0x0800fffc
 8001e88:	2000040c 	.word	0x2000040c
 8001e8c:	08010004 	.word	0x08010004
 8001e90:	200004d0 	.word	0x200004d0
 8001e94:	200002a4 	.word	0x200002a4
 8001e98:	20000136 	.word	0x20000136
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b87      	ldr	r3, [pc, #540]	; (80020c0 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ea2:	701a      	strb	r2, [r3, #0]
    moveMode = FAST;
 8001ea4:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_UART_RxCpltCallback+0x4e0>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cmdQ, 2, val);
 8001eaa:	4b87      	ldr	r3, [pc, #540]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4a86      	ldr	r2, [pc, #536]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	711a      	strb	r2, [r3, #4]
 8001eb8:	4b83      	ldr	r3, [pc, #524]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	b291      	uxth	r1, r2
 8001ec0:	4a81      	ldr	r2, [pc, #516]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	80da      	strh	r2, [r3, #6]
 8001eca:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4a7d      	ldr	r2, [pc, #500]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001ed2:	7892      	ldrb	r2, [r2, #2]
 8001ed4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ed8:	fb01 f202 	mul.w	r2, r1, r2
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b79      	ldr	r3, [pc, #484]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	e30b      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  }

  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L')
 8001ee6:	4b79      	ldr	r3, [pc, #484]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b46      	cmp	r3, #70	; 0x46
 8001eec:	d136      	bne.n	8001f5c <HAL_UART_RxCpltCallback+0x378>
 8001eee:	4b77      	ldr	r3, [pc, #476]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	2b4c      	cmp	r3, #76	; 0x4c
 8001ef4:	d132      	bne.n	8001f5c <HAL_UART_RxCpltCallback+0x378>
  { // FL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ef6:	4b75      	ldr	r3, [pc, #468]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001ef8:	789b      	ldrb	r3, [r3, #2]
 8001efa:	2b2d      	cmp	r3, #45	; 0x2d
 8001efc:	d105      	bne.n	8001f0a <HAL_UART_RxCpltCallback+0x326>
 8001efe:	4b73      	ldr	r3, [pc, #460]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001f00:	78db      	ldrb	r3, [r3, #3]
 8001f02:	2b2d      	cmp	r3, #45	; 0x2d
 8001f04:	d101      	bne.n	8001f0a <HAL_UART_RxCpltCallback+0x326>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_UART_RxCpltCallback+0x328>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b6c      	ldr	r3, [pc, #432]	; (80020c0 <HAL_UART_RxCpltCallback+0x4dc>)
 8001f10:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cmdQ, 3 + (manualMode ? 0 : 4), val);
 8001f12:	4b6b      	ldr	r3, [pc, #428]	; (80020c0 <HAL_UART_RxCpltCallback+0x4dc>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_RxCpltCallback+0x33a>
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	e000      	b.n	8001f20 <HAL_UART_RxCpltCallback+0x33c>
 8001f1e:	2107      	movs	r1, #7
 8001f20:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4a68      	ldr	r2, [pc, #416]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	460a      	mov	r2, r1
 8001f2c:	711a      	strb	r2, [r3, #4]
 8001f2e:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	b291      	uxth	r1, r2
 8001f36:	4a64      	ldr	r2, [pc, #400]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	80da      	strh	r2, [r3, #6]
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	4a60      	ldr	r2, [pc, #384]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001f48:	7892      	ldrb	r2, [r2, #2]
 8001f4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f4e:	fb01 f202 	mul.w	r2, r1, r2
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b5c      	ldr	r3, [pc, #368]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e2d0      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  }
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R')
 8001f5c:	4b5b      	ldr	r3, [pc, #364]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b46      	cmp	r3, #70	; 0x46
 8001f62:	d136      	bne.n	8001fd2 <HAL_UART_RxCpltCallback+0x3ee>
 8001f64:	4b59      	ldr	r3, [pc, #356]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001f66:	785b      	ldrb	r3, [r3, #1]
 8001f68:	2b52      	cmp	r3, #82	; 0x52
 8001f6a:	d132      	bne.n	8001fd2 <HAL_UART_RxCpltCallback+0x3ee>
  { // FR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f6c:	4b57      	ldr	r3, [pc, #348]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001f6e:	789b      	ldrb	r3, [r3, #2]
 8001f70:	2b2d      	cmp	r3, #45	; 0x2d
 8001f72:	d105      	bne.n	8001f80 <HAL_UART_RxCpltCallback+0x39c>
 8001f74:	4b55      	ldr	r3, [pc, #340]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001f76:	78db      	ldrb	r3, [r3, #3]
 8001f78:	2b2d      	cmp	r3, #45	; 0x2d
 8001f7a:	d101      	bne.n	8001f80 <HAL_UART_RxCpltCallback+0x39c>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_UART_RxCpltCallback+0x39e>
 8001f80:	2300      	movs	r3, #0
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <HAL_UART_RxCpltCallback+0x4dc>)
 8001f86:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cmdQ, 4 + (manualMode ? 0 : 4), val);
 8001f88:	4b4d      	ldr	r3, [pc, #308]	; (80020c0 <HAL_UART_RxCpltCallback+0x4dc>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_UART_RxCpltCallback+0x3b0>
 8001f90:	2104      	movs	r1, #4
 8001f92:	e000      	b.n	8001f96 <HAL_UART_RxCpltCallback+0x3b2>
 8001f94:	2108      	movs	r1, #8
 8001f96:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	4a4b      	ldr	r2, [pc, #300]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	460a      	mov	r2, r1
 8001fa2:	711a      	strb	r2, [r3, #4]
 8001fa4:	4b48      	ldr	r3, [pc, #288]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	b291      	uxth	r1, r2
 8001fac:	4a46      	ldr	r2, [pc, #280]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	80da      	strh	r2, [r3, #6]
 8001fb6:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a42      	ldr	r2, [pc, #264]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001fbe:	7892      	ldrb	r2, [r2, #2]
 8001fc0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fc4:	fb01 f202 	mul.w	r2, r1, r2
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e295      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L')
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b42      	cmp	r3, #66	; 0x42
 8001fd8:	d136      	bne.n	8002048 <HAL_UART_RxCpltCallback+0x464>
 8001fda:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	2b4c      	cmp	r3, #76	; 0x4c
 8001fe0:	d132      	bne.n	8002048 <HAL_UART_RxCpltCallback+0x464>
  { // BL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001fe2:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001fe4:	789b      	ldrb	r3, [r3, #2]
 8001fe6:	2b2d      	cmp	r3, #45	; 0x2d
 8001fe8:	d105      	bne.n	8001ff6 <HAL_UART_RxCpltCallback+0x412>
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8001fec:	78db      	ldrb	r3, [r3, #3]
 8001fee:	2b2d      	cmp	r3, #45	; 0x2d
 8001ff0:	d101      	bne.n	8001ff6 <HAL_UART_RxCpltCallback+0x412>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_UART_RxCpltCallback+0x414>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_UART_RxCpltCallback+0x4dc>)
 8001ffc:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cmdQ, 5 + (manualMode ? 0 : 4), val);
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_UART_RxCpltCallback+0x4dc>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_UART_RxCpltCallback+0x426>
 8002006:	2105      	movs	r1, #5
 8002008:	e000      	b.n	800200c <HAL_UART_RxCpltCallback+0x428>
 800200a:	2109      	movs	r1, #9
 800200c:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4a2d      	ldr	r2, [pc, #180]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	460a      	mov	r2, r1
 8002018:	711a      	strb	r2, [r3, #4]
 800201a:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	b291      	uxth	r1, r2
 8002022:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	460a      	mov	r2, r1
 800202a:	80da      	strh	r2, [r3, #6]
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8002034:	7892      	ldrb	r2, [r2, #2]
 8002036:	fb93 f1f2 	sdiv	r1, r3, r2
 800203a:	fb01 f202 	mul.w	r2, r1, r2
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e25a      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R')
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b42      	cmp	r3, #66	; 0x42
 800204e:	d13f      	bne.n	80020d0 <HAL_UART_RxCpltCallback+0x4ec>
 8002050:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8002052:	785b      	ldrb	r3, [r3, #1]
 8002054:	2b52      	cmp	r3, #82	; 0x52
 8002056:	d13b      	bne.n	80020d0 <HAL_UART_RxCpltCallback+0x4ec>
  { // BR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002058:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 800205a:	789b      	ldrb	r3, [r3, #2]
 800205c:	2b2d      	cmp	r3, #45	; 0x2d
 800205e:	d105      	bne.n	800206c <HAL_UART_RxCpltCallback+0x488>
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_UART_RxCpltCallback+0x4e8>)
 8002062:	78db      	ldrb	r3, [r3, #3]
 8002064:	2b2d      	cmp	r3, #45	; 0x2d
 8002066:	d101      	bne.n	800206c <HAL_UART_RxCpltCallback+0x488>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_UART_RxCpltCallback+0x48a>
 800206c:	2300      	movs	r3, #0
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_UART_RxCpltCallback+0x4dc>)
 8002072:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cmdQ, 6 + (manualMode ? 0 : 4), val);
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_UART_RxCpltCallback+0x4dc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_UART_RxCpltCallback+0x49c>
 800207c:	2106      	movs	r1, #6
 800207e:	e000      	b.n	8002082 <HAL_UART_RxCpltCallback+0x49e>
 8002080:	210a      	movs	r1, #10
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	460a      	mov	r2, r1
 800208e:	711a      	strb	r2, [r3, #4]
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	b291      	uxth	r1, r2
 8002098:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	460a      	mov	r2, r1
 80020a0:	80da      	strh	r2, [r3, #6]
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 80020aa:	7892      	ldrb	r2, [r2, #2]
 80020ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80020b0:	fb01 f202 	mul.w	r2, r1, r2
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_UART_RxCpltCallback+0x4e4>)
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e21f      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
 80020be:	bf00      	nop
 80020c0:	200004e0 	.word	0x200004e0
 80020c4:	20000136 	.word	0x20000136
 80020c8:	20000498 	.word	0x20000498
 80020cc:	2000048c 	.word	0x2000048c
  }
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L')
 80020d0:	4b97      	ldr	r3, [pc, #604]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b54      	cmp	r3, #84	; 0x54
 80020d6:	d121      	bne.n	800211c <HAL_UART_RxCpltCallback+0x538>
 80020d8:	4b95      	ldr	r3, [pc, #596]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	2b4c      	cmp	r3, #76	; 0x4c
 80020de:	d11d      	bne.n	800211c <HAL_UART_RxCpltCallback+0x538>
    __ADD_COMMAND(cmdQ, 11, val); // TL turn left max
 80020e0:	4b94      	ldr	r3, [pc, #592]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4a93      	ldr	r2, [pc, #588]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	220b      	movs	r2, #11
 80020ec:	711a      	strb	r2, [r3, #4]
 80020ee:	4b91      	ldr	r3, [pc, #580]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	b291      	uxth	r1, r2
 80020f6:	4a8f      	ldr	r2, [pc, #572]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	460a      	mov	r2, r1
 80020fe:	80da      	strh	r2, [r3, #6]
 8002100:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	4a8b      	ldr	r2, [pc, #556]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002108:	7892      	ldrb	r2, [r2, #2]
 800210a:	fb93 f1f2 	sdiv	r1, r3, r2
 800210e:	fb01 f202 	mul.w	r2, r1, r2
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b87      	ldr	r3, [pc, #540]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e1f0      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R')
 800211c:	4b84      	ldr	r3, [pc, #528]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b54      	cmp	r3, #84	; 0x54
 8002122:	d121      	bne.n	8002168 <HAL_UART_RxCpltCallback+0x584>
 8002124:	4b82      	ldr	r3, [pc, #520]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 8002126:	785b      	ldrb	r3, [r3, #1]
 8002128:	2b52      	cmp	r3, #82	; 0x52
 800212a:	d11d      	bne.n	8002168 <HAL_UART_RxCpltCallback+0x584>
    __ADD_COMMAND(cmdQ, 12, val); // TR turn right max
 800212c:	4b81      	ldr	r3, [pc, #516]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4a80      	ldr	r2, [pc, #512]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	220c      	movs	r2, #12
 8002138:	711a      	strb	r2, [r3, #4]
 800213a:	4b7e      	ldr	r3, [pc, #504]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	b291      	uxth	r1, r2
 8002142:	4a7c      	ldr	r2, [pc, #496]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	460a      	mov	r2, r1
 800214a:	80da      	strh	r2, [r3, #6]
 800214c:	4b79      	ldr	r3, [pc, #484]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a78      	ldr	r2, [pc, #480]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002154:	7892      	ldrb	r2, [r2, #2]
 8002156:	fb93 f1f2 	sdiv	r1, r3, r2
 800215a:	fb01 f202 	mul.w	r2, r1, r2
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b74      	ldr	r3, [pc, #464]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e1ca      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T')
 8002168:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b44      	cmp	r3, #68	; 0x44
 800216e:	d121      	bne.n	80021b4 <HAL_UART_RxCpltCallback+0x5d0>
 8002170:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	2b54      	cmp	r3, #84	; 0x54
 8002176:	d11d      	bne.n	80021b4 <HAL_UART_RxCpltCallback+0x5d0>
    __ADD_COMMAND(cmdQ, 14, val); // DT move until specified distance from obstacle
 8002178:	4b6e      	ldr	r3, [pc, #440]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4a6d      	ldr	r2, [pc, #436]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	220e      	movs	r2, #14
 8002184:	711a      	strb	r2, [r3, #4]
 8002186:	4b6b      	ldr	r3, [pc, #428]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	b291      	uxth	r1, r2
 800218e:	4a69      	ldr	r2, [pc, #420]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	460a      	mov	r2, r1
 8002196:	80da      	strh	r2, [r3, #6]
 8002198:	4b66      	ldr	r3, [pc, #408]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	4a65      	ldr	r2, [pc, #404]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80021a0:	7892      	ldrb	r2, [r2, #2]
 80021a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80021a6:	fb01 f202 	mul.w	r2, r1, r2
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e1a4      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'Z')
 80021b4:	4b5e      	ldr	r3, [pc, #376]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b44      	cmp	r3, #68	; 0x44
 80021ba:	d121      	bne.n	8002200 <HAL_UART_RxCpltCallback+0x61c>
 80021bc:	4b5c      	ldr	r3, [pc, #368]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	2b5a      	cmp	r3, #90	; 0x5a
 80021c2:	d11d      	bne.n	8002200 <HAL_UART_RxCpltCallback+0x61c>
    __ADD_COMMAND(cmdQ, 15, val); // DZ move until specified distance from obstacle, but zoomzoom
 80021c4:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4a5a      	ldr	r2, [pc, #360]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	220f      	movs	r2, #15
 80021d0:	711a      	strb	r2, [r3, #4]
 80021d2:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	b291      	uxth	r1, r2
 80021da:	4a56      	ldr	r2, [pc, #344]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	460a      	mov	r2, r1
 80021e2:	80da      	strh	r2, [r3, #6]
 80021e4:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	4a52      	ldr	r2, [pc, #328]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80021ec:	7892      	ldrb	r2, [r2, #2]
 80021ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80021f2:	fb01 f202 	mul.w	r2, r1, r2
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b4e      	ldr	r3, [pc, #312]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e17e      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'A')
 8002200:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b46      	cmp	r3, #70	; 0x46
 8002206:	d121      	bne.n	800224c <HAL_UART_RxCpltCallback+0x668>
 8002208:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	2b41      	cmp	r3, #65	; 0x41
 800220e:	d11d      	bne.n	800224c <HAL_UART_RxCpltCallback+0x668>
    __ADD_COMMAND(cmdQ, 88, val); // forward anti-clockwise rotation with variable
 8002210:	4b48      	ldr	r3, [pc, #288]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4a47      	ldr	r2, [pc, #284]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	2258      	movs	r2, #88	; 0x58
 800221c:	711a      	strb	r2, [r3, #4]
 800221e:	4b45      	ldr	r3, [pc, #276]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	b291      	uxth	r1, r2
 8002226:	4a43      	ldr	r2, [pc, #268]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	460a      	mov	r2, r1
 800222e:	80da      	strh	r2, [r3, #6]
 8002230:	4b40      	ldr	r3, [pc, #256]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	4a3f      	ldr	r2, [pc, #252]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002238:	7892      	ldrb	r2, [r2, #2]
 800223a:	fb93 f1f2 	sdiv	r1, r3, r2
 800223e:	fb01 f202 	mul.w	r2, r1, r2
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e158      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'C')
 800224c:	4b38      	ldr	r3, [pc, #224]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b46      	cmp	r3, #70	; 0x46
 8002252:	d121      	bne.n	8002298 <HAL_UART_RxCpltCallback+0x6b4>
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 8002256:	785b      	ldrb	r3, [r3, #1]
 8002258:	2b43      	cmp	r3, #67	; 0x43
 800225a:	d11d      	bne.n	8002298 <HAL_UART_RxCpltCallback+0x6b4>
    __ADD_COMMAND(cmdQ, 89, val); // forward clockwise rotation with variable
 800225c:	4b35      	ldr	r3, [pc, #212]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4a34      	ldr	r2, [pc, #208]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	2259      	movs	r2, #89	; 0x59
 8002268:	711a      	strb	r2, [r3, #4]
 800226a:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	b291      	uxth	r1, r2
 8002272:	4a30      	ldr	r2, [pc, #192]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	460a      	mov	r2, r1
 800227a:	80da      	strh	r2, [r3, #6]
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a2c      	ldr	r2, [pc, #176]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002284:	7892      	ldrb	r2, [r2, #2]
 8002286:	fb93 f1f2 	sdiv	r1, r3, r2
 800228a:	fb01 f202 	mul.w	r2, r1, r2
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e132      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'A')
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b42      	cmp	r3, #66	; 0x42
 800229e:	d121      	bne.n	80022e4 <HAL_UART_RxCpltCallback+0x700>
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 80022a2:	785b      	ldrb	r3, [r3, #1]
 80022a4:	2b41      	cmp	r3, #65	; 0x41
 80022a6:	d11d      	bne.n	80022e4 <HAL_UART_RxCpltCallback+0x700>
    __ADD_COMMAND(cmdQ, 90, val); // backward anti-clockwise rotation with variable
 80022a8:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4a21      	ldr	r2, [pc, #132]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	225a      	movs	r2, #90	; 0x5a
 80022b4:	711a      	strb	r2, [r3, #4]
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	b291      	uxth	r1, r2
 80022be:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	460a      	mov	r2, r1
 80022c6:	80da      	strh	r2, [r3, #6]
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80022d0:	7892      	ldrb	r2, [r2, #2]
 80022d2:	fb93 f1f2 	sdiv	r1, r3, r2
 80022d6:	fb01 f202 	mul.w	r2, r1, r2
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e10c      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'C')
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b42      	cmp	r3, #66	; 0x42
 80022ea:	d125      	bne.n	8002338 <HAL_UART_RxCpltCallback+0x754>
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_UART_RxCpltCallback+0x74c>)
 80022ee:	785b      	ldrb	r3, [r3, #1]
 80022f0:	2b43      	cmp	r3, #67	; 0x43
 80022f2:	d121      	bne.n	8002338 <HAL_UART_RxCpltCallback+0x754>
    __ADD_COMMAND(cmdQ, 91, val); // backward clockwise rotation with variable
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	225b      	movs	r2, #91	; 0x5b
 8002300:	711a      	strb	r2, [r3, #4]
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	b291      	uxth	r1, r2
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	460a      	mov	r2, r1
 8002312:	80da      	strh	r2, [r3, #6]
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800231c:	7892      	ldrb	r2, [r2, #2]
 800231e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002322:	fb01 f202 	mul.w	r2, r1, r2
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b02      	ldr	r3, [pc, #8]	; (8002334 <HAL_UART_RxCpltCallback+0x750>)
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e0e6      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
 8002330:	2000048c 	.word	0x2000048c
 8002334:	20000498 	.word	0x20000498
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'A')
 8002338:	4b88      	ldr	r3, [pc, #544]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b54      	cmp	r3, #84	; 0x54
 800233e:	d121      	bne.n	8002384 <HAL_UART_RxCpltCallback+0x7a0>
 8002340:	4b86      	ldr	r3, [pc, #536]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	2b41      	cmp	r3, #65	; 0x41
 8002346:	d11d      	bne.n	8002384 <HAL_UART_RxCpltCallback+0x7a0>
    __ADD_COMMAND(cmdQ, 92, val); // Turn A - Task 2 1st obstacle
 8002348:	4b85      	ldr	r3, [pc, #532]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4a84      	ldr	r2, [pc, #528]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	225c      	movs	r2, #92	; 0x5c
 8002354:	711a      	strb	r2, [r3, #4]
 8002356:	4b82      	ldr	r3, [pc, #520]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	b291      	uxth	r1, r2
 800235e:	4a80      	ldr	r2, [pc, #512]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	460a      	mov	r2, r1
 8002366:	80da      	strh	r2, [r3, #6]
 8002368:	4b7d      	ldr	r3, [pc, #500]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	4a7c      	ldr	r2, [pc, #496]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002370:	7892      	ldrb	r2, [r2, #2]
 8002372:	fb93 f1f2 	sdiv	r1, r3, r2
 8002376:	fb01 f202 	mul.w	r2, r1, r2
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b78      	ldr	r3, [pc, #480]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e0bc      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R')
 8002384:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b49      	cmp	r3, #73	; 0x49
 800238a:	d121      	bne.n	80023d0 <HAL_UART_RxCpltCallback+0x7ec>
 800238c:	4b73      	ldr	r3, [pc, #460]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	2b52      	cmp	r3, #82	; 0x52
 8002392:	d11d      	bne.n	80023d0 <HAL_UART_RxCpltCallback+0x7ec>
    __ADD_COMMAND(cmdQ, 93, val); // Robot move until IR overshoot - for debugging only
 8002394:	4b72      	ldr	r3, [pc, #456]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4a71      	ldr	r2, [pc, #452]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	225d      	movs	r2, #93	; 0x5d
 80023a0:	711a      	strb	r2, [r3, #4]
 80023a2:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	b291      	uxth	r1, r2
 80023aa:	4a6d      	ldr	r2, [pc, #436]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	460a      	mov	r2, r1
 80023b2:	80da      	strh	r2, [r3, #6]
 80023b4:	4b6a      	ldr	r3, [pc, #424]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	4a69      	ldr	r2, [pc, #420]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80023bc:	7892      	ldrb	r2, [r2, #2]
 80023be:	fb93 f1f2 	sdiv	r1, r3, r2
 80023c2:	fb01 f202 	mul.w	r2, r1, r2
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e096      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'C')
 80023d0:	4b62      	ldr	r3, [pc, #392]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b49      	cmp	r3, #73	; 0x49
 80023d6:	d121      	bne.n	800241c <HAL_UART_RxCpltCallback+0x838>
 80023d8:	4b60      	ldr	r3, [pc, #384]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	2b43      	cmp	r3, #67	; 0x43
 80023de:	d11d      	bne.n	800241c <HAL_UART_RxCpltCallback+0x838>
    __ADD_COMMAND(cmdQ, 94, val); // Robot move until IR detect close distance obstacle - for debugging only
 80023e0:	4b5f      	ldr	r3, [pc, #380]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4a5e      	ldr	r2, [pc, #376]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	225e      	movs	r2, #94	; 0x5e
 80023ec:	711a      	strb	r2, [r3, #4]
 80023ee:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	b291      	uxth	r1, r2
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	460a      	mov	r2, r1
 80023fe:	80da      	strh	r2, [r3, #6]
 8002400:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a56      	ldr	r2, [pc, #344]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002408:	7892      	ldrb	r2, [r2, #2]
 800240a:	fb93 f1f2 	sdiv	r1, r3, r2
 800240e:	fb01 f202 	mul.w	r2, r1, r2
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b52      	ldr	r3, [pc, #328]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e070      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'B')
 800241c:	4b4f      	ldr	r3, [pc, #316]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b54      	cmp	r3, #84	; 0x54
 8002422:	d121      	bne.n	8002468 <HAL_UART_RxCpltCallback+0x884>
 8002424:	4b4d      	ldr	r3, [pc, #308]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	2b42      	cmp	r3, #66	; 0x42
 800242a:	d11d      	bne.n	8002468 <HAL_UART_RxCpltCallback+0x884>
    __ADD_COMMAND(cmdQ, 95, val); // Turn B - Task 2 2nd obstacle
 800242c:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4a4b      	ldr	r2, [pc, #300]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	225f      	movs	r2, #95	; 0x5f
 8002438:	711a      	strb	r2, [r3, #4]
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	b291      	uxth	r1, r2
 8002442:	4a47      	ldr	r2, [pc, #284]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	460a      	mov	r2, r1
 800244a:	80da      	strh	r2, [r3, #6]
 800244c:	4b44      	ldr	r3, [pc, #272]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	4a43      	ldr	r2, [pc, #268]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002454:	7892      	ldrb	r2, [r2, #2]
 8002456:	fb93 f1f2 	sdiv	r1, r3, r2
 800245a:	fb01 f202 	mul.w	r2, r1, r2
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e04a      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'G' && aRxBuffer[1] == 'H')
 8002468:	4b3c      	ldr	r3, [pc, #240]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b47      	cmp	r3, #71	; 0x47
 800246e:	d121      	bne.n	80024b4 <HAL_UART_RxCpltCallback+0x8d0>
 8002470:	4b3a      	ldr	r3, [pc, #232]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 8002472:	785b      	ldrb	r3, [r3, #1]
 8002474:	2b48      	cmp	r3, #72	; 0x48
 8002476:	d11d      	bne.n	80024b4 <HAL_UART_RxCpltCallback+0x8d0>
    __ADD_COMMAND(cmdQ, 96, val); // Go Home - Task 2 go back to carpark
 8002478:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4a38      	ldr	r2, [pc, #224]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	2260      	movs	r2, #96	; 0x60
 8002484:	711a      	strb	r2, [r3, #4]
 8002486:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	b291      	uxth	r1, r2
 800248e:	4a34      	ldr	r2, [pc, #208]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	460a      	mov	r2, r1
 8002496:	80da      	strh	r2, [r3, #6]
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	4a30      	ldr	r2, [pc, #192]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80024a0:	7892      	ldrb	r2, [r2, #2]
 80024a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80024a6:	fb01 f202 	mul.w	r2, r1, r2
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e024      	b.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
  else if (aRxBuffer[0] == 'A' && aRxBuffer[1] == 'M')
 80024b4:	4b29      	ldr	r3, [pc, #164]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b41      	cmp	r3, #65	; 0x41
 80024ba:	d120      	bne.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 80024be:	785b      	ldrb	r3, [r3, #1]
 80024c0:	2b4d      	cmp	r3, #77	; 0x4d
 80024c2:	d11c      	bne.n	80024fe <HAL_UART_RxCpltCallback+0x91a>
    __ADD_COMMAND(cmdQ, 97, val); // Avocado Milkshake - use after Turn A to straighten the robot
 80024c4:	4b26      	ldr	r3, [pc, #152]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4a25      	ldr	r2, [pc, #148]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	2261      	movs	r2, #97	; 0x61
 80024d0:	711a      	strb	r2, [r3, #4]
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	b291      	uxth	r1, r2
 80024da:	4a21      	ldr	r2, [pc, #132]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	460a      	mov	r2, r1
 80024e2:	80da      	strh	r2, [r3, #6]
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80024ec:	7892      	ldrb	r2, [r2, #2]
 80024ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80024f2:	fb01 f202 	mul.w	r2, r1, r2
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 80024fc:	701a      	strb	r2, [r3, #0]
  if (!__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	429a      	cmp	r2, r3
 8002508:	d019      	beq.n	800253e <HAL_UART_RxCpltCallback+0x95a>
  {
    __READ_COMMAND(cmdQ, curCmd, rxMsg);
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800250c:	785b      	ldrb	r3, [r3, #1]
 800250e:	4a15      	ldr	r2, [pc, #84]	; (8002564 <HAL_UART_RxCpltCallback+0x980>)
 8002510:	4913      	ldr	r1, [pc, #76]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	3301      	adds	r3, #1
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002522:	7892      	ldrb	r2, [r2, #2]
 8002524:	fb93 f1f2 	sdiv	r1, r3, r2
 8002528:	fb01 f202 	mul.w	r2, r1, r2
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_UART_RxCpltCallback+0x97c>)
 8002532:	705a      	strb	r2, [r3, #1]
 8002534:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <HAL_UART_RxCpltCallback+0x984>)
 8002536:	210f      	movs	r1, #15
 8002538:	480c      	ldr	r0, [pc, #48]	; (800256c <HAL_UART_RxCpltCallback+0x988>)
 800253a:	f00d f853 	bl	800f5e4 <sniprintf>
  }

  // clear aRx buffer
  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <HAL_UART_RxCpltCallback+0x98c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_UART_RxCpltCallback+0x990>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b29b      	uxth	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	4903      	ldr	r1, [pc, #12]	; (800255c <HAL_UART_RxCpltCallback+0x978>)
 800254e:	4808      	ldr	r0, [pc, #32]	; (8002570 <HAL_UART_RxCpltCallback+0x98c>)
 8002550:	f008 ff5b 	bl	800b40a <HAL_UART_Receive_IT>
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	2000048c 	.word	0x2000048c
 8002560:	20000498 	.word	0x20000498
 8002564:	200004cc 	.word	0x200004cc
 8002568:	08010004 	.word	0x08010004
 800256c:	200004d0 	.word	0x200004d0
 8002570:	2000040c 	.word	0x2000040c
 8002574:	20000000 	.word	0x20000000

08002578 <PIDConfigInit>:

// pid
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	ed87 0a02 	vstr	s0, [r7, #8]
 8002584:	edc7 0a01 	vstr	s1, [r7, #4]
 8002588:	ed87 1a00 	vstr	s2, [r7]
  cfg->Kp = Kp;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	601a      	str	r2, [r3, #0]
  cfg->Ki = Ki;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	605a      	str	r2, [r3, #4]
  cfg->Kd = Kd;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	609a      	str	r2, [r3, #8]
  cfg->ek1 = 0;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <PIDConfigReset>:

void PIDConfigReset(PIDConfig *cfg)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HCSR04_Read>:

void HCSR04_Read(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ea:	481a      	ldr	r0, [pc, #104]	; (8002654 <HCSR04_Read+0x74>)
 80025ec:	f005 fb48 	bl	8007c80 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HCSR04_Read+0x78>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <HCSR04_Read+0x78>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	2b31      	cmp	r3, #49	; 0x31
 8002600:	d9fa      	bls.n	80025f8 <HCSR04_Read+0x18>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 8002602:	2201      	movs	r2, #1
 8002604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002608:	4812      	ldr	r0, [pc, #72]	; (8002654 <HCSR04_Read+0x74>)
 800260a:	f005 fb39 	bl	8007c80 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 10);                                            // wait for 10 us
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HCSR04_Read+0x78>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HCSR04_Read+0x78>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2b09      	cmp	r3, #9
 800261e:	d9fa      	bls.n	8002616 <HCSR04_Read+0x36>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin LOW
 8002620:	2200      	movs	r2, #0
 8002622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002626:	480b      	ldr	r0, [pc, #44]	; (8002654 <HCSR04_Read+0x74>)
 8002628:	f005 fb2a 	bl	8007c80 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HCSR04_Read+0x78>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2200      	movs	r2, #0
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HCSR04_Read+0x78>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b31      	cmp	r3, #49	; 0x31
 800263c:	d9fa      	bls.n	8002634 <HCSR04_Read+0x54>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <HCSR04_Read+0x7c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <HCSR04_Read+0x7c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0204 	orr.w	r2, r2, #4
 800264c:	60da      	str	r2, [r3, #12]
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	2000037c 	.word	0x2000037c
 800265c:	20000334 	.word	0x20000334

08002660 <StraightMovement>:

int8_t dir = 1;
int correction = 0;

void StraightMovement(const uint8_t speedMode)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af04      	add	r7, sp, #16
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]

  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 800266a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800266e:	9302      	str	r3, [sp, #8]
 8002670:	2302      	movs	r3, #2
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	4ba9      	ldr	r3, [pc, #676]	; (800291c <StraightMovement+0x2bc>)
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2301      	movs	r3, #1
 800267a:	2237      	movs	r2, #55	; 0x37
 800267c:	21d0      	movs	r1, #208	; 0xd0
 800267e:	48a8      	ldr	r0, [pc, #672]	; (8002920 <StraightMovement+0x2c0>)
 8002680:	f005 fd56 	bl	8008130 <HAL_I2C_Mem_Read>
 8002684:	4ba5      	ldr	r3, [pc, #660]	; (800291c <StraightMovement+0x2bc>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	b21a      	sxth	r2, r3
 800268c:	4ba3      	ldr	r3, [pc, #652]	; (800291c <StraightMovement+0x2bc>)
 800268e:	785b      	ldrb	r3, [r3, #1]
 8002690:	b21b      	sxth	r3, r3
 8002692:	4313      	orrs	r3, r2
 8002694:	b21a      	sxth	r2, r3
 8002696:	4ba3      	ldr	r3, [pc, #652]	; (8002924 <StraightMovement+0x2c4>)
 8002698:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 800269a:	4ba3      	ldr	r3, [pc, #652]	; (8002928 <StraightMovement+0x2c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	b25a      	sxtb	r2, r3
 80026b0:	4b9e      	ldr	r3, [pc, #632]	; (800292c <StraightMovement+0x2cc>)
 80026b2:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 80026b4:	4b9b      	ldr	r3, [pc, #620]	; (8002924 <StraightMovement+0x2c4>)
 80026b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ba:	f113 0f04 	cmn.w	r3, #4
 80026be:	db04      	blt.n	80026ca <StraightMovement+0x6a>
 80026c0:	4b98      	ldr	r3, [pc, #608]	; (8002924 <StraightMovement+0x2c4>)
 80026c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c6:	2b0b      	cmp	r3, #11
 80026c8:	dd07      	ble.n	80026da <StraightMovement+0x7a>
 80026ca:	4b96      	ldr	r3, [pc, #600]	; (8002924 <StraightMovement+0x2c4>)
 80026cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d8:	e001      	b.n	80026de <StraightMovement+0x7e>
 80026da:	eddf 7a95 	vldr	s15, [pc, #596]	; 8002930 <StraightMovement+0x2d0>
 80026de:	4b95      	ldr	r3, [pc, #596]	; (8002934 <StraightMovement+0x2d4>)
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026e8:	4b92      	ldr	r3, [pc, #584]	; (8002934 <StraightMovement+0x2d4>)
 80026ea:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d164      	bne.n	80027be <StraightMovement+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80026f4:	4b90      	ldr	r3, [pc, #576]	; (8002938 <StraightMovement+0x2d8>)
 80026f6:	ed93 7a00 	vldr	s14, [r3]
 80026fa:	4b8e      	ldr	r3, [pc, #568]	; (8002934 <StraightMovement+0x2d4>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002704:	4b8c      	ldr	r3, [pc, #560]	; (8002938 <StraightMovement+0x2d8>)
 8002706:	edd3 6a01 	vldr	s13, [r3, #4]
 800270a:	4b8b      	ldr	r3, [pc, #556]	; (8002938 <StraightMovement+0x2d8>)
 800270c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002718:	4b87      	ldr	r3, [pc, #540]	; (8002938 <StraightMovement+0x2d8>)
 800271a:	edd3 6a02 	vldr	s13, [r3, #8]
 800271e:	4b86      	ldr	r3, [pc, #536]	; (8002938 <StraightMovement+0x2d8>)
 8002720:	ed93 6a03 	vldr	s12, [r3, #12]
 8002724:	4b83      	ldr	r3, [pc, #524]	; (8002934 <StraightMovement+0x2d4>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800272e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800273a:	ee17 2a90 	vmov	r2, s15
 800273e:	4b7f      	ldr	r3, [pc, #508]	; (800293c <StraightMovement+0x2dc>)
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	4b7c      	ldr	r3, [pc, #496]	; (8002934 <StraightMovement+0x2d4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a7c      	ldr	r2, [pc, #496]	; (8002938 <StraightMovement+0x2d8>)
 8002748:	60d3      	str	r3, [r2, #12]
 800274a:	4b7b      	ldr	r3, [pc, #492]	; (8002938 <StraightMovement+0x2d8>)
 800274c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002750:	4b78      	ldr	r3, [pc, #480]	; (8002934 <StraightMovement+0x2d4>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275a:	4b77      	ldr	r3, [pc, #476]	; (8002938 <StraightMovement+0x2d8>)
 800275c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002760:	4b76      	ldr	r3, [pc, #472]	; (800293c <StraightMovement+0x2dc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002768:	dc06      	bgt.n	8002778 <StraightMovement+0x118>
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <StraightMovement+0x2dc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a74      	ldr	r2, [pc, #464]	; (8002940 <StraightMovement+0x2e0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	bfb8      	it	lt
 8002774:	4613      	movlt	r3, r2
 8002776:	e001      	b.n	800277c <StraightMovement+0x11c>
 8002778:	f44f 7316 	mov.w	r3, #600	; 0x258
 800277c:	4a6f      	ldr	r2, [pc, #444]	; (800293c <StraightMovement+0x2dc>)
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <StraightMovement+0x2cc>)
 8002782:	f993 3000 	ldrsb.w	r3, [r3]
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b6c      	ldr	r3, [pc, #432]	; (800293c <StraightMovement+0x2dc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	fb12 f303 	smulbb	r3, r2, r3
 8002792:	b29b      	uxth	r3, r3
 8002794:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <StraightMovement+0x2e4>)
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <StraightMovement+0x2cc>)
 80027a0:	f993 3000 	ldrsb.w	r3, [r3]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <StraightMovement+0x2dc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	fb12 f303 	smulbb	r3, r2, r3
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	4b63      	ldr	r3, [pc, #396]	; (8002948 <StraightMovement+0x2e8>)
 80027ba:	801a      	strh	r2, [r3, #0]
 80027bc:	e15a      	b.n	8002a74 <StraightMovement+0x414>
  else if (speedMode == SPEED_MODE_3)
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d164      	bne.n	800288e <StraightMovement+0x22e>
    __PID_SPEED_3(pidZoomZoom, angleNow, correction, dir, newDutyL, newDutyR);
 80027c4:	4b61      	ldr	r3, [pc, #388]	; (800294c <StraightMovement+0x2ec>)
 80027c6:	ed93 7a00 	vldr	s14, [r3]
 80027ca:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <StraightMovement+0x2d4>)
 80027cc:	edd3 7a00 	vldr	s15, [r3]
 80027d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d4:	4b5d      	ldr	r3, [pc, #372]	; (800294c <StraightMovement+0x2ec>)
 80027d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <StraightMovement+0x2ec>)
 80027dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80027e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e8:	4b58      	ldr	r3, [pc, #352]	; (800294c <StraightMovement+0x2ec>)
 80027ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80027ee:	4b57      	ldr	r3, [pc, #348]	; (800294c <StraightMovement+0x2ec>)
 80027f0:	ed93 6a03 	vldr	s12, [r3, #12]
 80027f4:	4b4f      	ldr	r3, [pc, #316]	; (8002934 <StraightMovement+0x2d4>)
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800280a:	ee17 2a90 	vmov	r2, s15
 800280e:	4b4b      	ldr	r3, [pc, #300]	; (800293c <StraightMovement+0x2dc>)
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	4b48      	ldr	r3, [pc, #288]	; (8002934 <StraightMovement+0x2d4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a4d      	ldr	r2, [pc, #308]	; (800294c <StraightMovement+0x2ec>)
 8002818:	60d3      	str	r3, [r2, #12]
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <StraightMovement+0x2ec>)
 800281c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002820:	4b44      	ldr	r3, [pc, #272]	; (8002934 <StraightMovement+0x2d4>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282a:	4b48      	ldr	r3, [pc, #288]	; (800294c <StraightMovement+0x2ec>)
 800282c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002830:	4b42      	ldr	r3, [pc, #264]	; (800293c <StraightMovement+0x2dc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002838:	dc06      	bgt.n	8002848 <StraightMovement+0x1e8>
 800283a:	4b40      	ldr	r3, [pc, #256]	; (800293c <StraightMovement+0x2dc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a44      	ldr	r2, [pc, #272]	; (8002950 <StraightMovement+0x2f0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	bfb8      	it	lt
 8002844:	4613      	movlt	r3, r2
 8002846:	e001      	b.n	800284c <StraightMovement+0x1ec>
 8002848:	f44f 7348 	mov.w	r3, #800	; 0x320
 800284c:	4a3b      	ldr	r2, [pc, #236]	; (800293c <StraightMovement+0x2dc>)
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b36      	ldr	r3, [pc, #216]	; (800292c <StraightMovement+0x2cc>)
 8002852:	f993 3000 	ldrsb.w	r3, [r3]
 8002856:	b29a      	uxth	r2, r3
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <StraightMovement+0x2dc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	fb12 f303 	smulbb	r3, r2, r3
 8002862:	b29b      	uxth	r3, r3
 8002864:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8002868:	b29a      	uxth	r2, r3
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <StraightMovement+0x2e4>)
 800286c:	801a      	strh	r2, [r3, #0]
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <StraightMovement+0x2cc>)
 8002870:	f993 3000 	ldrsb.w	r3, [r3]
 8002874:	b29a      	uxth	r2, r3
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <StraightMovement+0x2dc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	fb12 f303 	smulbb	r3, r2, r3
 8002880:	b29b      	uxth	r3, r3
 8002882:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <StraightMovement+0x2e8>)
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	e0f2      	b.n	8002a74 <StraightMovement+0x414>
  else if (speedMode == SPEED_MODE_2)
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2b02      	cmp	r3, #2
 8002892:	f040 8087 	bne.w	80029a4 <StraightMovement+0x344>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <StraightMovement+0x2f4>)
 8002898:	ed93 7a00 	vldr	s14, [r3]
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <StraightMovement+0x2d4>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a6:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <StraightMovement+0x2f4>)
 80028a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80028ac:	4b29      	ldr	r3, [pc, #164]	; (8002954 <StraightMovement+0x2f4>)
 80028ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80028b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <StraightMovement+0x2f4>)
 80028bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <StraightMovement+0x2f4>)
 80028c2:	ed93 6a03 	vldr	s12, [r3, #12]
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <StraightMovement+0x2d4>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80028d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028dc:	ee17 2a90 	vmov	r2, s15
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <StraightMovement+0x2dc>)
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <StraightMovement+0x2d4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <StraightMovement+0x2f4>)
 80028ea:	60d3      	str	r3, [r2, #12]
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <StraightMovement+0x2f4>)
 80028ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <StraightMovement+0x2d4>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <StraightMovement+0x2f4>)
 80028fe:	edc3 7a04 	vstr	s15, [r3, #16]
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <StraightMovement+0x2dc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800290a:	dc27      	bgt.n	800295c <StraightMovement+0x2fc>
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <StraightMovement+0x2dc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a11      	ldr	r2, [pc, #68]	; (8002958 <StraightMovement+0x2f8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	bfb8      	it	lt
 8002916:	4613      	movlt	r3, r2
 8002918:	e022      	b.n	8002960 <StraightMovement+0x300>
 800291a:	bf00      	nop
 800291c:	200004ec 	.word	0x200004ec
 8002920:	20000250 	.word	0x20000250
 8002924:	200004ee 	.word	0x200004ee
 8002928:	200002ec 	.word	0x200002ec
 800292c:	20000140 	.word	0x20000140
 8002930:	00000000 	.word	0x00000000
 8002934:	200004e8 	.word	0x200004e8
 8002938:	20000518 	.word	0x20000518
 800293c:	20000578 	.word	0x20000578
 8002940:	fffffda8 	.word	0xfffffda8
 8002944:	200004f0 	.word	0x200004f0
 8002948:	200004f2 	.word	0x200004f2
 800294c:	20000540 	.word	0x20000540
 8002950:	fffffce0 	.word	0xfffffce0
 8002954:	2000052c 	.word	0x2000052c
 8002958:	fffffd44 	.word	0xfffffd44
 800295c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002960:	4a4b      	ldr	r2, [pc, #300]	; (8002a90 <StraightMovement+0x430>)
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <StraightMovement+0x434>)
 8002966:	f993 3000 	ldrsb.w	r3, [r3]
 800296a:	b29a      	uxth	r2, r3
 800296c:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <StraightMovement+0x430>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	fb12 f303 	smulbb	r3, r2, r3
 8002976:	b29b      	uxth	r3, r3
 8002978:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800297c:	b29a      	uxth	r2, r3
 800297e:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <StraightMovement+0x438>)
 8002980:	801a      	strh	r2, [r3, #0]
 8002982:	4b44      	ldr	r3, [pc, #272]	; (8002a94 <StraightMovement+0x434>)
 8002984:	f993 3000 	ldrsb.w	r3, [r3]
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <StraightMovement+0x430>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	fb12 f303 	smulbb	r3, r2, r3
 8002994:	b29b      	uxth	r3, r3
 8002996:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 800299a:	3308      	adds	r3, #8
 800299c:	b29a      	uxth	r2, r3
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <StraightMovement+0x43c>)
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	e067      	b.n	8002a74 <StraightMovement+0x414>
  else if (speedMode == SPEED_MODE_1)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d164      	bne.n	8002a74 <StraightMovement+0x414>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <StraightMovement+0x440>)
 80029ac:	ed93 7a00 	vldr	s14, [r3]
 80029b0:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <StraightMovement+0x444>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ba:	4b39      	ldr	r3, [pc, #228]	; (8002aa0 <StraightMovement+0x440>)
 80029bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <StraightMovement+0x440>)
 80029c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80029c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ce:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <StraightMovement+0x440>)
 80029d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <StraightMovement+0x440>)
 80029d6:	ed93 6a03 	vldr	s12, [r3, #12]
 80029da:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <StraightMovement+0x444>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80029e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f0:	ee17 2a90 	vmov	r2, s15
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <StraightMovement+0x430>)
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <StraightMovement+0x444>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <StraightMovement+0x440>)
 80029fe:	60d3      	str	r3, [r2, #12]
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <StraightMovement+0x440>)
 8002a02:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a06:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <StraightMovement+0x444>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a10:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <StraightMovement+0x440>)
 8002a12:	edc3 7a04 	vstr	s15, [r3, #16]
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <StraightMovement+0x430>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002a1e:	dc06      	bgt.n	8002a2e <StraightMovement+0x3ce>
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <StraightMovement+0x430>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <StraightMovement+0x448>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	bfb8      	it	lt
 8002a2a:	4613      	movlt	r3, r2
 8002a2c:	e001      	b.n	8002a32 <StraightMovement+0x3d2>
 8002a2e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <StraightMovement+0x430>)
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <StraightMovement+0x434>)
 8002a38:	f993 3000 	ldrsb.w	r3, [r3]
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <StraightMovement+0x430>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	fb12 f303 	smulbb	r3, r2, r3
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <StraightMovement+0x438>)
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <StraightMovement+0x434>)
 8002a56:	f993 3000 	ldrsb.w	r3, [r3]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <StraightMovement+0x430>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	fb12 f303 	smulbb	r3, r2, r3
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <StraightMovement+0x43c>)
 8002a72:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <StraightMovement+0x438>)
 8002a76:	881a      	ldrh	r2, [r3, #0]
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <StraightMovement+0x44c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <StraightMovement+0x43c>)
 8002a80:	881a      	ldrh	r2, [r3, #0]
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <StraightMovement+0x44c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000578 	.word	0x20000578
 8002a94:	20000140 	.word	0x20000140
 8002a98:	200004f0 	.word	0x200004f0
 8002a9c:	200004f2 	.word	0x200004f2
 8002aa0:	20000504 	.word	0x20000504
 8002aa4:	200004e8 	.word	0x200004e8
 8002aa8:	fffffd44 	.word	0xfffffd44
 8002aac:	200003c4 	.word	0x200003c4

08002ab0 <RobotMoveDistance>:
 * @param targetDist Pointer to the target distance to move.
 * @param dir The direction to move the robot in.
 * @param speedMode The speed mode to use for the movement.
 */
void RobotMoveDistance(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
 8002abc:	4613      	mov	r3, r2
 8002abe:	70bb      	strb	r3, [r7, #2]
  angleNow = 0;
 8002ac0:	4ba3      	ldr	r3, [pc, #652]	; (8002d50 <RobotMoveDistance+0x2a0>)
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
  gyroZ = 0; // reset angle for PID
 8002ac8:	4ba2      	ldr	r3, [pc, #648]	; (8002d54 <RobotMoveDistance+0x2a4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 8002ace:	48a2      	ldr	r0, [pc, #648]	; (8002d58 <RobotMoveDistance+0x2a8>)
 8002ad0:	f7ff fd73 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8002ad4:	48a1      	ldr	r0, [pc, #644]	; (8002d5c <RobotMoveDistance+0x2ac>)
 8002ad6:	f7ff fd70 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8002ada:	48a1      	ldr	r0, [pc, #644]	; (8002d60 <RobotMoveDistance+0x2b0>)
 8002adc:	f7ff fd6d 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidZoomZoom);
 8002ae0:	48a0      	ldr	r0, [pc, #640]	; (8002d64 <RobotMoveDistance+0x2b4>)
 8002ae2:	f7ff fd6a 	bl	80025ba <PIDConfigReset>
  curDistTick = 0;
 8002ae6:	4ba0      	ldr	r3, [pc, #640]	; (8002d68 <RobotMoveDistance+0x2b8>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	801a      	strh	r2, [r3, #0]
  dist_dL = 0;
 8002aec:	4b9f      	ldr	r3, [pc, #636]	; (8002d6c <RobotMoveDistance+0x2bc>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	801a      	strh	r2, [r3, #0]
  __GET_TARGETTICK(*targetDist, targetDistTick);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fd1e 	bl	8000538 <__aeabi_f2d>
 8002afc:	a38e      	add	r3, pc, #568	; (adr r3, 8002d38 <RobotMoveDistance+0x288>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fd71 	bl	80005e8 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	a38c      	add	r3, pc, #560	; (adr r3, 8002d40 <RobotMoveDistance+0x290>)
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	f7fd fbb0 	bl	8000278 <__aeabi_dsub>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	4b92      	ldr	r3, [pc, #584]	; (8002d70 <RobotMoveDistance+0x2c0>)
 8002b26:	f7fd fe89 	bl	800083c <__aeabi_ddiv>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	4b8f      	ldr	r3, [pc, #572]	; (8002d74 <RobotMoveDistance+0x2c4>)
 8002b38:	f7fd fd56 	bl	80005e8 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	4b8b      	ldr	r3, [pc, #556]	; (8002d78 <RobotMoveDistance+0x2c8>)
 8002b4a:	f7fd fb95 	bl	8000278 <__aeabi_dsub>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f7fd ffe1 	bl	8000b1c <__aeabi_d2uiz>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	4b87      	ldr	r3, [pc, #540]	; (8002d7c <RobotMoveDistance+0x2cc>)
 8002b60:	801a      	strh	r2, [r3, #0]

  last_curTask_tick = HAL_GetTick();
 8002b62:	f004 f94d 	bl	8006e00 <HAL_GetTick>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4a85      	ldr	r2, [pc, #532]	; (8002d80 <RobotMoveDistance+0x2d0>)
 8002b6a:	6013      	str	r3, [r2, #0]
  __SET_MOTOR_DIRECTION(dir);
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf0c      	ite	eq
 8002b72:	2301      	moveq	r3, #1
 8002b74:	2300      	movne	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	4881      	ldr	r0, [pc, #516]	; (8002d84 <RobotMoveDistance+0x2d4>)
 8002b7e:	f005 f87f 	bl	8007c80 <HAL_GPIO_WritePin>
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2108      	movs	r1, #8
 8002b92:	487c      	ldr	r0, [pc, #496]	; (8002d84 <RobotMoveDistance+0x2d4>)
 8002b94:	f005 f874 	bl	8007c80 <HAL_GPIO_WritePin>
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	4876      	ldr	r0, [pc, #472]	; (8002d84 <RobotMoveDistance+0x2d4>)
 8002baa:	f005 f869 	bl	8007c80 <HAL_GPIO_WritePin>
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2110      	movs	r1, #16
 8002bbe:	4871      	ldr	r0, [pc, #452]	; (8002d84 <RobotMoveDistance+0x2d4>)
 8002bc0:	f005 f85e 	bl	8007c80 <HAL_GPIO_WritePin>
  __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002bc4:	4b70      	ldr	r3, [pc, #448]	; (8002d88 <RobotMoveDistance+0x2d8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	; (8002d8c <RobotMoveDistance+0x2dc>)
 8002bce:	801a      	strh	r2, [r3, #0]
  do
  {

    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002bd0:	4b6d      	ldr	r3, [pc, #436]	; (8002d88 <RobotMoveDistance+0x2d8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <RobotMoveDistance+0x2d8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d117      	bne.n	8002c16 <RobotMoveDistance+0x166>
 8002be6:	4b69      	ldr	r3, [pc, #420]	; (8002d8c <RobotMoveDistance+0x2dc>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d806      	bhi.n	8002c00 <RobotMoveDistance+0x150>
 8002bf2:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <RobotMoveDistance+0x2dc>)
 8002bf4:	881a      	ldrh	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	e007      	b.n	8002c10 <RobotMoveDistance+0x160>
 8002c00:	4b62      	ldr	r3, [pc, #392]	; (8002d8c <RobotMoveDistance+0x2dc>)
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <RobotMoveDistance+0x2bc>)
 8002c12:	8013      	strh	r3, [r2, #0]
 8002c14:	e016      	b.n	8002c44 <RobotMoveDistance+0x194>
 8002c16:	4b5d      	ldr	r3, [pc, #372]	; (8002d8c <RobotMoveDistance+0x2dc>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d306      	bcc.n	8002c30 <RobotMoveDistance+0x180>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <RobotMoveDistance+0x2dc>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	e007      	b.n	8002c40 <RobotMoveDistance+0x190>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	4b55      	ldr	r3, [pc, #340]	; (8002d8c <RobotMoveDistance+0x2dc>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <RobotMoveDistance+0x2bc>)
 8002c42:	8013      	strh	r3, [r2, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <RobotMoveDistance+0x2dc>)
 8002c4a:	801a      	strh	r2, [r3, #0]
    curDistTick += dist_dL;
 8002c4c:	4b46      	ldr	r3, [pc, #280]	; (8002d68 <RobotMoveDistance+0x2b8>)
 8002c4e:	881a      	ldrh	r2, [r3, #0]
 8002c50:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <RobotMoveDistance+0x2bc>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <RobotMoveDistance+0x2b8>)
 8002c5a:	801a      	strh	r2, [r3, #0]
    if (curDistTick >= targetDistTick)
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <RobotMoveDistance+0x2b8>)
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <RobotMoveDistance+0x2cc>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f080 80a8 	bcs.w	8002dba <RobotMoveDistance+0x30a>
      break;

    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002c6a:	f004 f8c9 	bl	8006e00 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <RobotMoveDistance+0x2d0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b09      	cmp	r3, #9
 8002c78:	d9aa      	bls.n	8002bd0 <RobotMoveDistance+0x120>
    {
      if (speedMode == SPEED_MODE_T)
 8002c7a:	78bb      	ldrb	r3, [r7, #2]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <RobotMoveDistance+0x1d8>
      {
        StraightMovement(SPEED_MODE_T);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7ff fced 	bl	8002660 <StraightMovement>
 8002c86:	e092      	b.n	8002dae <RobotMoveDistance+0x2fe>
      }
      else
      {
        speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002c88:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <RobotMoveDistance+0x2b8>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <RobotMoveDistance+0x2cc>)
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bfb8      	it	lt
 8002c98:	425b      	neglt	r3, r3
 8002c9a:	4a3d      	ldr	r2, [pc, #244]	; (8002d90 <RobotMoveDistance+0x2e0>)
 8002c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8002ca0:	11d2      	asrs	r2, r2, #7
 8002ca2:	17db      	asrs	r3, r3, #31
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cae:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <RobotMoveDistance+0x2e4>)
 8002cb0:	edc3 7a00 	vstr	s15, [r3]
        if (speedMode == SPEED_MODE_1)
 8002cb4:	78bb      	ldrb	r3, [r7, #2]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d11e      	bne.n	8002cf8 <RobotMoveDistance+0x248>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <RobotMoveDistance+0x2e4>)
 8002cbc:	edd3 7a00 	vldr	s15, [r3]
 8002cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	dd02      	ble.n	8002cd4 <RobotMoveDistance+0x224>
 8002cce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002cd2:	e00e      	b.n	8002cf2 <RobotMoveDistance+0x242>
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <RobotMoveDistance+0x2e4>)
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	d502      	bpl.n	8002cee <RobotMoveDistance+0x23e>
 8002ce8:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002cec:	e001      	b.n	8002cf2 <RobotMoveDistance+0x242>
 8002cee:	4b29      	ldr	r3, [pc, #164]	; (8002d94 <RobotMoveDistance+0x2e4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <RobotMoveDistance+0x2e4>)
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e055      	b.n	8002da4 <RobotMoveDistance+0x2f4>
        else if (speedMode == SPEED_MODE_2)
 8002cf8:	78bb      	ldrb	r3, [r7, #2]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d152      	bne.n	8002da4 <RobotMoveDistance+0x2f4>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002cfe:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <RobotMoveDistance+0x2e4>)
 8002d00:	edd3 7a00 	vldr	s15, [r3]
 8002d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	dd02      	ble.n	8002d18 <RobotMoveDistance+0x268>
 8002d12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d16:	e043      	b.n	8002da0 <RobotMoveDistance+0x2f0>
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <RobotMoveDistance+0x2e4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc0b 	bl	8000538 <__aeabi_f2d>
 8002d22:	a309      	add	r3, pc, #36	; (adr r3, 8002d48 <RobotMoveDistance+0x298>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fed0 	bl	8000acc <__aeabi_dcmplt>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d034      	beq.n	8002d9c <RobotMoveDistance+0x2ec>
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <RobotMoveDistance+0x2e8>)
 8002d34:	e034      	b.n	8002da0 <RobotMoveDistance+0x2f0>
 8002d36:	bf00      	nop
 8002d38:	fc66b22a 	.word	0xfc66b22a
 8002d3c:	3ff266ac 	.word	0x3ff266ac
 8002d40:	bb2526f8 	.word	0xbb2526f8
 8002d44:	3feee3d4 	.word	0x3feee3d4
 8002d48:	9999999a 	.word	0x9999999a
 8002d4c:	3fd99999 	.word	0x3fd99999
 8002d50:	200004e8 	.word	0x200004e8
 8002d54:	200004ee 	.word	0x200004ee
 8002d58:	20000518 	.word	0x20000518
 8002d5c:	20000504 	.word	0x20000504
 8002d60:	2000052c 	.word	0x2000052c
 8002d64:	20000540 	.word	0x20000540
 8002d68:	200004fc 	.word	0x200004fc
 8002d6c:	20000500 	.word	0x20000500
 8002d70:	40340000 	.word	0x40340000
 8002d74:	4094a000 	.word	0x4094a000
 8002d78:	40240000 	.word	0x40240000
 8002d7c:	200004fe 	.word	0x200004fe
 8002d80:	200004f4 	.word	0x200004f4
 8002d84:	40020000 	.word	0x40020000
 8002d88:	200002ec 	.word	0x200002ec
 8002d8c:	20000502 	.word	0x20000502
 8002d90:	21195767 	.word	0x21195767
 8002d94:	20000138 	.word	0x20000138
 8002d98:	3ecccccd 	.word	0x3ecccccd
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <RobotMoveDistance+0x324>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <RobotMoveDistance+0x324>)
 8002da2:	6013      	str	r3, [r2, #0]
        StraightMovementWithSpeedScale(speedMode, &speedScale);
 8002da4:	78bb      	ldrb	r3, [r7, #2]
 8002da6:	490b      	ldr	r1, [pc, #44]	; (8002dd4 <RobotMoveDistance+0x324>)
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f819 	bl	8002de0 <StraightMovementWithSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8002dae:	f004 f827 	bl	8006e00 <HAL_GetTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <RobotMoveDistance+0x328>)
 8002db6:	6013      	str	r3, [r2, #0]
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002db8:	e70a      	b.n	8002bd0 <RobotMoveDistance+0x120>
      break;
 8002dba:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002dbc:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <RobotMoveDistance+0x32c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <RobotMoveDistance+0x32c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000138 	.word	0x20000138
 8002dd8:	200004f4 	.word	0x200004f4
 8002ddc:	200003c4 	.word	0x200003c4

08002de0 <StraightMovementWithSpeedScale>:
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
}

void StraightMovementWithSpeedScale(const uint8_t speedMode, float *speedScale)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af04      	add	r7, sp, #16
 8002de6:	4603      	mov	r3, r0
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 8002dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002df0:	9302      	str	r3, [sp, #8]
 8002df2:	2302      	movs	r3, #2
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	4baa      	ldr	r3, [pc, #680]	; (80030a0 <StraightMovementWithSpeedScale+0x2c0>)
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	2237      	movs	r2, #55	; 0x37
 8002dfe:	21d0      	movs	r1, #208	; 0xd0
 8002e00:	48a8      	ldr	r0, [pc, #672]	; (80030a4 <StraightMovementWithSpeedScale+0x2c4>)
 8002e02:	f005 f995 	bl	8008130 <HAL_I2C_Mem_Read>
 8002e06:	4ba6      	ldr	r3, [pc, #664]	; (80030a0 <StraightMovementWithSpeedScale+0x2c0>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	b21a      	sxth	r2, r3
 8002e0e:	4ba4      	ldr	r3, [pc, #656]	; (80030a0 <StraightMovementWithSpeedScale+0x2c0>)
 8002e10:	785b      	ldrb	r3, [r3, #1]
 8002e12:	b21b      	sxth	r3, r3
 8002e14:	4313      	orrs	r3, r2
 8002e16:	b21a      	sxth	r2, r3
 8002e18:	4ba3      	ldr	r3, [pc, #652]	; (80030a8 <StraightMovementWithSpeedScale+0x2c8>)
 8002e1a:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 8002e1c:	4ba3      	ldr	r3, [pc, #652]	; (80030ac <StraightMovementWithSpeedScale+0x2cc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d101      	bne.n	8002e2e <StraightMovementWithSpeedScale+0x4e>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	e001      	b.n	8002e32 <StraightMovementWithSpeedScale+0x52>
 8002e2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e32:	4b9f      	ldr	r3, [pc, #636]	; (80030b0 <StraightMovementWithSpeedScale+0x2d0>)
 8002e34:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002e36:	4b9c      	ldr	r3, [pc, #624]	; (80030a8 <StraightMovementWithSpeedScale+0x2c8>)
 8002e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3c:	f113 0f04 	cmn.w	r3, #4
 8002e40:	db04      	blt.n	8002e4c <StraightMovementWithSpeedScale+0x6c>
 8002e42:	4b99      	ldr	r3, [pc, #612]	; (80030a8 <StraightMovementWithSpeedScale+0x2c8>)
 8002e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e48:	2b0b      	cmp	r3, #11
 8002e4a:	dd07      	ble.n	8002e5c <StraightMovementWithSpeedScale+0x7c>
 8002e4c:	4b96      	ldr	r3, [pc, #600]	; (80030a8 <StraightMovementWithSpeedScale+0x2c8>)
 8002e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5a:	e001      	b.n	8002e60 <StraightMovementWithSpeedScale+0x80>
 8002e5c:	eddf 7a95 	vldr	s15, [pc, #596]	; 80030b4 <StraightMovementWithSpeedScale+0x2d4>
 8002e60:	4b95      	ldr	r3, [pc, #596]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002e62:	ed93 7a00 	vldr	s14, [r3]
 8002e66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e6a:	4b93      	ldr	r3, [pc, #588]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002e6c:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d165      	bne.n	8002f42 <StraightMovementWithSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002e76:	4b91      	ldr	r3, [pc, #580]	; (80030bc <StraightMovementWithSpeedScale+0x2dc>)
 8002e78:	ed93 7a00 	vldr	s14, [r3]
 8002e7c:	4b8e      	ldr	r3, [pc, #568]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e86:	4b8d      	ldr	r3, [pc, #564]	; (80030bc <StraightMovementWithSpeedScale+0x2dc>)
 8002e88:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e8c:	4b8b      	ldr	r3, [pc, #556]	; (80030bc <StraightMovementWithSpeedScale+0x2dc>)
 8002e8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9a:	4b88      	ldr	r3, [pc, #544]	; (80030bc <StraightMovementWithSpeedScale+0x2dc>)
 8002e9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ea0:	4b86      	ldr	r3, [pc, #536]	; (80030bc <StraightMovementWithSpeedScale+0x2dc>)
 8002ea2:	ed93 6a03 	vldr	s12, [r3, #12]
 8002ea6:	4b84      	ldr	r3, [pc, #528]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ebc:	ee17 2a90 	vmov	r2, s15
 8002ec0:	4b7f      	ldr	r3, [pc, #508]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	4b7c      	ldr	r3, [pc, #496]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a7c      	ldr	r2, [pc, #496]	; (80030bc <StraightMovementWithSpeedScale+0x2dc>)
 8002eca:	60d3      	str	r3, [r2, #12]
 8002ecc:	4b7b      	ldr	r3, [pc, #492]	; (80030bc <StraightMovementWithSpeedScale+0x2dc>)
 8002ece:	ed93 7a04 	vldr	s14, [r3, #16]
 8002ed2:	4b79      	ldr	r3, [pc, #484]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002edc:	4b77      	ldr	r3, [pc, #476]	; (80030bc <StraightMovementWithSpeedScale+0x2dc>)
 8002ede:	edc3 7a04 	vstr	s15, [r3, #16]
 8002ee2:	4b77      	ldr	r3, [pc, #476]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002eea:	dc06      	bgt.n	8002efa <StraightMovementWithSpeedScale+0x11a>
 8002eec:	4b74      	ldr	r3, [pc, #464]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a74      	ldr	r2, [pc, #464]	; (80030c4 <StraightMovementWithSpeedScale+0x2e4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	bfb8      	it	lt
 8002ef6:	4613      	movlt	r3, r2
 8002ef8:	e001      	b.n	8002efe <StraightMovementWithSpeedScale+0x11e>
 8002efa:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002efe:	4a70      	ldr	r2, [pc, #448]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b6b      	ldr	r3, [pc, #428]	; (80030b0 <StraightMovementWithSpeedScale+0x2d0>)
 8002f04:	f993 3000 	ldrsb.w	r3, [r3]
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	fb12 f303 	smulbb	r3, r2, r3
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <StraightMovementWithSpeedScale+0x2e8>)
 8002f1e:	801a      	strh	r2, [r3, #0]
 8002f20:	4b63      	ldr	r3, [pc, #396]	; (80030b0 <StraightMovementWithSpeedScale+0x2d0>)
 8002f22:	f993 3000 	ldrsb.w	r3, [r3]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	fb12 f303 	smulbb	r3, r2, r3
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002f38:	330c      	adds	r3, #12
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	4b63      	ldr	r3, [pc, #396]	; (80030cc <StraightMovementWithSpeedScale+0x2ec>)
 8002f3e:	801a      	strh	r2, [r3, #0]
 8002f40:	e0ee      	b.n	8003120 <StraightMovementWithSpeedScale+0x340>
  else if (speedMode == SPEED_MODE_2)
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d165      	bne.n	8003014 <StraightMovementWithSpeedScale+0x234>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002f48:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <StraightMovementWithSpeedScale+0x2f0>)
 8002f4a:	ed93 7a00 	vldr	s14, [r3]
 8002f4e:	4b5a      	ldr	r3, [pc, #360]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f58:	4b5d      	ldr	r3, [pc, #372]	; (80030d0 <StraightMovementWithSpeedScale+0x2f0>)
 8002f5a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f5e:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <StraightMovementWithSpeedScale+0x2f0>)
 8002f60:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f6c:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <StraightMovementWithSpeedScale+0x2f0>)
 8002f6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f72:	4b57      	ldr	r3, [pc, #348]	; (80030d0 <StraightMovementWithSpeedScale+0x2f0>)
 8002f74:	ed93 6a03 	vldr	s12, [r3, #12]
 8002f78:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8e:	ee17 2a90 	vmov	r2, s15
 8002f92:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	4b48      	ldr	r3, [pc, #288]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a4d      	ldr	r2, [pc, #308]	; (80030d0 <StraightMovementWithSpeedScale+0x2f0>)
 8002f9c:	60d3      	str	r3, [r2, #12]
 8002f9e:	4b4c      	ldr	r3, [pc, #304]	; (80030d0 <StraightMovementWithSpeedScale+0x2f0>)
 8002fa0:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fa4:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fae:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <StraightMovementWithSpeedScale+0x2f0>)
 8002fb0:	edc3 7a04 	vstr	s15, [r3, #16]
 8002fb4:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002fbc:	dc06      	bgt.n	8002fcc <StraightMovementWithSpeedScale+0x1ec>
 8002fbe:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a40      	ldr	r2, [pc, #256]	; (80030c4 <StraightMovementWithSpeedScale+0x2e4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bfb8      	it	lt
 8002fc8:	4613      	movlt	r3, r2
 8002fca:	e001      	b.n	8002fd0 <StraightMovementWithSpeedScale+0x1f0>
 8002fcc:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002fd0:	4a3b      	ldr	r2, [pc, #236]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <StraightMovementWithSpeedScale+0x2d0>)
 8002fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	4b38      	ldr	r3, [pc, #224]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	fb12 f303 	smulbb	r3, r2, r3
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <StraightMovementWithSpeedScale+0x2e8>)
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <StraightMovementWithSpeedScale+0x2d0>)
 8002ff4:	f993 3000 	ldrsb.w	r3, [r3]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	fb12 f303 	smulbb	r3, r2, r3
 8003004:	b29b      	uxth	r3, r3
 8003006:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 800300a:	3308      	adds	r3, #8
 800300c:	b29a      	uxth	r2, r3
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <StraightMovementWithSpeedScale+0x2ec>)
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	e085      	b.n	8003120 <StraightMovementWithSpeedScale+0x340>
  else if (speedMode == SPEED_MODE_3)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	2b03      	cmp	r3, #3
 8003018:	f040 8082 	bne.w	8003120 <StraightMovementWithSpeedScale+0x340>
    __PID_SPEED_3(pidZoomZoom, angleNow, correction, dir, newDutyL, newDutyR);
 800301c:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <StraightMovementWithSpeedScale+0x2f4>)
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800302c:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <StraightMovementWithSpeedScale+0x2f4>)
 800302e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <StraightMovementWithSpeedScale+0x2f4>)
 8003034:	edd3 7a04 	vldr	s15, [r3, #16]
 8003038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <StraightMovementWithSpeedScale+0x2f4>)
 8003042:	edd3 6a02 	vldr	s13, [r3, #8]
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <StraightMovementWithSpeedScale+0x2f4>)
 8003048:	ed93 6a03 	vldr	s12, [r3, #12]
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800305a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003062:	ee17 2a90 	vmov	r2, s15
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <StraightMovementWithSpeedScale+0x2f4>)
 8003070:	60d3      	str	r3, [r2, #12]
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <StraightMovementWithSpeedScale+0x2f4>)
 8003074:	ed93 7a04 	vldr	s14, [r3, #16]
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <StraightMovementWithSpeedScale+0x2d8>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <StraightMovementWithSpeedScale+0x2f4>)
 8003084:	edc3 7a04 	vstr	s15, [r3, #16]
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003090:	dc24      	bgt.n	80030dc <StraightMovementWithSpeedScale+0x2fc>
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <StraightMovementWithSpeedScale+0x2e0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <StraightMovementWithSpeedScale+0x2f8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	bfb8      	it	lt
 800309c:	4613      	movlt	r3, r2
 800309e:	e01f      	b.n	80030e0 <StraightMovementWithSpeedScale+0x300>
 80030a0:	200004ec 	.word	0x200004ec
 80030a4:	20000250 	.word	0x20000250
 80030a8:	200004ee 	.word	0x200004ee
 80030ac:	200002ec 	.word	0x200002ec
 80030b0:	20000140 	.word	0x20000140
 80030b4:	00000000 	.word	0x00000000
 80030b8:	200004e8 	.word	0x200004e8
 80030bc:	20000504 	.word	0x20000504
 80030c0:	20000578 	.word	0x20000578
 80030c4:	fffffd44 	.word	0xfffffd44
 80030c8:	200004f0 	.word	0x200004f0
 80030cc:	200004f2 	.word	0x200004f2
 80030d0:	2000052c 	.word	0x2000052c
 80030d4:	20000540 	.word	0x20000540
 80030d8:	fffffce0 	.word	0xfffffce0
 80030dc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80030e0:	4a23      	ldr	r2, [pc, #140]	; (8003170 <StraightMovementWithSpeedScale+0x390>)
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b23      	ldr	r3, [pc, #140]	; (8003174 <StraightMovementWithSpeedScale+0x394>)
 80030e6:	f993 3000 	ldrsb.w	r3, [r3]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <StraightMovementWithSpeedScale+0x390>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	fb12 f303 	smulbb	r3, r2, r3
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <StraightMovementWithSpeedScale+0x398>)
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <StraightMovementWithSpeedScale+0x394>)
 8003104:	f993 3000 	ldrsb.w	r3, [r3]
 8003108:	b29a      	uxth	r2, r3
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <StraightMovementWithSpeedScale+0x390>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	fb12 f303 	smulbb	r3, r2, r3
 8003114:	b29b      	uxth	r3, r3
 8003116:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 800311a:	b29a      	uxth	r2, r3
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <StraightMovementWithSpeedScale+0x39c>)
 800311e:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8003120:	4b15      	ldr	r3, [pc, #84]	; (8003178 <StraightMovementWithSpeedScale+0x398>)
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <StraightMovementWithSpeedScale+0x3a0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313e:	ee17 2a90 	vmov	r2, s15
 8003142:	635a      	str	r2, [r3, #52]	; 0x34
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <StraightMovementWithSpeedScale+0x39c>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <StraightMovementWithSpeedScale+0x3a0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003162:	ee17 2a90 	vmov	r2, s15
 8003166:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000578 	.word	0x20000578
 8003174:	20000140 	.word	0x20000140
 8003178:	200004f0 	.word	0x200004f0
 800317c:	200004f2 	.word	0x200004f2
 8003180:	200003c4 	.word	0x200003c4
 8003184:	00000000 	.word	0x00000000

08003188 <RobotTurn>:

void RobotTurn(float *targetAngle)
{
 8003188:	b5b0      	push	{r4, r5, r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af04      	add	r7, sp, #16
 800318e:	6078      	str	r0, [r7, #4]
  angleNow = 0;
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <RobotTurn+0x138>)
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8003198:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <RobotTurn+0x13c>)
 800319a:	2200      	movs	r2, #0
 800319c:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 800319e:	f003 fe2f 	bl	8006e00 <HAL_GetTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a48      	ldr	r2, [pc, #288]	; (80032c8 <RobotTurn+0x140>)
 80031a6:	6013      	str	r3, [r2, #0]
  do
  {
    if (HAL_GetTick() - last_curTask_tick >= 10)
 80031a8:	f003 fe2a 	bl	8006e00 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <RobotTurn+0x140>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	d9f7      	bls.n	80031a8 <RobotTurn+0x20>
    { // sample gyro every 5ms
      __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 80031b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031bc:	9302      	str	r3, [sp, #8]
 80031be:	2302      	movs	r3, #2
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	4b42      	ldr	r3, [pc, #264]	; (80032cc <RobotTurn+0x144>)
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	2237      	movs	r2, #55	; 0x37
 80031ca:	21d0      	movs	r1, #208	; 0xd0
 80031cc:	4840      	ldr	r0, [pc, #256]	; (80032d0 <RobotTurn+0x148>)
 80031ce:	f004 ffaf 	bl	8008130 <HAL_I2C_Mem_Read>
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <RobotTurn+0x144>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	b21a      	sxth	r2, r3
 80031da:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <RobotTurn+0x144>)
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	b21b      	sxth	r3, r3
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b21a      	sxth	r2, r3
 80031e4:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <RobotTurn+0x13c>)
 80031e6:	801a      	strh	r2, [r3, #0]
      angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80031e8:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <RobotTurn+0x138>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f9a3 	bl	8000538 <__aeabi_f2d>
 80031f2:	4604      	mov	r4, r0
 80031f4:	460d      	mov	r5, r1
 80031f6:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <RobotTurn+0x13c>)
 80031f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f989 	bl	8000514 <__aeabi_i2d>
 8003202:	a32b      	add	r3, pc, #172	; (adr r3, 80032b0 <RobotTurn+0x128>)
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f7fd fb18 	bl	800083c <__aeabi_ddiv>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	a328      	add	r3, pc, #160	; (adr r3, 80032b8 <RobotTurn+0x130>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd f9e5 	bl	80005e8 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4620      	mov	r0, r4
 8003224:	4629      	mov	r1, r5
 8003226:	f7fd f829 	bl	800027c <__adddf3>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	f7fd fc93 	bl	8000b5c <__aeabi_d2f>
 8003236:	4603      	mov	r3, r0
 8003238:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <RobotTurn+0x138>)
 800323a:	6013      	str	r3, [r2, #0]
      if (abs(angleNow - *targetAngle) < 0.01)
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <RobotTurn+0x138>)
 800323e:	ed93 7a00 	vldr	s14, [r3]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800324c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003250:	ee17 3a90 	vmov	r3, s15
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0d      	blt.n	8003274 <RobotTurn+0xec>
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <RobotTurn+0x138>)
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800326c:	ee17 3a90 	vmov	r3, s15
 8003270:	2b00      	cmp	r3, #0
 8003272:	dd05      	ble.n	8003280 <RobotTurn+0xf8>
        break;
      last_curTask_tick = HAL_GetTick();
 8003274:	f003 fdc4 	bl	8006e00 <HAL_GetTick>
 8003278:	4603      	mov	r3, r0
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <RobotTurn+0x140>)
 800327c:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_curTask_tick >= 10)
 800327e:	e793      	b.n	80031a8 <RobotTurn+0x20>
        break;
 8003280:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <RobotTurn+0x14c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	635a      	str	r2, [r3, #52]	; 0x34
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <RobotTurn+0x14c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
  __RESET_SERVO_TURN(&htim1);
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <RobotTurn+0x150>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2291      	movs	r2, #145	; 0x91
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
 800329a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800329e:	f003 fdbb 	bl	8006e18 <HAL_Delay>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdb0      	pop	{r4, r5, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	f3af 8000 	nop.w
 80032b0:	66666666 	.word	0x66666666
 80032b4:	40306666 	.word	0x40306666
 80032b8:	47ae147b 	.word	0x47ae147b
 80032bc:	3f847ae1 	.word	0x3f847ae1
 80032c0:	200004e8 	.word	0x200004e8
 80032c4:	200004ee 	.word	0x200004ee
 80032c8:	200004f4 	.word	0x200004f4
 80032cc:	200004ec 	.word	0x200004ec
 80032d0:	20000250 	.word	0x20000250
 80032d4:	200003c4 	.word	0x200003c4
 80032d8:	200002a4 	.word	0x200002a4
 80032dc:	00000000 	.word	0x00000000

080032e0 <RobotMoveDistanceObstacle>:

// RobotMoveDistanceObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistanceObstacle(float *targetDist, const uint8_t speedMode)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  angleNow = 0;
 80032ec:	4bb9      	ldr	r3, [pc, #740]	; (80035d4 <RobotMoveDistanceObstacle+0x2f4>)
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 80032f4:	4bb8      	ldr	r3, [pc, #736]	; (80035d8 <RobotMoveDistanceObstacle+0x2f8>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 80032fa:	48b8      	ldr	r0, [pc, #736]	; (80035dc <RobotMoveDistanceObstacle+0x2fc>)
 80032fc:	f7ff f95d 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8003300:	48b7      	ldr	r0, [pc, #732]	; (80035e0 <RobotMoveDistanceObstacle+0x300>)
 8003302:	f7ff f95a 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8003306:	48b7      	ldr	r0, [pc, #732]	; (80035e4 <RobotMoveDistanceObstacle+0x304>)
 8003308:	f7ff f957 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidZoomZoom);
 800330c:	48b6      	ldr	r0, [pc, #728]	; (80035e8 <RobotMoveDistanceObstacle+0x308>)
 800330e:	f7ff f954 	bl	80025ba <PIDConfigReset>
  obsDist_Ultrasonic = 1000;
 8003312:	4bb6      	ldr	r3, [pc, #728]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 8003314:	4ab6      	ldr	r2, [pc, #728]	; (80035f0 <RobotMoveDistanceObstacle+0x310>)
 8003316:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Ultrasonic sensor start
 8003318:	2104      	movs	r1, #4
 800331a:	48b6      	ldr	r0, [pc, #728]	; (80035f4 <RobotMoveDistanceObstacle+0x314>)
 800331c:	f006 fbe0 	bl	8009ae0 <HAL_TIM_IC_Start_IT>
  last_curTask_tick = HAL_GetTick();
 8003320:	f003 fd6e 	bl	8006e00 <HAL_GetTick>
 8003324:	4603      	mov	r3, r0
 8003326:	4ab4      	ldr	r2, [pc, #720]	; (80035f8 <RobotMoveDistanceObstacle+0x318>)
 8003328:	6013      	str	r3, [r2, #0]
  int counter = 0;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
  int oldspeed = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
  do
  {
    HCSR04_Read();
 8003332:	f7ff f955 	bl	80025e0 <HCSR04_Read>
    osDelay(10); // give timer interrupt chance to update obsDist_US value
 8003336:	200a      	movs	r0, #10
 8003338:	f009 f920 	bl	800c57c <osDelay>
    if (abs(*targetDist - obsDist_Ultrasonic) <= 1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	ed93 7a00 	vldr	s14, [r3]
 8003342:	4baa      	ldr	r3, [pc, #680]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800334c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003350:	ee17 3a90 	vmov	r3, s15
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003358:	db0e      	blt.n	8003378 <RobotMoveDistanceObstacle+0x98>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	ed93 7a00 	vldr	s14, [r3]
 8003360:	4ba2      	ldr	r3, [pc, #648]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 8003362:	edd3 7a00 	vldr	s15, [r3]
 8003366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800336a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336e:	ee17 3a90 	vmov	r3, s15
 8003372:	2b01      	cmp	r3, #1
 8003374:	f340 826b 	ble.w	800384e <RobotMoveDistanceObstacle+0x56e>
      break;
    __SET_MOTOR_DIRECTION(obsDist_Ultrasonic >= *targetDist);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	ed93 7a00 	vldr	s14, [r3]
 800337e:	4b9b      	ldr	r3, [pc, #620]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 8003380:	edd3 7a00 	vldr	s15, [r3]
 8003384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	bf94      	ite	ls
 800338e:	2301      	movls	r3, #1
 8003390:	2300      	movhi	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	2104      	movs	r1, #4
 80033a0:	4896      	ldr	r0, [pc, #600]	; (80035fc <RobotMoveDistanceObstacle+0x31c>)
 80033a2:	f004 fc6d 	bl	8007c80 <HAL_GPIO_WritePin>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	ed93 7a00 	vldr	s14, [r3]
 80033ac:	4b8f      	ldr	r3, [pc, #572]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	bf94      	ite	ls
 80033bc:	2301      	movls	r3, #1
 80033be:	2300      	movhi	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	2108      	movs	r1, #8
 80033c6:	488d      	ldr	r0, [pc, #564]	; (80035fc <RobotMoveDistanceObstacle+0x31c>)
 80033c8:	f004 fc5a 	bl	8007c80 <HAL_GPIO_WritePin>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	ed93 7a00 	vldr	s14, [r3]
 80033d2:	4b86      	ldr	r3, [pc, #536]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e0:	bf94      	ite	ls
 80033e2:	2301      	movls	r3, #1
 80033e4:	2300      	movhi	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f083 0301 	eor.w	r3, r3, #1
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	2120      	movs	r1, #32
 80033f4:	4881      	ldr	r0, [pc, #516]	; (80035fc <RobotMoveDistanceObstacle+0x31c>)
 80033f6:	f004 fc43 	bl	8007c80 <HAL_GPIO_WritePin>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	ed93 7a00 	vldr	s14, [r3]
 8003400:	4b7a      	ldr	r3, [pc, #488]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340e:	bf94      	ite	ls
 8003410:	2301      	movls	r3, #1
 8003412:	2300      	movhi	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	2110      	movs	r1, #16
 800341a:	4878      	ldr	r0, [pc, #480]	; (80035fc <RobotMoveDistanceObstacle+0x31c>)
 800341c:	f004 fc30 	bl	8007c80 <HAL_GPIO_WritePin>
    if (HAL_GetTick() - last_curTask_tick >= 20)
 8003420:	f003 fcee 	bl	8006e00 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <RobotMoveDistanceObstacle+0x318>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b13      	cmp	r3, #19
 800342e:	d980      	bls.n	8003332 <RobotMoveDistanceObstacle+0x52>
    {
      if (speedMode == SPEED_MODE_1)
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	2b01      	cmp	r3, #1
 8003434:	f040 80a0 	bne.w	8003578 <RobotMoveDistanceObstacle+0x298>
      {
        speedScale = abs(obsDist_Ultrasonic - *targetDist) / 15; // slow down at 15cm
 8003438:	4b6c      	ldr	r3, [pc, #432]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 800343a:	ed93 7a00 	vldr	s14, [r3]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800344c:	ee17 3a90 	vmov	r3, s15
 8003450:	2b00      	cmp	r3, #0
 8003452:	bfb8      	it	lt
 8003454:	425b      	neglt	r3, r3
 8003456:	4a6a      	ldr	r2, [pc, #424]	; (8003600 <RobotMoveDistanceObstacle+0x320>)
 8003458:	fb82 1203 	smull	r1, r2, r2, r3
 800345c:	441a      	add	r2, r3
 800345e:	10d2      	asrs	r2, r2, #3
 8003460:	17db      	asrs	r3, r3, #31
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800346c:	4b65      	ldr	r3, [pc, #404]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 800346e:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8003472:	4b64      	ldr	r3, [pc, #400]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 8003474:	edd3 7a00 	vldr	s15, [r3]
 8003478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800347c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	dd02      	ble.n	800348c <RobotMoveDistanceObstacle+0x1ac>
 8003486:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800348a:	e00e      	b.n	80034aa <RobotMoveDistanceObstacle+0x1ca>
 800348c:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8003496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349e:	d502      	bpl.n	80034a6 <RobotMoveDistanceObstacle+0x1c6>
 80034a0:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80034a4:	e001      	b.n	80034aa <RobotMoveDistanceObstacle+0x1ca>
 80034a6:	4b57      	ldr	r3, [pc, #348]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a56      	ldr	r2, [pc, #344]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 80034ac:	6013      	str	r3, [r2, #0]
        if (abs(*targetDist - obsDist_Ultrasonic) <= 2) // slow down when the distance between obstacle and robot is less than 2cm
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	ed93 7a00 	vldr	s14, [r3]
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c2:	ee17 3a90 	vmov	r3, s15
 80034c6:	f113 0f02 	cmn.w	r3, #2
 80034ca:	db18      	blt.n	80034fe <RobotMoveDistanceObstacle+0x21e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	ed93 7a00 	vldr	s14, [r3]
 80034d2:	4b46      	ldr	r3, [pc, #280]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 80034d4:	edd3 7a00 	vldr	s15, [r3]
 80034d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e0:	ee17 3a90 	vmov	r3, s15
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	dc0a      	bgt.n	80034fe <RobotMoveDistanceObstacle+0x21e>
          speedScale *= 0.5;
 80034e8:	4b46      	ldr	r3, [pc, #280]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 80034f8:	edc3 7a00 	vstr	s15, [r3]
 80034fc:	e037      	b.n	800356e <RobotMoveDistanceObstacle+0x28e>
        else if ((abs(*targetDist - obsDist_Ultrasonic) > 2) && (abs(*targetDist - obsDist_Ultrasonic) <= 5)) // slow down when the distance between obstacle and robot is less than 5cm
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	ed93 7a00 	vldr	s14, [r3]
 8003504:	4b39      	ldr	r3, [pc, #228]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800350e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003512:	ee17 3a90 	vmov	r3, s15
 8003516:	2b00      	cmp	r3, #0
 8003518:	bfb8      	it	lt
 800351a:	425b      	neglt	r3, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	dd26      	ble.n	800356e <RobotMoveDistanceObstacle+0x28e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	ed93 7a00 	vldr	s14, [r3]
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003534:	ee17 3a90 	vmov	r3, s15
 8003538:	f113 0f05 	cmn.w	r3, #5
 800353c:	db17      	blt.n	800356e <RobotMoveDistanceObstacle+0x28e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	ed93 7a00 	vldr	s14, [r3]
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 8003546:	edd3 7a00 	vldr	s15, [r3]
 800354a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800354e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003552:	ee17 3a90 	vmov	r3, s15
 8003556:	2b05      	cmp	r3, #5
 8003558:	dc09      	bgt.n	800356e <RobotMoveDistanceObstacle+0x28e>
          speedScale *= 0.75;
 800355a:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 800355c:	edd3 7a00 	vldr	s15, [r3]
 8003560:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8003564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003568:	4b26      	ldr	r3, [pc, #152]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 800356a:	edc3 7a00 	vstr	s15, [r3]
        StraightMovementWithSpeedScale(SPEED_MODE_1, &speedScale);
 800356e:	4925      	ldr	r1, [pc, #148]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 8003570:	2001      	movs	r0, #1
 8003572:	f7ff fc35 	bl	8002de0 <StraightMovementWithSpeedScale>
 8003576:	e164      	b.n	8003842 <RobotMoveDistanceObstacle+0x562>
        else if (speedScale < 0 && oldspeed > speedScale){
          counter++;
          oldspeed = speedScale;
        }*/
      }
      else if (speedMode == SPEED_MODE_2)
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	2b02      	cmp	r3, #2
 800357c:	f040 80bc 	bne.w	80036f8 <RobotMoveDistanceObstacle+0x418>
      {
        speedScale = abs(obsDist_Ultrasonic - *targetDist) / 15; // slow down at 15cm
 8003580:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <RobotMoveDistanceObstacle+0x30c>)
 8003582:	ed93 7a00 	vldr	s14, [r3]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003594:	ee17 3a90 	vmov	r3, s15
 8003598:	2b00      	cmp	r3, #0
 800359a:	bfb8      	it	lt
 800359c:	425b      	neglt	r3, r3
 800359e:	4a18      	ldr	r2, [pc, #96]	; (8003600 <RobotMoveDistanceObstacle+0x320>)
 80035a0:	fb82 1203 	smull	r1, r2, r2, r3
 80035a4:	441a      	add	r2, r3
 80035a6:	10d2      	asrs	r2, r2, #3
 80035a8:	17db      	asrs	r3, r3, #31
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 80035b6:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <RobotMoveDistanceObstacle+0x324>)
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	dd1c      	ble.n	8003608 <RobotMoveDistanceObstacle+0x328>
 80035ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80035d2:	e02a      	b.n	800362a <RobotMoveDistanceObstacle+0x34a>
 80035d4:	200004e8 	.word	0x200004e8
 80035d8:	200004ee 	.word	0x200004ee
 80035dc:	20000518 	.word	0x20000518
 80035e0:	20000504 	.word	0x20000504
 80035e4:	2000052c 	.word	0x2000052c
 80035e8:	20000540 	.word	0x20000540
 80035ec:	20000568 	.word	0x20000568
 80035f0:	447a0000 	.word	0x447a0000
 80035f4:	20000334 	.word	0x20000334
 80035f8:	200004f4 	.word	0x200004f4
 80035fc:	40020000 	.word	0x40020000
 8003600:	88888889 	.word	0x88888889
 8003604:	20000138 	.word	0x20000138
 8003608:	4b9b      	ldr	r3, [pc, #620]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc ff93 	bl	8000538 <__aeabi_f2d>
 8003612:	a397      	add	r3, pc, #604	; (adr r3, 8003870 <RobotMoveDistanceObstacle+0x590>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fd fa58 	bl	8000acc <__aeabi_dcmplt>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <RobotMoveDistanceObstacle+0x346>
 8003622:	4b96      	ldr	r3, [pc, #600]	; (800387c <RobotMoveDistanceObstacle+0x59c>)
 8003624:	e001      	b.n	800362a <RobotMoveDistanceObstacle+0x34a>
 8003626:	4b94      	ldr	r3, [pc, #592]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a93      	ldr	r2, [pc, #588]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 800362c:	6013      	str	r3, [r2, #0]
        if (abs(*targetDist - obsDist_Ultrasonic) <= 2) // slow down when the distance between obstacle and robot is less than 5cm
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	ed93 7a00 	vldr	s14, [r3]
 8003634:	4b92      	ldr	r3, [pc, #584]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003642:	ee17 3a90 	vmov	r3, s15
 8003646:	f113 0f02 	cmn.w	r3, #2
 800364a:	db18      	blt.n	800367e <RobotMoveDistanceObstacle+0x39e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	ed93 7a00 	vldr	s14, [r3]
 8003652:	4b8b      	ldr	r3, [pc, #556]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800365c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003660:	ee17 3a90 	vmov	r3, s15
 8003664:	2b02      	cmp	r3, #2
 8003666:	dc0a      	bgt.n	800367e <RobotMoveDistanceObstacle+0x39e>
          speedScale *= 0.5;
 8003668:	4b83      	ldr	r3, [pc, #524]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003676:	4b80      	ldr	r3, [pc, #512]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 8003678:	edc3 7a00 	vstr	s15, [r3]
 800367c:	e037      	b.n	80036ee <RobotMoveDistanceObstacle+0x40e>
        else if ((abs(*targetDist - obsDist_Ultrasonic) > 2) && (abs(*targetDist - obsDist_Ultrasonic) <= 5)) // slow down when the distance between obstacle and robot is less than 5cm
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	ed93 7a00 	vldr	s14, [r3]
 8003684:	4b7e      	ldr	r3, [pc, #504]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003692:	ee17 3a90 	vmov	r3, s15
 8003696:	2b00      	cmp	r3, #0
 8003698:	bfb8      	it	lt
 800369a:	425b      	neglt	r3, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	dd26      	ble.n	80036ee <RobotMoveDistanceObstacle+0x40e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	ed93 7a00 	vldr	s14, [r3]
 80036a6:	4b76      	ldr	r3, [pc, #472]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036b4:	ee17 3a90 	vmov	r3, s15
 80036b8:	f113 0f05 	cmn.w	r3, #5
 80036bc:	db17      	blt.n	80036ee <RobotMoveDistanceObstacle+0x40e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	ed93 7a00 	vldr	s14, [r3]
 80036c4:	4b6e      	ldr	r3, [pc, #440]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d2:	ee17 3a90 	vmov	r3, s15
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	dc09      	bgt.n	80036ee <RobotMoveDistanceObstacle+0x40e>
          speedScale *= 0.75;
 80036da:	4b67      	ldr	r3, [pc, #412]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 80036dc:	edd3 7a00 	vldr	s15, [r3]
 80036e0:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80036e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e8:	4b63      	ldr	r3, [pc, #396]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 80036ea:	edc3 7a00 	vstr	s15, [r3]
        StraightMovementWithSpeedScale(SPEED_MODE_2, &speedScale);
 80036ee:	4962      	ldr	r1, [pc, #392]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 80036f0:	2002      	movs	r0, #2
 80036f2:	f7ff fb75 	bl	8002de0 <StraightMovementWithSpeedScale>
 80036f6:	e0a4      	b.n	8003842 <RobotMoveDistanceObstacle+0x562>
      }
      else if (speedMode == SPEED_MODE_3)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	f040 80a1 	bne.w	8003842 <RobotMoveDistanceObstacle+0x562>
      {
        speedScale = abs(obsDist_Ultrasonic - *targetDist) / 15; // slow down at 15cm
 8003700:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 8003702:	ed93 7a00 	vldr	s14, [r3]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	edd3 7a00 	vldr	s15, [r3]
 800370c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003714:	ee17 3a90 	vmov	r3, s15
 8003718:	2b00      	cmp	r3, #0
 800371a:	bfb8      	it	lt
 800371c:	425b      	neglt	r3, r3
 800371e:	4a59      	ldr	r2, [pc, #356]	; (8003884 <RobotMoveDistanceObstacle+0x5a4>)
 8003720:	fb82 1203 	smull	r1, r2, r2, r3
 8003724:	441a      	add	r2, r3
 8003726:	10d2      	asrs	r2, r2, #3
 8003728:	17db      	asrs	r3, r3, #31
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	ee07 3a90 	vmov	s15, r3
 8003730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003734:	4b50      	ldr	r3, [pc, #320]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 8003736:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 800373a:	4b4f      	ldr	r3, [pc, #316]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 800373c:	edd3 7a00 	vldr	s15, [r3]
 8003740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374c:	dd02      	ble.n	8003754 <RobotMoveDistanceObstacle+0x474>
 800374e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003752:	e010      	b.n	8003776 <RobotMoveDistanceObstacle+0x496>
 8003754:	4b48      	ldr	r3, [pc, #288]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc feed 	bl	8000538 <__aeabi_f2d>
 800375e:	a344      	add	r3, pc, #272	; (adr r3, 8003870 <RobotMoveDistanceObstacle+0x590>)
 8003760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003764:	f7fd f9b2 	bl	8000acc <__aeabi_dcmplt>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <RobotMoveDistanceObstacle+0x492>
 800376e:	4b43      	ldr	r3, [pc, #268]	; (800387c <RobotMoveDistanceObstacle+0x59c>)
 8003770:	e001      	b.n	8003776 <RobotMoveDistanceObstacle+0x496>
 8003772:	4b41      	ldr	r3, [pc, #260]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 8003778:	6013      	str	r3, [r2, #0]
        if (abs(*targetDist - obsDist_Ultrasonic) <= 2) // slow down when the distance between obstacle and robot is less than 5cm
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	ed93 7a00 	vldr	s14, [r3]
 8003780:	4b3f      	ldr	r3, [pc, #252]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800378e:	ee17 3a90 	vmov	r3, s15
 8003792:	f113 0f02 	cmn.w	r3, #2
 8003796:	db18      	blt.n	80037ca <RobotMoveDistanceObstacle+0x4ea>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	ed93 7a00 	vldr	s14, [r3]
 800379e:	4b38      	ldr	r3, [pc, #224]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ac:	ee17 3a90 	vmov	r3, s15
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	dc0a      	bgt.n	80037ca <RobotMoveDistanceObstacle+0x4ea>
          speedScale *= 0.5;
 80037b4:	4b30      	ldr	r3, [pc, #192]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80037be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c2:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 80037c4:	edc3 7a00 	vstr	s15, [r3]
 80037c8:	e037      	b.n	800383a <RobotMoveDistanceObstacle+0x55a>
        else if ((abs(*targetDist - obsDist_Ultrasonic) > 2) && (abs(*targetDist - obsDist_Ultrasonic) <= 5)) // slow down when the distance between obstacle and robot is less than 5cm
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	ed93 7a00 	vldr	s14, [r3]
 80037d0:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037de:	ee17 3a90 	vmov	r3, s15
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bfb8      	it	lt
 80037e6:	425b      	neglt	r3, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	dd26      	ble.n	800383a <RobotMoveDistanceObstacle+0x55a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	ed93 7a00 	vldr	s14, [r3]
 80037f2:	4b23      	ldr	r3, [pc, #140]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003800:	ee17 3a90 	vmov	r3, s15
 8003804:	f113 0f05 	cmn.w	r3, #5
 8003808:	db17      	blt.n	800383a <RobotMoveDistanceObstacle+0x55a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	ed93 7a00 	vldr	s14, [r3]
 8003810:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <RobotMoveDistanceObstacle+0x5a0>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800381e:	ee17 3a90 	vmov	r3, s15
 8003822:	2b05      	cmp	r3, #5
 8003824:	dc09      	bgt.n	800383a <RobotMoveDistanceObstacle+0x55a>
          speedScale *= 0.75;
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8003830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 8003836:	edc3 7a00 	vstr	s15, [r3]
        StraightMovementWithSpeedScale(SPEED_MODE_3, &speedScale);
 800383a:	490f      	ldr	r1, [pc, #60]	; (8003878 <RobotMoveDistanceObstacle+0x598>)
 800383c:	2003      	movs	r0, #3
 800383e:	f7ff facf 	bl	8002de0 <StraightMovementWithSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8003842:	f003 fadd 	bl	8006e00 <HAL_GetTick>
 8003846:	4603      	mov	r3, r0
 8003848:	4a0f      	ldr	r2, [pc, #60]	; (8003888 <RobotMoveDistanceObstacle+0x5a8>)
 800384a:	6013      	str	r3, [r2, #0]
    HCSR04_Read();
 800384c:	e571      	b.n	8003332 <RobotMoveDistanceObstacle+0x52>
      break;
 800384e:	bf00      	nop
    }

  } while (1);

  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <RobotMoveDistanceObstacle+0x5ac>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2200      	movs	r2, #0
 8003856:	635a      	str	r2, [r3, #52]	; 0x34
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <RobotMoveDistanceObstacle+0x5ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2200      	movs	r2, #0
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8003860:	2104      	movs	r1, #4
 8003862:	480b      	ldr	r0, [pc, #44]	; (8003890 <RobotMoveDistanceObstacle+0x5b0>)
 8003864:	f006 fa64 	bl	8009d30 <HAL_TIM_IC_Stop_IT>
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	9999999a 	.word	0x9999999a
 8003874:	3fd99999 	.word	0x3fd99999
 8003878:	20000138 	.word	0x20000138
 800387c:	3ecccccd 	.word	0x3ecccccd
 8003880:	20000568 	.word	0x20000568
 8003884:	88888889 	.word	0x88888889
 8003888:	200004f4 	.word	0x200004f4
 800388c:	200003c4 	.word	0x200003c4
 8003890:	20000334 	.word	0x20000334
 8003894:	00000000 	.word	0x00000000

08003898 <RobotMoveUntilIROvershoot>:
 *
 * @param isIR_R Determines whether to use the right or left IR sensor.
 *                1 for right, 0 for left.
 */
void RobotMoveUntilIROvershoot(int isIR_R)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
  PIDConfigReset(&pidTSlow);
 80038a0:	48af      	ldr	r0, [pc, #700]	; (8003b60 <RobotMoveUntilIROvershoot+0x2c8>)
 80038a2:	f7fe fe8a 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 80038a6:	48af      	ldr	r0, [pc, #700]	; (8003b64 <RobotMoveUntilIROvershoot+0x2cc>)
 80038a8:	f7fe fe87 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidFast);
 80038ac:	48ae      	ldr	r0, [pc, #696]	; (8003b68 <RobotMoveUntilIROvershoot+0x2d0>)
 80038ae:	f7fe fe84 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidZoomZoom);
 80038b2:	48ae      	ldr	r0, [pc, #696]	; (8003b6c <RobotMoveUntilIROvershoot+0x2d4>)
 80038b4:	f7fe fe81 	bl	80025ba <PIDConfigReset>
  obsDist_IR_R = 0;
 80038b8:	4bad      	ldr	r3, [pc, #692]	; (8003b70 <RobotMoveUntilIROvershoot+0x2d8>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
  obsDist_IR_L = 0;
 80038be:	4bad      	ldr	r3, [pc, #692]	; (8003b74 <RobotMoveUntilIROvershoot+0x2dc>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
  angleNow = 0;
 80038c4:	4bac      	ldr	r3, [pc, #688]	; (8003b78 <RobotMoveUntilIROvershoot+0x2e0>)
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 80038cc:	4bab      	ldr	r3, [pc, #684]	; (8003b7c <RobotMoveUntilIROvershoot+0x2e4>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 80038d2:	f003 fa95 	bl	8006e00 <HAL_GetTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4aa9      	ldr	r2, [pc, #676]	; (8003b80 <RobotMoveUntilIROvershoot+0x2e8>)
 80038da:	6013      	str	r3, [r2, #0]
  if (isIR_R)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8094 	beq.w	8003a0c <RobotMoveUntilIROvershoot+0x174>
  {
    do
    {
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 80038e4:	48a7      	ldr	r0, [pc, #668]	; (8003b84 <RobotMoveUntilIROvershoot+0x2ec>)
 80038e6:	f003 faff 	bl	8006ee8 <HAL_ADC_Start>
 80038ea:	2114      	movs	r1, #20
 80038ec:	48a5      	ldr	r0, [pc, #660]	; (8003b84 <RobotMoveUntilIROvershoot+0x2ec>)
 80038ee:	f003 fc00 	bl	80070f2 <HAL_ADC_PollForConversion>
 80038f2:	48a4      	ldr	r0, [pc, #656]	; (8003b84 <RobotMoveUntilIROvershoot+0x2ec>)
 80038f4:	f003 fc88 	bl	8007208 <HAL_ADC_GetValue>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4ba3      	ldr	r3, [pc, #652]	; (8003b88 <RobotMoveUntilIROvershoot+0x2f0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	4aa1      	ldr	r2, [pc, #644]	; (8003b88 <RobotMoveUntilIROvershoot+0x2f0>)
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4ba1      	ldr	r3, [pc, #644]	; (8003b8c <RobotMoveUntilIROvershoot+0x2f4>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	4ba1      	ldr	r3, [pc, #644]	; (8003b90 <RobotMoveUntilIROvershoot+0x2f8>)
 800390c:	fb83 1302 	smull	r1, r3, r3, r2
 8003910:	1059      	asrs	r1, r3, #1
 8003912:	17d3      	asrs	r3, r2, #31
 8003914:	1ac9      	subs	r1, r1, r3
 8003916:	460b      	mov	r3, r1
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	1ad1      	subs	r1, r2, r3
 800391e:	b28a      	uxth	r2, r1
 8003920:	4b9a      	ldr	r3, [pc, #616]	; (8003b8c <RobotMoveUntilIROvershoot+0x2f4>)
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	4b99      	ldr	r3, [pc, #612]	; (8003b8c <RobotMoveUntilIROvershoot+0x2f4>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d12c      	bne.n	8003986 <RobotMoveUntilIROvershoot+0xee>
 800392c:	4b96      	ldr	r3, [pc, #600]	; (8003b88 <RobotMoveUntilIROvershoot+0x2f0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a96      	ldr	r2, [pc, #600]	; (8003b8c <RobotMoveUntilIROvershoot+0x2f4>)
 8003932:	8812      	ldrh	r2, [r2, #0]
 8003934:	fbb3 f3f2 	udiv	r3, r3, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fddb 	bl	80004f4 <__aeabi_ui2d>
 800393e:	a380      	add	r3, pc, #512	; (adr r3, 8003b40 <RobotMoveUntilIROvershoot+0x2a8>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f7fc fc98 	bl	8000278 <__aeabi_dsub>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	a37d      	add	r3, pc, #500	; (adr r3, 8003b48 <RobotMoveUntilIROvershoot+0x2b0>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc ff71 	bl	800083c <__aeabi_ddiv>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f7fd f8db 	bl	8000b1c <__aeabi_d2uiz>
 8003966:	4603      	mov	r3, r0
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4b81      	ldr	r3, [pc, #516]	; (8003b70 <RobotMoveUntilIROvershoot+0x2d8>)
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	4b86      	ldr	r3, [pc, #536]	; (8003b88 <RobotMoveUntilIROvershoot+0x2f0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a86      	ldr	r2, [pc, #536]	; (8003b8c <RobotMoveUntilIROvershoot+0x2f4>)
 8003974:	8812      	ldrh	r2, [r2, #0]
 8003976:	fbb3 f3f2 	udiv	r3, r3, r2
 800397a:	b29a      	uxth	r2, r3
 800397c:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <RobotMoveUntilIROvershoot+0x2fc>)
 800397e:	801a      	strh	r2, [r3, #0]
 8003980:	4b81      	ldr	r3, [pc, #516]	; (8003b88 <RobotMoveUntilIROvershoot+0x2f0>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
      osDelay(20);
 8003986:	2014      	movs	r0, #20
 8003988:	f008 fdf8 	bl	800c57c <osDelay>
      if (obsDist_IR_R > 35)
 800398c:	4b78      	ldr	r3, [pc, #480]	; (8003b70 <RobotMoveUntilIROvershoot+0x2d8>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b23      	cmp	r3, #35	; 0x23
 8003992:	d82e      	bhi.n	80039f2 <RobotMoveUntilIROvershoot+0x15a>
        break;
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003994:	f003 fa34 	bl	8006e00 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	4b79      	ldr	r3, [pc, #484]	; (8003b80 <RobotMoveUntilIROvershoot+0x2e8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	d99f      	bls.n	80038e4 <RobotMoveUntilIROvershoot+0x4c>
      {
        OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
 80039a4:	4b72      	ldr	r3, [pc, #456]	; (8003b70 <RobotMoveUntilIROvershoot+0x2d8>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	230c      	movs	r3, #12
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2305      	movs	r3, #5
 80039b0:	2100      	movs	r1, #0
 80039b2:	2000      	movs	r0, #0
 80039b4:	f00b fcea 	bl	800f38c <OLED_ShowNumber>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2104      	movs	r1, #4
 80039bc:	4876      	ldr	r0, [pc, #472]	; (8003b98 <RobotMoveUntilIROvershoot+0x300>)
 80039be:	f004 f95f 	bl	8007c80 <HAL_GPIO_WritePin>
 80039c2:	2201      	movs	r2, #1
 80039c4:	2108      	movs	r1, #8
 80039c6:	4874      	ldr	r0, [pc, #464]	; (8003b98 <RobotMoveUntilIROvershoot+0x300>)
 80039c8:	f004 f95a 	bl	8007c80 <HAL_GPIO_WritePin>
 80039cc:	2200      	movs	r2, #0
 80039ce:	2120      	movs	r1, #32
 80039d0:	4871      	ldr	r0, [pc, #452]	; (8003b98 <RobotMoveUntilIROvershoot+0x300>)
 80039d2:	f004 f955 	bl	8007c80 <HAL_GPIO_WritePin>
 80039d6:	2201      	movs	r2, #1
 80039d8:	2110      	movs	r1, #16
 80039da:	486f      	ldr	r0, [pc, #444]	; (8003b98 <RobotMoveUntilIROvershoot+0x300>)
 80039dc:	f004 f950 	bl	8007c80 <HAL_GPIO_WritePin>
        StraightMovement(SPEED_MODE_1);
 80039e0:	2001      	movs	r0, #1
 80039e2:	f7fe fe3d 	bl	8002660 <StraightMovement>
        last_curTask_tick = HAL_GetTick();
 80039e6:	f003 fa0b 	bl	8006e00 <HAL_GetTick>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4a64      	ldr	r2, [pc, #400]	; (8003b80 <RobotMoveUntilIROvershoot+0x2e8>)
 80039ee:	6013      	str	r3, [r2, #0]
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 80039f0:	e778      	b.n	80038e4 <RobotMoveUntilIROvershoot+0x4c>
        break;
 80039f2:	bf00      	nop
      }

    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 80039f4:	4b69      	ldr	r3, [pc, #420]	; (8003b9c <RobotMoveUntilIROvershoot+0x304>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2200      	movs	r2, #0
 80039fa:	635a      	str	r2, [r3, #52]	; 0x34
 80039fc:	4b67      	ldr	r3, [pc, #412]	; (8003b9c <RobotMoveUntilIROvershoot+0x304>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc1);
 8003a04:	485f      	ldr	r0, [pc, #380]	; (8003b84 <RobotMoveUntilIROvershoot+0x2ec>)
 8003a06:	f003 fb41 	bl	800708c <HAL_ADC_Stop>

    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
    HAL_ADC_Stop(&hadc2);
  }
}
 8003a0a:	e092      	b.n	8003b32 <RobotMoveUntilIROvershoot+0x29a>
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003a0c:	4864      	ldr	r0, [pc, #400]	; (8003ba0 <RobotMoveUntilIROvershoot+0x308>)
 8003a0e:	f003 fa6b 	bl	8006ee8 <HAL_ADC_Start>
 8003a12:	2114      	movs	r1, #20
 8003a14:	4862      	ldr	r0, [pc, #392]	; (8003ba0 <RobotMoveUntilIROvershoot+0x308>)
 8003a16:	f003 fb6c 	bl	80070f2 <HAL_ADC_PollForConversion>
 8003a1a:	4861      	ldr	r0, [pc, #388]	; (8003ba0 <RobotMoveUntilIROvershoot+0x308>)
 8003a1c:	f003 fbf4 	bl	8007208 <HAL_ADC_GetValue>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b60      	ldr	r3, [pc, #384]	; (8003ba4 <RobotMoveUntilIROvershoot+0x30c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4413      	add	r3, r2
 8003a28:	4a5e      	ldr	r2, [pc, #376]	; (8003ba4 <RobotMoveUntilIROvershoot+0x30c>)
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ba8 <RobotMoveUntilIROvershoot+0x310>)
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	4b57      	ldr	r3, [pc, #348]	; (8003b90 <RobotMoveUntilIROvershoot+0x2f8>)
 8003a34:	fb83 1302 	smull	r1, r3, r3, r2
 8003a38:	1059      	asrs	r1, r3, #1
 8003a3a:	17d3      	asrs	r3, r2, #31
 8003a3c:	1ac9      	subs	r1, r1, r3
 8003a3e:	460b      	mov	r3, r1
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	1ad1      	subs	r1, r2, r3
 8003a46:	b28a      	uxth	r2, r1
 8003a48:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <RobotMoveUntilIROvershoot+0x310>)
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <RobotMoveUntilIROvershoot+0x310>)
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d12c      	bne.n	8003aae <RobotMoveUntilIROvershoot+0x216>
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <RobotMoveUntilIROvershoot+0x30c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a53      	ldr	r2, [pc, #332]	; (8003ba8 <RobotMoveUntilIROvershoot+0x310>)
 8003a5a:	8812      	ldrh	r2, [r2, #0]
 8003a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fc fd47 	bl	80004f4 <__aeabi_ui2d>
 8003a66:	a33a      	add	r3, pc, #232	; (adr r3, 8003b50 <RobotMoveUntilIROvershoot+0x2b8>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f7fc fc04 	bl	8000278 <__aeabi_dsub>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	a337      	add	r3, pc, #220	; (adr r3, 8003b58 <RobotMoveUntilIROvershoot+0x2c0>)
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f7fc fedd 	bl	800083c <__aeabi_ddiv>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f7fd f847 	bl	8000b1c <__aeabi_d2uiz>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <RobotMoveUntilIROvershoot+0x2dc>)
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <RobotMoveUntilIROvershoot+0x30c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a43      	ldr	r2, [pc, #268]	; (8003ba8 <RobotMoveUntilIROvershoot+0x310>)
 8003a9c:	8812      	ldrh	r2, [r2, #0]
 8003a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	4b41      	ldr	r3, [pc, #260]	; (8003bac <RobotMoveUntilIROvershoot+0x314>)
 8003aa6:	801a      	strh	r2, [r3, #0]
 8003aa8:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <RobotMoveUntilIROvershoot+0x30c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
      osDelay(20);
 8003aae:	2014      	movs	r0, #20
 8003ab0:	f008 fd64 	bl	800c57c <osDelay>
      if (obsDist_IR_L > 35)
 8003ab4:	4b2f      	ldr	r3, [pc, #188]	; (8003b74 <RobotMoveUntilIROvershoot+0x2dc>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b23      	cmp	r3, #35	; 0x23
 8003aba:	d82e      	bhi.n	8003b1a <RobotMoveUntilIROvershoot+0x282>
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003abc:	f003 f9a0 	bl	8006e00 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	; (8003b80 <RobotMoveUntilIROvershoot+0x2e8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b09      	cmp	r3, #9
 8003aca:	d99f      	bls.n	8003a0c <RobotMoveUntilIROvershoot+0x174>
        OLED_ShowNumber(0, 0, obsDist_IR_L, 5, 12);
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <RobotMoveUntilIROvershoot+0x2dc>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2305      	movs	r3, #5
 8003ad8:	2100      	movs	r1, #0
 8003ada:	2000      	movs	r0, #0
 8003adc:	f00b fc56 	bl	800f38c <OLED_ShowNumber>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2104      	movs	r1, #4
 8003ae4:	482c      	ldr	r0, [pc, #176]	; (8003b98 <RobotMoveUntilIROvershoot+0x300>)
 8003ae6:	f004 f8cb 	bl	8007c80 <HAL_GPIO_WritePin>
 8003aea:	2201      	movs	r2, #1
 8003aec:	2108      	movs	r1, #8
 8003aee:	482a      	ldr	r0, [pc, #168]	; (8003b98 <RobotMoveUntilIROvershoot+0x300>)
 8003af0:	f004 f8c6 	bl	8007c80 <HAL_GPIO_WritePin>
 8003af4:	2200      	movs	r2, #0
 8003af6:	2120      	movs	r1, #32
 8003af8:	4827      	ldr	r0, [pc, #156]	; (8003b98 <RobotMoveUntilIROvershoot+0x300>)
 8003afa:	f004 f8c1 	bl	8007c80 <HAL_GPIO_WritePin>
 8003afe:	2201      	movs	r2, #1
 8003b00:	2110      	movs	r1, #16
 8003b02:	4825      	ldr	r0, [pc, #148]	; (8003b98 <RobotMoveUntilIROvershoot+0x300>)
 8003b04:	f004 f8bc 	bl	8007c80 <HAL_GPIO_WritePin>
        StraightMovement(SPEED_MODE_1);
 8003b08:	2001      	movs	r0, #1
 8003b0a:	f7fe fda9 	bl	8002660 <StraightMovement>
        last_curTask_tick = HAL_GetTick();
 8003b0e:	f003 f977 	bl	8006e00 <HAL_GetTick>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <RobotMoveUntilIROvershoot+0x2e8>)
 8003b16:	6013      	str	r3, [r2, #0]
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003b18:	e778      	b.n	8003a0c <RobotMoveUntilIROvershoot+0x174>
        break;
 8003b1a:	bf00      	nop
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003b1c:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <RobotMoveUntilIROvershoot+0x304>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34
 8003b24:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <RobotMoveUntilIROvershoot+0x304>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc2);
 8003b2c:	481c      	ldr	r0, [pc, #112]	; (8003ba0 <RobotMoveUntilIROvershoot+0x308>)
 8003b2e:	f003 faad 	bl	800708c <HAL_ADC_Stop>
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	f3af 8000 	nop.w
 8003b40:	d78811b2 	.word	0xd78811b2
 8003b44:	40aa5cf5 	.word	0x40aa5cf5
 8003b48:	e3e6c4c6 	.word	0xe3e6c4c6
 8003b4c:	c04f98da 	.word	0xc04f98da
 8003b50:	31b9b670 	.word	0x31b9b670
 8003b54:	40a9a8fd 	.word	0x40a9a8fd
 8003b58:	725c3dee 	.word	0x725c3dee
 8003b5c:	c04e59dc 	.word	0xc04e59dc
 8003b60:	20000518 	.word	0x20000518
 8003b64:	20000504 	.word	0x20000504
 8003b68:	2000052c 	.word	0x2000052c
 8003b6c:	20000540 	.word	0x20000540
 8003b70:	20000559 	.word	0x20000559
 8003b74:	20000558 	.word	0x20000558
 8003b78:	200004e8 	.word	0x200004e8
 8003b7c:	200004ee 	.word	0x200004ee
 8003b80:	200004f4 	.word	0x200004f4
 8003b84:	200001c0 	.word	0x200001c0
 8003b88:	20000560 	.word	0x20000560
 8003b8c:	2000055a 	.word	0x2000055a
 8003b90:	66666667 	.word	0x66666667
 8003b94:	20000554 	.word	0x20000554
 8003b98:	40020000 	.word	0x40020000
 8003b9c:	200003c4 	.word	0x200003c4
 8003ba0:	20000208 	.word	0x20000208
 8003ba4:	20000564 	.word	0x20000564
 8003ba8:	2000055c 	.word	0x2000055c
 8003bac:	20000556 	.word	0x20000556

08003bb0 <RobotMoveUntilIRCloseDist>:
 *
 * @param isIR_R Flag to indicate if the right IR sensor is being used.
 *                1 if right IR sensor is being used, 0 if left IR sensor is being used.
 */
void RobotMoveUntilIRCloseDist(int isIR_R)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  PIDConfigReset(&pidTSlow);
 8003bb8:	489f      	ldr	r0, [pc, #636]	; (8003e38 <RobotMoveUntilIRCloseDist+0x288>)
 8003bba:	f7fe fcfe 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8003bbe:	489f      	ldr	r0, [pc, #636]	; (8003e3c <RobotMoveUntilIRCloseDist+0x28c>)
 8003bc0:	f7fe fcfb 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8003bc4:	489d      	ldr	r0, [pc, #628]	; (8003e3c <RobotMoveUntilIRCloseDist+0x28c>)
 8003bc6:	f7fe fcf8 	bl	80025ba <PIDConfigReset>
  PIDConfigReset(&pidZoomZoom);
 8003bca:	489d      	ldr	r0, [pc, #628]	; (8003e40 <RobotMoveUntilIRCloseDist+0x290>)
 8003bcc:	f7fe fcf5 	bl	80025ba <PIDConfigReset>
  obsDist_IR_R = 0xFF;
 8003bd0:	4b9c      	ldr	r3, [pc, #624]	; (8003e44 <RobotMoveUntilIRCloseDist+0x294>)
 8003bd2:	22ff      	movs	r2, #255	; 0xff
 8003bd4:	701a      	strb	r2, [r3, #0]
  obsDist_IR_L = 0xFF;
 8003bd6:	4b9c      	ldr	r3, [pc, #624]	; (8003e48 <RobotMoveUntilIRCloseDist+0x298>)
 8003bd8:	22ff      	movs	r2, #255	; 0xff
 8003bda:	701a      	strb	r2, [r3, #0]
  angleNow = 0;
 8003bdc:	4b9b      	ldr	r3, [pc, #620]	; (8003e4c <RobotMoveUntilIRCloseDist+0x29c>)
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8003be4:	4b9a      	ldr	r3, [pc, #616]	; (8003e50 <RobotMoveUntilIRCloseDist+0x2a0>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8003bea:	f003 f909 	bl	8006e00 <HAL_GetTick>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4a98      	ldr	r2, [pc, #608]	; (8003e54 <RobotMoveUntilIRCloseDist+0x2a4>)
 8003bf2:	6013      	str	r3, [r2, #0]

  if (isIR_R)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8085 	beq.w	8003d06 <RobotMoveUntilIRCloseDist+0x156>
  {
    do
    {
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003bfc:	4896      	ldr	r0, [pc, #600]	; (8003e58 <RobotMoveUntilIRCloseDist+0x2a8>)
 8003bfe:	f003 f973 	bl	8006ee8 <HAL_ADC_Start>
 8003c02:	2114      	movs	r1, #20
 8003c04:	4894      	ldr	r0, [pc, #592]	; (8003e58 <RobotMoveUntilIRCloseDist+0x2a8>)
 8003c06:	f003 fa74 	bl	80070f2 <HAL_ADC_PollForConversion>
 8003c0a:	4893      	ldr	r0, [pc, #588]	; (8003e58 <RobotMoveUntilIRCloseDist+0x2a8>)
 8003c0c:	f003 fafc 	bl	8007208 <HAL_ADC_GetValue>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b92      	ldr	r3, [pc, #584]	; (8003e5c <RobotMoveUntilIRCloseDist+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	4a90      	ldr	r2, [pc, #576]	; (8003e5c <RobotMoveUntilIRCloseDist+0x2ac>)
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b90      	ldr	r3, [pc, #576]	; (8003e60 <RobotMoveUntilIRCloseDist+0x2b0>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	4b90      	ldr	r3, [pc, #576]	; (8003e64 <RobotMoveUntilIRCloseDist+0x2b4>)
 8003c24:	fb83 1302 	smull	r1, r3, r3, r2
 8003c28:	1059      	asrs	r1, r3, #1
 8003c2a:	17d3      	asrs	r3, r2, #31
 8003c2c:	1ac9      	subs	r1, r1, r3
 8003c2e:	460b      	mov	r3, r1
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	1ad1      	subs	r1, r2, r3
 8003c36:	b28a      	uxth	r2, r1
 8003c38:	4b89      	ldr	r3, [pc, #548]	; (8003e60 <RobotMoveUntilIRCloseDist+0x2b0>)
 8003c3a:	801a      	strh	r2, [r3, #0]
 8003c3c:	4b88      	ldr	r3, [pc, #544]	; (8003e60 <RobotMoveUntilIRCloseDist+0x2b0>)
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d12c      	bne.n	8003c9e <RobotMoveUntilIRCloseDist+0xee>
 8003c44:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <RobotMoveUntilIRCloseDist+0x2ac>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a85      	ldr	r2, [pc, #532]	; (8003e60 <RobotMoveUntilIRCloseDist+0x2b0>)
 8003c4a:	8812      	ldrh	r2, [r2, #0]
 8003c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fc fc4f 	bl	80004f4 <__aeabi_ui2d>
 8003c56:	a370      	add	r3, pc, #448	; (adr r3, 8003e18 <RobotMoveUntilIRCloseDist+0x268>)
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f7fc fb0c 	bl	8000278 <__aeabi_dsub>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4610      	mov	r0, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	a36d      	add	r3, pc, #436	; (adr r3, 8003e20 <RobotMoveUntilIRCloseDist+0x270>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f7fc fde5 	bl	800083c <__aeabi_ddiv>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7fc ff4f 	bl	8000b1c <__aeabi_d2uiz>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b70      	ldr	r3, [pc, #448]	; (8003e44 <RobotMoveUntilIRCloseDist+0x294>)
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	4b75      	ldr	r3, [pc, #468]	; (8003e5c <RobotMoveUntilIRCloseDist+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a75      	ldr	r2, [pc, #468]	; (8003e60 <RobotMoveUntilIRCloseDist+0x2b0>)
 8003c8c:	8812      	ldrh	r2, [r2, #0]
 8003c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	4b74      	ldr	r3, [pc, #464]	; (8003e68 <RobotMoveUntilIRCloseDist+0x2b8>)
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	4b70      	ldr	r3, [pc, #448]	; (8003e5c <RobotMoveUntilIRCloseDist+0x2ac>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
      // OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003c9e:	f003 f8af 	bl	8006e00 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b6b      	ldr	r3, [pc, #428]	; (8003e54 <RobotMoveUntilIRCloseDist+0x2a4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b09      	cmp	r3, #9
 8003cac:	d91b      	bls.n	8003ce6 <RobotMoveUntilIRCloseDist+0x136>
      {
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	486e      	ldr	r0, [pc, #440]	; (8003e6c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003cb4:	f003 ffe4 	bl	8007c80 <HAL_GPIO_WritePin>
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2108      	movs	r1, #8
 8003cbc:	486b      	ldr	r0, [pc, #428]	; (8003e6c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003cbe:	f003 ffdf 	bl	8007c80 <HAL_GPIO_WritePin>
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2120      	movs	r1, #32
 8003cc6:	4869      	ldr	r0, [pc, #420]	; (8003e6c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003cc8:	f003 ffda 	bl	8007c80 <HAL_GPIO_WritePin>
 8003ccc:	2201      	movs	r2, #1
 8003cce:	2110      	movs	r1, #16
 8003cd0:	4866      	ldr	r0, [pc, #408]	; (8003e6c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003cd2:	f003 ffd5 	bl	8007c80 <HAL_GPIO_WritePin>
        StraightMovement(SPEED_MODE_1);
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f7fe fcc2 	bl	8002660 <StraightMovement>
        last_curTask_tick = HAL_GetTick();
 8003cdc:	f003 f890 	bl	8006e00 <HAL_GetTick>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4a5c      	ldr	r2, [pc, #368]	; (8003e54 <RobotMoveUntilIRCloseDist+0x2a4>)
 8003ce4:	6013      	str	r3, [r2, #0]
      }

    } while (obsDist_IR_R >= 25);
 8003ce6:	4b57      	ldr	r3, [pc, #348]	; (8003e44 <RobotMoveUntilIRCloseDist+0x294>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b18      	cmp	r3, #24
 8003cec:	d886      	bhi.n	8003bfc <RobotMoveUntilIRCloseDist+0x4c>
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003cee:	4b60      	ldr	r3, [pc, #384]	; (8003e70 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cf6:	4b5e      	ldr	r3, [pc, #376]	; (8003e70 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc1);
 8003cfe:	4856      	ldr	r0, [pc, #344]	; (8003e58 <RobotMoveUntilIRCloseDist+0x2a8>)
 8003d00:	f003 f9c4 	bl	800708c <HAL_ADC_Stop>

    } while (obsDist_IR_L >= 25);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
    HAL_ADC_Stop(&hadc2);
  }
}
 8003d04:	e083      	b.n	8003e0e <RobotMoveUntilIRCloseDist+0x25e>
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003d06:	485b      	ldr	r0, [pc, #364]	; (8003e74 <RobotMoveUntilIRCloseDist+0x2c4>)
 8003d08:	f003 f8ee 	bl	8006ee8 <HAL_ADC_Start>
 8003d0c:	2114      	movs	r1, #20
 8003d0e:	4859      	ldr	r0, [pc, #356]	; (8003e74 <RobotMoveUntilIRCloseDist+0x2c4>)
 8003d10:	f003 f9ef 	bl	80070f2 <HAL_ADC_PollForConversion>
 8003d14:	4857      	ldr	r0, [pc, #348]	; (8003e74 <RobotMoveUntilIRCloseDist+0x2c4>)
 8003d16:	f003 fa77 	bl	8007208 <HAL_ADC_GetValue>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b56      	ldr	r3, [pc, #344]	; (8003e78 <RobotMoveUntilIRCloseDist+0x2c8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4413      	add	r3, r2
 8003d22:	4a55      	ldr	r2, [pc, #340]	; (8003e78 <RobotMoveUntilIRCloseDist+0x2c8>)
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	4b4d      	ldr	r3, [pc, #308]	; (8003e64 <RobotMoveUntilIRCloseDist+0x2b4>)
 8003d2e:	fb83 1302 	smull	r1, r3, r3, r2
 8003d32:	1059      	asrs	r1, r3, #1
 8003d34:	17d3      	asrs	r3, r2, #31
 8003d36:	1ac9      	subs	r1, r1, r3
 8003d38:	460b      	mov	r3, r1
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	1ad1      	subs	r1, r2, r3
 8003d40:	b28a      	uxth	r2, r1
 8003d42:	4b4e      	ldr	r3, [pc, #312]	; (8003e7c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d12c      	bne.n	8003da8 <RobotMoveUntilIRCloseDist+0x1f8>
 8003d4e:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <RobotMoveUntilIRCloseDist+0x2c8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a4a      	ldr	r2, [pc, #296]	; (8003e7c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fbca 	bl	80004f4 <__aeabi_ui2d>
 8003d60:	a331      	add	r3, pc, #196	; (adr r3, 8003e28 <RobotMoveUntilIRCloseDist+0x278>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fa87 	bl	8000278 <__aeabi_dsub>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	a32f      	add	r3, pc, #188	; (adr r3, 8003e30 <RobotMoveUntilIRCloseDist+0x280>)
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f7fc fd60 	bl	800083c <__aeabi_ddiv>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	f7fc feca 	bl	8000b1c <__aeabi_d2uiz>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	4b2e      	ldr	r3, [pc, #184]	; (8003e48 <RobotMoveUntilIRCloseDist+0x298>)
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <RobotMoveUntilIRCloseDist+0x2c8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a39      	ldr	r2, [pc, #228]	; (8003e7c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003d96:	8812      	ldrh	r2, [r2, #0]
 8003d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <RobotMoveUntilIRCloseDist+0x2d0>)
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <RobotMoveUntilIRCloseDist+0x2c8>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003da8:	f003 f82a 	bl	8006e00 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <RobotMoveUntilIRCloseDist+0x2a4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b09      	cmp	r3, #9
 8003db6:	d91b      	bls.n	8003df0 <RobotMoveUntilIRCloseDist+0x240>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003db8:	2200      	movs	r2, #0
 8003dba:	2104      	movs	r1, #4
 8003dbc:	482b      	ldr	r0, [pc, #172]	; (8003e6c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003dbe:	f003 ff5f 	bl	8007c80 <HAL_GPIO_WritePin>
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	2108      	movs	r1, #8
 8003dc6:	4829      	ldr	r0, [pc, #164]	; (8003e6c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003dc8:	f003 ff5a 	bl	8007c80 <HAL_GPIO_WritePin>
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2120      	movs	r1, #32
 8003dd0:	4826      	ldr	r0, [pc, #152]	; (8003e6c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003dd2:	f003 ff55 	bl	8007c80 <HAL_GPIO_WritePin>
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	2110      	movs	r1, #16
 8003dda:	4824      	ldr	r0, [pc, #144]	; (8003e6c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003ddc:	f003 ff50 	bl	8007c80 <HAL_GPIO_WritePin>
        StraightMovement(SPEED_MODE_1);
 8003de0:	2001      	movs	r0, #1
 8003de2:	f7fe fc3d 	bl	8002660 <StraightMovement>
        last_curTask_tick = HAL_GetTick();
 8003de6:	f003 f80b 	bl	8006e00 <HAL_GetTick>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <RobotMoveUntilIRCloseDist+0x2a4>)
 8003dee:	6013      	str	r3, [r2, #0]
    } while (obsDist_IR_L >= 25);
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <RobotMoveUntilIRCloseDist+0x298>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b18      	cmp	r3, #24
 8003df6:	d886      	bhi.n	8003d06 <RobotMoveUntilIRCloseDist+0x156>
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003df8:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2200      	movs	r2, #0
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc2);
 8003e08:	481a      	ldr	r0, [pc, #104]	; (8003e74 <RobotMoveUntilIRCloseDist+0x2c4>)
 8003e0a:	f003 f93f 	bl	800708c <HAL_ADC_Stop>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	d78811b2 	.word	0xd78811b2
 8003e1c:	40aa5cf5 	.word	0x40aa5cf5
 8003e20:	e3e6c4c6 	.word	0xe3e6c4c6
 8003e24:	c04f98da 	.word	0xc04f98da
 8003e28:	31b9b670 	.word	0x31b9b670
 8003e2c:	40a9a8fd 	.word	0x40a9a8fd
 8003e30:	725c3dee 	.word	0x725c3dee
 8003e34:	c04e59dc 	.word	0xc04e59dc
 8003e38:	20000518 	.word	0x20000518
 8003e3c:	20000504 	.word	0x20000504
 8003e40:	20000540 	.word	0x20000540
 8003e44:	20000559 	.word	0x20000559
 8003e48:	20000558 	.word	0x20000558
 8003e4c:	200004e8 	.word	0x200004e8
 8003e50:	200004ee 	.word	0x200004ee
 8003e54:	200004f4 	.word	0x200004f4
 8003e58:	200001c0 	.word	0x200001c0
 8003e5c:	20000560 	.word	0x20000560
 8003e60:	2000055a 	.word	0x2000055a
 8003e64:	66666667 	.word	0x66666667
 8003e68:	20000554 	.word	0x20000554
 8003e6c:	40020000 	.word	0x40020000
 8003e70:	200003c4 	.word	0x200003c4
 8003e74:	20000208 	.word	0x20000208
 8003e78:	20000564 	.word	0x20000564
 8003e7c:	2000055c 	.word	0x2000055c
 8003e80:	20000556 	.word	0x20000556

08003e84 <RobotTurnFC45>:

void RobotTurnFC45()
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  //  FC45
  targetAngle = -(45 - FCOFFSET);
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <RobotTurnFC45+0x78>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	3b2d      	subs	r3, #45	; 0x2d
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e96:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <RobotTurnFC45+0x7c>)
 8003e98:	edc3 7a00 	vstr	s15, [r3]
  __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <RobotTurnFC45+0x80>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea6:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <RobotTurnFC45+0x80>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f240 5235 	movw	r2, #1333	; 0x535
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
  __SET_SERVO_TURN_MAX(&htim1, 1);
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <RobotTurnFC45+0x84>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f240 1209 	movw	r2, #265	; 0x109
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8003eba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ebe:	f002 ffab 	bl	8006e18 <HAL_Delay>
  __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	4811      	ldr	r0, [pc, #68]	; (8003f0c <RobotTurnFC45+0x88>)
 8003ec8:	f003 feda 	bl	8007c80 <HAL_GPIO_WritePin>
 8003ecc:	2201      	movs	r2, #1
 8003ece:	2108      	movs	r1, #8
 8003ed0:	480e      	ldr	r0, [pc, #56]	; (8003f0c <RobotTurnFC45+0x88>)
 8003ed2:	f003 fed5 	bl	8007c80 <HAL_GPIO_WritePin>
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2120      	movs	r1, #32
 8003eda:	480c      	ldr	r0, [pc, #48]	; (8003f0c <RobotTurnFC45+0x88>)
 8003edc:	f003 fed0 	bl	8007c80 <HAL_GPIO_WritePin>
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	2110      	movs	r1, #16
 8003ee4:	4809      	ldr	r0, [pc, #36]	; (8003f0c <RobotTurnFC45+0x88>)
 8003ee6:	f003 fecb 	bl	8007c80 <HAL_GPIO_WritePin>
  RobotTurn(&targetAngle);
 8003eea:	4805      	ldr	r0, [pc, #20]	; (8003f00 <RobotTurnFC45+0x7c>)
 8003eec:	f7ff f94c 	bl	8003188 <RobotTurn>
  osDelay(300); // reset wheel
 8003ef0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ef4:	f008 fb42 	bl	800c57c <osDelay>
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000002 	.word	0x20000002
 8003f00:	200004e4 	.word	0x200004e4
 8003f04:	200003c4 	.word	0x200003c4
 8003f08:	200002a4 	.word	0x200002a4
 8003f0c:	40020000 	.word	0x40020000

08003f10 <RobotTurnFA45>:
  RobotTurn(&targetAngle);
  osDelay(300); // reset wheel
}

void RobotTurnFA45()
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  // FA45
  targetAngle = (45 - FAOFFSET);
 8003f14:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <RobotTurnFA45+0x78>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <RobotTurnFA45+0x7c>)
 8003f26:	edc3 7a00 	vstr	s15, [r3]
  __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8003f2a:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <RobotTurnFA45+0x80>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f240 5235 	movw	r2, #1333	; 0x535
 8003f32:	635a      	str	r2, [r3, #52]	; 0x34
 8003f34:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <RobotTurnFA45+0x80>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
  __SET_SERVO_TURN(&htim1, 90);
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <RobotTurnFA45+0x84>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	225a      	movs	r2, #90	; 0x5a
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
 8003f46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003f4a:	f002 ff65 	bl	8006e18 <HAL_Delay>
  __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2104      	movs	r1, #4
 8003f52:	4811      	ldr	r0, [pc, #68]	; (8003f98 <RobotTurnFA45+0x88>)
 8003f54:	f003 fe94 	bl	8007c80 <HAL_GPIO_WritePin>
 8003f58:	2201      	movs	r2, #1
 8003f5a:	2108      	movs	r1, #8
 8003f5c:	480e      	ldr	r0, [pc, #56]	; (8003f98 <RobotTurnFA45+0x88>)
 8003f5e:	f003 fe8f 	bl	8007c80 <HAL_GPIO_WritePin>
 8003f62:	2200      	movs	r2, #0
 8003f64:	2120      	movs	r1, #32
 8003f66:	480c      	ldr	r0, [pc, #48]	; (8003f98 <RobotTurnFA45+0x88>)
 8003f68:	f003 fe8a 	bl	8007c80 <HAL_GPIO_WritePin>
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	2110      	movs	r1, #16
 8003f70:	4809      	ldr	r0, [pc, #36]	; (8003f98 <RobotTurnFA45+0x88>)
 8003f72:	f003 fe85 	bl	8007c80 <HAL_GPIO_WritePin>
  RobotTurn(&targetAngle);
 8003f76:	4805      	ldr	r0, [pc, #20]	; (8003f8c <RobotTurnFA45+0x7c>)
 8003f78:	f7ff f906 	bl	8003188 <RobotTurn>
  osDelay(300); // reset wheel
 8003f7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003f80:	f008 fafc 	bl	800c57c <osDelay>
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000003 	.word	0x20000003
 8003f8c:	200004e4 	.word	0x200004e4
 8003f90:	200003c4 	.word	0x200003c4
 8003f94:	200002a4 	.word	0x200002a4
 8003f98:	40020000 	.word	0x40020000

08003f9c <RobotTurnFR30>:
  osDelay(300); // reset wheel
}

// For Task 2 Turn B - outdoor
void RobotTurnFR30()
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  targetDist = 4;
 8003fa0:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <RobotTurnFR30+0x10c>)
 8003fa2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003fa6:	601a      	str	r2, [r3, #0]
  RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2101      	movs	r1, #1
 8003fac:	483e      	ldr	r0, [pc, #248]	; (80040a8 <RobotTurnFR30+0x10c>)
 8003fae:	f7fe fd7f 	bl	8002ab0 <RobotMoveDistance>
  __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8003fb2:	4b3e      	ldr	r3, [pc, #248]	; (80040ac <RobotTurnFR30+0x110>)
 8003fb4:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003fb8:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80040b0 <RobotTurnFR30+0x114>
 8003fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc4:	dd02      	ble.n	8003fcc <RobotTurnFR30+0x30>
 8003fc6:	f240 1309 	movw	r3, #265	; 0x109
 8003fca:	e012      	b.n	8003ff2 <RobotTurnFR30+0x56>
 8003fcc:	4b37      	ldr	r3, [pc, #220]	; (80040ac <RobotTurnFR30+0x110>)
 8003fce:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003fd2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80040b4 <RobotTurnFR30+0x118>
 8003fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fde:	d501      	bpl.n	8003fe4 <RobotTurnFR30+0x48>
 8003fe0:	2346      	movs	r3, #70	; 0x46
 8003fe2:	e006      	b.n	8003ff2 <RobotTurnFR30+0x56>
 8003fe4:	4b31      	ldr	r3, [pc, #196]	; (80040ac <RobotTurnFR30+0x110>)
 8003fe6:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fee:	ee17 3a90 	vmov	r3, s15
 8003ff2:	4a31      	ldr	r2, [pc, #196]	; (80040b8 <RobotTurnFR30+0x11c>)
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ffc:	f002 ff0c 	bl	8006e18 <HAL_Delay>
 8004000:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <RobotTurnFR30+0x110>)
 8004002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004006:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <RobotTurnFR30+0x120>)
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b28      	ldr	r3, [pc, #160]	; (80040ac <RobotTurnFR30+0x110>)
 800400c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	2104      	movs	r1, #4
 800401e:	4828      	ldr	r0, [pc, #160]	; (80040c0 <RobotTurnFR30+0x124>)
 8004020:	f003 fe2e 	bl	8007c80 <HAL_GPIO_WritePin>
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <RobotTurnFR30+0x110>)
 8004026:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf14      	ite	ne
 800402e:	2301      	movne	r3, #1
 8004030:	2300      	moveq	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	2108      	movs	r1, #8
 8004038:	4821      	ldr	r0, [pc, #132]	; (80040c0 <RobotTurnFR30+0x124>)
 800403a:	f003 fe21 	bl	8007c80 <HAL_GPIO_WritePin>
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <RobotTurnFR30+0x110>)
 8004040:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	2120      	movs	r1, #32
 8004052:	481b      	ldr	r0, [pc, #108]	; (80040c0 <RobotTurnFR30+0x124>)
 8004054:	f003 fe14 	bl	8007c80 <HAL_GPIO_WritePin>
 8004058:	4b14      	ldr	r3, [pc, #80]	; (80040ac <RobotTurnFR30+0x110>)
 800405a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800405e:	2b00      	cmp	r3, #0
 8004060:	bf14      	ite	ne
 8004062:	2301      	movne	r3, #1
 8004064:	2300      	moveq	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	2110      	movs	r1, #16
 800406c:	4814      	ldr	r0, [pc, #80]	; (80040c0 <RobotTurnFR30+0x124>)
 800406e:	f003 fe07 	bl	8007c80 <HAL_GPIO_WritePin>
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <RobotTurnFR30+0x110>)
 8004074:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8004078:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <RobotTurnFR30+0x128>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	635a      	str	r2, [r3, #52]	; 0x34
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <RobotTurnFR30+0x110>)
 8004080:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <RobotTurnFR30+0x128>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 800408a:	480c      	ldr	r0, [pc, #48]	; (80040bc <RobotTurnFR30+0x120>)
 800408c:	f7ff f87c 	bl	8003188 <RobotTurn>
  targetDist = 2;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <RobotTurnFR30+0x10c>)
 8004092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004096:	601a      	str	r2, [r3, #0]
  RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004098:	2200      	movs	r2, #0
 800409a:	2100      	movs	r1, #0
 800409c:	4802      	ldr	r0, [pc, #8]	; (80040a8 <RobotTurnFR30+0x10c>)
 800409e:	f7fe fd07 	bl	8002ab0 <RobotMoveDistance>
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200004f8 	.word	0x200004f8
 80040ac:	20000004 	.word	0x20000004
 80040b0:	43848000 	.word	0x43848000
 80040b4:	428c0000 	.word	0x428c0000
 80040b8:	200002a4 	.word	0x200002a4
 80040bc:	200004e4 	.word	0x200004e4
 80040c0:	40020000 	.word	0x40020000
 80040c4:	200003c4 	.word	0x200003c4

080040c8 <RobotTurnFL30>:
void RobotTurnFL30()
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  targetDist = 5;
 80040cc:	4b40      	ldr	r3, [pc, #256]	; (80041d0 <RobotTurnFL30+0x108>)
 80040ce:	4a41      	ldr	r2, [pc, #260]	; (80041d4 <RobotTurnFL30+0x10c>)
 80040d0:	601a      	str	r2, [r3, #0]
  RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80040d2:	2200      	movs	r2, #0
 80040d4:	2101      	movs	r1, #1
 80040d6:	483e      	ldr	r0, [pc, #248]	; (80041d0 <RobotTurnFL30+0x108>)
 80040d8:	f7fe fcea 	bl	8002ab0 <RobotMoveDistance>
  __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 80040dc:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <RobotTurnFL30+0x110>)
 80040de:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80040e2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80041dc <RobotTurnFL30+0x114>
 80040e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ee:	dd02      	ble.n	80040f6 <RobotTurnFL30+0x2e>
 80040f0:	f240 1309 	movw	r3, #265	; 0x109
 80040f4:	e012      	b.n	800411c <RobotTurnFL30+0x54>
 80040f6:	4b38      	ldr	r3, [pc, #224]	; (80041d8 <RobotTurnFL30+0x110>)
 80040f8:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80040fc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80041e0 <RobotTurnFL30+0x118>
 8004100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004108:	d501      	bpl.n	800410e <RobotTurnFL30+0x46>
 800410a:	2346      	movs	r3, #70	; 0x46
 800410c:	e006      	b.n	800411c <RobotTurnFL30+0x54>
 800410e:	4b32      	ldr	r3, [pc, #200]	; (80041d8 <RobotTurnFL30+0x110>)
 8004110:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004118:	ee17 3a90 	vmov	r3, s15
 800411c:	4a31      	ldr	r2, [pc, #196]	; (80041e4 <RobotTurnFL30+0x11c>)
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
 8004122:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004126:	f002 fe77 	bl	8006e18 <HAL_Delay>
 800412a:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <RobotTurnFL30+0x110>)
 800412c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004130:	4a2d      	ldr	r2, [pc, #180]	; (80041e8 <RobotTurnFL30+0x120>)
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <RobotTurnFL30+0x110>)
 8004136:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800413a:	2b00      	cmp	r3, #0
 800413c:	bf0c      	ite	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	2300      	movne	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	2104      	movs	r1, #4
 8004148:	4828      	ldr	r0, [pc, #160]	; (80041ec <RobotTurnFL30+0x124>)
 800414a:	f003 fd99 	bl	8007c80 <HAL_GPIO_WritePin>
 800414e:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <RobotTurnFL30+0x110>)
 8004150:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	2108      	movs	r1, #8
 8004162:	4822      	ldr	r0, [pc, #136]	; (80041ec <RobotTurnFL30+0x124>)
 8004164:	f003 fd8c 	bl	8007c80 <HAL_GPIO_WritePin>
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <RobotTurnFL30+0x110>)
 800416a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	2120      	movs	r1, #32
 800417c:	481b      	ldr	r0, [pc, #108]	; (80041ec <RobotTurnFL30+0x124>)
 800417e:	f003 fd7f 	bl	8007c80 <HAL_GPIO_WritePin>
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <RobotTurnFL30+0x110>)
 8004184:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	2110      	movs	r1, #16
 8004196:	4815      	ldr	r0, [pc, #84]	; (80041ec <RobotTurnFL30+0x124>)
 8004198:	f003 fd72 	bl	8007c80 <HAL_GPIO_WritePin>
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <RobotTurnFL30+0x110>)
 800419e:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 80041a2:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <RobotTurnFL30+0x128>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <RobotTurnFL30+0x110>)
 80041aa:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <RobotTurnFL30+0x128>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 80041b4:	480c      	ldr	r0, [pc, #48]	; (80041e8 <RobotTurnFL30+0x120>)
 80041b6:	f7fe ffe7 	bl	8003188 <RobotTurn>
  targetDist = 3;
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <RobotTurnFL30+0x108>)
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <RobotTurnFL30+0x12c>)
 80041be:	601a      	str	r2, [r3, #0]
  RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80041c0:	2200      	movs	r2, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <RobotTurnFL30+0x108>)
 80041c6:	f7fe fc73 	bl	8002ab0 <RobotMoveDistance>
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	200004f8 	.word	0x200004f8
 80041d4:	40a00000 	.word	0x40a00000
 80041d8:	20000004 	.word	0x20000004
 80041dc:	43848000 	.word	0x43848000
 80041e0:	428c0000 	.word	0x428c0000
 80041e4:	200002a4 	.word	0x200002a4
 80041e8:	200004e4 	.word	0x200004e4
 80041ec:	40020000 	.word	0x40020000
 80041f0:	200003c4 	.word	0x200003c4
 80041f4:	40400000 	.word	0x40400000

080041f8 <RobotTurnFL00>:

// For Task 2 Turn B - indoor
void RobotTurnFL00()
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  targetDist = 8;
 80041fc:	4b40      	ldr	r3, [pc, #256]	; (8004300 <RobotTurnFL00+0x108>)
 80041fe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8004202:	601a      	str	r2, [r3, #0]
  RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004204:	2200      	movs	r2, #0
 8004206:	2101      	movs	r1, #1
 8004208:	483d      	ldr	r0, [pc, #244]	; (8004300 <RobotTurnFL00+0x108>)
 800420a:	f7fe fc51 	bl	8002ab0 <RobotMoveDistance>
  __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 800420e:	4b3d      	ldr	r3, [pc, #244]	; (8004304 <RobotTurnFL00+0x10c>)
 8004210:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004214:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004308 <RobotTurnFL00+0x110>
 8004218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	dd02      	ble.n	8004228 <RobotTurnFL00+0x30>
 8004222:	f240 1309 	movw	r3, #265	; 0x109
 8004226:	e012      	b.n	800424e <RobotTurnFL00+0x56>
 8004228:	4b36      	ldr	r3, [pc, #216]	; (8004304 <RobotTurnFL00+0x10c>)
 800422a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800422e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800430c <RobotTurnFL00+0x114>
 8004232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	d501      	bpl.n	8004240 <RobotTurnFL00+0x48>
 800423c:	2346      	movs	r3, #70	; 0x46
 800423e:	e006      	b.n	800424e <RobotTurnFL00+0x56>
 8004240:	4b30      	ldr	r3, [pc, #192]	; (8004304 <RobotTurnFL00+0x10c>)
 8004242:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424a:	ee17 3a90 	vmov	r3, s15
 800424e:	4a30      	ldr	r2, [pc, #192]	; (8004310 <RobotTurnFL00+0x118>)
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	6413      	str	r3, [r2, #64]	; 0x40
 8004254:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004258:	f002 fdde 	bl	8006e18 <HAL_Delay>
 800425c:	4b29      	ldr	r3, [pc, #164]	; (8004304 <RobotTurnFL00+0x10c>)
 800425e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004260:	4a2c      	ldr	r2, [pc, #176]	; (8004314 <RobotTurnFL00+0x11c>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <RobotTurnFL00+0x10c>)
 8004266:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	2104      	movs	r1, #4
 8004278:	4827      	ldr	r0, [pc, #156]	; (8004318 <RobotTurnFL00+0x120>)
 800427a:	f003 fd01 	bl	8007c80 <HAL_GPIO_WritePin>
 800427e:	4b21      	ldr	r3, [pc, #132]	; (8004304 <RobotTurnFL00+0x10c>)
 8004280:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	2108      	movs	r1, #8
 8004292:	4821      	ldr	r0, [pc, #132]	; (8004318 <RobotTurnFL00+0x120>)
 8004294:	f003 fcf4 	bl	8007c80 <HAL_GPIO_WritePin>
 8004298:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <RobotTurnFL00+0x10c>)
 800429a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	2120      	movs	r1, #32
 80042ac:	481a      	ldr	r0, [pc, #104]	; (8004318 <RobotTurnFL00+0x120>)
 80042ae:	f003 fce7 	bl	8007c80 <HAL_GPIO_WritePin>
 80042b2:	4b14      	ldr	r3, [pc, #80]	; (8004304 <RobotTurnFL00+0x10c>)
 80042b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	2110      	movs	r1, #16
 80042c6:	4814      	ldr	r0, [pc, #80]	; (8004318 <RobotTurnFL00+0x120>)
 80042c8:	f003 fcda 	bl	8007c80 <HAL_GPIO_WritePin>
 80042cc:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <RobotTurnFL00+0x10c>)
 80042ce:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <RobotTurnFL00+0x124>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	635a      	str	r2, [r3, #52]	; 0x34
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <RobotTurnFL00+0x10c>)
 80042da:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <RobotTurnFL00+0x124>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 80042e4:	480b      	ldr	r0, [pc, #44]	; (8004314 <RobotTurnFL00+0x11c>)
 80042e6:	f7fe ff4f 	bl	8003188 <RobotTurn>
  targetDist = 2;
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <RobotTurnFL00+0x108>)
 80042ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042f0:	601a      	str	r2, [r3, #0]
  RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80042f2:	2200      	movs	r2, #0
 80042f4:	2101      	movs	r1, #1
 80042f6:	4802      	ldr	r0, [pc, #8]	; (8004300 <RobotTurnFL00+0x108>)
 80042f8:	f7fe fbda 	bl	8002ab0 <RobotMoveDistance>
}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	200004f8 	.word	0x200004f8
 8004304:	20000004 	.word	0x20000004
 8004308:	43848000 	.word	0x43848000
 800430c:	428c0000 	.word	0x428c0000
 8004310:	200002a4 	.word	0x200002a4
 8004314:	200004e4 	.word	0x200004e4
 8004318:	40020000 	.word	0x40020000
 800431c:	200003c4 	.word	0x200003c4

08004320 <RobotTurnFR00>:

void RobotTurnFR00()
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  targetDist = 3.5;
 8004324:	4b40      	ldr	r3, [pc, #256]	; (8004428 <RobotTurnFR00+0x108>)
 8004326:	4a41      	ldr	r2, [pc, #260]	; (800442c <RobotTurnFR00+0x10c>)
 8004328:	601a      	str	r2, [r3, #0]
  RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800432a:	2200      	movs	r2, #0
 800432c:	2101      	movs	r1, #1
 800432e:	483e      	ldr	r0, [pc, #248]	; (8004428 <RobotTurnFR00+0x108>)
 8004330:	f7fe fbbe 	bl	8002ab0 <RobotMoveDistance>
  __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8004334:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <RobotTurnFR00+0x110>)
 8004336:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800433a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004434 <RobotTurnFR00+0x114>
 800433e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	dd02      	ble.n	800434e <RobotTurnFR00+0x2e>
 8004348:	f240 1309 	movw	r3, #265	; 0x109
 800434c:	e012      	b.n	8004374 <RobotTurnFR00+0x54>
 800434e:	4b38      	ldr	r3, [pc, #224]	; (8004430 <RobotTurnFR00+0x110>)
 8004350:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004354:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004438 <RobotTurnFR00+0x118>
 8004358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	d501      	bpl.n	8004366 <RobotTurnFR00+0x46>
 8004362:	2346      	movs	r3, #70	; 0x46
 8004364:	e006      	b.n	8004374 <RobotTurnFR00+0x54>
 8004366:	4b32      	ldr	r3, [pc, #200]	; (8004430 <RobotTurnFR00+0x110>)
 8004368:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800436c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004370:	ee17 3a90 	vmov	r3, s15
 8004374:	4a31      	ldr	r2, [pc, #196]	; (800443c <RobotTurnFR00+0x11c>)
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800437e:	f002 fd4b 	bl	8006e18 <HAL_Delay>
 8004382:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <RobotTurnFR00+0x110>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	4a2d      	ldr	r2, [pc, #180]	; (8004440 <RobotTurnFR00+0x120>)
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b28      	ldr	r3, [pc, #160]	; (8004430 <RobotTurnFR00+0x110>)
 800438e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	2104      	movs	r1, #4
 80043a0:	4828      	ldr	r0, [pc, #160]	; (8004444 <RobotTurnFR00+0x124>)
 80043a2:	f003 fc6d 	bl	8007c80 <HAL_GPIO_WritePin>
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <RobotTurnFR00+0x110>)
 80043a8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	2108      	movs	r1, #8
 80043ba:	4822      	ldr	r0, [pc, #136]	; (8004444 <RobotTurnFR00+0x124>)
 80043bc:	f003 fc60 	bl	8007c80 <HAL_GPIO_WritePin>
 80043c0:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <RobotTurnFR00+0x110>)
 80043c2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bf0c      	ite	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	2300      	movne	r3, #0
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	2120      	movs	r1, #32
 80043d4:	481b      	ldr	r0, [pc, #108]	; (8004444 <RobotTurnFR00+0x124>)
 80043d6:	f003 fc53 	bl	8007c80 <HAL_GPIO_WritePin>
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <RobotTurnFR00+0x110>)
 80043dc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	2110      	movs	r1, #16
 80043ee:	4815      	ldr	r0, [pc, #84]	; (8004444 <RobotTurnFR00+0x124>)
 80043f0:	f003 fc46 	bl	8007c80 <HAL_GPIO_WritePin>
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <RobotTurnFR00+0x110>)
 80043f6:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 80043fa:	4b13      	ldr	r3, [pc, #76]	; (8004448 <RobotTurnFR00+0x128>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	635a      	str	r2, [r3, #52]	; 0x34
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <RobotTurnFR00+0x110>)
 8004402:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <RobotTurnFR00+0x128>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 800440c:	480c      	ldr	r0, [pc, #48]	; (8004440 <RobotTurnFR00+0x120>)
 800440e:	f7fe febb 	bl	8003188 <RobotTurn>
  targetDist = 4;
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <RobotTurnFR00+0x108>)
 8004414:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004418:	601a      	str	r2, [r3, #0]
  RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800441a:	2200      	movs	r2, #0
 800441c:	2100      	movs	r1, #0
 800441e:	4802      	ldr	r0, [pc, #8]	; (8004428 <RobotTurnFR00+0x108>)
 8004420:	f7fe fb46 	bl	8002ab0 <RobotMoveDistance>
}
 8004424:	bf00      	nop
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200004f8 	.word	0x200004f8
 800442c:	40600000 	.word	0x40600000
 8004430:	20000004 	.word	0x20000004
 8004434:	43848000 	.word	0x43848000
 8004438:	428c0000 	.word	0x428c0000
 800443c:	200002a4 	.word	0x200002a4
 8004440:	200004e4 	.word	0x200004e4
 8004444:	40020000 	.word	0x40020000
 8004448:	200003c4 	.word	0x200003c4

0800444c <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8004454:	2064      	movs	r0, #100	; 0x64
 8004456:	f008 f891 	bl	800c57c <osDelay>
 800445a:	e7fb      	b.n	8004454 <runEncoder+0x8>

0800445c <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af02      	add	r7, sp, #8
 8004462:	6078      	str	r0, [r7, #4]
    // HAL_UART_Transmit(&huart3, aRxBuffer, RX_BUFFER_SIZE, 0xFFFF);
    // IR_data_raw_acc_R = HAL_ADC_GetValue(&hadc1);
    // IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);

    // ir debugging
    HAL_ADC_Start(&hadc2);
 8004464:	481a      	ldr	r0, [pc, #104]	; (80044d0 <runOledTask+0x74>)
 8004466:	f002 fd3f 	bl	8006ee8 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc1);
 800446a:	481a      	ldr	r0, [pc, #104]	; (80044d4 <runOledTask+0x78>)
 800446c:	f002 fd3c 	bl	8006ee8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 20);
 8004470:	2114      	movs	r1, #20
 8004472:	4817      	ldr	r0, [pc, #92]	; (80044d0 <runOledTask+0x74>)
 8004474:	f002 fe3d 	bl	80070f2 <HAL_ADC_PollForConversion>
    HAL_ADC_PollForConversion(&hadc1, 20);
 8004478:	2114      	movs	r1, #20
 800447a:	4816      	ldr	r0, [pc, #88]	; (80044d4 <runOledTask+0x78>)
 800447c:	f002 fe39 	bl	80070f2 <HAL_ADC_PollForConversion>
    // HAL_UART_Transmit(&huart3, (uint8_t *)IR_data_raw_acc_R, 4, 0xFFFF);
    // HAL_ADC_Stop(&hadc1);
    // HAL_ADC_Start(&hadc2);
    // HAL_ADC_PollForConversion(&hadc2, 20);
    // IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);
    OLED_ShowNumber(0, 20, HAL_ADC_GetValue(&hadc2), 5, 12);
 8004480:	4813      	ldr	r0, [pc, #76]	; (80044d0 <runOledTask+0x74>)
 8004482:	f002 fec1 	bl	8007208 <HAL_ADC_GetValue>
 8004486:	4602      	mov	r2, r0
 8004488:	230c      	movs	r3, #12
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2305      	movs	r3, #5
 800448e:	2114      	movs	r1, #20
 8004490:	2000      	movs	r0, #0
 8004492:	f00a ff7b 	bl	800f38c <OLED_ShowNumber>
    OLED_ShowNumber(60, 20, HAL_ADC_GetValue(&hadc1), 5, 12);
 8004496:	480f      	ldr	r0, [pc, #60]	; (80044d4 <runOledTask+0x78>)
 8004498:	f002 feb6 	bl	8007208 <HAL_ADC_GetValue>
 800449c:	4602      	mov	r2, r0
 800449e:	230c      	movs	r3, #12
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	2305      	movs	r3, #5
 80044a4:	2114      	movs	r1, #20
 80044a6:	203c      	movs	r0, #60	; 0x3c
 80044a8:	f00a ff70 	bl	800f38c <OLED_ShowNumber>

    // char temp[10];
    // snprintf((char *)temp, sizeof(temp) - 1, "%d\n", HAL_ADC_GetValue(&hadc2));
    // HAL_UART_Transmit(&huart3, (uint8_t *)temp, strlen(temp), 0xFFFF);

    HAL_ADC_Stop(&hadc2);
 80044ac:	4808      	ldr	r0, [pc, #32]	; (80044d0 <runOledTask+0x74>)
 80044ae:	f002 fded 	bl	800708c <HAL_ADC_Stop>
    HAL_ADC_Stop(&hadc1);
 80044b2:	4808      	ldr	r0, [pc, #32]	; (80044d4 <runOledTask+0x78>)
 80044b4:	f002 fdea 	bl	800708c <HAL_ADC_Stop>
    // us debugging
    // HCSR04_Read();
    // OLED_ShowNumber(0, 0, obsDist_US, 5, 12);

    // display current command
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 80044b8:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <runOledTask+0x7c>)
 80044ba:	2128      	movs	r1, #40	; 0x28
 80044bc:	2000      	movs	r0, #0
 80044be:	f00a ffd3 	bl	800f468 <OLED_ShowString>

    OLED_Refresh_Gram();
 80044c2:	f00a fdd3 	bl	800f06c <OLED_Refresh_Gram>
    osDelay(100);
 80044c6:	2064      	movs	r0, #100	; 0x64
 80044c8:	f008 f858 	bl	800c57c <osDelay>
    HAL_ADC_Start(&hadc2);
 80044cc:	e7ca      	b.n	8004464 <runOledTask+0x8>
 80044ce:	bf00      	nop
 80044d0:	20000208 	.word	0x20000208
 80044d4:	200001c0 	.word	0x200001c0
 80044d8:	2000048c 	.word	0x2000048c

080044dc <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFWTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_FORWARD)
 80044e4:	4b75      	ldr	r3, [pc, #468]	; (80046bc <runFWTask+0x1e0>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <runFWTask+0x1a>
      osDelay(1000);
 80044ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044f0:	f008 f844 	bl	800c57c <osDelay>
 80044f4:	e7f6      	b.n	80044e4 <runFWTask+0x8>
    else
    {
      targetDist = 0;
 80044f6:	4b72      	ldr	r3, [pc, #456]	; (80046c0 <runFWTask+0x1e4>)
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 80044fe:	4b71      	ldr	r3, [pc, #452]	; (80046c4 <runFWTask+0x1e8>)
 8004500:	2200      	movs	r2, #0
 8004502:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 8004504:	4b70      	ldr	r3, [pc, #448]	; (80046c8 <runFWTask+0x1ec>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d05d      	beq.n	80045c8 <runFWTask+0xec>
      {

        angleNow = 0;
 800450c:	4b6f      	ldr	r3, [pc, #444]	; (80046cc <runFWTask+0x1f0>)
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 8004514:	4b6e      	ldr	r3, [pc, #440]	; (80046d0 <runFWTask+0x1f4>)
 8004516:	2200      	movs	r2, #0
 8004518:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 800451a:	486e      	ldr	r0, [pc, #440]	; (80046d4 <runFWTask+0x1f8>)
 800451c:	f7fe f84d 	bl	80025ba <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 8004520:	486d      	ldr	r0, [pc, #436]	; (80046d8 <runFWTask+0x1fc>)
 8004522:	f7fe f84a 	bl	80025ba <PIDConfigReset>
        PIDConfigReset(&pidFast);
 8004526:	486d      	ldr	r0, [pc, #436]	; (80046dc <runFWTask+0x200>)
 8004528:	f7fe f847 	bl	80025ba <PIDConfigReset>
        PIDConfigReset(&pidZoomZoom);
 800452c:	486c      	ldr	r0, [pc, #432]	; (80046e0 <runFWTask+0x204>)
 800452e:	f7fe f844 	bl	80025ba <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004532:	2200      	movs	r2, #0
 8004534:	2104      	movs	r1, #4
 8004536:	486b      	ldr	r0, [pc, #428]	; (80046e4 <runFWTask+0x208>)
 8004538:	f003 fba2 	bl	8007c80 <HAL_GPIO_WritePin>
 800453c:	2201      	movs	r2, #1
 800453e:	2108      	movs	r1, #8
 8004540:	4868      	ldr	r0, [pc, #416]	; (80046e4 <runFWTask+0x208>)
 8004542:	f003 fb9d 	bl	8007c80 <HAL_GPIO_WritePin>
 8004546:	2200      	movs	r2, #0
 8004548:	2120      	movs	r1, #32
 800454a:	4866      	ldr	r0, [pc, #408]	; (80046e4 <runFWTask+0x208>)
 800454c:	f003 fb98 	bl	8007c80 <HAL_GPIO_WritePin>
 8004550:	2201      	movs	r2, #1
 8004552:	2110      	movs	r1, #16
 8004554:	4863      	ldr	r0, [pc, #396]	; (80046e4 <runFWTask+0x208>)
 8004556:	f003 fb93 	bl	8007c80 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 800455a:	4b63      	ldr	r3, [pc, #396]	; (80046e8 <runFWTask+0x20c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	635a      	str	r2, [r3, #52]	; 0x34
 8004562:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <runFWTask+0x20c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2200      	movs	r2, #0
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
 800456a:	4b54      	ldr	r3, [pc, #336]	; (80046bc <runFWTask+0x1e0>)
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	4b5f      	ldr	r3, [pc, #380]	; (80046ec <runFWTask+0x210>)
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	4b52      	ldr	r3, [pc, #328]	; (80046bc <runFWTask+0x1e0>)
 8004574:	2211      	movs	r2, #17
 8004576:	701a      	strb	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 8004578:	4b5d      	ldr	r3, [pc, #372]	; (80046f0 <runFWTask+0x214>)
 800457a:	2264      	movs	r2, #100	; 0x64
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	4b5c      	ldr	r3, [pc, #368]	; (80046f0 <runFWTask+0x214>)
 8004580:	2200      	movs	r2, #0
 8004582:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004588:	2206      	movs	r2, #6
 800458a:	495a      	ldr	r1, [pc, #360]	; (80046f4 <runFWTask+0x218>)
 800458c:	485a      	ldr	r0, [pc, #360]	; (80046f8 <runFWTask+0x21c>)
 800458e:	f006 feaa 	bl	800b2e6 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 8004592:	f002 fc35 	bl	8006e00 <HAL_GetTick>
 8004596:	4603      	mov	r3, r0
 8004598:	4a58      	ldr	r2, [pc, #352]	; (80046fc <runFWTask+0x220>)
 800459a:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 800459c:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <runFWTask+0x1ec>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8088 	beq.w	80046b6 <runFWTask+0x1da>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 80045a6:	f002 fc2b 	bl	8006e00 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b53      	ldr	r3, [pc, #332]	; (80046fc <runFWTask+0x220>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b09      	cmp	r3, #9
 80045b4:	d9f2      	bls.n	800459c <runFWTask+0xc0>
          {

            StraightMovement(SPEED_MODE_T);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7fe f852 	bl	8002660 <StraightMovement>
            last_curTask_tick = HAL_GetTick();
 80045bc:	f002 fc20 	bl	8006e00 <HAL_GetTick>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4a4e      	ldr	r2, [pc, #312]	; (80046fc <runFWTask+0x220>)
 80045c4:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 80045c6:	e7e9      	b.n	800459c <runFWTask+0xc0>
        } while (1);
      }
      else
      {

        targetDist = (float)curCmd.val;
 80045c8:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <runFWTask+0x214>)
 80045ca:	885b      	ldrh	r3, [r3, #2]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d4:	4b3a      	ldr	r3, [pc, #232]	; (80046c0 <runFWTask+0x1e4>)
 80045d6:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 10, move mode must be forced to SLOW
        if (targetDist <= 15)
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <runFWTask+0x1e4>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80045e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ec:	d802      	bhi.n	80045f4 <runFWTask+0x118>
          moveMode = SLOW;
 80045ee:	4b44      	ldr	r3, [pc, #272]	; (8004700 <runFWTask+0x224>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]

        if (targetDist >= 100)
 80045f4:	4b32      	ldr	r3, [pc, #200]	; (80046c0 <runFWTask+0x1e4>)
 80045f6:	edd3 7a00 	vldr	s15, [r3]
 80045fa:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8004704 <runFWTask+0x228>
 80045fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004606:	db09      	blt.n	800461c <runFWTask+0x140>
          targetDist -= 2;
 8004608:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <runFWTask+0x1e4>)
 800460a:	edd3 7a00 	vldr	s15, [r3]
 800460e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004616:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <runFWTask+0x1e4>)
 8004618:	edc3 7a00 	vstr	s15, [r3]

        if (moveMode == SLOW)
 800461c:	4b38      	ldr	r3, [pc, #224]	; (8004700 <runFWTask+0x224>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <runFWTask+0x154>
        {
          RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004624:	2200      	movs	r2, #0
 8004626:	2101      	movs	r1, #1
 8004628:	4825      	ldr	r0, [pc, #148]	; (80046c0 <runFWTask+0x1e4>)
 800462a:	f7fe fa41 	bl	8002ab0 <RobotMoveDistance>
 800462e:	e004      	b.n	800463a <runFWTask+0x15e>
        }
        else
        {
          RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_2);
 8004630:	2202      	movs	r2, #2
 8004632:	2101      	movs	r1, #1
 8004634:	4822      	ldr	r0, [pc, #136]	; (80046c0 <runFWTask+0x1e4>)
 8004636:	f7fe fa3b 	bl	8002ab0 <RobotMoveDistance>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <runFWTask+0x20c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
 8004642:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <runFWTask+0x20c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
 800464a:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <runFWTask+0x1e0>)
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	4b27      	ldr	r3, [pc, #156]	; (80046ec <runFWTask+0x210>)
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <runFWTask+0x1e0>)
 8004654:	2211      	movs	r2, #17
 8004656:	701a      	strb	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8004658:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <runFWTask+0x22c>)
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <runFWTask+0x22c>)
 800465e:	785b      	ldrb	r3, [r3, #1]
 8004660:	429a      	cmp	r2, r3
 8004662:	d10d      	bne.n	8004680 <runFWTask+0x1a4>
        {
          __CLEAR_CURCMD(curCmd);
 8004664:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <runFWTask+0x214>)
 8004666:	2264      	movs	r2, #100	; 0x64
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <runFWTask+0x214>)
 800466c:	2200      	movs	r2, #0
 800466e:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 8004670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004674:	2206      	movs	r2, #6
 8004676:	491f      	ldr	r1, [pc, #124]	; (80046f4 <runFWTask+0x218>)
 8004678:	481f      	ldr	r0, [pc, #124]	; (80046f8 <runFWTask+0x21c>)
 800467a:	f006 fe34 	bl	800b2e6 <HAL_UART_Transmit>
 800467e:	e731      	b.n	80044e4 <runFWTask+0x8>
        }
        else
          __READ_COMMAND(cmdQ, curCmd, rxMsg);
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <runFWTask+0x22c>)
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <runFWTask+0x214>)
 8004686:	4920      	ldr	r1, [pc, #128]	; (8004708 <runFWTask+0x22c>)
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <runFWTask+0x22c>)
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	3301      	adds	r3, #1
 8004696:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <runFWTask+0x22c>)
 8004698:	7892      	ldrb	r2, [r2, #2]
 800469a:	fb93 f1f2 	sdiv	r1, r3, r2
 800469e:	fb01 f202 	mul.w	r2, r1, r2
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4b18      	ldr	r3, [pc, #96]	; (8004708 <runFWTask+0x22c>)
 80046a8:	705a      	strb	r2, [r3, #1]
 80046aa:	4a18      	ldr	r2, [pc, #96]	; (800470c <runFWTask+0x230>)
 80046ac:	210f      	movs	r1, #15
 80046ae:	4818      	ldr	r0, [pc, #96]	; (8004710 <runFWTask+0x234>)
 80046b0:	f00a ff98 	bl	800f5e4 <sniprintf>
 80046b4:	e716      	b.n	80044e4 <runFWTask+0x8>
            break;
 80046b6:	bf00      	nop
    if (curTask != TASK_MOVE_FORWARD)
 80046b8:	e714      	b.n	80044e4 <runFWTask+0x8>
 80046ba:	bf00      	nop
 80046bc:	20000134 	.word	0x20000134
 80046c0:	200004f8 	.word	0x200004f8
 80046c4:	200004fe 	.word	0x200004fe
 80046c8:	200004e0 	.word	0x200004e0
 80046cc:	200004e8 	.word	0x200004e8
 80046d0:	200004ee 	.word	0x200004ee
 80046d4:	20000518 	.word	0x20000518
 80046d8:	20000504 	.word	0x20000504
 80046dc:	2000052c 	.word	0x2000052c
 80046e0:	20000540 	.word	0x20000540
 80046e4:	40020000 	.word	0x40020000
 80046e8:	200003c4 	.word	0x200003c4
 80046ec:	20000135 	.word	0x20000135
 80046f0:	200004cc 	.word	0x200004cc
 80046f4:	0800fffc 	.word	0x0800fffc
 80046f8:	2000040c 	.word	0x2000040c
 80046fc:	200004f4 	.word	0x200004f4
 8004700:	20000136 	.word	0x20000136
 8004704:	42c80000 	.word	0x42c80000
 8004708:	20000498 	.word	0x20000498
 800470c:	08010004 	.word	0x08010004
 8004710:	200004d0 	.word	0x200004d0

08004714 <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 800471c:	4b6a      	ldr	r3, [pc, #424]	; (80048c8 <runBWTask+0x1b4>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d004      	beq.n	800472e <runBWTask+0x1a>
      osDelay(1000);
 8004724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004728:	f007 ff28 	bl	800c57c <osDelay>
 800472c:	e7f6      	b.n	800471c <runBWTask+0x8>
    else
    {
      targetDist = 0;
 800472e:	4b67      	ldr	r3, [pc, #412]	; (80048cc <runBWTask+0x1b8>)
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 8004736:	4b66      	ldr	r3, [pc, #408]	; (80048d0 <runBWTask+0x1bc>)
 8004738:	2200      	movs	r2, #0
 800473a:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 800473c:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <runBWTask+0x1c0>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05c      	beq.n	80047fe <runBWTask+0xea>
      {

        angleNow = 0;
 8004744:	4b64      	ldr	r3, [pc, #400]	; (80048d8 <runBWTask+0x1c4>)
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 800474c:	4b63      	ldr	r3, [pc, #396]	; (80048dc <runBWTask+0x1c8>)
 800474e:	2200      	movs	r2, #0
 8004750:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 8004752:	4863      	ldr	r0, [pc, #396]	; (80048e0 <runBWTask+0x1cc>)
 8004754:	f7fd ff31 	bl	80025ba <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 8004758:	4862      	ldr	r0, [pc, #392]	; (80048e4 <runBWTask+0x1d0>)
 800475a:	f7fd ff2e 	bl	80025ba <PIDConfigReset>
        PIDConfigReset(&pidFast);
 800475e:	4862      	ldr	r0, [pc, #392]	; (80048e8 <runBWTask+0x1d4>)
 8004760:	f7fd ff2b 	bl	80025ba <PIDConfigReset>
        PIDConfigReset(&pidZoomZoom);
 8004764:	4861      	ldr	r0, [pc, #388]	; (80048ec <runBWTask+0x1d8>)
 8004766:	f7fd ff28 	bl	80025ba <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 800476a:	2201      	movs	r2, #1
 800476c:	2104      	movs	r1, #4
 800476e:	4860      	ldr	r0, [pc, #384]	; (80048f0 <runBWTask+0x1dc>)
 8004770:	f003 fa86 	bl	8007c80 <HAL_GPIO_WritePin>
 8004774:	2200      	movs	r2, #0
 8004776:	2108      	movs	r1, #8
 8004778:	485d      	ldr	r0, [pc, #372]	; (80048f0 <runBWTask+0x1dc>)
 800477a:	f003 fa81 	bl	8007c80 <HAL_GPIO_WritePin>
 800477e:	2201      	movs	r2, #1
 8004780:	2120      	movs	r1, #32
 8004782:	485b      	ldr	r0, [pc, #364]	; (80048f0 <runBWTask+0x1dc>)
 8004784:	f003 fa7c 	bl	8007c80 <HAL_GPIO_WritePin>
 8004788:	2200      	movs	r2, #0
 800478a:	2110      	movs	r1, #16
 800478c:	4858      	ldr	r0, [pc, #352]	; (80048f0 <runBWTask+0x1dc>)
 800478e:	f003 fa77 	bl	8007c80 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 8004792:	4b58      	ldr	r3, [pc, #352]	; (80048f4 <runBWTask+0x1e0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	635a      	str	r2, [r3, #52]	; 0x34
 800479a:	4b56      	ldr	r3, [pc, #344]	; (80048f4 <runBWTask+0x1e0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
 80047a2:	4b49      	ldr	r3, [pc, #292]	; (80048c8 <runBWTask+0x1b4>)
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	4b54      	ldr	r3, [pc, #336]	; (80048f8 <runBWTask+0x1e4>)
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	4b47      	ldr	r3, [pc, #284]	; (80048c8 <runBWTask+0x1b4>)
 80047ac:	2211      	movs	r2, #17
 80047ae:	701a      	strb	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 80047b0:	4b52      	ldr	r3, [pc, #328]	; (80048fc <runBWTask+0x1e8>)
 80047b2:	2264      	movs	r2, #100	; 0x64
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	4b51      	ldr	r3, [pc, #324]	; (80048fc <runBWTask+0x1e8>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80047bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047c0:	2206      	movs	r2, #6
 80047c2:	494f      	ldr	r1, [pc, #316]	; (8004900 <runBWTask+0x1ec>)
 80047c4:	484f      	ldr	r0, [pc, #316]	; (8004904 <runBWTask+0x1f0>)
 80047c6:	f006 fd8e 	bl	800b2e6 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 80047ca:	f002 fb19 	bl	8006e00 <HAL_GetTick>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4a4d      	ldr	r2, [pc, #308]	; (8004908 <runBWTask+0x1f4>)
 80047d2:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <runBWTask+0x1c0>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d073      	beq.n	80048c4 <runBWTask+0x1b0>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 80047dc:	f002 fb10 	bl	8006e00 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b49      	ldr	r3, [pc, #292]	; (8004908 <runBWTask+0x1f4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	d9f3      	bls.n	80047d4 <runBWTask+0xc0>
          {
            StraightMovement(SPEED_MODE_T);
 80047ec:	2000      	movs	r0, #0
 80047ee:	f7fd ff37 	bl	8002660 <StraightMovement>
            last_curTask_tick = HAL_GetTick();
 80047f2:	f002 fb05 	bl	8006e00 <HAL_GetTick>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4a43      	ldr	r2, [pc, #268]	; (8004908 <runBWTask+0x1f4>)
 80047fa:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 80047fc:	e7ea      	b.n	80047d4 <runBWTask+0xc0>
        } while (1);
      }
      else
      {

        targetDist = (float)curCmd.val;
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <runBWTask+0x1e8>)
 8004800:	885b      	ldrh	r3, [r3, #2]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	4b30      	ldr	r3, [pc, #192]	; (80048cc <runBWTask+0x1b8>)
 800480c:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 8004810:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <runBWTask+0x1b8>)
 8004812:	edd3 7a00 	vldr	s15, [r3]
 8004816:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800481a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004822:	d802      	bhi.n	800482a <runBWTask+0x116>
          moveMode = SLOW;
 8004824:	4b39      	ldr	r3, [pc, #228]	; (800490c <runBWTask+0x1f8>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
        if (moveMode == SLOW)
 800482a:	4b38      	ldr	r3, [pc, #224]	; (800490c <runBWTask+0x1f8>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d105      	bne.n	800483e <runBWTask+0x12a>
        {
          RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004832:	2200      	movs	r2, #0
 8004834:	2100      	movs	r1, #0
 8004836:	4825      	ldr	r0, [pc, #148]	; (80048cc <runBWTask+0x1b8>)
 8004838:	f7fe f93a 	bl	8002ab0 <RobotMoveDistance>
 800483c:	e004      	b.n	8004848 <runBWTask+0x134>
        }
        else
        {
          RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_2);
 800483e:	2202      	movs	r2, #2
 8004840:	2100      	movs	r1, #0
 8004842:	4822      	ldr	r0, [pc, #136]	; (80048cc <runBWTask+0x1b8>)
 8004844:	f7fe f934 	bl	8002ab0 <RobotMoveDistance>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 8004848:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <runBWTask+0x1e0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2200      	movs	r2, #0
 800484e:	635a      	str	r2, [r3, #52]	; 0x34
 8004850:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <runBWTask+0x1e0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2200      	movs	r2, #0
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
 8004858:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <runBWTask+0x1b4>)
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <runBWTask+0x1e4>)
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <runBWTask+0x1b4>)
 8004862:	2211      	movs	r2, #17
 8004864:	701a      	strb	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8004866:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <runBWTask+0x1fc>)
 8004868:	781a      	ldrb	r2, [r3, #0]
 800486a:	4b29      	ldr	r3, [pc, #164]	; (8004910 <runBWTask+0x1fc>)
 800486c:	785b      	ldrb	r3, [r3, #1]
 800486e:	429a      	cmp	r2, r3
 8004870:	d10d      	bne.n	800488e <runBWTask+0x17a>
        {
          __CLEAR_CURCMD(curCmd);
 8004872:	4b22      	ldr	r3, [pc, #136]	; (80048fc <runBWTask+0x1e8>)
 8004874:	2264      	movs	r2, #100	; 0x64
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <runBWTask+0x1e8>)
 800487a:	2200      	movs	r2, #0
 800487c:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 800487e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004882:	2206      	movs	r2, #6
 8004884:	491e      	ldr	r1, [pc, #120]	; (8004900 <runBWTask+0x1ec>)
 8004886:	481f      	ldr	r0, [pc, #124]	; (8004904 <runBWTask+0x1f0>)
 8004888:	f006 fd2d 	bl	800b2e6 <HAL_UART_Transmit>
 800488c:	e746      	b.n	800471c <runBWTask+0x8>
        }
        else
          __READ_COMMAND(cmdQ, curCmd, rxMsg);
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <runBWTask+0x1fc>)
 8004890:	785b      	ldrb	r3, [r3, #1]
 8004892:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <runBWTask+0x1e8>)
 8004894:	491e      	ldr	r1, [pc, #120]	; (8004910 <runBWTask+0x1fc>)
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <runBWTask+0x1fc>)
 80048a0:	785b      	ldrb	r3, [r3, #1]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a1a      	ldr	r2, [pc, #104]	; (8004910 <runBWTask+0x1fc>)
 80048a6:	7892      	ldrb	r2, [r2, #2]
 80048a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80048ac:	fb01 f202 	mul.w	r2, r1, r2
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	4b16      	ldr	r3, [pc, #88]	; (8004910 <runBWTask+0x1fc>)
 80048b6:	705a      	strb	r2, [r3, #1]
 80048b8:	4a16      	ldr	r2, [pc, #88]	; (8004914 <runBWTask+0x200>)
 80048ba:	210f      	movs	r1, #15
 80048bc:	4816      	ldr	r0, [pc, #88]	; (8004918 <runBWTask+0x204>)
 80048be:	f00a fe91 	bl	800f5e4 <sniprintf>
 80048c2:	e72b      	b.n	800471c <runBWTask+0x8>
            break;
 80048c4:	bf00      	nop
    if (curTask != TASK_MOVE_BACKWARD)
 80048c6:	e729      	b.n	800471c <runBWTask+0x8>
 80048c8:	20000134 	.word	0x20000134
 80048cc:	200004f8 	.word	0x200004f8
 80048d0:	200004fe 	.word	0x200004fe
 80048d4:	200004e0 	.word	0x200004e0
 80048d8:	200004e8 	.word	0x200004e8
 80048dc:	200004ee 	.word	0x200004ee
 80048e0:	20000518 	.word	0x20000518
 80048e4:	20000504 	.word	0x20000504
 80048e8:	2000052c 	.word	0x2000052c
 80048ec:	20000540 	.word	0x20000540
 80048f0:	40020000 	.word	0x40020000
 80048f4:	200003c4 	.word	0x200003c4
 80048f8:	20000135 	.word	0x20000135
 80048fc:	200004cc 	.word	0x200004cc
 8004900:	0800fffc 	.word	0x0800fffc
 8004904:	2000040c 	.word	0x2000040c
 8004908:	200004f4 	.word	0x200004f4
 800490c:	20000136 	.word	0x20000136
 8004910:	20000498 	.word	0x20000498
 8004914:	08010004 	.word	0x08010004
 8004918:	200004d0 	.word	0x200004d0

0800491c <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 8004924:	4ba3      	ldr	r3, [pc, #652]	; (8004bb4 <runFLTask+0x298>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d004      	beq.n	8004936 <runFLTask+0x1a>
      osDelay(1000);
 800492c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004930:	f007 fe24 	bl	800c57c <osDelay>
 8004934:	e7f6      	b.n	8004924 <runFLTask+0x8>
    else
    {

      switch (curCmd.val)
 8004936:	4ba0      	ldr	r3, [pc, #640]	; (8004bb8 <runFLTask+0x29c>)
 8004938:	885b      	ldrh	r3, [r3, #2]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8083 	beq.w	8004a46 <runFLTask+0x12a>
 8004940:	2b1e      	cmp	r3, #30
 8004942:	f040 8101 	bne.w	8004b48 <runFLTask+0x22c>
      {
      case 30: // FL30 (outdoor 3x2)
        targetDist = 5;
 8004946:	4b9d      	ldr	r3, [pc, #628]	; (8004bbc <runFLTask+0x2a0>)
 8004948:	4a9d      	ldr	r2, [pc, #628]	; (8004bc0 <runFLTask+0x2a4>)
 800494a:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800494c:	2200      	movs	r2, #0
 800494e:	2101      	movs	r1, #1
 8004950:	489a      	ldr	r0, [pc, #616]	; (8004bbc <runFLTask+0x2a0>)
 8004952:	f7fe f8ad 	bl	8002ab0 <RobotMoveDistance>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 8004956:	4b9b      	ldr	r3, [pc, #620]	; (8004bc4 <runFLTask+0x2a8>)
 8004958:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800495c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8004bc8 <runFLTask+0x2ac>
 8004960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004968:	dd02      	ble.n	8004970 <runFLTask+0x54>
 800496a:	f240 1309 	movw	r3, #265	; 0x109
 800496e:	e012      	b.n	8004996 <runFLTask+0x7a>
 8004970:	4b94      	ldr	r3, [pc, #592]	; (8004bc4 <runFLTask+0x2a8>)
 8004972:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004976:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8004bcc <runFLTask+0x2b0>
 800497a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800497e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004982:	d501      	bpl.n	8004988 <runFLTask+0x6c>
 8004984:	2346      	movs	r3, #70	; 0x46
 8004986:	e006      	b.n	8004996 <runFLTask+0x7a>
 8004988:	4b8e      	ldr	r3, [pc, #568]	; (8004bc4 <runFLTask+0x2a8>)
 800498a:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800498e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004992:	ee17 3a90 	vmov	r3, s15
 8004996:	4a8e      	ldr	r2, [pc, #568]	; (8004bd0 <runFLTask+0x2b4>)
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	6413      	str	r3, [r2, #64]	; 0x40
 800499c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80049a0:	f002 fa3a 	bl	8006e18 <HAL_Delay>
 80049a4:	4b87      	ldr	r3, [pc, #540]	; (8004bc4 <runFLTask+0x2a8>)
 80049a6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80049aa:	4a8a      	ldr	r2, [pc, #552]	; (8004bd4 <runFLTask+0x2b8>)
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b85      	ldr	r3, [pc, #532]	; (8004bc4 <runFLTask+0x2a8>)
 80049b0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf0c      	ite	eq
 80049b8:	2301      	moveq	r3, #1
 80049ba:	2300      	movne	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	2104      	movs	r1, #4
 80049c2:	4885      	ldr	r0, [pc, #532]	; (8004bd8 <runFLTask+0x2bc>)
 80049c4:	f003 f95c 	bl	8007c80 <HAL_GPIO_WritePin>
 80049c8:	4b7e      	ldr	r3, [pc, #504]	; (8004bc4 <runFLTask+0x2a8>)
 80049ca:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	461a      	mov	r2, r3
 80049da:	2108      	movs	r1, #8
 80049dc:	487e      	ldr	r0, [pc, #504]	; (8004bd8 <runFLTask+0x2bc>)
 80049de:	f003 f94f 	bl	8007c80 <HAL_GPIO_WritePin>
 80049e2:	4b78      	ldr	r3, [pc, #480]	; (8004bc4 <runFLTask+0x2a8>)
 80049e4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	2120      	movs	r1, #32
 80049f6:	4878      	ldr	r0, [pc, #480]	; (8004bd8 <runFLTask+0x2bc>)
 80049f8:	f003 f942 	bl	8007c80 <HAL_GPIO_WritePin>
 80049fc:	4b71      	ldr	r3, [pc, #452]	; (8004bc4 <runFLTask+0x2a8>)
 80049fe:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2110      	movs	r1, #16
 8004a10:	4871      	ldr	r0, [pc, #452]	; (8004bd8 <runFLTask+0x2bc>)
 8004a12:	f003 f935 	bl	8007c80 <HAL_GPIO_WritePin>
 8004a16:	4b6b      	ldr	r3, [pc, #428]	; (8004bc4 <runFLTask+0x2a8>)
 8004a18:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 8004a1c:	4b6f      	ldr	r3, [pc, #444]	; (8004bdc <runFLTask+0x2c0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34
 8004a22:	4b68      	ldr	r3, [pc, #416]	; (8004bc4 <runFLTask+0x2a8>)
 8004a24:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 8004a28:	4b6c      	ldr	r3, [pc, #432]	; (8004bdc <runFLTask+0x2c0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004a2e:	4869      	ldr	r0, [pc, #420]	; (8004bd4 <runFLTask+0x2b8>)
 8004a30:	f7fe fbaa 	bl	8003188 <RobotTurn>
        targetDist = 3;
 8004a34:	4b61      	ldr	r3, [pc, #388]	; (8004bbc <runFLTask+0x2a0>)
 8004a36:	4a6a      	ldr	r2, [pc, #424]	; (8004be0 <runFLTask+0x2c4>)
 8004a38:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	485f      	ldr	r0, [pc, #380]	; (8004bbc <runFLTask+0x2a0>)
 8004a40:	f7fe f836 	bl	8002ab0 <RobotMoveDistance>
        break;
 8004a44:	e080      	b.n	8004b48 <runFLTask+0x22c>
      case 00: // FL00 (indoor 3x2)
        targetDist = 8;
 8004a46:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <runFLTask+0x2a0>)
 8004a48:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8004a4c:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2101      	movs	r1, #1
 8004a52:	485a      	ldr	r0, [pc, #360]	; (8004bbc <runFLTask+0x2a0>)
 8004a54:	f7fe f82c 	bl	8002ab0 <RobotMoveDistance>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 8004a58:	4b5a      	ldr	r3, [pc, #360]	; (8004bc4 <runFLTask+0x2a8>)
 8004a5a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004a5e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004bc8 <runFLTask+0x2ac>
 8004a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	dd02      	ble.n	8004a72 <runFLTask+0x156>
 8004a6c:	f240 1309 	movw	r3, #265	; 0x109
 8004a70:	e012      	b.n	8004a98 <runFLTask+0x17c>
 8004a72:	4b54      	ldr	r3, [pc, #336]	; (8004bc4 <runFLTask+0x2a8>)
 8004a74:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004a78:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004bcc <runFLTask+0x2b0>
 8004a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a84:	d501      	bpl.n	8004a8a <runFLTask+0x16e>
 8004a86:	2346      	movs	r3, #70	; 0x46
 8004a88:	e006      	b.n	8004a98 <runFLTask+0x17c>
 8004a8a:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <runFLTask+0x2a8>)
 8004a8c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a94:	ee17 3a90 	vmov	r3, s15
 8004a98:	4a4d      	ldr	r2, [pc, #308]	; (8004bd0 <runFLTask+0x2b4>)
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004aa2:	f002 f9b9 	bl	8006e18 <HAL_Delay>
 8004aa6:	4b47      	ldr	r3, [pc, #284]	; (8004bc4 <runFLTask+0x2a8>)
 8004aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aaa:	4a4a      	ldr	r2, [pc, #296]	; (8004bd4 <runFLTask+0x2b8>)
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b45      	ldr	r3, [pc, #276]	; (8004bc4 <runFLTask+0x2a8>)
 8004ab0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	2104      	movs	r1, #4
 8004ac2:	4845      	ldr	r0, [pc, #276]	; (8004bd8 <runFLTask+0x2bc>)
 8004ac4:	f003 f8dc 	bl	8007c80 <HAL_GPIO_WritePin>
 8004ac8:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <runFLTask+0x2a8>)
 8004aca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf14      	ite	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	2300      	moveq	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2108      	movs	r1, #8
 8004adc:	483e      	ldr	r0, [pc, #248]	; (8004bd8 <runFLTask+0x2bc>)
 8004ade:	f003 f8cf 	bl	8007c80 <HAL_GPIO_WritePin>
 8004ae2:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <runFLTask+0x2a8>)
 8004ae4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	2120      	movs	r1, #32
 8004af6:	4838      	ldr	r0, [pc, #224]	; (8004bd8 <runFLTask+0x2bc>)
 8004af8:	f003 f8c2 	bl	8007c80 <HAL_GPIO_WritePin>
 8004afc:	4b31      	ldr	r3, [pc, #196]	; (8004bc4 <runFLTask+0x2a8>)
 8004afe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bf14      	ite	ne
 8004b06:	2301      	movne	r3, #1
 8004b08:	2300      	moveq	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2110      	movs	r1, #16
 8004b10:	4831      	ldr	r0, [pc, #196]	; (8004bd8 <runFLTask+0x2bc>)
 8004b12:	f003 f8b5 	bl	8007c80 <HAL_GPIO_WritePin>
 8004b16:	4b2b      	ldr	r3, [pc, #172]	; (8004bc4 <runFLTask+0x2a8>)
 8004b18:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8004b1c:	4b2f      	ldr	r3, [pc, #188]	; (8004bdc <runFLTask+0x2c0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	635a      	str	r2, [r3, #52]	; 0x34
 8004b22:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <runFLTask+0x2a8>)
 8004b24:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8004b28:	4b2c      	ldr	r3, [pc, #176]	; (8004bdc <runFLTask+0x2c0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004b2e:	4829      	ldr	r0, [pc, #164]	; (8004bd4 <runFLTask+0x2b8>)
 8004b30:	f7fe fb2a 	bl	8003188 <RobotTurn>
        targetDist = 2;
 8004b34:	4b21      	ldr	r3, [pc, #132]	; (8004bbc <runFLTask+0x2a0>)
 8004b36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b3a:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2101      	movs	r1, #1
 8004b40:	481e      	ldr	r0, [pc, #120]	; (8004bbc <runFLTask+0x2a0>)
 8004b42:	f7fd ffb5 	bl	8002ab0 <RobotMoveDistance>
        break;
 8004b46:	bf00      	nop
      }
      prevTask = curTask;
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <runFLTask+0x298>)
 8004b4a:	781a      	ldrb	r2, [r3, #0]
 8004b4c:	4b25      	ldr	r3, [pc, #148]	; (8004be4 <runFLTask+0x2c8>)
 8004b4e:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004b50:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <runFLTask+0x298>)
 8004b52:	2211      	movs	r2, #17
 8004b54:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <runFLTask+0x2cc>)
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <runFLTask+0x2cc>)
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d10d      	bne.n	8004b7e <runFLTask+0x262>
      {
        __CLEAR_CURCMD(curCmd);
 8004b62:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <runFLTask+0x29c>)
 8004b64:	2264      	movs	r2, #100	; 0x64
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <runFLTask+0x29c>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b72:	2206      	movs	r2, #6
 8004b74:	491d      	ldr	r1, [pc, #116]	; (8004bec <runFLTask+0x2d0>)
 8004b76:	481e      	ldr	r0, [pc, #120]	; (8004bf0 <runFLTask+0x2d4>)
 8004b78:	f006 fbb5 	bl	800b2e6 <HAL_UART_Transmit>
 8004b7c:	e6d2      	b.n	8004924 <runFLTask+0x8>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 8004b7e:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <runFLTask+0x2cc>)
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	4a0d      	ldr	r2, [pc, #52]	; (8004bb8 <runFLTask+0x29c>)
 8004b84:	4918      	ldr	r1, [pc, #96]	; (8004be8 <runFLTask+0x2cc>)
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <runFLTask+0x2cc>)
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <runFLTask+0x2cc>)
 8004b96:	7892      	ldrb	r2, [r2, #2]
 8004b98:	fb93 f1f2 	sdiv	r1, r3, r2
 8004b9c:	fb01 f202 	mul.w	r2, r1, r2
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <runFLTask+0x2cc>)
 8004ba6:	705a      	strb	r2, [r3, #1]
 8004ba8:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <runFLTask+0x2d8>)
 8004baa:	210f      	movs	r1, #15
 8004bac:	4812      	ldr	r0, [pc, #72]	; (8004bf8 <runFLTask+0x2dc>)
 8004bae:	f00a fd19 	bl	800f5e4 <sniprintf>
    if (curTask != TASK_FL)
 8004bb2:	e6b7      	b.n	8004924 <runFLTask+0x8>
 8004bb4:	20000134 	.word	0x20000134
 8004bb8:	200004cc 	.word	0x200004cc
 8004bbc:	200004f8 	.word	0x200004f8
 8004bc0:	40a00000 	.word	0x40a00000
 8004bc4:	20000004 	.word	0x20000004
 8004bc8:	43848000 	.word	0x43848000
 8004bcc:	428c0000 	.word	0x428c0000
 8004bd0:	200002a4 	.word	0x200002a4
 8004bd4:	200004e4 	.word	0x200004e4
 8004bd8:	40020000 	.word	0x40020000
 8004bdc:	200003c4 	.word	0x200003c4
 8004be0:	40400000 	.word	0x40400000
 8004be4:	20000135 	.word	0x20000135
 8004be8:	20000498 	.word	0x20000498
 8004bec:	0800fffc 	.word	0x0800fffc
 8004bf0:	2000040c 	.word	0x2000040c
 8004bf4:	08010004 	.word	0x08010004
 8004bf8:	200004d0 	.word	0x200004d0

08004bfc <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 8004c04:	4ba4      	ldr	r3, [pc, #656]	; (8004e98 <runFRTask+0x29c>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d004      	beq.n	8004c16 <runFRTask+0x1a>
      osDelay(1000);
 8004c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c10:	f007 fcb4 	bl	800c57c <osDelay>
 8004c14:	e7f6      	b.n	8004c04 <runFRTask+0x8>
    else
    {
      switch (curCmd.val)
 8004c16:	4ba1      	ldr	r3, [pc, #644]	; (8004e9c <runFRTask+0x2a0>)
 8004c18:	885b      	ldrh	r3, [r3, #2]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8085 	beq.w	8004d2a <runFRTask+0x12e>
 8004c20:	2b1e      	cmp	r3, #30
 8004c22:	f040 8103 	bne.w	8004e2c <runFRTask+0x230>
      {
      case 30: // FR30 (outdoor 3x2)
        targetDist = 4;
 8004c26:	4b9e      	ldr	r3, [pc, #632]	; (8004ea0 <runFRTask+0x2a4>)
 8004c28:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004c2c:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2101      	movs	r1, #1
 8004c32:	489b      	ldr	r0, [pc, #620]	; (8004ea0 <runFRTask+0x2a4>)
 8004c34:	f7fd ff3c 	bl	8002ab0 <RobotMoveDistance>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8004c38:	4b9a      	ldr	r3, [pc, #616]	; (8004ea4 <runFRTask+0x2a8>)
 8004c3a:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004c3e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8004ea8 <runFRTask+0x2ac>
 8004c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	dd02      	ble.n	8004c52 <runFRTask+0x56>
 8004c4c:	f240 1309 	movw	r3, #265	; 0x109
 8004c50:	e012      	b.n	8004c78 <runFRTask+0x7c>
 8004c52:	4b94      	ldr	r3, [pc, #592]	; (8004ea4 <runFRTask+0x2a8>)
 8004c54:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004c58:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004eac <runFRTask+0x2b0>
 8004c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	d501      	bpl.n	8004c6a <runFRTask+0x6e>
 8004c66:	2346      	movs	r3, #70	; 0x46
 8004c68:	e006      	b.n	8004c78 <runFRTask+0x7c>
 8004c6a:	4b8e      	ldr	r3, [pc, #568]	; (8004ea4 <runFRTask+0x2a8>)
 8004c6c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c74:	ee17 3a90 	vmov	r3, s15
 8004c78:	4a8d      	ldr	r2, [pc, #564]	; (8004eb0 <runFRTask+0x2b4>)
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004c82:	f002 f8c9 	bl	8006e18 <HAL_Delay>
 8004c86:	4b87      	ldr	r3, [pc, #540]	; (8004ea4 <runFRTask+0x2a8>)
 8004c88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c8c:	4a89      	ldr	r2, [pc, #548]	; (8004eb4 <runFRTask+0x2b8>)
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	4b84      	ldr	r3, [pc, #528]	; (8004ea4 <runFRTask+0x2a8>)
 8004c92:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2104      	movs	r1, #4
 8004ca4:	4884      	ldr	r0, [pc, #528]	; (8004eb8 <runFRTask+0x2bc>)
 8004ca6:	f002 ffeb 	bl	8007c80 <HAL_GPIO_WritePin>
 8004caa:	4b7e      	ldr	r3, [pc, #504]	; (8004ea4 <runFRTask+0x2a8>)
 8004cac:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2108      	movs	r1, #8
 8004cbe:	487e      	ldr	r0, [pc, #504]	; (8004eb8 <runFRTask+0x2bc>)
 8004cc0:	f002 ffde 	bl	8007c80 <HAL_GPIO_WritePin>
 8004cc4:	4b77      	ldr	r3, [pc, #476]	; (8004ea4 <runFRTask+0x2a8>)
 8004cc6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2120      	movs	r1, #32
 8004cd8:	4877      	ldr	r0, [pc, #476]	; (8004eb8 <runFRTask+0x2bc>)
 8004cda:	f002 ffd1 	bl	8007c80 <HAL_GPIO_WritePin>
 8004cde:	4b71      	ldr	r3, [pc, #452]	; (8004ea4 <runFRTask+0x2a8>)
 8004ce0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2110      	movs	r1, #16
 8004cf2:	4871      	ldr	r0, [pc, #452]	; (8004eb8 <runFRTask+0x2bc>)
 8004cf4:	f002 ffc4 	bl	8007c80 <HAL_GPIO_WritePin>
 8004cf8:	4b6a      	ldr	r3, [pc, #424]	; (8004ea4 <runFRTask+0x2a8>)
 8004cfa:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8004cfe:	4b6f      	ldr	r3, [pc, #444]	; (8004ebc <runFRTask+0x2c0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	635a      	str	r2, [r3, #52]	; 0x34
 8004d04:	4b67      	ldr	r3, [pc, #412]	; (8004ea4 <runFRTask+0x2a8>)
 8004d06:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8004d0a:	4b6c      	ldr	r3, [pc, #432]	; (8004ebc <runFRTask+0x2c0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004d10:	4868      	ldr	r0, [pc, #416]	; (8004eb4 <runFRTask+0x2b8>)
 8004d12:	f7fe fa39 	bl	8003188 <RobotTurn>
        targetDist = 2;
 8004d16:	4b62      	ldr	r3, [pc, #392]	; (8004ea0 <runFRTask+0x2a4>)
 8004d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d1c:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2100      	movs	r1, #0
 8004d22:	485f      	ldr	r0, [pc, #380]	; (8004ea0 <runFRTask+0x2a4>)
 8004d24:	f7fd fec4 	bl	8002ab0 <RobotMoveDistance>
        break;
 8004d28:	e080      	b.n	8004e2c <runFRTask+0x230>
      case 00: // FR00 (indoor 3x2)
        targetDist = 3.5;
 8004d2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ea0 <runFRTask+0x2a4>)
 8004d2c:	4a64      	ldr	r2, [pc, #400]	; (8004ec0 <runFRTask+0x2c4>)
 8004d2e:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004d30:	2200      	movs	r2, #0
 8004d32:	2101      	movs	r1, #1
 8004d34:	485a      	ldr	r0, [pc, #360]	; (8004ea0 <runFRTask+0x2a4>)
 8004d36:	f7fd febb 	bl	8002ab0 <RobotMoveDistance>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8004d3a:	4b5a      	ldr	r3, [pc, #360]	; (8004ea4 <runFRTask+0x2a8>)
 8004d3c:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004d40:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004ea8 <runFRTask+0x2ac>
 8004d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4c:	dd02      	ble.n	8004d54 <runFRTask+0x158>
 8004d4e:	f240 1309 	movw	r3, #265	; 0x109
 8004d52:	e012      	b.n	8004d7a <runFRTask+0x17e>
 8004d54:	4b53      	ldr	r3, [pc, #332]	; (8004ea4 <runFRTask+0x2a8>)
 8004d56:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004d5a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004eac <runFRTask+0x2b0>
 8004d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	d501      	bpl.n	8004d6c <runFRTask+0x170>
 8004d68:	2346      	movs	r3, #70	; 0x46
 8004d6a:	e006      	b.n	8004d7a <runFRTask+0x17e>
 8004d6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ea4 <runFRTask+0x2a8>)
 8004d6e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d76:	ee17 3a90 	vmov	r3, s15
 8004d7a:	4a4d      	ldr	r2, [pc, #308]	; (8004eb0 <runFRTask+0x2b4>)
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004d84:	f002 f848 	bl	8006e18 <HAL_Delay>
 8004d88:	4b46      	ldr	r3, [pc, #280]	; (8004ea4 <runFRTask+0x2a8>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	4a49      	ldr	r2, [pc, #292]	; (8004eb4 <runFRTask+0x2b8>)
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b44      	ldr	r3, [pc, #272]	; (8004ea4 <runFRTask+0x2a8>)
 8004d94:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	2104      	movs	r1, #4
 8004da6:	4844      	ldr	r0, [pc, #272]	; (8004eb8 <runFRTask+0x2bc>)
 8004da8:	f002 ff6a 	bl	8007c80 <HAL_GPIO_WritePin>
 8004dac:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <runFRTask+0x2a8>)
 8004dae:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf14      	ite	ne
 8004db6:	2301      	movne	r3, #1
 8004db8:	2300      	moveq	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2108      	movs	r1, #8
 8004dc0:	483d      	ldr	r0, [pc, #244]	; (8004eb8 <runFRTask+0x2bc>)
 8004dc2:	f002 ff5d 	bl	8007c80 <HAL_GPIO_WritePin>
 8004dc6:	4b37      	ldr	r3, [pc, #220]	; (8004ea4 <runFRTask+0x2a8>)
 8004dc8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2120      	movs	r1, #32
 8004dda:	4837      	ldr	r0, [pc, #220]	; (8004eb8 <runFRTask+0x2bc>)
 8004ddc:	f002 ff50 	bl	8007c80 <HAL_GPIO_WritePin>
 8004de0:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <runFRTask+0x2a8>)
 8004de2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	2110      	movs	r1, #16
 8004df4:	4830      	ldr	r0, [pc, #192]	; (8004eb8 <runFRTask+0x2bc>)
 8004df6:	f002 ff43 	bl	8007c80 <HAL_GPIO_WritePin>
 8004dfa:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <runFRTask+0x2a8>)
 8004dfc:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8004e00:	4b2e      	ldr	r3, [pc, #184]	; (8004ebc <runFRTask+0x2c0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	635a      	str	r2, [r3, #52]	; 0x34
 8004e06:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <runFRTask+0x2a8>)
 8004e08:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <runFRTask+0x2c0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004e12:	4828      	ldr	r0, [pc, #160]	; (8004eb4 <runFRTask+0x2b8>)
 8004e14:	f7fe f9b8 	bl	8003188 <RobotTurn>
        targetDist = 4;
 8004e18:	4b21      	ldr	r3, [pc, #132]	; (8004ea0 <runFRTask+0x2a4>)
 8004e1a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004e1e:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004e20:	2200      	movs	r2, #0
 8004e22:	2100      	movs	r1, #0
 8004e24:	481e      	ldr	r0, [pc, #120]	; (8004ea0 <runFRTask+0x2a4>)
 8004e26:	f7fd fe43 	bl	8002ab0 <RobotMoveDistance>
        break;
 8004e2a:	bf00      	nop
      }

      prevTask = curTask;
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <runFRTask+0x29c>)
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <runFRTask+0x2c8>)
 8004e32:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004e34:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <runFRTask+0x29c>)
 8004e36:	2211      	movs	r2, #17
 8004e38:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8004e3a:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <runFRTask+0x2cc>)
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <runFRTask+0x2cc>)
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d10d      	bne.n	8004e62 <runFRTask+0x266>
      {
        __CLEAR_CURCMD(curCmd);
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <runFRTask+0x2a0>)
 8004e48:	2264      	movs	r2, #100	; 0x64
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <runFRTask+0x2a0>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e56:	2206      	movs	r2, #6
 8004e58:	491c      	ldr	r1, [pc, #112]	; (8004ecc <runFRTask+0x2d0>)
 8004e5a:	481d      	ldr	r0, [pc, #116]	; (8004ed0 <runFRTask+0x2d4>)
 8004e5c:	f006 fa43 	bl	800b2e6 <HAL_UART_Transmit>
 8004e60:	e6d0      	b.n	8004c04 <runFRTask+0x8>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 8004e62:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <runFRTask+0x2cc>)
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <runFRTask+0x2a0>)
 8004e68:	4917      	ldr	r1, [pc, #92]	; (8004ec8 <runFRTask+0x2cc>)
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <runFRTask+0x2cc>)
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	3301      	adds	r3, #1
 8004e78:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <runFRTask+0x2cc>)
 8004e7a:	7892      	ldrb	r2, [r2, #2]
 8004e7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8004e80:	fb01 f202 	mul.w	r2, r1, r2
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <runFRTask+0x2cc>)
 8004e8a:	705a      	strb	r2, [r3, #1]
 8004e8c:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <runFRTask+0x2d8>)
 8004e8e:	210f      	movs	r1, #15
 8004e90:	4811      	ldr	r0, [pc, #68]	; (8004ed8 <runFRTask+0x2dc>)
 8004e92:	f00a fba7 	bl	800f5e4 <sniprintf>
    if (curTask != TASK_FR)
 8004e96:	e6b5      	b.n	8004c04 <runFRTask+0x8>
 8004e98:	20000134 	.word	0x20000134
 8004e9c:	200004cc 	.word	0x200004cc
 8004ea0:	200004f8 	.word	0x200004f8
 8004ea4:	20000004 	.word	0x20000004
 8004ea8:	43848000 	.word	0x43848000
 8004eac:	428c0000 	.word	0x428c0000
 8004eb0:	200002a4 	.word	0x200002a4
 8004eb4:	200004e4 	.word	0x200004e4
 8004eb8:	40020000 	.word	0x40020000
 8004ebc:	200003c4 	.word	0x200003c4
 8004ec0:	40600000 	.word	0x40600000
 8004ec4:	20000135 	.word	0x20000135
 8004ec8:	20000498 	.word	0x20000498
 8004ecc:	0800fffc 	.word	0x0800fffc
 8004ed0:	2000040c 	.word	0x2000040c
 8004ed4:	08010004 	.word	0x08010004
 8004ed8:	200004d0 	.word	0x200004d0

08004edc <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 8004ee4:	4ba4      	ldr	r3, [pc, #656]	; (8005178 <runBLTask+0x29c>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d004      	beq.n	8004ef6 <runBLTask+0x1a>
      osDelay(1000);
 8004eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ef0:	f007 fb44 	bl	800c57c <osDelay>
 8004ef4:	e7f6      	b.n	8004ee4 <runBLTask+0x8>
    else
    {

      switch (curCmd.val)
 8004ef6:	4ba1      	ldr	r3, [pc, #644]	; (800517c <runBLTask+0x2a0>)
 8004ef8:	885b      	ldrh	r3, [r3, #2]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8084 	beq.w	8005008 <runBLTask+0x12c>
 8004f00:	2b1e      	cmp	r3, #30
 8004f02:	f040 8103 	bne.w	800510c <runBLTask+0x230>
      {
      case 30: // BL30 (outdoor 3x2)
        targetDist = 1;
 8004f06:	4b9e      	ldr	r3, [pc, #632]	; (8005180 <runBLTask+0x2a4>)
 8004f08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f0c:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2101      	movs	r1, #1
 8004f12:	489b      	ldr	r0, [pc, #620]	; (8005180 <runBLTask+0x2a4>)
 8004f14:	f7fd fdcc 	bl	8002ab0 <RobotMoveDistance>
        __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 8004f18:	4b9a      	ldr	r3, [pc, #616]	; (8005184 <runBLTask+0x2a8>)
 8004f1a:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8004f1e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8005188 <runBLTask+0x2ac>
 8004f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2a:	dd02      	ble.n	8004f32 <runBLTask+0x56>
 8004f2c:	f240 1309 	movw	r3, #265	; 0x109
 8004f30:	e012      	b.n	8004f58 <runBLTask+0x7c>
 8004f32:	4b94      	ldr	r3, [pc, #592]	; (8005184 <runBLTask+0x2a8>)
 8004f34:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8004f38:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800518c <runBLTask+0x2b0>
 8004f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f44:	d501      	bpl.n	8004f4a <runBLTask+0x6e>
 8004f46:	2346      	movs	r3, #70	; 0x46
 8004f48:	e006      	b.n	8004f58 <runBLTask+0x7c>
 8004f4a:	4b8e      	ldr	r3, [pc, #568]	; (8005184 <runBLTask+0x2a8>)
 8004f4c:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8004f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f54:	ee17 3a90 	vmov	r3, s15
 8004f58:	4a8d      	ldr	r2, [pc, #564]	; (8005190 <runBLTask+0x2b4>)
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f62:	f001 ff59 	bl	8006e18 <HAL_Delay>
 8004f66:	4b87      	ldr	r3, [pc, #540]	; (8005184 <runBLTask+0x2a8>)
 8004f68:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004f6c:	4a89      	ldr	r2, [pc, #548]	; (8005194 <runBLTask+0x2b8>)
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	4b84      	ldr	r3, [pc, #528]	; (8005184 <runBLTask+0x2a8>)
 8004f72:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	2104      	movs	r1, #4
 8004f84:	4884      	ldr	r0, [pc, #528]	; (8005198 <runBLTask+0x2bc>)
 8004f86:	f002 fe7b 	bl	8007c80 <HAL_GPIO_WritePin>
 8004f8a:	4b7e      	ldr	r3, [pc, #504]	; (8005184 <runBLTask+0x2a8>)
 8004f8c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf14      	ite	ne
 8004f94:	2301      	movne	r3, #1
 8004f96:	2300      	moveq	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2108      	movs	r1, #8
 8004f9e:	487e      	ldr	r0, [pc, #504]	; (8005198 <runBLTask+0x2bc>)
 8004fa0:	f002 fe6e 	bl	8007c80 <HAL_GPIO_WritePin>
 8004fa4:	4b77      	ldr	r3, [pc, #476]	; (8005184 <runBLTask+0x2a8>)
 8004fa6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bf0c      	ite	eq
 8004fae:	2301      	moveq	r3, #1
 8004fb0:	2300      	movne	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2120      	movs	r1, #32
 8004fb8:	4877      	ldr	r0, [pc, #476]	; (8005198 <runBLTask+0x2bc>)
 8004fba:	f002 fe61 	bl	8007c80 <HAL_GPIO_WritePin>
 8004fbe:	4b71      	ldr	r3, [pc, #452]	; (8005184 <runBLTask+0x2a8>)
 8004fc0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bf14      	ite	ne
 8004fc8:	2301      	movne	r3, #1
 8004fca:	2300      	moveq	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2110      	movs	r1, #16
 8004fd2:	4871      	ldr	r0, [pc, #452]	; (8005198 <runBLTask+0x2bc>)
 8004fd4:	f002 fe54 	bl	8007c80 <HAL_GPIO_WritePin>
 8004fd8:	4b6a      	ldr	r3, [pc, #424]	; (8005184 <runBLTask+0x2a8>)
 8004fda:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 8004fde:	4b6f      	ldr	r3, [pc, #444]	; (800519c <runBLTask+0x2c0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	635a      	str	r2, [r3, #52]	; 0x34
 8004fe4:	4b67      	ldr	r3, [pc, #412]	; (8005184 <runBLTask+0x2a8>)
 8004fe6:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8004fea:	4b6c      	ldr	r3, [pc, #432]	; (800519c <runBLTask+0x2c0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004ff0:	4868      	ldr	r0, [pc, #416]	; (8005194 <runBLTask+0x2b8>)
 8004ff2:	f7fe f8c9 	bl	8003188 <RobotTurn>
        targetDist = 6;
 8004ff6:	4b62      	ldr	r3, [pc, #392]	; (8005180 <runBLTask+0x2a4>)
 8004ff8:	4a69      	ldr	r2, [pc, #420]	; (80051a0 <runBLTask+0x2c4>)
 8004ffa:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2100      	movs	r1, #0
 8005000:	485f      	ldr	r0, [pc, #380]	; (8005180 <runBLTask+0x2a4>)
 8005002:	f7fd fd55 	bl	8002ab0 <RobotMoveDistance>
        break;
 8005006:	e081      	b.n	800510c <runBLTask+0x230>
      case 00: // BL00 (indoor 3x2)
        targetDist = 1;
 8005008:	4b5d      	ldr	r3, [pc, #372]	; (8005180 <runBLTask+0x2a4>)
 800500a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800500e:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005010:	2200      	movs	r2, #0
 8005012:	2100      	movs	r1, #0
 8005014:	485a      	ldr	r0, [pc, #360]	; (8005180 <runBLTask+0x2a4>)
 8005016:	f7fd fd4b 	bl	8002ab0 <RobotMoveDistance>
        __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 800501a:	4b5a      	ldr	r3, [pc, #360]	; (8005184 <runBLTask+0x2a8>)
 800501c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005020:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005188 <runBLTask+0x2ac>
 8005024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502c:	dd02      	ble.n	8005034 <runBLTask+0x158>
 800502e:	f240 1309 	movw	r3, #265	; 0x109
 8005032:	e012      	b.n	800505a <runBLTask+0x17e>
 8005034:	4b53      	ldr	r3, [pc, #332]	; (8005184 <runBLTask+0x2a8>)
 8005036:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800503a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800518c <runBLTask+0x2b0>
 800503e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	d501      	bpl.n	800504c <runBLTask+0x170>
 8005048:	2346      	movs	r3, #70	; 0x46
 800504a:	e006      	b.n	800505a <runBLTask+0x17e>
 800504c:	4b4d      	ldr	r3, [pc, #308]	; (8005184 <runBLTask+0x2a8>)
 800504e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005056:	ee17 3a90 	vmov	r3, s15
 800505a:	4a4d      	ldr	r2, [pc, #308]	; (8005190 <runBLTask+0x2b4>)
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	6413      	str	r3, [r2, #64]	; 0x40
 8005060:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005064:	f001 fed8 	bl	8006e18 <HAL_Delay>
 8005068:	4b46      	ldr	r3, [pc, #280]	; (8005184 <runBLTask+0x2a8>)
 800506a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800506e:	4a49      	ldr	r2, [pc, #292]	; (8005194 <runBLTask+0x2b8>)
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b44      	ldr	r3, [pc, #272]	; (8005184 <runBLTask+0x2a8>)
 8005074:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	2104      	movs	r1, #4
 8005086:	4844      	ldr	r0, [pc, #272]	; (8005198 <runBLTask+0x2bc>)
 8005088:	f002 fdfa 	bl	8007c80 <HAL_GPIO_WritePin>
 800508c:	4b3d      	ldr	r3, [pc, #244]	; (8005184 <runBLTask+0x2a8>)
 800508e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005092:	2b00      	cmp	r3, #0
 8005094:	bf14      	ite	ne
 8005096:	2301      	movne	r3, #1
 8005098:	2300      	moveq	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	2108      	movs	r1, #8
 80050a0:	483d      	ldr	r0, [pc, #244]	; (8005198 <runBLTask+0x2bc>)
 80050a2:	f002 fded 	bl	8007c80 <HAL_GPIO_WritePin>
 80050a6:	4b37      	ldr	r3, [pc, #220]	; (8005184 <runBLTask+0x2a8>)
 80050a8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bf0c      	ite	eq
 80050b0:	2301      	moveq	r3, #1
 80050b2:	2300      	movne	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	2120      	movs	r1, #32
 80050ba:	4837      	ldr	r0, [pc, #220]	; (8005198 <runBLTask+0x2bc>)
 80050bc:	f002 fde0 	bl	8007c80 <HAL_GPIO_WritePin>
 80050c0:	4b30      	ldr	r3, [pc, #192]	; (8005184 <runBLTask+0x2a8>)
 80050c2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bf14      	ite	ne
 80050ca:	2301      	movne	r3, #1
 80050cc:	2300      	moveq	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	2110      	movs	r1, #16
 80050d4:	4830      	ldr	r0, [pc, #192]	; (8005198 <runBLTask+0x2bc>)
 80050d6:	f002 fdd3 	bl	8007c80 <HAL_GPIO_WritePin>
 80050da:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <runBLTask+0x2a8>)
 80050dc:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 80050e0:	4b2e      	ldr	r3, [pc, #184]	; (800519c <runBLTask+0x2c0>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	635a      	str	r2, [r3, #52]	; 0x34
 80050e6:	4b27      	ldr	r3, [pc, #156]	; (8005184 <runBLTask+0x2a8>)
 80050e8:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 80050ec:	4b2b      	ldr	r3, [pc, #172]	; (800519c <runBLTask+0x2c0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80050f2:	4828      	ldr	r0, [pc, #160]	; (8005194 <runBLTask+0x2b8>)
 80050f4:	f7fe f848 	bl	8003188 <RobotTurn>
        targetDist = 8;
 80050f8:	4b21      	ldr	r3, [pc, #132]	; (8005180 <runBLTask+0x2a4>)
 80050fa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80050fe:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005100:	2200      	movs	r2, #0
 8005102:	2100      	movs	r1, #0
 8005104:	481e      	ldr	r0, [pc, #120]	; (8005180 <runBLTask+0x2a4>)
 8005106:	f7fd fcd3 	bl	8002ab0 <RobotMoveDistance>
        break;
 800510a:	bf00      	nop
      }
      prevTask = curTask;
 800510c:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <runBLTask+0x29c>)
 800510e:	781a      	ldrb	r2, [r3, #0]
 8005110:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <runBLTask+0x2c8>)
 8005112:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8005114:	4b18      	ldr	r3, [pc, #96]	; (8005178 <runBLTask+0x29c>)
 8005116:	2211      	movs	r2, #17
 8005118:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 800511a:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <runBLTask+0x2cc>)
 800511c:	781a      	ldrb	r2, [r3, #0]
 800511e:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <runBLTask+0x2cc>)
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	429a      	cmp	r2, r3
 8005124:	d10d      	bne.n	8005142 <runBLTask+0x266>
      {
        __CLEAR_CURCMD(curCmd);
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <runBLTask+0x2a0>)
 8005128:	2264      	movs	r2, #100	; 0x64
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	4b13      	ldr	r3, [pc, #76]	; (800517c <runBLTask+0x2a0>)
 800512e:	2200      	movs	r2, #0
 8005130:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005136:	2206      	movs	r2, #6
 8005138:	491c      	ldr	r1, [pc, #112]	; (80051ac <runBLTask+0x2d0>)
 800513a:	481d      	ldr	r0, [pc, #116]	; (80051b0 <runBLTask+0x2d4>)
 800513c:	f006 f8d3 	bl	800b2e6 <HAL_UART_Transmit>
 8005140:	e6d0      	b.n	8004ee4 <runBLTask+0x8>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 8005142:	4b19      	ldr	r3, [pc, #100]	; (80051a8 <runBLTask+0x2cc>)
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	4a0d      	ldr	r2, [pc, #52]	; (800517c <runBLTask+0x2a0>)
 8005148:	4917      	ldr	r1, [pc, #92]	; (80051a8 <runBLTask+0x2cc>)
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <runBLTask+0x2cc>)
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	3301      	adds	r3, #1
 8005158:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <runBLTask+0x2cc>)
 800515a:	7892      	ldrb	r2, [r2, #2]
 800515c:	fb93 f1f2 	sdiv	r1, r3, r2
 8005160:	fb01 f202 	mul.w	r2, r1, r2
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	b2da      	uxtb	r2, r3
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <runBLTask+0x2cc>)
 800516a:	705a      	strb	r2, [r3, #1]
 800516c:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <runBLTask+0x2d8>)
 800516e:	210f      	movs	r1, #15
 8005170:	4811      	ldr	r0, [pc, #68]	; (80051b8 <runBLTask+0x2dc>)
 8005172:	f00a fa37 	bl	800f5e4 <sniprintf>
    if (curTask != TASK_BL)
 8005176:	e6b5      	b.n	8004ee4 <runBLTask+0x8>
 8005178:	20000134 	.word	0x20000134
 800517c:	200004cc 	.word	0x200004cc
 8005180:	200004f8 	.word	0x200004f8
 8005184:	20000004 	.word	0x20000004
 8005188:	43848000 	.word	0x43848000
 800518c:	428c0000 	.word	0x428c0000
 8005190:	200002a4 	.word	0x200002a4
 8005194:	200004e4 	.word	0x200004e4
 8005198:	40020000 	.word	0x40020000
 800519c:	200003c4 	.word	0x200003c4
 80051a0:	40c00000 	.word	0x40c00000
 80051a4:	20000135 	.word	0x20000135
 80051a8:	20000498 	.word	0x20000498
 80051ac:	0800fffc 	.word	0x0800fffc
 80051b0:	2000040c 	.word	0x2000040c
 80051b4:	08010004 	.word	0x08010004
 80051b8:	200004d0 	.word	0x200004d0

080051bc <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 80051c4:	4ba3      	ldr	r3, [pc, #652]	; (8005454 <runBRTask+0x298>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b05      	cmp	r3, #5
 80051ca:	d004      	beq.n	80051d6 <runBRTask+0x1a>
      osDelay(1000);
 80051cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051d0:	f007 f9d4 	bl	800c57c <osDelay>
 80051d4:	e7f6      	b.n	80051c4 <runBRTask+0x8>
    else
    {

      switch (curCmd.val)
 80051d6:	4ba0      	ldr	r3, [pc, #640]	; (8005458 <runBRTask+0x29c>)
 80051d8:	885b      	ldrh	r3, [r3, #2]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8084 	beq.w	80052e8 <runBRTask+0x12c>
 80051e0:	2b1e      	cmp	r3, #30
 80051e2:	f040 8101 	bne.w	80053e8 <runBRTask+0x22c>
      {
      case 30: // BR30 (outdoor 3x2)
        targetDist = 2;
 80051e6:	4b9d      	ldr	r3, [pc, #628]	; (800545c <runBRTask+0x2a0>)
 80051e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051ec:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80051ee:	2200      	movs	r2, #0
 80051f0:	2100      	movs	r1, #0
 80051f2:	489a      	ldr	r0, [pc, #616]	; (800545c <runBRTask+0x2a0>)
 80051f4:	f7fd fc5c 	bl	8002ab0 <RobotMoveDistance>
        __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 80051f8:	4b99      	ldr	r3, [pc, #612]	; (8005460 <runBRTask+0x2a4>)
 80051fa:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80051fe:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8005464 <runBRTask+0x2a8>
 8005202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	dd02      	ble.n	8005212 <runBRTask+0x56>
 800520c:	f240 1309 	movw	r3, #265	; 0x109
 8005210:	e012      	b.n	8005238 <runBRTask+0x7c>
 8005212:	4b93      	ldr	r3, [pc, #588]	; (8005460 <runBRTask+0x2a4>)
 8005214:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8005218:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8005468 <runBRTask+0x2ac>
 800521c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	d501      	bpl.n	800522a <runBRTask+0x6e>
 8005226:	2346      	movs	r3, #70	; 0x46
 8005228:	e006      	b.n	8005238 <runBRTask+0x7c>
 800522a:	4b8d      	ldr	r3, [pc, #564]	; (8005460 <runBRTask+0x2a4>)
 800522c:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8005230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005234:	ee17 3a90 	vmov	r3, s15
 8005238:	4a8c      	ldr	r2, [pc, #560]	; (800546c <runBRTask+0x2b0>)
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
 800523e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005242:	f001 fde9 	bl	8006e18 <HAL_Delay>
 8005246:	4b86      	ldr	r3, [pc, #536]	; (8005460 <runBRTask+0x2a4>)
 8005248:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800524c:	4a88      	ldr	r2, [pc, #544]	; (8005470 <runBRTask+0x2b4>)
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	4b83      	ldr	r3, [pc, #524]	; (8005460 <runBRTask+0x2a4>)
 8005252:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf0c      	ite	eq
 800525a:	2301      	moveq	r3, #1
 800525c:	2300      	movne	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	2104      	movs	r1, #4
 8005264:	4883      	ldr	r0, [pc, #524]	; (8005474 <runBRTask+0x2b8>)
 8005266:	f002 fd0b 	bl	8007c80 <HAL_GPIO_WritePin>
 800526a:	4b7d      	ldr	r3, [pc, #500]	; (8005460 <runBRTask+0x2a4>)
 800526c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	2108      	movs	r1, #8
 800527e:	487d      	ldr	r0, [pc, #500]	; (8005474 <runBRTask+0x2b8>)
 8005280:	f002 fcfe 	bl	8007c80 <HAL_GPIO_WritePin>
 8005284:	4b76      	ldr	r3, [pc, #472]	; (8005460 <runBRTask+0x2a4>)
 8005286:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800528a:	2b00      	cmp	r3, #0
 800528c:	bf0c      	ite	eq
 800528e:	2301      	moveq	r3, #1
 8005290:	2300      	movne	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	2120      	movs	r1, #32
 8005298:	4876      	ldr	r0, [pc, #472]	; (8005474 <runBRTask+0x2b8>)
 800529a:	f002 fcf1 	bl	8007c80 <HAL_GPIO_WritePin>
 800529e:	4b70      	ldr	r3, [pc, #448]	; (8005460 <runBRTask+0x2a4>)
 80052a0:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	2110      	movs	r1, #16
 80052b2:	4870      	ldr	r0, [pc, #448]	; (8005474 <runBRTask+0x2b8>)
 80052b4:	f002 fce4 	bl	8007c80 <HAL_GPIO_WritePin>
 80052b8:	4b69      	ldr	r3, [pc, #420]	; (8005460 <runBRTask+0x2a4>)
 80052ba:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 80052be:	4b6e      	ldr	r3, [pc, #440]	; (8005478 <runBRTask+0x2bc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	635a      	str	r2, [r3, #52]	; 0x34
 80052c4:	4b66      	ldr	r3, [pc, #408]	; (8005460 <runBRTask+0x2a4>)
 80052c6:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 80052ca:	4b6b      	ldr	r3, [pc, #428]	; (8005478 <runBRTask+0x2bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80052d0:	4867      	ldr	r0, [pc, #412]	; (8005470 <runBRTask+0x2b4>)
 80052d2:	f7fd ff59 	bl	8003188 <RobotTurn>
        targetDist = 7;
 80052d6:	4b61      	ldr	r3, [pc, #388]	; (800545c <runBRTask+0x2a0>)
 80052d8:	4a68      	ldr	r2, [pc, #416]	; (800547c <runBRTask+0x2c0>)
 80052da:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80052dc:	2200      	movs	r2, #0
 80052de:	2100      	movs	r1, #0
 80052e0:	485e      	ldr	r0, [pc, #376]	; (800545c <runBRTask+0x2a0>)
 80052e2:	f7fd fbe5 	bl	8002ab0 <RobotMoveDistance>
        break;
 80052e6:	e07f      	b.n	80053e8 <runBRTask+0x22c>
      case 00: // BR00 (indoor 3x2)
        targetDist = 5;
 80052e8:	4b5c      	ldr	r3, [pc, #368]	; (800545c <runBRTask+0x2a0>)
 80052ea:	4a65      	ldr	r2, [pc, #404]	; (8005480 <runBRTask+0x2c4>)
 80052ec:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80052ee:	2200      	movs	r2, #0
 80052f0:	2101      	movs	r1, #1
 80052f2:	485a      	ldr	r0, [pc, #360]	; (800545c <runBRTask+0x2a0>)
 80052f4:	f7fd fbdc 	bl	8002ab0 <RobotMoveDistance>
        __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 80052f8:	4b59      	ldr	r3, [pc, #356]	; (8005460 <runBRTask+0x2a4>)
 80052fa:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80052fe:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005464 <runBRTask+0x2a8>
 8005302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530a:	dd02      	ble.n	8005312 <runBRTask+0x156>
 800530c:	f240 1309 	movw	r3, #265	; 0x109
 8005310:	e012      	b.n	8005338 <runBRTask+0x17c>
 8005312:	4b53      	ldr	r3, [pc, #332]	; (8005460 <runBRTask+0x2a4>)
 8005314:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005318:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005468 <runBRTask+0x2ac>
 800531c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005324:	d501      	bpl.n	800532a <runBRTask+0x16e>
 8005326:	2346      	movs	r3, #70	; 0x46
 8005328:	e006      	b.n	8005338 <runBRTask+0x17c>
 800532a:	4b4d      	ldr	r3, [pc, #308]	; (8005460 <runBRTask+0x2a4>)
 800532c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005334:	ee17 3a90 	vmov	r3, s15
 8005338:	4a4c      	ldr	r2, [pc, #304]	; (800546c <runBRTask+0x2b0>)
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	6413      	str	r3, [r2, #64]	; 0x40
 800533e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005342:	f001 fd69 	bl	8006e18 <HAL_Delay>
 8005346:	4b46      	ldr	r3, [pc, #280]	; (8005460 <runBRTask+0x2a4>)
 8005348:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800534c:	4a48      	ldr	r2, [pc, #288]	; (8005470 <runBRTask+0x2b4>)
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	4b43      	ldr	r3, [pc, #268]	; (8005460 <runBRTask+0x2a4>)
 8005352:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005356:	2b00      	cmp	r3, #0
 8005358:	bf0c      	ite	eq
 800535a:	2301      	moveq	r3, #1
 800535c:	2300      	movne	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	2104      	movs	r1, #4
 8005364:	4843      	ldr	r0, [pc, #268]	; (8005474 <runBRTask+0x2b8>)
 8005366:	f002 fc8b 	bl	8007c80 <HAL_GPIO_WritePin>
 800536a:	4b3d      	ldr	r3, [pc, #244]	; (8005460 <runBRTask+0x2a4>)
 800536c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	2108      	movs	r1, #8
 800537e:	483d      	ldr	r0, [pc, #244]	; (8005474 <runBRTask+0x2b8>)
 8005380:	f002 fc7e 	bl	8007c80 <HAL_GPIO_WritePin>
 8005384:	4b36      	ldr	r3, [pc, #216]	; (8005460 <runBRTask+0x2a4>)
 8005386:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	2120      	movs	r1, #32
 8005398:	4836      	ldr	r0, [pc, #216]	; (8005474 <runBRTask+0x2b8>)
 800539a:	f002 fc71 	bl	8007c80 <HAL_GPIO_WritePin>
 800539e:	4b30      	ldr	r3, [pc, #192]	; (8005460 <runBRTask+0x2a4>)
 80053a0:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	bf14      	ite	ne
 80053a8:	2301      	movne	r3, #1
 80053aa:	2300      	moveq	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	2110      	movs	r1, #16
 80053b2:	4830      	ldr	r0, [pc, #192]	; (8005474 <runBRTask+0x2b8>)
 80053b4:	f002 fc64 	bl	8007c80 <HAL_GPIO_WritePin>
 80053b8:	4b29      	ldr	r3, [pc, #164]	; (8005460 <runBRTask+0x2a4>)
 80053ba:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80053be:	4b2e      	ldr	r3, [pc, #184]	; (8005478 <runBRTask+0x2bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	635a      	str	r2, [r3, #52]	; 0x34
 80053c4:	4b26      	ldr	r3, [pc, #152]	; (8005460 <runBRTask+0x2a4>)
 80053c6:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 80053ca:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <runBRTask+0x2bc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80053d0:	4827      	ldr	r0, [pc, #156]	; (8005470 <runBRTask+0x2b4>)
 80053d2:	f7fd fed9 	bl	8003188 <RobotTurn>
        targetDist = 3;
 80053d6:	4b21      	ldr	r3, [pc, #132]	; (800545c <runBRTask+0x2a0>)
 80053d8:	4a2a      	ldr	r2, [pc, #168]	; (8005484 <runBRTask+0x2c8>)
 80053da:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80053dc:	2200      	movs	r2, #0
 80053de:	2100      	movs	r1, #0
 80053e0:	481e      	ldr	r0, [pc, #120]	; (800545c <runBRTask+0x2a0>)
 80053e2:	f7fd fb65 	bl	8002ab0 <RobotMoveDistance>
        break;
 80053e6:	bf00      	nop
      }
      prevTask = curTask;
 80053e8:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <runBRTask+0x298>)
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	4b26      	ldr	r3, [pc, #152]	; (8005488 <runBRTask+0x2cc>)
 80053ee:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80053f0:	4b18      	ldr	r3, [pc, #96]	; (8005454 <runBRTask+0x298>)
 80053f2:	2211      	movs	r2, #17
 80053f4:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 80053f6:	4b25      	ldr	r3, [pc, #148]	; (800548c <runBRTask+0x2d0>)
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	4b24      	ldr	r3, [pc, #144]	; (800548c <runBRTask+0x2d0>)
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d10d      	bne.n	800541e <runBRTask+0x262>
      {
        __CLEAR_CURCMD(curCmd);
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <runBRTask+0x29c>)
 8005404:	2264      	movs	r2, #100	; 0x64
 8005406:	701a      	strb	r2, [r3, #0]
 8005408:	4b13      	ldr	r3, [pc, #76]	; (8005458 <runBRTask+0x29c>)
 800540a:	2200      	movs	r2, #0
 800540c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800540e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005412:	2206      	movs	r2, #6
 8005414:	491e      	ldr	r1, [pc, #120]	; (8005490 <runBRTask+0x2d4>)
 8005416:	481f      	ldr	r0, [pc, #124]	; (8005494 <runBRTask+0x2d8>)
 8005418:	f005 ff65 	bl	800b2e6 <HAL_UART_Transmit>
 800541c:	e6d2      	b.n	80051c4 <runBRTask+0x8>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 800541e:	4b1b      	ldr	r3, [pc, #108]	; (800548c <runBRTask+0x2d0>)
 8005420:	785b      	ldrb	r3, [r3, #1]
 8005422:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <runBRTask+0x29c>)
 8005424:	4919      	ldr	r1, [pc, #100]	; (800548c <runBRTask+0x2d0>)
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b17      	ldr	r3, [pc, #92]	; (800548c <runBRTask+0x2d0>)
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	3301      	adds	r3, #1
 8005434:	4a15      	ldr	r2, [pc, #84]	; (800548c <runBRTask+0x2d0>)
 8005436:	7892      	ldrb	r2, [r2, #2]
 8005438:	fb93 f1f2 	sdiv	r1, r3, r2
 800543c:	fb01 f202 	mul.w	r2, r1, r2
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	b2da      	uxtb	r2, r3
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <runBRTask+0x2d0>)
 8005446:	705a      	strb	r2, [r3, #1]
 8005448:	4a13      	ldr	r2, [pc, #76]	; (8005498 <runBRTask+0x2dc>)
 800544a:	210f      	movs	r1, #15
 800544c:	4813      	ldr	r0, [pc, #76]	; (800549c <runBRTask+0x2e0>)
 800544e:	f00a f8c9 	bl	800f5e4 <sniprintf>
    if (curTask != TASK_BR)
 8005452:	e6b7      	b.n	80051c4 <runBRTask+0x8>
 8005454:	20000134 	.word	0x20000134
 8005458:	200004cc 	.word	0x200004cc
 800545c:	200004f8 	.word	0x200004f8
 8005460:	20000004 	.word	0x20000004
 8005464:	43848000 	.word	0x43848000
 8005468:	428c0000 	.word	0x428c0000
 800546c:	200002a4 	.word	0x200002a4
 8005470:	200004e4 	.word	0x200004e4
 8005474:	40020000 	.word	0x40020000
 8005478:	200003c4 	.word	0x200003c4
 800547c:	40e00000 	.word	0x40e00000
 8005480:	40a00000 	.word	0x40a00000
 8005484:	40400000 	.word	0x40400000
 8005488:	20000135 	.word	0x20000135
 800548c:	20000498 	.word	0x20000498
 8005490:	0800fffc 	.word	0x0800fffc
 8005494:	2000040c 	.word	0x2000040c
 8005498:	08010004 	.word	0x08010004
 800549c:	200004d0 	.word	0x200004d0

080054a0 <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 80054a8:	4bc4      	ldr	r3, [pc, #784]	; (80057bc <runCmdTask+0x31c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	2b63      	cmp	r3, #99	; 0x63
 80054b0:	f200 8338 	bhi.w	8005b24 <runCmdTask+0x684>
 80054b4:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <runCmdTask+0x1c>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	0800564d 	.word	0x0800564d
 80054c0:	0800565b 	.word	0x0800565b
 80054c4:	08005669 	.word	0x08005669
 80054c8:	08005669 	.word	0x08005669
 80054cc:	08005669 	.word	0x08005669
 80054d0:	08005669 	.word	0x08005669
 80054d4:	08005829 	.word	0x08005829
 80054d8:	08005837 	.word	0x08005837
 80054dc:	08005845 	.word	0x08005845
 80054e0:	08005853 	.word	0x08005853
 80054e4:	08005861 	.word	0x08005861
 80054e8:	08005861 	.word	0x08005861
 80054ec:	08005b25 	.word	0x08005b25
 80054f0:	080058a1 	.word	0x080058a1
 80054f4:	080058af 	.word	0x080058af
 80054f8:	08005b25 	.word	0x08005b25
 80054fc:	08005b25 	.word	0x08005b25
 8005500:	08005b25 	.word	0x08005b25
 8005504:	08005b25 	.word	0x08005b25
 8005508:	08005b25 	.word	0x08005b25
 800550c:	08005b25 	.word	0x08005b25
 8005510:	08005b25 	.word	0x08005b25
 8005514:	08005b25 	.word	0x08005b25
 8005518:	08005b25 	.word	0x08005b25
 800551c:	08005b25 	.word	0x08005b25
 8005520:	08005b25 	.word	0x08005b25
 8005524:	08005b25 	.word	0x08005b25
 8005528:	08005b25 	.word	0x08005b25
 800552c:	08005b25 	.word	0x08005b25
 8005530:	08005b25 	.word	0x08005b25
 8005534:	08005b25 	.word	0x08005b25
 8005538:	08005b25 	.word	0x08005b25
 800553c:	08005b25 	.word	0x08005b25
 8005540:	08005b25 	.word	0x08005b25
 8005544:	08005b25 	.word	0x08005b25
 8005548:	08005b25 	.word	0x08005b25
 800554c:	08005b25 	.word	0x08005b25
 8005550:	08005b25 	.word	0x08005b25
 8005554:	08005b25 	.word	0x08005b25
 8005558:	08005b25 	.word	0x08005b25
 800555c:	08005b25 	.word	0x08005b25
 8005560:	08005b25 	.word	0x08005b25
 8005564:	08005b25 	.word	0x08005b25
 8005568:	08005b25 	.word	0x08005b25
 800556c:	08005b25 	.word	0x08005b25
 8005570:	08005b25 	.word	0x08005b25
 8005574:	08005b25 	.word	0x08005b25
 8005578:	08005b25 	.word	0x08005b25
 800557c:	08005b25 	.word	0x08005b25
 8005580:	08005b25 	.word	0x08005b25
 8005584:	08005b25 	.word	0x08005b25
 8005588:	08005b25 	.word	0x08005b25
 800558c:	08005b25 	.word	0x08005b25
 8005590:	08005b25 	.word	0x08005b25
 8005594:	08005b25 	.word	0x08005b25
 8005598:	08005b25 	.word	0x08005b25
 800559c:	08005b25 	.word	0x08005b25
 80055a0:	08005b25 	.word	0x08005b25
 80055a4:	08005b25 	.word	0x08005b25
 80055a8:	08005b25 	.word	0x08005b25
 80055ac:	08005b25 	.word	0x08005b25
 80055b0:	08005b25 	.word	0x08005b25
 80055b4:	08005b25 	.word	0x08005b25
 80055b8:	08005b25 	.word	0x08005b25
 80055bc:	08005b25 	.word	0x08005b25
 80055c0:	08005b25 	.word	0x08005b25
 80055c4:	08005b25 	.word	0x08005b25
 80055c8:	08005b25 	.word	0x08005b25
 80055cc:	08005b25 	.word	0x08005b25
 80055d0:	08005b25 	.word	0x08005b25
 80055d4:	08005b25 	.word	0x08005b25
 80055d8:	08005b25 	.word	0x08005b25
 80055dc:	08005b25 	.word	0x08005b25
 80055e0:	08005b25 	.word	0x08005b25
 80055e4:	08005b25 	.word	0x08005b25
 80055e8:	08005b25 	.word	0x08005b25
 80055ec:	08005b25 	.word	0x08005b25
 80055f0:	08005b25 	.word	0x08005b25
 80055f4:	08005b25 	.word	0x08005b25
 80055f8:	08005b25 	.word	0x08005b25
 80055fc:	08005b25 	.word	0x08005b25
 8005600:	08005b25 	.word	0x08005b25
 8005604:	08005b25 	.word	0x08005b25
 8005608:	08005b25 	.word	0x08005b25
 800560c:	08005b25 	.word	0x08005b25
 8005610:	08005b25 	.word	0x08005b25
 8005614:	08005b25 	.word	0x08005b25
 8005618:	080058bd 	.word	0x080058bd
 800561c:	080058bd 	.word	0x080058bd
 8005620:	080059cf 	.word	0x080059cf
 8005624:	080059cf 	.word	0x080059cf
 8005628:	08005ad1 	.word	0x08005ad1
 800562c:	08005adf 	.word	0x08005adf
 8005630:	08005aed 	.word	0x08005aed
 8005634:	08005afb 	.word	0x08005afb
 8005638:	08005b09 	.word	0x08005b09
 800563c:	08005b17 	.word	0x08005b17
 8005640:	08005b25 	.word	0x08005b25
 8005644:	08005b25 	.word	0x08005b25
 8005648:	08005b25 	.word	0x08005b25
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
      curTask = TASK_MOVE_FORWARD;
 800564c:	4b5c      	ldr	r3, [pc, #368]	; (80057c0 <runCmdTask+0x320>)
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005652:	4b5a      	ldr	r3, [pc, #360]	; (80057bc <runCmdTask+0x31c>)
 8005654:	2263      	movs	r2, #99	; 0x63
 8005656:	701a      	strb	r2, [r3, #0]
      break;
 8005658:	e265      	b.n	8005b26 <runCmdTask+0x686>
    case 2: // BW
      curTask = TASK_MOVE_BACKWARD;
 800565a:	4b59      	ldr	r3, [pc, #356]	; (80057c0 <runCmdTask+0x320>)
 800565c:	2201      	movs	r2, #1
 800565e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005660:	4b56      	ldr	r3, [pc, #344]	; (80057bc <runCmdTask+0x31c>)
 8005662:	2263      	movs	r2, #99	; 0x63
 8005664:	701a      	strb	r2, [r3, #0]
      break;
 8005666:	e25e      	b.n	8005b26 <runCmdTask+0x686>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8005668:	4b54      	ldr	r3, [pc, #336]	; (80057bc <runCmdTask+0x31c>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	4a55      	ldr	r2, [pc, #340]	; (80057c4 <runCmdTask+0x324>)
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	4413      	add	r3, r2
 8005672:	3304      	adds	r3, #4
 8005674:	edd3 7a00 	vldr	s15, [r3]
 8005678:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80057c8 <runCmdTask+0x328>
 800567c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005684:	dd02      	ble.n	800568c <runCmdTask+0x1ec>
 8005686:	f240 1309 	movw	r3, #265	; 0x109
 800568a:	e01c      	b.n	80056c6 <runCmdTask+0x226>
 800568c:	4b4b      	ldr	r3, [pc, #300]	; (80057bc <runCmdTask+0x31c>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	4a4c      	ldr	r2, [pc, #304]	; (80057c4 <runCmdTask+0x324>)
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	4413      	add	r3, r2
 8005696:	3304      	adds	r3, #4
 8005698:	edd3 7a00 	vldr	s15, [r3]
 800569c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80057cc <runCmdTask+0x32c>
 80056a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a8:	d501      	bpl.n	80056ae <runCmdTask+0x20e>
 80056aa:	2346      	movs	r3, #70	; 0x46
 80056ac:	e00b      	b.n	80056c6 <runCmdTask+0x226>
 80056ae:	4b43      	ldr	r3, [pc, #268]	; (80057bc <runCmdTask+0x31c>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	4a44      	ldr	r2, [pc, #272]	; (80057c4 <runCmdTask+0x324>)
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	4413      	add	r3, r2
 80056b8:	3304      	adds	r3, #4
 80056ba:	edd3 7a00 	vldr	s15, [r3]
 80056be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c2:	ee17 3a90 	vmov	r3, s15
 80056c6:	4a42      	ldr	r2, [pc, #264]	; (80057d0 <runCmdTask+0x330>)
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	6413      	str	r3, [r2, #64]	; 0x40
 80056cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80056d0:	f001 fba2 	bl	8006e18 <HAL_Delay>
 80056d4:	4b39      	ldr	r3, [pc, #228]	; (80057bc <runCmdTask+0x31c>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	4a3a      	ldr	r2, [pc, #232]	; (80057c4 <runCmdTask+0x324>)
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	4413      	add	r3, r2
 80056de:	3308      	adds	r3, #8
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a3c      	ldr	r2, [pc, #240]	; (80057d4 <runCmdTask+0x334>)
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	4b35      	ldr	r3, [pc, #212]	; (80057bc <runCmdTask+0x31c>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	4a36      	ldr	r2, [pc, #216]	; (80057c4 <runCmdTask+0x324>)
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	4413      	add	r3, r2
 80056f0:	330c      	adds	r3, #12
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	2104      	movs	r1, #4
 8005702:	4835      	ldr	r0, [pc, #212]	; (80057d8 <runCmdTask+0x338>)
 8005704:	f002 fabc 	bl	8007c80 <HAL_GPIO_WritePin>
 8005708:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <runCmdTask+0x31c>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	4a2d      	ldr	r2, [pc, #180]	; (80057c4 <runCmdTask+0x324>)
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	4413      	add	r3, r2
 8005712:	330c      	adds	r3, #12
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	bf14      	ite	ne
 800571a:	2301      	movne	r3, #1
 800571c:	2300      	moveq	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	2108      	movs	r1, #8
 8005724:	482c      	ldr	r0, [pc, #176]	; (80057d8 <runCmdTask+0x338>)
 8005726:	f002 faab 	bl	8007c80 <HAL_GPIO_WritePin>
 800572a:	4b24      	ldr	r3, [pc, #144]	; (80057bc <runCmdTask+0x31c>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	4a25      	ldr	r2, [pc, #148]	; (80057c4 <runCmdTask+0x324>)
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	4413      	add	r3, r2
 8005734:	330c      	adds	r3, #12
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	461a      	mov	r2, r3
 8005744:	2120      	movs	r1, #32
 8005746:	4824      	ldr	r0, [pc, #144]	; (80057d8 <runCmdTask+0x338>)
 8005748:	f002 fa9a 	bl	8007c80 <HAL_GPIO_WritePin>
 800574c:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <runCmdTask+0x31c>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <runCmdTask+0x324>)
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	4413      	add	r3, r2
 8005756:	330c      	adds	r3, #12
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	bf14      	ite	ne
 800575e:	2301      	movne	r3, #1
 8005760:	2300      	moveq	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	2110      	movs	r1, #16
 8005768:	481b      	ldr	r0, [pc, #108]	; (80057d8 <runCmdTask+0x338>)
 800576a:	f002 fa89 	bl	8007c80 <HAL_GPIO_WritePin>
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <runCmdTask+0x31c>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <runCmdTask+0x324>)
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	4413      	add	r3, r2
 8005778:	881a      	ldrh	r2, [r3, #0]
 800577a:	4b18      	ldr	r3, [pc, #96]	; (80057dc <runCmdTask+0x33c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	635a      	str	r2, [r3, #52]	; 0x34
 8005780:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <runCmdTask+0x31c>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	4a0f      	ldr	r2, [pc, #60]	; (80057c4 <runCmdTask+0x324>)
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	4413      	add	r3, r2
 800578a:	3302      	adds	r3, #2
 800578c:	881a      	ldrh	r2, [r3, #0]
 800578e:	4b13      	ldr	r3, [pc, #76]	; (80057dc <runCmdTask+0x33c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8005794:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <runCmdTask+0x340>)
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <runCmdTask+0x340>)
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	429a      	cmp	r2, r3
 800579e:	d125      	bne.n	80057ec <runCmdTask+0x34c>
      {
        __CLEAR_CURCMD(curCmd);
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <runCmdTask+0x31c>)
 80057a2:	2264      	movs	r2, #100	; 0x64
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <runCmdTask+0x31c>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80057ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057b0:	2206      	movs	r2, #6
 80057b2:	490c      	ldr	r1, [pc, #48]	; (80057e4 <runCmdTask+0x344>)
 80057b4:	480c      	ldr	r0, [pc, #48]	; (80057e8 <runCmdTask+0x348>)
 80057b6:	f005 fd96 	bl	800b2e6 <HAL_UART_Transmit>
 80057ba:	e031      	b.n	8005820 <runCmdTask+0x380>
 80057bc:	200004cc 	.word	0x200004cc
 80057c0:	20000134 	.word	0x20000134
 80057c4:	20000004 	.word	0x20000004
 80057c8:	43848000 	.word	0x43848000
 80057cc:	428c0000 	.word	0x428c0000
 80057d0:	200002a4 	.word	0x200002a4
 80057d4:	200004e4 	.word	0x200004e4
 80057d8:	40020000 	.word	0x40020000
 80057dc:	200003c4 	.word	0x200003c4
 80057e0:	20000498 	.word	0x20000498
 80057e4:	0800fffc 	.word	0x0800fffc
 80057e8:	2000040c 	.word	0x2000040c
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 80057ec:	4bab      	ldr	r3, [pc, #684]	; (8005a9c <runCmdTask+0x5fc>)
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	4aab      	ldr	r2, [pc, #684]	; (8005aa0 <runCmdTask+0x600>)
 80057f2:	49aa      	ldr	r1, [pc, #680]	; (8005a9c <runCmdTask+0x5fc>)
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	4ba7      	ldr	r3, [pc, #668]	; (8005a9c <runCmdTask+0x5fc>)
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	3301      	adds	r3, #1
 8005802:	4aa6      	ldr	r2, [pc, #664]	; (8005a9c <runCmdTask+0x5fc>)
 8005804:	7892      	ldrb	r2, [r2, #2]
 8005806:	fb93 f1f2 	sdiv	r1, r3, r2
 800580a:	fb01 f202 	mul.w	r2, r1, r2
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4ba2      	ldr	r3, [pc, #648]	; (8005a9c <runCmdTask+0x5fc>)
 8005814:	705a      	strb	r2, [r3, #1]
 8005816:	4aa3      	ldr	r2, [pc, #652]	; (8005aa4 <runCmdTask+0x604>)
 8005818:	210f      	movs	r1, #15
 800581a:	48a3      	ldr	r0, [pc, #652]	; (8005aa8 <runCmdTask+0x608>)
 800581c:	f009 fee2 	bl	800f5e4 <sniprintf>
      __PEND_CURCMD(curCmd);
 8005820:	4b9f      	ldr	r3, [pc, #636]	; (8005aa0 <runCmdTask+0x600>)
 8005822:	2263      	movs	r2, #99	; 0x63
 8005824:	701a      	strb	r2, [r3, #0]
      break;
 8005826:	e17e      	b.n	8005b26 <runCmdTask+0x686>
    case 7: // FL
      curTask = TASK_FL;
 8005828:	4ba0      	ldr	r3, [pc, #640]	; (8005aac <runCmdTask+0x60c>)
 800582a:	2202      	movs	r2, #2
 800582c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800582e:	4b9c      	ldr	r3, [pc, #624]	; (8005aa0 <runCmdTask+0x600>)
 8005830:	2263      	movs	r2, #99	; 0x63
 8005832:	701a      	strb	r2, [r3, #0]
      break;
 8005834:	e177      	b.n	8005b26 <runCmdTask+0x686>
    case 8: // FR
      curTask = TASK_FR;
 8005836:	4b9d      	ldr	r3, [pc, #628]	; (8005aac <runCmdTask+0x60c>)
 8005838:	2203      	movs	r2, #3
 800583a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800583c:	4b98      	ldr	r3, [pc, #608]	; (8005aa0 <runCmdTask+0x600>)
 800583e:	2263      	movs	r2, #99	; 0x63
 8005840:	701a      	strb	r2, [r3, #0]
      break;
 8005842:	e170      	b.n	8005b26 <runCmdTask+0x686>
    case 9: // BL
      curTask = TASK_BL;
 8005844:	4b99      	ldr	r3, [pc, #612]	; (8005aac <runCmdTask+0x60c>)
 8005846:	2204      	movs	r2, #4
 8005848:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800584a:	4b95      	ldr	r3, [pc, #596]	; (8005aa0 <runCmdTask+0x600>)
 800584c:	2263      	movs	r2, #99	; 0x63
 800584e:	701a      	strb	r2, [r3, #0]
      break;
 8005850:	e169      	b.n	8005b26 <runCmdTask+0x686>
    case 10: // BR
      curTask = TASK_BR;
 8005852:	4b96      	ldr	r3, [pc, #600]	; (8005aac <runCmdTask+0x60c>)
 8005854:	2205      	movs	r2, #5
 8005856:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005858:	4b91      	ldr	r3, [pc, #580]	; (8005aa0 <runCmdTask+0x600>)
 800585a:	2263      	movs	r2, #99	; 0x63
 800585c:	701a      	strb	r2, [r3, #0]
      break;
 800585e:	e162      	b.n	8005b26 <runCmdTask+0x686>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8005860:	4b8f      	ldr	r3, [pc, #572]	; (8005aa0 <runCmdTask+0x600>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b0b      	cmp	r3, #11
 8005866:	d005      	beq.n	8005874 <runCmdTask+0x3d4>
 8005868:	4b91      	ldr	r3, [pc, #580]	; (8005ab0 <runCmdTask+0x610>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f240 1209 	movw	r2, #265	; 0x109
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
 8005872:	e003      	b.n	800587c <runCmdTask+0x3dc>
 8005874:	4b8e      	ldr	r3, [pc, #568]	; (8005ab0 <runCmdTask+0x610>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2246      	movs	r2, #70	; 0x46
 800587a:	641a      	str	r2, [r3, #64]	; 0x40
 800587c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005880:	f001 faca 	bl	8006e18 <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 8005884:	4b86      	ldr	r3, [pc, #536]	; (8005aa0 <runCmdTask+0x600>)
 8005886:	2264      	movs	r2, #100	; 0x64
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	4b85      	ldr	r3, [pc, #532]	; (8005aa0 <runCmdTask+0x600>)
 800588c:	2200      	movs	r2, #0
 800588e:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8005890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005894:	2206      	movs	r2, #6
 8005896:	4987      	ldr	r1, [pc, #540]	; (8005ab4 <runCmdTask+0x614>)
 8005898:	4887      	ldr	r0, [pc, #540]	; (8005ab8 <runCmdTask+0x618>)
 800589a:	f005 fd24 	bl	800b2e6 <HAL_UART_Transmit>
      break;
 800589e:	e142      	b.n	8005b26 <runCmdTask+0x686>
    case 14: // DT move until specified distance from obstacle
      curTask = TASK_MOVE_OBS;
 80058a0:	4b82      	ldr	r3, [pc, #520]	; (8005aac <runCmdTask+0x60c>)
 80058a2:	2209      	movs	r2, #9
 80058a4:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 80058a6:	4b7e      	ldr	r3, [pc, #504]	; (8005aa0 <runCmdTask+0x600>)
 80058a8:	2263      	movs	r2, #99	; 0x63
 80058aa:	701a      	strb	r2, [r3, #0]
      break;
 80058ac:	e13b      	b.n	8005b26 <runCmdTask+0x686>
    case 15: // DZ move until specified distance from obstacle, but with zoomzoom config
      curTask = TASK_MOVE_OBS_ZOOMZOOM;
 80058ae:	4b7f      	ldr	r3, [pc, #508]	; (8005aac <runCmdTask+0x60c>)
 80058b0:	220a      	movs	r2, #10
 80058b2:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 80058b4:	4b7a      	ldr	r3, [pc, #488]	; (8005aa0 <runCmdTask+0x600>)
 80058b6:	2263      	movs	r2, #99	; 0x63
 80058b8:	701a      	strb	r2, [r3, #0]
      break;
 80058ba:	e134      	b.n	8005b26 <runCmdTask+0x686>
    case 88: // FAxxx, forward rotate left by xxx degree
    case 89: // FCxxx, forward rotate right by xxx degree
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80058bc:	2200      	movs	r2, #0
 80058be:	2104      	movs	r1, #4
 80058c0:	487e      	ldr	r0, [pc, #504]	; (8005abc <runCmdTask+0x61c>)
 80058c2:	f002 f9dd 	bl	8007c80 <HAL_GPIO_WritePin>
 80058c6:	2201      	movs	r2, #1
 80058c8:	2108      	movs	r1, #8
 80058ca:	487c      	ldr	r0, [pc, #496]	; (8005abc <runCmdTask+0x61c>)
 80058cc:	f002 f9d8 	bl	8007c80 <HAL_GPIO_WritePin>
 80058d0:	2200      	movs	r2, #0
 80058d2:	2120      	movs	r1, #32
 80058d4:	4879      	ldr	r0, [pc, #484]	; (8005abc <runCmdTask+0x61c>)
 80058d6:	f002 f9d3 	bl	8007c80 <HAL_GPIO_WritePin>
 80058da:	2201      	movs	r2, #1
 80058dc:	2110      	movs	r1, #16
 80058de:	4877      	ldr	r0, [pc, #476]	; (8005abc <runCmdTask+0x61c>)
 80058e0:	f002 f9ce 	bl	8007c80 <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 80058e4:	4b6e      	ldr	r3, [pc, #440]	; (8005aa0 <runCmdTask+0x600>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b58      	cmp	r3, #88	; 0x58
 80058ea:	d12d      	bne.n	8005948 <runCmdTask+0x4a8>
      {
        __SET_SERVO_TURN(&htim1, 90);
 80058ec:	4b70      	ldr	r3, [pc, #448]	; (8005ab0 <runCmdTask+0x610>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	225a      	movs	r2, #90	; 0x5a
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
 80058f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80058f8:	f001 fa8e 	bl	8006e18 <HAL_Delay>
        if (curCmd.val >= 10)
 80058fc:	4b68      	ldr	r3, [pc, #416]	; (8005aa0 <runCmdTask+0x600>)
 80058fe:	885b      	ldrh	r3, [r3, #2]
 8005900:	2b09      	cmp	r3, #9
 8005902:	d90d      	bls.n	8005920 <runCmdTask+0x480>
          targetAngle = (curCmd.val - FAOFFSET);
 8005904:	4b66      	ldr	r3, [pc, #408]	; (8005aa0 <runCmdTask+0x600>)
 8005906:	885b      	ldrh	r3, [r3, #2]
 8005908:	461a      	mov	r2, r3
 800590a:	4b6d      	ldr	r3, [pc, #436]	; (8005ac0 <runCmdTask+0x620>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005918:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <runCmdTask+0x624>)
 800591a:	edc3 7a00 	vstr	s15, [r3]
 800591e:	e008      	b.n	8005932 <runCmdTask+0x492>
        else
          targetAngle = curCmd.val;
 8005920:	4b5f      	ldr	r3, [pc, #380]	; (8005aa0 <runCmdTask+0x600>)
 8005922:	885b      	ldrh	r3, [r3, #2]
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592c:	4b65      	ldr	r3, [pc, #404]	; (8005ac4 <runCmdTask+0x624>)
 800592e:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8005932:	4b65      	ldr	r3, [pc, #404]	; (8005ac8 <runCmdTask+0x628>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f240 5235 	movw	r2, #1333	; 0x535
 800593a:	635a      	str	r2, [r3, #52]	; 0x34
 800593c:	4b62      	ldr	r3, [pc, #392]	; (8005ac8 <runCmdTask+0x628>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
 8005946:	e02e      	b.n	80059a6 <runCmdTask+0x506>
      }
      else
      {
        __SET_SERVO_TURN(&htim1, 265);
 8005948:	4b59      	ldr	r3, [pc, #356]	; (8005ab0 <runCmdTask+0x610>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f240 1209 	movw	r2, #265	; 0x109
 8005950:	641a      	str	r2, [r3, #64]	; 0x40
 8005952:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005956:	f001 fa5f 	bl	8006e18 <HAL_Delay>
        if (curCmd.val >= 10)
 800595a:	4b51      	ldr	r3, [pc, #324]	; (8005aa0 <runCmdTask+0x600>)
 800595c:	885b      	ldrh	r3, [r3, #2]
 800595e:	2b09      	cmp	r3, #9
 8005960:	d90d      	bls.n	800597e <runCmdTask+0x4de>
          targetAngle = -(curCmd.val - FCOFFSET);
 8005962:	4b5a      	ldr	r3, [pc, #360]	; (8005acc <runCmdTask+0x62c>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	4b4d      	ldr	r3, [pc, #308]	; (8005aa0 <runCmdTask+0x600>)
 800596a:	885b      	ldrh	r3, [r3, #2]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005976:	4b53      	ldr	r3, [pc, #332]	; (8005ac4 <runCmdTask+0x624>)
 8005978:	edc3 7a00 	vstr	s15, [r3]
 800597c:	e009      	b.n	8005992 <runCmdTask+0x4f2>
        else
          targetAngle = -curCmd.val;
 800597e:	4b48      	ldr	r3, [pc, #288]	; (8005aa0 <runCmdTask+0x600>)
 8005980:	885b      	ldrh	r3, [r3, #2]
 8005982:	425b      	negs	r3, r3
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800598c:	4b4d      	ldr	r3, [pc, #308]	; (8005ac4 <runCmdTask+0x624>)
 800598e:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8005992:	4b4d      	ldr	r3, [pc, #308]	; (8005ac8 <runCmdTask+0x628>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800599a:	635a      	str	r2, [r3, #52]	; 0x34
 800599c:	4b4a      	ldr	r3, [pc, #296]	; (8005ac8 <runCmdTask+0x628>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f240 5235 	movw	r2, #1333	; 0x535
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 80059a6:	4b3e      	ldr	r3, [pc, #248]	; (8005aa0 <runCmdTask+0x600>)
 80059a8:	2263      	movs	r2, #99	; 0x63
 80059aa:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 80059ac:	4845      	ldr	r0, [pc, #276]	; (8005ac4 <runCmdTask+0x624>)
 80059ae:	f7fd fbeb 	bl	8003188 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 80059b2:	4b3b      	ldr	r3, [pc, #236]	; (8005aa0 <runCmdTask+0x600>)
 80059b4:	2264      	movs	r2, #100	; 0x64
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <runCmdTask+0x600>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 80059be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059c2:	2206      	movs	r2, #6
 80059c4:	493b      	ldr	r1, [pc, #236]	; (8005ab4 <runCmdTask+0x614>)
 80059c6:	483c      	ldr	r0, [pc, #240]	; (8005ab8 <runCmdTask+0x618>)
 80059c8:	f005 fc8d 	bl	800b2e6 <HAL_UART_Transmit>
      break;
 80059cc:	e0ab      	b.n	8005b26 <runCmdTask+0x686>
    case 90: // BAxxx, backward rotate right by xxx degree
    case 91: // BCxxx, backward rotate left by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, (int)(!(curCmd.index - 90)));
 80059ce:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <runCmdTask+0x600>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b5a      	cmp	r3, #90	; 0x5a
 80059d4:	d105      	bne.n	80059e2 <runCmdTask+0x542>
 80059d6:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <runCmdTask+0x610>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f240 1209 	movw	r2, #265	; 0x109
 80059de:	641a      	str	r2, [r3, #64]	; 0x40
 80059e0:	e003      	b.n	80059ea <runCmdTask+0x54a>
 80059e2:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <runCmdTask+0x610>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2246      	movs	r2, #70	; 0x46
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
 80059ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80059ee:	f001 fa13 	bl	8006e18 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 80059f2:	2201      	movs	r2, #1
 80059f4:	2104      	movs	r1, #4
 80059f6:	4831      	ldr	r0, [pc, #196]	; (8005abc <runCmdTask+0x61c>)
 80059f8:	f002 f942 	bl	8007c80 <HAL_GPIO_WritePin>
 80059fc:	2200      	movs	r2, #0
 80059fe:	2108      	movs	r1, #8
 8005a00:	482e      	ldr	r0, [pc, #184]	; (8005abc <runCmdTask+0x61c>)
 8005a02:	f002 f93d 	bl	8007c80 <HAL_GPIO_WritePin>
 8005a06:	2201      	movs	r2, #1
 8005a08:	2120      	movs	r1, #32
 8005a0a:	482c      	ldr	r0, [pc, #176]	; (8005abc <runCmdTask+0x61c>)
 8005a0c:	f002 f938 	bl	8007c80 <HAL_GPIO_WritePin>
 8005a10:	2200      	movs	r2, #0
 8005a12:	2110      	movs	r1, #16
 8005a14:	4829      	ldr	r0, [pc, #164]	; (8005abc <runCmdTask+0x61c>)
 8005a16:	f002 f933 	bl	8007c80 <HAL_GPIO_WritePin>
      if (curCmd.index == 90)
 8005a1a:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <runCmdTask+0x600>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b5a      	cmp	r3, #90	; 0x5a
 8005a20:	d113      	bne.n	8005a4a <runCmdTask+0x5aa>
      {

        targetAngle = curCmd.val;
 8005a22:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <runCmdTask+0x600>)
 8005a24:	885b      	ldrh	r3, [r3, #2]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <runCmdTask+0x624>)
 8005a30:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8005a34:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <runCmdTask+0x628>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8005a3e:	4b22      	ldr	r3, [pc, #136]	; (8005ac8 <runCmdTask+0x628>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f240 5235 	movw	r2, #1333	; 0x535
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38
 8005a48:	e013      	b.n	8005a72 <runCmdTask+0x5d2>
      }
      else
      {
        targetAngle = -curCmd.val;
 8005a4a:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <runCmdTask+0x600>)
 8005a4c:	885b      	ldrh	r3, [r3, #2]
 8005a4e:	425b      	negs	r3, r3
 8005a50:	ee07 3a90 	vmov	s15, r3
 8005a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a58:	4b1a      	ldr	r3, [pc, #104]	; (8005ac4 <runCmdTask+0x624>)
 8005a5a:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8005a5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <runCmdTask+0x628>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f240 5235 	movw	r2, #1333	; 0x535
 8005a66:	635a      	str	r2, [r3, #52]	; 0x34
 8005a68:	4b17      	ldr	r3, [pc, #92]	; (8005ac8 <runCmdTask+0x628>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <runCmdTask+0x600>)
 8005a74:	2263      	movs	r2, #99	; 0x63
 8005a76:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8005a78:	4812      	ldr	r0, [pc, #72]	; (8005ac4 <runCmdTask+0x624>)
 8005a7a:	f7fd fb85 	bl	8003188 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 8005a7e:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <runCmdTask+0x600>)
 8005a80:	2264      	movs	r2, #100	; 0x64
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <runCmdTask+0x600>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8005a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a8e:	2206      	movs	r2, #6
 8005a90:	4908      	ldr	r1, [pc, #32]	; (8005ab4 <runCmdTask+0x614>)
 8005a92:	4809      	ldr	r0, [pc, #36]	; (8005ab8 <runCmdTask+0x618>)
 8005a94:	f005 fc27 	bl	800b2e6 <HAL_UART_Transmit>
      break;
 8005a98:	e045      	b.n	8005b26 <runCmdTask+0x686>
 8005a9a:	bf00      	nop
 8005a9c:	20000498 	.word	0x20000498
 8005aa0:	200004cc 	.word	0x200004cc
 8005aa4:	08010004 	.word	0x08010004
 8005aa8:	200004d0 	.word	0x200004d0
 8005aac:	20000134 	.word	0x20000134
 8005ab0:	200002a4 	.word	0x200002a4
 8005ab4:	0800fffc 	.word	0x0800fffc
 8005ab8:	2000040c 	.word	0x2000040c
 8005abc:	40020000 	.word	0x40020000
 8005ac0:	20000003 	.word	0x20000003
 8005ac4:	200004e4 	.word	0x200004e4
 8005ac8:	200003c4 	.word	0x200003c4
 8005acc:	20000002 	.word	0x20000002
    case 92: // TAxx, 01 turn right, 02 turn left --TASK 2
      curTask = TASK_TURN_A;
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <runCmdTask+0x690>)
 8005ad2:	220b      	movs	r2, #11
 8005ad4:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005ad6:	4b17      	ldr	r3, [pc, #92]	; (8005b34 <runCmdTask+0x694>)
 8005ad8:	2263      	movs	r2, #99	; 0x63
 8005ada:	701a      	strb	r2, [r3, #0]
      break;
 8005adc:	e023      	b.n	8005b26 <runCmdTask+0x686>
    case 93: // IR move until overshoot - for debugging only
      curTask = TASK_TURN_IR;
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <runCmdTask+0x690>)
 8005ae0:	220d      	movs	r2, #13
 8005ae2:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005ae4:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <runCmdTask+0x694>)
 8005ae6:	2263      	movs	r2, #99	; 0x63
 8005ae8:	701a      	strb	r2, [r3, #0]
      break;
 8005aea:	e01c      	b.n	8005b26 <runCmdTask+0x686>
    case 94: // IR move until close to obstacle - for debugging only
      curTask = TASK_TURN_IR_CLOSE;
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <runCmdTask+0x690>)
 8005aee:	220e      	movs	r2, #14
 8005af0:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <runCmdTask+0x694>)
 8005af4:	2263      	movs	r2, #99	; 0x63
 8005af6:	701a      	strb	r2, [r3, #0]
      break;
 8005af8:	e015      	b.n	8005b26 <runCmdTask+0x686>
    case 95: // TBxx, 01 turn right, 02 turn left --TASK 2
      curTask = TASK_TURN_B;
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <runCmdTask+0x690>)
 8005afc:	220c      	movs	r2, #12
 8005afe:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <runCmdTask+0x694>)
 8005b02:	2263      	movs	r2, #99	; 0x63
 8005b04:	701a      	strb	r2, [r3, #0]
      break;
 8005b06:	e00e      	b.n	8005b26 <runCmdTask+0x686>
    case 96: // GHxx, 01 from left (after TB01), 02 from right (after TB02),  --TASK 2
      curTask = TASK_GO_HOME;
 8005b08:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <runCmdTask+0x690>)
 8005b0a:	220f      	movs	r2, #15
 8005b0c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <runCmdTask+0x694>)
 8005b10:	2263      	movs	r2, #99	; 0x63
 8005b12:	701a      	strb	r2, [r3, #0]
      break;
 8005b14:	e007      	b.n	8005b26 <runCmdTask+0x686>
    case 97: // AMxx, 01 from left (after TA01), 02 from right (after TA02),  --TASK 2
      curTask = TASK_AM;
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <runCmdTask+0x690>)
 8005b18:	2210      	movs	r2, #16
 8005b1a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <runCmdTask+0x694>)
 8005b1e:	2263      	movs	r2, #99	; 0x63
 8005b20:	701a      	strb	r2, [r3, #0]
      break;
 8005b22:	e000      	b.n	8005b26 <runCmdTask+0x686>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8005b24:	bf00      	nop
    }
    osDelay(1);
 8005b26:	2001      	movs	r0, #1
 8005b28:	f006 fd28 	bl	800c57c <osDelay>
    switch (curCmd.index)
 8005b2c:	e4bc      	b.n	80054a8 <runCmdTask+0x8>
 8005b2e:	bf00      	nop
 8005b30:	20000134 	.word	0x20000134
 8005b34:	200004cc 	.word	0x200004cc

08005b38 <runMoveDistObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS)
 8005b40:	4b2b      	ldr	r3, [pc, #172]	; (8005bf0 <runMoveDistObsTask+0xb8>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b09      	cmp	r3, #9
 8005b46:	d004      	beq.n	8005b52 <runMoveDistObsTask+0x1a>
      osDelay(1000);
 8005b48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b4c:	f006 fd16 	bl	800c57c <osDelay>
 8005b50:	e049      	b.n	8005be6 <runMoveDistObsTask+0xae>
    else
    {
      targetDist = (float)curCmd.val;
 8005b52:	4b28      	ldr	r3, [pc, #160]	; (8005bf4 <runMoveDistObsTask+0xbc>)
 8005b54:	885b      	ldrh	r3, [r3, #2]
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	4b26      	ldr	r3, [pc, #152]	; (8005bf8 <runMoveDistObsTask+0xc0>)
 8005b60:	edc3 7a00 	vstr	s15, [r3]
      RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_2);
 8005b64:	2102      	movs	r1, #2
 8005b66:	4824      	ldr	r0, [pc, #144]	; (8005bf8 <runMoveDistObsTask+0xc0>)
 8005b68:	f7fd fbba 	bl	80032e0 <RobotMoveDistanceObstacle>

      __ON_TASK_END(&htim8, prevTask, curTask);
 8005b6c:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <runMoveDistObsTask+0xc4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2200      	movs	r2, #0
 8005b72:	635a      	str	r2, [r3, #52]	; 0x34
 8005b74:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <runMoveDistObsTask+0xc4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8005b7c:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <runMoveDistObsTask+0xb8>)
 8005b7e:	781a      	ldrb	r2, [r3, #0]
 8005b80:	4b1f      	ldr	r3, [pc, #124]	; (8005c00 <runMoveDistObsTask+0xc8>)
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <runMoveDistObsTask+0xb8>)
 8005b86:	2211      	movs	r2, #17
 8005b88:	701a      	strb	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8005b8a:	4b1e      	ldr	r3, [pc, #120]	; (8005c04 <runMoveDistObsTask+0xcc>)
 8005b8c:	781a      	ldrb	r2, [r3, #0]
 8005b8e:	4b1d      	ldr	r3, [pc, #116]	; (8005c04 <runMoveDistObsTask+0xcc>)
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d10d      	bne.n	8005bb2 <runMoveDistObsTask+0x7a>
      {
        __CLEAR_CURCMD(curCmd);
 8005b96:	4b17      	ldr	r3, [pc, #92]	; (8005bf4 <runMoveDistObsTask+0xbc>)
 8005b98:	2264      	movs	r2, #100	; 0x64
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <runMoveDistObsTask+0xbc>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ba6:	2206      	movs	r2, #6
 8005ba8:	4917      	ldr	r1, [pc, #92]	; (8005c08 <runMoveDistObsTask+0xd0>)
 8005baa:	4818      	ldr	r0, [pc, #96]	; (8005c0c <runMoveDistObsTask+0xd4>)
 8005bac:	f005 fb9b 	bl	800b2e6 <HAL_UART_Transmit>
 8005bb0:	e019      	b.n	8005be6 <runMoveDistObsTask+0xae>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 8005bb2:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <runMoveDistObsTask+0xcc>)
 8005bb4:	785b      	ldrb	r3, [r3, #1]
 8005bb6:	4a0f      	ldr	r2, [pc, #60]	; (8005bf4 <runMoveDistObsTask+0xbc>)
 8005bb8:	4912      	ldr	r1, [pc, #72]	; (8005c04 <runMoveDistObsTask+0xcc>)
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <runMoveDistObsTask+0xcc>)
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	4a0e      	ldr	r2, [pc, #56]	; (8005c04 <runMoveDistObsTask+0xcc>)
 8005bca:	7892      	ldrb	r2, [r2, #2]
 8005bcc:	fb93 f1f2 	sdiv	r1, r3, r2
 8005bd0:	fb01 f202 	mul.w	r2, r1, r2
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <runMoveDistObsTask+0xcc>)
 8005bda:	705a      	strb	r2, [r3, #1]
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <runMoveDistObsTask+0xd8>)
 8005bde:	210f      	movs	r1, #15
 8005be0:	480c      	ldr	r0, [pc, #48]	; (8005c14 <runMoveDistObsTask+0xdc>)
 8005be2:	f009 fcff 	bl	800f5e4 <sniprintf>
    }
    osDelay(1);
 8005be6:	2001      	movs	r0, #1
 8005be8:	f006 fcc8 	bl	800c57c <osDelay>
    if (curTask != TASK_MOVE_OBS)
 8005bec:	e7a8      	b.n	8005b40 <runMoveDistObsTask+0x8>
 8005bee:	bf00      	nop
 8005bf0:	20000134 	.word	0x20000134
 8005bf4:	200004cc 	.word	0x200004cc
 8005bf8:	200004f8 	.word	0x200004f8
 8005bfc:	200003c4 	.word	0x200003c4
 8005c00:	20000135 	.word	0x20000135
 8005c04:	20000498 	.word	0x20000498
 8005c08:	0800fffc 	.word	0x0800fffc
 8005c0c:	2000040c 	.word	0x2000040c
 8005c10:	08010004 	.word	0x08010004
 8005c14:	200004d0 	.word	0x200004d0

08005c18 <runTurnATask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTurnATask */
void runTurnATask(void *argument)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTurnATask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_TURN_A)
 8005c20:	4b5d      	ldr	r3, [pc, #372]	; (8005d98 <runTurnATask+0x180>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b0b      	cmp	r3, #11
 8005c26:	d004      	beq.n	8005c32 <runTurnATask+0x1a>
      osDelay(1000);
 8005c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c2c:	f006 fca6 	bl	800c57c <osDelay>
 8005c30:	e0ad      	b.n	8005d8e <runTurnATask+0x176>
    else
    {

      switch (curCmd.val)
 8005c32:	4b5a      	ldr	r3, [pc, #360]	; (8005d9c <runTurnATask+0x184>)
 8005c34:	885b      	ldrh	r3, [r3, #2]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d873      	bhi.n	8005d24 <runTurnATask+0x10c>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <runTurnATask+0x2c>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c55 	.word	0x08005c55
 8005c48:	08005c89 	.word	0x08005c89
 8005c4c:	08005cbd 	.word	0x08005cbd
 8005c50:	08005cf1 	.word	0x08005cf1
      {
      case 01: // Turn A right outdoor:
        // DT25
        targetDist = 25;
 8005c54:	4b52      	ldr	r3, [pc, #328]	; (8005da0 <runTurnATask+0x188>)
 8005c56:	4a53      	ldr	r2, [pc, #332]	; (8005da4 <runTurnATask+0x18c>)
 8005c58:	601a      	str	r2, [r3, #0]
        RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_2);
 8005c5a:	2102      	movs	r1, #2
 8005c5c:	4850      	ldr	r0, [pc, #320]	; (8005da0 <runTurnATask+0x188>)
 8005c5e:	f7fd fb3f 	bl	80032e0 <RobotMoveDistanceObstacle>
        // FC45
        RobotTurnFC45();
 8005c62:	f7fe f90f 	bl	8003e84 <RobotTurnFC45>
        osDelay(100);
 8005c66:	2064      	movs	r0, #100	; 0x64
 8005c68:	f006 fc88 	bl	800c57c <osDelay>
        // FA45, parallel to obstacle
        RobotTurnFA45();
 8005c6c:	f7fe f950 	bl	8003f10 <RobotTurnFA45>
        osDelay(100);
 8005c70:	2064      	movs	r0, #100	; 0x64
 8005c72:	f006 fc83 	bl	800c57c <osDelay>
        // BW05
        targetDist = 05;
 8005c76:	4b4a      	ldr	r3, [pc, #296]	; (8005da0 <runTurnATask+0x188>)
 8005c78:	4a4b      	ldr	r2, [pc, #300]	; (8005da8 <runTurnATask+0x190>)
 8005c7a:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4847      	ldr	r0, [pc, #284]	; (8005da0 <runTurnATask+0x188>)
 8005c82:	f7fc ff15 	bl	8002ab0 <RobotMoveDistance>
        break;
 8005c86:	e04d      	b.n	8005d24 <runTurnATask+0x10c>

      case 02: // Turn A left outdoor:
        // DT25
        targetDist = 25;
 8005c88:	4b45      	ldr	r3, [pc, #276]	; (8005da0 <runTurnATask+0x188>)
 8005c8a:	4a46      	ldr	r2, [pc, #280]	; (8005da4 <runTurnATask+0x18c>)
 8005c8c:	601a      	str	r2, [r3, #0]
        RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_2);
 8005c8e:	2102      	movs	r1, #2
 8005c90:	4843      	ldr	r0, [pc, #268]	; (8005da0 <runTurnATask+0x188>)
 8005c92:	f7fd fb25 	bl	80032e0 <RobotMoveDistanceObstacle>
        // FA45
        RobotTurnFA45();
 8005c96:	f7fe f93b 	bl	8003f10 <RobotTurnFA45>
        osDelay(100);
 8005c9a:	2064      	movs	r0, #100	; 0x64
 8005c9c:	f006 fc6e 	bl	800c57c <osDelay>
        // FC45, parallel to obstacle
        RobotTurnFC45();
 8005ca0:	f7fe f8f0 	bl	8003e84 <RobotTurnFC45>
        osDelay(100);
 8005ca4:	2064      	movs	r0, #100	; 0x64
 8005ca6:	f006 fc69 	bl	800c57c <osDelay>
        // BW05
        targetDist = 5;
 8005caa:	4b3d      	ldr	r3, [pc, #244]	; (8005da0 <runTurnATask+0x188>)
 8005cac:	4a3e      	ldr	r2, [pc, #248]	; (8005da8 <runTurnATask+0x190>)
 8005cae:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	483a      	ldr	r0, [pc, #232]	; (8005da0 <runTurnATask+0x188>)
 8005cb6:	f7fc fefb 	bl	8002ab0 <RobotMoveDistance>
        break;
 8005cba:	e033      	b.n	8005d24 <runTurnATask+0x10c>

      case 03: // Turn A right indoor:
        // DT25
        targetDist = 25;
 8005cbc:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <runTurnATask+0x188>)
 8005cbe:	4a39      	ldr	r2, [pc, #228]	; (8005da4 <runTurnATask+0x18c>)
 8005cc0:	601a      	str	r2, [r3, #0]
        RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_2);
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	4836      	ldr	r0, [pc, #216]	; (8005da0 <runTurnATask+0x188>)
 8005cc6:	f7fd fb0b 	bl	80032e0 <RobotMoveDistanceObstacle>
        // FC45
        RobotTurnFC45();
 8005cca:	f7fe f8db 	bl	8003e84 <RobotTurnFC45>
        osDelay(100);
 8005cce:	2064      	movs	r0, #100	; 0x64
 8005cd0:	f006 fc54 	bl	800c57c <osDelay>
        // FA45, parallel to obstacle
        RobotTurnFA45();
 8005cd4:	f7fe f91c 	bl	8003f10 <RobotTurnFA45>
        osDelay(100);
 8005cd8:	2064      	movs	r0, #100	; 0x64
 8005cda:	f006 fc4f 	bl	800c57c <osDelay>
        // BW05
        targetDist = 05;
 8005cde:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <runTurnATask+0x188>)
 8005ce0:	4a31      	ldr	r2, [pc, #196]	; (8005da8 <runTurnATask+0x190>)
 8005ce2:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	482d      	ldr	r0, [pc, #180]	; (8005da0 <runTurnATask+0x188>)
 8005cea:	f7fc fee1 	bl	8002ab0 <RobotMoveDistance>
        break;
 8005cee:	e019      	b.n	8005d24 <runTurnATask+0x10c>

      case 04: // Turn A left indoor:
        // DT25
        targetDist = 25;
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <runTurnATask+0x188>)
 8005cf2:	4a2c      	ldr	r2, [pc, #176]	; (8005da4 <runTurnATask+0x18c>)
 8005cf4:	601a      	str	r2, [r3, #0]
        RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_2);
 8005cf6:	2102      	movs	r1, #2
 8005cf8:	4829      	ldr	r0, [pc, #164]	; (8005da0 <runTurnATask+0x188>)
 8005cfa:	f7fd faf1 	bl	80032e0 <RobotMoveDistanceObstacle>
        // FA45
        RobotTurnFA45();
 8005cfe:	f7fe f907 	bl	8003f10 <RobotTurnFA45>
        osDelay(100);
 8005d02:	2064      	movs	r0, #100	; 0x64
 8005d04:	f006 fc3a 	bl	800c57c <osDelay>
        // FC45, parallel to obstacle
        RobotTurnFC45();
 8005d08:	f7fe f8bc 	bl	8003e84 <RobotTurnFC45>
        osDelay(100);
 8005d0c:	2064      	movs	r0, #100	; 0x64
 8005d0e:	f006 fc35 	bl	800c57c <osDelay>
        // BW05
        targetDist = 5;
 8005d12:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <runTurnATask+0x188>)
 8005d14:	4a24      	ldr	r2, [pc, #144]	; (8005da8 <runTurnATask+0x190>)
 8005d16:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4820      	ldr	r0, [pc, #128]	; (8005da0 <runTurnATask+0x188>)
 8005d1e:	f7fc fec7 	bl	8002ab0 <RobotMoveDistance>
        break;
 8005d22:	bf00      	nop
      }
      prevTask = curTask;
 8005d24:	4b1c      	ldr	r3, [pc, #112]	; (8005d98 <runTurnATask+0x180>)
 8005d26:	781a      	ldrb	r2, [r3, #0]
 8005d28:	4b20      	ldr	r3, [pc, #128]	; (8005dac <runTurnATask+0x194>)
 8005d2a:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <runTurnATask+0x180>)
 8005d2e:	2211      	movs	r2, #17
 8005d30:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8005d32:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <runTurnATask+0x198>)
 8005d34:	781a      	ldrb	r2, [r3, #0]
 8005d36:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <runTurnATask+0x198>)
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d10d      	bne.n	8005d5a <runTurnATask+0x142>
      {
        __CLEAR_CURCMD(curCmd);
 8005d3e:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <runTurnATask+0x184>)
 8005d40:	2264      	movs	r2, #100	; 0x64
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <runTurnATask+0x184>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d4e:	2206      	movs	r2, #6
 8005d50:	4918      	ldr	r1, [pc, #96]	; (8005db4 <runTurnATask+0x19c>)
 8005d52:	4819      	ldr	r0, [pc, #100]	; (8005db8 <runTurnATask+0x1a0>)
 8005d54:	f005 fac7 	bl	800b2e6 <HAL_UART_Transmit>
 8005d58:	e019      	b.n	8005d8e <runTurnATask+0x176>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <runTurnATask+0x198>)
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	4a0f      	ldr	r2, [pc, #60]	; (8005d9c <runTurnATask+0x184>)
 8005d60:	4913      	ldr	r1, [pc, #76]	; (8005db0 <runTurnATask+0x198>)
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <runTurnATask+0x198>)
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <runTurnATask+0x198>)
 8005d72:	7892      	ldrb	r2, [r2, #2]
 8005d74:	fb93 f1f2 	sdiv	r1, r3, r2
 8005d78:	fb01 f202 	mul.w	r2, r1, r2
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <runTurnATask+0x198>)
 8005d82:	705a      	strb	r2, [r3, #1]
 8005d84:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <runTurnATask+0x1a4>)
 8005d86:	210f      	movs	r1, #15
 8005d88:	480d      	ldr	r0, [pc, #52]	; (8005dc0 <runTurnATask+0x1a8>)
 8005d8a:	f009 fc2b 	bl	800f5e4 <sniprintf>
    }
    osDelay(1);
 8005d8e:	2001      	movs	r0, #1
 8005d90:	f006 fbf4 	bl	800c57c <osDelay>
    if (curTask != TASK_TURN_A)
 8005d94:	e744      	b.n	8005c20 <runTurnATask+0x8>
 8005d96:	bf00      	nop
 8005d98:	20000134 	.word	0x20000134
 8005d9c:	200004cc 	.word	0x200004cc
 8005da0:	200004f8 	.word	0x200004f8
 8005da4:	41c80000 	.word	0x41c80000
 8005da8:	40a00000 	.word	0x40a00000
 8005dac:	20000135 	.word	0x20000135
 8005db0:	20000498 	.word	0x20000498
 8005db4:	0800fffc 	.word	0x0800fffc
 8005db8:	2000040c 	.word	0x2000040c
 8005dbc:	08010004 	.word	0x08010004
 8005dc0:	200004d0 	.word	0x200004d0

08005dc4 <runTurnBTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTurnBTask */
void runTurnBTask(void *argument)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTurnBTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_TURN_B)
 8005dcc:	4bc3      	ldr	r3, [pc, #780]	; (80060dc <runTurnBTask+0x318>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b0c      	cmp	r3, #12
 8005dd2:	d004      	beq.n	8005dde <runTurnBTask+0x1a>
      osDelay(1000);
 8005dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005dd8:	f006 fbd0 	bl	800c57c <osDelay>
 8005ddc:	e179      	b.n	80060d2 <runTurnBTask+0x30e>
    else
    {
      switch (curCmd.val)
 8005dde:	4bc0      	ldr	r3, [pc, #768]	; (80060e0 <runTurnBTask+0x31c>)
 8005de0:	885b      	ldrh	r3, [r3, #2]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	f200 813f 	bhi.w	8006068 <runTurnBTask+0x2a4>
 8005dea:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <runTurnBTask+0x2c>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e01 	.word	0x08005e01
 8005df4:	08005e9b 	.word	0x08005e9b
 8005df8:	08005f35 	.word	0x08005f35
 8005dfc:	08005fcf 	.word	0x08005fcf
      {
      case 01: // Turn B right outdoor:
        // DT30
        targetDist = 27;
 8005e00:	4bb8      	ldr	r3, [pc, #736]	; (80060e4 <runTurnBTask+0x320>)
 8005e02:	4ab9      	ldr	r2, [pc, #740]	; (80060e8 <runTurnBTask+0x324>)
 8005e04:	601a      	str	r2, [r3, #0]
        RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_2);
 8005e06:	2102      	movs	r1, #2
 8005e08:	48b6      	ldr	r0, [pc, #728]	; (80060e4 <runTurnBTask+0x320>)
 8005e0a:	f7fd fa69 	bl	80032e0 <RobotMoveDistanceObstacle>
        osDelay(100);
 8005e0e:	2064      	movs	r0, #100	; 0x64
 8005e10:	f006 fbb4 	bl	800c57c <osDelay>
        // FR30
        RobotTurnFR30();
 8005e14:	f7fe f8c2 	bl	8003f9c <RobotTurnFR30>
        osDelay(50);
 8005e18:	2032      	movs	r0, #50	; 0x32
 8005e1a:	f006 fbaf 	bl	800c57c <osDelay>
        // IR01 (left IR, follow wall 1st)
        RobotMoveUntilIROvershoot(0);
 8005e1e:	2000      	movs	r0, #0
 8005e20:	f7fd fd3a 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005e24:	2032      	movs	r0, #50	; 0x32
 8005e26:	f006 fba9 	bl	800c57c <osDelay>
        // FL30
        RobotTurnFL30();
 8005e2a:	f7fe f94d 	bl	80040c8 <RobotTurnFL30>
        osDelay(50);
 8005e2e:	2032      	movs	r0, #50	; 0x32
 8005e30:	f006 fba4 	bl	800c57c <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8005e34:	4bab      	ldr	r3, [pc, #684]	; (80060e4 <runTurnBTask+0x320>)
 8005e36:	4aad      	ldr	r2, [pc, #692]	; (80060ec <runTurnBTask+0x328>)
 8005e38:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	48a9      	ldr	r0, [pc, #676]	; (80060e4 <runTurnBTask+0x320>)
 8005e40:	f7fc fe36 	bl	8002ab0 <RobotMoveDistance>
        osDelay(50);
 8005e44:	2032      	movs	r0, #50	; 0x32
 8005e46:	f006 fb99 	bl	800c57c <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(0);
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	f7fd fd24 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005e50:	2032      	movs	r0, #50	; 0x32
 8005e52:	f006 fb93 	bl	800c57c <osDelay>
        // FL30
        RobotTurnFL30();
 8005e56:	f7fe f937 	bl	80040c8 <RobotTurnFL30>
        osDelay(50);
 8005e5a:	2032      	movs	r0, #50	; 0x32
 8005e5c:	f006 fb8e 	bl	800c57c <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(0);
 8005e60:	2000      	movs	r0, #0
 8005e62:	f7fd fea5 	bl	8003bb0 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8005e66:	2032      	movs	r0, #50	; 0x32
 8005e68:	f006 fb88 	bl	800c57c <osDelay>
        // IR01 (left IR)
        RobotMoveUntilIROvershoot(0);
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f7fd fd13 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005e72:	2032      	movs	r0, #50	; 0x32
 8005e74:	f006 fb82 	bl	800c57c <osDelay>
        // FW15
        targetDist = 15;
 8005e78:	4b9a      	ldr	r3, [pc, #616]	; (80060e4 <runTurnBTask+0x320>)
 8005e7a:	4a9d      	ldr	r2, [pc, #628]	; (80060f0 <runTurnBTask+0x32c>)
 8005e7c:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8005e7e:	2201      	movs	r2, #1
 8005e80:	2101      	movs	r1, #1
 8005e82:	4898      	ldr	r0, [pc, #608]	; (80060e4 <runTurnBTask+0x320>)
 8005e84:	f7fc fe14 	bl	8002ab0 <RobotMoveDistance>
        osDelay(50);
 8005e88:	2032      	movs	r0, #50	; 0x32
 8005e8a:	f006 fb77 	bl	800c57c <osDelay>
        // FL30
        RobotTurnFL30();
 8005e8e:	f7fe f91b 	bl	80040c8 <RobotTurnFL30>
        osDelay(50);
 8005e92:	2032      	movs	r0, #50	; 0x32
 8005e94:	f006 fb72 	bl	800c57c <osDelay>
        break;
 8005e98:	e0e6      	b.n	8006068 <runTurnBTask+0x2a4>

      case 02: // Turn B left outdoor:
        // DT30
        targetDist = 27;
 8005e9a:	4b92      	ldr	r3, [pc, #584]	; (80060e4 <runTurnBTask+0x320>)
 8005e9c:	4a92      	ldr	r2, [pc, #584]	; (80060e8 <runTurnBTask+0x324>)
 8005e9e:	601a      	str	r2, [r3, #0]
        RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_2);
 8005ea0:	2102      	movs	r1, #2
 8005ea2:	4890      	ldr	r0, [pc, #576]	; (80060e4 <runTurnBTask+0x320>)
 8005ea4:	f7fd fa1c 	bl	80032e0 <RobotMoveDistanceObstacle>
        osDelay(100);
 8005ea8:	2064      	movs	r0, #100	; 0x64
 8005eaa:	f006 fb67 	bl	800c57c <osDelay>
        // FL30
        RobotTurnFL30();
 8005eae:	f7fe f90b 	bl	80040c8 <RobotTurnFL30>
        osDelay(50);
 8005eb2:	2032      	movs	r0, #50	; 0x32
 8005eb4:	f006 fb62 	bl	800c57c <osDelay>
        // IR02 (right IR, follow wall 1st)
        RobotMoveUntilIROvershoot(1);
 8005eb8:	2001      	movs	r0, #1
 8005eba:	f7fd fced 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005ebe:	2032      	movs	r0, #50	; 0x32
 8005ec0:	f006 fb5c 	bl	800c57c <osDelay>
        // FR30
        RobotTurnFR30();
 8005ec4:	f7fe f86a 	bl	8003f9c <RobotTurnFR30>
        osDelay(50);
 8005ec8:	2032      	movs	r0, #50	; 0x32
 8005eca:	f006 fb57 	bl	800c57c <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8005ece:	4b85      	ldr	r3, [pc, #532]	; (80060e4 <runTurnBTask+0x320>)
 8005ed0:	4a86      	ldr	r2, [pc, #536]	; (80060ec <runTurnBTask+0x328>)
 8005ed2:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	4882      	ldr	r0, [pc, #520]	; (80060e4 <runTurnBTask+0x320>)
 8005eda:	f7fc fde9 	bl	8002ab0 <RobotMoveDistance>
        osDelay(50);
 8005ede:	2032      	movs	r0, #50	; 0x32
 8005ee0:	f006 fb4c 	bl	800c57c <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(1);
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fd fcd7 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005eea:	2032      	movs	r0, #50	; 0x32
 8005eec:	f006 fb46 	bl	800c57c <osDelay>
        // FR30
        RobotTurnFR30();
 8005ef0:	f7fe f854 	bl	8003f9c <RobotTurnFR30>
        osDelay(50);
 8005ef4:	2032      	movs	r0, #50	; 0x32
 8005ef6:	f006 fb41 	bl	800c57c <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(1);
 8005efa:	2001      	movs	r0, #1
 8005efc:	f7fd fe58 	bl	8003bb0 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8005f00:	2032      	movs	r0, #50	; 0x32
 8005f02:	f006 fb3b 	bl	800c57c <osDelay>
        // IR02 (right IR)
        RobotMoveUntilIROvershoot(1);
 8005f06:	2001      	movs	r0, #1
 8005f08:	f7fd fcc6 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005f0c:	2032      	movs	r0, #50	; 0x32
 8005f0e:	f006 fb35 	bl	800c57c <osDelay>
        // FW15
        targetDist = 15;
 8005f12:	4b74      	ldr	r3, [pc, #464]	; (80060e4 <runTurnBTask+0x320>)
 8005f14:	4a76      	ldr	r2, [pc, #472]	; (80060f0 <runTurnBTask+0x32c>)
 8005f16:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8005f18:	2201      	movs	r2, #1
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	4871      	ldr	r0, [pc, #452]	; (80060e4 <runTurnBTask+0x320>)
 8005f1e:	f7fc fdc7 	bl	8002ab0 <RobotMoveDistance>
        osDelay(50);
 8005f22:	2032      	movs	r0, #50	; 0x32
 8005f24:	f006 fb2a 	bl	800c57c <osDelay>
        // FR30
        RobotTurnFR30();
 8005f28:	f7fe f838 	bl	8003f9c <RobotTurnFR30>
        osDelay(50);
 8005f2c:	2032      	movs	r0, #50	; 0x32
 8005f2e:	f006 fb25 	bl	800c57c <osDelay>
        break;
 8005f32:	e099      	b.n	8006068 <runTurnBTask+0x2a4>

      case 03: // Turn B right indoor:
        // DT30
        targetDist = 27;
 8005f34:	4b6b      	ldr	r3, [pc, #428]	; (80060e4 <runTurnBTask+0x320>)
 8005f36:	4a6c      	ldr	r2, [pc, #432]	; (80060e8 <runTurnBTask+0x324>)
 8005f38:	601a      	str	r2, [r3, #0]
        RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_2);
 8005f3a:	2102      	movs	r1, #2
 8005f3c:	4869      	ldr	r0, [pc, #420]	; (80060e4 <runTurnBTask+0x320>)
 8005f3e:	f7fd f9cf 	bl	80032e0 <RobotMoveDistanceObstacle>
        osDelay(100);
 8005f42:	2064      	movs	r0, #100	; 0x64
 8005f44:	f006 fb1a 	bl	800c57c <osDelay>
        // FR00
        RobotTurnFR00();
 8005f48:	f7fe f9ea 	bl	8004320 <RobotTurnFR00>
        osDelay(50);
 8005f4c:	2032      	movs	r0, #50	; 0x32
 8005f4e:	f006 fb15 	bl	800c57c <osDelay>
        // IR01 (left IR, follow wall 1st)
        RobotMoveUntilIROvershoot(0);
 8005f52:	2000      	movs	r0, #0
 8005f54:	f7fd fca0 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005f58:	2032      	movs	r0, #50	; 0x32
 8005f5a:	f006 fb0f 	bl	800c57c <osDelay>
        // FL00
        RobotTurnFL00();
 8005f5e:	f7fe f94b 	bl	80041f8 <RobotTurnFL00>
        osDelay(50);
 8005f62:	2032      	movs	r0, #50	; 0x32
 8005f64:	f006 fb0a 	bl	800c57c <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8005f68:	4b5e      	ldr	r3, [pc, #376]	; (80060e4 <runTurnBTask+0x320>)
 8005f6a:	4a60      	ldr	r2, [pc, #384]	; (80060ec <runTurnBTask+0x328>)
 8005f6c:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2101      	movs	r1, #1
 8005f72:	485c      	ldr	r0, [pc, #368]	; (80060e4 <runTurnBTask+0x320>)
 8005f74:	f7fc fd9c 	bl	8002ab0 <RobotMoveDistance>
        osDelay(50);
 8005f78:	2032      	movs	r0, #50	; 0x32
 8005f7a:	f006 faff 	bl	800c57c <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(0);
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f7fd fc8a 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005f84:	2032      	movs	r0, #50	; 0x32
 8005f86:	f006 faf9 	bl	800c57c <osDelay>
        // FL00
        RobotTurnFL00();
 8005f8a:	f7fe f935 	bl	80041f8 <RobotTurnFL00>
        osDelay(50);
 8005f8e:	2032      	movs	r0, #50	; 0x32
 8005f90:	f006 faf4 	bl	800c57c <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(0);
 8005f94:	2000      	movs	r0, #0
 8005f96:	f7fd fe0b 	bl	8003bb0 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8005f9a:	2032      	movs	r0, #50	; 0x32
 8005f9c:	f006 faee 	bl	800c57c <osDelay>
        // IR01 (left IR)
        RobotMoveUntilIROvershoot(0);
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f7fd fc79 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005fa6:	2032      	movs	r0, #50	; 0x32
 8005fa8:	f006 fae8 	bl	800c57c <osDelay>
        // FW15
        targetDist = 15;
 8005fac:	4b4d      	ldr	r3, [pc, #308]	; (80060e4 <runTurnBTask+0x320>)
 8005fae:	4a50      	ldr	r2, [pc, #320]	; (80060f0 <runTurnBTask+0x32c>)
 8005fb0:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	484b      	ldr	r0, [pc, #300]	; (80060e4 <runTurnBTask+0x320>)
 8005fb8:	f7fc fd7a 	bl	8002ab0 <RobotMoveDistance>
        osDelay(50);
 8005fbc:	2032      	movs	r0, #50	; 0x32
 8005fbe:	f006 fadd 	bl	800c57c <osDelay>
        // FL00
        RobotTurnFL00();
 8005fc2:	f7fe f919 	bl	80041f8 <RobotTurnFL00>
        osDelay(50);
 8005fc6:	2032      	movs	r0, #50	; 0x32
 8005fc8:	f006 fad8 	bl	800c57c <osDelay>
        break;
 8005fcc:	e04c      	b.n	8006068 <runTurnBTask+0x2a4>

      case 04: // Turn B left indoor:
        // DT30
        targetDist = 27;
 8005fce:	4b45      	ldr	r3, [pc, #276]	; (80060e4 <runTurnBTask+0x320>)
 8005fd0:	4a45      	ldr	r2, [pc, #276]	; (80060e8 <runTurnBTask+0x324>)
 8005fd2:	601a      	str	r2, [r3, #0]
        RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_2);
 8005fd4:	2102      	movs	r1, #2
 8005fd6:	4843      	ldr	r0, [pc, #268]	; (80060e4 <runTurnBTask+0x320>)
 8005fd8:	f7fd f982 	bl	80032e0 <RobotMoveDistanceObstacle>
        osDelay(100);
 8005fdc:	2064      	movs	r0, #100	; 0x64
 8005fde:	f006 facd 	bl	800c57c <osDelay>
        // FL00
        RobotTurnFL00();
 8005fe2:	f7fe f909 	bl	80041f8 <RobotTurnFL00>
        osDelay(50);
 8005fe6:	2032      	movs	r0, #50	; 0x32
 8005fe8:	f006 fac8 	bl	800c57c <osDelay>
        // IR02 (right IR, follow wall 1st)
        RobotMoveUntilIROvershoot(1);
 8005fec:	2001      	movs	r0, #1
 8005fee:	f7fd fc53 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8005ff2:	2032      	movs	r0, #50	; 0x32
 8005ff4:	f006 fac2 	bl	800c57c <osDelay>
        // FR00
        RobotTurnFR00();
 8005ff8:	f7fe f992 	bl	8004320 <RobotTurnFR00>
        osDelay(50);
 8005ffc:	2032      	movs	r0, #50	; 0x32
 8005ffe:	f006 fabd 	bl	800c57c <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8006002:	4b38      	ldr	r3, [pc, #224]	; (80060e4 <runTurnBTask+0x320>)
 8006004:	4a39      	ldr	r2, [pc, #228]	; (80060ec <runTurnBTask+0x328>)
 8006006:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8006008:	2200      	movs	r2, #0
 800600a:	2101      	movs	r1, #1
 800600c:	4835      	ldr	r0, [pc, #212]	; (80060e4 <runTurnBTask+0x320>)
 800600e:	f7fc fd4f 	bl	8002ab0 <RobotMoveDistance>
        osDelay(50);
 8006012:	2032      	movs	r0, #50	; 0x32
 8006014:	f006 fab2 	bl	800c57c <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(1);
 8006018:	2001      	movs	r0, #1
 800601a:	f7fd fc3d 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 800601e:	2032      	movs	r0, #50	; 0x32
 8006020:	f006 faac 	bl	800c57c <osDelay>
        // FR00
        RobotTurnFR00();
 8006024:	f7fe f97c 	bl	8004320 <RobotTurnFR00>
        osDelay(50);
 8006028:	2032      	movs	r0, #50	; 0x32
 800602a:	f006 faa7 	bl	800c57c <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(1);
 800602e:	2001      	movs	r0, #1
 8006030:	f7fd fdbe 	bl	8003bb0 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8006034:	2032      	movs	r0, #50	; 0x32
 8006036:	f006 faa1 	bl	800c57c <osDelay>
        // IR02 (right IR)
        RobotMoveUntilIROvershoot(1);
 800603a:	2001      	movs	r0, #1
 800603c:	f7fd fc2c 	bl	8003898 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8006040:	2032      	movs	r0, #50	; 0x32
 8006042:	f006 fa9b 	bl	800c57c <osDelay>
        // FW15
        targetDist = 15;
 8006046:	4b27      	ldr	r3, [pc, #156]	; (80060e4 <runTurnBTask+0x320>)
 8006048:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <runTurnBTask+0x32c>)
 800604a:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 800604c:	2201      	movs	r2, #1
 800604e:	2101      	movs	r1, #1
 8006050:	4824      	ldr	r0, [pc, #144]	; (80060e4 <runTurnBTask+0x320>)
 8006052:	f7fc fd2d 	bl	8002ab0 <RobotMoveDistance>
        osDelay(50);
 8006056:	2032      	movs	r0, #50	; 0x32
 8006058:	f006 fa90 	bl	800c57c <osDelay>
        // FR00
        RobotTurnFR00();
 800605c:	f7fe f960 	bl	8004320 <RobotTurnFR00>
        osDelay(50);
 8006060:	2032      	movs	r0, #50	; 0x32
 8006062:	f006 fa8b 	bl	800c57c <osDelay>
        break;
 8006066:	bf00      	nop
      }
      prevTask = curTask;
 8006068:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <runTurnBTask+0x318>)
 800606a:	781a      	ldrb	r2, [r3, #0]
 800606c:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <runTurnBTask+0x330>)
 800606e:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8006070:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <runTurnBTask+0x318>)
 8006072:	2211      	movs	r2, #17
 8006074:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8006076:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <runTurnBTask+0x334>)
 8006078:	781a      	ldrb	r2, [r3, #0]
 800607a:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <runTurnBTask+0x334>)
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	429a      	cmp	r2, r3
 8006080:	d10d      	bne.n	800609e <runTurnBTask+0x2da>
      {
        __CLEAR_CURCMD(curCmd);
 8006082:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <runTurnBTask+0x31c>)
 8006084:	2264      	movs	r2, #100	; 0x64
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <runTurnBTask+0x31c>)
 800608a:	2200      	movs	r2, #0
 800608c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800608e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006092:	2206      	movs	r2, #6
 8006094:	4919      	ldr	r1, [pc, #100]	; (80060fc <runTurnBTask+0x338>)
 8006096:	481a      	ldr	r0, [pc, #104]	; (8006100 <runTurnBTask+0x33c>)
 8006098:	f005 f925 	bl	800b2e6 <HAL_UART_Transmit>
 800609c:	e019      	b.n	80060d2 <runTurnBTask+0x30e>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 800609e:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <runTurnBTask+0x334>)
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	4a0f      	ldr	r2, [pc, #60]	; (80060e0 <runTurnBTask+0x31c>)
 80060a4:	4914      	ldr	r1, [pc, #80]	; (80060f8 <runTurnBTask+0x334>)
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	4b12      	ldr	r3, [pc, #72]	; (80060f8 <runTurnBTask+0x334>)
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	3301      	adds	r3, #1
 80060b4:	4a10      	ldr	r2, [pc, #64]	; (80060f8 <runTurnBTask+0x334>)
 80060b6:	7892      	ldrb	r2, [r2, #2]
 80060b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80060bc:	fb01 f202 	mul.w	r2, r1, r2
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <runTurnBTask+0x334>)
 80060c6:	705a      	strb	r2, [r3, #1]
 80060c8:	4a0e      	ldr	r2, [pc, #56]	; (8006104 <runTurnBTask+0x340>)
 80060ca:	210f      	movs	r1, #15
 80060cc:	480e      	ldr	r0, [pc, #56]	; (8006108 <runTurnBTask+0x344>)
 80060ce:	f009 fa89 	bl	800f5e4 <sniprintf>
    }
    osDelay(1);
 80060d2:	2001      	movs	r0, #1
 80060d4:	f006 fa52 	bl	800c57c <osDelay>
    if (curTask != TASK_TURN_B)
 80060d8:	e678      	b.n	8005dcc <runTurnBTask+0x8>
 80060da:	bf00      	nop
 80060dc:	20000134 	.word	0x20000134
 80060e0:	200004cc 	.word	0x200004cc
 80060e4:	200004f8 	.word	0x200004f8
 80060e8:	41d80000 	.word	0x41d80000
 80060ec:	40e00000 	.word	0x40e00000
 80060f0:	41700000 	.word	0x41700000
 80060f4:	20000135 	.word	0x20000135
 80060f8:	20000498 	.word	0x20000498
 80060fc:	0800fffc 	.word	0x0800fffc
 8006100:	2000040c 	.word	0x2000040c
 8006104:	08010004 	.word	0x08010004
 8006108:	200004d0 	.word	0x200004d0

0800610c <runGHTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runGHTask */
void runGHTask(void *argument)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runGHTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_GO_HOME)
 8006114:	4b5d      	ldr	r3, [pc, #372]	; (800628c <runGHTask+0x180>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b0f      	cmp	r3, #15
 800611a:	d004      	beq.n	8006126 <runGHTask+0x1a>
      osDelay(1000);
 800611c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006120:	f006 fa2c 	bl	800c57c <osDelay>
 8006124:	e0ad      	b.n	8006282 <runGHTask+0x176>
    else
    {
      obsDist_B += 75;
 8006126:	4b5a      	ldr	r3, [pc, #360]	; (8006290 <runGHTask+0x184>)
 8006128:	edd3 7a00 	vldr	s15, [r3]
 800612c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8006294 <runGHTask+0x188>
 8006130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006134:	4b56      	ldr	r3, [pc, #344]	; (8006290 <runGHTask+0x184>)
 8006136:	edc3 7a00 	vstr	s15, [r3]
      if (obsDist_B < 1000)
 800613a:	4b55      	ldr	r3, [pc, #340]	; (8006290 <runGHTask+0x184>)
 800613c:	edd3 7a00 	vldr	s15, [r3]
 8006140:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006298 <runGHTask+0x18c>
 8006144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614c:	d564      	bpl.n	8006218 <runGHTask+0x10c>
      {
        switch (curCmd.val)
 800614e:	4b53      	ldr	r3, [pc, #332]	; (800629c <runGHTask+0x190>)
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	3b01      	subs	r3, #1
 8006154:	2b03      	cmp	r3, #3
 8006156:	d85f      	bhi.n	8006218 <runGHTask+0x10c>
 8006158:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <runGHTask+0x54>)
 800615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615e:	bf00      	nop
 8006160:	08006171 	.word	0x08006171
 8006164:	0800619b 	.word	0x0800619b
 8006168:	080061c5 	.word	0x080061c5
 800616c:	080061ef 	.word	0x080061ef
        {
        case 01: // Move after Turn B right outdoor
          // move to obs A location +75 cm
          RobotMoveDistance(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 8006170:	2202      	movs	r2, #2
 8006172:	2101      	movs	r1, #1
 8006174:	4846      	ldr	r0, [pc, #280]	; (8006290 <runGHTask+0x184>)
 8006176:	f7fc fc9b 	bl	8002ab0 <RobotMoveDistance>
          // FL30
          RobotTurnFL30();
 800617a:	f7fd ffa5 	bl	80040c8 <RobotTurnFL30>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(0);
 800617e:	2000      	movs	r0, #0
 8006180:	f7fd fd16 	bl	8003bb0 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 8006184:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <runGHTask+0x194>)
 8006186:	4a47      	ldr	r2, [pc, #284]	; (80062a4 <runGHTask+0x198>)
 8006188:	601a      	str	r2, [r3, #0]
          RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	4844      	ldr	r0, [pc, #272]	; (80062a0 <runGHTask+0x194>)
 8006190:	f7fc fc8e 	bl	8002ab0 <RobotMoveDistance>
          // FR30
          RobotTurnFR30();
 8006194:	f7fd ff02 	bl	8003f9c <RobotTurnFR30>
          break;
 8006198:	e03e      	b.n	8006218 <runGHTask+0x10c>

        case 02: // Move after Turn B left outdoor
          // move to obs A location +75 cm
          RobotMoveDistance(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 800619a:	2202      	movs	r2, #2
 800619c:	2101      	movs	r1, #1
 800619e:	483c      	ldr	r0, [pc, #240]	; (8006290 <runGHTask+0x184>)
 80061a0:	f7fc fc86 	bl	8002ab0 <RobotMoveDistance>
          // FR30
          RobotTurnFR30();
 80061a4:	f7fd fefa 	bl	8003f9c <RobotTurnFR30>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(1);
 80061a8:	2001      	movs	r0, #1
 80061aa:	f7fd fd01 	bl	8003bb0 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 80061ae:	4b3c      	ldr	r3, [pc, #240]	; (80062a0 <runGHTask+0x194>)
 80061b0:	4a3c      	ldr	r2, [pc, #240]	; (80062a4 <runGHTask+0x198>)
 80061b2:	601a      	str	r2, [r3, #0]
          RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80061b4:	2200      	movs	r2, #0
 80061b6:	2100      	movs	r1, #0
 80061b8:	4839      	ldr	r0, [pc, #228]	; (80062a0 <runGHTask+0x194>)
 80061ba:	f7fc fc79 	bl	8002ab0 <RobotMoveDistance>
          // FL30
          RobotTurnFL30();
 80061be:	f7fd ff83 	bl	80040c8 <RobotTurnFL30>
          break;
 80061c2:	e029      	b.n	8006218 <runGHTask+0x10c>

        case 03: // Move after Turn B right indoor
          // move to obs A location +75 cm
          RobotMoveDistance(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 80061c4:	2202      	movs	r2, #2
 80061c6:	2101      	movs	r1, #1
 80061c8:	4831      	ldr	r0, [pc, #196]	; (8006290 <runGHTask+0x184>)
 80061ca:	f7fc fc71 	bl	8002ab0 <RobotMoveDistance>
          // FL00
          RobotTurnFL00();
 80061ce:	f7fe f813 	bl	80041f8 <RobotTurnFL00>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(0);
 80061d2:	2000      	movs	r0, #0
 80061d4:	f7fd fcec 	bl	8003bb0 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 80061d8:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <runGHTask+0x194>)
 80061da:	4a32      	ldr	r2, [pc, #200]	; (80062a4 <runGHTask+0x198>)
 80061dc:	601a      	str	r2, [r3, #0]
          RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	482f      	ldr	r0, [pc, #188]	; (80062a0 <runGHTask+0x194>)
 80061e4:	f7fc fc64 	bl	8002ab0 <RobotMoveDistance>
          // FR00
          RobotTurnFR00();
 80061e8:	f7fe f89a 	bl	8004320 <RobotTurnFR00>
          break;
 80061ec:	e014      	b.n	8006218 <runGHTask+0x10c>

        case 04: // Move after Turn B left indoor
          // move to obs A location +75 cm
          RobotMoveDistance(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 80061ee:	2202      	movs	r2, #2
 80061f0:	2101      	movs	r1, #1
 80061f2:	4827      	ldr	r0, [pc, #156]	; (8006290 <runGHTask+0x184>)
 80061f4:	f7fc fc5c 	bl	8002ab0 <RobotMoveDistance>
          // FR00
          RobotTurnFR00();
 80061f8:	f7fe f892 	bl	8004320 <RobotTurnFR00>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(1);
 80061fc:	2001      	movs	r0, #1
 80061fe:	f7fd fcd7 	bl	8003bb0 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 8006202:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <runGHTask+0x194>)
 8006204:	4a27      	ldr	r2, [pc, #156]	; (80062a4 <runGHTask+0x198>)
 8006206:	601a      	str	r2, [r3, #0]
          RobotMoveDistance(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8006208:	2200      	movs	r2, #0
 800620a:	2100      	movs	r1, #0
 800620c:	4824      	ldr	r0, [pc, #144]	; (80062a0 <runGHTask+0x194>)
 800620e:	f7fc fc4f 	bl	8002ab0 <RobotMoveDistance>
          // FL00
          RobotTurnFL00();
 8006212:	f7fd fff1 	bl	80041f8 <RobotTurnFL00>
          break;
 8006216:	bf00      	nop
        }
      }

      prevTask = curTask;
 8006218:	4b1c      	ldr	r3, [pc, #112]	; (800628c <runGHTask+0x180>)
 800621a:	781a      	ldrb	r2, [r3, #0]
 800621c:	4b22      	ldr	r3, [pc, #136]	; (80062a8 <runGHTask+0x19c>)
 800621e:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8006220:	4b1a      	ldr	r3, [pc, #104]	; (800628c <runGHTask+0x180>)
 8006222:	2211      	movs	r2, #17
 8006224:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 8006226:	4b21      	ldr	r3, [pc, #132]	; (80062ac <runGHTask+0x1a0>)
 8006228:	781a      	ldrb	r2, [r3, #0]
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <runGHTask+0x1a0>)
 800622c:	785b      	ldrb	r3, [r3, #1]
 800622e:	429a      	cmp	r2, r3
 8006230:	d10d      	bne.n	800624e <runGHTask+0x142>
      {
        __CLEAR_CURCMD(curCmd);
 8006232:	4b1a      	ldr	r3, [pc, #104]	; (800629c <runGHTask+0x190>)
 8006234:	2264      	movs	r2, #100	; 0x64
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	4b18      	ldr	r3, [pc, #96]	; (800629c <runGHTask+0x190>)
 800623a:	2200      	movs	r2, #0
 800623c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800623e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006242:	2206      	movs	r2, #6
 8006244:	491a      	ldr	r1, [pc, #104]	; (80062b0 <runGHTask+0x1a4>)
 8006246:	481b      	ldr	r0, [pc, #108]	; (80062b4 <runGHTask+0x1a8>)
 8006248:	f005 f84d 	bl	800b2e6 <HAL_UART_Transmit>
 800624c:	e019      	b.n	8006282 <runGHTask+0x176>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 800624e:	4b17      	ldr	r3, [pc, #92]	; (80062ac <runGHTask+0x1a0>)
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	4a12      	ldr	r2, [pc, #72]	; (800629c <runGHTask+0x190>)
 8006254:	4915      	ldr	r1, [pc, #84]	; (80062ac <runGHTask+0x1a0>)
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	4b13      	ldr	r3, [pc, #76]	; (80062ac <runGHTask+0x1a0>)
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	3301      	adds	r3, #1
 8006264:	4a11      	ldr	r2, [pc, #68]	; (80062ac <runGHTask+0x1a0>)
 8006266:	7892      	ldrb	r2, [r2, #2]
 8006268:	fb93 f1f2 	sdiv	r1, r3, r2
 800626c:	fb01 f202 	mul.w	r2, r1, r2
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	b2da      	uxtb	r2, r3
 8006274:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <runGHTask+0x1a0>)
 8006276:	705a      	strb	r2, [r3, #1]
 8006278:	4a0f      	ldr	r2, [pc, #60]	; (80062b8 <runGHTask+0x1ac>)
 800627a:	210f      	movs	r1, #15
 800627c:	480f      	ldr	r0, [pc, #60]	; (80062bc <runGHTask+0x1b0>)
 800627e:	f009 f9b1 	bl	800f5e4 <sniprintf>
    }
    osDelay(1);
 8006282:	2001      	movs	r0, #1
 8006284:	f006 f97a 	bl	800c57c <osDelay>
    if (curTask != TASK_GO_HOME)
 8006288:	e744      	b.n	8006114 <runGHTask+0x8>
 800628a:	bf00      	nop
 800628c:	20000134 	.word	0x20000134
 8006290:	2000013c 	.word	0x2000013c
 8006294:	42960000 	.word	0x42960000
 8006298:	447a0000 	.word	0x447a0000
 800629c:	200004cc 	.word	0x200004cc
 80062a0:	200004f8 	.word	0x200004f8
 80062a4:	41700000 	.word	0x41700000
 80062a8:	20000135 	.word	0x20000135
 80062ac:	20000498 	.word	0x20000498
 80062b0:	0800fffc 	.word	0x0800fffc
 80062b4:	2000040c 	.word	0x2000040c
 80062b8:	08010004 	.word	0x08010004
 80062bc:	200004d0 	.word	0x200004d0

080062c0 <runAMTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runAMTask */
void runAMTask(void *argument)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runAMTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_AM)
 80062c8:	4b93      	ldr	r3, [pc, #588]	; (8006518 <runAMTask+0x258>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d004      	beq.n	80062da <runAMTask+0x1a>
      osDelay(1000);
 80062d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062d4:	f006 f952 	bl	800c57c <osDelay>
 80062d8:	e119      	b.n	800650e <runAMTask+0x24e>
    else
    {

      switch (curCmd.val)
 80062da:	4b90      	ldr	r3, [pc, #576]	; (800651c <runAMTask+0x25c>)
 80062dc:	885b      	ldrh	r3, [r3, #2]
 80062de:	3b01      	subs	r3, #1
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	f200 80df 	bhi.w	80064a4 <runAMTask+0x1e4>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <runAMTask+0x2c>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	08006367 	.word	0x08006367
 80062f4:	080063d1 	.word	0x080063d1
 80062f8:	0800643b 	.word	0x0800643b
      {
      case 01: // AM right outdoor - use right after Turn A right outdoor:
        // FW5
        targetDist = 5;
 80062fc:	4b88      	ldr	r3, [pc, #544]	; (8006520 <runAMTask+0x260>)
 80062fe:	4a89      	ldr	r2, [pc, #548]	; (8006524 <runAMTask+0x264>)
 8006300:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8006302:	2200      	movs	r2, #0
 8006304:	2101      	movs	r1, #1
 8006306:	4886      	ldr	r0, [pc, #536]	; (8006520 <runAMTask+0x260>)
 8006308:	f7fc fbd2 	bl	8002ab0 <RobotMoveDistance>
        //  FA45
        RobotTurnFA45();
 800630c:	f7fd fe00 	bl	8003f10 <RobotTurnFA45>
        osDelay(100);
 8006310:	2064      	movs	r0, #100	; 0x64
 8006312:	f006 f933 	bl	800c57c <osDelay>
        // FC45
        RobotTurnFC45();
 8006316:	f7fd fdb5 	bl	8003e84 <RobotTurnFC45>
        osDelay(100);
 800631a:	2064      	movs	r0, #100	; 0x64
 800631c:	f006 f92e 	bl	800c57c <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_Ultrasonic = 1000;
 8006320:	4b81      	ldr	r3, [pc, #516]	; (8006528 <runAMTask+0x268>)
 8006322:	4a82      	ldr	r2, [pc, #520]	; (800652c <runAMTask+0x26c>)
 8006324:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8006326:	2104      	movs	r1, #4
 8006328:	4881      	ldr	r0, [pc, #516]	; (8006530 <runAMTask+0x270>)
 800632a:	f003 fbd9 	bl	8009ae0 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 800632e:	f7fc f957 	bl	80025e0 <HCSR04_Read>
        osDelay(100);
 8006332:	2064      	movs	r0, #100	; 0x64
 8006334:	f006 f922 	bl	800c57c <osDelay>
        obsDist_B = obsDist_Ultrasonic;
 8006338:	4b7b      	ldr	r3, [pc, #492]	; (8006528 <runAMTask+0x268>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a7d      	ldr	r2, [pc, #500]	; (8006534 <runAMTask+0x274>)
 800633e:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_Ultrasonic, 5, 12);
 8006340:	4b79      	ldr	r3, [pc, #484]	; (8006528 <runAMTask+0x268>)
 8006342:	edd3 7a00 	vldr	s15, [r3]
 8006346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800634a:	230c      	movs	r3, #12
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	2305      	movs	r3, #5
 8006350:	ee17 2a90 	vmov	r2, s15
 8006354:	2132      	movs	r1, #50	; 0x32
 8006356:	2000      	movs	r0, #0
 8006358:	f009 f818 	bl	800f38c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 800635c:	2104      	movs	r1, #4
 800635e:	4874      	ldr	r0, [pc, #464]	; (8006530 <runAMTask+0x270>)
 8006360:	f003 fce6 	bl	8009d30 <HAL_TIM_IC_Stop_IT>
        break;
 8006364:	e09e      	b.n	80064a4 <runAMTask+0x1e4>

      case 02: // AM left outdoor - use right after Turn A left outdoor:
        // FW5
        targetDist = 5;
 8006366:	4b6e      	ldr	r3, [pc, #440]	; (8006520 <runAMTask+0x260>)
 8006368:	4a6e      	ldr	r2, [pc, #440]	; (8006524 <runAMTask+0x264>)
 800636a:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800636c:	2200      	movs	r2, #0
 800636e:	2101      	movs	r1, #1
 8006370:	486b      	ldr	r0, [pc, #428]	; (8006520 <runAMTask+0x260>)
 8006372:	f7fc fb9d 	bl	8002ab0 <RobotMoveDistance>
        // FC45
        RobotTurnFC45();
 8006376:	f7fd fd85 	bl	8003e84 <RobotTurnFC45>
        osDelay(100);
 800637a:	2064      	movs	r0, #100	; 0x64
 800637c:	f006 f8fe 	bl	800c57c <osDelay>
        // FA45
        RobotTurnFA45();
 8006380:	f7fd fdc6 	bl	8003f10 <RobotTurnFA45>
        osDelay(100);
 8006384:	2064      	movs	r0, #100	; 0x64
 8006386:	f006 f8f9 	bl	800c57c <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_Ultrasonic = 1000;
 800638a:	4b67      	ldr	r3, [pc, #412]	; (8006528 <runAMTask+0x268>)
 800638c:	4a67      	ldr	r2, [pc, #412]	; (800652c <runAMTask+0x26c>)
 800638e:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8006390:	2104      	movs	r1, #4
 8006392:	4867      	ldr	r0, [pc, #412]	; (8006530 <runAMTask+0x270>)
 8006394:	f003 fba4 	bl	8009ae0 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 8006398:	f7fc f922 	bl	80025e0 <HCSR04_Read>
        osDelay(100);
 800639c:	2064      	movs	r0, #100	; 0x64
 800639e:	f006 f8ed 	bl	800c57c <osDelay>
        obsDist_B = obsDist_Ultrasonic;
 80063a2:	4b61      	ldr	r3, [pc, #388]	; (8006528 <runAMTask+0x268>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a63      	ldr	r2, [pc, #396]	; (8006534 <runAMTask+0x274>)
 80063a8:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_Ultrasonic, 5, 12);
 80063aa:	4b5f      	ldr	r3, [pc, #380]	; (8006528 <runAMTask+0x268>)
 80063ac:	edd3 7a00 	vldr	s15, [r3]
 80063b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063b4:	230c      	movs	r3, #12
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	2305      	movs	r3, #5
 80063ba:	ee17 2a90 	vmov	r2, s15
 80063be:	2132      	movs	r1, #50	; 0x32
 80063c0:	2000      	movs	r0, #0
 80063c2:	f008 ffe3 	bl	800f38c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 80063c6:	2104      	movs	r1, #4
 80063c8:	4859      	ldr	r0, [pc, #356]	; (8006530 <runAMTask+0x270>)
 80063ca:	f003 fcb1 	bl	8009d30 <HAL_TIM_IC_Stop_IT>
        break;
 80063ce:	e069      	b.n	80064a4 <runAMTask+0x1e4>

      case 03: // AM right indoor - use right after Turn A right indoor:
        // FW5
        targetDist = 5;
 80063d0:	4b53      	ldr	r3, [pc, #332]	; (8006520 <runAMTask+0x260>)
 80063d2:	4a54      	ldr	r2, [pc, #336]	; (8006524 <runAMTask+0x264>)
 80063d4:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80063d6:	2200      	movs	r2, #0
 80063d8:	2101      	movs	r1, #1
 80063da:	4851      	ldr	r0, [pc, #324]	; (8006520 <runAMTask+0x260>)
 80063dc:	f7fc fb68 	bl	8002ab0 <RobotMoveDistance>
        //  FA45
        RobotTurnFA45();
 80063e0:	f7fd fd96 	bl	8003f10 <RobotTurnFA45>
        osDelay(100);
 80063e4:	2064      	movs	r0, #100	; 0x64
 80063e6:	f006 f8c9 	bl	800c57c <osDelay>
        // FC45
        RobotTurnFC45();
 80063ea:	f7fd fd4b 	bl	8003e84 <RobotTurnFC45>
        osDelay(100);
 80063ee:	2064      	movs	r0, #100	; 0x64
 80063f0:	f006 f8c4 	bl	800c57c <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_Ultrasonic = 1000;
 80063f4:	4b4c      	ldr	r3, [pc, #304]	; (8006528 <runAMTask+0x268>)
 80063f6:	4a4d      	ldr	r2, [pc, #308]	; (800652c <runAMTask+0x26c>)
 80063f8:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80063fa:	2104      	movs	r1, #4
 80063fc:	484c      	ldr	r0, [pc, #304]	; (8006530 <runAMTask+0x270>)
 80063fe:	f003 fb6f 	bl	8009ae0 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 8006402:	f7fc f8ed 	bl	80025e0 <HCSR04_Read>
        osDelay(100);
 8006406:	2064      	movs	r0, #100	; 0x64
 8006408:	f006 f8b8 	bl	800c57c <osDelay>
        obsDist_B = obsDist_Ultrasonic;
 800640c:	4b46      	ldr	r3, [pc, #280]	; (8006528 <runAMTask+0x268>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a48      	ldr	r2, [pc, #288]	; (8006534 <runAMTask+0x274>)
 8006412:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_Ultrasonic, 5, 12);
 8006414:	4b44      	ldr	r3, [pc, #272]	; (8006528 <runAMTask+0x268>)
 8006416:	edd3 7a00 	vldr	s15, [r3]
 800641a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641e:	230c      	movs	r3, #12
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	2305      	movs	r3, #5
 8006424:	ee17 2a90 	vmov	r2, s15
 8006428:	2132      	movs	r1, #50	; 0x32
 800642a:	2000      	movs	r0, #0
 800642c:	f008 ffae 	bl	800f38c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8006430:	2104      	movs	r1, #4
 8006432:	483f      	ldr	r0, [pc, #252]	; (8006530 <runAMTask+0x270>)
 8006434:	f003 fc7c 	bl	8009d30 <HAL_TIM_IC_Stop_IT>
        break;
 8006438:	e034      	b.n	80064a4 <runAMTask+0x1e4>

      case 04: // AM left indoor - use right after Turn A left indoor:
        // FW5
        targetDist = 5;
 800643a:	4b39      	ldr	r3, [pc, #228]	; (8006520 <runAMTask+0x260>)
 800643c:	4a39      	ldr	r2, [pc, #228]	; (8006524 <runAMTask+0x264>)
 800643e:	601a      	str	r2, [r3, #0]
        RobotMoveDistance(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8006440:	2200      	movs	r2, #0
 8006442:	2101      	movs	r1, #1
 8006444:	4836      	ldr	r0, [pc, #216]	; (8006520 <runAMTask+0x260>)
 8006446:	f7fc fb33 	bl	8002ab0 <RobotMoveDistance>
        // FC45
        RobotTurnFC45();
 800644a:	f7fd fd1b 	bl	8003e84 <RobotTurnFC45>
        osDelay(100);
 800644e:	2064      	movs	r0, #100	; 0x64
 8006450:	f006 f894 	bl	800c57c <osDelay>
        // FA45
        RobotTurnFA45();
 8006454:	f7fd fd5c 	bl	8003f10 <RobotTurnFA45>
        osDelay(100);
 8006458:	2064      	movs	r0, #100	; 0x64
 800645a:	f006 f88f 	bl	800c57c <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_Ultrasonic = 1000;
 800645e:	4b32      	ldr	r3, [pc, #200]	; (8006528 <runAMTask+0x268>)
 8006460:	4a32      	ldr	r2, [pc, #200]	; (800652c <runAMTask+0x26c>)
 8006462:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8006464:	2104      	movs	r1, #4
 8006466:	4832      	ldr	r0, [pc, #200]	; (8006530 <runAMTask+0x270>)
 8006468:	f003 fb3a 	bl	8009ae0 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 800646c:	f7fc f8b8 	bl	80025e0 <HCSR04_Read>
        osDelay(100);
 8006470:	2064      	movs	r0, #100	; 0x64
 8006472:	f006 f883 	bl	800c57c <osDelay>
        obsDist_B = obsDist_Ultrasonic;
 8006476:	4b2c      	ldr	r3, [pc, #176]	; (8006528 <runAMTask+0x268>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2e      	ldr	r2, [pc, #184]	; (8006534 <runAMTask+0x274>)
 800647c:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_Ultrasonic, 5, 12);
 800647e:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <runAMTask+0x268>)
 8006480:	edd3 7a00 	vldr	s15, [r3]
 8006484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006488:	230c      	movs	r3, #12
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	2305      	movs	r3, #5
 800648e:	ee17 2a90 	vmov	r2, s15
 8006492:	2132      	movs	r1, #50	; 0x32
 8006494:	2000      	movs	r0, #0
 8006496:	f008 ff79 	bl	800f38c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 800649a:	2104      	movs	r1, #4
 800649c:	4824      	ldr	r0, [pc, #144]	; (8006530 <runAMTask+0x270>)
 800649e:	f003 fc47 	bl	8009d30 <HAL_TIM_IC_Stop_IT>
        break;
 80064a2:	bf00      	nop
      }

      prevTask = curTask;
 80064a4:	4b1c      	ldr	r3, [pc, #112]	; (8006518 <runAMTask+0x258>)
 80064a6:	781a      	ldrb	r2, [r3, #0]
 80064a8:	4b23      	ldr	r3, [pc, #140]	; (8006538 <runAMTask+0x278>)
 80064aa:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80064ac:	4b1a      	ldr	r3, [pc, #104]	; (8006518 <runAMTask+0x258>)
 80064ae:	2211      	movs	r2, #17
 80064b0:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 80064b2:	4b22      	ldr	r3, [pc, #136]	; (800653c <runAMTask+0x27c>)
 80064b4:	781a      	ldrb	r2, [r3, #0]
 80064b6:	4b21      	ldr	r3, [pc, #132]	; (800653c <runAMTask+0x27c>)
 80064b8:	785b      	ldrb	r3, [r3, #1]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d10d      	bne.n	80064da <runAMTask+0x21a>
      {
        __CLEAR_CURCMD(curCmd);
 80064be:	4b17      	ldr	r3, [pc, #92]	; (800651c <runAMTask+0x25c>)
 80064c0:	2264      	movs	r2, #100	; 0x64
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	4b15      	ldr	r3, [pc, #84]	; (800651c <runAMTask+0x25c>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80064ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064ce:	2206      	movs	r2, #6
 80064d0:	491b      	ldr	r1, [pc, #108]	; (8006540 <runAMTask+0x280>)
 80064d2:	481c      	ldr	r0, [pc, #112]	; (8006544 <runAMTask+0x284>)
 80064d4:	f004 ff07 	bl	800b2e6 <HAL_UART_Transmit>
 80064d8:	e019      	b.n	800650e <runAMTask+0x24e>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 80064da:	4b18      	ldr	r3, [pc, #96]	; (800653c <runAMTask+0x27c>)
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	4a0f      	ldr	r2, [pc, #60]	; (800651c <runAMTask+0x25c>)
 80064e0:	4916      	ldr	r1, [pc, #88]	; (800653c <runAMTask+0x27c>)
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	440b      	add	r3, r1
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	4b14      	ldr	r3, [pc, #80]	; (800653c <runAMTask+0x27c>)
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	3301      	adds	r3, #1
 80064f0:	4a12      	ldr	r2, [pc, #72]	; (800653c <runAMTask+0x27c>)
 80064f2:	7892      	ldrb	r2, [r2, #2]
 80064f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80064f8:	fb01 f202 	mul.w	r2, r1, r2
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	4b0e      	ldr	r3, [pc, #56]	; (800653c <runAMTask+0x27c>)
 8006502:	705a      	strb	r2, [r3, #1]
 8006504:	4a10      	ldr	r2, [pc, #64]	; (8006548 <runAMTask+0x288>)
 8006506:	210f      	movs	r1, #15
 8006508:	4810      	ldr	r0, [pc, #64]	; (800654c <runAMTask+0x28c>)
 800650a:	f009 f86b 	bl	800f5e4 <sniprintf>
    }
    osDelay(1);
 800650e:	2001      	movs	r0, #1
 8006510:	f006 f834 	bl	800c57c <osDelay>
    if (curTask != TASK_AM)
 8006514:	e6d8      	b.n	80062c8 <runAMTask+0x8>
 8006516:	bf00      	nop
 8006518:	20000134 	.word	0x20000134
 800651c:	200004cc 	.word	0x200004cc
 8006520:	200004f8 	.word	0x200004f8
 8006524:	40a00000 	.word	0x40a00000
 8006528:	20000568 	.word	0x20000568
 800652c:	447a0000 	.word	0x447a0000
 8006530:	20000334 	.word	0x20000334
 8006534:	2000013c 	.word	0x2000013c
 8006538:	20000135 	.word	0x20000135
 800653c:	20000498 	.word	0x20000498
 8006540:	0800fffc 	.word	0x0800fffc
 8006544:	2000040c 	.word	0x2000040c
 8006548:	08010004 	.word	0x08010004
 800654c:	200004d0 	.word	0x200004d0

08006550 <runDZTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runDZTask */
void runDZTask(void *argument)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runDZTask */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS_ZOOMZOOM)
 8006558:	4b2b      	ldr	r3, [pc, #172]	; (8006608 <runDZTask+0xb8>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b0a      	cmp	r3, #10
 800655e:	d004      	beq.n	800656a <runDZTask+0x1a>
      osDelay(1000);
 8006560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006564:	f006 f80a 	bl	800c57c <osDelay>
 8006568:	e049      	b.n	80065fe <runDZTask+0xae>
    else
    {
      targetDist = (float)curCmd.val;
 800656a:	4b28      	ldr	r3, [pc, #160]	; (800660c <runDZTask+0xbc>)
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006576:	4b26      	ldr	r3, [pc, #152]	; (8006610 <runDZTask+0xc0>)
 8006578:	edc3 7a00 	vstr	s15, [r3]
      RobotMoveDistanceObstacle(&targetDist, SPEED_MODE_3);
 800657c:	2103      	movs	r1, #3
 800657e:	4824      	ldr	r0, [pc, #144]	; (8006610 <runDZTask+0xc0>)
 8006580:	f7fc feae 	bl	80032e0 <RobotMoveDistanceObstacle>

      __ON_TASK_END(&htim8, prevTask, curTask);
 8006584:	4b23      	ldr	r3, [pc, #140]	; (8006614 <runDZTask+0xc4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2200      	movs	r2, #0
 800658a:	635a      	str	r2, [r3, #52]	; 0x34
 800658c:	4b21      	ldr	r3, [pc, #132]	; (8006614 <runDZTask+0xc4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2200      	movs	r2, #0
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
 8006594:	4b1c      	ldr	r3, [pc, #112]	; (8006608 <runDZTask+0xb8>)
 8006596:	781a      	ldrb	r2, [r3, #0]
 8006598:	4b1f      	ldr	r3, [pc, #124]	; (8006618 <runDZTask+0xc8>)
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	4b1a      	ldr	r3, [pc, #104]	; (8006608 <runDZTask+0xb8>)
 800659e:	2211      	movs	r2, #17
 80065a0:	701a      	strb	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cmdQ))
 80065a2:	4b1e      	ldr	r3, [pc, #120]	; (800661c <runDZTask+0xcc>)
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	4b1d      	ldr	r3, [pc, #116]	; (800661c <runDZTask+0xcc>)
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d10d      	bne.n	80065ca <runDZTask+0x7a>
      {
        __CLEAR_CURCMD(curCmd);
 80065ae:	4b17      	ldr	r3, [pc, #92]	; (800660c <runDZTask+0xbc>)
 80065b0:	2264      	movs	r2, #100	; 0x64
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	4b15      	ldr	r3, [pc, #84]	; (800660c <runDZTask+0xbc>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80065ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065be:	2206      	movs	r2, #6
 80065c0:	4917      	ldr	r1, [pc, #92]	; (8006620 <runDZTask+0xd0>)
 80065c2:	4818      	ldr	r0, [pc, #96]	; (8006624 <runDZTask+0xd4>)
 80065c4:	f004 fe8f 	bl	800b2e6 <HAL_UART_Transmit>
 80065c8:	e019      	b.n	80065fe <runDZTask+0xae>
      }
      else
        __READ_COMMAND(cmdQ, curCmd, rxMsg);
 80065ca:	4b14      	ldr	r3, [pc, #80]	; (800661c <runDZTask+0xcc>)
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	4a0f      	ldr	r2, [pc, #60]	; (800660c <runDZTask+0xbc>)
 80065d0:	4912      	ldr	r1, [pc, #72]	; (800661c <runDZTask+0xcc>)
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4b10      	ldr	r3, [pc, #64]	; (800661c <runDZTask+0xcc>)
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	3301      	adds	r3, #1
 80065e0:	4a0e      	ldr	r2, [pc, #56]	; (800661c <runDZTask+0xcc>)
 80065e2:	7892      	ldrb	r2, [r2, #2]
 80065e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80065e8:	fb01 f202 	mul.w	r2, r1, r2
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <runDZTask+0xcc>)
 80065f2:	705a      	strb	r2, [r3, #1]
 80065f4:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <runDZTask+0xd8>)
 80065f6:	210f      	movs	r1, #15
 80065f8:	480c      	ldr	r0, [pc, #48]	; (800662c <runDZTask+0xdc>)
 80065fa:	f008 fff3 	bl	800f5e4 <sniprintf>
    }
    osDelay(1);
 80065fe:	2001      	movs	r0, #1
 8006600:	f005 ffbc 	bl	800c57c <osDelay>
    if (curTask != TASK_MOVE_OBS_ZOOMZOOM)
 8006604:	e7a8      	b.n	8006558 <runDZTask+0x8>
 8006606:	bf00      	nop
 8006608:	20000134 	.word	0x20000134
 800660c:	200004cc 	.word	0x200004cc
 8006610:	200004f8 	.word	0x200004f8
 8006614:	200003c4 	.word	0x200003c4
 8006618:	20000135 	.word	0x20000135
 800661c:	20000498 	.word	0x20000498
 8006620:	0800fffc 	.word	0x0800fffc
 8006624:	2000040c 	.word	0x2000040c
 8006628:	08010004 	.word	0x08010004
 800662c:	200004d0 	.word	0x200004d0

08006630 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a04      	ldr	r2, [pc, #16]	; (8006650 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d101      	bne.n	8006646 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8006642:	f000 fbc9 	bl	8006dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40000800 	.word	0x40000800

08006654 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006658:	b672      	cpsid	i
}
 800665a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800665c:	e7fe      	b.n	800665c <Error_Handler+0x8>
	...

08006660 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006666:	2300      	movs	r3, #0
 8006668:	607b      	str	r3, [r7, #4]
 800666a:	4b12      	ldr	r3, [pc, #72]	; (80066b4 <HAL_MspInit+0x54>)
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	4a11      	ldr	r2, [pc, #68]	; (80066b4 <HAL_MspInit+0x54>)
 8006670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006674:	6453      	str	r3, [r2, #68]	; 0x44
 8006676:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <HAL_MspInit+0x54>)
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800667e:	607b      	str	r3, [r7, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006682:	2300      	movs	r3, #0
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <HAL_MspInit+0x54>)
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	4a0a      	ldr	r2, [pc, #40]	; (80066b4 <HAL_MspInit+0x54>)
 800668c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006690:	6413      	str	r3, [r2, #64]	; 0x40
 8006692:	4b08      	ldr	r3, [pc, #32]	; (80066b4 <HAL_MspInit+0x54>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800669e:	2200      	movs	r2, #0
 80066a0:	210f      	movs	r1, #15
 80066a2:	f06f 0001 	mvn.w	r0, #1
 80066a6:	f001 f893 	bl	80077d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40023800 	.word	0x40023800

080066b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08c      	sub	sp, #48	; 0x30
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c0:	f107 031c 	add.w	r3, r7, #28
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	609a      	str	r2, [r3, #8]
 80066cc:	60da      	str	r2, [r3, #12]
 80066ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2e      	ldr	r2, [pc, #184]	; (8006790 <HAL_ADC_MspInit+0xd8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d128      	bne.n	800672c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80066da:	2300      	movs	r3, #0
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	4a2c      	ldr	r2, [pc, #176]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 80066e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e8:	6453      	str	r3, [r2, #68]	; 0x44
 80066ea:	4b2a      	ldr	r3, [pc, #168]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 80066ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066f6:	2300      	movs	r3, #0
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	4b26      	ldr	r3, [pc, #152]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	4a25      	ldr	r2, [pc, #148]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 8006700:	f043 0304 	orr.w	r3, r3, #4
 8006704:	6313      	str	r3, [r2, #48]	; 0x30
 8006706:	4b23      	ldr	r3, [pc, #140]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006712:	2302      	movs	r3, #2
 8006714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006716:	2303      	movs	r3, #3
 8006718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671a:	2300      	movs	r3, #0
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800671e:	f107 031c 	add.w	r3, r7, #28
 8006722:	4619      	mov	r1, r3
 8006724:	481c      	ldr	r0, [pc, #112]	; (8006798 <HAL_ADC_MspInit+0xe0>)
 8006726:	f001 f90f 	bl	8007948 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800672a:	e02c      	b.n	8006786 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1a      	ldr	r2, [pc, #104]	; (800679c <HAL_ADC_MspInit+0xe4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d127      	bne.n	8006786 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006736:	2300      	movs	r3, #0
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	4b16      	ldr	r3, [pc, #88]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	4a15      	ldr	r2, [pc, #84]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 8006740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006744:	6453      	str	r3, [r2, #68]	; 0x44
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	4a0e      	ldr	r2, [pc, #56]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 800675c:	f043 0304 	orr.w	r3, r3, #4
 8006760:	6313      	str	r3, [r2, #48]	; 0x30
 8006762:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <HAL_ADC_MspInit+0xdc>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800676e:	2304      	movs	r3, #4
 8006770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006772:	2303      	movs	r3, #3
 8006774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006776:	2300      	movs	r3, #0
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800677a:	f107 031c 	add.w	r3, r7, #28
 800677e:	4619      	mov	r1, r3
 8006780:	4805      	ldr	r0, [pc, #20]	; (8006798 <HAL_ADC_MspInit+0xe0>)
 8006782:	f001 f8e1 	bl	8007948 <HAL_GPIO_Init>
}
 8006786:	bf00      	nop
 8006788:	3730      	adds	r7, #48	; 0x30
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40012000 	.word	0x40012000
 8006794:	40023800 	.word	0x40023800
 8006798:	40020800 	.word	0x40020800
 800679c:	40012100 	.word	0x40012100

080067a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	; 0x28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a8:	f107 0314 	add.w	r3, r7, #20
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	605a      	str	r2, [r3, #4]
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <HAL_I2C_MspInit+0x84>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d12c      	bne.n	800681c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067c2:	2300      	movs	r3, #0
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	4b18      	ldr	r3, [pc, #96]	; (8006828 <HAL_I2C_MspInit+0x88>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <HAL_I2C_MspInit+0x88>)
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	6313      	str	r3, [r2, #48]	; 0x30
 80067d2:	4b15      	ldr	r3, [pc, #84]	; (8006828 <HAL_I2C_MspInit+0x88>)
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80067de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067e4:	2312      	movs	r3, #18
 80067e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067ec:	2303      	movs	r3, #3
 80067ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80067f0:	2304      	movs	r3, #4
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067f4:	f107 0314 	add.w	r3, r7, #20
 80067f8:	4619      	mov	r1, r3
 80067fa:	480c      	ldr	r0, [pc, #48]	; (800682c <HAL_I2C_MspInit+0x8c>)
 80067fc:	f001 f8a4 	bl	8007948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	4b08      	ldr	r3, [pc, #32]	; (8006828 <HAL_I2C_MspInit+0x88>)
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	4a07      	ldr	r2, [pc, #28]	; (8006828 <HAL_I2C_MspInit+0x88>)
 800680a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800680e:	6413      	str	r3, [r2, #64]	; 0x40
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <HAL_I2C_MspInit+0x88>)
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800681c:	bf00      	nop
 800681e:	3728      	adds	r7, #40	; 0x28
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40005400 	.word	0x40005400
 8006828:	40023800 	.word	0x40023800
 800682c:	40020400 	.word	0x40020400

08006830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08e      	sub	sp, #56	; 0x38
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	609a      	str	r2, [r3, #8]
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a4e      	ldr	r2, [pc, #312]	; (8006988 <HAL_TIM_Base_MspInit+0x158>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d116      	bne.n	8006880 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006852:	2300      	movs	r3, #0
 8006854:	623b      	str	r3, [r7, #32]
 8006856:	4b4d      	ldr	r3, [pc, #308]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	4a4c      	ldr	r2, [pc, #304]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 800685c:	f043 0301 	orr.w	r3, r3, #1
 8006860:	6453      	str	r3, [r2, #68]	; 0x44
 8006862:	4b4a      	ldr	r3, [pc, #296]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	623b      	str	r3, [r7, #32]
 800686c:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800686e:	2200      	movs	r2, #0
 8006870:	2105      	movs	r1, #5
 8006872:	201b      	movs	r0, #27
 8006874:	f000 ffac 	bl	80077d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006878:	201b      	movs	r0, #27
 800687a:	f000 ffc5 	bl	8007808 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800687e:	e07e      	b.n	800697e <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a42      	ldr	r2, [pc, #264]	; (8006990 <HAL_TIM_Base_MspInit+0x160>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d134      	bne.n	80068f4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	4b3f      	ldr	r3, [pc, #252]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	4a3e      	ldr	r2, [pc, #248]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006894:	f043 0302 	orr.w	r3, r3, #2
 8006898:	6413      	str	r3, [r2, #64]	; 0x40
 800689a:	4b3c      	ldr	r3, [pc, #240]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068a6:	2300      	movs	r3, #0
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	4b38      	ldr	r3, [pc, #224]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 80068ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ae:	4a37      	ldr	r2, [pc, #220]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 80068b0:	f043 0302 	orr.w	r3, r3, #2
 80068b4:	6313      	str	r3, [r2, #48]	; 0x30
 80068b6:	4b35      	ldr	r3, [pc, #212]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = US_Echo_Pin;
 80068c2:	2320      	movs	r3, #32
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068c6:	2302      	movs	r3, #2
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068ce:	2300      	movs	r3, #0
 80068d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80068d2:	2302      	movs	r3, #2
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(US_Echo_GPIO_Port, &GPIO_InitStruct);
 80068d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068da:	4619      	mov	r1, r3
 80068dc:	482d      	ldr	r0, [pc, #180]	; (8006994 <HAL_TIM_Base_MspInit+0x164>)
 80068de:	f001 f833 	bl	8007948 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80068e2:	2200      	movs	r2, #0
 80068e4:	2105      	movs	r1, #5
 80068e6:	201d      	movs	r0, #29
 80068e8:	f000 ff72 	bl	80077d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80068ec:	201d      	movs	r0, #29
 80068ee:	f000 ff8b 	bl	8007808 <HAL_NVIC_EnableIRQ>
}
 80068f2:	e044      	b.n	800697e <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM6)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a27      	ldr	r2, [pc, #156]	; (8006998 <HAL_TIM_Base_MspInit+0x168>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d10e      	bne.n	800691c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80068fe:	2300      	movs	r3, #0
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	4b22      	ldr	r3, [pc, #136]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	4a21      	ldr	r2, [pc, #132]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006908:	f043 0310 	orr.w	r3, r3, #16
 800690c:	6413      	str	r3, [r2, #64]	; 0x40
 800690e:	4b1f      	ldr	r3, [pc, #124]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	697b      	ldr	r3, [r7, #20]
}
 800691a:	e030      	b.n	800697e <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM8)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1e      	ldr	r2, [pc, #120]	; (800699c <HAL_TIM_Base_MspInit+0x16c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d12b      	bne.n	800697e <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006926:	2300      	movs	r3, #0
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	4b18      	ldr	r3, [pc, #96]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 800692c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692e:	4a17      	ldr	r2, [pc, #92]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006930:	f043 0302 	orr.w	r3, r3, #2
 8006934:	6453      	str	r3, [r2, #68]	; 0x44
 8006936:	4b15      	ldr	r3, [pc, #84]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	4b11      	ldr	r3, [pc, #68]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	4a10      	ldr	r2, [pc, #64]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 800694c:	f043 0304 	orr.w	r3, r3, #4
 8006950:	6313      	str	r3, [r2, #48]	; 0x30
 8006952:	4b0e      	ldr	r3, [pc, #56]	; (800698c <HAL_TIM_Base_MspInit+0x15c>)
 8006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800695e:	23c0      	movs	r3, #192	; 0xc0
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006962:	2302      	movs	r3, #2
 8006964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006966:	2300      	movs	r3, #0
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800696a:	2300      	movs	r3, #0
 800696c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800696e:	2303      	movs	r3, #3
 8006970:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006976:	4619      	mov	r1, r3
 8006978:	4809      	ldr	r0, [pc, #36]	; (80069a0 <HAL_TIM_Base_MspInit+0x170>)
 800697a:	f000 ffe5 	bl	8007948 <HAL_GPIO_Init>
}
 800697e:	bf00      	nop
 8006980:	3738      	adds	r7, #56	; 0x38
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40010000 	.word	0x40010000
 800698c:	40023800 	.word	0x40023800
 8006990:	40000400 	.word	0x40000400
 8006994:	40020400 	.word	0x40020400
 8006998:	40001000 	.word	0x40001000
 800699c:	40010400 	.word	0x40010400
 80069a0:	40020800 	.word	0x40020800

080069a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	; 0x28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ac:	f107 0314 	add.w	r3, r7, #20
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	609a      	str	r2, [r3, #8]
 80069b8:	60da      	str	r2, [r3, #12]
 80069ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c4:	d14a      	bne.n	8006a5c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069c6:	2300      	movs	r3, #0
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	4b26      	ldr	r3, [pc, #152]	; (8006a64 <HAL_TIM_Encoder_MspInit+0xc0>)
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <HAL_TIM_Encoder_MspInit+0xc0>)
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	6413      	str	r3, [r2, #64]	; 0x40
 80069d6:	4b23      	ldr	r3, [pc, #140]	; (8006a64 <HAL_TIM_Encoder_MspInit+0xc0>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	4b1f      	ldr	r3, [pc, #124]	; (8006a64 <HAL_TIM_Encoder_MspInit+0xc0>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <HAL_TIM_Encoder_MspInit+0xc0>)
 80069ec:	f043 0301 	orr.w	r3, r3, #1
 80069f0:	6313      	str	r3, [r2, #48]	; 0x30
 80069f2:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <HAL_TIM_Encoder_MspInit+0xc0>)
 80069f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069fe:	2300      	movs	r3, #0
 8006a00:	60bb      	str	r3, [r7, #8]
 8006a02:	4b18      	ldr	r3, [pc, #96]	; (8006a64 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	4a17      	ldr	r2, [pc, #92]	; (8006a64 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006a08:	f043 0302 	orr.w	r3, r3, #2
 8006a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a0e:	4b15      	ldr	r3, [pc, #84]	; (8006a64 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	60bb      	str	r3, [r7, #8]
 8006a18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a20:	2302      	movs	r3, #2
 8006a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	4619      	mov	r1, r3
 8006a36:	480c      	ldr	r0, [pc, #48]	; (8006a68 <HAL_TIM_Encoder_MspInit+0xc4>)
 8006a38:	f000 ff86 	bl	8007948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006a3c:	2308      	movs	r3, #8
 8006a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a40:	2302      	movs	r3, #2
 8006a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	4619      	mov	r1, r3
 8006a56:	4805      	ldr	r0, [pc, #20]	; (8006a6c <HAL_TIM_Encoder_MspInit+0xc8>)
 8006a58:	f000 ff76 	bl	8007948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006a5c:	bf00      	nop
 8006a5e:	3728      	adds	r7, #40	; 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40020000 	.word	0x40020000
 8006a6c:	40020400 	.word	0x40020400

08006a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	60da      	str	r2, [r3, #12]
 8006a86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a12      	ldr	r2, [pc, #72]	; (8006ad8 <HAL_TIM_MspPostInit+0x68>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d11e      	bne.n	8006ad0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	4b11      	ldr	r3, [pc, #68]	; (8006adc <HAL_TIM_MspPostInit+0x6c>)
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	4a10      	ldr	r2, [pc, #64]	; (8006adc <HAL_TIM_MspPostInit+0x6c>)
 8006a9c:	f043 0310 	orr.w	r3, r3, #16
 8006aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8006aa2:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <HAL_TIM_MspPostInit+0x6c>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	60bb      	str	r3, [r7, #8]
 8006aac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006aae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ab2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ac4:	f107 030c 	add.w	r3, r7, #12
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4805      	ldr	r0, [pc, #20]	; (8006ae0 <HAL_TIM_MspPostInit+0x70>)
 8006acc:	f000 ff3c 	bl	8007948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006ad0:	bf00      	nop
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40021000 	.word	0x40021000

08006ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08a      	sub	sp, #40	; 0x28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aec:	f107 0314 	add.w	r3, r7, #20
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	605a      	str	r2, [r3, #4]
 8006af6:	609a      	str	r2, [r3, #8]
 8006af8:	60da      	str	r2, [r3, #12]
 8006afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1d      	ldr	r2, [pc, #116]	; (8006b78 <HAL_UART_MspInit+0x94>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d134      	bne.n	8006b70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006b06:	2300      	movs	r3, #0
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <HAL_UART_MspInit+0x98>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	4a1b      	ldr	r2, [pc, #108]	; (8006b7c <HAL_UART_MspInit+0x98>)
 8006b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b14:	6413      	str	r3, [r2, #64]	; 0x40
 8006b16:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <HAL_UART_MspInit+0x98>)
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	4b15      	ldr	r3, [pc, #84]	; (8006b7c <HAL_UART_MspInit+0x98>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	4a14      	ldr	r2, [pc, #80]	; (8006b7c <HAL_UART_MspInit+0x98>)
 8006b2c:	f043 0304 	orr.w	r3, r3, #4
 8006b30:	6313      	str	r3, [r2, #48]	; 0x30
 8006b32:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <HAL_UART_MspInit+0x98>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006b3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b44:	2302      	movs	r3, #2
 8006b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006b50:	2307      	movs	r3, #7
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b54:	f107 0314 	add.w	r3, r7, #20
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4809      	ldr	r0, [pc, #36]	; (8006b80 <HAL_UART_MspInit+0x9c>)
 8006b5c:	f000 fef4 	bl	8007948 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006b60:	2200      	movs	r2, #0
 8006b62:	2105      	movs	r1, #5
 8006b64:	2027      	movs	r0, #39	; 0x27
 8006b66:	f000 fe33 	bl	80077d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b6a:	2027      	movs	r0, #39	; 0x27
 8006b6c:	f000 fe4c 	bl	8007808 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006b70:	bf00      	nop
 8006b72:	3728      	adds	r7, #40	; 0x28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	40004800 	.word	0x40004800
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	40020800 	.word	0x40020800

08006b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08c      	sub	sp, #48	; 0x30
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8006b94:	2200      	movs	r2, #0
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	201e      	movs	r0, #30
 8006b9a:	f000 fe19 	bl	80077d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006b9e:	201e      	movs	r0, #30
 8006ba0:	f000 fe32 	bl	8007808 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	4b1e      	ldr	r3, [pc, #120]	; (8006c24 <HAL_InitTick+0xa0>)
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <HAL_InitTick+0xa0>)
 8006bae:	f043 0304 	orr.w	r3, r3, #4
 8006bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <HAL_InitTick+0xa0>)
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006bc0:	f107 0210 	add.w	r2, r7, #16
 8006bc4:	f107 0314 	add.w	r3, r7, #20
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f002 fcb2 	bl	8009534 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006bd0:	f002 fc88 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 8006bd4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	4a13      	ldr	r2, [pc, #76]	; (8006c28 <HAL_InitTick+0xa4>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	0c9b      	lsrs	r3, r3, #18
 8006be0:	3b01      	subs	r3, #1
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8006be4:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <HAL_InitTick+0xa8>)
 8006be6:	4a12      	ldr	r2, [pc, #72]	; (8006c30 <HAL_InitTick+0xac>)
 8006be8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8006bea:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <HAL_InitTick+0xa8>)
 8006bec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006bf0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8006bf2:	4a0e      	ldr	r2, [pc, #56]	; (8006c2c <HAL_InitTick+0xa8>)
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <HAL_InitTick+0xa8>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <HAL_InitTick+0xa8>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8006c04:	4809      	ldr	r0, [pc, #36]	; (8006c2c <HAL_InitTick+0xa8>)
 8006c06:	f002 fcc7 	bl	8009598 <HAL_TIM_Base_Init>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8006c10:	4806      	ldr	r0, [pc, #24]	; (8006c2c <HAL_InitTick+0xa8>)
 8006c12:	f002 fd79 	bl	8009708 <HAL_TIM_Base_Start_IT>
 8006c16:	4603      	mov	r3, r0
 8006c18:	e000      	b.n	8006c1c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3730      	adds	r7, #48	; 0x30
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40023800 	.word	0x40023800
 8006c28:	431bde83 	.word	0x431bde83
 8006c2c:	2000057c 	.word	0x2000057c
 8006c30:	40000800 	.word	0x40000800

08006c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006c38:	e7fe      	b.n	8006c38 <NMI_Handler+0x4>

08006c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c3e:	e7fe      	b.n	8006c3e <HardFault_Handler+0x4>

08006c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c44:	e7fe      	b.n	8006c44 <MemManage_Handler+0x4>

08006c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c46:	b480      	push	{r7}
 8006c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c4a:	e7fe      	b.n	8006c4a <BusFault_Handler+0x4>

08006c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c50:	e7fe      	b.n	8006c50 <UsageFault_Handler+0x4>

08006c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c52:	b480      	push	{r7}
 8006c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c56:	bf00      	nop
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006c64:	4802      	ldr	r0, [pc, #8]	; (8006c70 <TIM1_CC_IRQHandler+0x10>)
 8006c66:	f003 fa45 	bl	800a0f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006c6a:	bf00      	nop
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200002a4 	.word	0x200002a4

08006c74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006c78:	4802      	ldr	r0, [pc, #8]	; (8006c84 <TIM3_IRQHandler+0x10>)
 8006c7a:	f003 fa3b 	bl	800a0f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006c7e:	bf00      	nop
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000334 	.word	0x20000334

08006c88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006c8c:	4802      	ldr	r0, [pc, #8]	; (8006c98 <TIM4_IRQHandler+0x10>)
 8006c8e:	f003 fa31 	bl	800a0f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006c92:	bf00      	nop
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	2000057c 	.word	0x2000057c

08006c9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006ca0:	4802      	ldr	r0, [pc, #8]	; (8006cac <USART3_IRQHandler+0x10>)
 8006ca2:	f004 fbe3 	bl	800b46c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006ca6:	bf00      	nop
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2000040c 	.word	0x2000040c

08006cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006cb8:	4a14      	ldr	r2, [pc, #80]	; (8006d0c <_sbrk+0x5c>)
 8006cba:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <_sbrk+0x60>)
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006cc4:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <_sbrk+0x64>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ccc:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <_sbrk+0x64>)
 8006cce:	4a12      	ldr	r2, [pc, #72]	; (8006d18 <_sbrk+0x68>)
 8006cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006cd2:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <_sbrk+0x64>)
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d207      	bcs.n	8006cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ce0:	f008 fcbc 	bl	800f65c <__errno>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	220c      	movs	r2, #12
 8006ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cee:	e009      	b.n	8006d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006cf0:	4b08      	ldr	r3, [pc, #32]	; (8006d14 <_sbrk+0x64>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006cf6:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <_sbrk+0x64>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	4a05      	ldr	r2, [pc, #20]	; (8006d14 <_sbrk+0x64>)
 8006d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006d02:	68fb      	ldr	r3, [r7, #12]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20020000 	.word	0x20020000
 8006d10:	00000400 	.word	0x00000400
 8006d14:	200005c4 	.word	0x200005c4
 8006d18:	20005468 	.word	0x20005468

08006d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <SystemInit+0x20>)
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d26:	4a05      	ldr	r2, [pc, #20]	; (8006d3c <SystemInit+0x20>)
 8006d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d30:	bf00      	nop
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	e000ed00 	.word	0xe000ed00

08006d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d44:	480d      	ldr	r0, [pc, #52]	; (8006d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006d46:	490e      	ldr	r1, [pc, #56]	; (8006d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006d48:	4a0e      	ldr	r2, [pc, #56]	; (8006d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d4c:	e002      	b.n	8006d54 <LoopCopyDataInit>

08006d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d52:	3304      	adds	r3, #4

08006d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d58:	d3f9      	bcc.n	8006d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d5a:	4a0b      	ldr	r2, [pc, #44]	; (8006d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006d5c:	4c0b      	ldr	r4, [pc, #44]	; (8006d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d60:	e001      	b.n	8006d66 <LoopFillZerobss>

08006d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d64:	3204      	adds	r2, #4

08006d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d68:	d3fb      	bcc.n	8006d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006d6a:	f7ff ffd7 	bl	8006d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d6e:	f008 fc7b 	bl	800f668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d72:	f7fa f8c1 	bl	8000ef8 <main>
  bx  lr    
 8006d76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d80:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8006d84:	08010d00 	.word	0x08010d00
  ldr r2, =_sbss
 8006d88:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8006d8c:	20005464 	.word	0x20005464

08006d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d90:	e7fe      	b.n	8006d90 <ADC_IRQHandler>
	...

08006d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d98:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <HAL_Init+0x40>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <HAL_Init+0x40>)
 8006d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006da4:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <HAL_Init+0x40>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <HAL_Init+0x40>)
 8006daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006db0:	4b08      	ldr	r3, [pc, #32]	; (8006dd4 <HAL_Init+0x40>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a07      	ldr	r2, [pc, #28]	; (8006dd4 <HAL_Init+0x40>)
 8006db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006dbc:	2003      	movs	r0, #3
 8006dbe:	f000 fcfc 	bl	80077ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006dc2:	200f      	movs	r0, #15
 8006dc4:	f7ff fede 	bl	8006b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006dc8:	f7ff fc4a 	bl	8006660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40023c00 	.word	0x40023c00

08006dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ddc:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <HAL_IncTick+0x20>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <HAL_IncTick+0x24>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4413      	add	r3, r2
 8006de8:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <HAL_IncTick+0x24>)
 8006dea:	6013      	str	r3, [r2, #0]
}
 8006dec:	bf00      	nop
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	2000014c 	.word	0x2000014c
 8006dfc:	200005c8 	.word	0x200005c8

08006e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  return uwTick;
 8006e04:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <HAL_GetTick+0x14>)
 8006e06:	681b      	ldr	r3, [r3, #0]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	200005c8 	.word	0x200005c8

08006e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e20:	f7ff ffee 	bl	8006e00 <HAL_GetTick>
 8006e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e30:	d005      	beq.n	8006e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e32:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <HAL_Delay+0x44>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006e3e:	bf00      	nop
 8006e40:	f7ff ffde 	bl	8006e00 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d8f7      	bhi.n	8006e40 <HAL_Delay+0x28>
  {
  }
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2000014c 	.word	0x2000014c

08006e60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e033      	b.n	8006ede <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fc1a 	bl	80066b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d118      	bne.n	8006ed0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ea6:	f023 0302 	bic.w	r3, r3, #2
 8006eaa:	f043 0202 	orr.w	r2, r3, #2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fad8 	bl	8007468 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	f043 0201 	orr.w	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	641a      	str	r2, [r3, #64]	; 0x40
 8006ece:	e001      	b.n	8006ed4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_ADC_Start+0x1a>
 8006efe:	2302      	movs	r3, #2
 8006f00:	e0b2      	b.n	8007068 <HAL_ADC_Start+0x180>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d018      	beq.n	8006f4a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006f28:	4b52      	ldr	r3, [pc, #328]	; (8007074 <HAL_ADC_Start+0x18c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a52      	ldr	r2, [pc, #328]	; (8007078 <HAL_ADC_Start+0x190>)
 8006f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f32:	0c9a      	lsrs	r2, r3, #18
 8006f34:	4613      	mov	r3, r2
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	4413      	add	r3, r2
 8006f3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006f3c:	e002      	b.n	8006f44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1f9      	bne.n	8006f3e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d17a      	bne.n	800704e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006f60:	f023 0301 	bic.w	r3, r3, #1
 8006f64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f96:	d106      	bne.n	8006fa6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9c:	f023 0206 	bic.w	r2, r3, #6
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	645a      	str	r2, [r3, #68]	; 0x44
 8006fa4:	e002      	b.n	8006fac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fb4:	4b31      	ldr	r3, [pc, #196]	; (800707c <HAL_ADC_Start+0x194>)
 8006fb6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006fc0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d12a      	bne.n	8007024 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <HAL_ADC_Start+0x198>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d015      	beq.n	8007004 <HAL_ADC_Start+0x11c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a29      	ldr	r2, [pc, #164]	; (8007084 <HAL_ADC_Start+0x19c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d105      	bne.n	8006fee <HAL_ADC_Start+0x106>
 8006fe2:	4b26      	ldr	r3, [pc, #152]	; (800707c <HAL_ADC_Start+0x194>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a25      	ldr	r2, [pc, #148]	; (8007088 <HAL_ADC_Start+0x1a0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d136      	bne.n	8007066 <HAL_ADC_Start+0x17e>
 8006ff8:	4b20      	ldr	r3, [pc, #128]	; (800707c <HAL_ADC_Start+0x194>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b00      	cmp	r3, #0
 8007002:	d130      	bne.n	8007066 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d129      	bne.n	8007066 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007020:	609a      	str	r2, [r3, #8]
 8007022:	e020      	b.n	8007066 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a15      	ldr	r2, [pc, #84]	; (8007080 <HAL_ADC_Start+0x198>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d11b      	bne.n	8007066 <HAL_ADC_Start+0x17e>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d114      	bne.n	8007066 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800704a:	609a      	str	r2, [r3, #8]
 800704c:	e00b      	b.n	8007066 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f043 0210 	orr.w	r2, r3, #16
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705e:	f043 0201 	orr.w	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	20000144 	.word	0x20000144
 8007078:	431bde83 	.word	0x431bde83
 800707c:	40012300 	.word	0x40012300
 8007080:	40012000 	.word	0x40012000
 8007084:	40012100 	.word	0x40012100
 8007088:	40012200 	.word	0x40012200

0800708c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <HAL_ADC_Stop+0x16>
 800709e:	2302      	movs	r3, #2
 80070a0:	e021      	b.n	80070e6 <HAL_ADC_Stop+0x5a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0201 	bic.w	r2, r2, #1
 80070b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d109      	bne.n	80070dc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80070d0:	f023 0301 	bic.w	r3, r3, #1
 80070d4:	f043 0201 	orr.w	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710e:	d113      	bne.n	8007138 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800711a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800711e:	d10b      	bne.n	8007138 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	f043 0220 	orr.w	r2, r3, #32
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e063      	b.n	8007200 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007138:	f7ff fe62 	bl	8006e00 <HAL_GetTick>
 800713c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800713e:	e021      	b.n	8007184 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007146:	d01d      	beq.n	8007184 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d007      	beq.n	800715e <HAL_ADC_PollForConversion+0x6c>
 800714e:	f7ff fe57 	bl	8006e00 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d212      	bcs.n	8007184 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b02      	cmp	r3, #2
 800716a:	d00b      	beq.n	8007184 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	f043 0204 	orr.w	r2, r3, #4
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e03d      	b.n	8007200 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b02      	cmp	r3, #2
 8007190:	d1d6      	bne.n	8007140 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0212 	mvn.w	r2, #18
 800719a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d123      	bne.n	80071fe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d11f      	bne.n	80071fe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d006      	beq.n	80071da <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d111      	bne.n	80071fe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d105      	bne.n	80071fe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f043 0201 	orr.w	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007216:	4618      	mov	r0, r3
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_ADC_ConfigChannel+0x1c>
 800723c:	2302      	movs	r3, #2
 800723e:	e105      	b.n	800744c <HAL_ADC_ConfigChannel+0x228>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b09      	cmp	r3, #9
 800724e:	d925      	bls.n	800729c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68d9      	ldr	r1, [r3, #12]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	461a      	mov	r2, r3
 800725e:	4613      	mov	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4413      	add	r3, r2
 8007264:	3b1e      	subs	r3, #30
 8007266:	2207      	movs	r2, #7
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	43da      	mvns	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	400a      	ands	r2, r1
 8007274:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68d9      	ldr	r1, [r3, #12]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	4618      	mov	r0, r3
 8007288:	4603      	mov	r3, r0
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	4403      	add	r3, r0
 800728e:	3b1e      	subs	r3, #30
 8007290:	409a      	lsls	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	e022      	b.n	80072e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6919      	ldr	r1, [r3, #16]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	2207      	movs	r2, #7
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	43da      	mvns	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	400a      	ands	r2, r1
 80072be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6919      	ldr	r1, [r3, #16]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	4618      	mov	r0, r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	4403      	add	r3, r0
 80072d8:	409a      	lsls	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b06      	cmp	r3, #6
 80072e8:	d824      	bhi.n	8007334 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	3b05      	subs	r3, #5
 80072fc:	221f      	movs	r2, #31
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	43da      	mvns	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	400a      	ands	r2, r1
 800730a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	4618      	mov	r0, r3
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	3b05      	subs	r3, #5
 8007326:	fa00 f203 	lsl.w	r2, r0, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	635a      	str	r2, [r3, #52]	; 0x34
 8007332:	e04c      	b.n	80073ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b0c      	cmp	r3, #12
 800733a:	d824      	bhi.n	8007386 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	3b23      	subs	r3, #35	; 0x23
 800734e:	221f      	movs	r2, #31
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	43da      	mvns	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	400a      	ands	r2, r1
 800735c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	4618      	mov	r0, r3
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	3b23      	subs	r3, #35	; 0x23
 8007378:	fa00 f203 	lsl.w	r2, r0, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
 8007384:	e023      	b.n	80073ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	3b41      	subs	r3, #65	; 0x41
 8007398:	221f      	movs	r2, #31
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	43da      	mvns	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	400a      	ands	r2, r1
 80073a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4618      	mov	r0, r3
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	3b41      	subs	r3, #65	; 0x41
 80073c2:	fa00 f203 	lsl.w	r2, r0, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073ce:	4b22      	ldr	r3, [pc, #136]	; (8007458 <HAL_ADC_ConfigChannel+0x234>)
 80073d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a21      	ldr	r2, [pc, #132]	; (800745c <HAL_ADC_ConfigChannel+0x238>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d109      	bne.n	80073f0 <HAL_ADC_ConfigChannel+0x1cc>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b12      	cmp	r3, #18
 80073e2:	d105      	bne.n	80073f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a19      	ldr	r2, [pc, #100]	; (800745c <HAL_ADC_ConfigChannel+0x238>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d123      	bne.n	8007442 <HAL_ADC_ConfigChannel+0x21e>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d003      	beq.n	800740a <HAL_ADC_ConfigChannel+0x1e6>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b11      	cmp	r3, #17
 8007408:	d11b      	bne.n	8007442 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b10      	cmp	r3, #16
 800741c:	d111      	bne.n	8007442 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800741e:	4b10      	ldr	r3, [pc, #64]	; (8007460 <HAL_ADC_ConfigChannel+0x23c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a10      	ldr	r2, [pc, #64]	; (8007464 <HAL_ADC_ConfigChannel+0x240>)
 8007424:	fba2 2303 	umull	r2, r3, r2, r3
 8007428:	0c9a      	lsrs	r2, r3, #18
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007434:	e002      	b.n	800743c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	3b01      	subs	r3, #1
 800743a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f9      	bne.n	8007436 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40012300 	.word	0x40012300
 800745c:	40012000 	.word	0x40012000
 8007460:	20000144 	.word	0x20000144
 8007464:	431bde83 	.word	0x431bde83

08007468 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007470:	4b79      	ldr	r3, [pc, #484]	; (8007658 <ADC_Init+0x1f0>)
 8007472:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	431a      	orrs	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800749c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6859      	ldr	r1, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	021a      	lsls	r2, r3, #8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80074c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6859      	ldr	r1, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6899      	ldr	r1, [r3, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	4a58      	ldr	r2, [pc, #352]	; (800765c <ADC_Init+0x1f4>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d022      	beq.n	8007546 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689a      	ldr	r2, [r3, #8]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800750e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6899      	ldr	r1, [r3, #8]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6899      	ldr	r1, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	e00f      	b.n	8007566 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007564:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0202 	bic.w	r2, r2, #2
 8007574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6899      	ldr	r1, [r3, #8]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7e1b      	ldrb	r3, [r3, #24]
 8007580:	005a      	lsls	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80075b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6859      	ldr	r1, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	3b01      	subs	r3, #1
 80075c0:	035a      	lsls	r2, r3, #13
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	e007      	b.n	80075dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80075ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	051a      	lsls	r2, r3, #20
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6899      	ldr	r1, [r3, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800761e:	025a      	lsls	r2, r3, #9
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6899      	ldr	r1, [r3, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	029a      	lsls	r2, r3, #10
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	609a      	str	r2, [r3, #8]
}
 800764c:	bf00      	nop
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	40012300 	.word	0x40012300
 800765c:	0f000001 	.word	0x0f000001

08007660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800767c:	4013      	ands	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800768c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007692:	4a04      	ldr	r2, [pc, #16]	; (80076a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	60d3      	str	r3, [r2, #12]
}
 8007698:	bf00      	nop
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	e000ed00 	.word	0xe000ed00

080076a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076ac:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <__NVIC_GetPriorityGrouping+0x18>)
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	f003 0307 	and.w	r3, r3, #7
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	e000ed00 	.word	0xe000ed00

080076c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	db0b      	blt.n	80076ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	f003 021f 	and.w	r2, r3, #31
 80076dc:	4907      	ldr	r1, [pc, #28]	; (80076fc <__NVIC_EnableIRQ+0x38>)
 80076de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	2001      	movs	r0, #1
 80076e6:	fa00 f202 	lsl.w	r2, r0, r2
 80076ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	e000e100 	.word	0xe000e100

08007700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	6039      	str	r1, [r7, #0]
 800770a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800770c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007710:	2b00      	cmp	r3, #0
 8007712:	db0a      	blt.n	800772a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	b2da      	uxtb	r2, r3
 8007718:	490c      	ldr	r1, [pc, #48]	; (800774c <__NVIC_SetPriority+0x4c>)
 800771a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800771e:	0112      	lsls	r2, r2, #4
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	440b      	add	r3, r1
 8007724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007728:	e00a      	b.n	8007740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	b2da      	uxtb	r2, r3
 800772e:	4908      	ldr	r1, [pc, #32]	; (8007750 <__NVIC_SetPriority+0x50>)
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	3b04      	subs	r3, #4
 8007738:	0112      	lsls	r2, r2, #4
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	440b      	add	r3, r1
 800773e:	761a      	strb	r2, [r3, #24]
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	e000e100 	.word	0xe000e100
 8007750:	e000ed00 	.word	0xe000ed00

08007754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007754:	b480      	push	{r7}
 8007756:	b089      	sub	sp, #36	; 0x24
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f1c3 0307 	rsb	r3, r3, #7
 800776e:	2b04      	cmp	r3, #4
 8007770:	bf28      	it	cs
 8007772:	2304      	movcs	r3, #4
 8007774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	3304      	adds	r3, #4
 800777a:	2b06      	cmp	r3, #6
 800777c:	d902      	bls.n	8007784 <NVIC_EncodePriority+0x30>
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	3b03      	subs	r3, #3
 8007782:	e000      	b.n	8007786 <NVIC_EncodePriority+0x32>
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	43da      	mvns	r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	401a      	ands	r2, r3
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800779c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	fa01 f303 	lsl.w	r3, r1, r3
 80077a6:	43d9      	mvns	r1, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077ac:	4313      	orrs	r3, r2
         );
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3724      	adds	r7, #36	; 0x24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff ff4c 	bl	8007660 <__NVIC_SetPriorityGrouping>
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80077de:	2300      	movs	r3, #0
 80077e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80077e2:	f7ff ff61 	bl	80076a8 <__NVIC_GetPriorityGrouping>
 80077e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	6978      	ldr	r0, [r7, #20]
 80077ee:	f7ff ffb1 	bl	8007754 <NVIC_EncodePriority>
 80077f2:	4602      	mov	r2, r0
 80077f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff ff80 	bl	8007700 <__NVIC_SetPriority>
}
 8007800:	bf00      	nop
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff ff54 	bl	80076c4 <__NVIC_EnableIRQ>
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007830:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007832:	f7ff fae5 	bl	8006e00 <HAL_GetTick>
 8007836:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d008      	beq.n	8007856 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2280      	movs	r2, #128	; 0x80
 8007848:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e052      	b.n	80078fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0216 	bic.w	r2, r2, #22
 8007864:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007874:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <HAL_DMA_Abort+0x62>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007882:	2b00      	cmp	r3, #0
 8007884:	d007      	beq.n	8007896 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0208 	bic.w	r2, r2, #8
 8007894:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0201 	bic.w	r2, r2, #1
 80078a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078a6:	e013      	b.n	80078d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078a8:	f7ff faaa 	bl	8006e00 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d90c      	bls.n	80078d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2203      	movs	r2, #3
 80078c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e015      	b.n	80078fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e4      	bne.n	80078a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e2:	223f      	movs	r2, #63	; 0x3f
 80078e4:	409a      	lsls	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d004      	beq.n	8007922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2280      	movs	r2, #128	; 0x80
 800791c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e00c      	b.n	800793c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2205      	movs	r2, #5
 8007926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0201 	bic.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007948:	b480      	push	{r7}
 800794a:	b089      	sub	sp, #36	; 0x24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007952:	2300      	movs	r3, #0
 8007954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800795a:	2300      	movs	r3, #0
 800795c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800795e:	2300      	movs	r3, #0
 8007960:	61fb      	str	r3, [r7, #28]
 8007962:	e16b      	b.n	8007c3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007964:	2201      	movs	r2, #1
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4013      	ands	r3, r2
 8007976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	429a      	cmp	r2, r3
 800797e:	f040 815a 	bne.w	8007c36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	2b01      	cmp	r3, #1
 800798c:	d005      	beq.n	800799a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007996:	2b02      	cmp	r3, #2
 8007998:	d130      	bne.n	80079fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	2203      	movs	r2, #3
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	43db      	mvns	r3, r3
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	4013      	ands	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	fa02 f303 	lsl.w	r3, r2, r3
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079d0:	2201      	movs	r2, #1
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	43db      	mvns	r3, r3
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	4013      	ands	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	091b      	lsrs	r3, r3, #4
 80079e6:	f003 0201 	and.w	r2, r3, #1
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d017      	beq.n	8007a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	2203      	movs	r2, #3
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d123      	bne.n	8007a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	08da      	lsrs	r2, r3, #3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3208      	adds	r2, #8
 8007a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	220f      	movs	r2, #15
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	43db      	mvns	r3, r3
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	4013      	ands	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	fa02 f303 	lsl.w	r3, r2, r3
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	08da      	lsrs	r2, r3, #3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3208      	adds	r2, #8
 8007a86:	69b9      	ldr	r1, [r7, #24]
 8007a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	2203      	movs	r2, #3
 8007a98:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9c:	43db      	mvns	r3, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f003 0203 	and.w	r2, r3, #3
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80b4 	beq.w	8007c36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	4b60      	ldr	r3, [pc, #384]	; (8007c54 <HAL_GPIO_Init+0x30c>)
 8007ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad6:	4a5f      	ldr	r2, [pc, #380]	; (8007c54 <HAL_GPIO_Init+0x30c>)
 8007ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007adc:	6453      	str	r3, [r2, #68]	; 0x44
 8007ade:	4b5d      	ldr	r3, [pc, #372]	; (8007c54 <HAL_GPIO_Init+0x30c>)
 8007ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007aea:	4a5b      	ldr	r2, [pc, #364]	; (8007c58 <HAL_GPIO_Init+0x310>)
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	089b      	lsrs	r3, r3, #2
 8007af0:	3302      	adds	r3, #2
 8007af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	220f      	movs	r2, #15
 8007b02:	fa02 f303 	lsl.w	r3, r2, r3
 8007b06:	43db      	mvns	r3, r3
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a52      	ldr	r2, [pc, #328]	; (8007c5c <HAL_GPIO_Init+0x314>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d02b      	beq.n	8007b6e <HAL_GPIO_Init+0x226>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a51      	ldr	r2, [pc, #324]	; (8007c60 <HAL_GPIO_Init+0x318>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d025      	beq.n	8007b6a <HAL_GPIO_Init+0x222>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a50      	ldr	r2, [pc, #320]	; (8007c64 <HAL_GPIO_Init+0x31c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d01f      	beq.n	8007b66 <HAL_GPIO_Init+0x21e>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a4f      	ldr	r2, [pc, #316]	; (8007c68 <HAL_GPIO_Init+0x320>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d019      	beq.n	8007b62 <HAL_GPIO_Init+0x21a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a4e      	ldr	r2, [pc, #312]	; (8007c6c <HAL_GPIO_Init+0x324>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_GPIO_Init+0x216>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a4d      	ldr	r2, [pc, #308]	; (8007c70 <HAL_GPIO_Init+0x328>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00d      	beq.n	8007b5a <HAL_GPIO_Init+0x212>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a4c      	ldr	r2, [pc, #304]	; (8007c74 <HAL_GPIO_Init+0x32c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d007      	beq.n	8007b56 <HAL_GPIO_Init+0x20e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a4b      	ldr	r2, [pc, #300]	; (8007c78 <HAL_GPIO_Init+0x330>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d101      	bne.n	8007b52 <HAL_GPIO_Init+0x20a>
 8007b4e:	2307      	movs	r3, #7
 8007b50:	e00e      	b.n	8007b70 <HAL_GPIO_Init+0x228>
 8007b52:	2308      	movs	r3, #8
 8007b54:	e00c      	b.n	8007b70 <HAL_GPIO_Init+0x228>
 8007b56:	2306      	movs	r3, #6
 8007b58:	e00a      	b.n	8007b70 <HAL_GPIO_Init+0x228>
 8007b5a:	2305      	movs	r3, #5
 8007b5c:	e008      	b.n	8007b70 <HAL_GPIO_Init+0x228>
 8007b5e:	2304      	movs	r3, #4
 8007b60:	e006      	b.n	8007b70 <HAL_GPIO_Init+0x228>
 8007b62:	2303      	movs	r3, #3
 8007b64:	e004      	b.n	8007b70 <HAL_GPIO_Init+0x228>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e002      	b.n	8007b70 <HAL_GPIO_Init+0x228>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <HAL_GPIO_Init+0x228>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	69fa      	ldr	r2, [r7, #28]
 8007b72:	f002 0203 	and.w	r2, r2, #3
 8007b76:	0092      	lsls	r2, r2, #2
 8007b78:	4093      	lsls	r3, r2
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b80:	4935      	ldr	r1, [pc, #212]	; (8007c58 <HAL_GPIO_Init+0x310>)
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	089b      	lsrs	r3, r3, #2
 8007b86:	3302      	adds	r3, #2
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b8e:	4b3b      	ldr	r3, [pc, #236]	; (8007c7c <HAL_GPIO_Init+0x334>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	43db      	mvns	r3, r3
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bb2:	4a32      	ldr	r2, [pc, #200]	; (8007c7c <HAL_GPIO_Init+0x334>)
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bb8:	4b30      	ldr	r3, [pc, #192]	; (8007c7c <HAL_GPIO_Init+0x334>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bdc:	4a27      	ldr	r2, [pc, #156]	; (8007c7c <HAL_GPIO_Init+0x334>)
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007be2:	4b26      	ldr	r3, [pc, #152]	; (8007c7c <HAL_GPIO_Init+0x334>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	43db      	mvns	r3, r3
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c06:	4a1d      	ldr	r2, [pc, #116]	; (8007c7c <HAL_GPIO_Init+0x334>)
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c0c:	4b1b      	ldr	r3, [pc, #108]	; (8007c7c <HAL_GPIO_Init+0x334>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	43db      	mvns	r3, r3
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c30:	4a12      	ldr	r2, [pc, #72]	; (8007c7c <HAL_GPIO_Init+0x334>)
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	2b0f      	cmp	r3, #15
 8007c40:	f67f ae90 	bls.w	8007964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	3724      	adds	r7, #36	; 0x24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40023800 	.word	0x40023800
 8007c58:	40013800 	.word	0x40013800
 8007c5c:	40020000 	.word	0x40020000
 8007c60:	40020400 	.word	0x40020400
 8007c64:	40020800 	.word	0x40020800
 8007c68:	40020c00 	.word	0x40020c00
 8007c6c:	40021000 	.word	0x40021000
 8007c70:	40021400 	.word	0x40021400
 8007c74:	40021800 	.word	0x40021800
 8007c78:	40021c00 	.word	0x40021c00
 8007c7c:	40013c00 	.word	0x40013c00

08007c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	807b      	strh	r3, [r7, #2]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c90:	787b      	ldrb	r3, [r7, #1]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c96:	887a      	ldrh	r2, [r7, #2]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c9c:	e003      	b.n	8007ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c9e:	887b      	ldrh	r3, [r7, #2]
 8007ca0:	041a      	lsls	r2, r3, #16
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	619a      	str	r2, [r3, #24]
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e12b      	b.n	8007f1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7fe fd60 	bl	80067a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2224      	movs	r2, #36	; 0x24
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0201 	bic.w	r2, r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d18:	f001 fbe4 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 8007d1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	4a81      	ldr	r2, [pc, #516]	; (8007f28 <HAL_I2C_Init+0x274>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d807      	bhi.n	8007d38 <HAL_I2C_Init+0x84>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4a80      	ldr	r2, [pc, #512]	; (8007f2c <HAL_I2C_Init+0x278>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	bf94      	ite	ls
 8007d30:	2301      	movls	r3, #1
 8007d32:	2300      	movhi	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	e006      	b.n	8007d46 <HAL_I2C_Init+0x92>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4a7d      	ldr	r2, [pc, #500]	; (8007f30 <HAL_I2C_Init+0x27c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	bf94      	ite	ls
 8007d40:	2301      	movls	r3, #1
 8007d42:	2300      	movhi	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e0e7      	b.n	8007f1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4a78      	ldr	r2, [pc, #480]	; (8007f34 <HAL_I2C_Init+0x280>)
 8007d52:	fba2 2303 	umull	r2, r3, r2, r3
 8007d56:	0c9b      	lsrs	r3, r3, #18
 8007d58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	4a6a      	ldr	r2, [pc, #424]	; (8007f28 <HAL_I2C_Init+0x274>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d802      	bhi.n	8007d88 <HAL_I2C_Init+0xd4>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	3301      	adds	r3, #1
 8007d86:	e009      	b.n	8007d9c <HAL_I2C_Init+0xe8>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d8e:	fb02 f303 	mul.w	r3, r2, r3
 8007d92:	4a69      	ldr	r2, [pc, #420]	; (8007f38 <HAL_I2C_Init+0x284>)
 8007d94:	fba2 2303 	umull	r2, r3, r2, r3
 8007d98:	099b      	lsrs	r3, r3, #6
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6812      	ldr	r2, [r2, #0]
 8007da0:	430b      	orrs	r3, r1
 8007da2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007dae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	495c      	ldr	r1, [pc, #368]	; (8007f28 <HAL_I2C_Init+0x274>)
 8007db8:	428b      	cmp	r3, r1
 8007dba:	d819      	bhi.n	8007df0 <HAL_I2C_Init+0x13c>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	1e59      	subs	r1, r3, #1
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007dca:	1c59      	adds	r1, r3, #1
 8007dcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007dd0:	400b      	ands	r3, r1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <HAL_I2C_Init+0x138>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	1e59      	subs	r1, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007de4:	3301      	adds	r3, #1
 8007de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dea:	e051      	b.n	8007e90 <HAL_I2C_Init+0x1dc>
 8007dec:	2304      	movs	r3, #4
 8007dee:	e04f      	b.n	8007e90 <HAL_I2C_Init+0x1dc>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d111      	bne.n	8007e1c <HAL_I2C_Init+0x168>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	1e58      	subs	r0, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6859      	ldr	r1, [r3, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	440b      	add	r3, r1
 8007e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bf0c      	ite	eq
 8007e14:	2301      	moveq	r3, #1
 8007e16:	2300      	movne	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	e012      	b.n	8007e42 <HAL_I2C_Init+0x18e>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	1e58      	subs	r0, r3, #1
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6859      	ldr	r1, [r3, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	0099      	lsls	r1, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e32:	3301      	adds	r3, #1
 8007e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bf0c      	ite	eq
 8007e3c:	2301      	moveq	r3, #1
 8007e3e:	2300      	movne	r3, #0
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <HAL_I2C_Init+0x196>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e022      	b.n	8007e90 <HAL_I2C_Init+0x1dc>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10e      	bne.n	8007e70 <HAL_I2C_Init+0x1bc>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	1e58      	subs	r0, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6859      	ldr	r1, [r3, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	440b      	add	r3, r1
 8007e60:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e64:	3301      	adds	r3, #1
 8007e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e6e:	e00f      	b.n	8007e90 <HAL_I2C_Init+0x1dc>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	1e58      	subs	r0, r3, #1
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6859      	ldr	r1, [r3, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	0099      	lsls	r1, r3, #2
 8007e80:	440b      	add	r3, r1
 8007e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e86:	3301      	adds	r3, #1
 8007e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	6809      	ldr	r1, [r1, #0]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69da      	ldr	r2, [r3, #28]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ebe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6911      	ldr	r1, [r2, #16]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	68d2      	ldr	r2, [r2, #12]
 8007eca:	4311      	orrs	r1, r2
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695a      	ldr	r2, [r3, #20]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	000186a0 	.word	0x000186a0
 8007f2c:	001e847f 	.word	0x001e847f
 8007f30:	003d08ff 	.word	0x003d08ff
 8007f34:	431bde83 	.word	0x431bde83
 8007f38:	10624dd3 	.word	0x10624dd3

08007f3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	4608      	mov	r0, r1
 8007f46:	4611      	mov	r1, r2
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	817b      	strh	r3, [r7, #10]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	813b      	strh	r3, [r7, #8]
 8007f52:	4613      	mov	r3, r2
 8007f54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f56:	f7fe ff53 	bl	8006e00 <HAL_GetTick>
 8007f5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	f040 80d9 	bne.w	800811c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	2319      	movs	r3, #25
 8007f70:	2201      	movs	r2, #1
 8007f72:	496d      	ldr	r1, [pc, #436]	; (8008128 <HAL_I2C_Mem_Write+0x1ec>)
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 fc7f 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007f80:	2302      	movs	r3, #2
 8007f82:	e0cc      	b.n	800811e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_I2C_Mem_Write+0x56>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e0c5      	b.n	800811e <HAL_I2C_Mem_Write+0x1e2>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d007      	beq.n	8007fb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2221      	movs	r2, #33	; 0x21
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2240      	movs	r2, #64	; 0x40
 8007fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a3a      	ldr	r2, [r7, #32]
 8007fe2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4a4d      	ldr	r2, [pc, #308]	; (800812c <HAL_I2C_Mem_Write+0x1f0>)
 8007ff8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ffa:	88f8      	ldrh	r0, [r7, #6]
 8007ffc:	893a      	ldrh	r2, [r7, #8]
 8007ffe:	8979      	ldrh	r1, [r7, #10]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	4603      	mov	r3, r0
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fab6 	bl	800857c <I2C_RequestMemoryWrite>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d052      	beq.n	80080bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e081      	b.n	800811e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 fd00 	bl	8008a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00d      	beq.n	8008046 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	2b04      	cmp	r3, #4
 8008030:	d107      	bne.n	8008042 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e06b      	b.n	800811e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	781a      	ldrb	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800806c:	b29b      	uxth	r3, r3
 800806e:	3b01      	subs	r3, #1
 8008070:	b29a      	uxth	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b04      	cmp	r3, #4
 8008082:	d11b      	bne.n	80080bc <HAL_I2C_Mem_Write+0x180>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008088:	2b00      	cmp	r3, #0
 800808a:	d017      	beq.n	80080bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	781a      	ldrb	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1aa      	bne.n	800801a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fcec 	bl	8008aa6 <I2C_WaitOnBTFFlagUntilTimeout>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00d      	beq.n	80080f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d107      	bne.n	80080ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e016      	b.n	800811e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	e000      	b.n	800811e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800811c:	2302      	movs	r3, #2
  }
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	00100002 	.word	0x00100002
 800812c:	ffff0000 	.word	0xffff0000

08008130 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08c      	sub	sp, #48	; 0x30
 8008134:	af02      	add	r7, sp, #8
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	461a      	mov	r2, r3
 800813e:	4603      	mov	r3, r0
 8008140:	817b      	strh	r3, [r7, #10]
 8008142:	460b      	mov	r3, r1
 8008144:	813b      	strh	r3, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800814a:	f7fe fe59 	bl	8006e00 <HAL_GetTick>
 800814e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b20      	cmp	r3, #32
 800815a:	f040 8208 	bne.w	800856e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	2319      	movs	r3, #25
 8008164:	2201      	movs	r2, #1
 8008166:	497b      	ldr	r1, [pc, #492]	; (8008354 <HAL_I2C_Mem_Read+0x224>)
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fb85 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
 8008176:	e1fb      	b.n	8008570 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <HAL_I2C_Mem_Read+0x56>
 8008182:	2302      	movs	r3, #2
 8008184:	e1f4      	b.n	8008570 <HAL_I2C_Mem_Read+0x440>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d007      	beq.n	80081ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0201 	orr.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2222      	movs	r2, #34	; 0x22
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2240      	movs	r2, #64	; 0x40
 80081c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80081dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4a5b      	ldr	r2, [pc, #364]	; (8008358 <HAL_I2C_Mem_Read+0x228>)
 80081ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081ee:	88f8      	ldrh	r0, [r7, #6]
 80081f0:	893a      	ldrh	r2, [r7, #8]
 80081f2:	8979      	ldrh	r1, [r7, #10]
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	4603      	mov	r3, r0
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 fa52 	bl	80086a8 <I2C_RequestMemoryRead>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e1b0      	b.n	8008570 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008212:	2b00      	cmp	r3, #0
 8008214:	d113      	bne.n	800823e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008216:	2300      	movs	r3, #0
 8008218:	623b      	str	r3, [r7, #32]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	623b      	str	r3, [r7, #32]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	623b      	str	r3, [r7, #32]
 800822a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	e184      	b.n	8008548 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008242:	2b01      	cmp	r3, #1
 8008244:	d11b      	bne.n	800827e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008254:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008256:	2300      	movs	r3, #0
 8008258:	61fb      	str	r3, [r7, #28]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	61fb      	str	r3, [r7, #28]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	61fb      	str	r3, [r7, #28]
 800826a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	e164      	b.n	8008548 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008282:	2b02      	cmp	r3, #2
 8008284:	d11b      	bne.n	80082be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008294:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082a6:	2300      	movs	r3, #0
 80082a8:	61bb      	str	r3, [r7, #24]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	61bb      	str	r3, [r7, #24]
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	e144      	b.n	8008548 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082be:	2300      	movs	r3, #0
 80082c0:	617b      	str	r3, [r7, #20]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	617b      	str	r3, [r7, #20]
 80082d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80082d4:	e138      	b.n	8008548 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082da:	2b03      	cmp	r3, #3
 80082dc:	f200 80f1 	bhi.w	80084c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d123      	bne.n	8008330 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fc1b 	bl	8008b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e139      	b.n	8008570 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	691a      	ldr	r2, [r3, #16]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	1c5a      	adds	r2, r3, #1
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008318:	3b01      	subs	r3, #1
 800831a:	b29a      	uxth	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800832e:	e10b      	b.n	8008548 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008334:	2b02      	cmp	r3, #2
 8008336:	d14e      	bne.n	80083d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	2200      	movs	r2, #0
 8008340:	4906      	ldr	r1, [pc, #24]	; (800835c <HAL_I2C_Mem_Read+0x22c>)
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 fa98 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d008      	beq.n	8008360 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e10e      	b.n	8008570 <HAL_I2C_Mem_Read+0x440>
 8008352:	bf00      	nop
 8008354:	00100002 	.word	0x00100002
 8008358:	ffff0000 	.word	0xffff0000
 800835c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800836e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691a      	ldr	r2, [r3, #16]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	b2d2      	uxtb	r2, r2
 80083ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083be:	3b01      	subs	r3, #1
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	3b01      	subs	r3, #1
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083d4:	e0b8      	b.n	8008548 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	2200      	movs	r2, #0
 80083de:	4966      	ldr	r1, [pc, #408]	; (8008578 <HAL_I2C_Mem_Read+0x448>)
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 fa49 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e0bf      	b.n	8008570 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	b2d2      	uxtb	r2, r2
 800840c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008428:	b29b      	uxth	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	b29a      	uxth	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	2200      	movs	r2, #0
 800843a:	494f      	ldr	r1, [pc, #316]	; (8008578 <HAL_I2C_Mem_Read+0x448>)
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 fa1b 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e091      	b.n	8008570 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800845a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691a      	ldr	r2, [r3, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008478:	3b01      	subs	r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691a      	ldr	r2, [r3, #16]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	3b01      	subs	r3, #1
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084c0:	e042      	b.n	8008548 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fb2e 	bl	8008b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e04c      	b.n	8008570 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	691a      	ldr	r2, [r3, #16]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f2:	3b01      	subs	r3, #1
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084fe:	b29b      	uxth	r3, r3
 8008500:	3b01      	subs	r3, #1
 8008502:	b29a      	uxth	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b04      	cmp	r3, #4
 8008514:	d118      	bne.n	8008548 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	691a      	ldr	r2, [r3, #16]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	b2d2      	uxtb	r2, r2
 8008522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008532:	3b01      	subs	r3, #1
 8008534:	b29a      	uxth	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853e:	b29b      	uxth	r3, r3
 8008540:	3b01      	subs	r3, #1
 8008542:	b29a      	uxth	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800854c:	2b00      	cmp	r3, #0
 800854e:	f47f aec2 	bne.w	80082d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2220      	movs	r2, #32
 8008556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	e000      	b.n	8008570 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800856e:	2302      	movs	r3, #2
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3728      	adds	r7, #40	; 0x28
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	00010004 	.word	0x00010004

0800857c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af02      	add	r7, sp, #8
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	4608      	mov	r0, r1
 8008586:	4611      	mov	r1, r2
 8008588:	461a      	mov	r2, r3
 800858a:	4603      	mov	r3, r0
 800858c:	817b      	strh	r3, [r7, #10]
 800858e:	460b      	mov	r3, r1
 8008590:	813b      	strh	r3, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f960 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00d      	beq.n	80085da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085cc:	d103      	bne.n	80085d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e05f      	b.n	800869a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085da:	897b      	ldrh	r3, [r7, #10]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	6a3a      	ldr	r2, [r7, #32]
 80085ee:	492d      	ldr	r1, [pc, #180]	; (80086a4 <I2C_RequestMemoryWrite+0x128>)
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 f998 	bl	8008926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e04c      	b.n	800869a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008618:	6a39      	ldr	r1, [r7, #32]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 fa02 	bl	8008a24 <I2C_WaitOnTXEFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00d      	beq.n	8008642 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	2b04      	cmp	r3, #4
 800862c:	d107      	bne.n	800863e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800863c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e02b      	b.n	800869a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d105      	bne.n	8008654 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008648:	893b      	ldrh	r3, [r7, #8]
 800864a:	b2da      	uxtb	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	611a      	str	r2, [r3, #16]
 8008652:	e021      	b.n	8008698 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008654:	893b      	ldrh	r3, [r7, #8]
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	b29b      	uxth	r3, r3
 800865a:	b2da      	uxtb	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008664:	6a39      	ldr	r1, [r7, #32]
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 f9dc 	bl	8008a24 <I2C_WaitOnTXEFlagUntilTimeout>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00d      	beq.n	800868e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	2b04      	cmp	r3, #4
 8008678:	d107      	bne.n	800868a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008688:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e005      	b.n	800869a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800868e:	893b      	ldrh	r3, [r7, #8]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	00010002 	.word	0x00010002

080086a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	4608      	mov	r0, r1
 80086b2:	4611      	mov	r1, r2
 80086b4:	461a      	mov	r2, r3
 80086b6:	4603      	mov	r3, r0
 80086b8:	817b      	strh	r3, [r7, #10]
 80086ba:	460b      	mov	r3, r1
 80086bc:	813b      	strh	r3, [r7, #8]
 80086be:	4613      	mov	r3, r2
 80086c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f8c2 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00d      	beq.n	8008716 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008708:	d103      	bne.n	8008712 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008710:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e0aa      	b.n	800886c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008716:	897b      	ldrh	r3, [r7, #10]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008724:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	6a3a      	ldr	r2, [r7, #32]
 800872a:	4952      	ldr	r1, [pc, #328]	; (8008874 <I2C_RequestMemoryRead+0x1cc>)
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f8fa 	bl	8008926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e097      	b.n	800886c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008754:	6a39      	ldr	r1, [r7, #32]
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f964 	bl	8008a24 <I2C_WaitOnTXEFlagUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00d      	beq.n	800877e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	2b04      	cmp	r3, #4
 8008768:	d107      	bne.n	800877a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008778:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e076      	b.n	800886c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800877e:	88fb      	ldrh	r3, [r7, #6]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d105      	bne.n	8008790 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008784:	893b      	ldrh	r3, [r7, #8]
 8008786:	b2da      	uxtb	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	611a      	str	r2, [r3, #16]
 800878e:	e021      	b.n	80087d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008790:	893b      	ldrh	r3, [r7, #8]
 8008792:	0a1b      	lsrs	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	b2da      	uxtb	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800879e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a0:	6a39      	ldr	r1, [r7, #32]
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 f93e 	bl	8008a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00d      	beq.n	80087ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d107      	bne.n	80087c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e050      	b.n	800886c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087ca:	893b      	ldrh	r3, [r7, #8]
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d6:	6a39      	ldr	r1, [r7, #32]
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 f923 	bl	8008a24 <I2C_WaitOnTXEFlagUntilTimeout>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00d      	beq.n	8008800 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d107      	bne.n	80087fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e035      	b.n	800886c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800880e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	2200      	movs	r2, #0
 8008818:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 f82b 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00d      	beq.n	8008844 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008836:	d103      	bne.n	8008840 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800883e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e013      	b.n	800886c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008844:	897b      	ldrh	r3, [r7, #10]
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f043 0301 	orr.w	r3, r3, #1
 800884c:	b2da      	uxtb	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	6a3a      	ldr	r2, [r7, #32]
 8008858:	4906      	ldr	r1, [pc, #24]	; (8008874 <I2C_RequestMemoryRead+0x1cc>)
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f863 	bl	8008926 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	00010002 	.word	0x00010002

08008878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	4613      	mov	r3, r2
 8008886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008888:	e025      	b.n	80088d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008890:	d021      	beq.n	80088d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008892:	f7fe fab5 	bl	8006e00 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d302      	bcc.n	80088a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d116      	bne.n	80088d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	f043 0220 	orr.w	r2, r3, #32
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e023      	b.n	800891e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	0c1b      	lsrs	r3, r3, #16
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d10d      	bne.n	80088fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	43da      	mvns	r2, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	4013      	ands	r3, r2
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bf0c      	ite	eq
 80088f2:	2301      	moveq	r3, #1
 80088f4:	2300      	movne	r3, #0
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	e00c      	b.n	8008916 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	43da      	mvns	r2, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4013      	ands	r3, r2
 8008908:	b29b      	uxth	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	bf0c      	ite	eq
 800890e:	2301      	moveq	r3, #1
 8008910:	2300      	movne	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	429a      	cmp	r2, r3
 800891a:	d0b6      	beq.n	800888a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
 8008932:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008934:	e051      	b.n	80089da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008944:	d123      	bne.n	800898e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008954:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800895e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	f043 0204 	orr.w	r2, r3, #4
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e046      	b.n	8008a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008994:	d021      	beq.n	80089da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008996:	f7fe fa33 	bl	8006e00 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d302      	bcc.n	80089ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d116      	bne.n	80089da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	f043 0220 	orr.w	r2, r3, #32
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e020      	b.n	8008a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	0c1b      	lsrs	r3, r3, #16
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d10c      	bne.n	80089fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	43da      	mvns	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4013      	ands	r3, r2
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	bf14      	ite	ne
 80089f6:	2301      	movne	r3, #1
 80089f8:	2300      	moveq	r3, #0
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	e00b      	b.n	8008a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	43da      	mvns	r2, r3
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	4013      	ands	r3, r2
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	bf14      	ite	ne
 8008a10:	2301      	movne	r3, #1
 8008a12:	2300      	moveq	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d18d      	bne.n	8008936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a30:	e02d      	b.n	8008a8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 f8ce 	bl	8008bd4 <I2C_IsAcknowledgeFailed>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e02d      	b.n	8008a9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a48:	d021      	beq.n	8008a8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a4a:	f7fe f9d9 	bl	8006e00 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d302      	bcc.n	8008a60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d116      	bne.n	8008a8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	f043 0220 	orr.w	r2, r3, #32
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e007      	b.n	8008a9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a98:	2b80      	cmp	r3, #128	; 0x80
 8008a9a:	d1ca      	bne.n	8008a32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ab2:	e02d      	b.n	8008b10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f88d 	bl	8008bd4 <I2C_IsAcknowledgeFailed>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e02d      	b.n	8008b20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aca:	d021      	beq.n	8008b10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008acc:	f7fe f998 	bl	8006e00 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d302      	bcc.n	8008ae2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d116      	bne.n	8008b10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	f043 0220 	orr.w	r2, r3, #32
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e007      	b.n	8008b20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	f003 0304 	and.w	r3, r3, #4
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	d1ca      	bne.n	8008ab4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b34:	e042      	b.n	8008bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	f003 0310 	and.w	r3, r3, #16
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	d119      	bne.n	8008b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0210 	mvn.w	r2, #16
 8008b4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e029      	b.n	8008bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b78:	f7fe f942 	bl	8006e00 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d302      	bcc.n	8008b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d116      	bne.n	8008bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba8:	f043 0220 	orr.w	r2, r3, #32
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e007      	b.n	8008bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc6:	2b40      	cmp	r3, #64	; 0x40
 8008bc8:	d1b5      	bne.n	8008b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bea:	d11b      	bne.n	8008c24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bf4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c10:	f043 0204 	orr.w	r2, r3, #4
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e000      	b.n	8008c26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
	...

08008c34 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008c40:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008c46:	687b      	ldr	r3, [r7, #4]
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	420e0020 	.word	0x420e0020
 8008c58:	40007000 	.word	0x40007000

08008c5c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008c62:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <HAL_PWR_DisableBkUpAccess+0x20>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008c68:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <HAL_PWR_DisableBkUpAccess+0x24>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008c6e:	687b      	ldr	r3, [r7, #4]
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	420e0020 	.word	0x420e0020
 8008c80:	40007000 	.word	0x40007000

08008c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e267      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d075      	beq.n	8008d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ca2:	4b88      	ldr	r3, [pc, #544]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 030c 	and.w	r3, r3, #12
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d00c      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cae:	4b85      	ldr	r3, [pc, #532]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	d112      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cba:	4b82      	ldr	r3, [pc, #520]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cc6:	d10b      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cc8:	4b7e      	ldr	r3, [pc, #504]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d05b      	beq.n	8008d8c <HAL_RCC_OscConfig+0x108>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d157      	bne.n	8008d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e242      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce8:	d106      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x74>
 8008cea:	4b76      	ldr	r3, [pc, #472]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a75      	ldr	r2, [pc, #468]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	e01d      	b.n	8008d34 <HAL_RCC_OscConfig+0xb0>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d00:	d10c      	bne.n	8008d1c <HAL_RCC_OscConfig+0x98>
 8008d02:	4b70      	ldr	r3, [pc, #448]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a6f      	ldr	r2, [pc, #444]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	4b6d      	ldr	r3, [pc, #436]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a6c      	ldr	r2, [pc, #432]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	e00b      	b.n	8008d34 <HAL_RCC_OscConfig+0xb0>
 8008d1c:	4b69      	ldr	r3, [pc, #420]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a68      	ldr	r2, [pc, #416]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	4b66      	ldr	r3, [pc, #408]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a65      	ldr	r2, [pc, #404]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d013      	beq.n	8008d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d3c:	f7fe f860 	bl	8006e00 <HAL_GetTick>
 8008d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d42:	e008      	b.n	8008d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d44:	f7fe f85c 	bl	8006e00 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b64      	cmp	r3, #100	; 0x64
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e207      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d56:	4b5b      	ldr	r3, [pc, #364]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0f0      	beq.n	8008d44 <HAL_RCC_OscConfig+0xc0>
 8008d62:	e014      	b.n	8008d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d64:	f7fe f84c 	bl	8006e00 <HAL_GetTick>
 8008d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d6c:	f7fe f848 	bl	8006e00 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b64      	cmp	r3, #100	; 0x64
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e1f3      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d7e:	4b51      	ldr	r3, [pc, #324]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f0      	bne.n	8008d6c <HAL_RCC_OscConfig+0xe8>
 8008d8a:	e000      	b.n	8008d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d063      	beq.n	8008e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d9a:	4b4a      	ldr	r3, [pc, #296]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f003 030c 	and.w	r3, r3, #12
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00b      	beq.n	8008dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008da6:	4b47      	ldr	r3, [pc, #284]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008dae:	2b08      	cmp	r3, #8
 8008db0:	d11c      	bne.n	8008dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008db2:	4b44      	ldr	r3, [pc, #272]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d116      	bne.n	8008dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dbe:	4b41      	ldr	r3, [pc, #260]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x152>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d001      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e1c7      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dd6:	4b3b      	ldr	r3, [pc, #236]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4937      	ldr	r1, [pc, #220]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dea:	e03a      	b.n	8008e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d020      	beq.n	8008e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008df4:	4b34      	ldr	r3, [pc, #208]	; (8008ec8 <HAL_RCC_OscConfig+0x244>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dfa:	f7fe f801 	bl	8006e00 <HAL_GetTick>
 8008dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e00:	e008      	b.n	8008e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e02:	f7fd fffd 	bl	8006e00 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d901      	bls.n	8008e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e1a8      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e14:	4b2b      	ldr	r3, [pc, #172]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0f0      	beq.n	8008e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e20:	4b28      	ldr	r3, [pc, #160]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	00db      	lsls	r3, r3, #3
 8008e2e:	4925      	ldr	r1, [pc, #148]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	600b      	str	r3, [r1, #0]
 8008e34:	e015      	b.n	8008e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e36:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <HAL_RCC_OscConfig+0x244>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e3c:	f7fd ffe0 	bl	8006e00 <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e44:	f7fd ffdc 	bl	8006e00 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e187      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e56:	4b1b      	ldr	r3, [pc, #108]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1f0      	bne.n	8008e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0308 	and.w	r3, r3, #8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d036      	beq.n	8008edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d016      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e76:	4b15      	ldr	r3, [pc, #84]	; (8008ecc <HAL_RCC_OscConfig+0x248>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e7c:	f7fd ffc0 	bl	8006e00 <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e84:	f7fd ffbc 	bl	8006e00 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e167      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e96:	4b0b      	ldr	r3, [pc, #44]	; (8008ec4 <HAL_RCC_OscConfig+0x240>)
 8008e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0f0      	beq.n	8008e84 <HAL_RCC_OscConfig+0x200>
 8008ea2:	e01b      	b.n	8008edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ea4:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <HAL_RCC_OscConfig+0x248>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eaa:	f7fd ffa9 	bl	8006e00 <HAL_GetTick>
 8008eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008eb0:	e00e      	b.n	8008ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008eb2:	f7fd ffa5 	bl	8006e00 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d907      	bls.n	8008ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e150      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
 8008ec4:	40023800 	.word	0x40023800
 8008ec8:	42470000 	.word	0x42470000
 8008ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ed0:	4b88      	ldr	r3, [pc, #544]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1ea      	bne.n	8008eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 8097 	beq.w	8009018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008eea:	2300      	movs	r3, #0
 8008eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008eee:	4b81      	ldr	r3, [pc, #516]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10f      	bne.n	8008f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008efa:	2300      	movs	r3, #0
 8008efc:	60bb      	str	r3, [r7, #8]
 8008efe:	4b7d      	ldr	r3, [pc, #500]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	4a7c      	ldr	r2, [pc, #496]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f08:	6413      	str	r3, [r2, #64]	; 0x40
 8008f0a:	4b7a      	ldr	r3, [pc, #488]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f12:	60bb      	str	r3, [r7, #8]
 8008f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f16:	2301      	movs	r3, #1
 8008f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f1a:	4b77      	ldr	r3, [pc, #476]	; (80090f8 <HAL_RCC_OscConfig+0x474>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d118      	bne.n	8008f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f26:	4b74      	ldr	r3, [pc, #464]	; (80090f8 <HAL_RCC_OscConfig+0x474>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a73      	ldr	r2, [pc, #460]	; (80090f8 <HAL_RCC_OscConfig+0x474>)
 8008f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f32:	f7fd ff65 	bl	8006e00 <HAL_GetTick>
 8008f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f38:	e008      	b.n	8008f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f3a:	f7fd ff61 	bl	8006e00 <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d901      	bls.n	8008f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e10c      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f4c:	4b6a      	ldr	r3, [pc, #424]	; (80090f8 <HAL_RCC_OscConfig+0x474>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0f0      	beq.n	8008f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d106      	bne.n	8008f6e <HAL_RCC_OscConfig+0x2ea>
 8008f60:	4b64      	ldr	r3, [pc, #400]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f64:	4a63      	ldr	r2, [pc, #396]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f66:	f043 0301 	orr.w	r3, r3, #1
 8008f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f6c:	e01c      	b.n	8008fa8 <HAL_RCC_OscConfig+0x324>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	2b05      	cmp	r3, #5
 8008f74:	d10c      	bne.n	8008f90 <HAL_RCC_OscConfig+0x30c>
 8008f76:	4b5f      	ldr	r3, [pc, #380]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7a:	4a5e      	ldr	r2, [pc, #376]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f7c:	f043 0304 	orr.w	r3, r3, #4
 8008f80:	6713      	str	r3, [r2, #112]	; 0x70
 8008f82:	4b5c      	ldr	r3, [pc, #368]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f86:	4a5b      	ldr	r2, [pc, #364]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f88:	f043 0301 	orr.w	r3, r3, #1
 8008f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f8e:	e00b      	b.n	8008fa8 <HAL_RCC_OscConfig+0x324>
 8008f90:	4b58      	ldr	r3, [pc, #352]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f94:	4a57      	ldr	r2, [pc, #348]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f96:	f023 0301 	bic.w	r3, r3, #1
 8008f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f9c:	4b55      	ldr	r3, [pc, #340]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa0:	4a54      	ldr	r2, [pc, #336]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008fa2:	f023 0304 	bic.w	r3, r3, #4
 8008fa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d015      	beq.n	8008fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fb0:	f7fd ff26 	bl	8006e00 <HAL_GetTick>
 8008fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fb6:	e00a      	b.n	8008fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fb8:	f7fd ff22 	bl	8006e00 <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d901      	bls.n	8008fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e0cb      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fce:	4b49      	ldr	r3, [pc, #292]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0ee      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x334>
 8008fda:	e014      	b.n	8009006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fdc:	f7fd ff10 	bl	8006e00 <HAL_GetTick>
 8008fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fe2:	e00a      	b.n	8008ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fe4:	f7fd ff0c 	bl	8006e00 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d901      	bls.n	8008ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e0b5      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ffa:	4b3e      	ldr	r3, [pc, #248]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8008ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1ee      	bne.n	8008fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d105      	bne.n	8009018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800900c:	4b39      	ldr	r3, [pc, #228]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 800900e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009010:	4a38      	ldr	r2, [pc, #224]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8009012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009016:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 80a1 	beq.w	8009164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009022:	4b34      	ldr	r3, [pc, #208]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 030c 	and.w	r3, r3, #12
 800902a:	2b08      	cmp	r3, #8
 800902c:	d05c      	beq.n	80090e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	2b02      	cmp	r3, #2
 8009034:	d141      	bne.n	80090ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009036:	4b31      	ldr	r3, [pc, #196]	; (80090fc <HAL_RCC_OscConfig+0x478>)
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800903c:	f7fd fee0 	bl	8006e00 <HAL_GetTick>
 8009040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009042:	e008      	b.n	8009056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009044:	f7fd fedc 	bl	8006e00 <HAL_GetTick>
 8009048:	4602      	mov	r2, r0
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	2b02      	cmp	r3, #2
 8009050:	d901      	bls.n	8009056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009052:	2303      	movs	r3, #3
 8009054:	e087      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009056:	4b27      	ldr	r3, [pc, #156]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1f0      	bne.n	8009044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	69da      	ldr	r2, [r3, #28]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	019b      	lsls	r3, r3, #6
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	085b      	lsrs	r3, r3, #1
 800907a:	3b01      	subs	r3, #1
 800907c:	041b      	lsls	r3, r3, #16
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	061b      	lsls	r3, r3, #24
 8009086:	491b      	ldr	r1, [pc, #108]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 8009088:	4313      	orrs	r3, r2
 800908a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800908c:	4b1b      	ldr	r3, [pc, #108]	; (80090fc <HAL_RCC_OscConfig+0x478>)
 800908e:	2201      	movs	r2, #1
 8009090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009092:	f7fd feb5 	bl	8006e00 <HAL_GetTick>
 8009096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009098:	e008      	b.n	80090ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800909a:	f7fd feb1 	bl	8006e00 <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d901      	bls.n	80090ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e05c      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ac:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0f0      	beq.n	800909a <HAL_RCC_OscConfig+0x416>
 80090b8:	e054      	b.n	8009164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ba:	4b10      	ldr	r3, [pc, #64]	; (80090fc <HAL_RCC_OscConfig+0x478>)
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c0:	f7fd fe9e 	bl	8006e00 <HAL_GetTick>
 80090c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090c8:	f7fd fe9a 	bl	8006e00 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e045      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090da:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <HAL_RCC_OscConfig+0x470>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1f0      	bne.n	80090c8 <HAL_RCC_OscConfig+0x444>
 80090e6:	e03d      	b.n	8009164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d107      	bne.n	8009100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e038      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
 80090f4:	40023800 	.word	0x40023800
 80090f8:	40007000 	.word	0x40007000
 80090fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009100:	4b1b      	ldr	r3, [pc, #108]	; (8009170 <HAL_RCC_OscConfig+0x4ec>)
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d028      	beq.n	8009160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009118:	429a      	cmp	r2, r3
 800911a:	d121      	bne.n	8009160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009126:	429a      	cmp	r2, r3
 8009128:	d11a      	bne.n	8009160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009130:	4013      	ands	r3, r2
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009138:	4293      	cmp	r3, r2
 800913a:	d111      	bne.n	8009160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009146:	085b      	lsrs	r3, r3, #1
 8009148:	3b01      	subs	r3, #1
 800914a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800914c:	429a      	cmp	r2, r3
 800914e:	d107      	bne.n	8009160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800915c:	429a      	cmp	r2, r3
 800915e:	d001      	beq.n	8009164 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e000      	b.n	8009166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	40023800 	.word	0x40023800

08009174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e0cc      	b.n	8009322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009188:	4b68      	ldr	r3, [pc, #416]	; (800932c <HAL_RCC_ClockConfig+0x1b8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d90c      	bls.n	80091b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009196:	4b65      	ldr	r3, [pc, #404]	; (800932c <HAL_RCC_ClockConfig+0x1b8>)
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800919e:	4b63      	ldr	r3, [pc, #396]	; (800932c <HAL_RCC_ClockConfig+0x1b8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d001      	beq.n	80091b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e0b8      	b.n	8009322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d020      	beq.n	80091fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091c8:	4b59      	ldr	r3, [pc, #356]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	4a58      	ldr	r2, [pc, #352]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80091ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0308 	and.w	r3, r3, #8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091e0:	4b53      	ldr	r3, [pc, #332]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	4a52      	ldr	r2, [pc, #328]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80091e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091ec:	4b50      	ldr	r3, [pc, #320]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	494d      	ldr	r1, [pc, #308]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d044      	beq.n	8009294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d107      	bne.n	8009222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009212:	4b47      	ldr	r3, [pc, #284]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d119      	bne.n	8009252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e07f      	b.n	8009322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d003      	beq.n	8009232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800922e:	2b03      	cmp	r3, #3
 8009230:	d107      	bne.n	8009242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009232:	4b3f      	ldr	r3, [pc, #252]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d109      	bne.n	8009252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e06f      	b.n	8009322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009242:	4b3b      	ldr	r3, [pc, #236]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e067      	b.n	8009322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009252:	4b37      	ldr	r3, [pc, #220]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f023 0203 	bic.w	r2, r3, #3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	4934      	ldr	r1, [pc, #208]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 8009260:	4313      	orrs	r3, r2
 8009262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009264:	f7fd fdcc 	bl	8006e00 <HAL_GetTick>
 8009268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800926a:	e00a      	b.n	8009282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800926c:	f7fd fdc8 	bl	8006e00 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	f241 3288 	movw	r2, #5000	; 0x1388
 800927a:	4293      	cmp	r3, r2
 800927c:	d901      	bls.n	8009282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e04f      	b.n	8009322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009282:	4b2b      	ldr	r3, [pc, #172]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f003 020c 	and.w	r2, r3, #12
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	429a      	cmp	r2, r3
 8009292:	d1eb      	bne.n	800926c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009294:	4b25      	ldr	r3, [pc, #148]	; (800932c <HAL_RCC_ClockConfig+0x1b8>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0307 	and.w	r3, r3, #7
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d20c      	bcs.n	80092bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092a2:	4b22      	ldr	r3, [pc, #136]	; (800932c <HAL_RCC_ClockConfig+0x1b8>)
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	b2d2      	uxtb	r2, r2
 80092a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092aa:	4b20      	ldr	r3, [pc, #128]	; (800932c <HAL_RCC_ClockConfig+0x1b8>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d001      	beq.n	80092bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e032      	b.n	8009322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 0304 	and.w	r3, r3, #4
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d008      	beq.n	80092da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092c8:	4b19      	ldr	r3, [pc, #100]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	4916      	ldr	r1, [pc, #88]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d009      	beq.n	80092fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092e6:	4b12      	ldr	r3, [pc, #72]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	490e      	ldr	r1, [pc, #56]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092fa:	f000 f821 	bl	8009340 <HAL_RCC_GetSysClockFreq>
 80092fe:	4602      	mov	r2, r0
 8009300:	4b0b      	ldr	r3, [pc, #44]	; (8009330 <HAL_RCC_ClockConfig+0x1bc>)
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	091b      	lsrs	r3, r3, #4
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	490a      	ldr	r1, [pc, #40]	; (8009334 <HAL_RCC_ClockConfig+0x1c0>)
 800930c:	5ccb      	ldrb	r3, [r1, r3]
 800930e:	fa22 f303 	lsr.w	r3, r2, r3
 8009312:	4a09      	ldr	r2, [pc, #36]	; (8009338 <HAL_RCC_ClockConfig+0x1c4>)
 8009314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009316:	4b09      	ldr	r3, [pc, #36]	; (800933c <HAL_RCC_ClockConfig+0x1c8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	f7fd fc32 	bl	8006b84 <HAL_InitTick>

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	40023c00 	.word	0x40023c00
 8009330:	40023800 	.word	0x40023800
 8009334:	08010240 	.word	0x08010240
 8009338:	20000144 	.word	0x20000144
 800933c:	20000148 	.word	0x20000148

08009340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009344:	b090      	sub	sp, #64	; 0x40
 8009346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	637b      	str	r3, [r7, #52]	; 0x34
 800934c:	2300      	movs	r3, #0
 800934e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009350:	2300      	movs	r3, #0
 8009352:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009354:	2300      	movs	r3, #0
 8009356:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009358:	4b59      	ldr	r3, [pc, #356]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f003 030c 	and.w	r3, r3, #12
 8009360:	2b08      	cmp	r3, #8
 8009362:	d00d      	beq.n	8009380 <HAL_RCC_GetSysClockFreq+0x40>
 8009364:	2b08      	cmp	r3, #8
 8009366:	f200 80a1 	bhi.w	80094ac <HAL_RCC_GetSysClockFreq+0x16c>
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <HAL_RCC_GetSysClockFreq+0x34>
 800936e:	2b04      	cmp	r3, #4
 8009370:	d003      	beq.n	800937a <HAL_RCC_GetSysClockFreq+0x3a>
 8009372:	e09b      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009374:	4b53      	ldr	r3, [pc, #332]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009376:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009378:	e09b      	b.n	80094b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800937a:	4b53      	ldr	r3, [pc, #332]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800937c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800937e:	e098      	b.n	80094b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009380:	4b4f      	ldr	r3, [pc, #316]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009388:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800938a:	4b4d      	ldr	r3, [pc, #308]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d028      	beq.n	80093e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009396:	4b4a      	ldr	r3, [pc, #296]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	099b      	lsrs	r3, r3, #6
 800939c:	2200      	movs	r2, #0
 800939e:	623b      	str	r3, [r7, #32]
 80093a0:	627a      	str	r2, [r7, #36]	; 0x24
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80093a8:	2100      	movs	r1, #0
 80093aa:	4b47      	ldr	r3, [pc, #284]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80093ac:	fb03 f201 	mul.w	r2, r3, r1
 80093b0:	2300      	movs	r3, #0
 80093b2:	fb00 f303 	mul.w	r3, r0, r3
 80093b6:	4413      	add	r3, r2
 80093b8:	4a43      	ldr	r2, [pc, #268]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80093ba:	fba0 1202 	umull	r1, r2, r0, r2
 80093be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093c0:	460a      	mov	r2, r1
 80093c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80093c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093c6:	4413      	add	r3, r2
 80093c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093cc:	2200      	movs	r2, #0
 80093ce:	61bb      	str	r3, [r7, #24]
 80093d0:	61fa      	str	r2, [r7, #28]
 80093d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80093da:	f7f7 fc0f 	bl	8000bfc <__aeabi_uldivmod>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4613      	mov	r3, r2
 80093e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e6:	e053      	b.n	8009490 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093e8:	4b35      	ldr	r3, [pc, #212]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	099b      	lsrs	r3, r3, #6
 80093ee:	2200      	movs	r2, #0
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	617a      	str	r2, [r7, #20]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80093fa:	f04f 0b00 	mov.w	fp, #0
 80093fe:	4652      	mov	r2, sl
 8009400:	465b      	mov	r3, fp
 8009402:	f04f 0000 	mov.w	r0, #0
 8009406:	f04f 0100 	mov.w	r1, #0
 800940a:	0159      	lsls	r1, r3, #5
 800940c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009410:	0150      	lsls	r0, r2, #5
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	ebb2 080a 	subs.w	r8, r2, sl
 800941a:	eb63 090b 	sbc.w	r9, r3, fp
 800941e:	f04f 0200 	mov.w	r2, #0
 8009422:	f04f 0300 	mov.w	r3, #0
 8009426:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800942a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800942e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009432:	ebb2 0408 	subs.w	r4, r2, r8
 8009436:	eb63 0509 	sbc.w	r5, r3, r9
 800943a:	f04f 0200 	mov.w	r2, #0
 800943e:	f04f 0300 	mov.w	r3, #0
 8009442:	00eb      	lsls	r3, r5, #3
 8009444:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009448:	00e2      	lsls	r2, r4, #3
 800944a:	4614      	mov	r4, r2
 800944c:	461d      	mov	r5, r3
 800944e:	eb14 030a 	adds.w	r3, r4, sl
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	eb45 030b 	adc.w	r3, r5, fp
 8009458:	607b      	str	r3, [r7, #4]
 800945a:	f04f 0200 	mov.w	r2, #0
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009466:	4629      	mov	r1, r5
 8009468:	028b      	lsls	r3, r1, #10
 800946a:	4621      	mov	r1, r4
 800946c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009470:	4621      	mov	r1, r4
 8009472:	028a      	lsls	r2, r1, #10
 8009474:	4610      	mov	r0, r2
 8009476:	4619      	mov	r1, r3
 8009478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947a:	2200      	movs	r2, #0
 800947c:	60bb      	str	r3, [r7, #8]
 800947e:	60fa      	str	r2, [r7, #12]
 8009480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009484:	f7f7 fbba 	bl	8000bfc <__aeabi_uldivmod>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4613      	mov	r3, r2
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009490:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	0c1b      	lsrs	r3, r3, #16
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	3301      	adds	r3, #1
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80094a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80094aa:	e002      	b.n	80094b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80094ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80094b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3740      	adds	r7, #64	; 0x40
 80094b8:	46bd      	mov	sp, r7
 80094ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094be:	bf00      	nop
 80094c0:	40023800 	.word	0x40023800
 80094c4:	00f42400 	.word	0x00f42400
 80094c8:	017d7840 	.word	0x017d7840

080094cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094d0:	4b03      	ldr	r3, [pc, #12]	; (80094e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80094d2:	681b      	ldr	r3, [r3, #0]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	20000144 	.word	0x20000144

080094e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80094e8:	f7ff fff0 	bl	80094cc <HAL_RCC_GetHCLKFreq>
 80094ec:	4602      	mov	r2, r0
 80094ee:	4b05      	ldr	r3, [pc, #20]	; (8009504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	0a9b      	lsrs	r3, r3, #10
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	4903      	ldr	r1, [pc, #12]	; (8009508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094fa:	5ccb      	ldrb	r3, [r1, r3]
 80094fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009500:	4618      	mov	r0, r3
 8009502:	bd80      	pop	{r7, pc}
 8009504:	40023800 	.word	0x40023800
 8009508:	08010250 	.word	0x08010250

0800950c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009510:	f7ff ffdc 	bl	80094cc <HAL_RCC_GetHCLKFreq>
 8009514:	4602      	mov	r2, r0
 8009516:	4b05      	ldr	r3, [pc, #20]	; (800952c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	0b5b      	lsrs	r3, r3, #13
 800951c:	f003 0307 	and.w	r3, r3, #7
 8009520:	4903      	ldr	r1, [pc, #12]	; (8009530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009522:	5ccb      	ldrb	r3, [r1, r3]
 8009524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009528:	4618      	mov	r0, r3
 800952a:	bd80      	pop	{r7, pc}
 800952c:	40023800 	.word	0x40023800
 8009530:	08010250 	.word	0x08010250

08009534 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	220f      	movs	r2, #15
 8009542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009544:	4b12      	ldr	r3, [pc, #72]	; (8009590 <HAL_RCC_GetClockConfig+0x5c>)
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f003 0203 	and.w	r2, r3, #3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009550:	4b0f      	ldr	r3, [pc, #60]	; (8009590 <HAL_RCC_GetClockConfig+0x5c>)
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800955c:	4b0c      	ldr	r3, [pc, #48]	; (8009590 <HAL_RCC_GetClockConfig+0x5c>)
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009568:	4b09      	ldr	r3, [pc, #36]	; (8009590 <HAL_RCC_GetClockConfig+0x5c>)
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	08db      	lsrs	r3, r3, #3
 800956e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009576:	4b07      	ldr	r3, [pc, #28]	; (8009594 <HAL_RCC_GetClockConfig+0x60>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0207 	and.w	r2, r3, #7
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	601a      	str	r2, [r3, #0]
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	40023800 	.word	0x40023800
 8009594:	40023c00 	.word	0x40023c00

08009598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e041      	b.n	800962e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d106      	bne.n	80095c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7fd f936 	bl	8006830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2202      	movs	r2, #2
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3304      	adds	r3, #4
 80095d4:	4619      	mov	r1, r3
 80095d6:	4610      	mov	r0, r2
 80095d8:	f001 f91c 	bl	800a814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b01      	cmp	r3, #1
 800964a:	d001      	beq.n	8009650 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e046      	b.n	80096de <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a23      	ldr	r2, [pc, #140]	; (80096ec <HAL_TIM_Base_Start+0xb4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d022      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800966a:	d01d      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a1f      	ldr	r2, [pc, #124]	; (80096f0 <HAL_TIM_Base_Start+0xb8>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d018      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a1e      	ldr	r2, [pc, #120]	; (80096f4 <HAL_TIM_Base_Start+0xbc>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d013      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1c      	ldr	r2, [pc, #112]	; (80096f8 <HAL_TIM_Base_Start+0xc0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d00e      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1b      	ldr	r2, [pc, #108]	; (80096fc <HAL_TIM_Base_Start+0xc4>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d009      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a19      	ldr	r2, [pc, #100]	; (8009700 <HAL_TIM_Base_Start+0xc8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d004      	beq.n	80096a8 <HAL_TIM_Base_Start+0x70>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a18      	ldr	r2, [pc, #96]	; (8009704 <HAL_TIM_Base_Start+0xcc>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d111      	bne.n	80096cc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f003 0307 	and.w	r3, r3, #7
 80096b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b06      	cmp	r3, #6
 80096b8:	d010      	beq.n	80096dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f042 0201 	orr.w	r2, r2, #1
 80096c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ca:	e007      	b.n	80096dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0201 	orr.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40010400 	.word	0x40010400
 8009700:	40014000 	.word	0x40014000
 8009704:	40001800 	.word	0x40001800

08009708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b01      	cmp	r3, #1
 800971a:	d001      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e04e      	b.n	80097be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2202      	movs	r2, #2
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0201 	orr.w	r2, r2, #1
 8009736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a23      	ldr	r2, [pc, #140]	; (80097cc <HAL_TIM_Base_Start_IT+0xc4>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d022      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800974a:	d01d      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a1f      	ldr	r2, [pc, #124]	; (80097d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d018      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a1e      	ldr	r2, [pc, #120]	; (80097d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d013      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1c      	ldr	r2, [pc, #112]	; (80097d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00e      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a1b      	ldr	r2, [pc, #108]	; (80097dc <HAL_TIM_Base_Start_IT+0xd4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d009      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a19      	ldr	r2, [pc, #100]	; (80097e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d004      	beq.n	8009788 <HAL_TIM_Base_Start_IT+0x80>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a18      	ldr	r2, [pc, #96]	; (80097e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d111      	bne.n	80097ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b06      	cmp	r3, #6
 8009798:	d010      	beq.n	80097bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0201 	orr.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097aa:	e007      	b.n	80097bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0201 	orr.w	r2, r2, #1
 80097ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	40010000 	.word	0x40010000
 80097d0:	40000400 	.word	0x40000400
 80097d4:	40000800 	.word	0x40000800
 80097d8:	40000c00 	.word	0x40000c00
 80097dc:	40010400 	.word	0x40010400
 80097e0:	40014000 	.word	0x40014000
 80097e4:	40001800 	.word	0x40001800

080097e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e041      	b.n	800987e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f839 	bl	8009886 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3304      	adds	r3, #4
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f000 fff4 	bl	800a814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800988e:	bf00      	nop
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
	...

0800989c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <HAL_TIM_PWM_Start+0x24>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	bf14      	ite	ne
 80098b8:	2301      	movne	r3, #1
 80098ba:	2300      	moveq	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	e022      	b.n	8009906 <HAL_TIM_PWM_Start+0x6a>
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d109      	bne.n	80098da <HAL_TIM_PWM_Start+0x3e>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	bf14      	ite	ne
 80098d2:	2301      	movne	r3, #1
 80098d4:	2300      	moveq	r3, #0
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	e015      	b.n	8009906 <HAL_TIM_PWM_Start+0x6a>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d109      	bne.n	80098f4 <HAL_TIM_PWM_Start+0x58>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	bf14      	ite	ne
 80098ec:	2301      	movne	r3, #1
 80098ee:	2300      	moveq	r3, #0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	e008      	b.n	8009906 <HAL_TIM_PWM_Start+0x6a>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	bf14      	ite	ne
 8009900:	2301      	movne	r3, #1
 8009902:	2300      	moveq	r3, #0
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e07c      	b.n	8009a08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d104      	bne.n	800991e <HAL_TIM_PWM_Start+0x82>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800991c:	e013      	b.n	8009946 <HAL_TIM_PWM_Start+0xaa>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b04      	cmp	r3, #4
 8009922:	d104      	bne.n	800992e <HAL_TIM_PWM_Start+0x92>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2202      	movs	r2, #2
 8009928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800992c:	e00b      	b.n	8009946 <HAL_TIM_PWM_Start+0xaa>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b08      	cmp	r3, #8
 8009932:	d104      	bne.n	800993e <HAL_TIM_PWM_Start+0xa2>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800993c:	e003      	b.n	8009946 <HAL_TIM_PWM_Start+0xaa>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2202      	movs	r2, #2
 8009942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2201      	movs	r2, #1
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f001 fb74 	bl	800b03c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a2d      	ldr	r2, [pc, #180]	; (8009a10 <HAL_TIM_PWM_Start+0x174>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d004      	beq.n	8009968 <HAL_TIM_PWM_Start+0xcc>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a2c      	ldr	r2, [pc, #176]	; (8009a14 <HAL_TIM_PWM_Start+0x178>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d101      	bne.n	800996c <HAL_TIM_PWM_Start+0xd0>
 8009968:	2301      	movs	r3, #1
 800996a:	e000      	b.n	800996e <HAL_TIM_PWM_Start+0xd2>
 800996c:	2300      	movs	r3, #0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d007      	beq.n	8009982 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009980:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a22      	ldr	r2, [pc, #136]	; (8009a10 <HAL_TIM_PWM_Start+0x174>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d022      	beq.n	80099d2 <HAL_TIM_PWM_Start+0x136>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009994:	d01d      	beq.n	80099d2 <HAL_TIM_PWM_Start+0x136>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a1f      	ldr	r2, [pc, #124]	; (8009a18 <HAL_TIM_PWM_Start+0x17c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d018      	beq.n	80099d2 <HAL_TIM_PWM_Start+0x136>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a1d      	ldr	r2, [pc, #116]	; (8009a1c <HAL_TIM_PWM_Start+0x180>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d013      	beq.n	80099d2 <HAL_TIM_PWM_Start+0x136>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a1c      	ldr	r2, [pc, #112]	; (8009a20 <HAL_TIM_PWM_Start+0x184>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d00e      	beq.n	80099d2 <HAL_TIM_PWM_Start+0x136>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a16      	ldr	r2, [pc, #88]	; (8009a14 <HAL_TIM_PWM_Start+0x178>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d009      	beq.n	80099d2 <HAL_TIM_PWM_Start+0x136>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a18      	ldr	r2, [pc, #96]	; (8009a24 <HAL_TIM_PWM_Start+0x188>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d004      	beq.n	80099d2 <HAL_TIM_PWM_Start+0x136>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a16      	ldr	r2, [pc, #88]	; (8009a28 <HAL_TIM_PWM_Start+0x18c>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d111      	bne.n	80099f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f003 0307 	and.w	r3, r3, #7
 80099dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b06      	cmp	r3, #6
 80099e2:	d010      	beq.n	8009a06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099f4:	e007      	b.n	8009a06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f042 0201 	orr.w	r2, r2, #1
 8009a04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	40010000 	.word	0x40010000
 8009a14:	40010400 	.word	0x40010400
 8009a18:	40000400 	.word	0x40000400
 8009a1c:	40000800 	.word	0x40000800
 8009a20:	40000c00 	.word	0x40000c00
 8009a24:	40014000 	.word	0x40014000
 8009a28:	40001800 	.word	0x40001800

08009a2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e041      	b.n	8009ac2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d106      	bne.n	8009a58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f839 	bl	8009aca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	3304      	adds	r3, #4
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	f000 fed2 	bl	800a814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
	...

08009ae0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d104      	bne.n	8009afe <HAL_TIM_IC_Start_IT+0x1e>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	e013      	b.n	8009b26 <HAL_TIM_IC_Start_IT+0x46>
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d104      	bne.n	8009b0e <HAL_TIM_IC_Start_IT+0x2e>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	e00b      	b.n	8009b26 <HAL_TIM_IC_Start_IT+0x46>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b08      	cmp	r3, #8
 8009b12:	d104      	bne.n	8009b1e <HAL_TIM_IC_Start_IT+0x3e>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	e003      	b.n	8009b26 <HAL_TIM_IC_Start_IT+0x46>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d104      	bne.n	8009b38 <HAL_TIM_IC_Start_IT+0x58>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	e013      	b.n	8009b60 <HAL_TIM_IC_Start_IT+0x80>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b04      	cmp	r3, #4
 8009b3c:	d104      	bne.n	8009b48 <HAL_TIM_IC_Start_IT+0x68>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	e00b      	b.n	8009b60 <HAL_TIM_IC_Start_IT+0x80>
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2b08      	cmp	r3, #8
 8009b4c:	d104      	bne.n	8009b58 <HAL_TIM_IC_Start_IT+0x78>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	e003      	b.n	8009b60 <HAL_TIM_IC_Start_IT+0x80>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d102      	bne.n	8009b6e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b68:	7b7b      	ldrb	r3, [r7, #13]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d001      	beq.n	8009b72 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e0cc      	b.n	8009d0c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d104      	bne.n	8009b82 <HAL_TIM_IC_Start_IT+0xa2>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b80:	e013      	b.n	8009baa <HAL_TIM_IC_Start_IT+0xca>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d104      	bne.n	8009b92 <HAL_TIM_IC_Start_IT+0xb2>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b90:	e00b      	b.n	8009baa <HAL_TIM_IC_Start_IT+0xca>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d104      	bne.n	8009ba2 <HAL_TIM_IC_Start_IT+0xc2>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ba0:	e003      	b.n	8009baa <HAL_TIM_IC_Start_IT+0xca>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d104      	bne.n	8009bba <HAL_TIM_IC_Start_IT+0xda>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bb8:	e013      	b.n	8009be2 <HAL_TIM_IC_Start_IT+0x102>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	d104      	bne.n	8009bca <HAL_TIM_IC_Start_IT+0xea>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bc8:	e00b      	b.n	8009be2 <HAL_TIM_IC_Start_IT+0x102>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d104      	bne.n	8009bda <HAL_TIM_IC_Start_IT+0xfa>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bd8:	e003      	b.n	8009be2 <HAL_TIM_IC_Start_IT+0x102>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b0c      	cmp	r3, #12
 8009be6:	d841      	bhi.n	8009c6c <HAL_TIM_IC_Start_IT+0x18c>
 8009be8:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <HAL_TIM_IC_Start_IT+0x110>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c25 	.word	0x08009c25
 8009bf4:	08009c6d 	.word	0x08009c6d
 8009bf8:	08009c6d 	.word	0x08009c6d
 8009bfc:	08009c6d 	.word	0x08009c6d
 8009c00:	08009c37 	.word	0x08009c37
 8009c04:	08009c6d 	.word	0x08009c6d
 8009c08:	08009c6d 	.word	0x08009c6d
 8009c0c:	08009c6d 	.word	0x08009c6d
 8009c10:	08009c49 	.word	0x08009c49
 8009c14:	08009c6d 	.word	0x08009c6d
 8009c18:	08009c6d 	.word	0x08009c6d
 8009c1c:	08009c6d 	.word	0x08009c6d
 8009c20:	08009c5b 	.word	0x08009c5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f042 0202 	orr.w	r2, r2, #2
 8009c32:	60da      	str	r2, [r3, #12]
      break;
 8009c34:	e01d      	b.n	8009c72 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68da      	ldr	r2, [r3, #12]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0204 	orr.w	r2, r2, #4
 8009c44:	60da      	str	r2, [r3, #12]
      break;
 8009c46:	e014      	b.n	8009c72 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0208 	orr.w	r2, r2, #8
 8009c56:	60da      	str	r2, [r3, #12]
      break;
 8009c58:	e00b      	b.n	8009c72 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68da      	ldr	r2, [r3, #12]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f042 0210 	orr.w	r2, r2, #16
 8009c68:	60da      	str	r2, [r3, #12]
      break;
 8009c6a:	e002      	b.n	8009c72 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c70:	bf00      	nop
  }

  if (status == HAL_OK)
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d148      	bne.n	8009d0a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f001 f9db 	bl	800b03c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a22      	ldr	r2, [pc, #136]	; (8009d14 <HAL_TIM_IC_Start_IT+0x234>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d022      	beq.n	8009cd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c98:	d01d      	beq.n	8009cd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a1e      	ldr	r2, [pc, #120]	; (8009d18 <HAL_TIM_IC_Start_IT+0x238>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d018      	beq.n	8009cd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a1c      	ldr	r2, [pc, #112]	; (8009d1c <HAL_TIM_IC_Start_IT+0x23c>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d013      	beq.n	8009cd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a1b      	ldr	r2, [pc, #108]	; (8009d20 <HAL_TIM_IC_Start_IT+0x240>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d00e      	beq.n	8009cd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a19      	ldr	r2, [pc, #100]	; (8009d24 <HAL_TIM_IC_Start_IT+0x244>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d009      	beq.n	8009cd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a18      	ldr	r2, [pc, #96]	; (8009d28 <HAL_TIM_IC_Start_IT+0x248>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d004      	beq.n	8009cd6 <HAL_TIM_IC_Start_IT+0x1f6>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a16      	ldr	r2, [pc, #88]	; (8009d2c <HAL_TIM_IC_Start_IT+0x24c>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d111      	bne.n	8009cfa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f003 0307 	and.w	r3, r3, #7
 8009ce0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b06      	cmp	r3, #6
 8009ce6:	d010      	beq.n	8009d0a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f042 0201 	orr.w	r2, r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf8:	e007      	b.n	8009d0a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f042 0201 	orr.w	r2, r2, #1
 8009d08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	40010000 	.word	0x40010000
 8009d18:	40000400 	.word	0x40000400
 8009d1c:	40000800 	.word	0x40000800
 8009d20:	40000c00 	.word	0x40000c00
 8009d24:	40010400 	.word	0x40010400
 8009d28:	40014000 	.word	0x40014000
 8009d2c:	40001800 	.word	0x40001800

08009d30 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b0c      	cmp	r3, #12
 8009d42:	d841      	bhi.n	8009dc8 <HAL_TIM_IC_Stop_IT+0x98>
 8009d44:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <HAL_TIM_IC_Stop_IT+0x1c>)
 8009d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4a:	bf00      	nop
 8009d4c:	08009d81 	.word	0x08009d81
 8009d50:	08009dc9 	.word	0x08009dc9
 8009d54:	08009dc9 	.word	0x08009dc9
 8009d58:	08009dc9 	.word	0x08009dc9
 8009d5c:	08009d93 	.word	0x08009d93
 8009d60:	08009dc9 	.word	0x08009dc9
 8009d64:	08009dc9 	.word	0x08009dc9
 8009d68:	08009dc9 	.word	0x08009dc9
 8009d6c:	08009da5 	.word	0x08009da5
 8009d70:	08009dc9 	.word	0x08009dc9
 8009d74:	08009dc9 	.word	0x08009dc9
 8009d78:	08009dc9 	.word	0x08009dc9
 8009d7c:	08009db7 	.word	0x08009db7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0202 	bic.w	r2, r2, #2
 8009d8e:	60da      	str	r2, [r3, #12]
      break;
 8009d90:	e01d      	b.n	8009dce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68da      	ldr	r2, [r3, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 0204 	bic.w	r2, r2, #4
 8009da0:	60da      	str	r2, [r3, #12]
      break;
 8009da2:	e014      	b.n	8009dce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68da      	ldr	r2, [r3, #12]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 0208 	bic.w	r2, r2, #8
 8009db2:	60da      	str	r2, [r3, #12]
      break;
 8009db4:	e00b      	b.n	8009dce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f022 0210 	bic.w	r2, r2, #16
 8009dc4:	60da      	str	r2, [r3, #12]
      break;
 8009dc6:	e002      	b.n	8009dce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]
      break;
 8009dcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d156      	bne.n	8009e82 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 f92d 	bl	800b03c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6a1a      	ldr	r2, [r3, #32]
 8009de8:	f241 1311 	movw	r3, #4369	; 0x1111
 8009dec:	4013      	ands	r3, r2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10f      	bne.n	8009e12 <HAL_TIM_IC_Stop_IT+0xe2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6a1a      	ldr	r2, [r3, #32]
 8009df8:	f240 4344 	movw	r3, #1092	; 0x444
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d107      	bne.n	8009e12 <HAL_TIM_IC_Stop_IT+0xe2>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 0201 	bic.w	r2, r2, #1
 8009e10:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d104      	bne.n	8009e22 <HAL_TIM_IC_Stop_IT+0xf2>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e20:	e013      	b.n	8009e4a <HAL_TIM_IC_Stop_IT+0x11a>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d104      	bne.n	8009e32 <HAL_TIM_IC_Stop_IT+0x102>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e30:	e00b      	b.n	8009e4a <HAL_TIM_IC_Stop_IT+0x11a>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b08      	cmp	r3, #8
 8009e36:	d104      	bne.n	8009e42 <HAL_TIM_IC_Stop_IT+0x112>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e40:	e003      	b.n	8009e4a <HAL_TIM_IC_Stop_IT+0x11a>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <HAL_TIM_IC_Stop_IT+0x12a>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e58:	e013      	b.n	8009e82 <HAL_TIM_IC_Stop_IT+0x152>
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d104      	bne.n	8009e6a <HAL_TIM_IC_Stop_IT+0x13a>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e68:	e00b      	b.n	8009e82 <HAL_TIM_IC_Stop_IT+0x152>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d104      	bne.n	8009e7a <HAL_TIM_IC_Stop_IT+0x14a>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e78:	e003      	b.n	8009e82 <HAL_TIM_IC_Stop_IT+0x152>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e097      	b.n	8009fd0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d106      	bne.n	8009eba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7fc fd75 	bl	80069a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ed0:	f023 0307 	bic.w	r3, r3, #7
 8009ed4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3304      	adds	r3, #4
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	f000 fc97 	bl	800a814 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009f2c:	f023 030c 	bic.w	r3, r3, #12
 8009f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	011a      	lsls	r2, r3, #4
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	031b      	lsls	r3, r3, #12
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	011b      	lsls	r3, r3, #4
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3718      	adds	r7, #24
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fe8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ff0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ff8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a000:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d110      	bne.n	800a02a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d102      	bne.n	800a014 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a00e:	7b7b      	ldrb	r3, [r7, #13]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d001      	beq.n	800a018 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e069      	b.n	800a0ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2202      	movs	r2, #2
 800a01c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a028:	e031      	b.n	800a08e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b04      	cmp	r3, #4
 800a02e:	d110      	bne.n	800a052 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a030:	7bbb      	ldrb	r3, [r7, #14]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d102      	bne.n	800a03c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a036:	7b3b      	ldrb	r3, [r7, #12]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d001      	beq.n	800a040 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e055      	b.n	800a0ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a050:	e01d      	b.n	800a08e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d108      	bne.n	800a06a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d105      	bne.n	800a06a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a05e:	7b7b      	ldrb	r3, [r7, #13]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d102      	bne.n	800a06a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a064:	7b3b      	ldrb	r3, [r7, #12]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d001      	beq.n	800a06e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e03e      	b.n	800a0ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2202      	movs	r2, #2
 800a072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2202      	movs	r2, #2
 800a07a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2202      	movs	r2, #2
 800a08a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <HAL_TIM_Encoder_Start+0xc4>
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b04      	cmp	r3, #4
 800a098:	d008      	beq.n	800a0ac <HAL_TIM_Encoder_Start+0xd4>
 800a09a:	e00f      	b.n	800a0bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 ffc9 	bl	800b03c <TIM_CCxChannelCmd>
      break;
 800a0aa:	e016      	b.n	800a0da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	2104      	movs	r1, #4
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 ffc1 	bl	800b03c <TIM_CCxChannelCmd>
      break;
 800a0ba:	e00e      	b.n	800a0da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 ffb9 	bl	800b03c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	2104      	movs	r1, #4
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 ffb2 	bl	800b03c <TIM_CCxChannelCmd>
      break;
 800a0d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f042 0201 	orr.w	r2, r2, #1
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f003 0302 	and.w	r3, r3, #2
 800a106:	2b02      	cmp	r3, #2
 800a108:	d122      	bne.n	800a150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b02      	cmp	r3, #2
 800a116:	d11b      	bne.n	800a150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f06f 0202 	mvn.w	r2, #2
 800a120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7f7 fcaa 	bl	8001a90 <HAL_TIM_IC_CaptureCallback>
 800a13c:	e005      	b.n	800a14a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fb4a 	bl	800a7d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fb51 	bl	800a7ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	f003 0304 	and.w	r3, r3, #4
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	d122      	bne.n	800a1a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d11b      	bne.n	800a1a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f06f 0204 	mvn.w	r2, #4
 800a174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2202      	movs	r2, #2
 800a17a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7f7 fc80 	bl	8001a90 <HAL_TIM_IC_CaptureCallback>
 800a190:	e005      	b.n	800a19e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fb20 	bl	800a7d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fb27 	bl	800a7ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	f003 0308 	and.w	r3, r3, #8
 800a1ae:	2b08      	cmp	r3, #8
 800a1b0:	d122      	bne.n	800a1f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f003 0308 	and.w	r3, r3, #8
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d11b      	bne.n	800a1f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f06f 0208 	mvn.w	r2, #8
 800a1c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2204      	movs	r2, #4
 800a1ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	f003 0303 	and.w	r3, r3, #3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7f7 fc56 	bl	8001a90 <HAL_TIM_IC_CaptureCallback>
 800a1e4:	e005      	b.n	800a1f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 faf6 	bl	800a7d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fafd 	bl	800a7ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	f003 0310 	and.w	r3, r3, #16
 800a202:	2b10      	cmp	r3, #16
 800a204:	d122      	bne.n	800a24c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	2b10      	cmp	r3, #16
 800a212:	d11b      	bne.n	800a24c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f06f 0210 	mvn.w	r2, #16
 800a21c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2208      	movs	r2, #8
 800a222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7f7 fc2c 	bl	8001a90 <HAL_TIM_IC_CaptureCallback>
 800a238:	e005      	b.n	800a246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 facc 	bl	800a7d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fad3 	bl	800a7ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b01      	cmp	r3, #1
 800a258:	d10e      	bne.n	800a278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	2b01      	cmp	r3, #1
 800a266:	d107      	bne.n	800a278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f06f 0201 	mvn.w	r2, #1
 800a270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7fc f9dc 	bl	8006630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a282:	2b80      	cmp	r3, #128	; 0x80
 800a284:	d10e      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a290:	2b80      	cmp	r3, #128	; 0x80
 800a292:	d107      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a29c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 ffca 	bl	800b238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ae:	2b40      	cmp	r3, #64	; 0x40
 800a2b0:	d10e      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2bc:	2b40      	cmp	r3, #64	; 0x40
 800a2be:	d107      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fa98 	bl	800a800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f003 0320 	and.w	r3, r3, #32
 800a2da:	2b20      	cmp	r3, #32
 800a2dc:	d10e      	bne.n	800a2fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f003 0320 	and.w	r3, r3, #32
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d107      	bne.n	800a2fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0220 	mvn.w	r2, #32
 800a2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 ff94 	bl	800b224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d101      	bne.n	800a322 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a31e:	2302      	movs	r3, #2
 800a320:	e088      	b.n	800a434 <HAL_TIM_IC_ConfigChannel+0x130>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d11b      	bne.n	800a368 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6818      	ldr	r0, [r3, #0]
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	6819      	ldr	r1, [r3, #0]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f000 fcb8 	bl	800acb4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	699a      	ldr	r2, [r3, #24]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f022 020c 	bic.w	r2, r2, #12
 800a352:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6999      	ldr	r1, [r3, #24]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	430a      	orrs	r2, r1
 800a364:	619a      	str	r2, [r3, #24]
 800a366:	e060      	b.n	800a42a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d11c      	bne.n	800a3a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	6819      	ldr	r1, [r3, #0]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	f000 fd3c 	bl	800adfa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a390:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6999      	ldr	r1, [r3, #24]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	021a      	lsls	r2, r3, #8
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	619a      	str	r2, [r3, #24]
 800a3a6:	e040      	b.n	800a42a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b08      	cmp	r3, #8
 800a3ac:	d11b      	bne.n	800a3e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6818      	ldr	r0, [r3, #0]
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	6819      	ldr	r1, [r3, #0]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f000 fd89 	bl	800aed4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	69da      	ldr	r2, [r3, #28]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 020c 	bic.w	r2, r2, #12
 800a3d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	69d9      	ldr	r1, [r3, #28]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	689a      	ldr	r2, [r3, #8]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	430a      	orrs	r2, r1
 800a3e2:	61da      	str	r2, [r3, #28]
 800a3e4:	e021      	b.n	800a42a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b0c      	cmp	r3, #12
 800a3ea:	d11c      	bne.n	800a426 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6819      	ldr	r1, [r3, #0]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	f000 fda6 	bl	800af4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	69da      	ldr	r2, [r3, #28]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a40e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	69d9      	ldr	r1, [r3, #28]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	021a      	lsls	r2, r3, #8
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	430a      	orrs	r2, r1
 800a422:	61da      	str	r2, [r3, #28]
 800a424:	e001      	b.n	800a42a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a452:	2b01      	cmp	r3, #1
 800a454:	d101      	bne.n	800a45a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a456:	2302      	movs	r3, #2
 800a458:	e0ae      	b.n	800a5b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2b0c      	cmp	r3, #12
 800a466:	f200 809f 	bhi.w	800a5a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a46a:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a470:	0800a4a5 	.word	0x0800a4a5
 800a474:	0800a5a9 	.word	0x0800a5a9
 800a478:	0800a5a9 	.word	0x0800a5a9
 800a47c:	0800a5a9 	.word	0x0800a5a9
 800a480:	0800a4e5 	.word	0x0800a4e5
 800a484:	0800a5a9 	.word	0x0800a5a9
 800a488:	0800a5a9 	.word	0x0800a5a9
 800a48c:	0800a5a9 	.word	0x0800a5a9
 800a490:	0800a527 	.word	0x0800a527
 800a494:	0800a5a9 	.word	0x0800a5a9
 800a498:	0800a5a9 	.word	0x0800a5a9
 800a49c:	0800a5a9 	.word	0x0800a5a9
 800a4a0:	0800a567 	.word	0x0800a567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fa52 	bl	800a954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	699a      	ldr	r2, [r3, #24]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f042 0208 	orr.w	r2, r2, #8
 800a4be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699a      	ldr	r2, [r3, #24]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f022 0204 	bic.w	r2, r2, #4
 800a4ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6999      	ldr	r1, [r3, #24]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	430a      	orrs	r2, r1
 800a4e0:	619a      	str	r2, [r3, #24]
      break;
 800a4e2:	e064      	b.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68b9      	ldr	r1, [r7, #8]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 faa2 	bl	800aa34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	699a      	ldr	r2, [r3, #24]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	699a      	ldr	r2, [r3, #24]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a50e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6999      	ldr	r1, [r3, #24]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	021a      	lsls	r2, r3, #8
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	619a      	str	r2, [r3, #24]
      break;
 800a524:	e043      	b.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68b9      	ldr	r1, [r7, #8]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 faf7 	bl	800ab20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69da      	ldr	r2, [r3, #28]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f042 0208 	orr.w	r2, r2, #8
 800a540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69da      	ldr	r2, [r3, #28]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f022 0204 	bic.w	r2, r2, #4
 800a550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69d9      	ldr	r1, [r3, #28]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	691a      	ldr	r2, [r3, #16]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	430a      	orrs	r2, r1
 800a562:	61da      	str	r2, [r3, #28]
      break;
 800a564:	e023      	b.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68b9      	ldr	r1, [r7, #8]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fb4b 	bl	800ac08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69da      	ldr	r2, [r3, #28]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	69da      	ldr	r2, [r3, #28]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	69d9      	ldr	r1, [r3, #28]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	021a      	lsls	r2, r3, #8
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	61da      	str	r2, [r3, #28]
      break;
 800a5a6:	e002      	b.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d101      	bne.n	800a5dc <HAL_TIM_ConfigClockSource+0x1c>
 800a5d8:	2302      	movs	r3, #2
 800a5da:	e0b4      	b.n	800a746 <HAL_TIM_ConfigClockSource+0x186>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a614:	d03e      	beq.n	800a694 <HAL_TIM_ConfigClockSource+0xd4>
 800a616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a61a:	f200 8087 	bhi.w	800a72c <HAL_TIM_ConfigClockSource+0x16c>
 800a61e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a622:	f000 8086 	beq.w	800a732 <HAL_TIM_ConfigClockSource+0x172>
 800a626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62a:	d87f      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x16c>
 800a62c:	2b70      	cmp	r3, #112	; 0x70
 800a62e:	d01a      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0xa6>
 800a630:	2b70      	cmp	r3, #112	; 0x70
 800a632:	d87b      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x16c>
 800a634:	2b60      	cmp	r3, #96	; 0x60
 800a636:	d050      	beq.n	800a6da <HAL_TIM_ConfigClockSource+0x11a>
 800a638:	2b60      	cmp	r3, #96	; 0x60
 800a63a:	d877      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x16c>
 800a63c:	2b50      	cmp	r3, #80	; 0x50
 800a63e:	d03c      	beq.n	800a6ba <HAL_TIM_ConfigClockSource+0xfa>
 800a640:	2b50      	cmp	r3, #80	; 0x50
 800a642:	d873      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x16c>
 800a644:	2b40      	cmp	r3, #64	; 0x40
 800a646:	d058      	beq.n	800a6fa <HAL_TIM_ConfigClockSource+0x13a>
 800a648:	2b40      	cmp	r3, #64	; 0x40
 800a64a:	d86f      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x16c>
 800a64c:	2b30      	cmp	r3, #48	; 0x30
 800a64e:	d064      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0x15a>
 800a650:	2b30      	cmp	r3, #48	; 0x30
 800a652:	d86b      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x16c>
 800a654:	2b20      	cmp	r3, #32
 800a656:	d060      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0x15a>
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d867      	bhi.n	800a72c <HAL_TIM_ConfigClockSource+0x16c>
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d05c      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0x15a>
 800a660:	2b10      	cmp	r3, #16
 800a662:	d05a      	beq.n	800a71a <HAL_TIM_ConfigClockSource+0x15a>
 800a664:	e062      	b.n	800a72c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	6899      	ldr	r1, [r3, #8]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	f000 fcc1 	bl	800affc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	609a      	str	r2, [r3, #8]
      break;
 800a692:	e04f      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6818      	ldr	r0, [r3, #0]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	6899      	ldr	r1, [r3, #8]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f000 fcaa 	bl	800affc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689a      	ldr	r2, [r3, #8]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6b6:	609a      	str	r2, [r3, #8]
      break;
 800a6b8:	e03c      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	6859      	ldr	r1, [r3, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f000 fb68 	bl	800ad9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2150      	movs	r1, #80	; 0x50
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fc77 	bl	800afc6 <TIM_ITRx_SetConfig>
      break;
 800a6d8:	e02c      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	6859      	ldr	r1, [r3, #4]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f000 fbc4 	bl	800ae74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2160      	movs	r1, #96	; 0x60
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 fc67 	bl	800afc6 <TIM_ITRx_SetConfig>
      break;
 800a6f8:	e01c      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	6859      	ldr	r1, [r3, #4]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	461a      	mov	r2, r3
 800a708:	f000 fb48 	bl	800ad9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2140      	movs	r1, #64	; 0x40
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fc57 	bl	800afc6 <TIM_ITRx_SetConfig>
      break;
 800a718:	e00c      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4619      	mov	r1, r3
 800a724:	4610      	mov	r0, r2
 800a726:	f000 fc4e 	bl	800afc6 <TIM_ITRx_SetConfig>
      break;
 800a72a:	e003      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	73fb      	strb	r3, [r7, #15]
      break;
 800a730:	e000      	b.n	800a734 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a744:	7bfb      	ldrb	r3, [r7, #15]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b0c      	cmp	r3, #12
 800a762:	d831      	bhi.n	800a7c8 <HAL_TIM_ReadCapturedValue+0x78>
 800a764:	a201      	add	r2, pc, #4	; (adr r2, 800a76c <HAL_TIM_ReadCapturedValue+0x1c>)
 800a766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76a:	bf00      	nop
 800a76c:	0800a7a1 	.word	0x0800a7a1
 800a770:	0800a7c9 	.word	0x0800a7c9
 800a774:	0800a7c9 	.word	0x0800a7c9
 800a778:	0800a7c9 	.word	0x0800a7c9
 800a77c:	0800a7ab 	.word	0x0800a7ab
 800a780:	0800a7c9 	.word	0x0800a7c9
 800a784:	0800a7c9 	.word	0x0800a7c9
 800a788:	0800a7c9 	.word	0x0800a7c9
 800a78c:	0800a7b5 	.word	0x0800a7b5
 800a790:	0800a7c9 	.word	0x0800a7c9
 800a794:	0800a7c9 	.word	0x0800a7c9
 800a798:	0800a7c9 	.word	0x0800a7c9
 800a79c:	0800a7bf 	.word	0x0800a7bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a6:	60fb      	str	r3, [r7, #12]

      break;
 800a7a8:	e00f      	b.n	800a7ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b0:	60fb      	str	r3, [r7, #12]

      break;
 800a7b2:	e00a      	b.n	800a7ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ba:	60fb      	str	r3, [r7, #12]

      break;
 800a7bc:	e005      	b.n	800a7ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c4:	60fb      	str	r3, [r7, #12]

      break;
 800a7c6:	e000      	b.n	800a7ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a7c8:	bf00      	nop
  }

  return tmpreg;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a40      	ldr	r2, [pc, #256]	; (800a928 <TIM_Base_SetConfig+0x114>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d013      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a832:	d00f      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a3d      	ldr	r2, [pc, #244]	; (800a92c <TIM_Base_SetConfig+0x118>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00b      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a3c      	ldr	r2, [pc, #240]	; (800a930 <TIM_Base_SetConfig+0x11c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d007      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a3b      	ldr	r2, [pc, #236]	; (800a934 <TIM_Base_SetConfig+0x120>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d003      	beq.n	800a854 <TIM_Base_SetConfig+0x40>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a3a      	ldr	r2, [pc, #232]	; (800a938 <TIM_Base_SetConfig+0x124>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d108      	bne.n	800a866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a85a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	4313      	orrs	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a2f      	ldr	r2, [pc, #188]	; (800a928 <TIM_Base_SetConfig+0x114>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d02b      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a874:	d027      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a2c      	ldr	r2, [pc, #176]	; (800a92c <TIM_Base_SetConfig+0x118>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d023      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a2b      	ldr	r2, [pc, #172]	; (800a930 <TIM_Base_SetConfig+0x11c>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d01f      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a2a      	ldr	r2, [pc, #168]	; (800a934 <TIM_Base_SetConfig+0x120>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d01b      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a29      	ldr	r2, [pc, #164]	; (800a938 <TIM_Base_SetConfig+0x124>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d017      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a28      	ldr	r2, [pc, #160]	; (800a93c <TIM_Base_SetConfig+0x128>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d013      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a27      	ldr	r2, [pc, #156]	; (800a940 <TIM_Base_SetConfig+0x12c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d00f      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a26      	ldr	r2, [pc, #152]	; (800a944 <TIM_Base_SetConfig+0x130>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00b      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a25      	ldr	r2, [pc, #148]	; (800a948 <TIM_Base_SetConfig+0x134>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d007      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a24      	ldr	r2, [pc, #144]	; (800a94c <TIM_Base_SetConfig+0x138>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d003      	beq.n	800a8c6 <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a23      	ldr	r2, [pc, #140]	; (800a950 <TIM_Base_SetConfig+0x13c>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d108      	bne.n	800a8d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a0a      	ldr	r2, [pc, #40]	; (800a928 <TIM_Base_SetConfig+0x114>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d003      	beq.n	800a90c <TIM_Base_SetConfig+0xf8>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a0c      	ldr	r2, [pc, #48]	; (800a938 <TIM_Base_SetConfig+0x124>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d103      	bne.n	800a914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	691a      	ldr	r2, [r3, #16]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	615a      	str	r2, [r3, #20]
}
 800a91a:	bf00      	nop
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	40010000 	.word	0x40010000
 800a92c:	40000400 	.word	0x40000400
 800a930:	40000800 	.word	0x40000800
 800a934:	40000c00 	.word	0x40000c00
 800a938:	40010400 	.word	0x40010400
 800a93c:	40014000 	.word	0x40014000
 800a940:	40014400 	.word	0x40014400
 800a944:	40014800 	.word	0x40014800
 800a948:	40001800 	.word	0x40001800
 800a94c:	40001c00 	.word	0x40001c00
 800a950:	40002000 	.word	0x40002000

0800a954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	f023 0201 	bic.w	r2, r3, #1
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f023 0302 	bic.w	r3, r3, #2
 800a99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a20      	ldr	r2, [pc, #128]	; (800aa2c <TIM_OC1_SetConfig+0xd8>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d003      	beq.n	800a9b8 <TIM_OC1_SetConfig+0x64>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a1f      	ldr	r2, [pc, #124]	; (800aa30 <TIM_OC1_SetConfig+0xdc>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d10c      	bne.n	800a9d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f023 0308 	bic.w	r3, r3, #8
 800a9be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f023 0304 	bic.w	r3, r3, #4
 800a9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a15      	ldr	r2, [pc, #84]	; (800aa2c <TIM_OC1_SetConfig+0xd8>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d003      	beq.n	800a9e2 <TIM_OC1_SetConfig+0x8e>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a14      	ldr	r2, [pc, #80]	; (800aa30 <TIM_OC1_SetConfig+0xdc>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d111      	bne.n	800aa06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	621a      	str	r2, [r3, #32]
}
 800aa20:	bf00      	nop
 800aa22:	371c      	adds	r7, #28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	40010000 	.word	0x40010000
 800aa30:	40010400 	.word	0x40010400

0800aa34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	f023 0210 	bic.w	r2, r3, #16
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	021b      	lsls	r3, r3, #8
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f023 0320 	bic.w	r3, r3, #32
 800aa7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	011b      	lsls	r3, r3, #4
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a22      	ldr	r2, [pc, #136]	; (800ab18 <TIM_OC2_SetConfig+0xe4>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d003      	beq.n	800aa9c <TIM_OC2_SetConfig+0x68>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a21      	ldr	r2, [pc, #132]	; (800ab1c <TIM_OC2_SetConfig+0xe8>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d10d      	bne.n	800aab8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	011b      	lsls	r3, r3, #4
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a17      	ldr	r2, [pc, #92]	; (800ab18 <TIM_OC2_SetConfig+0xe4>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d003      	beq.n	800aac8 <TIM_OC2_SetConfig+0x94>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a16      	ldr	r2, [pc, #88]	; (800ab1c <TIM_OC2_SetConfig+0xe8>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d113      	bne.n	800aaf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	621a      	str	r2, [r3, #32]
}
 800ab0a:	bf00      	nop
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	40010000 	.word	0x40010000
 800ab1c:	40010400 	.word	0x40010400

0800ab20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 0303 	bic.w	r3, r3, #3
 800ab56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a21      	ldr	r2, [pc, #132]	; (800ac00 <TIM_OC3_SetConfig+0xe0>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d003      	beq.n	800ab86 <TIM_OC3_SetConfig+0x66>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a20      	ldr	r2, [pc, #128]	; (800ac04 <TIM_OC3_SetConfig+0xe4>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d10d      	bne.n	800aba2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	021b      	lsls	r3, r3, #8
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a16      	ldr	r2, [pc, #88]	; (800ac00 <TIM_OC3_SetConfig+0xe0>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d003      	beq.n	800abb2 <TIM_OC3_SetConfig+0x92>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a15      	ldr	r2, [pc, #84]	; (800ac04 <TIM_OC3_SetConfig+0xe4>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d113      	bne.n	800abda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	011b      	lsls	r3, r3, #4
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685a      	ldr	r2, [r3, #4]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	621a      	str	r2, [r3, #32]
}
 800abf4:	bf00      	nop
 800abf6:	371c      	adds	r7, #28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	40010000 	.word	0x40010000
 800ac04:	40010400 	.word	0x40010400

0800ac08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	031b      	lsls	r3, r3, #12
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a12      	ldr	r2, [pc, #72]	; (800acac <TIM_OC4_SetConfig+0xa4>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d003      	beq.n	800ac70 <TIM_OC4_SetConfig+0x68>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a11      	ldr	r2, [pc, #68]	; (800acb0 <TIM_OC4_SetConfig+0xa8>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d109      	bne.n	800ac84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	695b      	ldr	r3, [r3, #20]
 800ac7c:	019b      	lsls	r3, r3, #6
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	621a      	str	r2, [r3, #32]
}
 800ac9e:	bf00      	nop
 800aca0:	371c      	adds	r7, #28
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	40010000 	.word	0x40010000
 800acb0:	40010400 	.word	0x40010400

0800acb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b087      	sub	sp, #28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	f023 0201 	bic.w	r2, r3, #1
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4a28      	ldr	r2, [pc, #160]	; (800ad80 <TIM_TI1_SetConfig+0xcc>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d01b      	beq.n	800ad1a <TIM_TI1_SetConfig+0x66>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ace8:	d017      	beq.n	800ad1a <TIM_TI1_SetConfig+0x66>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4a25      	ldr	r2, [pc, #148]	; (800ad84 <TIM_TI1_SetConfig+0xd0>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d013      	beq.n	800ad1a <TIM_TI1_SetConfig+0x66>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	4a24      	ldr	r2, [pc, #144]	; (800ad88 <TIM_TI1_SetConfig+0xd4>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d00f      	beq.n	800ad1a <TIM_TI1_SetConfig+0x66>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4a23      	ldr	r2, [pc, #140]	; (800ad8c <TIM_TI1_SetConfig+0xd8>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d00b      	beq.n	800ad1a <TIM_TI1_SetConfig+0x66>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	4a22      	ldr	r2, [pc, #136]	; (800ad90 <TIM_TI1_SetConfig+0xdc>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d007      	beq.n	800ad1a <TIM_TI1_SetConfig+0x66>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	4a21      	ldr	r2, [pc, #132]	; (800ad94 <TIM_TI1_SetConfig+0xe0>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d003      	beq.n	800ad1a <TIM_TI1_SetConfig+0x66>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4a20      	ldr	r2, [pc, #128]	; (800ad98 <TIM_TI1_SetConfig+0xe4>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d101      	bne.n	800ad1e <TIM_TI1_SetConfig+0x6a>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e000      	b.n	800ad20 <TIM_TI1_SetConfig+0x6c>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d008      	beq.n	800ad36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f023 0303 	bic.w	r3, r3, #3
 800ad2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	617b      	str	r3, [r7, #20]
 800ad34:	e003      	b.n	800ad3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f043 0301 	orr.w	r3, r3, #1
 800ad3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	011b      	lsls	r3, r3, #4
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	f023 030a 	bic.w	r3, r3, #10
 800ad58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f003 030a 	and.w	r3, r3, #10
 800ad60:	693a      	ldr	r2, [r7, #16]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	621a      	str	r2, [r3, #32]
}
 800ad72:	bf00      	nop
 800ad74:	371c      	adds	r7, #28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	40010000 	.word	0x40010000
 800ad84:	40000400 	.word	0x40000400
 800ad88:	40000800 	.word	0x40000800
 800ad8c:	40000c00 	.word	0x40000c00
 800ad90:	40010400 	.word	0x40010400
 800ad94:	40014000 	.word	0x40014000
 800ad98:	40001800 	.word	0x40001800

0800ad9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b087      	sub	sp, #28
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	f023 0201 	bic.w	r2, r3, #1
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	4313      	orrs	r3, r2
 800add0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f023 030a 	bic.w	r3, r3, #10
 800add8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	4313      	orrs	r3, r2
 800ade0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	621a      	str	r2, [r3, #32]
}
 800adee:	bf00      	nop
 800adf0:	371c      	adds	r7, #28
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b087      	sub	sp, #28
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	607a      	str	r2, [r7, #4]
 800ae06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6a1b      	ldr	r3, [r3, #32]
 800ae0c:	f023 0210 	bic.w	r2, r3, #16
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	021b      	lsls	r3, r3, #8
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	031b      	lsls	r3, r3, #12
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	011b      	lsls	r3, r3, #4
 800ae52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	621a      	str	r2, [r3, #32]
}
 800ae68:	bf00      	nop
 800ae6a:	371c      	adds	r7, #28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a1b      	ldr	r3, [r3, #32]
 800ae84:	f023 0210 	bic.w	r2, r3, #16
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	031b      	lsls	r3, r3, #12
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aeb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	011b      	lsls	r3, r3, #4
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	621a      	str	r2, [r3, #32]
}
 800aec8:	bf00      	nop
 800aeca:	371c      	adds	r7, #28
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b087      	sub	sp, #28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
 800aee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f023 0303 	bic.w	r3, r3, #3
 800af00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4313      	orrs	r3, r2
 800af08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	011b      	lsls	r3, r3, #4
 800af16:	b2db      	uxtb	r3, r3
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800af24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	021b      	lsls	r3, r3, #8
 800af2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	4313      	orrs	r3, r2
 800af32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	621a      	str	r2, [r3, #32]
}
 800af40:	bf00      	nop
 800af42:	371c      	adds	r7, #28
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b087      	sub	sp, #28
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6a1b      	ldr	r3, [r3, #32]
 800af70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	021b      	lsls	r3, r3, #8
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	4313      	orrs	r3, r2
 800af82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	031b      	lsls	r3, r3, #12
 800af90:	b29b      	uxth	r3, r3
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	4313      	orrs	r3, r2
 800af96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800af9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	031b      	lsls	r3, r3, #12
 800afa4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	4313      	orrs	r3, r2
 800afac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	621a      	str	r2, [r3, #32]
}
 800afba:	bf00      	nop
 800afbc:	371c      	adds	r7, #28
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b085      	sub	sp, #20
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	f043 0307 	orr.w	r3, r3, #7
 800afe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	609a      	str	r2, [r3, #8]
}
 800aff0:	bf00      	nop
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800affc:	b480      	push	{r7}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	021a      	lsls	r2, r3, #8
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	431a      	orrs	r2, r3
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4313      	orrs	r3, r2
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	4313      	orrs	r3, r2
 800b028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	609a      	str	r2, [r3, #8]
}
 800b030:	bf00      	nop
 800b032:	371c      	adds	r7, #28
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b087      	sub	sp, #28
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	f003 031f 	and.w	r3, r3, #31
 800b04e:	2201      	movs	r2, #1
 800b050:	fa02 f303 	lsl.w	r3, r2, r3
 800b054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6a1a      	ldr	r2, [r3, #32]
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	43db      	mvns	r3, r3
 800b05e:	401a      	ands	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6a1a      	ldr	r2, [r3, #32]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f003 031f 	and.w	r3, r3, #31
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	fa01 f303 	lsl.w	r3, r1, r3
 800b074:	431a      	orrs	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	621a      	str	r2, [r3, #32]
}
 800b07a:	bf00      	nop
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
	...

0800b088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d101      	bne.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e05a      	b.n	800b156 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a21      	ldr	r2, [pc, #132]	; (800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d022      	beq.n	800b12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ec:	d01d      	beq.n	800b12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a1d      	ldr	r2, [pc, #116]	; (800b168 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d018      	beq.n	800b12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a1b      	ldr	r2, [pc, #108]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d013      	beq.n	800b12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a1a      	ldr	r2, [pc, #104]	; (800b170 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d00e      	beq.n	800b12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a18      	ldr	r2, [pc, #96]	; (800b174 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d009      	beq.n	800b12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a17      	ldr	r2, [pc, #92]	; (800b178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d004      	beq.n	800b12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a15      	ldr	r2, [pc, #84]	; (800b17c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d10c      	bne.n	800b144 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	4313      	orrs	r3, r2
 800b13a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	40010000 	.word	0x40010000
 800b168:	40000400 	.word	0x40000400
 800b16c:	40000800 	.word	0x40000800
 800b170:	40000c00 	.word	0x40000c00
 800b174:	40010400 	.word	0x40010400
 800b178:	40014000 	.word	0x40014000
 800b17c:	40001800 	.word	0x40001800

0800b180 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b194:	2b01      	cmp	r3, #1
 800b196:	d101      	bne.n	800b19c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b198:	2302      	movs	r3, #2
 800b19a:	e03d      	b.n	800b218 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	695b      	ldr	r3, [r3, #20]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	4313      	orrs	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3714      	adds	r7, #20
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e03f      	b.n	800b2de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7fb fc36 	bl	8006ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2224      	movs	r2, #36	; 0x24
 800b27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68da      	ldr	r2, [r3, #12]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b28e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fddf 	bl	800be54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	691a      	ldr	r2, [r3, #16]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	695a      	ldr	r2, [r3, #20]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68da      	ldr	r2, [r3, #12]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b08a      	sub	sp, #40	; 0x28
 800b2ea:	af02      	add	r7, sp, #8
 800b2ec:	60f8      	str	r0, [r7, #12]
 800b2ee:	60b9      	str	r1, [r7, #8]
 800b2f0:	603b      	str	r3, [r7, #0]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b20      	cmp	r3, #32
 800b304:	d17c      	bne.n	800b400 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <HAL_UART_Transmit+0x2c>
 800b30c:	88fb      	ldrh	r3, [r7, #6]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d101      	bne.n	800b316 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e075      	b.n	800b402 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d101      	bne.n	800b324 <HAL_UART_Transmit+0x3e>
 800b320:	2302      	movs	r3, #2
 800b322:	e06e      	b.n	800b402 <HAL_UART_Transmit+0x11c>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2221      	movs	r2, #33	; 0x21
 800b336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b33a:	f7fb fd61 	bl	8006e00 <HAL_GetTick>
 800b33e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	88fa      	ldrh	r2, [r7, #6]
 800b344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	88fa      	ldrh	r2, [r7, #6]
 800b34a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b354:	d108      	bne.n	800b368 <HAL_UART_Transmit+0x82>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d104      	bne.n	800b368 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b35e:	2300      	movs	r3, #0
 800b360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	61bb      	str	r3, [r7, #24]
 800b366:	e003      	b.n	800b370 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b378:	e02a      	b.n	800b3d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2200      	movs	r2, #0
 800b382:	2180      	movs	r1, #128	; 0x80
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f000 fb1f 	bl	800b9c8 <UART_WaitOnFlagUntilTimeout>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b390:	2303      	movs	r3, #3
 800b392:	e036      	b.n	800b402 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10b      	bne.n	800b3b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	881b      	ldrh	r3, [r3, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	3302      	adds	r3, #2
 800b3ae:	61bb      	str	r3, [r7, #24]
 800b3b0:	e007      	b.n	800b3c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	781a      	ldrb	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1cf      	bne.n	800b37a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	9300      	str	r3, [sp, #0]
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2140      	movs	r1, #64	; 0x40
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 faef 	bl	800b9c8 <UART_WaitOnFlagUntilTimeout>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e006      	b.n	800b402 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	e000      	b.n	800b402 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b400:	2302      	movs	r3, #2
  }
}
 800b402:	4618      	mov	r0, r3
 800b404:	3720      	adds	r7, #32
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b084      	sub	sp, #16
 800b40e:	af00      	add	r7, sp, #0
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	4613      	mov	r3, r2
 800b416:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b20      	cmp	r3, #32
 800b422:	d11d      	bne.n	800b460 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d002      	beq.n	800b430 <HAL_UART_Receive_IT+0x26>
 800b42a:	88fb      	ldrh	r3, [r7, #6]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	e016      	b.n	800b462 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d101      	bne.n	800b442 <HAL_UART_Receive_IT+0x38>
 800b43e:	2302      	movs	r3, #2
 800b440:	e00f      	b.n	800b462 <HAL_UART_Receive_IT+0x58>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b450:	88fb      	ldrh	r3, [r7, #6]
 800b452:	461a      	mov	r2, r3
 800b454:	68b9      	ldr	r1, [r7, #8]
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 fb24 	bl	800baa4 <UART_Start_Receive_IT>
 800b45c:	4603      	mov	r3, r0
 800b45e:	e000      	b.n	800b462 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b460:	2302      	movs	r3, #2
  }
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b0ba      	sub	sp, #232	; 0xe8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b492:	2300      	movs	r3, #0
 800b494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b498:	2300      	movs	r3, #0
 800b49a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a2:	f003 030f 	and.w	r3, r3, #15
 800b4a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b4aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10f      	bne.n	800b4d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b6:	f003 0320 	and.w	r3, r3, #32
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d009      	beq.n	800b4d2 <HAL_UART_IRQHandler+0x66>
 800b4be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c2:	f003 0320 	and.w	r3, r3, #32
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fc07 	bl	800bcde <UART_Receive_IT>
      return;
 800b4d0:	e256      	b.n	800b980 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b4d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 80de 	beq.w	800b698 <HAL_UART_IRQHandler+0x22c>
 800b4dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4e0:	f003 0301 	and.w	r3, r3, #1
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d106      	bne.n	800b4f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b4e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 80d1 	beq.w	800b698 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00b      	beq.n	800b51a <HAL_UART_IRQHandler+0xae>
 800b502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d005      	beq.n	800b51a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b512:	f043 0201 	orr.w	r2, r3, #1
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b51e:	f003 0304 	and.w	r3, r3, #4
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00b      	beq.n	800b53e <HAL_UART_IRQHandler+0xd2>
 800b526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d005      	beq.n	800b53e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b536:	f043 0202 	orr.w	r2, r3, #2
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b542:	f003 0302 	and.w	r3, r3, #2
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00b      	beq.n	800b562 <HAL_UART_IRQHandler+0xf6>
 800b54a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	2b00      	cmp	r3, #0
 800b554:	d005      	beq.n	800b562 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b55a:	f043 0204 	orr.w	r2, r3, #4
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d011      	beq.n	800b592 <HAL_UART_IRQHandler+0x126>
 800b56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b572:	f003 0320 	and.w	r3, r3, #32
 800b576:	2b00      	cmp	r3, #0
 800b578:	d105      	bne.n	800b586 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b57a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b57e:	f003 0301 	and.w	r3, r3, #1
 800b582:	2b00      	cmp	r3, #0
 800b584:	d005      	beq.n	800b592 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58a:	f043 0208 	orr.w	r2, r3, #8
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 81ed 	beq.w	800b976 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b59c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5a0:	f003 0320 	and.w	r3, r3, #32
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d008      	beq.n	800b5ba <HAL_UART_IRQHandler+0x14e>
 800b5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ac:	f003 0320 	and.w	r3, r3, #32
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fb92 	bl	800bcde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c4:	2b40      	cmp	r3, #64	; 0x40
 800b5c6:	bf0c      	ite	eq
 800b5c8:	2301      	moveq	r3, #1
 800b5ca:	2300      	movne	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d6:	f003 0308 	and.w	r3, r3, #8
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d103      	bne.n	800b5e6 <HAL_UART_IRQHandler+0x17a>
 800b5de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d04f      	beq.n	800b686 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fa9a 	bl	800bb20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f6:	2b40      	cmp	r3, #64	; 0x40
 800b5f8:	d141      	bne.n	800b67e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3314      	adds	r3, #20
 800b600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3314      	adds	r3, #20
 800b622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b62a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b63e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1d9      	bne.n	800b5fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d013      	beq.n	800b676 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b652:	4a7d      	ldr	r2, [pc, #500]	; (800b848 <HAL_UART_IRQHandler+0x3dc>)
 800b654:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fc f952 	bl	8007904 <HAL_DMA_Abort_IT>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d016      	beq.n	800b694 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b670:	4610      	mov	r0, r2
 800b672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b674:	e00e      	b.n	800b694 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f990 	bl	800b99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b67c:	e00a      	b.n	800b694 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f98c 	bl	800b99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b684:	e006      	b.n	800b694 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f988 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b692:	e170      	b.n	800b976 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b694:	bf00      	nop
    return;
 800b696:	e16e      	b.n	800b976 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	f040 814a 	bne.w	800b936 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b6a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a6:	f003 0310 	and.w	r3, r3, #16
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 8143 	beq.w	800b936 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6b4:	f003 0310 	and.w	r3, r3, #16
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 813c 	beq.w	800b936 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b6be:	2300      	movs	r3, #0
 800b6c0:	60bb      	str	r3, [r7, #8]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	60bb      	str	r3, [r7, #8]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	60bb      	str	r3, [r7, #8]
 800b6d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6de:	2b40      	cmp	r3, #64	; 0x40
 800b6e0:	f040 80b4 	bne.w	800b84c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b6f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 8140 	beq.w	800b97a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b6fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b702:	429a      	cmp	r2, r3
 800b704:	f080 8139 	bcs.w	800b97a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b70e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b71a:	f000 8088 	beq.w	800b82e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	330c      	adds	r3, #12
 800b724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b72c:	e853 3f00 	ldrex	r3, [r3]
 800b730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b73c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	330c      	adds	r3, #12
 800b746:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b74a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b74e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b752:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b756:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d1d9      	bne.n	800b71e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3314      	adds	r3, #20
 800b770:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b774:	e853 3f00 	ldrex	r3, [r3]
 800b778:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b77a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b77c:	f023 0301 	bic.w	r3, r3, #1
 800b780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3314      	adds	r3, #20
 800b78a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b78e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b792:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b794:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b796:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b79a:	e841 2300 	strex	r3, r2, [r1]
 800b79e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b7a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e1      	bne.n	800b76a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3314      	adds	r3, #20
 800b7ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b7b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3314      	adds	r3, #20
 800b7c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b7ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e3      	bne.n	800b7a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	330c      	adds	r3, #12
 800b7f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b7fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7fe:	f023 0310 	bic.w	r3, r3, #16
 800b802:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	330c      	adds	r3, #12
 800b80c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b810:	65ba      	str	r2, [r7, #88]	; 0x58
 800b812:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b814:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b818:	e841 2300 	strex	r3, r2, [r1]
 800b81c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b81e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1e3      	bne.n	800b7ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fb fffb 	bl	8007824 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b836:	b29b      	uxth	r3, r3
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f8b6 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b844:	e099      	b.n	800b97a <HAL_UART_IRQHandler+0x50e>
 800b846:	bf00      	nop
 800b848:	0800bbe7 	.word	0x0800bbe7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b854:	b29b      	uxth	r3, r3
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b860:	b29b      	uxth	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	f000 808b 	beq.w	800b97e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 8086 	beq.w	800b97e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	330c      	adds	r3, #12
 800b878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87c:	e853 3f00 	ldrex	r3, [r3]
 800b880:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	330c      	adds	r3, #12
 800b892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b896:	647a      	str	r2, [r7, #68]	; 0x44
 800b898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b89c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e3      	bne.n	800b872 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	f023 0301 	bic.w	r3, r3, #1
 800b8c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3314      	adds	r3, #20
 800b8ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b8ce:	633a      	str	r2, [r7, #48]	; 0x30
 800b8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e3      	bne.n	800b8aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2220      	movs	r2, #32
 800b8e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	330c      	adds	r3, #12
 800b8f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	e853 3f00 	ldrex	r3, [r3]
 800b8fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f023 0310 	bic.w	r3, r3, #16
 800b906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	330c      	adds	r3, #12
 800b910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b914:	61fa      	str	r2, [r7, #28]
 800b916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b918:	69b9      	ldr	r1, [r7, #24]
 800b91a:	69fa      	ldr	r2, [r7, #28]
 800b91c:	e841 2300 	strex	r3, r2, [r1]
 800b920:	617b      	str	r3, [r7, #20]
   return(result);
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1e3      	bne.n	800b8f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f83e 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b934:	e023      	b.n	800b97e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d009      	beq.n	800b956 <HAL_UART_IRQHandler+0x4ea>
 800b942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d003      	beq.n	800b956 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f95d 	bl	800bc0e <UART_Transmit_IT>
    return;
 800b954:	e014      	b.n	800b980 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00e      	beq.n	800b980 <HAL_UART_IRQHandler+0x514>
 800b962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d008      	beq.n	800b980 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f99d 	bl	800bcae <UART_EndTransmit_IT>
    return;
 800b974:	e004      	b.n	800b980 <HAL_UART_IRQHandler+0x514>
    return;
 800b976:	bf00      	nop
 800b978:	e002      	b.n	800b980 <HAL_UART_IRQHandler+0x514>
      return;
 800b97a:	bf00      	nop
 800b97c:	e000      	b.n	800b980 <HAL_UART_IRQHandler+0x514>
      return;
 800b97e:	bf00      	nop
  }
}
 800b980:	37e8      	adds	r7, #232	; 0xe8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop

0800b988 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b090      	sub	sp, #64	; 0x40
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	603b      	str	r3, [r7, #0]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9d8:	e050      	b.n	800ba7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9e0:	d04c      	beq.n	800ba7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b9e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d007      	beq.n	800b9f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b9e8:	f7fb fa0a 	bl	8006e00 <HAL_GetTick>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d241      	bcs.n	800ba7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	330c      	adds	r3, #12
 800b9fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	e853 3f00 	ldrex	r3, [r3]
 800ba06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	330c      	adds	r3, #12
 800ba16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba18:	637a      	str	r2, [r7, #52]	; 0x34
 800ba1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba20:	e841 2300 	strex	r3, r2, [r1]
 800ba24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1e5      	bne.n	800b9f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	3314      	adds	r3, #20
 800ba32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	e853 3f00 	ldrex	r3, [r3]
 800ba3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	f023 0301 	bic.w	r3, r3, #1
 800ba42:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3314      	adds	r3, #20
 800ba4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba4c:	623a      	str	r2, [r7, #32]
 800ba4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba50:	69f9      	ldr	r1, [r7, #28]
 800ba52:	6a3a      	ldr	r2, [r7, #32]
 800ba54:	e841 2300 	strex	r3, r2, [r1]
 800ba58:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1e5      	bne.n	800ba2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2220      	movs	r2, #32
 800ba64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e00f      	b.n	800ba9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	4013      	ands	r3, r2
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	bf0c      	ite	eq
 800ba8c:	2301      	moveq	r3, #1
 800ba8e:	2300      	movne	r3, #0
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d09f      	beq.n	800b9da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3740      	adds	r7, #64	; 0x40
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	4613      	mov	r3, r2
 800bab0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	88fa      	ldrh	r2, [r7, #6]
 800babc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	88fa      	ldrh	r2, [r7, #6]
 800bac2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2222      	movs	r2, #34	; 0x22
 800bace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d007      	beq.n	800baf2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68da      	ldr	r2, [r3, #12]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baf0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	695a      	ldr	r2, [r3, #20]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f042 0201 	orr.w	r2, r2, #1
 800bb00:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68da      	ldr	r2, [r3, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f042 0220 	orr.w	r2, r2, #32
 800bb10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b095      	sub	sp, #84	; 0x54
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	330c      	adds	r3, #12
 800bb2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb32:	e853 3f00 	ldrex	r3, [r3]
 800bb36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	330c      	adds	r3, #12
 800bb46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb48:	643a      	str	r2, [r7, #64]	; 0x40
 800bb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e5      	bne.n	800bb28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3314      	adds	r3, #20
 800bb62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	6a3b      	ldr	r3, [r7, #32]
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	f023 0301 	bic.w	r3, r3, #1
 800bb72:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3314      	adds	r3, #20
 800bb7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb84:	e841 2300 	strex	r3, r2, [r1]
 800bb88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e5      	bne.n	800bb5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d119      	bne.n	800bbcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	330c      	adds	r3, #12
 800bb9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	e853 3f00 	ldrex	r3, [r3]
 800bba6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	f023 0310 	bic.w	r3, r3, #16
 800bbae:	647b      	str	r3, [r7, #68]	; 0x44
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	330c      	adds	r3, #12
 800bbb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbb8:	61ba      	str	r2, [r7, #24]
 800bbba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbc:	6979      	ldr	r1, [r7, #20]
 800bbbe:	69ba      	ldr	r2, [r7, #24]
 800bbc0:	e841 2300 	strex	r3, r2, [r1]
 800bbc4:	613b      	str	r3, [r7, #16]
   return(result);
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e5      	bne.n	800bb98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2220      	movs	r2, #32
 800bbd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bbda:	bf00      	nop
 800bbdc:	3754      	adds	r7, #84	; 0x54
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b084      	sub	sp, #16
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f7ff fecb 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc06:	bf00      	nop
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b085      	sub	sp, #20
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b21      	cmp	r3, #33	; 0x21
 800bc20:	d13e      	bne.n	800bca0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc2a:	d114      	bne.n	800bc56 <UART_Transmit_IT+0x48>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d110      	bne.n	800bc56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a1b      	ldr	r3, [r3, #32]
 800bc38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	1c9a      	adds	r2, r3, #2
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	621a      	str	r2, [r3, #32]
 800bc54:	e008      	b.n	800bc68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	1c59      	adds	r1, r3, #1
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	6211      	str	r1, [r2, #32]
 800bc60:	781a      	ldrb	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	4619      	mov	r1, r3
 800bc76:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10f      	bne.n	800bc9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68da      	ldr	r2, [r3, #12]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	68da      	ldr	r2, [r3, #12]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	e000      	b.n	800bca2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bca0:	2302      	movs	r3, #2
  }
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b082      	sub	sp, #8
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68da      	ldr	r2, [r3, #12]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2220      	movs	r2, #32
 800bcca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7ff fe5a 	bl	800b988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b08c      	sub	sp, #48	; 0x30
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b22      	cmp	r3, #34	; 0x22
 800bcf0:	f040 80ab 	bne.w	800be4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcfc:	d117      	bne.n	800bd2e <UART_Receive_IT+0x50>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d113      	bne.n	800bd2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd26:	1c9a      	adds	r2, r3, #2
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	629a      	str	r2, [r3, #40]	; 0x28
 800bd2c:	e026      	b.n	800bd7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bd34:	2300      	movs	r3, #0
 800bd36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd40:	d007      	beq.n	800bd52 <UART_Receive_IT+0x74>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10a      	bne.n	800bd60 <UART_Receive_IT+0x82>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d106      	bne.n	800bd60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5c:	701a      	strb	r2, [r3, #0]
 800bd5e:	e008      	b.n	800bd72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	3b01      	subs	r3, #1
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d15a      	bne.n	800be46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68da      	ldr	r2, [r3, #12]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0220 	bic.w	r2, r2, #32
 800bd9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68da      	ldr	r2, [r3, #12]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	695a      	ldr	r2, [r3, #20]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 0201 	bic.w	r2, r2, #1
 800bdbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d135      	bne.n	800be3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	330c      	adds	r3, #12
 800bddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	613b      	str	r3, [r7, #16]
   return(result);
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f023 0310 	bic.w	r3, r3, #16
 800bdec:	627b      	str	r3, [r7, #36]	; 0x24
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	330c      	adds	r3, #12
 800bdf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf6:	623a      	str	r2, [r7, #32]
 800bdf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	69f9      	ldr	r1, [r7, #28]
 800bdfc:	6a3a      	ldr	r2, [r7, #32]
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	61bb      	str	r3, [r7, #24]
   return(result);
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e5      	bne.n	800bdd6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 0310 	and.w	r3, r3, #16
 800be14:	2b10      	cmp	r3, #16
 800be16:	d10a      	bne.n	800be2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be18:	2300      	movs	r3, #0
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	60fb      	str	r3, [r7, #12]
 800be2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be32:	4619      	mov	r1, r3
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff fdbb 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
 800be3a:	e002      	b.n	800be42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7f5 fed1 	bl	8001be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	e002      	b.n	800be4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	e000      	b.n	800be4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800be4a:	2302      	movs	r3, #2
  }
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3730      	adds	r7, #48	; 0x30
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be58:	b0c0      	sub	sp, #256	; 0x100
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800be6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be70:	68d9      	ldr	r1, [r3, #12]
 800be72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	ea40 0301 	orr.w	r3, r0, r1
 800be7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800be7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be82:	689a      	ldr	r2, [r3, #8]
 800be84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	431a      	orrs	r2, r3
 800be8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	431a      	orrs	r2, r3
 800be94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800beac:	f021 010c 	bic.w	r1, r1, #12
 800beb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800beba:	430b      	orrs	r3, r1
 800bebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800beca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bece:	6999      	ldr	r1, [r3, #24]
 800bed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	ea40 0301 	orr.w	r3, r0, r1
 800beda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bedc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	4b8f      	ldr	r3, [pc, #572]	; (800c120 <UART_SetConfig+0x2cc>)
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d005      	beq.n	800bef4 <UART_SetConfig+0xa0>
 800bee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	4b8d      	ldr	r3, [pc, #564]	; (800c124 <UART_SetConfig+0x2d0>)
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d104      	bne.n	800befe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bef4:	f7fd fb0a 	bl	800950c <HAL_RCC_GetPCLK2Freq>
 800bef8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800befc:	e003      	b.n	800bf06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800befe:	f7fd faf1 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 800bf02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf0a:	69db      	ldr	r3, [r3, #28]
 800bf0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf10:	f040 810c 	bne.w	800c12c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bf14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bf1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bf22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bf26:	4622      	mov	r2, r4
 800bf28:	462b      	mov	r3, r5
 800bf2a:	1891      	adds	r1, r2, r2
 800bf2c:	65b9      	str	r1, [r7, #88]	; 0x58
 800bf2e:	415b      	adcs	r3, r3
 800bf30:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bf36:	4621      	mov	r1, r4
 800bf38:	eb12 0801 	adds.w	r8, r2, r1
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	eb43 0901 	adc.w	r9, r3, r1
 800bf42:	f04f 0200 	mov.w	r2, #0
 800bf46:	f04f 0300 	mov.w	r3, #0
 800bf4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf56:	4690      	mov	r8, r2
 800bf58:	4699      	mov	r9, r3
 800bf5a:	4623      	mov	r3, r4
 800bf5c:	eb18 0303 	adds.w	r3, r8, r3
 800bf60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf64:	462b      	mov	r3, r5
 800bf66:	eb49 0303 	adc.w	r3, r9, r3
 800bf6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bf7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bf7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bf82:	460b      	mov	r3, r1
 800bf84:	18db      	adds	r3, r3, r3
 800bf86:	653b      	str	r3, [r7, #80]	; 0x50
 800bf88:	4613      	mov	r3, r2
 800bf8a:	eb42 0303 	adc.w	r3, r2, r3
 800bf8e:	657b      	str	r3, [r7, #84]	; 0x54
 800bf90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bf94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bf98:	f7f4 fe30 	bl	8000bfc <__aeabi_uldivmod>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4b61      	ldr	r3, [pc, #388]	; (800c128 <UART_SetConfig+0x2d4>)
 800bfa2:	fba3 2302 	umull	r2, r3, r3, r2
 800bfa6:	095b      	lsrs	r3, r3, #5
 800bfa8:	011c      	lsls	r4, r3, #4
 800bfaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bfb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bfbc:	4642      	mov	r2, r8
 800bfbe:	464b      	mov	r3, r9
 800bfc0:	1891      	adds	r1, r2, r2
 800bfc2:	64b9      	str	r1, [r7, #72]	; 0x48
 800bfc4:	415b      	adcs	r3, r3
 800bfc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bfcc:	4641      	mov	r1, r8
 800bfce:	eb12 0a01 	adds.w	sl, r2, r1
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	eb43 0b01 	adc.w	fp, r3, r1
 800bfd8:	f04f 0200 	mov.w	r2, #0
 800bfdc:	f04f 0300 	mov.w	r3, #0
 800bfe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bfe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bfe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bfec:	4692      	mov	sl, r2
 800bfee:	469b      	mov	fp, r3
 800bff0:	4643      	mov	r3, r8
 800bff2:	eb1a 0303 	adds.w	r3, sl, r3
 800bff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bffa:	464b      	mov	r3, r9
 800bffc:	eb4b 0303 	adc.w	r3, fp, r3
 800c000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c010:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c018:	460b      	mov	r3, r1
 800c01a:	18db      	adds	r3, r3, r3
 800c01c:	643b      	str	r3, [r7, #64]	; 0x40
 800c01e:	4613      	mov	r3, r2
 800c020:	eb42 0303 	adc.w	r3, r2, r3
 800c024:	647b      	str	r3, [r7, #68]	; 0x44
 800c026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c02a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c02e:	f7f4 fde5 	bl	8000bfc <__aeabi_uldivmod>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	4611      	mov	r1, r2
 800c038:	4b3b      	ldr	r3, [pc, #236]	; (800c128 <UART_SetConfig+0x2d4>)
 800c03a:	fba3 2301 	umull	r2, r3, r3, r1
 800c03e:	095b      	lsrs	r3, r3, #5
 800c040:	2264      	movs	r2, #100	; 0x64
 800c042:	fb02 f303 	mul.w	r3, r2, r3
 800c046:	1acb      	subs	r3, r1, r3
 800c048:	00db      	lsls	r3, r3, #3
 800c04a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c04e:	4b36      	ldr	r3, [pc, #216]	; (800c128 <UART_SetConfig+0x2d4>)
 800c050:	fba3 2302 	umull	r2, r3, r3, r2
 800c054:	095b      	lsrs	r3, r3, #5
 800c056:	005b      	lsls	r3, r3, #1
 800c058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c05c:	441c      	add	r4, r3
 800c05e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c062:	2200      	movs	r2, #0
 800c064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c068:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c06c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c070:	4642      	mov	r2, r8
 800c072:	464b      	mov	r3, r9
 800c074:	1891      	adds	r1, r2, r2
 800c076:	63b9      	str	r1, [r7, #56]	; 0x38
 800c078:	415b      	adcs	r3, r3
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c07c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c080:	4641      	mov	r1, r8
 800c082:	1851      	adds	r1, r2, r1
 800c084:	6339      	str	r1, [r7, #48]	; 0x30
 800c086:	4649      	mov	r1, r9
 800c088:	414b      	adcs	r3, r1
 800c08a:	637b      	str	r3, [r7, #52]	; 0x34
 800c08c:	f04f 0200 	mov.w	r2, #0
 800c090:	f04f 0300 	mov.w	r3, #0
 800c094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c098:	4659      	mov	r1, fp
 800c09a:	00cb      	lsls	r3, r1, #3
 800c09c:	4651      	mov	r1, sl
 800c09e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0a2:	4651      	mov	r1, sl
 800c0a4:	00ca      	lsls	r2, r1, #3
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	4642      	mov	r2, r8
 800c0ae:	189b      	adds	r3, r3, r2
 800c0b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c0b4:	464b      	mov	r3, r9
 800c0b6:	460a      	mov	r2, r1
 800c0b8:	eb42 0303 	adc.w	r3, r2, r3
 800c0bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c0cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c0d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	18db      	adds	r3, r3, r3
 800c0d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0da:	4613      	mov	r3, r2
 800c0dc:	eb42 0303 	adc.w	r3, r2, r3
 800c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c0e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c0ea:	f7f4 fd87 	bl	8000bfc <__aeabi_uldivmod>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4b0d      	ldr	r3, [pc, #52]	; (800c128 <UART_SetConfig+0x2d4>)
 800c0f4:	fba3 1302 	umull	r1, r3, r3, r2
 800c0f8:	095b      	lsrs	r3, r3, #5
 800c0fa:	2164      	movs	r1, #100	; 0x64
 800c0fc:	fb01 f303 	mul.w	r3, r1, r3
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	00db      	lsls	r3, r3, #3
 800c104:	3332      	adds	r3, #50	; 0x32
 800c106:	4a08      	ldr	r2, [pc, #32]	; (800c128 <UART_SetConfig+0x2d4>)
 800c108:	fba2 2303 	umull	r2, r3, r2, r3
 800c10c:	095b      	lsrs	r3, r3, #5
 800c10e:	f003 0207 	and.w	r2, r3, #7
 800c112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4422      	add	r2, r4
 800c11a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c11c:	e106      	b.n	800c32c <UART_SetConfig+0x4d8>
 800c11e:	bf00      	nop
 800c120:	40011000 	.word	0x40011000
 800c124:	40011400 	.word	0x40011400
 800c128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c12c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c130:	2200      	movs	r2, #0
 800c132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c136:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c13a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c13e:	4642      	mov	r2, r8
 800c140:	464b      	mov	r3, r9
 800c142:	1891      	adds	r1, r2, r2
 800c144:	6239      	str	r1, [r7, #32]
 800c146:	415b      	adcs	r3, r3
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
 800c14a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c14e:	4641      	mov	r1, r8
 800c150:	1854      	adds	r4, r2, r1
 800c152:	4649      	mov	r1, r9
 800c154:	eb43 0501 	adc.w	r5, r3, r1
 800c158:	f04f 0200 	mov.w	r2, #0
 800c15c:	f04f 0300 	mov.w	r3, #0
 800c160:	00eb      	lsls	r3, r5, #3
 800c162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c166:	00e2      	lsls	r2, r4, #3
 800c168:	4614      	mov	r4, r2
 800c16a:	461d      	mov	r5, r3
 800c16c:	4643      	mov	r3, r8
 800c16e:	18e3      	adds	r3, r4, r3
 800c170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c174:	464b      	mov	r3, r9
 800c176:	eb45 0303 	adc.w	r3, r5, r3
 800c17a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c17e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c18a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c18e:	f04f 0200 	mov.w	r2, #0
 800c192:	f04f 0300 	mov.w	r3, #0
 800c196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c19a:	4629      	mov	r1, r5
 800c19c:	008b      	lsls	r3, r1, #2
 800c19e:	4621      	mov	r1, r4
 800c1a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	008a      	lsls	r2, r1, #2
 800c1a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c1ac:	f7f4 fd26 	bl	8000bfc <__aeabi_uldivmod>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4b60      	ldr	r3, [pc, #384]	; (800c338 <UART_SetConfig+0x4e4>)
 800c1b6:	fba3 2302 	umull	r2, r3, r3, r2
 800c1ba:	095b      	lsrs	r3, r3, #5
 800c1bc:	011c      	lsls	r4, r3, #4
 800c1be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c1c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c1cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c1d0:	4642      	mov	r2, r8
 800c1d2:	464b      	mov	r3, r9
 800c1d4:	1891      	adds	r1, r2, r2
 800c1d6:	61b9      	str	r1, [r7, #24]
 800c1d8:	415b      	adcs	r3, r3
 800c1da:	61fb      	str	r3, [r7, #28]
 800c1dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c1e0:	4641      	mov	r1, r8
 800c1e2:	1851      	adds	r1, r2, r1
 800c1e4:	6139      	str	r1, [r7, #16]
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	414b      	adcs	r3, r1
 800c1ea:	617b      	str	r3, [r7, #20]
 800c1ec:	f04f 0200 	mov.w	r2, #0
 800c1f0:	f04f 0300 	mov.w	r3, #0
 800c1f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c1f8:	4659      	mov	r1, fp
 800c1fa:	00cb      	lsls	r3, r1, #3
 800c1fc:	4651      	mov	r1, sl
 800c1fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c202:	4651      	mov	r1, sl
 800c204:	00ca      	lsls	r2, r1, #3
 800c206:	4610      	mov	r0, r2
 800c208:	4619      	mov	r1, r3
 800c20a:	4603      	mov	r3, r0
 800c20c:	4642      	mov	r2, r8
 800c20e:	189b      	adds	r3, r3, r2
 800c210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c214:	464b      	mov	r3, r9
 800c216:	460a      	mov	r2, r1
 800c218:	eb42 0303 	adc.w	r3, r2, r3
 800c21c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	67bb      	str	r3, [r7, #120]	; 0x78
 800c22a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c22c:	f04f 0200 	mov.w	r2, #0
 800c230:	f04f 0300 	mov.w	r3, #0
 800c234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c238:	4649      	mov	r1, r9
 800c23a:	008b      	lsls	r3, r1, #2
 800c23c:	4641      	mov	r1, r8
 800c23e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c242:	4641      	mov	r1, r8
 800c244:	008a      	lsls	r2, r1, #2
 800c246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c24a:	f7f4 fcd7 	bl	8000bfc <__aeabi_uldivmod>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	4611      	mov	r1, r2
 800c254:	4b38      	ldr	r3, [pc, #224]	; (800c338 <UART_SetConfig+0x4e4>)
 800c256:	fba3 2301 	umull	r2, r3, r3, r1
 800c25a:	095b      	lsrs	r3, r3, #5
 800c25c:	2264      	movs	r2, #100	; 0x64
 800c25e:	fb02 f303 	mul.w	r3, r2, r3
 800c262:	1acb      	subs	r3, r1, r3
 800c264:	011b      	lsls	r3, r3, #4
 800c266:	3332      	adds	r3, #50	; 0x32
 800c268:	4a33      	ldr	r2, [pc, #204]	; (800c338 <UART_SetConfig+0x4e4>)
 800c26a:	fba2 2303 	umull	r2, r3, r2, r3
 800c26e:	095b      	lsrs	r3, r3, #5
 800c270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c274:	441c      	add	r4, r3
 800c276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c27a:	2200      	movs	r2, #0
 800c27c:	673b      	str	r3, [r7, #112]	; 0x70
 800c27e:	677a      	str	r2, [r7, #116]	; 0x74
 800c280:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c284:	4642      	mov	r2, r8
 800c286:	464b      	mov	r3, r9
 800c288:	1891      	adds	r1, r2, r2
 800c28a:	60b9      	str	r1, [r7, #8]
 800c28c:	415b      	adcs	r3, r3
 800c28e:	60fb      	str	r3, [r7, #12]
 800c290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c294:	4641      	mov	r1, r8
 800c296:	1851      	adds	r1, r2, r1
 800c298:	6039      	str	r1, [r7, #0]
 800c29a:	4649      	mov	r1, r9
 800c29c:	414b      	adcs	r3, r1
 800c29e:	607b      	str	r3, [r7, #4]
 800c2a0:	f04f 0200 	mov.w	r2, #0
 800c2a4:	f04f 0300 	mov.w	r3, #0
 800c2a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c2ac:	4659      	mov	r1, fp
 800c2ae:	00cb      	lsls	r3, r1, #3
 800c2b0:	4651      	mov	r1, sl
 800c2b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2b6:	4651      	mov	r1, sl
 800c2b8:	00ca      	lsls	r2, r1, #3
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	4619      	mov	r1, r3
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4642      	mov	r2, r8
 800c2c2:	189b      	adds	r3, r3, r2
 800c2c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	460a      	mov	r2, r1
 800c2ca:	eb42 0303 	adc.w	r3, r2, r3
 800c2ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	663b      	str	r3, [r7, #96]	; 0x60
 800c2da:	667a      	str	r2, [r7, #100]	; 0x64
 800c2dc:	f04f 0200 	mov.w	r2, #0
 800c2e0:	f04f 0300 	mov.w	r3, #0
 800c2e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c2e8:	4649      	mov	r1, r9
 800c2ea:	008b      	lsls	r3, r1, #2
 800c2ec:	4641      	mov	r1, r8
 800c2ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2f2:	4641      	mov	r1, r8
 800c2f4:	008a      	lsls	r2, r1, #2
 800c2f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c2fa:	f7f4 fc7f 	bl	8000bfc <__aeabi_uldivmod>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4b0d      	ldr	r3, [pc, #52]	; (800c338 <UART_SetConfig+0x4e4>)
 800c304:	fba3 1302 	umull	r1, r3, r3, r2
 800c308:	095b      	lsrs	r3, r3, #5
 800c30a:	2164      	movs	r1, #100	; 0x64
 800c30c:	fb01 f303 	mul.w	r3, r1, r3
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	011b      	lsls	r3, r3, #4
 800c314:	3332      	adds	r3, #50	; 0x32
 800c316:	4a08      	ldr	r2, [pc, #32]	; (800c338 <UART_SetConfig+0x4e4>)
 800c318:	fba2 2303 	umull	r2, r3, r2, r3
 800c31c:	095b      	lsrs	r3, r3, #5
 800c31e:	f003 020f 	and.w	r2, r3, #15
 800c322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4422      	add	r2, r4
 800c32a:	609a      	str	r2, [r3, #8]
}
 800c32c:	bf00      	nop
 800c32e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c332:	46bd      	mov	sp, r7
 800c334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c338:	51eb851f 	.word	0x51eb851f

0800c33c <__NVIC_SetPriority>:
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	4603      	mov	r3, r0
 800c344:	6039      	str	r1, [r7, #0]
 800c346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	db0a      	blt.n	800c366 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	b2da      	uxtb	r2, r3
 800c354:	490c      	ldr	r1, [pc, #48]	; (800c388 <__NVIC_SetPriority+0x4c>)
 800c356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c35a:	0112      	lsls	r2, r2, #4
 800c35c:	b2d2      	uxtb	r2, r2
 800c35e:	440b      	add	r3, r1
 800c360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c364:	e00a      	b.n	800c37c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	4908      	ldr	r1, [pc, #32]	; (800c38c <__NVIC_SetPriority+0x50>)
 800c36c:	79fb      	ldrb	r3, [r7, #7]
 800c36e:	f003 030f 	and.w	r3, r3, #15
 800c372:	3b04      	subs	r3, #4
 800c374:	0112      	lsls	r2, r2, #4
 800c376:	b2d2      	uxtb	r2, r2
 800c378:	440b      	add	r3, r1
 800c37a:	761a      	strb	r2, [r3, #24]
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	e000e100 	.word	0xe000e100
 800c38c:	e000ed00 	.word	0xe000ed00

0800c390 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c394:	4b05      	ldr	r3, [pc, #20]	; (800c3ac <SysTick_Handler+0x1c>)
 800c396:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c398:	f001 fcfe 	bl	800dd98 <xTaskGetSchedulerState>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d001      	beq.n	800c3a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c3a2:	f002 fae9 	bl	800e978 <xPortSysTickHandler>
  }
}
 800c3a6:	bf00      	nop
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	e000e010 	.word	0xe000e010

0800c3b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	f06f 0004 	mvn.w	r0, #4
 800c3ba:	f7ff ffbf 	bl	800c33c <__NVIC_SetPriority>
#endif
}
 800c3be:	bf00      	nop
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3ca:	f3ef 8305 	mrs	r3, IPSR
 800c3ce:	603b      	str	r3, [r7, #0]
  return(result);
 800c3d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d003      	beq.n	800c3de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c3d6:	f06f 0305 	mvn.w	r3, #5
 800c3da:	607b      	str	r3, [r7, #4]
 800c3dc:	e00c      	b.n	800c3f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c3de:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <osKernelInitialize+0x44>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d105      	bne.n	800c3f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c3e6:	4b08      	ldr	r3, [pc, #32]	; (800c408 <osKernelInitialize+0x44>)
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	607b      	str	r3, [r7, #4]
 800c3f0:	e002      	b.n	800c3f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c3f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c3f8:	687b      	ldr	r3, [r7, #4]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	200005cc 	.word	0x200005cc

0800c40c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c412:	f3ef 8305 	mrs	r3, IPSR
 800c416:	603b      	str	r3, [r7, #0]
  return(result);
 800c418:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d003      	beq.n	800c426 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c41e:	f06f 0305 	mvn.w	r3, #5
 800c422:	607b      	str	r3, [r7, #4]
 800c424:	e010      	b.n	800c448 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c426:	4b0b      	ldr	r3, [pc, #44]	; (800c454 <osKernelStart+0x48>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d109      	bne.n	800c442 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c42e:	f7ff ffbf 	bl	800c3b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c432:	4b08      	ldr	r3, [pc, #32]	; (800c454 <osKernelStart+0x48>)
 800c434:	2202      	movs	r2, #2
 800c436:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c438:	f001 f866 	bl	800d508 <vTaskStartScheduler>
      stat = osOK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	607b      	str	r3, [r7, #4]
 800c440:	e002      	b.n	800c448 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c446:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c448:	687b      	ldr	r3, [r7, #4]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	200005cc 	.word	0x200005cc

0800c458 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08e      	sub	sp, #56	; 0x38
 800c45c:	af04      	add	r7, sp, #16
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c464:	2300      	movs	r3, #0
 800c466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c468:	f3ef 8305 	mrs	r3, IPSR
 800c46c:	617b      	str	r3, [r7, #20]
  return(result);
 800c46e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c470:	2b00      	cmp	r3, #0
 800c472:	d17e      	bne.n	800c572 <osThreadNew+0x11a>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d07b      	beq.n	800c572 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c47a:	2380      	movs	r3, #128	; 0x80
 800c47c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c47e:	2318      	movs	r3, #24
 800c480:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c482:	2300      	movs	r3, #0
 800c484:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c48a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d045      	beq.n	800c51e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <osThreadNew+0x48>
        name = attr->name;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	699b      	ldr	r3, [r3, #24]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d008      	beq.n	800c4c6 <osThreadNew+0x6e>
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	2b38      	cmp	r3, #56	; 0x38
 800c4b8:	d805      	bhi.n	800c4c6 <osThreadNew+0x6e>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <osThreadNew+0x72>
        return (NULL);
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e054      	b.n	800c574 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	089b      	lsrs	r3, r3, #2
 800c4d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00e      	beq.n	800c500 <osThreadNew+0xa8>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	2b5b      	cmp	r3, #91	; 0x5b
 800c4e8:	d90a      	bls.n	800c500 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d006      	beq.n	800c500 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	695b      	ldr	r3, [r3, #20]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d002      	beq.n	800c500 <osThreadNew+0xa8>
        mem = 1;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	61bb      	str	r3, [r7, #24]
 800c4fe:	e010      	b.n	800c522 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10c      	bne.n	800c522 <osThreadNew+0xca>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d108      	bne.n	800c522 <osThreadNew+0xca>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d104      	bne.n	800c522 <osThreadNew+0xca>
          mem = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	61bb      	str	r3, [r7, #24]
 800c51c:	e001      	b.n	800c522 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d110      	bne.n	800c54a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c530:	9202      	str	r2, [sp, #8]
 800c532:	9301      	str	r3, [sp, #4]
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	6a3a      	ldr	r2, [r7, #32]
 800c53c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f000 fe0c 	bl	800d15c <xTaskCreateStatic>
 800c544:	4603      	mov	r3, r0
 800c546:	613b      	str	r3, [r7, #16]
 800c548:	e013      	b.n	800c572 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d110      	bne.n	800c572 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c550:	6a3b      	ldr	r3, [r7, #32]
 800c552:	b29a      	uxth	r2, r3
 800c554:	f107 0310 	add.w	r3, r7, #16
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f000 fe57 	bl	800d216 <xTaskCreate>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d001      	beq.n	800c572 <osThreadNew+0x11a>
            hTask = NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c572:	693b      	ldr	r3, [r7, #16]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3728      	adds	r7, #40	; 0x28
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c584:	f3ef 8305 	mrs	r3, IPSR
 800c588:	60bb      	str	r3, [r7, #8]
  return(result);
 800c58a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <osDelay+0x1c>
    stat = osErrorISR;
 800c590:	f06f 0305 	mvn.w	r3, #5
 800c594:	60fb      	str	r3, [r7, #12]
 800c596:	e007      	b.n	800c5a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c598:	2300      	movs	r3, #0
 800c59a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d002      	beq.n	800c5a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 ff7c 	bl	800d4a0 <vTaskDelay>
    }
  }

  return (stat);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
	...

0800c5b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4a07      	ldr	r2, [pc, #28]	; (800c5e0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c5c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	4a06      	ldr	r2, [pc, #24]	; (800c5e4 <vApplicationGetIdleTaskMemory+0x30>)
 800c5ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2280      	movs	r2, #128	; 0x80
 800c5d0:	601a      	str	r2, [r3, #0]
}
 800c5d2:	bf00      	nop
 800c5d4:	3714      	adds	r7, #20
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	200005d0 	.word	0x200005d0
 800c5e4:	2000062c 	.word	0x2000062c

0800c5e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4a07      	ldr	r2, [pc, #28]	; (800c614 <vApplicationGetTimerTaskMemory+0x2c>)
 800c5f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	4a06      	ldr	r2, [pc, #24]	; (800c618 <vApplicationGetTimerTaskMemory+0x30>)
 800c5fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c606:	601a      	str	r2, [r3, #0]
}
 800c608:	bf00      	nop
 800c60a:	3714      	adds	r7, #20
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr
 800c614:	2000082c 	.word	0x2000082c
 800c618:	20000888 	.word	0x20000888

0800c61c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f103 0208 	add.w	r2, r3, #8
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c634:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f103 0208 	add.w	r2, r3, #8
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f103 0208 	add.w	r2, r3, #8
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c66a:	bf00      	nop
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c676:	b480      	push	{r7}
 800c678:	b085      	sub	sp, #20
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	689a      	ldr	r2, [r3, #8]
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	601a      	str	r2, [r3, #0]
}
 800c6b2:	bf00      	nop
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6d4:	d103      	bne.n	800c6de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	e00c      	b.n	800c6f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	e002      	b.n	800c6ec <vListInsert+0x2e>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68ba      	ldr	r2, [r7, #8]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d2f6      	bcs.n	800c6e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	683a      	ldr	r2, [r7, #0]
 800c706:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	683a      	ldr	r2, [r7, #0]
 800c712:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	1c5a      	adds	r2, r3, #1
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	601a      	str	r2, [r3, #0]
}
 800c724:	bf00      	nop
 800c726:	3714      	adds	r7, #20
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	6892      	ldr	r2, [r2, #8]
 800c746:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	6852      	ldr	r2, [r2, #4]
 800c750:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d103      	bne.n	800c764 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	1e5a      	subs	r2, r3, #1
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3714      	adds	r7, #20
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c7ae:	f002 f851 	bl	800e854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ba:	68f9      	ldr	r1, [r7, #12]
 800c7bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7be:	fb01 f303 	mul.w	r3, r1, r3
 800c7c2:	441a      	add	r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	68f9      	ldr	r1, [r7, #12]
 800c7e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7e4:	fb01 f303 	mul.w	r3, r1, r3
 800c7e8:	441a      	add	r2, r3
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	22ff      	movs	r2, #255	; 0xff
 800c7f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	22ff      	movs	r2, #255	; 0xff
 800c7fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d114      	bne.n	800c82e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d01a      	beq.n	800c842 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	3310      	adds	r3, #16
 800c810:	4618      	mov	r0, r3
 800c812:	f001 f903 	bl	800da1c <xTaskRemoveFromEventList>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d012      	beq.n	800c842 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c81c:	4b0c      	ldr	r3, [pc, #48]	; (800c850 <xQueueGenericReset+0xcc>)
 800c81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	e009      	b.n	800c842 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3310      	adds	r3, #16
 800c832:	4618      	mov	r0, r3
 800c834:	f7ff fef2 	bl	800c61c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3324      	adds	r3, #36	; 0x24
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7ff feed 	bl	800c61c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c842:	f002 f837 	bl	800e8b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c846:	2301      	movs	r3, #1
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	e000ed04 	.word	0xe000ed04

0800c854 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c854:	b580      	push	{r7, lr}
 800c856:	b08e      	sub	sp, #56	; 0x38
 800c858:	af02      	add	r7, sp, #8
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
 800c860:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10a      	bne.n	800c87e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	f383 8811 	msr	BASEPRI, r3
 800c870:	f3bf 8f6f 	isb	sy
 800c874:	f3bf 8f4f 	dsb	sy
 800c878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c87a:	bf00      	nop
 800c87c:	e7fe      	b.n	800c87c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10a      	bne.n	800c89a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <xQueueGenericCreateStatic+0x52>
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <xQueueGenericCreateStatic+0x56>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e000      	b.n	800c8ac <xQueueGenericCreateStatic+0x58>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10a      	bne.n	800c8c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	623b      	str	r3, [r7, #32]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d102      	bne.n	800c8d2 <xQueueGenericCreateStatic+0x7e>
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d101      	bne.n	800c8d6 <xQueueGenericCreateStatic+0x82>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e000      	b.n	800c8d8 <xQueueGenericCreateStatic+0x84>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10a      	bne.n	800c8f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	61fb      	str	r3, [r7, #28]
}
 800c8ee:	bf00      	nop
 800c8f0:	e7fe      	b.n	800c8f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c8f2:	2350      	movs	r3, #80	; 0x50
 800c8f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b50      	cmp	r3, #80	; 0x50
 800c8fa:	d00a      	beq.n	800c912 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	61bb      	str	r3, [r7, #24]
}
 800c90e:	bf00      	nop
 800c910:	e7fe      	b.n	800c910 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c912:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00d      	beq.n	800c93a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c920:	2201      	movs	r2, #1
 800c922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c926:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	4613      	mov	r3, r2
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	68b9      	ldr	r1, [r7, #8]
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f000 f805 	bl	800c944 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3730      	adds	r7, #48	; 0x30
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d103      	bne.n	800c960 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	69ba      	ldr	r2, [r7, #24]
 800c95c:	601a      	str	r2, [r3, #0]
 800c95e:	e002      	b.n	800c966 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c972:	2101      	movs	r1, #1
 800c974:	69b8      	ldr	r0, [r7, #24]
 800c976:	f7ff ff05 	bl	800c784 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	78fa      	ldrb	r2, [r7, #3]
 800c97e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c982:	bf00      	nop
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
	...

0800c98c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b08e      	sub	sp, #56	; 0x38
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c99a:	2300      	movs	r3, #0
 800c99c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10a      	bne.n	800c9be <xQueueGenericSend+0x32>
	__asm volatile
 800c9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ac:	f383 8811 	msr	BASEPRI, r3
 800c9b0:	f3bf 8f6f 	isb	sy
 800c9b4:	f3bf 8f4f 	dsb	sy
 800c9b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9ba:	bf00      	nop
 800c9bc:	e7fe      	b.n	800c9bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d103      	bne.n	800c9cc <xQueueGenericSend+0x40>
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <xQueueGenericSend+0x44>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e000      	b.n	800c9d2 <xQueueGenericSend+0x46>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10a      	bne.n	800c9ec <xQueueGenericSend+0x60>
	__asm volatile
 800c9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9e8:	bf00      	nop
 800c9ea:	e7fe      	b.n	800c9ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d103      	bne.n	800c9fa <xQueueGenericSend+0x6e>
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d101      	bne.n	800c9fe <xQueueGenericSend+0x72>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e000      	b.n	800ca00 <xQueueGenericSend+0x74>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10a      	bne.n	800ca1a <xQueueGenericSend+0x8e>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	623b      	str	r3, [r7, #32]
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca1a:	f001 f9bd 	bl	800dd98 <xTaskGetSchedulerState>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d102      	bne.n	800ca2a <xQueueGenericSend+0x9e>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d101      	bne.n	800ca2e <xQueueGenericSend+0xa2>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e000      	b.n	800ca30 <xQueueGenericSend+0xa4>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10a      	bne.n	800ca4a <xQueueGenericSend+0xbe>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	61fb      	str	r3, [r7, #28]
}
 800ca46:	bf00      	nop
 800ca48:	e7fe      	b.n	800ca48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca4a:	f001 ff03 	bl	800e854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d302      	bcc.n	800ca60 <xQueueGenericSend+0xd4>
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d129      	bne.n	800cab4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca66:	f000 fa0b 	bl	800ce80 <prvCopyDataToQueue>
 800ca6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d010      	beq.n	800ca96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca76:	3324      	adds	r3, #36	; 0x24
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 ffcf 	bl	800da1c <xTaskRemoveFromEventList>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d013      	beq.n	800caac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ca84:	4b3f      	ldr	r3, [pc, #252]	; (800cb84 <xQueueGenericSend+0x1f8>)
 800ca86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca8a:	601a      	str	r2, [r3, #0]
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	e00a      	b.n	800caac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d007      	beq.n	800caac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ca9c:	4b39      	ldr	r3, [pc, #228]	; (800cb84 <xQueueGenericSend+0x1f8>)
 800ca9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800caac:	f001 ff02 	bl	800e8b4 <vPortExitCritical>
				return pdPASS;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e063      	b.n	800cb7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d103      	bne.n	800cac2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800caba:	f001 fefb 	bl	800e8b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cabe:	2300      	movs	r3, #0
 800cac0:	e05c      	b.n	800cb7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d106      	bne.n	800cad6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cac8:	f107 0314 	add.w	r3, r7, #20
 800cacc:	4618      	mov	r0, r3
 800cace:	f001 f809 	bl	800dae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cad2:	2301      	movs	r3, #1
 800cad4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cad6:	f001 feed 	bl	800e8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cada:	f000 fd7b 	bl	800d5d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cade:	f001 feb9 	bl	800e854 <vPortEnterCritical>
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cae8:	b25b      	sxtb	r3, r3
 800caea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caee:	d103      	bne.n	800caf8 <xQueueGenericSend+0x16c>
 800caf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800caf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cafe:	b25b      	sxtb	r3, r3
 800cb00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb04:	d103      	bne.n	800cb0e <xQueueGenericSend+0x182>
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb0e:	f001 fed1 	bl	800e8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb12:	1d3a      	adds	r2, r7, #4
 800cb14:	f107 0314 	add.w	r3, r7, #20
 800cb18:	4611      	mov	r1, r2
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f000 fff8 	bl	800db10 <xTaskCheckForTimeOut>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d124      	bne.n	800cb70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb28:	f000 faa2 	bl	800d070 <prvIsQueueFull>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d018      	beq.n	800cb64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	3310      	adds	r3, #16
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 ff1e 	bl	800d97c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb42:	f000 fa2d 	bl	800cfa0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb46:	f000 fd53 	bl	800d5f0 <xTaskResumeAll>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f47f af7c 	bne.w	800ca4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb52:	4b0c      	ldr	r3, [pc, #48]	; (800cb84 <xQueueGenericSend+0x1f8>)
 800cb54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb58:	601a      	str	r2, [r3, #0]
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	e772      	b.n	800ca4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb66:	f000 fa1b 	bl	800cfa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb6a:	f000 fd41 	bl	800d5f0 <xTaskResumeAll>
 800cb6e:	e76c      	b.n	800ca4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb72:	f000 fa15 	bl	800cfa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb76:	f000 fd3b 	bl	800d5f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cb7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3738      	adds	r7, #56	; 0x38
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	e000ed04 	.word	0xe000ed04

0800cb88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b090      	sub	sp, #64	; 0x40
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10a      	bne.n	800cbb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d103      	bne.n	800cbc4 <xQueueGenericSendFromISR+0x3c>
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <xQueueGenericSendFromISR+0x40>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e000      	b.n	800cbca <xQueueGenericSendFromISR+0x42>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d10a      	bne.n	800cbe4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbe0:	bf00      	nop
 800cbe2:	e7fe      	b.n	800cbe2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d103      	bne.n	800cbf2 <xQueueGenericSendFromISR+0x6a>
 800cbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d101      	bne.n	800cbf6 <xQueueGenericSendFromISR+0x6e>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e000      	b.n	800cbf8 <xQueueGenericSendFromISR+0x70>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10a      	bne.n	800cc12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	623b      	str	r3, [r7, #32]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc12:	f001 ff01 	bl	800ea18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc16:	f3ef 8211 	mrs	r2, BASEPRI
 800cc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	61fa      	str	r2, [r7, #28]
 800cc2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d302      	bcc.n	800cc44 <xQueueGenericSendFromISR+0xbc>
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d12f      	bne.n	800cca4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	68b9      	ldr	r1, [r7, #8]
 800cc58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc5a:	f000 f911 	bl	800ce80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cc62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc66:	d112      	bne.n	800cc8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d016      	beq.n	800cc9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	3324      	adds	r3, #36	; 0x24
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fed1 	bl	800da1c <xTaskRemoveFromEventList>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00e      	beq.n	800cc9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00b      	beq.n	800cc9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	e007      	b.n	800cc9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc92:	3301      	adds	r3, #1
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	b25a      	sxtb	r2, r3
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cca2:	e001      	b.n	800cca8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cca4:	2300      	movs	r3, #0
 800cca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3740      	adds	r7, #64	; 0x40
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
	...

0800ccc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08c      	sub	sp, #48	; 0x30
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cccc:	2300      	movs	r3, #0
 800ccce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d10a      	bne.n	800ccf0 <xQueueReceive+0x30>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	623b      	str	r3, [r7, #32]
}
 800ccec:	bf00      	nop
 800ccee:	e7fe      	b.n	800ccee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d103      	bne.n	800ccfe <xQueueReceive+0x3e>
 800ccf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <xQueueReceive+0x42>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e000      	b.n	800cd04 <xQueueReceive+0x44>
 800cd02:	2300      	movs	r3, #0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10a      	bne.n	800cd1e <xQueueReceive+0x5e>
	__asm volatile
 800cd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	61fb      	str	r3, [r7, #28]
}
 800cd1a:	bf00      	nop
 800cd1c:	e7fe      	b.n	800cd1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd1e:	f001 f83b 	bl	800dd98 <xTaskGetSchedulerState>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <xQueueReceive+0x6e>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d101      	bne.n	800cd32 <xQueueReceive+0x72>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e000      	b.n	800cd34 <xQueueReceive+0x74>
 800cd32:	2300      	movs	r3, #0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10a      	bne.n	800cd4e <xQueueReceive+0x8e>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	61bb      	str	r3, [r7, #24]
}
 800cd4a:	bf00      	nop
 800cd4c:	e7fe      	b.n	800cd4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd4e:	f001 fd81 	bl	800e854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d01f      	beq.n	800cd9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd5e:	68b9      	ldr	r1, [r7, #8]
 800cd60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd62:	f000 f8f7 	bl	800cf54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd68:	1e5a      	subs	r2, r3, #1
 800cd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00f      	beq.n	800cd96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd78:	3310      	adds	r3, #16
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f000 fe4e 	bl	800da1c <xTaskRemoveFromEventList>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d007      	beq.n	800cd96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd86:	4b3d      	ldr	r3, [pc, #244]	; (800ce7c <xQueueReceive+0x1bc>)
 800cd88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd96:	f001 fd8d 	bl	800e8b4 <vPortExitCritical>
				return pdPASS;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e069      	b.n	800ce72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d103      	bne.n	800cdac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cda4:	f001 fd86 	bl	800e8b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	e062      	b.n	800ce72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d106      	bne.n	800cdc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdb2:	f107 0310 	add.w	r3, r7, #16
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 fe94 	bl	800dae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdc0:	f001 fd78 	bl	800e8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdc4:	f000 fc06 	bl	800d5d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdc8:	f001 fd44 	bl	800e854 <vPortEnterCritical>
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdd2:	b25b      	sxtb	r3, r3
 800cdd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdd8:	d103      	bne.n	800cde2 <xQueueReceive+0x122>
 800cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cddc:	2200      	movs	r2, #0
 800cdde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cde8:	b25b      	sxtb	r3, r3
 800cdea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdee:	d103      	bne.n	800cdf8 <xQueueReceive+0x138>
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdf8:	f001 fd5c 	bl	800e8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdfc:	1d3a      	adds	r2, r7, #4
 800cdfe:	f107 0310 	add.w	r3, r7, #16
 800ce02:	4611      	mov	r1, r2
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 fe83 	bl	800db10 <xTaskCheckForTimeOut>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d123      	bne.n	800ce58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce12:	f000 f917 	bl	800d044 <prvIsQueueEmpty>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d017      	beq.n	800ce4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1e:	3324      	adds	r3, #36	; 0x24
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	4611      	mov	r1, r2
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 fda9 	bl	800d97c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce2c:	f000 f8b8 	bl	800cfa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce30:	f000 fbde 	bl	800d5f0 <xTaskResumeAll>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d189      	bne.n	800cd4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ce3a:	4b10      	ldr	r3, [pc, #64]	; (800ce7c <xQueueReceive+0x1bc>)
 800ce3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce40:	601a      	str	r2, [r3, #0]
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	e780      	b.n	800cd4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce4e:	f000 f8a7 	bl	800cfa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce52:	f000 fbcd 	bl	800d5f0 <xTaskResumeAll>
 800ce56:	e77a      	b.n	800cd4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce5a:	f000 f8a1 	bl	800cfa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce5e:	f000 fbc7 	bl	800d5f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce64:	f000 f8ee 	bl	800d044 <prvIsQueueEmpty>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f43f af6f 	beq.w	800cd4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3730      	adds	r7, #48	; 0x30
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	e000ed04 	.word	0xe000ed04

0800ce80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10d      	bne.n	800ceba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d14d      	bne.n	800cf42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 ff92 	bl	800ddd4 <xTaskPriorityDisinherit>
 800ceb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	609a      	str	r2, [r3, #8]
 800ceb8:	e043      	b.n	800cf42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d119      	bne.n	800cef4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6858      	ldr	r0, [r3, #4]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec8:	461a      	mov	r2, r3
 800ceca:	68b9      	ldr	r1, [r7, #8]
 800cecc:	f002 fbf2 	bl	800f6b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	685a      	ldr	r2, [r3, #4]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced8:	441a      	add	r2, r3
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	685a      	ldr	r2, [r3, #4]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d32b      	bcc.n	800cf42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	605a      	str	r2, [r3, #4]
 800cef2:	e026      	b.n	800cf42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	68d8      	ldr	r0, [r3, #12]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefc:	461a      	mov	r2, r3
 800cefe:	68b9      	ldr	r1, [r7, #8]
 800cf00:	f002 fbd8 	bl	800f6b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	68da      	ldr	r2, [r3, #12]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0c:	425b      	negs	r3, r3
 800cf0e:	441a      	add	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	68da      	ldr	r2, [r3, #12]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d207      	bcs.n	800cf30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	689a      	ldr	r2, [r3, #8]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf28:	425b      	negs	r3, r3
 800cf2a:	441a      	add	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d105      	bne.n	800cf42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d002      	beq.n	800cf42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	1c5a      	adds	r2, r3, #1
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf4a:	697b      	ldr	r3, [r7, #20]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3718      	adds	r7, #24
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d018      	beq.n	800cf98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	68da      	ldr	r2, [r3, #12]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6e:	441a      	add	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	68da      	ldr	r2, [r3, #12]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d303      	bcc.n	800cf88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	68d9      	ldr	r1, [r3, #12]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf90:	461a      	mov	r2, r3
 800cf92:	6838      	ldr	r0, [r7, #0]
 800cf94:	f002 fb8e 	bl	800f6b4 <memcpy>
	}
}
 800cf98:	bf00      	nop
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cfa8:	f001 fc54 	bl	800e854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfb4:	e011      	b.n	800cfda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d012      	beq.n	800cfe4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	3324      	adds	r3, #36	; 0x24
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f000 fd2a 	bl	800da1c <xTaskRemoveFromEventList>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfce:	f000 fe01 	bl	800dbd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfd2:	7bfb      	ldrb	r3, [r7, #15]
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	dce9      	bgt.n	800cfb6 <prvUnlockQueue+0x16>
 800cfe2:	e000      	b.n	800cfe6 <prvUnlockQueue+0x46>
					break;
 800cfe4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	22ff      	movs	r2, #255	; 0xff
 800cfea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cfee:	f001 fc61 	bl	800e8b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cff2:	f001 fc2f 	bl	800e854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cffc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cffe:	e011      	b.n	800d024 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d012      	beq.n	800d02e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	3310      	adds	r3, #16
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 fd05 	bl	800da1c <xTaskRemoveFromEventList>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d018:	f000 fddc 	bl	800dbd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d01c:	7bbb      	ldrb	r3, [r7, #14]
 800d01e:	3b01      	subs	r3, #1
 800d020:	b2db      	uxtb	r3, r3
 800d022:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	dce9      	bgt.n	800d000 <prvUnlockQueue+0x60>
 800d02c:	e000      	b.n	800d030 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d02e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	22ff      	movs	r2, #255	; 0xff
 800d034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d038:	f001 fc3c 	bl	800e8b4 <vPortExitCritical>
}
 800d03c:	bf00      	nop
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d04c:	f001 fc02 	bl	800e854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d054:	2b00      	cmp	r3, #0
 800d056:	d102      	bne.n	800d05e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d058:	2301      	movs	r3, #1
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	e001      	b.n	800d062 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d05e:	2300      	movs	r3, #0
 800d060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d062:	f001 fc27 	bl	800e8b4 <vPortExitCritical>

	return xReturn;
 800d066:	68fb      	ldr	r3, [r7, #12]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d078:	f001 fbec 	bl	800e854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d084:	429a      	cmp	r2, r3
 800d086:	d102      	bne.n	800d08e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d088:	2301      	movs	r3, #1
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	e001      	b.n	800d092 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d08e:	2300      	movs	r3, #0
 800d090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d092:	f001 fc0f 	bl	800e8b4 <vPortExitCritical>

	return xReturn;
 800d096:	68fb      	ldr	r3, [r7, #12]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60fb      	str	r3, [r7, #12]
 800d0ae:	e014      	b.n	800d0da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0b0:	4a0f      	ldr	r2, [pc, #60]	; (800d0f0 <vQueueAddToRegistry+0x50>)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10b      	bne.n	800d0d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0bc:	490c      	ldr	r1, [pc, #48]	; (800d0f0 <vQueueAddToRegistry+0x50>)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	683a      	ldr	r2, [r7, #0]
 800d0c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0c6:	4a0a      	ldr	r2, [pc, #40]	; (800d0f0 <vQueueAddToRegistry+0x50>)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	00db      	lsls	r3, r3, #3
 800d0cc:	4413      	add	r3, r2
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0d2:	e006      	b.n	800d0e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	60fb      	str	r3, [r7, #12]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2b07      	cmp	r3, #7
 800d0de:	d9e7      	bls.n	800d0b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0e0:	bf00      	nop
 800d0e2:	bf00      	nop
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	20000c88 	.word	0x20000c88

0800d0f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d104:	f001 fba6 	bl	800e854 <vPortEnterCritical>
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d10e:	b25b      	sxtb	r3, r3
 800d110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d114:	d103      	bne.n	800d11e <vQueueWaitForMessageRestricted+0x2a>
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d124:	b25b      	sxtb	r3, r3
 800d126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d12a:	d103      	bne.n	800d134 <vQueueWaitForMessageRestricted+0x40>
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	2200      	movs	r2, #0
 800d130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d134:	f001 fbbe 	bl	800e8b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d106      	bne.n	800d14e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	3324      	adds	r3, #36	; 0x24
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	68b9      	ldr	r1, [r7, #8]
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 fc3b 	bl	800d9c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d14e:	6978      	ldr	r0, [r7, #20]
 800d150:	f7ff ff26 	bl	800cfa0 <prvUnlockQueue>
	}
 800d154:	bf00      	nop
 800d156:	3718      	adds	r7, #24
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b08e      	sub	sp, #56	; 0x38
 800d160:	af04      	add	r7, sp, #16
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d10a      	bne.n	800d186 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	623b      	str	r3, [r7, #32]
}
 800d182:	bf00      	nop
 800d184:	e7fe      	b.n	800d184 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	61fb      	str	r3, [r7, #28]
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1a2:	235c      	movs	r3, #92	; 0x5c
 800d1a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	2b5c      	cmp	r3, #92	; 0x5c
 800d1aa:	d00a      	beq.n	800d1c2 <xTaskCreateStatic+0x66>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	61bb      	str	r3, [r7, #24]
}
 800d1be:	bf00      	nop
 800d1c0:	e7fe      	b.n	800d1c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d01e      	beq.n	800d208 <xTaskCreateStatic+0xac>
 800d1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d01b      	beq.n	800d208 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	2202      	movs	r2, #2
 800d1de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	9303      	str	r3, [sp, #12]
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e8:	9302      	str	r3, [sp, #8]
 800d1ea:	f107 0314 	add.w	r3, r7, #20
 800d1ee:	9301      	str	r3, [sp, #4]
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	68b9      	ldr	r1, [r7, #8]
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f000 f850 	bl	800d2a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d202:	f000 f8dd 	bl	800d3c0 <prvAddNewTaskToReadyList>
 800d206:	e001      	b.n	800d20c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d208:	2300      	movs	r3, #0
 800d20a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d20c:	697b      	ldr	r3, [r7, #20]
	}
 800d20e:	4618      	mov	r0, r3
 800d210:	3728      	adds	r7, #40	; 0x28
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d216:	b580      	push	{r7, lr}
 800d218:	b08c      	sub	sp, #48	; 0x30
 800d21a:	af04      	add	r7, sp, #16
 800d21c:	60f8      	str	r0, [r7, #12]
 800d21e:	60b9      	str	r1, [r7, #8]
 800d220:	603b      	str	r3, [r7, #0]
 800d222:	4613      	mov	r3, r2
 800d224:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d226:	88fb      	ldrh	r3, [r7, #6]
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f001 fc34 	bl	800ea98 <pvPortMalloc>
 800d230:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00e      	beq.n	800d256 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d238:	205c      	movs	r0, #92	; 0x5c
 800d23a:	f001 fc2d 	bl	800ea98 <pvPortMalloc>
 800d23e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d003      	beq.n	800d24e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	697a      	ldr	r2, [r7, #20]
 800d24a:	631a      	str	r2, [r3, #48]	; 0x30
 800d24c:	e005      	b.n	800d25a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d24e:	6978      	ldr	r0, [r7, #20]
 800d250:	f001 fcee 	bl	800ec30 <vPortFree>
 800d254:	e001      	b.n	800d25a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d256:	2300      	movs	r3, #0
 800d258:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d017      	beq.n	800d290 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	2200      	movs	r2, #0
 800d264:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d268:	88fa      	ldrh	r2, [r7, #6]
 800d26a:	2300      	movs	r3, #0
 800d26c:	9303      	str	r3, [sp, #12]
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	9302      	str	r3, [sp, #8]
 800d272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d274:	9301      	str	r3, [sp, #4]
 800d276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	68b9      	ldr	r1, [r7, #8]
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f000 f80e 	bl	800d2a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d284:	69f8      	ldr	r0, [r7, #28]
 800d286:	f000 f89b 	bl	800d3c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d28a:	2301      	movs	r3, #1
 800d28c:	61bb      	str	r3, [r7, #24]
 800d28e:	e002      	b.n	800d296 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d294:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d296:	69bb      	ldr	r3, [r7, #24]
	}
 800d298:	4618      	mov	r0, r3
 800d29a:	3720      	adds	r7, #32
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b088      	sub	sp, #32
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
 800d2ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	21a5      	movs	r1, #165	; 0xa5
 800d2ba:	f002 f9c7 	bl	800f64c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4413      	add	r3, r2
 800d2ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	f023 0307 	bic.w	r3, r3, #7
 800d2d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	f003 0307 	and.w	r3, r3, #7
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00a      	beq.n	800d2f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	617b      	str	r3, [r7, #20]
}
 800d2f4:	bf00      	nop
 800d2f6:	e7fe      	b.n	800d2f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d01f      	beq.n	800d33e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d2fe:	2300      	movs	r3, #0
 800d300:	61fb      	str	r3, [r7, #28]
 800d302:	e012      	b.n	800d32a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d304:	68ba      	ldr	r2, [r7, #8]
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	4413      	add	r3, r2
 800d30a:	7819      	ldrb	r1, [r3, #0]
 800d30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	4413      	add	r3, r2
 800d312:	3334      	adds	r3, #52	; 0x34
 800d314:	460a      	mov	r2, r1
 800d316:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d318:	68ba      	ldr	r2, [r7, #8]
 800d31a:	69fb      	ldr	r3, [r7, #28]
 800d31c:	4413      	add	r3, r2
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d006      	beq.n	800d332 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	3301      	adds	r3, #1
 800d328:	61fb      	str	r3, [r7, #28]
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	2b0f      	cmp	r3, #15
 800d32e:	d9e9      	bls.n	800d304 <prvInitialiseNewTask+0x64>
 800d330:	e000      	b.n	800d334 <prvInitialiseNewTask+0x94>
			{
				break;
 800d332:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d336:	2200      	movs	r2, #0
 800d338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d33c:	e003      	b.n	800d346 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	2200      	movs	r2, #0
 800d342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d348:	2b37      	cmp	r3, #55	; 0x37
 800d34a:	d901      	bls.n	800d350 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d34c:	2337      	movs	r3, #55	; 0x37
 800d34e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d354:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d35a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35e:	2200      	movs	r2, #0
 800d360:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d364:	3304      	adds	r3, #4
 800d366:	4618      	mov	r0, r3
 800d368:	f7ff f978 	bl	800c65c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36e:	3318      	adds	r3, #24
 800d370:	4618      	mov	r0, r3
 800d372:	f7ff f973 	bl	800c65c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d37a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d384:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d38a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38e:	2200      	movs	r2, #0
 800d390:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	2200      	movs	r2, #0
 800d396:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	68f9      	ldr	r1, [r7, #12]
 800d39e:	69b8      	ldr	r0, [r7, #24]
 800d3a0:	f001 f928 	bl	800e5f4 <pxPortInitialiseStack>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3b6:	bf00      	nop
 800d3b8:	3720      	adds	r7, #32
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d3c8:	f001 fa44 	bl	800e854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d3cc:	4b2d      	ldr	r3, [pc, #180]	; (800d484 <prvAddNewTaskToReadyList+0xc4>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	4a2c      	ldr	r2, [pc, #176]	; (800d484 <prvAddNewTaskToReadyList+0xc4>)
 800d3d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d3d6:	4b2c      	ldr	r3, [pc, #176]	; (800d488 <prvAddNewTaskToReadyList+0xc8>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d109      	bne.n	800d3f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d3de:	4a2a      	ldr	r2, [pc, #168]	; (800d488 <prvAddNewTaskToReadyList+0xc8>)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d3e4:	4b27      	ldr	r3, [pc, #156]	; (800d484 <prvAddNewTaskToReadyList+0xc4>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d110      	bne.n	800d40e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d3ec:	f000 fc16 	bl	800dc1c <prvInitialiseTaskLists>
 800d3f0:	e00d      	b.n	800d40e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d3f2:	4b26      	ldr	r3, [pc, #152]	; (800d48c <prvAddNewTaskToReadyList+0xcc>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d109      	bne.n	800d40e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d3fa:	4b23      	ldr	r3, [pc, #140]	; (800d488 <prvAddNewTaskToReadyList+0xc8>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d404:	429a      	cmp	r2, r3
 800d406:	d802      	bhi.n	800d40e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d408:	4a1f      	ldr	r2, [pc, #124]	; (800d488 <prvAddNewTaskToReadyList+0xc8>)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d40e:	4b20      	ldr	r3, [pc, #128]	; (800d490 <prvAddNewTaskToReadyList+0xd0>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	3301      	adds	r3, #1
 800d414:	4a1e      	ldr	r2, [pc, #120]	; (800d490 <prvAddNewTaskToReadyList+0xd0>)
 800d416:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d418:	4b1d      	ldr	r3, [pc, #116]	; (800d490 <prvAddNewTaskToReadyList+0xd0>)
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d424:	4b1b      	ldr	r3, [pc, #108]	; (800d494 <prvAddNewTaskToReadyList+0xd4>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d903      	bls.n	800d434 <prvAddNewTaskToReadyList+0x74>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d430:	4a18      	ldr	r2, [pc, #96]	; (800d494 <prvAddNewTaskToReadyList+0xd4>)
 800d432:	6013      	str	r3, [r2, #0]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d438:	4613      	mov	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4a15      	ldr	r2, [pc, #84]	; (800d498 <prvAddNewTaskToReadyList+0xd8>)
 800d442:	441a      	add	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	3304      	adds	r3, #4
 800d448:	4619      	mov	r1, r3
 800d44a:	4610      	mov	r0, r2
 800d44c:	f7ff f913 	bl	800c676 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d450:	f001 fa30 	bl	800e8b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d454:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <prvAddNewTaskToReadyList+0xcc>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00e      	beq.n	800d47a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d45c:	4b0a      	ldr	r3, [pc, #40]	; (800d488 <prvAddNewTaskToReadyList+0xc8>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d466:	429a      	cmp	r2, r3
 800d468:	d207      	bcs.n	800d47a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d46a:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <prvAddNewTaskToReadyList+0xdc>)
 800d46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d47a:	bf00      	nop
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	2000119c 	.word	0x2000119c
 800d488:	20000cc8 	.word	0x20000cc8
 800d48c:	200011a8 	.word	0x200011a8
 800d490:	200011b8 	.word	0x200011b8
 800d494:	200011a4 	.word	0x200011a4
 800d498:	20000ccc 	.word	0x20000ccc
 800d49c:	e000ed04 	.word	0xe000ed04

0800d4a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d017      	beq.n	800d4e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d4b2:	4b13      	ldr	r3, [pc, #76]	; (800d500 <vTaskDelay+0x60>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <vTaskDelay+0x30>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	60bb      	str	r3, [r7, #8]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d4d0:	f000 f880 	bl	800d5d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fcea 	bl	800deb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d4dc:	f000 f888 	bl	800d5f0 <xTaskResumeAll>
 800d4e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d107      	bne.n	800d4f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d4e8:	4b06      	ldr	r3, [pc, #24]	; (800d504 <vTaskDelay+0x64>)
 800d4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ee:	601a      	str	r2, [r3, #0]
 800d4f0:	f3bf 8f4f 	dsb	sy
 800d4f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4f8:	bf00      	nop
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	200011c4 	.word	0x200011c4
 800d504:	e000ed04 	.word	0xe000ed04

0800d508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08a      	sub	sp, #40	; 0x28
 800d50c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d50e:	2300      	movs	r3, #0
 800d510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d512:	2300      	movs	r3, #0
 800d514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d516:	463a      	mov	r2, r7
 800d518:	1d39      	adds	r1, r7, #4
 800d51a:	f107 0308 	add.w	r3, r7, #8
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff f848 	bl	800c5b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d524:	6839      	ldr	r1, [r7, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	9202      	str	r2, [sp, #8]
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	2300      	movs	r3, #0
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	2300      	movs	r3, #0
 800d534:	460a      	mov	r2, r1
 800d536:	4921      	ldr	r1, [pc, #132]	; (800d5bc <vTaskStartScheduler+0xb4>)
 800d538:	4821      	ldr	r0, [pc, #132]	; (800d5c0 <vTaskStartScheduler+0xb8>)
 800d53a:	f7ff fe0f 	bl	800d15c <xTaskCreateStatic>
 800d53e:	4603      	mov	r3, r0
 800d540:	4a20      	ldr	r2, [pc, #128]	; (800d5c4 <vTaskStartScheduler+0xbc>)
 800d542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d544:	4b1f      	ldr	r3, [pc, #124]	; (800d5c4 <vTaskStartScheduler+0xbc>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d54c:	2301      	movs	r3, #1
 800d54e:	617b      	str	r3, [r7, #20]
 800d550:	e001      	b.n	800d556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d552:	2300      	movs	r3, #0
 800d554:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d102      	bne.n	800d562 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d55c:	f000 fcfc 	bl	800df58 <xTimerCreateTimerTask>
 800d560:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d116      	bne.n	800d596 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	613b      	str	r3, [r7, #16]
}
 800d57a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d57c:	4b12      	ldr	r3, [pc, #72]	; (800d5c8 <vTaskStartScheduler+0xc0>)
 800d57e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d582:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d584:	4b11      	ldr	r3, [pc, #68]	; (800d5cc <vTaskStartScheduler+0xc4>)
 800d586:	2201      	movs	r2, #1
 800d588:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d58a:	4b11      	ldr	r3, [pc, #68]	; (800d5d0 <vTaskStartScheduler+0xc8>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d590:	f001 f8be 	bl	800e710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d594:	e00e      	b.n	800d5b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d59c:	d10a      	bne.n	800d5b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	60fb      	str	r3, [r7, #12]
}
 800d5b0:	bf00      	nop
 800d5b2:	e7fe      	b.n	800d5b2 <vTaskStartScheduler+0xaa>
}
 800d5b4:	bf00      	nop
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	0801000c 	.word	0x0801000c
 800d5c0:	0800dbed 	.word	0x0800dbed
 800d5c4:	200011c0 	.word	0x200011c0
 800d5c8:	200011bc 	.word	0x200011bc
 800d5cc:	200011a8 	.word	0x200011a8
 800d5d0:	200011a0 	.word	0x200011a0

0800d5d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d5d8:	4b04      	ldr	r3, [pc, #16]	; (800d5ec <vTaskSuspendAll+0x18>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	4a03      	ldr	r2, [pc, #12]	; (800d5ec <vTaskSuspendAll+0x18>)
 800d5e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d5e2:	bf00      	nop
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr
 800d5ec:	200011c4 	.word	0x200011c4

0800d5f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d5fe:	4b42      	ldr	r3, [pc, #264]	; (800d708 <xTaskResumeAll+0x118>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10a      	bne.n	800d61c <xTaskResumeAll+0x2c>
	__asm volatile
 800d606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	603b      	str	r3, [r7, #0]
}
 800d618:	bf00      	nop
 800d61a:	e7fe      	b.n	800d61a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d61c:	f001 f91a 	bl	800e854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d620:	4b39      	ldr	r3, [pc, #228]	; (800d708 <xTaskResumeAll+0x118>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3b01      	subs	r3, #1
 800d626:	4a38      	ldr	r2, [pc, #224]	; (800d708 <xTaskResumeAll+0x118>)
 800d628:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d62a:	4b37      	ldr	r3, [pc, #220]	; (800d708 <xTaskResumeAll+0x118>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d162      	bne.n	800d6f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d632:	4b36      	ldr	r3, [pc, #216]	; (800d70c <xTaskResumeAll+0x11c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d05e      	beq.n	800d6f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d63a:	e02f      	b.n	800d69c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d63c:	4b34      	ldr	r3, [pc, #208]	; (800d710 <xTaskResumeAll+0x120>)
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	3318      	adds	r3, #24
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff f871 	bl	800c730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3304      	adds	r3, #4
 800d652:	4618      	mov	r0, r3
 800d654:	f7ff f86c 	bl	800c730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65c:	4b2d      	ldr	r3, [pc, #180]	; (800d714 <xTaskResumeAll+0x124>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	429a      	cmp	r2, r3
 800d662:	d903      	bls.n	800d66c <xTaskResumeAll+0x7c>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d668:	4a2a      	ldr	r2, [pc, #168]	; (800d714 <xTaskResumeAll+0x124>)
 800d66a:	6013      	str	r3, [r2, #0]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d670:	4613      	mov	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4413      	add	r3, r2
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	4a27      	ldr	r2, [pc, #156]	; (800d718 <xTaskResumeAll+0x128>)
 800d67a:	441a      	add	r2, r3
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	3304      	adds	r3, #4
 800d680:	4619      	mov	r1, r3
 800d682:	4610      	mov	r0, r2
 800d684:	f7fe fff7 	bl	800c676 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68c:	4b23      	ldr	r3, [pc, #140]	; (800d71c <xTaskResumeAll+0x12c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d692:	429a      	cmp	r2, r3
 800d694:	d302      	bcc.n	800d69c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d696:	4b22      	ldr	r3, [pc, #136]	; (800d720 <xTaskResumeAll+0x130>)
 800d698:	2201      	movs	r2, #1
 800d69a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d69c:	4b1c      	ldr	r3, [pc, #112]	; (800d710 <xTaskResumeAll+0x120>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1cb      	bne.n	800d63c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d6aa:	f000 fb55 	bl	800dd58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d6ae:	4b1d      	ldr	r3, [pc, #116]	; (800d724 <xTaskResumeAll+0x134>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d010      	beq.n	800d6dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d6ba:	f000 f847 	bl	800d74c <xTaskIncrementTick>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d002      	beq.n	800d6ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d6c4:	4b16      	ldr	r3, [pc, #88]	; (800d720 <xTaskResumeAll+0x130>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1f1      	bne.n	800d6ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d6d6:	4b13      	ldr	r3, [pc, #76]	; (800d724 <xTaskResumeAll+0x134>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d6dc:	4b10      	ldr	r3, [pc, #64]	; (800d720 <xTaskResumeAll+0x130>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d009      	beq.n	800d6f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d6e8:	4b0f      	ldr	r3, [pc, #60]	; (800d728 <xTaskResumeAll+0x138>)
 800d6ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ee:	601a      	str	r2, [r3, #0]
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6f8:	f001 f8dc 	bl	800e8b4 <vPortExitCritical>

	return xAlreadyYielded;
 800d6fc:	68bb      	ldr	r3, [r7, #8]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	200011c4 	.word	0x200011c4
 800d70c:	2000119c 	.word	0x2000119c
 800d710:	2000115c 	.word	0x2000115c
 800d714:	200011a4 	.word	0x200011a4
 800d718:	20000ccc 	.word	0x20000ccc
 800d71c:	20000cc8 	.word	0x20000cc8
 800d720:	200011b0 	.word	0x200011b0
 800d724:	200011ac 	.word	0x200011ac
 800d728:	e000ed04 	.word	0xe000ed04

0800d72c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d732:	4b05      	ldr	r3, [pc, #20]	; (800d748 <xTaskGetTickCount+0x1c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d738:	687b      	ldr	r3, [r7, #4]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	370c      	adds	r7, #12
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	200011a0 	.word	0x200011a0

0800d74c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d752:	2300      	movs	r3, #0
 800d754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d756:	4b4f      	ldr	r3, [pc, #316]	; (800d894 <xTaskIncrementTick+0x148>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f040 808f 	bne.w	800d87e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d760:	4b4d      	ldr	r3, [pc, #308]	; (800d898 <xTaskIncrementTick+0x14c>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3301      	adds	r3, #1
 800d766:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d768:	4a4b      	ldr	r2, [pc, #300]	; (800d898 <xTaskIncrementTick+0x14c>)
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d120      	bne.n	800d7b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d774:	4b49      	ldr	r3, [pc, #292]	; (800d89c <xTaskIncrementTick+0x150>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00a      	beq.n	800d794 <xTaskIncrementTick+0x48>
	__asm volatile
 800d77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d782:	f383 8811 	msr	BASEPRI, r3
 800d786:	f3bf 8f6f 	isb	sy
 800d78a:	f3bf 8f4f 	dsb	sy
 800d78e:	603b      	str	r3, [r7, #0]
}
 800d790:	bf00      	nop
 800d792:	e7fe      	b.n	800d792 <xTaskIncrementTick+0x46>
 800d794:	4b41      	ldr	r3, [pc, #260]	; (800d89c <xTaskIncrementTick+0x150>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	60fb      	str	r3, [r7, #12]
 800d79a:	4b41      	ldr	r3, [pc, #260]	; (800d8a0 <xTaskIncrementTick+0x154>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a3f      	ldr	r2, [pc, #252]	; (800d89c <xTaskIncrementTick+0x150>)
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	4a3f      	ldr	r2, [pc, #252]	; (800d8a0 <xTaskIncrementTick+0x154>)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6013      	str	r3, [r2, #0]
 800d7a8:	4b3e      	ldr	r3, [pc, #248]	; (800d8a4 <xTaskIncrementTick+0x158>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	4a3d      	ldr	r2, [pc, #244]	; (800d8a4 <xTaskIncrementTick+0x158>)
 800d7b0:	6013      	str	r3, [r2, #0]
 800d7b2:	f000 fad1 	bl	800dd58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d7b6:	4b3c      	ldr	r3, [pc, #240]	; (800d8a8 <xTaskIncrementTick+0x15c>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	693a      	ldr	r2, [r7, #16]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d349      	bcc.n	800d854 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7c0:	4b36      	ldr	r3, [pc, #216]	; (800d89c <xTaskIncrementTick+0x150>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d104      	bne.n	800d7d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7ca:	4b37      	ldr	r3, [pc, #220]	; (800d8a8 <xTaskIncrementTick+0x15c>)
 800d7cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7d0:	601a      	str	r2, [r3, #0]
					break;
 800d7d2:	e03f      	b.n	800d854 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7d4:	4b31      	ldr	r3, [pc, #196]	; (800d89c <xTaskIncrementTick+0x150>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d203      	bcs.n	800d7f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d7ec:	4a2e      	ldr	r2, [pc, #184]	; (800d8a8 <xTaskIncrementTick+0x15c>)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d7f2:	e02f      	b.n	800d854 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe ff99 	bl	800c730 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d802:	2b00      	cmp	r3, #0
 800d804:	d004      	beq.n	800d810 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	3318      	adds	r3, #24
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fe ff90 	bl	800c730 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d814:	4b25      	ldr	r3, [pc, #148]	; (800d8ac <xTaskIncrementTick+0x160>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d903      	bls.n	800d824 <xTaskIncrementTick+0xd8>
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d820:	4a22      	ldr	r2, [pc, #136]	; (800d8ac <xTaskIncrementTick+0x160>)
 800d822:	6013      	str	r3, [r2, #0]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d828:	4613      	mov	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	4a1f      	ldr	r2, [pc, #124]	; (800d8b0 <xTaskIncrementTick+0x164>)
 800d832:	441a      	add	r2, r3
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	3304      	adds	r3, #4
 800d838:	4619      	mov	r1, r3
 800d83a:	4610      	mov	r0, r2
 800d83c:	f7fe ff1b 	bl	800c676 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d844:	4b1b      	ldr	r3, [pc, #108]	; (800d8b4 <xTaskIncrementTick+0x168>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d3b8      	bcc.n	800d7c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d84e:	2301      	movs	r3, #1
 800d850:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d852:	e7b5      	b.n	800d7c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d854:	4b17      	ldr	r3, [pc, #92]	; (800d8b4 <xTaskIncrementTick+0x168>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85a:	4915      	ldr	r1, [pc, #84]	; (800d8b0 <xTaskIncrementTick+0x164>)
 800d85c:	4613      	mov	r3, r2
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	4413      	add	r3, r2
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	440b      	add	r3, r1
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d901      	bls.n	800d870 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d86c:	2301      	movs	r3, #1
 800d86e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d870:	4b11      	ldr	r3, [pc, #68]	; (800d8b8 <xTaskIncrementTick+0x16c>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d007      	beq.n	800d888 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d878:	2301      	movs	r3, #1
 800d87a:	617b      	str	r3, [r7, #20]
 800d87c:	e004      	b.n	800d888 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d87e:	4b0f      	ldr	r3, [pc, #60]	; (800d8bc <xTaskIncrementTick+0x170>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3301      	adds	r3, #1
 800d884:	4a0d      	ldr	r2, [pc, #52]	; (800d8bc <xTaskIncrementTick+0x170>)
 800d886:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d888:	697b      	ldr	r3, [r7, #20]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	200011c4 	.word	0x200011c4
 800d898:	200011a0 	.word	0x200011a0
 800d89c:	20001154 	.word	0x20001154
 800d8a0:	20001158 	.word	0x20001158
 800d8a4:	200011b4 	.word	0x200011b4
 800d8a8:	200011bc 	.word	0x200011bc
 800d8ac:	200011a4 	.word	0x200011a4
 800d8b0:	20000ccc 	.word	0x20000ccc
 800d8b4:	20000cc8 	.word	0x20000cc8
 800d8b8:	200011b0 	.word	0x200011b0
 800d8bc:	200011ac 	.word	0x200011ac

0800d8c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d8c6:	4b28      	ldr	r3, [pc, #160]	; (800d968 <vTaskSwitchContext+0xa8>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d003      	beq.n	800d8d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d8ce:	4b27      	ldr	r3, [pc, #156]	; (800d96c <vTaskSwitchContext+0xac>)
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d8d4:	e041      	b.n	800d95a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d8d6:	4b25      	ldr	r3, [pc, #148]	; (800d96c <vTaskSwitchContext+0xac>)
 800d8d8:	2200      	movs	r2, #0
 800d8da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8dc:	4b24      	ldr	r3, [pc, #144]	; (800d970 <vTaskSwitchContext+0xb0>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	60fb      	str	r3, [r7, #12]
 800d8e2:	e010      	b.n	800d906 <vTaskSwitchContext+0x46>
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d10a      	bne.n	800d900 <vTaskSwitchContext+0x40>
	__asm volatile
 800d8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ee:	f383 8811 	msr	BASEPRI, r3
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	f3bf 8f4f 	dsb	sy
 800d8fa:	607b      	str	r3, [r7, #4]
}
 800d8fc:	bf00      	nop
 800d8fe:	e7fe      	b.n	800d8fe <vTaskSwitchContext+0x3e>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	3b01      	subs	r3, #1
 800d904:	60fb      	str	r3, [r7, #12]
 800d906:	491b      	ldr	r1, [pc, #108]	; (800d974 <vTaskSwitchContext+0xb4>)
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	4613      	mov	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	4413      	add	r3, r2
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	440b      	add	r3, r1
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d0e4      	beq.n	800d8e4 <vTaskSwitchContext+0x24>
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	4613      	mov	r3, r2
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4413      	add	r3, r2
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	4a13      	ldr	r2, [pc, #76]	; (800d974 <vTaskSwitchContext+0xb4>)
 800d926:	4413      	add	r3, r2
 800d928:	60bb      	str	r3, [r7, #8]
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	685a      	ldr	r2, [r3, #4]
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	605a      	str	r2, [r3, #4]
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	3308      	adds	r3, #8
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d104      	bne.n	800d94a <vTaskSwitchContext+0x8a>
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	685a      	ldr	r2, [r3, #4]
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	605a      	str	r2, [r3, #4]
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	4a09      	ldr	r2, [pc, #36]	; (800d978 <vTaskSwitchContext+0xb8>)
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	4a06      	ldr	r2, [pc, #24]	; (800d970 <vTaskSwitchContext+0xb0>)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6013      	str	r3, [r2, #0]
}
 800d95a:	bf00      	nop
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	200011c4 	.word	0x200011c4
 800d96c:	200011b0 	.word	0x200011b0
 800d970:	200011a4 	.word	0x200011a4
 800d974:	20000ccc 	.word	0x20000ccc
 800d978:	20000cc8 	.word	0x20000cc8

0800d97c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10a      	bne.n	800d9a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d990:	f383 8811 	msr	BASEPRI, r3
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	60fb      	str	r3, [r7, #12]
}
 800d99e:	bf00      	nop
 800d9a0:	e7fe      	b.n	800d9a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9a2:	4b07      	ldr	r3, [pc, #28]	; (800d9c0 <vTaskPlaceOnEventList+0x44>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3318      	adds	r3, #24
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7fe fe87 	bl	800c6be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9b0:	2101      	movs	r1, #1
 800d9b2:	6838      	ldr	r0, [r7, #0]
 800d9b4:	f000 fa7c 	bl	800deb0 <prvAddCurrentTaskToDelayedList>
}
 800d9b8:	bf00      	nop
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	20000cc8 	.word	0x20000cc8

0800d9c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d10a      	bne.n	800d9ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9da:	f383 8811 	msr	BASEPRI, r3
 800d9de:	f3bf 8f6f 	isb	sy
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	617b      	str	r3, [r7, #20]
}
 800d9e8:	bf00      	nop
 800d9ea:	e7fe      	b.n	800d9ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9ec:	4b0a      	ldr	r3, [pc, #40]	; (800da18 <vTaskPlaceOnEventListRestricted+0x54>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	3318      	adds	r3, #24
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f7fe fe3e 	bl	800c676 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800da00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da06:	6879      	ldr	r1, [r7, #4]
 800da08:	68b8      	ldr	r0, [r7, #8]
 800da0a:	f000 fa51 	bl	800deb0 <prvAddCurrentTaskToDelayedList>
	}
 800da0e:	bf00      	nop
 800da10:	3718      	adds	r7, #24
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	20000cc8 	.word	0x20000cc8

0800da1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b086      	sub	sp, #24
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d10a      	bne.n	800da48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800da32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da36:	f383 8811 	msr	BASEPRI, r3
 800da3a:	f3bf 8f6f 	isb	sy
 800da3e:	f3bf 8f4f 	dsb	sy
 800da42:	60fb      	str	r3, [r7, #12]
}
 800da44:	bf00      	nop
 800da46:	e7fe      	b.n	800da46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	3318      	adds	r3, #24
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fe fe6f 	bl	800c730 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da52:	4b1e      	ldr	r3, [pc, #120]	; (800dacc <xTaskRemoveFromEventList+0xb0>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d11d      	bne.n	800da96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	3304      	adds	r3, #4
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fe fe66 	bl	800c730 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da68:	4b19      	ldr	r3, [pc, #100]	; (800dad0 <xTaskRemoveFromEventList+0xb4>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d903      	bls.n	800da78 <xTaskRemoveFromEventList+0x5c>
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da74:	4a16      	ldr	r2, [pc, #88]	; (800dad0 <xTaskRemoveFromEventList+0xb4>)
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da7c:	4613      	mov	r3, r2
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	4413      	add	r3, r2
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4a13      	ldr	r2, [pc, #76]	; (800dad4 <xTaskRemoveFromEventList+0xb8>)
 800da86:	441a      	add	r2, r3
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	3304      	adds	r3, #4
 800da8c:	4619      	mov	r1, r3
 800da8e:	4610      	mov	r0, r2
 800da90:	f7fe fdf1 	bl	800c676 <vListInsertEnd>
 800da94:	e005      	b.n	800daa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	3318      	adds	r3, #24
 800da9a:	4619      	mov	r1, r3
 800da9c:	480e      	ldr	r0, [pc, #56]	; (800dad8 <xTaskRemoveFromEventList+0xbc>)
 800da9e:	f7fe fdea 	bl	800c676 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa6:	4b0d      	ldr	r3, [pc, #52]	; (800dadc <xTaskRemoveFromEventList+0xc0>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daac:	429a      	cmp	r2, r3
 800daae:	d905      	bls.n	800dabc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dab0:	2301      	movs	r3, #1
 800dab2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dab4:	4b0a      	ldr	r3, [pc, #40]	; (800dae0 <xTaskRemoveFromEventList+0xc4>)
 800dab6:	2201      	movs	r2, #1
 800dab8:	601a      	str	r2, [r3, #0]
 800daba:	e001      	b.n	800dac0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dabc:	2300      	movs	r3, #0
 800dabe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dac0:	697b      	ldr	r3, [r7, #20]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3718      	adds	r7, #24
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	200011c4 	.word	0x200011c4
 800dad0:	200011a4 	.word	0x200011a4
 800dad4:	20000ccc 	.word	0x20000ccc
 800dad8:	2000115c 	.word	0x2000115c
 800dadc:	20000cc8 	.word	0x20000cc8
 800dae0:	200011b0 	.word	0x200011b0

0800dae4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800daec:	4b06      	ldr	r3, [pc, #24]	; (800db08 <vTaskInternalSetTimeOutState+0x24>)
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800daf4:	4b05      	ldr	r3, [pc, #20]	; (800db0c <vTaskInternalSetTimeOutState+0x28>)
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	605a      	str	r2, [r3, #4]
}
 800dafc:	bf00      	nop
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr
 800db08:	200011b4 	.word	0x200011b4
 800db0c:	200011a0 	.word	0x200011a0

0800db10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b088      	sub	sp, #32
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d10a      	bne.n	800db36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800db20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db24:	f383 8811 	msr	BASEPRI, r3
 800db28:	f3bf 8f6f 	isb	sy
 800db2c:	f3bf 8f4f 	dsb	sy
 800db30:	613b      	str	r3, [r7, #16]
}
 800db32:	bf00      	nop
 800db34:	e7fe      	b.n	800db34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d10a      	bne.n	800db52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	f383 8811 	msr	BASEPRI, r3
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	60fb      	str	r3, [r7, #12]
}
 800db4e:	bf00      	nop
 800db50:	e7fe      	b.n	800db50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800db52:	f000 fe7f 	bl	800e854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db56:	4b1d      	ldr	r3, [pc, #116]	; (800dbcc <xTaskCheckForTimeOut+0xbc>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	69ba      	ldr	r2, [r7, #24]
 800db62:	1ad3      	subs	r3, r2, r3
 800db64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db6e:	d102      	bne.n	800db76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800db70:	2300      	movs	r3, #0
 800db72:	61fb      	str	r3, [r7, #28]
 800db74:	e023      	b.n	800dbbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	4b15      	ldr	r3, [pc, #84]	; (800dbd0 <xTaskCheckForTimeOut+0xc0>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d007      	beq.n	800db92 <xTaskCheckForTimeOut+0x82>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	69ba      	ldr	r2, [r7, #24]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d302      	bcc.n	800db92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db8c:	2301      	movs	r3, #1
 800db8e:	61fb      	str	r3, [r7, #28]
 800db90:	e015      	b.n	800dbbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d20b      	bcs.n	800dbb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	1ad2      	subs	r2, r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff ff9b 	bl	800dae4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	61fb      	str	r3, [r7, #28]
 800dbb2:	e004      	b.n	800dbbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dbbe:	f000 fe79 	bl	800e8b4 <vPortExitCritical>

	return xReturn;
 800dbc2:	69fb      	ldr	r3, [r7, #28]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3720      	adds	r7, #32
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	200011a0 	.word	0x200011a0
 800dbd0:	200011b4 	.word	0x200011b4

0800dbd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dbd8:	4b03      	ldr	r3, [pc, #12]	; (800dbe8 <vTaskMissedYield+0x14>)
 800dbda:	2201      	movs	r2, #1
 800dbdc:	601a      	str	r2, [r3, #0]
}
 800dbde:	bf00      	nop
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr
 800dbe8:	200011b0 	.word	0x200011b0

0800dbec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dbf4:	f000 f852 	bl	800dc9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dbf8:	4b06      	ldr	r3, [pc, #24]	; (800dc14 <prvIdleTask+0x28>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d9f9      	bls.n	800dbf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc00:	4b05      	ldr	r3, [pc, #20]	; (800dc18 <prvIdleTask+0x2c>)
 800dc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dc10:	e7f0      	b.n	800dbf4 <prvIdleTask+0x8>
 800dc12:	bf00      	nop
 800dc14:	20000ccc 	.word	0x20000ccc
 800dc18:	e000ed04 	.word	0xe000ed04

0800dc1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc22:	2300      	movs	r3, #0
 800dc24:	607b      	str	r3, [r7, #4]
 800dc26:	e00c      	b.n	800dc42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4413      	add	r3, r2
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	4a12      	ldr	r2, [pc, #72]	; (800dc7c <prvInitialiseTaskLists+0x60>)
 800dc34:	4413      	add	r3, r2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fe fcf0 	bl	800c61c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	607b      	str	r3, [r7, #4]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b37      	cmp	r3, #55	; 0x37
 800dc46:	d9ef      	bls.n	800dc28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc48:	480d      	ldr	r0, [pc, #52]	; (800dc80 <prvInitialiseTaskLists+0x64>)
 800dc4a:	f7fe fce7 	bl	800c61c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc4e:	480d      	ldr	r0, [pc, #52]	; (800dc84 <prvInitialiseTaskLists+0x68>)
 800dc50:	f7fe fce4 	bl	800c61c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc54:	480c      	ldr	r0, [pc, #48]	; (800dc88 <prvInitialiseTaskLists+0x6c>)
 800dc56:	f7fe fce1 	bl	800c61c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc5a:	480c      	ldr	r0, [pc, #48]	; (800dc8c <prvInitialiseTaskLists+0x70>)
 800dc5c:	f7fe fcde 	bl	800c61c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc60:	480b      	ldr	r0, [pc, #44]	; (800dc90 <prvInitialiseTaskLists+0x74>)
 800dc62:	f7fe fcdb 	bl	800c61c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc66:	4b0b      	ldr	r3, [pc, #44]	; (800dc94 <prvInitialiseTaskLists+0x78>)
 800dc68:	4a05      	ldr	r2, [pc, #20]	; (800dc80 <prvInitialiseTaskLists+0x64>)
 800dc6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc6c:	4b0a      	ldr	r3, [pc, #40]	; (800dc98 <prvInitialiseTaskLists+0x7c>)
 800dc6e:	4a05      	ldr	r2, [pc, #20]	; (800dc84 <prvInitialiseTaskLists+0x68>)
 800dc70:	601a      	str	r2, [r3, #0]
}
 800dc72:	bf00      	nop
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	20000ccc 	.word	0x20000ccc
 800dc80:	2000112c 	.word	0x2000112c
 800dc84:	20001140 	.word	0x20001140
 800dc88:	2000115c 	.word	0x2000115c
 800dc8c:	20001170 	.word	0x20001170
 800dc90:	20001188 	.word	0x20001188
 800dc94:	20001154 	.word	0x20001154
 800dc98:	20001158 	.word	0x20001158

0800dc9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dca2:	e019      	b.n	800dcd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dca4:	f000 fdd6 	bl	800e854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dca8:	4b10      	ldr	r3, [pc, #64]	; (800dcec <prvCheckTasksWaitingTermination+0x50>)
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fe fd3b 	bl	800c730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dcba:	4b0d      	ldr	r3, [pc, #52]	; (800dcf0 <prvCheckTasksWaitingTermination+0x54>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	4a0b      	ldr	r2, [pc, #44]	; (800dcf0 <prvCheckTasksWaitingTermination+0x54>)
 800dcc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dcc4:	4b0b      	ldr	r3, [pc, #44]	; (800dcf4 <prvCheckTasksWaitingTermination+0x58>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	4a0a      	ldr	r2, [pc, #40]	; (800dcf4 <prvCheckTasksWaitingTermination+0x58>)
 800dccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dcce:	f000 fdf1 	bl	800e8b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f810 	bl	800dcf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dcd8:	4b06      	ldr	r3, [pc, #24]	; (800dcf4 <prvCheckTasksWaitingTermination+0x58>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1e1      	bne.n	800dca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dce0:	bf00      	nop
 800dce2:	bf00      	nop
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	20001170 	.word	0x20001170
 800dcf0:	2000119c 	.word	0x2000119c
 800dcf4:	20001184 	.word	0x20001184

0800dcf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d108      	bne.n	800dd1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 ff8e 	bl	800ec30 <vPortFree>
				vPortFree( pxTCB );
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 ff8b 	bl	800ec30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd1a:	e018      	b.n	800dd4e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d103      	bne.n	800dd2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 ff82 	bl	800ec30 <vPortFree>
	}
 800dd2c:	e00f      	b.n	800dd4e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d00a      	beq.n	800dd4e <prvDeleteTCB+0x56>
	__asm volatile
 800dd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3c:	f383 8811 	msr	BASEPRI, r3
 800dd40:	f3bf 8f6f 	isb	sy
 800dd44:	f3bf 8f4f 	dsb	sy
 800dd48:	60fb      	str	r3, [r7, #12]
}
 800dd4a:	bf00      	nop
 800dd4c:	e7fe      	b.n	800dd4c <prvDeleteTCB+0x54>
	}
 800dd4e:	bf00      	nop
 800dd50:	3710      	adds	r7, #16
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
	...

0800dd58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd5e:	4b0c      	ldr	r3, [pc, #48]	; (800dd90 <prvResetNextTaskUnblockTime+0x38>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d104      	bne.n	800dd72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd68:	4b0a      	ldr	r3, [pc, #40]	; (800dd94 <prvResetNextTaskUnblockTime+0x3c>)
 800dd6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dd70:	e008      	b.n	800dd84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd72:	4b07      	ldr	r3, [pc, #28]	; (800dd90 <prvResetNextTaskUnblockTime+0x38>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	4a04      	ldr	r2, [pc, #16]	; (800dd94 <prvResetNextTaskUnblockTime+0x3c>)
 800dd82:	6013      	str	r3, [r2, #0]
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	20001154 	.word	0x20001154
 800dd94:	200011bc 	.word	0x200011bc

0800dd98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dd9e:	4b0b      	ldr	r3, [pc, #44]	; (800ddcc <xTaskGetSchedulerState+0x34>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d102      	bne.n	800ddac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dda6:	2301      	movs	r3, #1
 800dda8:	607b      	str	r3, [r7, #4]
 800ddaa:	e008      	b.n	800ddbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddac:	4b08      	ldr	r3, [pc, #32]	; (800ddd0 <xTaskGetSchedulerState+0x38>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d102      	bne.n	800ddba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	607b      	str	r3, [r7, #4]
 800ddb8:	e001      	b.n	800ddbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ddbe:	687b      	ldr	r3, [r7, #4]
	}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	200011a8 	.word	0x200011a8
 800ddd0:	200011c4 	.word	0x200011c4

0800ddd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dde0:	2300      	movs	r3, #0
 800dde2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d056      	beq.n	800de98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ddea:	4b2e      	ldr	r3, [pc, #184]	; (800dea4 <xTaskPriorityDisinherit+0xd0>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	693a      	ldr	r2, [r7, #16]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d00a      	beq.n	800de0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ddf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf8:	f383 8811 	msr	BASEPRI, r3
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	60fb      	str	r3, [r7, #12]
}
 800de06:	bf00      	nop
 800de08:	e7fe      	b.n	800de08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d10a      	bne.n	800de28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800de12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	60bb      	str	r3, [r7, #8]
}
 800de24:	bf00      	nop
 800de26:	e7fe      	b.n	800de26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de2c:	1e5a      	subs	r2, r3, #1
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d02c      	beq.n	800de98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de42:	2b00      	cmp	r3, #0
 800de44:	d128      	bne.n	800de98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	3304      	adds	r3, #4
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe fc70 	bl	800c730 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de68:	4b0f      	ldr	r3, [pc, #60]	; (800dea8 <xTaskPriorityDisinherit+0xd4>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d903      	bls.n	800de78 <xTaskPriorityDisinherit+0xa4>
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de74:	4a0c      	ldr	r2, [pc, #48]	; (800dea8 <xTaskPriorityDisinherit+0xd4>)
 800de76:	6013      	str	r3, [r2, #0]
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de7c:	4613      	mov	r3, r2
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4413      	add	r3, r2
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4a09      	ldr	r2, [pc, #36]	; (800deac <xTaskPriorityDisinherit+0xd8>)
 800de86:	441a      	add	r2, r3
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	3304      	adds	r3, #4
 800de8c:	4619      	mov	r1, r3
 800de8e:	4610      	mov	r0, r2
 800de90:	f7fe fbf1 	bl	800c676 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de94:	2301      	movs	r3, #1
 800de96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de98:	697b      	ldr	r3, [r7, #20]
	}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3718      	adds	r7, #24
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	20000cc8 	.word	0x20000cc8
 800dea8:	200011a4 	.word	0x200011a4
 800deac:	20000ccc 	.word	0x20000ccc

0800deb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800deba:	4b21      	ldr	r3, [pc, #132]	; (800df40 <prvAddCurrentTaskToDelayedList+0x90>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dec0:	4b20      	ldr	r3, [pc, #128]	; (800df44 <prvAddCurrentTaskToDelayedList+0x94>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	3304      	adds	r3, #4
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fe fc32 	bl	800c730 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ded2:	d10a      	bne.n	800deea <prvAddCurrentTaskToDelayedList+0x3a>
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d007      	beq.n	800deea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800deda:	4b1a      	ldr	r3, [pc, #104]	; (800df44 <prvAddCurrentTaskToDelayedList+0x94>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	3304      	adds	r3, #4
 800dee0:	4619      	mov	r1, r3
 800dee2:	4819      	ldr	r0, [pc, #100]	; (800df48 <prvAddCurrentTaskToDelayedList+0x98>)
 800dee4:	f7fe fbc7 	bl	800c676 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dee8:	e026      	b.n	800df38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800deea:	68fa      	ldr	r2, [r7, #12]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4413      	add	r3, r2
 800def0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800def2:	4b14      	ldr	r3, [pc, #80]	; (800df44 <prvAddCurrentTaskToDelayedList+0x94>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	429a      	cmp	r2, r3
 800df00:	d209      	bcs.n	800df16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df02:	4b12      	ldr	r3, [pc, #72]	; (800df4c <prvAddCurrentTaskToDelayedList+0x9c>)
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	4b0f      	ldr	r3, [pc, #60]	; (800df44 <prvAddCurrentTaskToDelayedList+0x94>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	3304      	adds	r3, #4
 800df0c:	4619      	mov	r1, r3
 800df0e:	4610      	mov	r0, r2
 800df10:	f7fe fbd5 	bl	800c6be <vListInsert>
}
 800df14:	e010      	b.n	800df38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df16:	4b0e      	ldr	r3, [pc, #56]	; (800df50 <prvAddCurrentTaskToDelayedList+0xa0>)
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	4b0a      	ldr	r3, [pc, #40]	; (800df44 <prvAddCurrentTaskToDelayedList+0x94>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	3304      	adds	r3, #4
 800df20:	4619      	mov	r1, r3
 800df22:	4610      	mov	r0, r2
 800df24:	f7fe fbcb 	bl	800c6be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d202      	bcs.n	800df38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800df32:	4a08      	ldr	r2, [pc, #32]	; (800df54 <prvAddCurrentTaskToDelayedList+0xa4>)
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	6013      	str	r3, [r2, #0]
}
 800df38:	bf00      	nop
 800df3a:	3710      	adds	r7, #16
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	200011a0 	.word	0x200011a0
 800df44:	20000cc8 	.word	0x20000cc8
 800df48:	20001188 	.word	0x20001188
 800df4c:	20001158 	.word	0x20001158
 800df50:	20001154 	.word	0x20001154
 800df54:	200011bc 	.word	0x200011bc

0800df58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08a      	sub	sp, #40	; 0x28
 800df5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df5e:	2300      	movs	r3, #0
 800df60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df62:	f000 fb07 	bl	800e574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df66:	4b1c      	ldr	r3, [pc, #112]	; (800dfd8 <xTimerCreateTimerTask+0x80>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d021      	beq.n	800dfb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df6e:	2300      	movs	r3, #0
 800df70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df76:	1d3a      	adds	r2, r7, #4
 800df78:	f107 0108 	add.w	r1, r7, #8
 800df7c:	f107 030c 	add.w	r3, r7, #12
 800df80:	4618      	mov	r0, r3
 800df82:	f7fe fb31 	bl	800c5e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df86:	6879      	ldr	r1, [r7, #4]
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	9202      	str	r2, [sp, #8]
 800df8e:	9301      	str	r3, [sp, #4]
 800df90:	2302      	movs	r3, #2
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	2300      	movs	r3, #0
 800df96:	460a      	mov	r2, r1
 800df98:	4910      	ldr	r1, [pc, #64]	; (800dfdc <xTimerCreateTimerTask+0x84>)
 800df9a:	4811      	ldr	r0, [pc, #68]	; (800dfe0 <xTimerCreateTimerTask+0x88>)
 800df9c:	f7ff f8de 	bl	800d15c <xTaskCreateStatic>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	4a10      	ldr	r2, [pc, #64]	; (800dfe4 <xTimerCreateTimerTask+0x8c>)
 800dfa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dfa6:	4b0f      	ldr	r3, [pc, #60]	; (800dfe4 <xTimerCreateTimerTask+0x8c>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d001      	beq.n	800dfb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10a      	bne.n	800dfce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	613b      	str	r3, [r7, #16]
}
 800dfca:	bf00      	nop
 800dfcc:	e7fe      	b.n	800dfcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dfce:	697b      	ldr	r3, [r7, #20]
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3718      	adds	r7, #24
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	200011f8 	.word	0x200011f8
 800dfdc:	08010014 	.word	0x08010014
 800dfe0:	0800e11d 	.word	0x0800e11d
 800dfe4:	200011fc 	.word	0x200011fc

0800dfe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b08a      	sub	sp, #40	; 0x28
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
 800dff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dff6:	2300      	movs	r3, #0
 800dff8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d10a      	bne.n	800e016 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e004:	f383 8811 	msr	BASEPRI, r3
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	623b      	str	r3, [r7, #32]
}
 800e012:	bf00      	nop
 800e014:	e7fe      	b.n	800e014 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e016:	4b1a      	ldr	r3, [pc, #104]	; (800e080 <xTimerGenericCommand+0x98>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d02a      	beq.n	800e074 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2b05      	cmp	r3, #5
 800e02e:	dc18      	bgt.n	800e062 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e030:	f7ff feb2 	bl	800dd98 <xTaskGetSchedulerState>
 800e034:	4603      	mov	r3, r0
 800e036:	2b02      	cmp	r3, #2
 800e038:	d109      	bne.n	800e04e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e03a:	4b11      	ldr	r3, [pc, #68]	; (800e080 <xTimerGenericCommand+0x98>)
 800e03c:	6818      	ldr	r0, [r3, #0]
 800e03e:	f107 0110 	add.w	r1, r7, #16
 800e042:	2300      	movs	r3, #0
 800e044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e046:	f7fe fca1 	bl	800c98c <xQueueGenericSend>
 800e04a:	6278      	str	r0, [r7, #36]	; 0x24
 800e04c:	e012      	b.n	800e074 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e04e:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <xTimerGenericCommand+0x98>)
 800e050:	6818      	ldr	r0, [r3, #0]
 800e052:	f107 0110 	add.w	r1, r7, #16
 800e056:	2300      	movs	r3, #0
 800e058:	2200      	movs	r2, #0
 800e05a:	f7fe fc97 	bl	800c98c <xQueueGenericSend>
 800e05e:	6278      	str	r0, [r7, #36]	; 0x24
 800e060:	e008      	b.n	800e074 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e062:	4b07      	ldr	r3, [pc, #28]	; (800e080 <xTimerGenericCommand+0x98>)
 800e064:	6818      	ldr	r0, [r3, #0]
 800e066:	f107 0110 	add.w	r1, r7, #16
 800e06a:	2300      	movs	r3, #0
 800e06c:	683a      	ldr	r2, [r7, #0]
 800e06e:	f7fe fd8b 	bl	800cb88 <xQueueGenericSendFromISR>
 800e072:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e076:	4618      	mov	r0, r3
 800e078:	3728      	adds	r7, #40	; 0x28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	200011f8 	.word	0x200011f8

0800e084 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af02      	add	r7, sp, #8
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e08e:	4b22      	ldr	r3, [pc, #136]	; (800e118 <prvProcessExpiredTimer+0x94>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	3304      	adds	r3, #4
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fe fb47 	bl	800c730 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0a8:	f003 0304 	and.w	r3, r3, #4
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d022      	beq.n	800e0f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	699a      	ldr	r2, [r3, #24]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	18d1      	adds	r1, r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	6978      	ldr	r0, [r7, #20]
 800e0be:	f000 f8d1 	bl	800e264 <prvInsertTimerInActiveList>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d01f      	beq.n	800e108 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	6978      	ldr	r0, [r7, #20]
 800e0d4:	f7ff ff88 	bl	800dfe8 <xTimerGenericCommand>
 800e0d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d113      	bne.n	800e108 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e4:	f383 8811 	msr	BASEPRI, r3
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	60fb      	str	r3, [r7, #12]
}
 800e0f2:	bf00      	nop
 800e0f4:	e7fe      	b.n	800e0f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0fc:	f023 0301 	bic.w	r3, r3, #1
 800e100:	b2da      	uxtb	r2, r3
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	6a1b      	ldr	r3, [r3, #32]
 800e10c:	6978      	ldr	r0, [r7, #20]
 800e10e:	4798      	blx	r3
}
 800e110:	bf00      	nop
 800e112:	3718      	adds	r7, #24
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	200011f0 	.word	0x200011f0

0800e11c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e124:	f107 0308 	add.w	r3, r7, #8
 800e128:	4618      	mov	r0, r3
 800e12a:	f000 f857 	bl	800e1dc <prvGetNextExpireTime>
 800e12e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	4619      	mov	r1, r3
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f000 f803 	bl	800e140 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e13a:	f000 f8d5 	bl	800e2e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e13e:	e7f1      	b.n	800e124 <prvTimerTask+0x8>

0800e140 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e14a:	f7ff fa43 	bl	800d5d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e14e:	f107 0308 	add.w	r3, r7, #8
 800e152:	4618      	mov	r0, r3
 800e154:	f000 f866 	bl	800e224 <prvSampleTimeNow>
 800e158:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d130      	bne.n	800e1c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10a      	bne.n	800e17c <prvProcessTimerOrBlockTask+0x3c>
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d806      	bhi.n	800e17c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e16e:	f7ff fa3f 	bl	800d5f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e172:	68f9      	ldr	r1, [r7, #12]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7ff ff85 	bl	800e084 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e17a:	e024      	b.n	800e1c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d008      	beq.n	800e194 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e182:	4b13      	ldr	r3, [pc, #76]	; (800e1d0 <prvProcessTimerOrBlockTask+0x90>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d101      	bne.n	800e190 <prvProcessTimerOrBlockTask+0x50>
 800e18c:	2301      	movs	r3, #1
 800e18e:	e000      	b.n	800e192 <prvProcessTimerOrBlockTask+0x52>
 800e190:	2300      	movs	r3, #0
 800e192:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e194:	4b0f      	ldr	r3, [pc, #60]	; (800e1d4 <prvProcessTimerOrBlockTask+0x94>)
 800e196:	6818      	ldr	r0, [r3, #0]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	683a      	ldr	r2, [r7, #0]
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	f7fe ffa7 	bl	800d0f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e1a6:	f7ff fa23 	bl	800d5f0 <xTaskResumeAll>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e1b0:	4b09      	ldr	r3, [pc, #36]	; (800e1d8 <prvProcessTimerOrBlockTask+0x98>)
 800e1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1b6:	601a      	str	r2, [r3, #0]
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	f3bf 8f6f 	isb	sy
}
 800e1c0:	e001      	b.n	800e1c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e1c2:	f7ff fa15 	bl	800d5f0 <xTaskResumeAll>
}
 800e1c6:	bf00      	nop
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	200011f4 	.word	0x200011f4
 800e1d4:	200011f8 	.word	0x200011f8
 800e1d8:	e000ed04 	.word	0xe000ed04

0800e1dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b085      	sub	sp, #20
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e1e4:	4b0e      	ldr	r3, [pc, #56]	; (800e220 <prvGetNextExpireTime+0x44>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d101      	bne.n	800e1f2 <prvGetNextExpireTime+0x16>
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	e000      	b.n	800e1f4 <prvGetNextExpireTime+0x18>
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d105      	bne.n	800e20c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e200:	4b07      	ldr	r3, [pc, #28]	; (800e220 <prvGetNextExpireTime+0x44>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	60fb      	str	r3, [r7, #12]
 800e20a:	e001      	b.n	800e210 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e20c:	2300      	movs	r3, #0
 800e20e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e210:	68fb      	ldr	r3, [r7, #12]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3714      	adds	r7, #20
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	200011f0 	.word	0x200011f0

0800e224 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e22c:	f7ff fa7e 	bl	800d72c <xTaskGetTickCount>
 800e230:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e232:	4b0b      	ldr	r3, [pc, #44]	; (800e260 <prvSampleTimeNow+0x3c>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	68fa      	ldr	r2, [r7, #12]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d205      	bcs.n	800e248 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e23c:	f000 f936 	bl	800e4ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	601a      	str	r2, [r3, #0]
 800e246:	e002      	b.n	800e24e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e24e:	4a04      	ldr	r2, [pc, #16]	; (800e260 <prvSampleTimeNow+0x3c>)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e254:	68fb      	ldr	r3, [r7, #12]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	20001200 	.word	0x20001200

0800e264 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e272:	2300      	movs	r3, #0
 800e274:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	429a      	cmp	r2, r3
 800e288:	d812      	bhi.n	800e2b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	1ad2      	subs	r2, r2, r3
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	699b      	ldr	r3, [r3, #24]
 800e294:	429a      	cmp	r2, r3
 800e296:	d302      	bcc.n	800e29e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e298:	2301      	movs	r3, #1
 800e29a:	617b      	str	r3, [r7, #20]
 800e29c:	e01b      	b.n	800e2d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e29e:	4b10      	ldr	r3, [pc, #64]	; (800e2e0 <prvInsertTimerInActiveList+0x7c>)
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	f7fe fa08 	bl	800c6be <vListInsert>
 800e2ae:	e012      	b.n	800e2d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d206      	bcs.n	800e2c6 <prvInsertTimerInActiveList+0x62>
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d302      	bcc.n	800e2c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	617b      	str	r3, [r7, #20]
 800e2c4:	e007      	b.n	800e2d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2c6:	4b07      	ldr	r3, [pc, #28]	; (800e2e4 <prvInsertTimerInActiveList+0x80>)
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	4610      	mov	r0, r2
 800e2d2:	f7fe f9f4 	bl	800c6be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e2d6:	697b      	ldr	r3, [r7, #20]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3718      	adds	r7, #24
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	200011f4 	.word	0x200011f4
 800e2e4:	200011f0 	.word	0x200011f0

0800e2e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08e      	sub	sp, #56	; 0x38
 800e2ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2ee:	e0ca      	b.n	800e486 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	da18      	bge.n	800e328 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e2f6:	1d3b      	adds	r3, r7, #4
 800e2f8:	3304      	adds	r3, #4
 800e2fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10a      	bne.n	800e318 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	61fb      	str	r3, [r7, #28]
}
 800e314:	bf00      	nop
 800e316:	e7fe      	b.n	800e316 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e31e:	6850      	ldr	r0, [r2, #4]
 800e320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e322:	6892      	ldr	r2, [r2, #8]
 800e324:	4611      	mov	r1, r2
 800e326:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f2c0 80ab 	blt.w	800e486 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	695b      	ldr	r3, [r3, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d004      	beq.n	800e346 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33e:	3304      	adds	r3, #4
 800e340:	4618      	mov	r0, r3
 800e342:	f7fe f9f5 	bl	800c730 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e346:	463b      	mov	r3, r7
 800e348:	4618      	mov	r0, r3
 800e34a:	f7ff ff6b 	bl	800e224 <prvSampleTimeNow>
 800e34e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b09      	cmp	r3, #9
 800e354:	f200 8096 	bhi.w	800e484 <prvProcessReceivedCommands+0x19c>
 800e358:	a201      	add	r2, pc, #4	; (adr r2, 800e360 <prvProcessReceivedCommands+0x78>)
 800e35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35e:	bf00      	nop
 800e360:	0800e389 	.word	0x0800e389
 800e364:	0800e389 	.word	0x0800e389
 800e368:	0800e389 	.word	0x0800e389
 800e36c:	0800e3fd 	.word	0x0800e3fd
 800e370:	0800e411 	.word	0x0800e411
 800e374:	0800e45b 	.word	0x0800e45b
 800e378:	0800e389 	.word	0x0800e389
 800e37c:	0800e389 	.word	0x0800e389
 800e380:	0800e3fd 	.word	0x0800e3fd
 800e384:	0800e411 	.word	0x0800e411
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e38e:	f043 0301 	orr.w	r3, r3, #1
 800e392:	b2da      	uxtb	r2, r3
 800e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	18d1      	adds	r1, r2, r3
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3a8:	f7ff ff5c 	bl	800e264 <prvInsertTimerInActiveList>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d069      	beq.n	800e486 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b4:	6a1b      	ldr	r3, [r3, #32]
 800e3b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3c0:	f003 0304 	and.w	r3, r3, #4
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d05e      	beq.n	800e486 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	441a      	add	r2, r3
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3da:	f7ff fe05 	bl	800dfe8 <xTimerGenericCommand>
 800e3de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d14f      	bne.n	800e486 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	61bb      	str	r3, [r7, #24]
}
 800e3f8:	bf00      	nop
 800e3fa:	e7fe      	b.n	800e3fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e402:	f023 0301 	bic.w	r3, r3, #1
 800e406:	b2da      	uxtb	r2, r3
 800e408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e40e:	e03a      	b.n	800e486 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e416:	f043 0301 	orr.w	r3, r3, #1
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e426:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42a:	699b      	ldr	r3, [r3, #24]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10a      	bne.n	800e446 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	f383 8811 	msr	BASEPRI, r3
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	f3bf 8f4f 	dsb	sy
 800e440:	617b      	str	r3, [r7, #20]
}
 800e442:	bf00      	nop
 800e444:	e7fe      	b.n	800e444 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	699a      	ldr	r2, [r3, #24]
 800e44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44c:	18d1      	adds	r1, r2, r3
 800e44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e454:	f7ff ff06 	bl	800e264 <prvInsertTimerInActiveList>
					break;
 800e458:	e015      	b.n	800e486 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e460:	f003 0302 	and.w	r3, r3, #2
 800e464:	2b00      	cmp	r3, #0
 800e466:	d103      	bne.n	800e470 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e46a:	f000 fbe1 	bl	800ec30 <vPortFree>
 800e46e:	e00a      	b.n	800e486 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e476:	f023 0301 	bic.w	r3, r3, #1
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e482:	e000      	b.n	800e486 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e484:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e486:	4b08      	ldr	r3, [pc, #32]	; (800e4a8 <prvProcessReceivedCommands+0x1c0>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	1d39      	adds	r1, r7, #4
 800e48c:	2200      	movs	r2, #0
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fe fc16 	bl	800ccc0 <xQueueReceive>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	f47f af2a 	bne.w	800e2f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e49c:	bf00      	nop
 800e49e:	bf00      	nop
 800e4a0:	3730      	adds	r7, #48	; 0x30
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	200011f8 	.word	0x200011f8

0800e4ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b088      	sub	sp, #32
 800e4b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4b2:	e048      	b.n	800e546 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4b4:	4b2d      	ldr	r3, [pc, #180]	; (800e56c <prvSwitchTimerLists+0xc0>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4be:	4b2b      	ldr	r3, [pc, #172]	; (800e56c <prvSwitchTimerLists+0xc0>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe f92f 	bl	800c730 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6a1b      	ldr	r3, [r3, #32]
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4e0:	f003 0304 	and.w	r3, r3, #4
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d02e      	beq.n	800e546 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	699b      	ldr	r3, [r3, #24]
 800e4ec:	693a      	ldr	r2, [r7, #16]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e4f2:	68ba      	ldr	r2, [r7, #8]
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d90e      	bls.n	800e518 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e506:	4b19      	ldr	r3, [pc, #100]	; (800e56c <prvSwitchTimerLists+0xc0>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3304      	adds	r3, #4
 800e50e:	4619      	mov	r1, r3
 800e510:	4610      	mov	r0, r2
 800e512:	f7fe f8d4 	bl	800c6be <vListInsert>
 800e516:	e016      	b.n	800e546 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e518:	2300      	movs	r3, #0
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	2300      	movs	r3, #0
 800e51e:	693a      	ldr	r2, [r7, #16]
 800e520:	2100      	movs	r1, #0
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f7ff fd60 	bl	800dfe8 <xTimerGenericCommand>
 800e528:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d10a      	bne.n	800e546 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e534:	f383 8811 	msr	BASEPRI, r3
 800e538:	f3bf 8f6f 	isb	sy
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	603b      	str	r3, [r7, #0]
}
 800e542:	bf00      	nop
 800e544:	e7fe      	b.n	800e544 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e546:	4b09      	ldr	r3, [pc, #36]	; (800e56c <prvSwitchTimerLists+0xc0>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1b1      	bne.n	800e4b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e550:	4b06      	ldr	r3, [pc, #24]	; (800e56c <prvSwitchTimerLists+0xc0>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e556:	4b06      	ldr	r3, [pc, #24]	; (800e570 <prvSwitchTimerLists+0xc4>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a04      	ldr	r2, [pc, #16]	; (800e56c <prvSwitchTimerLists+0xc0>)
 800e55c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e55e:	4a04      	ldr	r2, [pc, #16]	; (800e570 <prvSwitchTimerLists+0xc4>)
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	6013      	str	r3, [r2, #0]
}
 800e564:	bf00      	nop
 800e566:	3718      	adds	r7, #24
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	200011f0 	.word	0x200011f0
 800e570:	200011f4 	.word	0x200011f4

0800e574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e57a:	f000 f96b 	bl	800e854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e57e:	4b15      	ldr	r3, [pc, #84]	; (800e5d4 <prvCheckForValidListAndQueue+0x60>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d120      	bne.n	800e5c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e586:	4814      	ldr	r0, [pc, #80]	; (800e5d8 <prvCheckForValidListAndQueue+0x64>)
 800e588:	f7fe f848 	bl	800c61c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e58c:	4813      	ldr	r0, [pc, #76]	; (800e5dc <prvCheckForValidListAndQueue+0x68>)
 800e58e:	f7fe f845 	bl	800c61c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e592:	4b13      	ldr	r3, [pc, #76]	; (800e5e0 <prvCheckForValidListAndQueue+0x6c>)
 800e594:	4a10      	ldr	r2, [pc, #64]	; (800e5d8 <prvCheckForValidListAndQueue+0x64>)
 800e596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e598:	4b12      	ldr	r3, [pc, #72]	; (800e5e4 <prvCheckForValidListAndQueue+0x70>)
 800e59a:	4a10      	ldr	r2, [pc, #64]	; (800e5dc <prvCheckForValidListAndQueue+0x68>)
 800e59c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e59e:	2300      	movs	r3, #0
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	4b11      	ldr	r3, [pc, #68]	; (800e5e8 <prvCheckForValidListAndQueue+0x74>)
 800e5a4:	4a11      	ldr	r2, [pc, #68]	; (800e5ec <prvCheckForValidListAndQueue+0x78>)
 800e5a6:	2110      	movs	r1, #16
 800e5a8:	200a      	movs	r0, #10
 800e5aa:	f7fe f953 	bl	800c854 <xQueueGenericCreateStatic>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	4a08      	ldr	r2, [pc, #32]	; (800e5d4 <prvCheckForValidListAndQueue+0x60>)
 800e5b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e5b4:	4b07      	ldr	r3, [pc, #28]	; (800e5d4 <prvCheckForValidListAndQueue+0x60>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d005      	beq.n	800e5c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e5bc:	4b05      	ldr	r3, [pc, #20]	; (800e5d4 <prvCheckForValidListAndQueue+0x60>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	490b      	ldr	r1, [pc, #44]	; (800e5f0 <prvCheckForValidListAndQueue+0x7c>)
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fe fd6c 	bl	800d0a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5c8:	f000 f974 	bl	800e8b4 <vPortExitCritical>
}
 800e5cc:	bf00      	nop
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	200011f8 	.word	0x200011f8
 800e5d8:	200011c8 	.word	0x200011c8
 800e5dc:	200011dc 	.word	0x200011dc
 800e5e0:	200011f0 	.word	0x200011f0
 800e5e4:	200011f4 	.word	0x200011f4
 800e5e8:	200012a4 	.word	0x200012a4
 800e5ec:	20001204 	.word	0x20001204
 800e5f0:	0801001c 	.word	0x0801001c

0800e5f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3b04      	subs	r3, #4
 800e604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e60c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	3b04      	subs	r3, #4
 800e612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	f023 0201 	bic.w	r2, r3, #1
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	3b04      	subs	r3, #4
 800e622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e624:	4a0c      	ldr	r2, [pc, #48]	; (800e658 <pxPortInitialiseStack+0x64>)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	3b14      	subs	r3, #20
 800e62e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3b04      	subs	r3, #4
 800e63a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f06f 0202 	mvn.w	r2, #2
 800e642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	3b20      	subs	r3, #32
 800e648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e64a:	68fb      	ldr	r3, [r7, #12]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3714      	adds	r7, #20
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr
 800e658:	0800e65d 	.word	0x0800e65d

0800e65c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e662:	2300      	movs	r3, #0
 800e664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e666:	4b12      	ldr	r3, [pc, #72]	; (800e6b0 <prvTaskExitError+0x54>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e66e:	d00a      	beq.n	800e686 <prvTaskExitError+0x2a>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	60fb      	str	r3, [r7, #12]
}
 800e682:	bf00      	nop
 800e684:	e7fe      	b.n	800e684 <prvTaskExitError+0x28>
	__asm volatile
 800e686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	60bb      	str	r3, [r7, #8]
}
 800e698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e69a:	bf00      	nop
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d0fc      	beq.n	800e69c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e6a2:	bf00      	nop
 800e6a4:	bf00      	nop
 800e6a6:	3714      	adds	r7, #20
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr
 800e6b0:	20000150 	.word	0x20000150
	...

0800e6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e6c0:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <pxCurrentTCBConst2>)
 800e6c2:	6819      	ldr	r1, [r3, #0]
 800e6c4:	6808      	ldr	r0, [r1, #0]
 800e6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ca:	f380 8809 	msr	PSP, r0
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f04f 0000 	mov.w	r0, #0
 800e6d6:	f380 8811 	msr	BASEPRI, r0
 800e6da:	4770      	bx	lr
 800e6dc:	f3af 8000 	nop.w

0800e6e0 <pxCurrentTCBConst2>:
 800e6e0:	20000cc8 	.word	0x20000cc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop

0800e6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e6e8:	4808      	ldr	r0, [pc, #32]	; (800e70c <prvPortStartFirstTask+0x24>)
 800e6ea:	6800      	ldr	r0, [r0, #0]
 800e6ec:	6800      	ldr	r0, [r0, #0]
 800e6ee:	f380 8808 	msr	MSP, r0
 800e6f2:	f04f 0000 	mov.w	r0, #0
 800e6f6:	f380 8814 	msr	CONTROL, r0
 800e6fa:	b662      	cpsie	i
 800e6fc:	b661      	cpsie	f
 800e6fe:	f3bf 8f4f 	dsb	sy
 800e702:	f3bf 8f6f 	isb	sy
 800e706:	df00      	svc	0
 800e708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e70a:	bf00      	nop
 800e70c:	e000ed08 	.word	0xe000ed08

0800e710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e716:	4b46      	ldr	r3, [pc, #280]	; (800e830 <xPortStartScheduler+0x120>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a46      	ldr	r2, [pc, #280]	; (800e834 <xPortStartScheduler+0x124>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d10a      	bne.n	800e736 <xPortStartScheduler+0x26>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	613b      	str	r3, [r7, #16]
}
 800e732:	bf00      	nop
 800e734:	e7fe      	b.n	800e734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e736:	4b3e      	ldr	r3, [pc, #248]	; (800e830 <xPortStartScheduler+0x120>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a3f      	ldr	r2, [pc, #252]	; (800e838 <xPortStartScheduler+0x128>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d10a      	bne.n	800e756 <xPortStartScheduler+0x46>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	60fb      	str	r3, [r7, #12]
}
 800e752:	bf00      	nop
 800e754:	e7fe      	b.n	800e754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e756:	4b39      	ldr	r3, [pc, #228]	; (800e83c <xPortStartScheduler+0x12c>)
 800e758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	22ff      	movs	r2, #255	; 0xff
 800e766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e770:	78fb      	ldrb	r3, [r7, #3]
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	4b31      	ldr	r3, [pc, #196]	; (800e840 <xPortStartScheduler+0x130>)
 800e77c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e77e:	4b31      	ldr	r3, [pc, #196]	; (800e844 <xPortStartScheduler+0x134>)
 800e780:	2207      	movs	r2, #7
 800e782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e784:	e009      	b.n	800e79a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e786:	4b2f      	ldr	r3, [pc, #188]	; (800e844 <xPortStartScheduler+0x134>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	3b01      	subs	r3, #1
 800e78c:	4a2d      	ldr	r2, [pc, #180]	; (800e844 <xPortStartScheduler+0x134>)
 800e78e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	b2db      	uxtb	r3, r3
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	b2db      	uxtb	r3, r3
 800e798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e79a:	78fb      	ldrb	r3, [r7, #3]
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7a2:	2b80      	cmp	r3, #128	; 0x80
 800e7a4:	d0ef      	beq.n	800e786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e7a6:	4b27      	ldr	r3, [pc, #156]	; (800e844 <xPortStartScheduler+0x134>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f1c3 0307 	rsb	r3, r3, #7
 800e7ae:	2b04      	cmp	r3, #4
 800e7b0:	d00a      	beq.n	800e7c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	60bb      	str	r3, [r7, #8]
}
 800e7c4:	bf00      	nop
 800e7c6:	e7fe      	b.n	800e7c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e7c8:	4b1e      	ldr	r3, [pc, #120]	; (800e844 <xPortStartScheduler+0x134>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	021b      	lsls	r3, r3, #8
 800e7ce:	4a1d      	ldr	r2, [pc, #116]	; (800e844 <xPortStartScheduler+0x134>)
 800e7d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e7d2:	4b1c      	ldr	r3, [pc, #112]	; (800e844 <xPortStartScheduler+0x134>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e7da:	4a1a      	ldr	r2, [pc, #104]	; (800e844 <xPortStartScheduler+0x134>)
 800e7dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e7e6:	4b18      	ldr	r3, [pc, #96]	; (800e848 <xPortStartScheduler+0x138>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a17      	ldr	r2, [pc, #92]	; (800e848 <xPortStartScheduler+0x138>)
 800e7ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e7f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e7f2:	4b15      	ldr	r3, [pc, #84]	; (800e848 <xPortStartScheduler+0x138>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a14      	ldr	r2, [pc, #80]	; (800e848 <xPortStartScheduler+0x138>)
 800e7f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e7fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e7fe:	f000 f8dd 	bl	800e9bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e802:	4b12      	ldr	r3, [pc, #72]	; (800e84c <xPortStartScheduler+0x13c>)
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e808:	f000 f8fc 	bl	800ea04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e80c:	4b10      	ldr	r3, [pc, #64]	; (800e850 <xPortStartScheduler+0x140>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a0f      	ldr	r2, [pc, #60]	; (800e850 <xPortStartScheduler+0x140>)
 800e812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e818:	f7ff ff66 	bl	800e6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e81c:	f7ff f850 	bl	800d8c0 <vTaskSwitchContext>
	prvTaskExitError();
 800e820:	f7ff ff1c 	bl	800e65c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e824:	2300      	movs	r3, #0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3718      	adds	r7, #24
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	e000ed00 	.word	0xe000ed00
 800e834:	410fc271 	.word	0x410fc271
 800e838:	410fc270 	.word	0x410fc270
 800e83c:	e000e400 	.word	0xe000e400
 800e840:	200012f4 	.word	0x200012f4
 800e844:	200012f8 	.word	0x200012f8
 800e848:	e000ed20 	.word	0xe000ed20
 800e84c:	20000150 	.word	0x20000150
 800e850:	e000ef34 	.word	0xe000ef34

0800e854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
	__asm volatile
 800e85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85e:	f383 8811 	msr	BASEPRI, r3
 800e862:	f3bf 8f6f 	isb	sy
 800e866:	f3bf 8f4f 	dsb	sy
 800e86a:	607b      	str	r3, [r7, #4]
}
 800e86c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e86e:	4b0f      	ldr	r3, [pc, #60]	; (800e8ac <vPortEnterCritical+0x58>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3301      	adds	r3, #1
 800e874:	4a0d      	ldr	r2, [pc, #52]	; (800e8ac <vPortEnterCritical+0x58>)
 800e876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e878:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <vPortEnterCritical+0x58>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d10f      	bne.n	800e8a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e880:	4b0b      	ldr	r3, [pc, #44]	; (800e8b0 <vPortEnterCritical+0x5c>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	b2db      	uxtb	r3, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00a      	beq.n	800e8a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	603b      	str	r3, [r7, #0]
}
 800e89c:	bf00      	nop
 800e89e:	e7fe      	b.n	800e89e <vPortEnterCritical+0x4a>
	}
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	20000150 	.word	0x20000150
 800e8b0:	e000ed04 	.word	0xe000ed04

0800e8b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e8ba:	4b12      	ldr	r3, [pc, #72]	; (800e904 <vPortExitCritical+0x50>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d10a      	bne.n	800e8d8 <vPortExitCritical+0x24>
	__asm volatile
 800e8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c6:	f383 8811 	msr	BASEPRI, r3
 800e8ca:	f3bf 8f6f 	isb	sy
 800e8ce:	f3bf 8f4f 	dsb	sy
 800e8d2:	607b      	str	r3, [r7, #4]
}
 800e8d4:	bf00      	nop
 800e8d6:	e7fe      	b.n	800e8d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e8d8:	4b0a      	ldr	r3, [pc, #40]	; (800e904 <vPortExitCritical+0x50>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	3b01      	subs	r3, #1
 800e8de:	4a09      	ldr	r2, [pc, #36]	; (800e904 <vPortExitCritical+0x50>)
 800e8e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e8e2:	4b08      	ldr	r3, [pc, #32]	; (800e904 <vPortExitCritical+0x50>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d105      	bne.n	800e8f6 <vPortExitCritical+0x42>
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	f383 8811 	msr	BASEPRI, r3
}
 800e8f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e8f6:	bf00      	nop
 800e8f8:	370c      	adds	r7, #12
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	20000150 	.word	0x20000150
	...

0800e910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e910:	f3ef 8009 	mrs	r0, PSP
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	4b15      	ldr	r3, [pc, #84]	; (800e970 <pxCurrentTCBConst>)
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	f01e 0f10 	tst.w	lr, #16
 800e920:	bf08      	it	eq
 800e922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e92a:	6010      	str	r0, [r2, #0]
 800e92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e930:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e934:	f380 8811 	msr	BASEPRI, r0
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f7fe ffbe 	bl	800d8c0 <vTaskSwitchContext>
 800e944:	f04f 0000 	mov.w	r0, #0
 800e948:	f380 8811 	msr	BASEPRI, r0
 800e94c:	bc09      	pop	{r0, r3}
 800e94e:	6819      	ldr	r1, [r3, #0]
 800e950:	6808      	ldr	r0, [r1, #0]
 800e952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e956:	f01e 0f10 	tst.w	lr, #16
 800e95a:	bf08      	it	eq
 800e95c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e960:	f380 8809 	msr	PSP, r0
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	4770      	bx	lr
 800e96a:	bf00      	nop
 800e96c:	f3af 8000 	nop.w

0800e970 <pxCurrentTCBConst>:
 800e970:	20000cc8 	.word	0x20000cc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e974:	bf00      	nop
 800e976:	bf00      	nop

0800e978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	607b      	str	r3, [r7, #4]
}
 800e990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e992:	f7fe fedb 	bl	800d74c <xTaskIncrementTick>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d003      	beq.n	800e9a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e99c:	4b06      	ldr	r3, [pc, #24]	; (800e9b8 <xPortSysTickHandler+0x40>)
 800e99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	f383 8811 	msr	BASEPRI, r3
}
 800e9ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e9b0:	bf00      	nop
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	e000ed04 	.word	0xe000ed04

0800e9bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e9bc:	b480      	push	{r7}
 800e9be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e9c0:	4b0b      	ldr	r3, [pc, #44]	; (800e9f0 <vPortSetupTimerInterrupt+0x34>)
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e9c6:	4b0b      	ldr	r3, [pc, #44]	; (800e9f4 <vPortSetupTimerInterrupt+0x38>)
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9cc:	4b0a      	ldr	r3, [pc, #40]	; (800e9f8 <vPortSetupTimerInterrupt+0x3c>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a0a      	ldr	r2, [pc, #40]	; (800e9fc <vPortSetupTimerInterrupt+0x40>)
 800e9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9d6:	099b      	lsrs	r3, r3, #6
 800e9d8:	4a09      	ldr	r2, [pc, #36]	; (800ea00 <vPortSetupTimerInterrupt+0x44>)
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e9de:	4b04      	ldr	r3, [pc, #16]	; (800e9f0 <vPortSetupTimerInterrupt+0x34>)
 800e9e0:	2207      	movs	r2, #7
 800e9e2:	601a      	str	r2, [r3, #0]
}
 800e9e4:	bf00      	nop
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	e000e010 	.word	0xe000e010
 800e9f4:	e000e018 	.word	0xe000e018
 800e9f8:	20000144 	.word	0x20000144
 800e9fc:	10624dd3 	.word	0x10624dd3
 800ea00:	e000e014 	.word	0xe000e014

0800ea04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ea14 <vPortEnableVFP+0x10>
 800ea08:	6801      	ldr	r1, [r0, #0]
 800ea0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ea0e:	6001      	str	r1, [r0, #0]
 800ea10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea12:	bf00      	nop
 800ea14:	e000ed88 	.word	0xe000ed88

0800ea18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea18:	b480      	push	{r7}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea1e:	f3ef 8305 	mrs	r3, IPSR
 800ea22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2b0f      	cmp	r3, #15
 800ea28:	d914      	bls.n	800ea54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea2a:	4a17      	ldr	r2, [pc, #92]	; (800ea88 <vPortValidateInterruptPriority+0x70>)
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	4413      	add	r3, r2
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ea34:	4b15      	ldr	r3, [pc, #84]	; (800ea8c <vPortValidateInterruptPriority+0x74>)
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	7afa      	ldrb	r2, [r7, #11]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d20a      	bcs.n	800ea54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	607b      	str	r3, [r7, #4]
}
 800ea50:	bf00      	nop
 800ea52:	e7fe      	b.n	800ea52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ea54:	4b0e      	ldr	r3, [pc, #56]	; (800ea90 <vPortValidateInterruptPriority+0x78>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ea5c:	4b0d      	ldr	r3, [pc, #52]	; (800ea94 <vPortValidateInterruptPriority+0x7c>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d90a      	bls.n	800ea7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ea64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	603b      	str	r3, [r7, #0]
}
 800ea76:	bf00      	nop
 800ea78:	e7fe      	b.n	800ea78 <vPortValidateInterruptPriority+0x60>
	}
 800ea7a:	bf00      	nop
 800ea7c:	3714      	adds	r7, #20
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop
 800ea88:	e000e3f0 	.word	0xe000e3f0
 800ea8c:	200012f4 	.word	0x200012f4
 800ea90:	e000ed0c 	.word	0xe000ed0c
 800ea94:	200012f8 	.word	0x200012f8

0800ea98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b08a      	sub	sp, #40	; 0x28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eaa4:	f7fe fd96 	bl	800d5d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eaa8:	4b5b      	ldr	r3, [pc, #364]	; (800ec18 <pvPortMalloc+0x180>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eab0:	f000 f920 	bl	800ecf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eab4:	4b59      	ldr	r3, [pc, #356]	; (800ec1c <pvPortMalloc+0x184>)
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4013      	ands	r3, r2
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f040 8093 	bne.w	800ebe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d01d      	beq.n	800eb04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eac8:	2208      	movs	r2, #8
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4413      	add	r3, r2
 800eace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f003 0307 	and.w	r3, r3, #7
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d014      	beq.n	800eb04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f023 0307 	bic.w	r3, r3, #7
 800eae0:	3308      	adds	r3, #8
 800eae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f003 0307 	and.w	r3, r3, #7
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00a      	beq.n	800eb04 <pvPortMalloc+0x6c>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	f383 8811 	msr	BASEPRI, r3
 800eaf6:	f3bf 8f6f 	isb	sy
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	617b      	str	r3, [r7, #20]
}
 800eb00:	bf00      	nop
 800eb02:	e7fe      	b.n	800eb02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d06e      	beq.n	800ebe8 <pvPortMalloc+0x150>
 800eb0a:	4b45      	ldr	r3, [pc, #276]	; (800ec20 <pvPortMalloc+0x188>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d869      	bhi.n	800ebe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb14:	4b43      	ldr	r3, [pc, #268]	; (800ec24 <pvPortMalloc+0x18c>)
 800eb16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb18:	4b42      	ldr	r3, [pc, #264]	; (800ec24 <pvPortMalloc+0x18c>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb1e:	e004      	b.n	800eb2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d903      	bls.n	800eb3c <pvPortMalloc+0xa4>
 800eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1f1      	bne.n	800eb20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eb3c:	4b36      	ldr	r3, [pc, #216]	; (800ec18 <pvPortMalloc+0x180>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d050      	beq.n	800ebe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb46:	6a3b      	ldr	r3, [r7, #32]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2208      	movs	r2, #8
 800eb4c:	4413      	add	r3, r2
 800eb4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	6a3b      	ldr	r3, [r7, #32]
 800eb56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5a:	685a      	ldr	r2, [r3, #4]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	1ad2      	subs	r2, r2, r3
 800eb60:	2308      	movs	r3, #8
 800eb62:	005b      	lsls	r3, r3, #1
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d91f      	bls.n	800eba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	f003 0307 	and.w	r3, r3, #7
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00a      	beq.n	800eb90 <pvPortMalloc+0xf8>
	__asm volatile
 800eb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	613b      	str	r3, [r7, #16]
}
 800eb8c:	bf00      	nop
 800eb8e:	e7fe      	b.n	800eb8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	1ad2      	subs	r2, r2, r3
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eba2:	69b8      	ldr	r0, [r7, #24]
 800eba4:	f000 f908 	bl	800edb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eba8:	4b1d      	ldr	r3, [pc, #116]	; (800ec20 <pvPortMalloc+0x188>)
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	4a1b      	ldr	r2, [pc, #108]	; (800ec20 <pvPortMalloc+0x188>)
 800ebb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ebb6:	4b1a      	ldr	r3, [pc, #104]	; (800ec20 <pvPortMalloc+0x188>)
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	4b1b      	ldr	r3, [pc, #108]	; (800ec28 <pvPortMalloc+0x190>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d203      	bcs.n	800ebca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ebc2:	4b17      	ldr	r3, [pc, #92]	; (800ec20 <pvPortMalloc+0x188>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4a18      	ldr	r2, [pc, #96]	; (800ec28 <pvPortMalloc+0x190>)
 800ebc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	685a      	ldr	r2, [r3, #4]
 800ebce:	4b13      	ldr	r3, [pc, #76]	; (800ec1c <pvPortMalloc+0x184>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	431a      	orrs	r2, r3
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	2200      	movs	r2, #0
 800ebdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ebde:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <pvPortMalloc+0x194>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	4a11      	ldr	r2, [pc, #68]	; (800ec2c <pvPortMalloc+0x194>)
 800ebe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ebe8:	f7fe fd02 	bl	800d5f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	f003 0307 	and.w	r3, r3, #7
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00a      	beq.n	800ec0c <pvPortMalloc+0x174>
	__asm volatile
 800ebf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfa:	f383 8811 	msr	BASEPRI, r3
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	60fb      	str	r3, [r7, #12]
}
 800ec08:	bf00      	nop
 800ec0a:	e7fe      	b.n	800ec0a <pvPortMalloc+0x172>
	return pvReturn;
 800ec0c:	69fb      	ldr	r3, [r7, #28]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3728      	adds	r7, #40	; 0x28
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	20004f04 	.word	0x20004f04
 800ec1c:	20004f18 	.word	0x20004f18
 800ec20:	20004f08 	.word	0x20004f08
 800ec24:	20004efc 	.word	0x20004efc
 800ec28:	20004f0c 	.word	0x20004f0c
 800ec2c:	20004f10 	.word	0x20004f10

0800ec30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b086      	sub	sp, #24
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d04d      	beq.n	800ecde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ec42:	2308      	movs	r3, #8
 800ec44:	425b      	negs	r3, r3
 800ec46:	697a      	ldr	r2, [r7, #20]
 800ec48:	4413      	add	r3, r2
 800ec4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	685a      	ldr	r2, [r3, #4]
 800ec54:	4b24      	ldr	r3, [pc, #144]	; (800ece8 <vPortFree+0xb8>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4013      	ands	r3, r2
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d10a      	bne.n	800ec74 <vPortFree+0x44>
	__asm volatile
 800ec5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec62:	f383 8811 	msr	BASEPRI, r3
 800ec66:	f3bf 8f6f 	isb	sy
 800ec6a:	f3bf 8f4f 	dsb	sy
 800ec6e:	60fb      	str	r3, [r7, #12]
}
 800ec70:	bf00      	nop
 800ec72:	e7fe      	b.n	800ec72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00a      	beq.n	800ec92 <vPortFree+0x62>
	__asm volatile
 800ec7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec80:	f383 8811 	msr	BASEPRI, r3
 800ec84:	f3bf 8f6f 	isb	sy
 800ec88:	f3bf 8f4f 	dsb	sy
 800ec8c:	60bb      	str	r3, [r7, #8]
}
 800ec8e:	bf00      	nop
 800ec90:	e7fe      	b.n	800ec90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	685a      	ldr	r2, [r3, #4]
 800ec96:	4b14      	ldr	r3, [pc, #80]	; (800ece8 <vPortFree+0xb8>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d01e      	beq.n	800ecde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d11a      	bne.n	800ecde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	685a      	ldr	r2, [r3, #4]
 800ecac:	4b0e      	ldr	r3, [pc, #56]	; (800ece8 <vPortFree+0xb8>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	43db      	mvns	r3, r3
 800ecb2:	401a      	ands	r2, r3
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ecb8:	f7fe fc8c 	bl	800d5d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	685a      	ldr	r2, [r3, #4]
 800ecc0:	4b0a      	ldr	r3, [pc, #40]	; (800ecec <vPortFree+0xbc>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	4a09      	ldr	r2, [pc, #36]	; (800ecec <vPortFree+0xbc>)
 800ecc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ecca:	6938      	ldr	r0, [r7, #16]
 800eccc:	f000 f874 	bl	800edb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ecd0:	4b07      	ldr	r3, [pc, #28]	; (800ecf0 <vPortFree+0xc0>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	4a06      	ldr	r2, [pc, #24]	; (800ecf0 <vPortFree+0xc0>)
 800ecd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ecda:	f7fe fc89 	bl	800d5f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ecde:	bf00      	nop
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20004f18 	.word	0x20004f18
 800ecec:	20004f08 	.word	0x20004f08
 800ecf0:	20004f14 	.word	0x20004f14

0800ecf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ecfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ecfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed00:	4b27      	ldr	r3, [pc, #156]	; (800eda0 <prvHeapInit+0xac>)
 800ed02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f003 0307 	and.w	r3, r3, #7
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00c      	beq.n	800ed28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	3307      	adds	r3, #7
 800ed12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f023 0307 	bic.w	r3, r3, #7
 800ed1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	4a1f      	ldr	r2, [pc, #124]	; (800eda0 <prvHeapInit+0xac>)
 800ed24:	4413      	add	r3, r2
 800ed26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed2c:	4a1d      	ldr	r2, [pc, #116]	; (800eda4 <prvHeapInit+0xb0>)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ed32:	4b1c      	ldr	r3, [pc, #112]	; (800eda4 <prvHeapInit+0xb0>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ed40:	2208      	movs	r2, #8
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	1a9b      	subs	r3, r3, r2
 800ed46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f023 0307 	bic.w	r3, r3, #7
 800ed4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	4a15      	ldr	r2, [pc, #84]	; (800eda8 <prvHeapInit+0xb4>)
 800ed54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed56:	4b14      	ldr	r3, [pc, #80]	; (800eda8 <prvHeapInit+0xb4>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed5e:	4b12      	ldr	r3, [pc, #72]	; (800eda8 <prvHeapInit+0xb4>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2200      	movs	r2, #0
 800ed64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	1ad2      	subs	r2, r2, r3
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed74:	4b0c      	ldr	r3, [pc, #48]	; (800eda8 <prvHeapInit+0xb4>)
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	4a0a      	ldr	r2, [pc, #40]	; (800edac <prvHeapInit+0xb8>)
 800ed82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	4a09      	ldr	r2, [pc, #36]	; (800edb0 <prvHeapInit+0xbc>)
 800ed8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed8c:	4b09      	ldr	r3, [pc, #36]	; (800edb4 <prvHeapInit+0xc0>)
 800ed8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ed92:	601a      	str	r2, [r3, #0]
}
 800ed94:	bf00      	nop
 800ed96:	3714      	adds	r7, #20
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	200012fc 	.word	0x200012fc
 800eda4:	20004efc 	.word	0x20004efc
 800eda8:	20004f04 	.word	0x20004f04
 800edac:	20004f0c 	.word	0x20004f0c
 800edb0:	20004f08 	.word	0x20004f08
 800edb4:	20004f18 	.word	0x20004f18

0800edb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800edc0:	4b28      	ldr	r3, [pc, #160]	; (800ee64 <prvInsertBlockIntoFreeList+0xac>)
 800edc2:	60fb      	str	r3, [r7, #12]
 800edc4:	e002      	b.n	800edcc <prvInsertBlockIntoFreeList+0x14>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	60fb      	str	r3, [r7, #12]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d8f7      	bhi.n	800edc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	68ba      	ldr	r2, [r7, #8]
 800ede0:	4413      	add	r3, r2
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d108      	bne.n	800edfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	685a      	ldr	r2, [r3, #4]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	441a      	add	r2, r3
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	68ba      	ldr	r2, [r7, #8]
 800ee04:	441a      	add	r2, r3
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d118      	bne.n	800ee40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	4b15      	ldr	r3, [pc, #84]	; (800ee68 <prvInsertBlockIntoFreeList+0xb0>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d00d      	beq.n	800ee36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	685a      	ldr	r2, [r3, #4]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	441a      	add	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	601a      	str	r2, [r3, #0]
 800ee34:	e008      	b.n	800ee48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee36:	4b0c      	ldr	r3, [pc, #48]	; (800ee68 <prvInsertBlockIntoFreeList+0xb0>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	e003      	b.n	800ee48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d002      	beq.n	800ee56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee56:	bf00      	nop
 800ee58:	3714      	adds	r7, #20
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	20004efc 	.word	0x20004efc
 800ee68:	20004f04 	.word	0x20004f04

0800ee6c <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b08a      	sub	sp, #40	; 0x28
 800ee70:	af04      	add	r7, sp, #16
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	460b      	mov	r3, r1
 800ee76:	607a      	str	r2, [r7, #4]
 800ee78:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	011b      	lsls	r3, r3, #4
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800ee88:	7afb      	ldrb	r3, [r7, #11]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d101      	bne.n	800ee92 <_ICM20948_SelectUserBank+0x26>
 800ee8e:	2368      	movs	r3, #104	; 0x68
 800ee90:	e000      	b.n	800ee94 <_ICM20948_SelectUserBank+0x28>
 800ee92:	2369      	movs	r3, #105	; 0x69
 800ee94:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800ee96:	7dbb      	ldrb	r3, [r7, #22]
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	005b      	lsls	r3, r3, #1
 800ee9c:	b299      	uxth	r1, r3
 800ee9e:	230a      	movs	r3, #10
 800eea0:	9302      	str	r3, [sp, #8]
 800eea2:	2301      	movs	r3, #1
 800eea4:	9301      	str	r3, [sp, #4]
 800eea6:	f107 0315 	add.w	r3, r7, #21
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	2301      	movs	r3, #1
 800eeae:	227f      	movs	r2, #127	; 0x7f
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	f7f9 f843 	bl	8007f3c <HAL_I2C_Mem_Write>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800eeba:	7dfb      	ldrb	r3, [r7, #23]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3718      	adds	r7, #24
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af04      	add	r7, sp, #16
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	4608      	mov	r0, r1
 800eece:	4611      	mov	r1, r2
 800eed0:	461a      	mov	r2, r3
 800eed2:	4603      	mov	r3, r0
 800eed4:	70fb      	strb	r3, [r7, #3]
 800eed6:	460b      	mov	r3, r1
 800eed8:	70bb      	strb	r3, [r7, #2]
 800eeda:	4613      	mov	r3, r2
 800eedc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800eede:	2300      	movs	r3, #0
 800eee0:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800eee2:	78fb      	ldrb	r3, [r7, #3]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d101      	bne.n	800eeec <_ICM20948_WriteByte+0x28>
 800eee8:	2368      	movs	r3, #104	; 0x68
 800eeea:	e000      	b.n	800eeee <_ICM20948_WriteByte+0x2a>
 800eeec:	2369      	movs	r3, #105	; 0x69
 800eeee:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800eef0:	7bbb      	ldrb	r3, [r7, #14]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	005b      	lsls	r3, r3, #1
 800eef6:	b299      	uxth	r1, r3
 800eef8:	78bb      	ldrb	r3, [r7, #2]
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	230a      	movs	r3, #10
 800eefe:	9302      	str	r3, [sp, #8]
 800ef00:	2301      	movs	r3, #1
 800ef02:	9301      	str	r3, [sp, #4]
 800ef04:	1c7b      	adds	r3, r7, #1
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	2301      	movs	r3, #1
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f7f9 f816 	bl	8007f3c <HAL_I2C_Mem_Write>
 800ef10:	4603      	mov	r3, r0
 800ef12:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800ef14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b084      	sub	sp, #16
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	4608      	mov	r0, r1
 800ef28:	4611      	mov	r1, r2
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	70fb      	strb	r3, [r7, #3]
 800ef30:	460b      	mov	r3, r1
 800ef32:	70bb      	strb	r3, [r7, #2]
 800ef34:	4613      	mov	r3, r2
 800ef36:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800ef3c:	78fb      	ldrb	r3, [r7, #3]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	4619      	mov	r1, r3
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f7ff ff92 	bl	800ee6c <_ICM20948_SelectUserBank>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800ef4c:	78f9      	ldrb	r1, [r7, #3]
 800ef4e:	2380      	movs	r3, #128	; 0x80
 800ef50:	2206      	movs	r2, #6
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7ff ffb6 	bl	800eec4 <_ICM20948_WriteByte>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800ef5c:	20c8      	movs	r0, #200	; 0xc8
 800ef5e:	f7f7 ff5b 	bl	8006e18 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800ef62:	78f9      	ldrb	r1, [r7, #3]
 800ef64:	2301      	movs	r3, #1
 800ef66:	2206      	movs	r2, #6
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7ff ffab 	bl	800eec4 <_ICM20948_WriteByte>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800ef72:	78f9      	ldrb	r1, [r7, #3]
 800ef74:	2300      	movs	r3, #0
 800ef76:	2207      	movs	r2, #7
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7ff ffa3 	bl	800eec4 <_ICM20948_WriteByte>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800ef82:	78fb      	ldrb	r3, [r7, #3]
 800ef84:	2202      	movs	r2, #2
 800ef86:	4619      	mov	r1, r3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f7ff ff6f 	bl	800ee6c <_ICM20948_SelectUserBank>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800ef92:	78bb      	ldrb	r3, [r7, #2]
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	b25b      	sxtb	r3, r3
 800ef98:	f043 0319 	orr.w	r3, r3, #25
 800ef9c:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	78f9      	ldrb	r1, [r7, #3]
 800efa2:	2201      	movs	r2, #1
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7ff ff8d 	bl	800eec4 <_ICM20948_WriteByte>
 800efaa:	4603      	mov	r3, r0
 800efac:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800efae:	78f9      	ldrb	r1, [r7, #3]
 800efb0:	2303      	movs	r3, #3
 800efb2:	2253      	movs	r2, #83	; 0x53
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7ff ff85 	bl	800eec4 <_ICM20948_WriteByte>
 800efba:	4603      	mov	r3, r0
 800efbc:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800efbe:	78f9      	ldrb	r1, [r7, #3]
 800efc0:	2304      	movs	r3, #4
 800efc2:	2200      	movs	r2, #0
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7ff ff7d 	bl	800eec4 <_ICM20948_WriteByte>
 800efca:	4603      	mov	r3, r0
 800efcc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800efce:	787b      	ldrb	r3, [r7, #1]
 800efd0:	005b      	lsls	r3, r3, #1
 800efd2:	b25b      	sxtb	r3, r3
 800efd4:	f043 0319 	orr.w	r3, r3, #25
 800efd8:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	78f9      	ldrb	r1, [r7, #3]
 800efde:	2214      	movs	r2, #20
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f7ff ff6f 	bl	800eec4 <_ICM20948_WriteByte>
 800efe6:	4603      	mov	r3, r0
 800efe8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800efea:	78f9      	ldrb	r1, [r7, #3]
 800efec:	2304      	movs	r3, #4
 800efee:	2211      	movs	r2, #17
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7ff ff67 	bl	800eec4 <_ICM20948_WriteByte>
 800eff6:	4603      	mov	r3, r0
 800eff8:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800effa:	78fb      	ldrb	r3, [r7, #3]
 800effc:	2200      	movs	r2, #0
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff ff33 	bl	800ee6c <_ICM20948_SelectUserBank>
 800f006:	4603      	mov	r3, r0
 800f008:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800f00a:	78f9      	ldrb	r1, [r7, #3]
 800f00c:	2302      	movs	r3, #2
 800f00e:	220f      	movs	r2, #15
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f7ff ff57 	bl	800eec4 <_ICM20948_WriteByte>
 800f016:	4603      	mov	r3, r0
 800f018:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800f01a:	2208      	movs	r2, #8
 800f01c:	2131      	movs	r1, #49	; 0x31
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 f806 	bl	800f030 <_AK09918_WriteByte>
 800f024:	4603      	mov	r3, r0
 800f026:	73fb      	strb	r3, [r7, #15]
}
 800f028:	bf00      	nop
 800f02a:	3710      	adds	r7, #16
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b088      	sub	sp, #32
 800f034:	af04      	add	r7, sp, #16
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	460b      	mov	r3, r1
 800f03a:	70fb      	strb	r3, [r7, #3]
 800f03c:	4613      	mov	r3, r2
 800f03e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800f040:	2300      	movs	r3, #0
 800f042:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800f044:	78fb      	ldrb	r3, [r7, #3]
 800f046:	b29a      	uxth	r2, r3
 800f048:	230a      	movs	r3, #10
 800f04a:	9302      	str	r3, [sp, #8]
 800f04c:	2301      	movs	r3, #1
 800f04e:	9301      	str	r3, [sp, #4]
 800f050:	1cbb      	adds	r3, r7, #2
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	2301      	movs	r3, #1
 800f056:	2118      	movs	r1, #24
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7f8 ff6f 	bl	8007f3c <HAL_I2C_Mem_Write>
 800f05e:	4603      	mov	r3, r0
 800f060:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800f062:	7bfb      	ldrb	r3, [r7, #15]
}
 800f064:	4618      	mov	r0, r3
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800f072:	2300      	movs	r3, #0
 800f074:	71fb      	strb	r3, [r7, #7]
 800f076:	e026      	b.n	800f0c6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	3b50      	subs	r3, #80	; 0x50
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	2100      	movs	r1, #0
 800f080:	4618      	mov	r0, r3
 800f082:	f000 f82b 	bl	800f0dc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800f086:	2100      	movs	r1, #0
 800f088:	2000      	movs	r0, #0
 800f08a:	f000 f827 	bl	800f0dc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800f08e:	2100      	movs	r1, #0
 800f090:	2010      	movs	r0, #16
 800f092:	f000 f823 	bl	800f0dc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800f096:	2300      	movs	r3, #0
 800f098:	71bb      	strb	r3, [r7, #6]
 800f09a:	e00d      	b.n	800f0b8 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800f09c:	79ba      	ldrb	r2, [r7, #6]
 800f09e:	79fb      	ldrb	r3, [r7, #7]
 800f0a0:	490d      	ldr	r1, [pc, #52]	; (800f0d8 <OLED_Refresh_Gram+0x6c>)
 800f0a2:	00d2      	lsls	r2, r2, #3
 800f0a4:	440a      	add	r2, r1
 800f0a6:	4413      	add	r3, r2
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	2101      	movs	r1, #1
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f000 f815 	bl	800f0dc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800f0b2:	79bb      	ldrb	r3, [r7, #6]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	71bb      	strb	r3, [r7, #6]
 800f0b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	daed      	bge.n	800f09c <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800f0c0:	79fb      	ldrb	r3, [r7, #7]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	71fb      	strb	r3, [r7, #7]
 800f0c6:	79fb      	ldrb	r3, [r7, #7]
 800f0c8:	2b07      	cmp	r3, #7
 800f0ca:	d9d5      	bls.n	800f078 <OLED_Refresh_Gram+0xc>
	}
}
 800f0cc:	bf00      	nop
 800f0ce:	bf00      	nop
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	20004f1c 	.word	0x20004f1c

0800f0dc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	460a      	mov	r2, r1
 800f0e6:	71fb      	strb	r3, [r7, #7]
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800f0ec:	79bb      	ldrb	r3, [r7, #6]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d006      	beq.n	800f100 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f0f8:	481c      	ldr	r0, [pc, #112]	; (800f16c <OLED_WR_Byte+0x90>)
 800f0fa:	f7f8 fdc1 	bl	8007c80 <HAL_GPIO_WritePin>
 800f0fe:	e005      	b.n	800f10c <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800f100:	2200      	movs	r2, #0
 800f102:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f106:	4819      	ldr	r0, [pc, #100]	; (800f16c <OLED_WR_Byte+0x90>)
 800f108:	f7f8 fdba 	bl	8007c80 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800f10c:	2300      	movs	r3, #0
 800f10e:	73fb      	strb	r3, [r7, #15]
 800f110:	e01e      	b.n	800f150 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800f112:	2200      	movs	r2, #0
 800f114:	2120      	movs	r1, #32
 800f116:	4815      	ldr	r0, [pc, #84]	; (800f16c <OLED_WR_Byte+0x90>)
 800f118:	f7f8 fdb2 	bl	8007c80 <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800f11c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f120:	2b00      	cmp	r3, #0
 800f122:	da05      	bge.n	800f130 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800f124:	2201      	movs	r2, #1
 800f126:	2140      	movs	r1, #64	; 0x40
 800f128:	4810      	ldr	r0, [pc, #64]	; (800f16c <OLED_WR_Byte+0x90>)
 800f12a:	f7f8 fda9 	bl	8007c80 <HAL_GPIO_WritePin>
 800f12e:	e004      	b.n	800f13a <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800f130:	2200      	movs	r2, #0
 800f132:	2140      	movs	r1, #64	; 0x40
 800f134:	480d      	ldr	r0, [pc, #52]	; (800f16c <OLED_WR_Byte+0x90>)
 800f136:	f7f8 fda3 	bl	8007c80 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800f13a:	2201      	movs	r2, #1
 800f13c:	2120      	movs	r1, #32
 800f13e:	480b      	ldr	r0, [pc, #44]	; (800f16c <OLED_WR_Byte+0x90>)
 800f140:	f7f8 fd9e 	bl	8007c80 <HAL_GPIO_WritePin>
		dat <<= 1;
 800f144:	79fb      	ldrb	r3, [r7, #7]
 800f146:	005b      	lsls	r3, r3, #1
 800f148:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800f14a:	7bfb      	ldrb	r3, [r7, #15]
 800f14c:	3301      	adds	r3, #1
 800f14e:	73fb      	strb	r3, [r7, #15]
 800f150:	7bfb      	ldrb	r3, [r7, #15]
 800f152:	2b07      	cmp	r3, #7
 800f154:	d9dd      	bls.n	800f112 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800f156:	2201      	movs	r2, #1
 800f158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f15c:	4803      	ldr	r0, [pc, #12]	; (800f16c <OLED_WR_Byte+0x90>)
 800f15e:	f7f8 fd8f 	bl	8007c80 <HAL_GPIO_WritePin>
}
 800f162:	bf00      	nop
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	40021000 	.word	0x40021000

0800f170 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800f176:	2300      	movs	r3, #0
 800f178:	71fb      	strb	r3, [r7, #7]
 800f17a:	e014      	b.n	800f1a6 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800f17c:	2300      	movs	r3, #0
 800f17e:	71bb      	strb	r3, [r7, #6]
 800f180:	e00a      	b.n	800f198 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800f182:	79ba      	ldrb	r2, [r7, #6]
 800f184:	79fb      	ldrb	r3, [r7, #7]
 800f186:	490c      	ldr	r1, [pc, #48]	; (800f1b8 <OLED_Clear+0x48>)
 800f188:	00d2      	lsls	r2, r2, #3
 800f18a:	440a      	add	r2, r1
 800f18c:	4413      	add	r3, r2
 800f18e:	2200      	movs	r2, #0
 800f190:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800f192:	79bb      	ldrb	r3, [r7, #6]
 800f194:	3301      	adds	r3, #1
 800f196:	71bb      	strb	r3, [r7, #6]
 800f198:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	daf0      	bge.n	800f182 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800f1a0:	79fb      	ldrb	r3, [r7, #7]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	71fb      	strb	r3, [r7, #7]
 800f1a6:	79fb      	ldrb	r3, [r7, #7]
 800f1a8:	2b07      	cmp	r3, #7
 800f1aa:	d9e7      	bls.n	800f17c <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800f1ac:	f7ff ff5e 	bl	800f06c <OLED_Refresh_Gram>
}
 800f1b0:	bf00      	nop
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	20004f1c 	.word	0x20004f1c

0800f1bc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b085      	sub	sp, #20
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	71fb      	strb	r3, [r7, #7]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	71bb      	strb	r3, [r7, #6]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800f1d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	db41      	blt.n	800f25e <OLED_DrawPoint+0xa2>
 800f1da:	79bb      	ldrb	r3, [r7, #6]
 800f1dc:	2b3f      	cmp	r3, #63	; 0x3f
 800f1de:	d83e      	bhi.n	800f25e <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800f1e0:	79bb      	ldrb	r3, [r7, #6]
 800f1e2:	08db      	lsrs	r3, r3, #3
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	f1c3 0307 	rsb	r3, r3, #7
 800f1ea:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800f1ec:	79bb      	ldrb	r3, [r7, #6]
 800f1ee:	f003 0307 	and.w	r3, r3, #7
 800f1f2:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800f1f4:	7b7b      	ldrb	r3, [r7, #13]
 800f1f6:	f1c3 0307 	rsb	r3, r3, #7
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f200:	73fb      	strb	r3, [r7, #15]
	if (t)
 800f202:	797b      	ldrb	r3, [r7, #5]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d012      	beq.n	800f22e <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800f208:	79fa      	ldrb	r2, [r7, #7]
 800f20a:	7bbb      	ldrb	r3, [r7, #14]
 800f20c:	4917      	ldr	r1, [pc, #92]	; (800f26c <OLED_DrawPoint+0xb0>)
 800f20e:	00d2      	lsls	r2, r2, #3
 800f210:	440a      	add	r2, r1
 800f212:	4413      	add	r3, r2
 800f214:	7818      	ldrb	r0, [r3, #0]
 800f216:	79fa      	ldrb	r2, [r7, #7]
 800f218:	7bbb      	ldrb	r3, [r7, #14]
 800f21a:	7bf9      	ldrb	r1, [r7, #15]
 800f21c:	4301      	orrs	r1, r0
 800f21e:	b2c8      	uxtb	r0, r1
 800f220:	4912      	ldr	r1, [pc, #72]	; (800f26c <OLED_DrawPoint+0xb0>)
 800f222:	00d2      	lsls	r2, r2, #3
 800f224:	440a      	add	r2, r1
 800f226:	4413      	add	r3, r2
 800f228:	4602      	mov	r2, r0
 800f22a:	701a      	strb	r2, [r3, #0]
 800f22c:	e018      	b.n	800f260 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800f22e:	79fa      	ldrb	r2, [r7, #7]
 800f230:	7bbb      	ldrb	r3, [r7, #14]
 800f232:	490e      	ldr	r1, [pc, #56]	; (800f26c <OLED_DrawPoint+0xb0>)
 800f234:	00d2      	lsls	r2, r2, #3
 800f236:	440a      	add	r2, r1
 800f238:	4413      	add	r3, r2
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	b25a      	sxtb	r2, r3
 800f23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f242:	43db      	mvns	r3, r3
 800f244:	b25b      	sxtb	r3, r3
 800f246:	4013      	ands	r3, r2
 800f248:	b259      	sxtb	r1, r3
 800f24a:	79fa      	ldrb	r2, [r7, #7]
 800f24c:	7bbb      	ldrb	r3, [r7, #14]
 800f24e:	b2c8      	uxtb	r0, r1
 800f250:	4906      	ldr	r1, [pc, #24]	; (800f26c <OLED_DrawPoint+0xb0>)
 800f252:	00d2      	lsls	r2, r2, #3
 800f254:	440a      	add	r2, r1
 800f256:	4413      	add	r3, r2
 800f258:	4602      	mov	r2, r0
 800f25a:	701a      	strb	r2, [r3, #0]
 800f25c:	e000      	b.n	800f260 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800f25e:	bf00      	nop
}
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr
 800f26a:	bf00      	nop
 800f26c:	20004f1c 	.word	0x20004f1c

0800f270 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800f270:	b590      	push	{r4, r7, lr}
 800f272:	b085      	sub	sp, #20
 800f274:	af00      	add	r7, sp, #0
 800f276:	4604      	mov	r4, r0
 800f278:	4608      	mov	r0, r1
 800f27a:	4611      	mov	r1, r2
 800f27c:	461a      	mov	r2, r3
 800f27e:	4623      	mov	r3, r4
 800f280:	71fb      	strb	r3, [r7, #7]
 800f282:	4603      	mov	r3, r0
 800f284:	71bb      	strb	r3, [r7, #6]
 800f286:	460b      	mov	r3, r1
 800f288:	717b      	strb	r3, [r7, #5]
 800f28a:	4613      	mov	r3, r2
 800f28c:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800f28e:	79bb      	ldrb	r3, [r7, #6]
 800f290:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800f292:	797b      	ldrb	r3, [r7, #5]
 800f294:	3b20      	subs	r3, #32
 800f296:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800f298:	2300      	movs	r3, #0
 800f29a:	73bb      	strb	r3, [r7, #14]
 800f29c:	e04d      	b.n	800f33a <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800f29e:	793b      	ldrb	r3, [r7, #4]
 800f2a0:	2b0c      	cmp	r3, #12
 800f2a2:	d10b      	bne.n	800f2bc <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800f2a4:	797a      	ldrb	r2, [r7, #5]
 800f2a6:	7bb9      	ldrb	r1, [r7, #14]
 800f2a8:	4828      	ldr	r0, [pc, #160]	; (800f34c <OLED_ShowChar+0xdc>)
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	005b      	lsls	r3, r3, #1
 800f2ae:	4413      	add	r3, r2
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	4403      	add	r3, r0
 800f2b4:	440b      	add	r3, r1
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	73fb      	strb	r3, [r7, #15]
 800f2ba:	e007      	b.n	800f2cc <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800f2bc:	797a      	ldrb	r2, [r7, #5]
 800f2be:	7bbb      	ldrb	r3, [r7, #14]
 800f2c0:	4923      	ldr	r1, [pc, #140]	; (800f350 <OLED_ShowChar+0xe0>)
 800f2c2:	0112      	lsls	r2, r2, #4
 800f2c4:	440a      	add	r2, r1
 800f2c6:	4413      	add	r3, r2
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	737b      	strb	r3, [r7, #13]
 800f2d0:	e02d      	b.n	800f32e <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800f2d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	da07      	bge.n	800f2ea <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800f2da:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f2de:	79b9      	ldrb	r1, [r7, #6]
 800f2e0:	79fb      	ldrb	r3, [r7, #7]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff ff6a 	bl	800f1bc <OLED_DrawPoint>
 800f2e8:	e00c      	b.n	800f304 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800f2ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	bf0c      	ite	eq
 800f2f2:	2301      	moveq	r3, #1
 800f2f4:	2300      	movne	r3, #0
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	79b9      	ldrb	r1, [r7, #6]
 800f2fc:	79fb      	ldrb	r3, [r7, #7]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7ff ff5c 	bl	800f1bc <OLED_DrawPoint>
			temp <<= 1;
 800f304:	7bfb      	ldrb	r3, [r7, #15]
 800f306:	005b      	lsls	r3, r3, #1
 800f308:	73fb      	strb	r3, [r7, #15]
			y++;
 800f30a:	79bb      	ldrb	r3, [r7, #6]
 800f30c:	3301      	adds	r3, #1
 800f30e:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800f310:	79ba      	ldrb	r2, [r7, #6]
 800f312:	7b3b      	ldrb	r3, [r7, #12]
 800f314:	1ad2      	subs	r2, r2, r3
 800f316:	793b      	ldrb	r3, [r7, #4]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d105      	bne.n	800f328 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800f31c:	7b3b      	ldrb	r3, [r7, #12]
 800f31e:	71bb      	strb	r3, [r7, #6]
				x++;
 800f320:	79fb      	ldrb	r3, [r7, #7]
 800f322:	3301      	adds	r3, #1
 800f324:	71fb      	strb	r3, [r7, #7]
				break;
 800f326:	e005      	b.n	800f334 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800f328:	7b7b      	ldrb	r3, [r7, #13]
 800f32a:	3301      	adds	r3, #1
 800f32c:	737b      	strb	r3, [r7, #13]
 800f32e:	7b7b      	ldrb	r3, [r7, #13]
 800f330:	2b07      	cmp	r3, #7
 800f332:	d9ce      	bls.n	800f2d2 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800f334:	7bbb      	ldrb	r3, [r7, #14]
 800f336:	3301      	adds	r3, #1
 800f338:	73bb      	strb	r3, [r7, #14]
 800f33a:	7bba      	ldrb	r2, [r7, #14]
 800f33c:	793b      	ldrb	r3, [r7, #4]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d3ad      	bcc.n	800f29e <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800f342:	bf00      	nop
 800f344:	bf00      	nop
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd90      	pop	{r4, r7, pc}
 800f34c:	08010258 	.word	0x08010258
 800f350:	080106cc 	.word	0x080106cc

0800f354 <oled_pow>:

uint32_t oled_pow(uint8_t m, uint8_t n)
{
 800f354:	b480      	push	{r7}
 800f356:	b085      	sub	sp, #20
 800f358:	af00      	add	r7, sp, #0
 800f35a:	4603      	mov	r3, r0
 800f35c:	460a      	mov	r2, r1
 800f35e:	71fb      	strb	r3, [r7, #7]
 800f360:	4613      	mov	r3, r2
 800f362:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800f364:	2301      	movs	r3, #1
 800f366:	60fb      	str	r3, [r7, #12]
	while (n--)
 800f368:	e004      	b.n	800f374 <oled_pow+0x20>
		result *= m;
 800f36a:	79fa      	ldrb	r2, [r7, #7]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	fb02 f303 	mul.w	r3, r2, r3
 800f372:	60fb      	str	r3, [r7, #12]
	while (n--)
 800f374:	79bb      	ldrb	r3, [r7, #6]
 800f376:	1e5a      	subs	r2, r3, #1
 800f378:	71ba      	strb	r2, [r7, #6]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1f5      	bne.n	800f36a <oled_pow+0x16>
	return result;
 800f37e:	68fb      	ldr	r3, [r7, #12]
}
 800f380:	4618      	mov	r0, r3
 800f382:	3714      	adds	r7, #20
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr

0800f38c <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 800f38c:	b590      	push	{r4, r7, lr}
 800f38e:	b087      	sub	sp, #28
 800f390:	af02      	add	r7, sp, #8
 800f392:	603a      	str	r2, [r7, #0]
 800f394:	461a      	mov	r2, r3
 800f396:	4603      	mov	r3, r0
 800f398:	71fb      	strb	r3, [r7, #7]
 800f39a:	460b      	mov	r3, r1
 800f39c:	71bb      	strb	r3, [r7, #6]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	73fb      	strb	r3, [r7, #15]
 800f3aa:	e051      	b.n	800f450 <OLED_ShowNumber+0xc4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 800f3ac:	797a      	ldrb	r2, [r7, #5]
 800f3ae:	7bfb      	ldrb	r3, [r7, #15]
 800f3b0:	1ad3      	subs	r3, r2, r3
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	3b01      	subs	r3, #1
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	200a      	movs	r0, #10
 800f3bc:	f7ff ffca 	bl	800f354 <oled_pow>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3c8:	4b26      	ldr	r3, [pc, #152]	; (800f464 <OLED_ShowNumber+0xd8>)
 800f3ca:	fba3 2301 	umull	r2, r3, r3, r1
 800f3ce:	08da      	lsrs	r2, r3, #3
 800f3d0:	4613      	mov	r3, r2
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	4413      	add	r3, r2
 800f3d6:	005b      	lsls	r3, r3, #1
 800f3d8:	1aca      	subs	r2, r1, r3
 800f3da:	4613      	mov	r3, r2
 800f3dc:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 800f3de:	7bbb      	ldrb	r3, [r7, #14]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d11d      	bne.n	800f420 <OLED_ShowNumber+0x94>
 800f3e4:	7bfa      	ldrb	r2, [r7, #15]
 800f3e6:	797b      	ldrb	r3, [r7, #5]
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	da18      	bge.n	800f420 <OLED_ShowNumber+0x94>
		{
			if (temp == 0)
 800f3ee:	7b7b      	ldrb	r3, [r7, #13]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d113      	bne.n	800f41c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ', size, 1);
 800f3f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3f8:	085b      	lsrs	r3, r3, #1
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	7bfa      	ldrb	r2, [r7, #15]
 800f3fe:	fb12 f303 	smulbb	r3, r2, r3
 800f402:	b2da      	uxtb	r2, r3
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	4413      	add	r3, r2
 800f408:	b2d8      	uxtb	r0, r3
 800f40a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f40e:	79b9      	ldrb	r1, [r7, #6]
 800f410:	2201      	movs	r2, #1
 800f412:	9200      	str	r2, [sp, #0]
 800f414:	2220      	movs	r2, #32
 800f416:	f7ff ff2b 	bl	800f270 <OLED_ShowChar>
				continue;
 800f41a:	e016      	b.n	800f44a <OLED_ShowNumber+0xbe>
			}
			else
				enshow = 1;
 800f41c:	2301      	movs	r3, #1
 800f41e:	73bb      	strb	r3, [r7, #14]
		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
 800f420:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f424:	085b      	lsrs	r3, r3, #1
 800f426:	b2db      	uxtb	r3, r3
 800f428:	7bfa      	ldrb	r2, [r7, #15]
 800f42a:	fb12 f303 	smulbb	r3, r2, r3
 800f42e:	b2da      	uxtb	r2, r3
 800f430:	79fb      	ldrb	r3, [r7, #7]
 800f432:	4413      	add	r3, r2
 800f434:	b2d8      	uxtb	r0, r3
 800f436:	7b7b      	ldrb	r3, [r7, #13]
 800f438:	3330      	adds	r3, #48	; 0x30
 800f43a:	b2da      	uxtb	r2, r3
 800f43c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f440:	79b9      	ldrb	r1, [r7, #6]
 800f442:	2401      	movs	r4, #1
 800f444:	9400      	str	r4, [sp, #0]
 800f446:	f7ff ff13 	bl	800f270 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 800f44a:	7bfb      	ldrb	r3, [r7, #15]
 800f44c:	3301      	adds	r3, #1
 800f44e:	73fb      	strb	r3, [r7, #15]
 800f450:	7bfa      	ldrb	r2, [r7, #15]
 800f452:	797b      	ldrb	r3, [r7, #5]
 800f454:	429a      	cmp	r2, r3
 800f456:	d3a9      	bcc.n	800f3ac <OLED_ShowNumber+0x20>
	}
}
 800f458:	bf00      	nop
 800f45a:	bf00      	nop
 800f45c:	3714      	adds	r7, #20
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd90      	pop	{r4, r7, pc}
 800f462:	bf00      	nop
 800f464:	cccccccd 	.word	0xcccccccd

0800f468 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af02      	add	r7, sp, #8
 800f46e:	4603      	mov	r3, r0
 800f470:	603a      	str	r2, [r7, #0]
 800f472:	71fb      	strb	r3, [r7, #7]
 800f474:	460b      	mov	r3, r1
 800f476:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800f478:	e01f      	b.n	800f4ba <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800f47a:	79fb      	ldrb	r3, [r7, #7]
 800f47c:	2b7a      	cmp	r3, #122	; 0x7a
 800f47e:	d904      	bls.n	800f48a <OLED_ShowString+0x22>
		{
			x = 0;
 800f480:	2300      	movs	r3, #0
 800f482:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800f484:	79bb      	ldrb	r3, [r7, #6]
 800f486:	3310      	adds	r3, #16
 800f488:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800f48a:	79bb      	ldrb	r3, [r7, #6]
 800f48c:	2b3a      	cmp	r3, #58	; 0x3a
 800f48e:	d905      	bls.n	800f49c <OLED_ShowString+0x34>
		{
			y = x = 0;
 800f490:	2300      	movs	r3, #0
 800f492:	71fb      	strb	r3, [r7, #7]
 800f494:	79fb      	ldrb	r3, [r7, #7]
 800f496:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800f498:	f7ff fe6a 	bl	800f170 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	781a      	ldrb	r2, [r3, #0]
 800f4a0:	79b9      	ldrb	r1, [r7, #6]
 800f4a2:	79f8      	ldrb	r0, [r7, #7]
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	230c      	movs	r3, #12
 800f4aa:	f7ff fee1 	bl	800f270 <OLED_ShowChar>
		x += 8;
 800f4ae:	79fb      	ldrb	r3, [r7, #7]
 800f4b0:	3308      	adds	r3, #8
 800f4b2:	71fb      	strb	r3, [r7, #7]
		p++;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d1db      	bne.n	800f47a <OLED_ShowString+0x12>
	}
}
 800f4c2:	bf00      	nop
 800f4c4:	bf00      	nop
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800f4d0:	f7f9 fbb0 	bl	8008c34 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800f4d4:	4b41      	ldr	r3, [pc, #260]	; (800f5dc <OLED_Init+0x110>)
 800f4d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4d8:	4a40      	ldr	r2, [pc, #256]	; (800f5dc <OLED_Init+0x110>)
 800f4da:	f023 0301 	bic.w	r3, r3, #1
 800f4de:	6713      	str	r3, [r2, #112]	; 0x70
 800f4e0:	4b3e      	ldr	r3, [pc, #248]	; (800f5dc <OLED_Init+0x110>)
 800f4e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4e4:	4a3d      	ldr	r2, [pc, #244]	; (800f5dc <OLED_Init+0x110>)
 800f4e6:	f023 0304 	bic.w	r3, r3, #4
 800f4ea:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800f4ec:	f7f9 fbb6 	bl	8008c5c <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	2180      	movs	r1, #128	; 0x80
 800f4f4:	483a      	ldr	r0, [pc, #232]	; (800f5e0 <OLED_Init+0x114>)
 800f4f6:	f7f8 fbc3 	bl	8007c80 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800f4fa:	2064      	movs	r0, #100	; 0x64
 800f4fc:	f7f7 fc8c 	bl	8006e18 <HAL_Delay>
	OLED_RST_Set();
 800f500:	2201      	movs	r2, #1
 800f502:	2180      	movs	r1, #128	; 0x80
 800f504:	4836      	ldr	r0, [pc, #216]	; (800f5e0 <OLED_Init+0x114>)
 800f506:	f7f8 fbbb 	bl	8007c80 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800f50a:	2100      	movs	r1, #0
 800f50c:	20ae      	movs	r0, #174	; 0xae
 800f50e:	f7ff fde5 	bl	800f0dc <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800f512:	2100      	movs	r1, #0
 800f514:	20d5      	movs	r0, #213	; 0xd5
 800f516:	f7ff fde1 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800f51a:	2100      	movs	r1, #0
 800f51c:	2050      	movs	r0, #80	; 0x50
 800f51e:	f7ff fddd 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800f522:	2100      	movs	r1, #0
 800f524:	20a8      	movs	r0, #168	; 0xa8
 800f526:	f7ff fdd9 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800f52a:	2100      	movs	r1, #0
 800f52c:	203f      	movs	r0, #63	; 0x3f
 800f52e:	f7ff fdd5 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800f532:	2100      	movs	r1, #0
 800f534:	20d3      	movs	r0, #211	; 0xd3
 800f536:	f7ff fdd1 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800f53a:	2100      	movs	r1, #0
 800f53c:	2000      	movs	r0, #0
 800f53e:	f7ff fdcd 	bl	800f0dc <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800f542:	2100      	movs	r1, #0
 800f544:	2040      	movs	r0, #64	; 0x40
 800f546:	f7ff fdc9 	bl	800f0dc <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800f54a:	2100      	movs	r1, #0
 800f54c:	208d      	movs	r0, #141	; 0x8d
 800f54e:	f7ff fdc5 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800f552:	2100      	movs	r1, #0
 800f554:	2014      	movs	r0, #20
 800f556:	f7ff fdc1 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800f55a:	2100      	movs	r1, #0
 800f55c:	2020      	movs	r0, #32
 800f55e:	f7ff fdbd 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800f562:	2100      	movs	r1, #0
 800f564:	2002      	movs	r0, #2
 800f566:	f7ff fdb9 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800f56a:	2100      	movs	r1, #0
 800f56c:	20a1      	movs	r0, #161	; 0xa1
 800f56e:	f7ff fdb5 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800f572:	2100      	movs	r1, #0
 800f574:	20c0      	movs	r0, #192	; 0xc0
 800f576:	f7ff fdb1 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800f57a:	2100      	movs	r1, #0
 800f57c:	20da      	movs	r0, #218	; 0xda
 800f57e:	f7ff fdad 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800f582:	2100      	movs	r1, #0
 800f584:	2012      	movs	r0, #18
 800f586:	f7ff fda9 	bl	800f0dc <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800f58a:	2100      	movs	r1, #0
 800f58c:	2081      	movs	r0, #129	; 0x81
 800f58e:	f7ff fda5 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800f592:	2100      	movs	r1, #0
 800f594:	20ef      	movs	r0, #239	; 0xef
 800f596:	f7ff fda1 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800f59a:	2100      	movs	r1, #0
 800f59c:	20d9      	movs	r0, #217	; 0xd9
 800f59e:	f7ff fd9d 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	20f1      	movs	r0, #241	; 0xf1
 800f5a6:	f7ff fd99 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	20db      	movs	r0, #219	; 0xdb
 800f5ae:	f7ff fd95 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800f5b2:	2100      	movs	r1, #0
 800f5b4:	2030      	movs	r0, #48	; 0x30
 800f5b6:	f7ff fd91 	bl	800f0dc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	20a4      	movs	r0, #164	; 0xa4
 800f5be:	f7ff fd8d 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	20a6      	movs	r0, #166	; 0xa6
 800f5c6:	f7ff fd89 	bl	800f0dc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	20af      	movs	r0, #175	; 0xaf
 800f5ce:	f7ff fd85 	bl	800f0dc <OLED_WR_Byte>
	OLED_Clear();
 800f5d2:	f7ff fdcd 	bl	800f170 <OLED_Clear>
 800f5d6:	bf00      	nop
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	40023800 	.word	0x40023800
 800f5e0:	40021000 	.word	0x40021000

0800f5e4 <sniprintf>:
 800f5e4:	b40c      	push	{r2, r3}
 800f5e6:	b530      	push	{r4, r5, lr}
 800f5e8:	4b17      	ldr	r3, [pc, #92]	; (800f648 <sniprintf+0x64>)
 800f5ea:	1e0c      	subs	r4, r1, #0
 800f5ec:	681d      	ldr	r5, [r3, #0]
 800f5ee:	b09d      	sub	sp, #116	; 0x74
 800f5f0:	da08      	bge.n	800f604 <sniprintf+0x20>
 800f5f2:	238b      	movs	r3, #139	; 0x8b
 800f5f4:	602b      	str	r3, [r5, #0]
 800f5f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5fa:	b01d      	add	sp, #116	; 0x74
 800f5fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f600:	b002      	add	sp, #8
 800f602:	4770      	bx	lr
 800f604:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f608:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f60c:	bf14      	ite	ne
 800f60e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f612:	4623      	moveq	r3, r4
 800f614:	9304      	str	r3, [sp, #16]
 800f616:	9307      	str	r3, [sp, #28]
 800f618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f61c:	9002      	str	r0, [sp, #8]
 800f61e:	9006      	str	r0, [sp, #24]
 800f620:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f624:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f626:	ab21      	add	r3, sp, #132	; 0x84
 800f628:	a902      	add	r1, sp, #8
 800f62a:	4628      	mov	r0, r5
 800f62c:	9301      	str	r3, [sp, #4]
 800f62e:	f000 f8a9 	bl	800f784 <_svfiprintf_r>
 800f632:	1c43      	adds	r3, r0, #1
 800f634:	bfbc      	itt	lt
 800f636:	238b      	movlt	r3, #139	; 0x8b
 800f638:	602b      	strlt	r3, [r5, #0]
 800f63a:	2c00      	cmp	r4, #0
 800f63c:	d0dd      	beq.n	800f5fa <sniprintf+0x16>
 800f63e:	9b02      	ldr	r3, [sp, #8]
 800f640:	2200      	movs	r2, #0
 800f642:	701a      	strb	r2, [r3, #0]
 800f644:	e7d9      	b.n	800f5fa <sniprintf+0x16>
 800f646:	bf00      	nop
 800f648:	200001a0 	.word	0x200001a0

0800f64c <memset>:
 800f64c:	4402      	add	r2, r0
 800f64e:	4603      	mov	r3, r0
 800f650:	4293      	cmp	r3, r2
 800f652:	d100      	bne.n	800f656 <memset+0xa>
 800f654:	4770      	bx	lr
 800f656:	f803 1b01 	strb.w	r1, [r3], #1
 800f65a:	e7f9      	b.n	800f650 <memset+0x4>

0800f65c <__errno>:
 800f65c:	4b01      	ldr	r3, [pc, #4]	; (800f664 <__errno+0x8>)
 800f65e:	6818      	ldr	r0, [r3, #0]
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	200001a0 	.word	0x200001a0

0800f668 <__libc_init_array>:
 800f668:	b570      	push	{r4, r5, r6, lr}
 800f66a:	4d0d      	ldr	r5, [pc, #52]	; (800f6a0 <__libc_init_array+0x38>)
 800f66c:	4c0d      	ldr	r4, [pc, #52]	; (800f6a4 <__libc_init_array+0x3c>)
 800f66e:	1b64      	subs	r4, r4, r5
 800f670:	10a4      	asrs	r4, r4, #2
 800f672:	2600      	movs	r6, #0
 800f674:	42a6      	cmp	r6, r4
 800f676:	d109      	bne.n	800f68c <__libc_init_array+0x24>
 800f678:	4d0b      	ldr	r5, [pc, #44]	; (800f6a8 <__libc_init_array+0x40>)
 800f67a:	4c0c      	ldr	r4, [pc, #48]	; (800f6ac <__libc_init_array+0x44>)
 800f67c:	f000 fc6a 	bl	800ff54 <_init>
 800f680:	1b64      	subs	r4, r4, r5
 800f682:	10a4      	asrs	r4, r4, #2
 800f684:	2600      	movs	r6, #0
 800f686:	42a6      	cmp	r6, r4
 800f688:	d105      	bne.n	800f696 <__libc_init_array+0x2e>
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
 800f68c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f690:	4798      	blx	r3
 800f692:	3601      	adds	r6, #1
 800f694:	e7ee      	b.n	800f674 <__libc_init_array+0xc>
 800f696:	f855 3b04 	ldr.w	r3, [r5], #4
 800f69a:	4798      	blx	r3
 800f69c:	3601      	adds	r6, #1
 800f69e:	e7f2      	b.n	800f686 <__libc_init_array+0x1e>
 800f6a0:	08010cf8 	.word	0x08010cf8
 800f6a4:	08010cf8 	.word	0x08010cf8
 800f6a8:	08010cf8 	.word	0x08010cf8
 800f6ac:	08010cfc 	.word	0x08010cfc

0800f6b0 <__retarget_lock_acquire_recursive>:
 800f6b0:	4770      	bx	lr

0800f6b2 <__retarget_lock_release_recursive>:
 800f6b2:	4770      	bx	lr

0800f6b4 <memcpy>:
 800f6b4:	440a      	add	r2, r1
 800f6b6:	4291      	cmp	r1, r2
 800f6b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f6bc:	d100      	bne.n	800f6c0 <memcpy+0xc>
 800f6be:	4770      	bx	lr
 800f6c0:	b510      	push	{r4, lr}
 800f6c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6ca:	4291      	cmp	r1, r2
 800f6cc:	d1f9      	bne.n	800f6c2 <memcpy+0xe>
 800f6ce:	bd10      	pop	{r4, pc}

0800f6d0 <__ssputs_r>:
 800f6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6d4:	688e      	ldr	r6, [r1, #8]
 800f6d6:	461f      	mov	r7, r3
 800f6d8:	42be      	cmp	r6, r7
 800f6da:	680b      	ldr	r3, [r1, #0]
 800f6dc:	4682      	mov	sl, r0
 800f6de:	460c      	mov	r4, r1
 800f6e0:	4690      	mov	r8, r2
 800f6e2:	d82c      	bhi.n	800f73e <__ssputs_r+0x6e>
 800f6e4:	898a      	ldrh	r2, [r1, #12]
 800f6e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6ea:	d026      	beq.n	800f73a <__ssputs_r+0x6a>
 800f6ec:	6965      	ldr	r5, [r4, #20]
 800f6ee:	6909      	ldr	r1, [r1, #16]
 800f6f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6f4:	eba3 0901 	sub.w	r9, r3, r1
 800f6f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6fc:	1c7b      	adds	r3, r7, #1
 800f6fe:	444b      	add	r3, r9
 800f700:	106d      	asrs	r5, r5, #1
 800f702:	429d      	cmp	r5, r3
 800f704:	bf38      	it	cc
 800f706:	461d      	movcc	r5, r3
 800f708:	0553      	lsls	r3, r2, #21
 800f70a:	d527      	bpl.n	800f75c <__ssputs_r+0x8c>
 800f70c:	4629      	mov	r1, r5
 800f70e:	f000 f957 	bl	800f9c0 <_malloc_r>
 800f712:	4606      	mov	r6, r0
 800f714:	b360      	cbz	r0, 800f770 <__ssputs_r+0xa0>
 800f716:	6921      	ldr	r1, [r4, #16]
 800f718:	464a      	mov	r2, r9
 800f71a:	f7ff ffcb 	bl	800f6b4 <memcpy>
 800f71e:	89a3      	ldrh	r3, [r4, #12]
 800f720:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f728:	81a3      	strh	r3, [r4, #12]
 800f72a:	6126      	str	r6, [r4, #16]
 800f72c:	6165      	str	r5, [r4, #20]
 800f72e:	444e      	add	r6, r9
 800f730:	eba5 0509 	sub.w	r5, r5, r9
 800f734:	6026      	str	r6, [r4, #0]
 800f736:	60a5      	str	r5, [r4, #8]
 800f738:	463e      	mov	r6, r7
 800f73a:	42be      	cmp	r6, r7
 800f73c:	d900      	bls.n	800f740 <__ssputs_r+0x70>
 800f73e:	463e      	mov	r6, r7
 800f740:	6820      	ldr	r0, [r4, #0]
 800f742:	4632      	mov	r2, r6
 800f744:	4641      	mov	r1, r8
 800f746:	f000 fb86 	bl	800fe56 <memmove>
 800f74a:	68a3      	ldr	r3, [r4, #8]
 800f74c:	1b9b      	subs	r3, r3, r6
 800f74e:	60a3      	str	r3, [r4, #8]
 800f750:	6823      	ldr	r3, [r4, #0]
 800f752:	4433      	add	r3, r6
 800f754:	6023      	str	r3, [r4, #0]
 800f756:	2000      	movs	r0, #0
 800f758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f75c:	462a      	mov	r2, r5
 800f75e:	f000 fb4b 	bl	800fdf8 <_realloc_r>
 800f762:	4606      	mov	r6, r0
 800f764:	2800      	cmp	r0, #0
 800f766:	d1e0      	bne.n	800f72a <__ssputs_r+0x5a>
 800f768:	6921      	ldr	r1, [r4, #16]
 800f76a:	4650      	mov	r0, sl
 800f76c:	f000 fb9e 	bl	800feac <_free_r>
 800f770:	230c      	movs	r3, #12
 800f772:	f8ca 3000 	str.w	r3, [sl]
 800f776:	89a3      	ldrh	r3, [r4, #12]
 800f778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f77c:	81a3      	strh	r3, [r4, #12]
 800f77e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f782:	e7e9      	b.n	800f758 <__ssputs_r+0x88>

0800f784 <_svfiprintf_r>:
 800f784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f788:	4698      	mov	r8, r3
 800f78a:	898b      	ldrh	r3, [r1, #12]
 800f78c:	061b      	lsls	r3, r3, #24
 800f78e:	b09d      	sub	sp, #116	; 0x74
 800f790:	4607      	mov	r7, r0
 800f792:	460d      	mov	r5, r1
 800f794:	4614      	mov	r4, r2
 800f796:	d50e      	bpl.n	800f7b6 <_svfiprintf_r+0x32>
 800f798:	690b      	ldr	r3, [r1, #16]
 800f79a:	b963      	cbnz	r3, 800f7b6 <_svfiprintf_r+0x32>
 800f79c:	2140      	movs	r1, #64	; 0x40
 800f79e:	f000 f90f 	bl	800f9c0 <_malloc_r>
 800f7a2:	6028      	str	r0, [r5, #0]
 800f7a4:	6128      	str	r0, [r5, #16]
 800f7a6:	b920      	cbnz	r0, 800f7b2 <_svfiprintf_r+0x2e>
 800f7a8:	230c      	movs	r3, #12
 800f7aa:	603b      	str	r3, [r7, #0]
 800f7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7b0:	e0d0      	b.n	800f954 <_svfiprintf_r+0x1d0>
 800f7b2:	2340      	movs	r3, #64	; 0x40
 800f7b4:	616b      	str	r3, [r5, #20]
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7ba:	2320      	movs	r3, #32
 800f7bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7c4:	2330      	movs	r3, #48	; 0x30
 800f7c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f96c <_svfiprintf_r+0x1e8>
 800f7ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7ce:	f04f 0901 	mov.w	r9, #1
 800f7d2:	4623      	mov	r3, r4
 800f7d4:	469a      	mov	sl, r3
 800f7d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7da:	b10a      	cbz	r2, 800f7e0 <_svfiprintf_r+0x5c>
 800f7dc:	2a25      	cmp	r2, #37	; 0x25
 800f7de:	d1f9      	bne.n	800f7d4 <_svfiprintf_r+0x50>
 800f7e0:	ebba 0b04 	subs.w	fp, sl, r4
 800f7e4:	d00b      	beq.n	800f7fe <_svfiprintf_r+0x7a>
 800f7e6:	465b      	mov	r3, fp
 800f7e8:	4622      	mov	r2, r4
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	4638      	mov	r0, r7
 800f7ee:	f7ff ff6f 	bl	800f6d0 <__ssputs_r>
 800f7f2:	3001      	adds	r0, #1
 800f7f4:	f000 80a9 	beq.w	800f94a <_svfiprintf_r+0x1c6>
 800f7f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7fa:	445a      	add	r2, fp
 800f7fc:	9209      	str	r2, [sp, #36]	; 0x24
 800f7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800f802:	2b00      	cmp	r3, #0
 800f804:	f000 80a1 	beq.w	800f94a <_svfiprintf_r+0x1c6>
 800f808:	2300      	movs	r3, #0
 800f80a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f80e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f812:	f10a 0a01 	add.w	sl, sl, #1
 800f816:	9304      	str	r3, [sp, #16]
 800f818:	9307      	str	r3, [sp, #28]
 800f81a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f81e:	931a      	str	r3, [sp, #104]	; 0x68
 800f820:	4654      	mov	r4, sl
 800f822:	2205      	movs	r2, #5
 800f824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f828:	4850      	ldr	r0, [pc, #320]	; (800f96c <_svfiprintf_r+0x1e8>)
 800f82a:	f7f0 fcd1 	bl	80001d0 <memchr>
 800f82e:	9a04      	ldr	r2, [sp, #16]
 800f830:	b9d8      	cbnz	r0, 800f86a <_svfiprintf_r+0xe6>
 800f832:	06d0      	lsls	r0, r2, #27
 800f834:	bf44      	itt	mi
 800f836:	2320      	movmi	r3, #32
 800f838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f83c:	0711      	lsls	r1, r2, #28
 800f83e:	bf44      	itt	mi
 800f840:	232b      	movmi	r3, #43	; 0x2b
 800f842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f846:	f89a 3000 	ldrb.w	r3, [sl]
 800f84a:	2b2a      	cmp	r3, #42	; 0x2a
 800f84c:	d015      	beq.n	800f87a <_svfiprintf_r+0xf6>
 800f84e:	9a07      	ldr	r2, [sp, #28]
 800f850:	4654      	mov	r4, sl
 800f852:	2000      	movs	r0, #0
 800f854:	f04f 0c0a 	mov.w	ip, #10
 800f858:	4621      	mov	r1, r4
 800f85a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f85e:	3b30      	subs	r3, #48	; 0x30
 800f860:	2b09      	cmp	r3, #9
 800f862:	d94d      	bls.n	800f900 <_svfiprintf_r+0x17c>
 800f864:	b1b0      	cbz	r0, 800f894 <_svfiprintf_r+0x110>
 800f866:	9207      	str	r2, [sp, #28]
 800f868:	e014      	b.n	800f894 <_svfiprintf_r+0x110>
 800f86a:	eba0 0308 	sub.w	r3, r0, r8
 800f86e:	fa09 f303 	lsl.w	r3, r9, r3
 800f872:	4313      	orrs	r3, r2
 800f874:	9304      	str	r3, [sp, #16]
 800f876:	46a2      	mov	sl, r4
 800f878:	e7d2      	b.n	800f820 <_svfiprintf_r+0x9c>
 800f87a:	9b03      	ldr	r3, [sp, #12]
 800f87c:	1d19      	adds	r1, r3, #4
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	9103      	str	r1, [sp, #12]
 800f882:	2b00      	cmp	r3, #0
 800f884:	bfbb      	ittet	lt
 800f886:	425b      	neglt	r3, r3
 800f888:	f042 0202 	orrlt.w	r2, r2, #2
 800f88c:	9307      	strge	r3, [sp, #28]
 800f88e:	9307      	strlt	r3, [sp, #28]
 800f890:	bfb8      	it	lt
 800f892:	9204      	strlt	r2, [sp, #16]
 800f894:	7823      	ldrb	r3, [r4, #0]
 800f896:	2b2e      	cmp	r3, #46	; 0x2e
 800f898:	d10c      	bne.n	800f8b4 <_svfiprintf_r+0x130>
 800f89a:	7863      	ldrb	r3, [r4, #1]
 800f89c:	2b2a      	cmp	r3, #42	; 0x2a
 800f89e:	d134      	bne.n	800f90a <_svfiprintf_r+0x186>
 800f8a0:	9b03      	ldr	r3, [sp, #12]
 800f8a2:	1d1a      	adds	r2, r3, #4
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	9203      	str	r2, [sp, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	bfb8      	it	lt
 800f8ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f8b0:	3402      	adds	r4, #2
 800f8b2:	9305      	str	r3, [sp, #20]
 800f8b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f97c <_svfiprintf_r+0x1f8>
 800f8b8:	7821      	ldrb	r1, [r4, #0]
 800f8ba:	2203      	movs	r2, #3
 800f8bc:	4650      	mov	r0, sl
 800f8be:	f7f0 fc87 	bl	80001d0 <memchr>
 800f8c2:	b138      	cbz	r0, 800f8d4 <_svfiprintf_r+0x150>
 800f8c4:	9b04      	ldr	r3, [sp, #16]
 800f8c6:	eba0 000a 	sub.w	r0, r0, sl
 800f8ca:	2240      	movs	r2, #64	; 0x40
 800f8cc:	4082      	lsls	r2, r0
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	3401      	adds	r4, #1
 800f8d2:	9304      	str	r3, [sp, #16]
 800f8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8d8:	4825      	ldr	r0, [pc, #148]	; (800f970 <_svfiprintf_r+0x1ec>)
 800f8da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8de:	2206      	movs	r2, #6
 800f8e0:	f7f0 fc76 	bl	80001d0 <memchr>
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	d038      	beq.n	800f95a <_svfiprintf_r+0x1d6>
 800f8e8:	4b22      	ldr	r3, [pc, #136]	; (800f974 <_svfiprintf_r+0x1f0>)
 800f8ea:	bb1b      	cbnz	r3, 800f934 <_svfiprintf_r+0x1b0>
 800f8ec:	9b03      	ldr	r3, [sp, #12]
 800f8ee:	3307      	adds	r3, #7
 800f8f0:	f023 0307 	bic.w	r3, r3, #7
 800f8f4:	3308      	adds	r3, #8
 800f8f6:	9303      	str	r3, [sp, #12]
 800f8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8fa:	4433      	add	r3, r6
 800f8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f8fe:	e768      	b.n	800f7d2 <_svfiprintf_r+0x4e>
 800f900:	fb0c 3202 	mla	r2, ip, r2, r3
 800f904:	460c      	mov	r4, r1
 800f906:	2001      	movs	r0, #1
 800f908:	e7a6      	b.n	800f858 <_svfiprintf_r+0xd4>
 800f90a:	2300      	movs	r3, #0
 800f90c:	3401      	adds	r4, #1
 800f90e:	9305      	str	r3, [sp, #20]
 800f910:	4619      	mov	r1, r3
 800f912:	f04f 0c0a 	mov.w	ip, #10
 800f916:	4620      	mov	r0, r4
 800f918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f91c:	3a30      	subs	r2, #48	; 0x30
 800f91e:	2a09      	cmp	r2, #9
 800f920:	d903      	bls.n	800f92a <_svfiprintf_r+0x1a6>
 800f922:	2b00      	cmp	r3, #0
 800f924:	d0c6      	beq.n	800f8b4 <_svfiprintf_r+0x130>
 800f926:	9105      	str	r1, [sp, #20]
 800f928:	e7c4      	b.n	800f8b4 <_svfiprintf_r+0x130>
 800f92a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f92e:	4604      	mov	r4, r0
 800f930:	2301      	movs	r3, #1
 800f932:	e7f0      	b.n	800f916 <_svfiprintf_r+0x192>
 800f934:	ab03      	add	r3, sp, #12
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	462a      	mov	r2, r5
 800f93a:	4b0f      	ldr	r3, [pc, #60]	; (800f978 <_svfiprintf_r+0x1f4>)
 800f93c:	a904      	add	r1, sp, #16
 800f93e:	4638      	mov	r0, r7
 800f940:	f3af 8000 	nop.w
 800f944:	1c42      	adds	r2, r0, #1
 800f946:	4606      	mov	r6, r0
 800f948:	d1d6      	bne.n	800f8f8 <_svfiprintf_r+0x174>
 800f94a:	89ab      	ldrh	r3, [r5, #12]
 800f94c:	065b      	lsls	r3, r3, #25
 800f94e:	f53f af2d 	bmi.w	800f7ac <_svfiprintf_r+0x28>
 800f952:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f954:	b01d      	add	sp, #116	; 0x74
 800f956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f95a:	ab03      	add	r3, sp, #12
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	462a      	mov	r2, r5
 800f960:	4b05      	ldr	r3, [pc, #20]	; (800f978 <_svfiprintf_r+0x1f4>)
 800f962:	a904      	add	r1, sp, #16
 800f964:	4638      	mov	r0, r7
 800f966:	f000 f919 	bl	800fb9c <_printf_i>
 800f96a:	e7eb      	b.n	800f944 <_svfiprintf_r+0x1c0>
 800f96c:	08010cbc 	.word	0x08010cbc
 800f970:	08010cc6 	.word	0x08010cc6
 800f974:	00000000 	.word	0x00000000
 800f978:	0800f6d1 	.word	0x0800f6d1
 800f97c:	08010cc2 	.word	0x08010cc2

0800f980 <sbrk_aligned>:
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	4e0e      	ldr	r6, [pc, #56]	; (800f9bc <sbrk_aligned+0x3c>)
 800f984:	460c      	mov	r4, r1
 800f986:	6831      	ldr	r1, [r6, #0]
 800f988:	4605      	mov	r5, r0
 800f98a:	b911      	cbnz	r1, 800f992 <sbrk_aligned+0x12>
 800f98c:	f000 fa7e 	bl	800fe8c <_sbrk_r>
 800f990:	6030      	str	r0, [r6, #0]
 800f992:	4621      	mov	r1, r4
 800f994:	4628      	mov	r0, r5
 800f996:	f000 fa79 	bl	800fe8c <_sbrk_r>
 800f99a:	1c43      	adds	r3, r0, #1
 800f99c:	d00a      	beq.n	800f9b4 <sbrk_aligned+0x34>
 800f99e:	1cc4      	adds	r4, r0, #3
 800f9a0:	f024 0403 	bic.w	r4, r4, #3
 800f9a4:	42a0      	cmp	r0, r4
 800f9a6:	d007      	beq.n	800f9b8 <sbrk_aligned+0x38>
 800f9a8:	1a21      	subs	r1, r4, r0
 800f9aa:	4628      	mov	r0, r5
 800f9ac:	f000 fa6e 	bl	800fe8c <_sbrk_r>
 800f9b0:	3001      	adds	r0, #1
 800f9b2:	d101      	bne.n	800f9b8 <sbrk_aligned+0x38>
 800f9b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	bd70      	pop	{r4, r5, r6, pc}
 800f9bc:	2000545c 	.word	0x2000545c

0800f9c0 <_malloc_r>:
 800f9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9c4:	1ccd      	adds	r5, r1, #3
 800f9c6:	f025 0503 	bic.w	r5, r5, #3
 800f9ca:	3508      	adds	r5, #8
 800f9cc:	2d0c      	cmp	r5, #12
 800f9ce:	bf38      	it	cc
 800f9d0:	250c      	movcc	r5, #12
 800f9d2:	2d00      	cmp	r5, #0
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	db01      	blt.n	800f9dc <_malloc_r+0x1c>
 800f9d8:	42a9      	cmp	r1, r5
 800f9da:	d905      	bls.n	800f9e8 <_malloc_r+0x28>
 800f9dc:	230c      	movs	r3, #12
 800f9de:	603b      	str	r3, [r7, #0]
 800f9e0:	2600      	movs	r6, #0
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fabc <_malloc_r+0xfc>
 800f9ec:	f000 f9f8 	bl	800fde0 <__malloc_lock>
 800f9f0:	f8d8 3000 	ldr.w	r3, [r8]
 800f9f4:	461c      	mov	r4, r3
 800f9f6:	bb5c      	cbnz	r4, 800fa50 <_malloc_r+0x90>
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	4638      	mov	r0, r7
 800f9fc:	f7ff ffc0 	bl	800f980 <sbrk_aligned>
 800fa00:	1c43      	adds	r3, r0, #1
 800fa02:	4604      	mov	r4, r0
 800fa04:	d155      	bne.n	800fab2 <_malloc_r+0xf2>
 800fa06:	f8d8 4000 	ldr.w	r4, [r8]
 800fa0a:	4626      	mov	r6, r4
 800fa0c:	2e00      	cmp	r6, #0
 800fa0e:	d145      	bne.n	800fa9c <_malloc_r+0xdc>
 800fa10:	2c00      	cmp	r4, #0
 800fa12:	d048      	beq.n	800faa6 <_malloc_r+0xe6>
 800fa14:	6823      	ldr	r3, [r4, #0]
 800fa16:	4631      	mov	r1, r6
 800fa18:	4638      	mov	r0, r7
 800fa1a:	eb04 0903 	add.w	r9, r4, r3
 800fa1e:	f000 fa35 	bl	800fe8c <_sbrk_r>
 800fa22:	4581      	cmp	r9, r0
 800fa24:	d13f      	bne.n	800faa6 <_malloc_r+0xe6>
 800fa26:	6821      	ldr	r1, [r4, #0]
 800fa28:	1a6d      	subs	r5, r5, r1
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	4638      	mov	r0, r7
 800fa2e:	f7ff ffa7 	bl	800f980 <sbrk_aligned>
 800fa32:	3001      	adds	r0, #1
 800fa34:	d037      	beq.n	800faa6 <_malloc_r+0xe6>
 800fa36:	6823      	ldr	r3, [r4, #0]
 800fa38:	442b      	add	r3, r5
 800fa3a:	6023      	str	r3, [r4, #0]
 800fa3c:	f8d8 3000 	ldr.w	r3, [r8]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d038      	beq.n	800fab6 <_malloc_r+0xf6>
 800fa44:	685a      	ldr	r2, [r3, #4]
 800fa46:	42a2      	cmp	r2, r4
 800fa48:	d12b      	bne.n	800faa2 <_malloc_r+0xe2>
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	605a      	str	r2, [r3, #4]
 800fa4e:	e00f      	b.n	800fa70 <_malloc_r+0xb0>
 800fa50:	6822      	ldr	r2, [r4, #0]
 800fa52:	1b52      	subs	r2, r2, r5
 800fa54:	d41f      	bmi.n	800fa96 <_malloc_r+0xd6>
 800fa56:	2a0b      	cmp	r2, #11
 800fa58:	d917      	bls.n	800fa8a <_malloc_r+0xca>
 800fa5a:	1961      	adds	r1, r4, r5
 800fa5c:	42a3      	cmp	r3, r4
 800fa5e:	6025      	str	r5, [r4, #0]
 800fa60:	bf18      	it	ne
 800fa62:	6059      	strne	r1, [r3, #4]
 800fa64:	6863      	ldr	r3, [r4, #4]
 800fa66:	bf08      	it	eq
 800fa68:	f8c8 1000 	streq.w	r1, [r8]
 800fa6c:	5162      	str	r2, [r4, r5]
 800fa6e:	604b      	str	r3, [r1, #4]
 800fa70:	4638      	mov	r0, r7
 800fa72:	f104 060b 	add.w	r6, r4, #11
 800fa76:	f000 f9b9 	bl	800fdec <__malloc_unlock>
 800fa7a:	f026 0607 	bic.w	r6, r6, #7
 800fa7e:	1d23      	adds	r3, r4, #4
 800fa80:	1af2      	subs	r2, r6, r3
 800fa82:	d0ae      	beq.n	800f9e2 <_malloc_r+0x22>
 800fa84:	1b9b      	subs	r3, r3, r6
 800fa86:	50a3      	str	r3, [r4, r2]
 800fa88:	e7ab      	b.n	800f9e2 <_malloc_r+0x22>
 800fa8a:	42a3      	cmp	r3, r4
 800fa8c:	6862      	ldr	r2, [r4, #4]
 800fa8e:	d1dd      	bne.n	800fa4c <_malloc_r+0x8c>
 800fa90:	f8c8 2000 	str.w	r2, [r8]
 800fa94:	e7ec      	b.n	800fa70 <_malloc_r+0xb0>
 800fa96:	4623      	mov	r3, r4
 800fa98:	6864      	ldr	r4, [r4, #4]
 800fa9a:	e7ac      	b.n	800f9f6 <_malloc_r+0x36>
 800fa9c:	4634      	mov	r4, r6
 800fa9e:	6876      	ldr	r6, [r6, #4]
 800faa0:	e7b4      	b.n	800fa0c <_malloc_r+0x4c>
 800faa2:	4613      	mov	r3, r2
 800faa4:	e7cc      	b.n	800fa40 <_malloc_r+0x80>
 800faa6:	230c      	movs	r3, #12
 800faa8:	603b      	str	r3, [r7, #0]
 800faaa:	4638      	mov	r0, r7
 800faac:	f000 f99e 	bl	800fdec <__malloc_unlock>
 800fab0:	e797      	b.n	800f9e2 <_malloc_r+0x22>
 800fab2:	6025      	str	r5, [r4, #0]
 800fab4:	e7dc      	b.n	800fa70 <_malloc_r+0xb0>
 800fab6:	605b      	str	r3, [r3, #4]
 800fab8:	deff      	udf	#255	; 0xff
 800faba:	bf00      	nop
 800fabc:	20005458 	.word	0x20005458

0800fac0 <_printf_common>:
 800fac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fac4:	4616      	mov	r6, r2
 800fac6:	4699      	mov	r9, r3
 800fac8:	688a      	ldr	r2, [r1, #8]
 800faca:	690b      	ldr	r3, [r1, #16]
 800facc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fad0:	4293      	cmp	r3, r2
 800fad2:	bfb8      	it	lt
 800fad4:	4613      	movlt	r3, r2
 800fad6:	6033      	str	r3, [r6, #0]
 800fad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fadc:	4607      	mov	r7, r0
 800fade:	460c      	mov	r4, r1
 800fae0:	b10a      	cbz	r2, 800fae6 <_printf_common+0x26>
 800fae2:	3301      	adds	r3, #1
 800fae4:	6033      	str	r3, [r6, #0]
 800fae6:	6823      	ldr	r3, [r4, #0]
 800fae8:	0699      	lsls	r1, r3, #26
 800faea:	bf42      	ittt	mi
 800faec:	6833      	ldrmi	r3, [r6, #0]
 800faee:	3302      	addmi	r3, #2
 800faf0:	6033      	strmi	r3, [r6, #0]
 800faf2:	6825      	ldr	r5, [r4, #0]
 800faf4:	f015 0506 	ands.w	r5, r5, #6
 800faf8:	d106      	bne.n	800fb08 <_printf_common+0x48>
 800fafa:	f104 0a19 	add.w	sl, r4, #25
 800fafe:	68e3      	ldr	r3, [r4, #12]
 800fb00:	6832      	ldr	r2, [r6, #0]
 800fb02:	1a9b      	subs	r3, r3, r2
 800fb04:	42ab      	cmp	r3, r5
 800fb06:	dc26      	bgt.n	800fb56 <_printf_common+0x96>
 800fb08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb0c:	1e13      	subs	r3, r2, #0
 800fb0e:	6822      	ldr	r2, [r4, #0]
 800fb10:	bf18      	it	ne
 800fb12:	2301      	movne	r3, #1
 800fb14:	0692      	lsls	r2, r2, #26
 800fb16:	d42b      	bmi.n	800fb70 <_printf_common+0xb0>
 800fb18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb1c:	4649      	mov	r1, r9
 800fb1e:	4638      	mov	r0, r7
 800fb20:	47c0      	blx	r8
 800fb22:	3001      	adds	r0, #1
 800fb24:	d01e      	beq.n	800fb64 <_printf_common+0xa4>
 800fb26:	6823      	ldr	r3, [r4, #0]
 800fb28:	6922      	ldr	r2, [r4, #16]
 800fb2a:	f003 0306 	and.w	r3, r3, #6
 800fb2e:	2b04      	cmp	r3, #4
 800fb30:	bf02      	ittt	eq
 800fb32:	68e5      	ldreq	r5, [r4, #12]
 800fb34:	6833      	ldreq	r3, [r6, #0]
 800fb36:	1aed      	subeq	r5, r5, r3
 800fb38:	68a3      	ldr	r3, [r4, #8]
 800fb3a:	bf0c      	ite	eq
 800fb3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb40:	2500      	movne	r5, #0
 800fb42:	4293      	cmp	r3, r2
 800fb44:	bfc4      	itt	gt
 800fb46:	1a9b      	subgt	r3, r3, r2
 800fb48:	18ed      	addgt	r5, r5, r3
 800fb4a:	2600      	movs	r6, #0
 800fb4c:	341a      	adds	r4, #26
 800fb4e:	42b5      	cmp	r5, r6
 800fb50:	d11a      	bne.n	800fb88 <_printf_common+0xc8>
 800fb52:	2000      	movs	r0, #0
 800fb54:	e008      	b.n	800fb68 <_printf_common+0xa8>
 800fb56:	2301      	movs	r3, #1
 800fb58:	4652      	mov	r2, sl
 800fb5a:	4649      	mov	r1, r9
 800fb5c:	4638      	mov	r0, r7
 800fb5e:	47c0      	blx	r8
 800fb60:	3001      	adds	r0, #1
 800fb62:	d103      	bne.n	800fb6c <_printf_common+0xac>
 800fb64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb6c:	3501      	adds	r5, #1
 800fb6e:	e7c6      	b.n	800fafe <_printf_common+0x3e>
 800fb70:	18e1      	adds	r1, r4, r3
 800fb72:	1c5a      	adds	r2, r3, #1
 800fb74:	2030      	movs	r0, #48	; 0x30
 800fb76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb7a:	4422      	add	r2, r4
 800fb7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb84:	3302      	adds	r3, #2
 800fb86:	e7c7      	b.n	800fb18 <_printf_common+0x58>
 800fb88:	2301      	movs	r3, #1
 800fb8a:	4622      	mov	r2, r4
 800fb8c:	4649      	mov	r1, r9
 800fb8e:	4638      	mov	r0, r7
 800fb90:	47c0      	blx	r8
 800fb92:	3001      	adds	r0, #1
 800fb94:	d0e6      	beq.n	800fb64 <_printf_common+0xa4>
 800fb96:	3601      	adds	r6, #1
 800fb98:	e7d9      	b.n	800fb4e <_printf_common+0x8e>
	...

0800fb9c <_printf_i>:
 800fb9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fba0:	7e0f      	ldrb	r7, [r1, #24]
 800fba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fba4:	2f78      	cmp	r7, #120	; 0x78
 800fba6:	4691      	mov	r9, r2
 800fba8:	4680      	mov	r8, r0
 800fbaa:	460c      	mov	r4, r1
 800fbac:	469a      	mov	sl, r3
 800fbae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fbb2:	d807      	bhi.n	800fbc4 <_printf_i+0x28>
 800fbb4:	2f62      	cmp	r7, #98	; 0x62
 800fbb6:	d80a      	bhi.n	800fbce <_printf_i+0x32>
 800fbb8:	2f00      	cmp	r7, #0
 800fbba:	f000 80d4 	beq.w	800fd66 <_printf_i+0x1ca>
 800fbbe:	2f58      	cmp	r7, #88	; 0x58
 800fbc0:	f000 80c0 	beq.w	800fd44 <_printf_i+0x1a8>
 800fbc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fbcc:	e03a      	b.n	800fc44 <_printf_i+0xa8>
 800fbce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fbd2:	2b15      	cmp	r3, #21
 800fbd4:	d8f6      	bhi.n	800fbc4 <_printf_i+0x28>
 800fbd6:	a101      	add	r1, pc, #4	; (adr r1, 800fbdc <_printf_i+0x40>)
 800fbd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbdc:	0800fc35 	.word	0x0800fc35
 800fbe0:	0800fc49 	.word	0x0800fc49
 800fbe4:	0800fbc5 	.word	0x0800fbc5
 800fbe8:	0800fbc5 	.word	0x0800fbc5
 800fbec:	0800fbc5 	.word	0x0800fbc5
 800fbf0:	0800fbc5 	.word	0x0800fbc5
 800fbf4:	0800fc49 	.word	0x0800fc49
 800fbf8:	0800fbc5 	.word	0x0800fbc5
 800fbfc:	0800fbc5 	.word	0x0800fbc5
 800fc00:	0800fbc5 	.word	0x0800fbc5
 800fc04:	0800fbc5 	.word	0x0800fbc5
 800fc08:	0800fd4d 	.word	0x0800fd4d
 800fc0c:	0800fc75 	.word	0x0800fc75
 800fc10:	0800fd07 	.word	0x0800fd07
 800fc14:	0800fbc5 	.word	0x0800fbc5
 800fc18:	0800fbc5 	.word	0x0800fbc5
 800fc1c:	0800fd6f 	.word	0x0800fd6f
 800fc20:	0800fbc5 	.word	0x0800fbc5
 800fc24:	0800fc75 	.word	0x0800fc75
 800fc28:	0800fbc5 	.word	0x0800fbc5
 800fc2c:	0800fbc5 	.word	0x0800fbc5
 800fc30:	0800fd0f 	.word	0x0800fd0f
 800fc34:	682b      	ldr	r3, [r5, #0]
 800fc36:	1d1a      	adds	r2, r3, #4
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	602a      	str	r2, [r5, #0]
 800fc3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc44:	2301      	movs	r3, #1
 800fc46:	e09f      	b.n	800fd88 <_printf_i+0x1ec>
 800fc48:	6820      	ldr	r0, [r4, #0]
 800fc4a:	682b      	ldr	r3, [r5, #0]
 800fc4c:	0607      	lsls	r7, r0, #24
 800fc4e:	f103 0104 	add.w	r1, r3, #4
 800fc52:	6029      	str	r1, [r5, #0]
 800fc54:	d501      	bpl.n	800fc5a <_printf_i+0xbe>
 800fc56:	681e      	ldr	r6, [r3, #0]
 800fc58:	e003      	b.n	800fc62 <_printf_i+0xc6>
 800fc5a:	0646      	lsls	r6, r0, #25
 800fc5c:	d5fb      	bpl.n	800fc56 <_printf_i+0xba>
 800fc5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fc62:	2e00      	cmp	r6, #0
 800fc64:	da03      	bge.n	800fc6e <_printf_i+0xd2>
 800fc66:	232d      	movs	r3, #45	; 0x2d
 800fc68:	4276      	negs	r6, r6
 800fc6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc6e:	485a      	ldr	r0, [pc, #360]	; (800fdd8 <_printf_i+0x23c>)
 800fc70:	230a      	movs	r3, #10
 800fc72:	e012      	b.n	800fc9a <_printf_i+0xfe>
 800fc74:	682b      	ldr	r3, [r5, #0]
 800fc76:	6820      	ldr	r0, [r4, #0]
 800fc78:	1d19      	adds	r1, r3, #4
 800fc7a:	6029      	str	r1, [r5, #0]
 800fc7c:	0605      	lsls	r5, r0, #24
 800fc7e:	d501      	bpl.n	800fc84 <_printf_i+0xe8>
 800fc80:	681e      	ldr	r6, [r3, #0]
 800fc82:	e002      	b.n	800fc8a <_printf_i+0xee>
 800fc84:	0641      	lsls	r1, r0, #25
 800fc86:	d5fb      	bpl.n	800fc80 <_printf_i+0xe4>
 800fc88:	881e      	ldrh	r6, [r3, #0]
 800fc8a:	4853      	ldr	r0, [pc, #332]	; (800fdd8 <_printf_i+0x23c>)
 800fc8c:	2f6f      	cmp	r7, #111	; 0x6f
 800fc8e:	bf0c      	ite	eq
 800fc90:	2308      	moveq	r3, #8
 800fc92:	230a      	movne	r3, #10
 800fc94:	2100      	movs	r1, #0
 800fc96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc9a:	6865      	ldr	r5, [r4, #4]
 800fc9c:	60a5      	str	r5, [r4, #8]
 800fc9e:	2d00      	cmp	r5, #0
 800fca0:	bfa2      	ittt	ge
 800fca2:	6821      	ldrge	r1, [r4, #0]
 800fca4:	f021 0104 	bicge.w	r1, r1, #4
 800fca8:	6021      	strge	r1, [r4, #0]
 800fcaa:	b90e      	cbnz	r6, 800fcb0 <_printf_i+0x114>
 800fcac:	2d00      	cmp	r5, #0
 800fcae:	d04b      	beq.n	800fd48 <_printf_i+0x1ac>
 800fcb0:	4615      	mov	r5, r2
 800fcb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fcb6:	fb03 6711 	mls	r7, r3, r1, r6
 800fcba:	5dc7      	ldrb	r7, [r0, r7]
 800fcbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fcc0:	4637      	mov	r7, r6
 800fcc2:	42bb      	cmp	r3, r7
 800fcc4:	460e      	mov	r6, r1
 800fcc6:	d9f4      	bls.n	800fcb2 <_printf_i+0x116>
 800fcc8:	2b08      	cmp	r3, #8
 800fcca:	d10b      	bne.n	800fce4 <_printf_i+0x148>
 800fccc:	6823      	ldr	r3, [r4, #0]
 800fcce:	07de      	lsls	r6, r3, #31
 800fcd0:	d508      	bpl.n	800fce4 <_printf_i+0x148>
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	6861      	ldr	r1, [r4, #4]
 800fcd6:	4299      	cmp	r1, r3
 800fcd8:	bfde      	ittt	le
 800fcda:	2330      	movle	r3, #48	; 0x30
 800fcdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fce0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fce4:	1b52      	subs	r2, r2, r5
 800fce6:	6122      	str	r2, [r4, #16]
 800fce8:	f8cd a000 	str.w	sl, [sp]
 800fcec:	464b      	mov	r3, r9
 800fcee:	aa03      	add	r2, sp, #12
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	f7ff fee4 	bl	800fac0 <_printf_common>
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	d14a      	bne.n	800fd92 <_printf_i+0x1f6>
 800fcfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd00:	b004      	add	sp, #16
 800fd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd06:	6823      	ldr	r3, [r4, #0]
 800fd08:	f043 0320 	orr.w	r3, r3, #32
 800fd0c:	6023      	str	r3, [r4, #0]
 800fd0e:	4833      	ldr	r0, [pc, #204]	; (800fddc <_printf_i+0x240>)
 800fd10:	2778      	movs	r7, #120	; 0x78
 800fd12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd16:	6823      	ldr	r3, [r4, #0]
 800fd18:	6829      	ldr	r1, [r5, #0]
 800fd1a:	061f      	lsls	r7, r3, #24
 800fd1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd20:	d402      	bmi.n	800fd28 <_printf_i+0x18c>
 800fd22:	065f      	lsls	r7, r3, #25
 800fd24:	bf48      	it	mi
 800fd26:	b2b6      	uxthmi	r6, r6
 800fd28:	07df      	lsls	r7, r3, #31
 800fd2a:	bf48      	it	mi
 800fd2c:	f043 0320 	orrmi.w	r3, r3, #32
 800fd30:	6029      	str	r1, [r5, #0]
 800fd32:	bf48      	it	mi
 800fd34:	6023      	strmi	r3, [r4, #0]
 800fd36:	b91e      	cbnz	r6, 800fd40 <_printf_i+0x1a4>
 800fd38:	6823      	ldr	r3, [r4, #0]
 800fd3a:	f023 0320 	bic.w	r3, r3, #32
 800fd3e:	6023      	str	r3, [r4, #0]
 800fd40:	2310      	movs	r3, #16
 800fd42:	e7a7      	b.n	800fc94 <_printf_i+0xf8>
 800fd44:	4824      	ldr	r0, [pc, #144]	; (800fdd8 <_printf_i+0x23c>)
 800fd46:	e7e4      	b.n	800fd12 <_printf_i+0x176>
 800fd48:	4615      	mov	r5, r2
 800fd4a:	e7bd      	b.n	800fcc8 <_printf_i+0x12c>
 800fd4c:	682b      	ldr	r3, [r5, #0]
 800fd4e:	6826      	ldr	r6, [r4, #0]
 800fd50:	6961      	ldr	r1, [r4, #20]
 800fd52:	1d18      	adds	r0, r3, #4
 800fd54:	6028      	str	r0, [r5, #0]
 800fd56:	0635      	lsls	r5, r6, #24
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	d501      	bpl.n	800fd60 <_printf_i+0x1c4>
 800fd5c:	6019      	str	r1, [r3, #0]
 800fd5e:	e002      	b.n	800fd66 <_printf_i+0x1ca>
 800fd60:	0670      	lsls	r0, r6, #25
 800fd62:	d5fb      	bpl.n	800fd5c <_printf_i+0x1c0>
 800fd64:	8019      	strh	r1, [r3, #0]
 800fd66:	2300      	movs	r3, #0
 800fd68:	6123      	str	r3, [r4, #16]
 800fd6a:	4615      	mov	r5, r2
 800fd6c:	e7bc      	b.n	800fce8 <_printf_i+0x14c>
 800fd6e:	682b      	ldr	r3, [r5, #0]
 800fd70:	1d1a      	adds	r2, r3, #4
 800fd72:	602a      	str	r2, [r5, #0]
 800fd74:	681d      	ldr	r5, [r3, #0]
 800fd76:	6862      	ldr	r2, [r4, #4]
 800fd78:	2100      	movs	r1, #0
 800fd7a:	4628      	mov	r0, r5
 800fd7c:	f7f0 fa28 	bl	80001d0 <memchr>
 800fd80:	b108      	cbz	r0, 800fd86 <_printf_i+0x1ea>
 800fd82:	1b40      	subs	r0, r0, r5
 800fd84:	6060      	str	r0, [r4, #4]
 800fd86:	6863      	ldr	r3, [r4, #4]
 800fd88:	6123      	str	r3, [r4, #16]
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd90:	e7aa      	b.n	800fce8 <_printf_i+0x14c>
 800fd92:	6923      	ldr	r3, [r4, #16]
 800fd94:	462a      	mov	r2, r5
 800fd96:	4649      	mov	r1, r9
 800fd98:	4640      	mov	r0, r8
 800fd9a:	47d0      	blx	sl
 800fd9c:	3001      	adds	r0, #1
 800fd9e:	d0ad      	beq.n	800fcfc <_printf_i+0x160>
 800fda0:	6823      	ldr	r3, [r4, #0]
 800fda2:	079b      	lsls	r3, r3, #30
 800fda4:	d413      	bmi.n	800fdce <_printf_i+0x232>
 800fda6:	68e0      	ldr	r0, [r4, #12]
 800fda8:	9b03      	ldr	r3, [sp, #12]
 800fdaa:	4298      	cmp	r0, r3
 800fdac:	bfb8      	it	lt
 800fdae:	4618      	movlt	r0, r3
 800fdb0:	e7a6      	b.n	800fd00 <_printf_i+0x164>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	4632      	mov	r2, r6
 800fdb6:	4649      	mov	r1, r9
 800fdb8:	4640      	mov	r0, r8
 800fdba:	47d0      	blx	sl
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	d09d      	beq.n	800fcfc <_printf_i+0x160>
 800fdc0:	3501      	adds	r5, #1
 800fdc2:	68e3      	ldr	r3, [r4, #12]
 800fdc4:	9903      	ldr	r1, [sp, #12]
 800fdc6:	1a5b      	subs	r3, r3, r1
 800fdc8:	42ab      	cmp	r3, r5
 800fdca:	dcf2      	bgt.n	800fdb2 <_printf_i+0x216>
 800fdcc:	e7eb      	b.n	800fda6 <_printf_i+0x20a>
 800fdce:	2500      	movs	r5, #0
 800fdd0:	f104 0619 	add.w	r6, r4, #25
 800fdd4:	e7f5      	b.n	800fdc2 <_printf_i+0x226>
 800fdd6:	bf00      	nop
 800fdd8:	08010ccd 	.word	0x08010ccd
 800fddc:	08010cde 	.word	0x08010cde

0800fde0 <__malloc_lock>:
 800fde0:	4801      	ldr	r0, [pc, #4]	; (800fde8 <__malloc_lock+0x8>)
 800fde2:	f7ff bc65 	b.w	800f6b0 <__retarget_lock_acquire_recursive>
 800fde6:	bf00      	nop
 800fde8:	20005454 	.word	0x20005454

0800fdec <__malloc_unlock>:
 800fdec:	4801      	ldr	r0, [pc, #4]	; (800fdf4 <__malloc_unlock+0x8>)
 800fdee:	f7ff bc60 	b.w	800f6b2 <__retarget_lock_release_recursive>
 800fdf2:	bf00      	nop
 800fdf4:	20005454 	.word	0x20005454

0800fdf8 <_realloc_r>:
 800fdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfc:	4680      	mov	r8, r0
 800fdfe:	4614      	mov	r4, r2
 800fe00:	460e      	mov	r6, r1
 800fe02:	b921      	cbnz	r1, 800fe0e <_realloc_r+0x16>
 800fe04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe08:	4611      	mov	r1, r2
 800fe0a:	f7ff bdd9 	b.w	800f9c0 <_malloc_r>
 800fe0e:	b92a      	cbnz	r2, 800fe1c <_realloc_r+0x24>
 800fe10:	f000 f84c 	bl	800feac <_free_r>
 800fe14:	4625      	mov	r5, r4
 800fe16:	4628      	mov	r0, r5
 800fe18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe1c:	f000 f892 	bl	800ff44 <_malloc_usable_size_r>
 800fe20:	4284      	cmp	r4, r0
 800fe22:	4607      	mov	r7, r0
 800fe24:	d802      	bhi.n	800fe2c <_realloc_r+0x34>
 800fe26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe2a:	d812      	bhi.n	800fe52 <_realloc_r+0x5a>
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	4640      	mov	r0, r8
 800fe30:	f7ff fdc6 	bl	800f9c0 <_malloc_r>
 800fe34:	4605      	mov	r5, r0
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d0ed      	beq.n	800fe16 <_realloc_r+0x1e>
 800fe3a:	42bc      	cmp	r4, r7
 800fe3c:	4622      	mov	r2, r4
 800fe3e:	4631      	mov	r1, r6
 800fe40:	bf28      	it	cs
 800fe42:	463a      	movcs	r2, r7
 800fe44:	f7ff fc36 	bl	800f6b4 <memcpy>
 800fe48:	4631      	mov	r1, r6
 800fe4a:	4640      	mov	r0, r8
 800fe4c:	f000 f82e 	bl	800feac <_free_r>
 800fe50:	e7e1      	b.n	800fe16 <_realloc_r+0x1e>
 800fe52:	4635      	mov	r5, r6
 800fe54:	e7df      	b.n	800fe16 <_realloc_r+0x1e>

0800fe56 <memmove>:
 800fe56:	4288      	cmp	r0, r1
 800fe58:	b510      	push	{r4, lr}
 800fe5a:	eb01 0402 	add.w	r4, r1, r2
 800fe5e:	d902      	bls.n	800fe66 <memmove+0x10>
 800fe60:	4284      	cmp	r4, r0
 800fe62:	4623      	mov	r3, r4
 800fe64:	d807      	bhi.n	800fe76 <memmove+0x20>
 800fe66:	1e43      	subs	r3, r0, #1
 800fe68:	42a1      	cmp	r1, r4
 800fe6a:	d008      	beq.n	800fe7e <memmove+0x28>
 800fe6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe70:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe74:	e7f8      	b.n	800fe68 <memmove+0x12>
 800fe76:	4402      	add	r2, r0
 800fe78:	4601      	mov	r1, r0
 800fe7a:	428a      	cmp	r2, r1
 800fe7c:	d100      	bne.n	800fe80 <memmove+0x2a>
 800fe7e:	bd10      	pop	{r4, pc}
 800fe80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe84:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe88:	e7f7      	b.n	800fe7a <memmove+0x24>
	...

0800fe8c <_sbrk_r>:
 800fe8c:	b538      	push	{r3, r4, r5, lr}
 800fe8e:	4d06      	ldr	r5, [pc, #24]	; (800fea8 <_sbrk_r+0x1c>)
 800fe90:	2300      	movs	r3, #0
 800fe92:	4604      	mov	r4, r0
 800fe94:	4608      	mov	r0, r1
 800fe96:	602b      	str	r3, [r5, #0]
 800fe98:	f7f6 ff0a 	bl	8006cb0 <_sbrk>
 800fe9c:	1c43      	adds	r3, r0, #1
 800fe9e:	d102      	bne.n	800fea6 <_sbrk_r+0x1a>
 800fea0:	682b      	ldr	r3, [r5, #0]
 800fea2:	b103      	cbz	r3, 800fea6 <_sbrk_r+0x1a>
 800fea4:	6023      	str	r3, [r4, #0]
 800fea6:	bd38      	pop	{r3, r4, r5, pc}
 800fea8:	20005460 	.word	0x20005460

0800feac <_free_r>:
 800feac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800feae:	2900      	cmp	r1, #0
 800feb0:	d044      	beq.n	800ff3c <_free_r+0x90>
 800feb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feb6:	9001      	str	r0, [sp, #4]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f1a1 0404 	sub.w	r4, r1, #4
 800febe:	bfb8      	it	lt
 800fec0:	18e4      	addlt	r4, r4, r3
 800fec2:	f7ff ff8d 	bl	800fde0 <__malloc_lock>
 800fec6:	4a1e      	ldr	r2, [pc, #120]	; (800ff40 <_free_r+0x94>)
 800fec8:	9801      	ldr	r0, [sp, #4]
 800feca:	6813      	ldr	r3, [r2, #0]
 800fecc:	b933      	cbnz	r3, 800fedc <_free_r+0x30>
 800fece:	6063      	str	r3, [r4, #4]
 800fed0:	6014      	str	r4, [r2, #0]
 800fed2:	b003      	add	sp, #12
 800fed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fed8:	f7ff bf88 	b.w	800fdec <__malloc_unlock>
 800fedc:	42a3      	cmp	r3, r4
 800fede:	d908      	bls.n	800fef2 <_free_r+0x46>
 800fee0:	6825      	ldr	r5, [r4, #0]
 800fee2:	1961      	adds	r1, r4, r5
 800fee4:	428b      	cmp	r3, r1
 800fee6:	bf01      	itttt	eq
 800fee8:	6819      	ldreq	r1, [r3, #0]
 800feea:	685b      	ldreq	r3, [r3, #4]
 800feec:	1949      	addeq	r1, r1, r5
 800feee:	6021      	streq	r1, [r4, #0]
 800fef0:	e7ed      	b.n	800fece <_free_r+0x22>
 800fef2:	461a      	mov	r2, r3
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	b10b      	cbz	r3, 800fefc <_free_r+0x50>
 800fef8:	42a3      	cmp	r3, r4
 800fefa:	d9fa      	bls.n	800fef2 <_free_r+0x46>
 800fefc:	6811      	ldr	r1, [r2, #0]
 800fefe:	1855      	adds	r5, r2, r1
 800ff00:	42a5      	cmp	r5, r4
 800ff02:	d10b      	bne.n	800ff1c <_free_r+0x70>
 800ff04:	6824      	ldr	r4, [r4, #0]
 800ff06:	4421      	add	r1, r4
 800ff08:	1854      	adds	r4, r2, r1
 800ff0a:	42a3      	cmp	r3, r4
 800ff0c:	6011      	str	r1, [r2, #0]
 800ff0e:	d1e0      	bne.n	800fed2 <_free_r+0x26>
 800ff10:	681c      	ldr	r4, [r3, #0]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	6053      	str	r3, [r2, #4]
 800ff16:	440c      	add	r4, r1
 800ff18:	6014      	str	r4, [r2, #0]
 800ff1a:	e7da      	b.n	800fed2 <_free_r+0x26>
 800ff1c:	d902      	bls.n	800ff24 <_free_r+0x78>
 800ff1e:	230c      	movs	r3, #12
 800ff20:	6003      	str	r3, [r0, #0]
 800ff22:	e7d6      	b.n	800fed2 <_free_r+0x26>
 800ff24:	6825      	ldr	r5, [r4, #0]
 800ff26:	1961      	adds	r1, r4, r5
 800ff28:	428b      	cmp	r3, r1
 800ff2a:	bf04      	itt	eq
 800ff2c:	6819      	ldreq	r1, [r3, #0]
 800ff2e:	685b      	ldreq	r3, [r3, #4]
 800ff30:	6063      	str	r3, [r4, #4]
 800ff32:	bf04      	itt	eq
 800ff34:	1949      	addeq	r1, r1, r5
 800ff36:	6021      	streq	r1, [r4, #0]
 800ff38:	6054      	str	r4, [r2, #4]
 800ff3a:	e7ca      	b.n	800fed2 <_free_r+0x26>
 800ff3c:	b003      	add	sp, #12
 800ff3e:	bd30      	pop	{r4, r5, pc}
 800ff40:	20005458 	.word	0x20005458

0800ff44 <_malloc_usable_size_r>:
 800ff44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff48:	1f18      	subs	r0, r3, #4
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	bfbc      	itt	lt
 800ff4e:	580b      	ldrlt	r3, [r1, r0]
 800ff50:	18c0      	addlt	r0, r0, r3
 800ff52:	4770      	bx	lr

0800ff54 <_init>:
 800ff54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff56:	bf00      	nop
 800ff58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff5a:	bc08      	pop	{r3}
 800ff5c:	469e      	mov	lr, r3
 800ff5e:	4770      	bx	lr

0800ff60 <_fini>:
 800ff60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff62:	bf00      	nop
 800ff64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff66:	bc08      	pop	{r3}
 800ff68:	469e      	mov	lr, r3
 800ff6a:	4770      	bx	lr
