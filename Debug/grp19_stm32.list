
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cfc  0800b28c  0800b28c  0001b28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf88  0800bf88  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf88  0800bf88  0001bf88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf90  0800bf90  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf90  0800bf90  0001bf90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf94  0800bf94  0001bf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800bf98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00005168  200001a4  200001a4  000201a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000530c  2000530c  000201a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c8b9  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c7a  00000000  00000000  0003cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001968  00000000  00000000  00040750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013eb  00000000  00000000  000420b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005207  00000000  00000000  000434a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cceb  00000000  00000000  000486aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc616  00000000  00000000  00065395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007384  00000000  00000000  001419ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00148d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b274 	.word	0x0800b274

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	0800b274 	.word	0x0800b274

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f002 f955 	bl	80031ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f91b 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fb6b 	bl	80015e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fb3f 	bl	800158c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 f973 	bl	80011f8 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fa91 	bl	8001438 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fa3b 	bl	8001390 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 f99b 	bl	8001254 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f1e:	f009 fc45 	bl	800a7ac <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f22:	2300      	movs	r3, #0
 8000f24:	2203      	movs	r2, #3
 8000f26:	2100      	movs	r1, #0
 8000f28:	4859      	ldr	r0, [pc, #356]	; (8001090 <main+0x198>)
 8000f2a:	f009 f968 	bl	800a1fe <ICM20948_init>

  // accelerometer

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f2e:	210c      	movs	r1, #12
 8000f30:	4858      	ldr	r0, [pc, #352]	; (8001094 <main+0x19c>)
 8000f32:	f004 fa57 	bl	80053e4 <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f36:	2100      	movs	r1, #0
 8000f38:	4857      	ldr	r0, [pc, #348]	; (8001098 <main+0x1a0>)
 8000f3a:	f004 fa53 	bl	80053e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f3e:	2104      	movs	r1, #4
 8000f40:	4855      	ldr	r0, [pc, #340]	; (8001098 <main+0x1a0>)
 8000f42:	f004 fa4f 	bl	80053e4 <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f46:	213c      	movs	r1, #60	; 0x3c
 8000f48:	4854      	ldr	r0, [pc, #336]	; (800109c <main+0x1a4>)
 8000f4a:	f004 fbb9 	bl	80056c0 <HAL_TIM_Encoder_Start>

  __RESET_SERVO_TURN(&htim1);
 8000f4e:	4b51      	ldr	r3, [pc, #324]	; (8001094 <main+0x19c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2291      	movs	r2, #145	; 0x91
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
 8000f56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f5a:	f002 f969 	bl	8003230 <HAL_Delay>

  // TODO:pid controller

  // command queue initialization
  curCmd.index = 100;
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <main+0x1a8>)
 8000f60:	2264      	movs	r2, #100	; 0x64
 8000f62:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f64:	4b4e      	ldr	r3, [pc, #312]	; (80010a0 <main+0x1a8>)
 8000f66:	220a      	movs	r2, #10
 8000f68:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8000f6a:	4b4e      	ldr	r3, [pc, #312]	; (80010a4 <main+0x1ac>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8000f70:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <main+0x1ac>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8000f76:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <main+0x1b0>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b4a      	ldr	r3, [pc, #296]	; (80010a4 <main+0x1ac>)
 8000f7c:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e00c      	b.n	8000f9e <main+0xa6>
  {
    Command cmd;
    cmd.index = 100;
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000f8c:	4a45      	ldr	r2, [pc, #276]	; (80010a4 <main+0x1ac>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <main+0x1b0>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	dbec      	blt.n	8000f84 <main+0x8c>
  }

  // overwrite curCmd for debugging individual task
  curCmd.index = 1;
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <main+0x1a8>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
  curCmd.val = 00;
 8000fb0:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <main+0x1a8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	805a      	strh	r2, [r3, #2]

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000fb6:	4b3d      	ldr	r3, [pc, #244]	; (80010ac <main+0x1b4>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	493c      	ldr	r1, [pc, #240]	; (80010b0 <main+0x1b8>)
 8000fc0:	483c      	ldr	r0, [pc, #240]	; (80010b4 <main+0x1bc>)
 8000fc2:	f005 fb96 	bl	80066f2 <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <main+0x19c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2291      	movs	r2, #145	; 0x91
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fd2:	f002 f92d 	bl	8003230 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd6:	f006 fb69 	bl	80076ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 8000fda:	4a37      	ldr	r2, [pc, #220]	; (80010b8 <main+0x1c0>)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4837      	ldr	r0, [pc, #220]	; (80010bc <main+0x1c4>)
 8000fe0:	f006 fbae 	bl	8007740 <osThreadNew>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <main+0x1c8>)
 8000fe8:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 8000fea:	4a36      	ldr	r2, [pc, #216]	; (80010c4 <main+0x1cc>)
 8000fec:	2100      	movs	r1, #0
 8000fee:	4836      	ldr	r0, [pc, #216]	; (80010c8 <main+0x1d0>)
 8000ff0:	f006 fba6 	bl	8007740 <osThreadNew>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a35      	ldr	r2, [pc, #212]	; (80010cc <main+0x1d4>)
 8000ff8:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 8000ffa:	4a35      	ldr	r2, [pc, #212]	; (80010d0 <main+0x1d8>)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4835      	ldr	r0, [pc, #212]	; (80010d4 <main+0x1dc>)
 8001000:	f006 fb9e 	bl	8007740 <osThreadNew>
 8001004:	4603      	mov	r3, r0
 8001006:	4a34      	ldr	r2, [pc, #208]	; (80010d8 <main+0x1e0>)
 8001008:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 800100a:	4a34      	ldr	r2, [pc, #208]	; (80010dc <main+0x1e4>)
 800100c:	2100      	movs	r1, #0
 800100e:	4834      	ldr	r0, [pc, #208]	; (80010e0 <main+0x1e8>)
 8001010:	f006 fb96 	bl	8007740 <osThreadNew>
 8001014:	4603      	mov	r3, r0
 8001016:	4a33      	ldr	r2, [pc, #204]	; (80010e4 <main+0x1ec>)
 8001018:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 800101a:	4a33      	ldr	r2, [pc, #204]	; (80010e8 <main+0x1f0>)
 800101c:	2100      	movs	r1, #0
 800101e:	4833      	ldr	r0, [pc, #204]	; (80010ec <main+0x1f4>)
 8001020:	f006 fb8e 	bl	8007740 <osThreadNew>
 8001024:	4603      	mov	r3, r0
 8001026:	4a32      	ldr	r2, [pc, #200]	; (80010f0 <main+0x1f8>)
 8001028:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 800102a:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <main+0x1fc>)
 800102c:	2100      	movs	r1, #0
 800102e:	4832      	ldr	r0, [pc, #200]	; (80010f8 <main+0x200>)
 8001030:	f006 fb86 	bl	8007740 <osThreadNew>
 8001034:	4603      	mov	r3, r0
 8001036:	4a31      	ldr	r2, [pc, #196]	; (80010fc <main+0x204>)
 8001038:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 800103a:	4a31      	ldr	r2, [pc, #196]	; (8001100 <main+0x208>)
 800103c:	2100      	movs	r1, #0
 800103e:	4831      	ldr	r0, [pc, #196]	; (8001104 <main+0x20c>)
 8001040:	f006 fb7e 	bl	8007740 <osThreadNew>
 8001044:	4603      	mov	r3, r0
 8001046:	4a30      	ldr	r2, [pc, #192]	; (8001108 <main+0x210>)
 8001048:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 800104a:	4a30      	ldr	r2, [pc, #192]	; (800110c <main+0x214>)
 800104c:	2100      	movs	r1, #0
 800104e:	4830      	ldr	r0, [pc, #192]	; (8001110 <main+0x218>)
 8001050:	f006 fb76 	bl	8007740 <osThreadNew>
 8001054:	4603      	mov	r3, r0
 8001056:	4a2f      	ldr	r2, [pc, #188]	; (8001114 <main+0x21c>)
 8001058:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 800105a:	4a2f      	ldr	r2, [pc, #188]	; (8001118 <main+0x220>)
 800105c:	2100      	movs	r1, #0
 800105e:	482f      	ldr	r0, [pc, #188]	; (800111c <main+0x224>)
 8001060:	f006 fb6e 	bl	8007740 <osThreadNew>
 8001064:	4603      	mov	r3, r0
 8001066:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <main+0x228>)
 8001068:	6013      	str	r3, [r2, #0]

  /* creation of moveDistTask */
  moveDistTaskHandle = osThreadNew(runMoveDistTask, NULL, &moveDistTask_attributes);
 800106a:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <main+0x22c>)
 800106c:	2100      	movs	r1, #0
 800106e:	482e      	ldr	r0, [pc, #184]	; (8001128 <main+0x230>)
 8001070:	f006 fb66 	bl	8007740 <osThreadNew>
 8001074:	4603      	mov	r3, r0
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <main+0x234>)
 8001078:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 800107a:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <main+0x238>)
 800107c:	2100      	movs	r1, #0
 800107e:	482d      	ldr	r0, [pc, #180]	; (8001134 <main+0x23c>)
 8001080:	f006 fb5e 	bl	8007740 <osThreadNew>
 8001084:	4603      	mov	r3, r0
 8001086:	4a2c      	ldr	r2, [pc, #176]	; (8001138 <main+0x240>)
 8001088:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800108a:	f006 fb33 	bl	80076f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800108e:	e7fe      	b.n	800108e <main+0x196>
 8001090:	200001c0 	.word	0x200001c0
 8001094:	20000214 	.word	0x20000214
 8001098:	200002a4 	.word	0x200002a4
 800109c:	2000025c 	.word	0x2000025c
 80010a0:	2000039c 	.word	0x2000039c
 80010a4:	20000368 	.word	0x20000368
 80010a8:	20000001 	.word	0x20000001
 80010ac:	20000000 	.word	0x20000000
 80010b0:	2000035c 	.word	0x2000035c
 80010b4:	200002ec 	.word	0x200002ec
 80010b8:	0800b34c 	.word	0x0800b34c
 80010bc:	08002089 	.word	0x08002089
 80010c0:	20000330 	.word	0x20000330
 80010c4:	0800b370 	.word	0x0800b370
 80010c8:	08002199 	.word	0x08002199
 80010cc:	20000334 	.word	0x20000334
 80010d0:	0800b394 	.word	0x0800b394
 80010d4:	08002229 	.word	0x08002229
 80010d8:	20000338 	.word	0x20000338
 80010dc:	0800b3b8 	.word	0x0800b3b8
 80010e0:	080022f9 	.word	0x080022f9
 80010e4:	2000033c 	.word	0x2000033c
 80010e8:	0800b3dc 	.word	0x0800b3dc
 80010ec:	080023c5 	.word	0x080023c5
 80010f0:	20000340 	.word	0x20000340
 80010f4:	0800b400 	.word	0x0800b400
 80010f8:	08002491 	.word	0x08002491
 80010fc:	20000344 	.word	0x20000344
 8001100:	0800b424 	.word	0x0800b424
 8001104:	0800255d 	.word	0x0800255d
 8001108:	20000348 	.word	0x20000348
 800110c:	0800b448 	.word	0x0800b448
 8001110:	08002629 	.word	0x08002629
 8001114:	2000034c 	.word	0x2000034c
 8001118:	0800b46c 	.word	0x0800b46c
 800111c:	080026f5 	.word	0x080026f5
 8001120:	20000350 	.word	0x20000350
 8001124:	0800b490 	.word	0x0800b490
 8001128:	08002705 	.word	0x08002705
 800112c:	20000354 	.word	0x20000354
 8001130:	0800b4b4 	.word	0x0800b4b4
 8001134:	08002715 	.word	0x08002715
 8001138:	20000358 	.word	0x20000358

0800113c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	; 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f009 fc0e 	bl	800a96c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <SystemClock_Config+0xb4>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a21      	ldr	r2, [pc, #132]	; (80011f0 <SystemClock_Config+0xb4>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <SystemClock_Config+0xb4>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <SystemClock_Config+0xb8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <SystemClock_Config+0xb8>)
 8001186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <SystemClock_Config+0xb8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	2310      	movs	r3, #16
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fb75 	bl	800489c <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011b8:	f001 fd3c 	bl	8002c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011bc:	230f      	movs	r3, #15
 80011be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fdd8 	bl	8004d8c <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011e2:	f001 fd27 	bl	8002c34 <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3750      	adds	r7, #80	; 0x50
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x50>)
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <MX_I2C1_Init+0x54>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C1_Init+0x50>)
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_I2C1_Init+0x58>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_I2C1_Init+0x50>)
 8001216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_I2C1_Init+0x50>)
 8001236:	f002 fb49 	bl	80038cc <HAL_I2C_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001240:	f001 fcf8 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200001c0 	.word	0x200001c0
 800124c:	40005400 	.word	0x40005400
 8001250:	000186a0 	.word	0x000186a0

08001254 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b096      	sub	sp, #88	; 0x58
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2220      	movs	r2, #32
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fb6d 	bl	800a96c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <MX_TIM1_Init+0x134>)
 8001294:	4a3d      	ldr	r2, [pc, #244]	; (800138c <MX_TIM1_Init+0x138>)
 8001296:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <MX_TIM1_Init+0x134>)
 800129a:	22a0      	movs	r2, #160	; 0xa0
 800129c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <MX_TIM1_Init+0x134>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <MX_TIM1_Init+0x134>)
 80012a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <MX_TIM1_Init+0x134>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_TIM1_Init+0x134>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <MX_TIM1_Init+0x134>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012be:	4832      	ldr	r0, [pc, #200]	; (8001388 <MX_TIM1_Init+0x134>)
 80012c0:	f003 ff76 	bl	80051b0 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012ca:	f001 fcb3 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d8:	4619      	mov	r1, r3
 80012da:	482b      	ldr	r0, [pc, #172]	; (8001388 <MX_TIM1_Init+0x134>)
 80012dc:	f004 fc48 	bl	8005b70 <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012e6:	f001 fca5 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ea:	4827      	ldr	r0, [pc, #156]	; (8001388 <MX_TIM1_Init+0x134>)
 80012ec:	f004 f820 	bl	8005330 <HAL_TIM_PWM_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012f6:	f001 fc9d 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001306:	4619      	mov	r1, r3
 8001308:	481f      	ldr	r0, [pc, #124]	; (8001388 <MX_TIM1_Init+0x134>)
 800130a:	f005 f831 	bl	8006370 <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001314:	f001 fc8e 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001318:	2360      	movs	r3, #96	; 0x60
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	220c      	movs	r2, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <MX_TIM1_Init+0x134>)
 800133a:	f004 fb57 	bl	80059ec <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001344:	f001 fc76 	bl	8002c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM1_Init+0x134>)
 800136c:	f005 f87c 	bl	8006468 <HAL_TIMEx_ConfigBreakDeadTime>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001376:	f001 fc5d 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800137a:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM1_Init+0x134>)
 800137c:	f001 fd98 	bl	8002eb0 <HAL_TIM_MspPostInit>
}
 8001380:	bf00      	nop
 8001382:	3758      	adds	r7, #88	; 0x58
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000214 	.word	0x20000214
 800138c:	40010000 	.word	0x40010000

08001390 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2224      	movs	r2, #36	; 0x24
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f009 fae4 	bl	800a96c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_TIM2_Init+0xa4>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_TIM2_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MX_TIM2_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_TIM2_Init+0xa4>)
 80013c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_TIM2_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_TIM2_Init+0xa4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d4:	2303      	movs	r3, #3
 80013d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013dc:	2301      	movs	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013e4:	230a      	movs	r3, #10
 80013e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ec:	2301      	movs	r3, #1
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80013f4:	230a      	movs	r3, #10
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_TIM2_Init+0xa4>)
 8001400:	f004 f8b8 	bl	8005574 <HAL_TIM_Encoder_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800140a:	f001 fc13 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_TIM2_Init+0xa4>)
 800141c:	f004 ffa8 	bl	8006370 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001426:	f001 fc05 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 800142a:	bf00      	nop
 800142c:	3730      	adds	r7, #48	; 0x30
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000025c 	.word	0x2000025c

08001438 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b096      	sub	sp, #88	; 0x58
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2220      	movs	r2, #32
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f009 fa7b 	bl	800a96c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001476:	4b43      	ldr	r3, [pc, #268]	; (8001584 <MX_TIM8_Init+0x14c>)
 8001478:	4a43      	ldr	r2, [pc, #268]	; (8001588 <MX_TIM8_Init+0x150>)
 800147a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <MX_TIM8_Init+0x14c>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <MX_TIM8_Init+0x14c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001488:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <MX_TIM8_Init+0x14c>)
 800148a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800148e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <MX_TIM8_Init+0x14c>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <MX_TIM8_Init+0x14c>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <MX_TIM8_Init+0x14c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014a2:	4838      	ldr	r0, [pc, #224]	; (8001584 <MX_TIM8_Init+0x14c>)
 80014a4:	f003 fe84 	bl	80051b0 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014ae:	f001 fbc1 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014bc:	4619      	mov	r1, r3
 80014be:	4831      	ldr	r0, [pc, #196]	; (8001584 <MX_TIM8_Init+0x14c>)
 80014c0:	f004 fb56 	bl	8005b70 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014ca:	f001 fbb3 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014ce:	482d      	ldr	r0, [pc, #180]	; (8001584 <MX_TIM8_Init+0x14c>)
 80014d0:	f003 ff2e 	bl	8005330 <HAL_TIM_PWM_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014da:	f001 fbab 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ea:	4619      	mov	r1, r3
 80014ec:	4825      	ldr	r0, [pc, #148]	; (8001584 <MX_TIM8_Init+0x14c>)
 80014ee:	f004 ff3f 	bl	8006370 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014f8:	f001 fb9c 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fc:	2360      	movs	r3, #96	; 0x60
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	2200      	movs	r2, #0
 800151e:	4619      	mov	r1, r3
 8001520:	4818      	ldr	r0, [pc, #96]	; (8001584 <MX_TIM8_Init+0x14c>)
 8001522:	f004 fa63 	bl	80059ec <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800152c:	f001 fb82 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4812      	ldr	r0, [pc, #72]	; (8001584 <MX_TIM8_Init+0x14c>)
 800153a:	f004 fa57 	bl	80059ec <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001544:	f001 fb76 	bl	8002c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4619      	mov	r1, r3
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_TIM8_Init+0x14c>)
 800156c:	f004 ff7c 	bl	8006468 <HAL_TIMEx_ConfigBreakDeadTime>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001576:	f001 fb5d 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 800157a:	bf00      	nop
 800157c:	3758      	adds	r7, #88	; 0x58
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200002a4 	.word	0x200002a4
 8001588:	40010400 	.word	0x40010400

0800158c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART3_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_USART3_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_USART3_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART3_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART3_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART3_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART3_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART3_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART3_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART3_UART_Init+0x4c>)
 80015c4:	f004 ffb6 	bl	8006534 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f001 fb31 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200002ec 	.word	0x200002ec
 80015dc:	40004800 	.word	0x40004800

080015e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <MX_GPIO_Init+0xfc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a37      	ldr	r2, [pc, #220]	; (80016dc <MX_GPIO_Init+0xfc>)
 8001600:	f043 0310 	orr.w	r3, r3, #16
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b35      	ldr	r3, [pc, #212]	; (80016dc <MX_GPIO_Init+0xfc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <MX_GPIO_Init+0xfc>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a30      	ldr	r2, [pc, #192]	; (80016dc <MX_GPIO_Init+0xfc>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <MX_GPIO_Init+0xfc>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <MX_GPIO_Init+0xfc>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <MX_GPIO_Init+0xfc>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b27      	ldr	r3, [pc, #156]	; (80016dc <MX_GPIO_Init+0xfc>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <MX_GPIO_Init+0xfc>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a22      	ldr	r2, [pc, #136]	; (80016dc <MX_GPIO_Init+0xfc>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <MX_GPIO_Init+0xfc>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800166c:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_GPIO_Init+0x100>)
 800166e:	f002 f913 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	213c      	movs	r1, #60	; 0x3c
 8001676:	481b      	ldr	r0, [pc, #108]	; (80016e4 <MX_GPIO_Init+0x104>)
 8001678:	f002 f90e 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin;
 800167c:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4812      	ldr	r0, [pc, #72]	; (80016e0 <MX_GPIO_Init+0x100>)
 8001696:	f001 ff63 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 800169a:	230c      	movs	r3, #12
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2301      	movs	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a6:	2302      	movs	r3, #2
 80016a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <MX_GPIO_Init+0x104>)
 80016b2:	f001 ff55 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 80016b6:	2330      	movs	r3, #48	; 0x30
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_GPIO_Init+0x104>)
 80016ce:	f001 ff47 	bl	8003560 <HAL_GPIO_Init>
}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40020000 	.word	0x40020000

080016e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  HAL_UART_Transmit(&huart3, (uint8_t *)aRxBuffer, 10, 0xffff);
 80016f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f4:	220a      	movs	r2, #10
 80016f6:	4904      	ldr	r1, [pc, #16]	; (8001708 <HAL_UART_RxCpltCallback+0x20>)
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <HAL_UART_RxCpltCallback+0x24>)
 80016fa:	f004 ff68 	bl	80065ce <HAL_UART_Transmit>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000035c 	.word	0x2000035c
 800170c:	200002ec 	.word	0x200002ec

08001710 <PIDConfigReset>:
  cfg->ek1 = 0;
  cfg->ekSum = 0;
}

void PIDConfigReset(PIDConfig *cfg)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;

void StraightLineMove(const uint8_t speedMode)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af04      	add	r7, sp, #16
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 800173e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2302      	movs	r3, #2
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	4ba9      	ldr	r3, [pc, #676]	; (80019f0 <StraightLineMove+0x2bc>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	2237      	movs	r2, #55	; 0x37
 8001750:	21d0      	movs	r1, #208	; 0xd0
 8001752:	48a8      	ldr	r0, [pc, #672]	; (80019f4 <StraightLineMove+0x2c0>)
 8001754:	f002 faf8 	bl	8003d48 <HAL_I2C_Mem_Read>
 8001758:	4ba5      	ldr	r3, [pc, #660]	; (80019f0 <StraightLineMove+0x2bc>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	4ba3      	ldr	r3, [pc, #652]	; (80019f0 <StraightLineMove+0x2bc>)
 8001762:	785b      	ldrb	r3, [r3, #1]
 8001764:	b21b      	sxth	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b21a      	sxth	r2, r3
 800176a:	4ba3      	ldr	r3, [pc, #652]	; (80019f8 <StraightLineMove+0x2c4>)
 800176c:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 800176e:	4ba3      	ldr	r3, [pc, #652]	; (80019fc <StraightLineMove+0x2c8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b10      	cmp	r3, #16
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	b25a      	sxtb	r2, r3
 8001784:	4b9e      	ldr	r3, [pc, #632]	; (8001a00 <StraightLineMove+0x2cc>)
 8001786:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 8001788:	4b9b      	ldr	r3, [pc, #620]	; (80019f8 <StraightLineMove+0x2c4>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	f113 0f04 	cmn.w	r3, #4
 8001792:	db04      	blt.n	800179e <StraightLineMove+0x6a>
 8001794:	4b98      	ldr	r3, [pc, #608]	; (80019f8 <StraightLineMove+0x2c4>)
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	2b0b      	cmp	r3, #11
 800179c:	dd07      	ble.n	80017ae <StraightLineMove+0x7a>
 800179e:	4b96      	ldr	r3, [pc, #600]	; (80019f8 <StraightLineMove+0x2c4>)
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	e001      	b.n	80017b2 <StraightLineMove+0x7e>
 80017ae:	eddf 7a95 	vldr	s15, [pc, #596]	; 8001a04 <StraightLineMove+0x2d0>
 80017b2:	4b95      	ldr	r3, [pc, #596]	; (8001a08 <StraightLineMove+0x2d4>)
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017bc:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <StraightLineMove+0x2d4>)
 80017be:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d164      	bne.n	8001892 <StraightLineMove+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80017c8:	4b90      	ldr	r3, [pc, #576]	; (8001a0c <StraightLineMove+0x2d8>)
 80017ca:	ed93 7a00 	vldr	s14, [r3]
 80017ce:	4b8e      	ldr	r3, [pc, #568]	; (8001a08 <StraightLineMove+0x2d4>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	4b8c      	ldr	r3, [pc, #560]	; (8001a0c <StraightLineMove+0x2d8>)
 80017da:	edd3 6a01 	vldr	s13, [r3, #4]
 80017de:	4b8b      	ldr	r3, [pc, #556]	; (8001a0c <StraightLineMove+0x2d8>)
 80017e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80017e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ec:	4b87      	ldr	r3, [pc, #540]	; (8001a0c <StraightLineMove+0x2d8>)
 80017ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80017f2:	4b86      	ldr	r3, [pc, #536]	; (8001a0c <StraightLineMove+0x2d8>)
 80017f4:	ed93 6a03 	vldr	s12, [r3, #12]
 80017f8:	4b83      	ldr	r3, [pc, #524]	; (8001a08 <StraightLineMove+0x2d4>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180e:	ee17 2a90 	vmov	r2, s15
 8001812:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <StraightLineMove+0x2dc>)
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	4b7c      	ldr	r3, [pc, #496]	; (8001a08 <StraightLineMove+0x2d4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a7c      	ldr	r2, [pc, #496]	; (8001a0c <StraightLineMove+0x2d8>)
 800181c:	60d3      	str	r3, [r2, #12]
 800181e:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <StraightLineMove+0x2d8>)
 8001820:	ed93 7a04 	vldr	s14, [r3, #16]
 8001824:	4b78      	ldr	r3, [pc, #480]	; (8001a08 <StraightLineMove+0x2d4>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182e:	4b77      	ldr	r3, [pc, #476]	; (8001a0c <StraightLineMove+0x2d8>)
 8001830:	edc3 7a04 	vstr	s15, [r3, #16]
 8001834:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <StraightLineMove+0x2dc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800183c:	dc06      	bgt.n	800184c <StraightLineMove+0x118>
 800183e:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <StraightLineMove+0x2dc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a74      	ldr	r2, [pc, #464]	; (8001a14 <StraightLineMove+0x2e0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	bfb8      	it	lt
 8001848:	4613      	movlt	r3, r2
 800184a:	e001      	b.n	8001850 <StraightLineMove+0x11c>
 800184c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001850:	4a6f      	ldr	r2, [pc, #444]	; (8001a10 <StraightLineMove+0x2dc>)
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <StraightLineMove+0x2cc>)
 8001856:	f993 3000 	ldrsb.w	r3, [r3]
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b6c      	ldr	r3, [pc, #432]	; (8001a10 <StraightLineMove+0x2dc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	fb12 f303 	smulbb	r3, r2, r3
 8001866:	b29b      	uxth	r3, r3
 8001868:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <StraightLineMove+0x2e4>)
 8001870:	801a      	strh	r2, [r3, #0]
 8001872:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <StraightLineMove+0x2cc>)
 8001874:	f993 3000 	ldrsb.w	r3, [r3]
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <StraightLineMove+0x2dc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	fb12 f303 	smulbb	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
 8001886:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 800188a:	b29a      	uxth	r2, r3
 800188c:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <StraightLineMove+0x2e8>)
 800188e:	801a      	strh	r2, [r3, #0]
 8001890:	e0ef      	b.n	8001a72 <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_2)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d165      	bne.n	8001964 <StraightLineMove+0x230>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8001898:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <StraightLineMove+0x2ec>)
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <StraightLineMove+0x2d4>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a8:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <StraightLineMove+0x2ec>)
 80018aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <StraightLineMove+0x2ec>)
 80018b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80018b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018bc:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <StraightLineMove+0x2ec>)
 80018be:	edd3 6a02 	vldr	s13, [r3, #8]
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <StraightLineMove+0x2ec>)
 80018c4:	ed93 6a03 	vldr	s12, [r3, #12]
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <StraightLineMove+0x2d4>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018de:	ee17 2a90 	vmov	r2, s15
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <StraightLineMove+0x2dc>)
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	4b48      	ldr	r3, [pc, #288]	; (8001a08 <StraightLineMove+0x2d4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a4d      	ldr	r2, [pc, #308]	; (8001a20 <StraightLineMove+0x2ec>)
 80018ec:	60d3      	str	r3, [r2, #12]
 80018ee:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <StraightLineMove+0x2ec>)
 80018f0:	ed93 7a04 	vldr	s14, [r3, #16]
 80018f4:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <StraightLineMove+0x2d4>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fe:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <StraightLineMove+0x2ec>)
 8001900:	edc3 7a04 	vstr	s15, [r3, #16]
 8001904:	4b42      	ldr	r3, [pc, #264]	; (8001a10 <StraightLineMove+0x2dc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800190c:	dc06      	bgt.n	800191c <StraightLineMove+0x1e8>
 800190e:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <StraightLineMove+0x2dc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a44      	ldr	r2, [pc, #272]	; (8001a24 <StraightLineMove+0x2f0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	bfb8      	it	lt
 8001918:	4613      	movlt	r3, r2
 800191a:	e001      	b.n	8001920 <StraightLineMove+0x1ec>
 800191c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001920:	4a3b      	ldr	r2, [pc, #236]	; (8001a10 <StraightLineMove+0x2dc>)
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <StraightLineMove+0x2cc>)
 8001926:	f993 3000 	ldrsb.w	r3, [r3]
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <StraightLineMove+0x2dc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	fb12 f303 	smulbb	r3, r2, r3
 8001936:	b29b      	uxth	r3, r3
 8001938:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <StraightLineMove+0x2e4>)
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <StraightLineMove+0x2cc>)
 8001944:	f993 3000 	ldrsb.w	r3, [r3]
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <StraightLineMove+0x2dc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	fb12 f303 	smulbb	r3, r2, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 800195a:	3308      	adds	r3, #8
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <StraightLineMove+0x2e8>)
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	e086      	b.n	8001a72 <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_1)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b01      	cmp	r3, #1
 8001968:	f040 8083 	bne.w	8001a72 <StraightLineMove+0x33e>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <StraightLineMove+0x2f4>)
 800196e:	ed93 7a00 	vldr	s14, [r3]
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <StraightLineMove+0x2d4>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <StraightLineMove+0x2f4>)
 800197e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001982:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <StraightLineMove+0x2f4>)
 8001984:	edd3 7a04 	vldr	s15, [r3, #16]
 8001988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <StraightLineMove+0x2f4>)
 8001992:	edd3 6a02 	vldr	s13, [r3, #8]
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <StraightLineMove+0x2f4>)
 8001998:	ed93 6a03 	vldr	s12, [r3, #12]
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <StraightLineMove+0x2d4>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 2a90 	vmov	r2, s15
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <StraightLineMove+0x2dc>)
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <StraightLineMove+0x2d4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <StraightLineMove+0x2f4>)
 80019c0:	60d3      	str	r3, [r2, #12]
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <StraightLineMove+0x2f4>)
 80019c4:	ed93 7a04 	vldr	s14, [r3, #16]
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <StraightLineMove+0x2d4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <StraightLineMove+0x2f4>)
 80019d4:	edc3 7a04 	vstr	s15, [r3, #16]
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <StraightLineMove+0x2dc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80019e0:	dc24      	bgt.n	8001a2c <StraightLineMove+0x2f8>
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <StraightLineMove+0x2dc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <StraightLineMove+0x2f0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	bfb8      	it	lt
 80019ec:	4613      	movlt	r3, r2
 80019ee:	e01f      	b.n	8001a30 <StraightLineMove+0x2fc>
 80019f0:	200003cc 	.word	0x200003cc
 80019f4:	200001c0 	.word	0x200001c0
 80019f8:	200003ce 	.word	0x200003ce
 80019fc:	2000025c 	.word	0x2000025c
 8001a00:	20000140 	.word	0x20000140
 8001a04:	00000000 	.word	0x00000000
 8001a08:	200003c4 	.word	0x200003c4
 8001a0c:	200003f4 	.word	0x200003f4
 8001a10:	2000041c 	.word	0x2000041c
 8001a14:	fffffda8 	.word	0xfffffda8
 8001a18:	20000002 	.word	0x20000002
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	20000408 	.word	0x20000408
 8001a24:	fffffd44 	.word	0xfffffd44
 8001a28:	200003e0 	.word	0x200003e0
 8001a2c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <StraightLineMove+0x35c>)
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <StraightLineMove+0x360>)
 8001a36:	f993 3000 	ldrsb.w	r3, [r3]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <StraightLineMove+0x35c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	fb12 f303 	smulbb	r3, r2, r3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <StraightLineMove+0x364>)
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <StraightLineMove+0x360>)
 8001a54:	f993 3000 	ldrsb.w	r3, [r3]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <StraightLineMove+0x35c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	fb12 f303 	smulbb	r3, r2, r3
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8001a6a:	330c      	adds	r3, #12
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <StraightLineMove+0x368>)
 8001a70:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <StraightLineMove+0x364>)
 8001a74:	881a      	ldrh	r2, [r3, #0]
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <StraightLineMove+0x36c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <StraightLineMove+0x368>)
 8001a7e:	881a      	ldrh	r2, [r3, #0]
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <StraightLineMove+0x36c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000041c 	.word	0x2000041c
 8001a94:	20000140 	.word	0x20000140
 8001a98:	20000002 	.word	0x20000002
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	200002a4 	.word	0x200002a4
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <RobotMoveDist>:
  gyroZ = 0;
  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
}

void RobotMoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	70bb      	strb	r3, [r7, #2]
  angleNow = 0;
 8001ab8:	4ba1      	ldr	r3, [pc, #644]	; (8001d40 <RobotMoveDist+0x298>)
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
  gyroZ = 0; // reset angle for PID
 8001ac0:	4ba0      	ldr	r3, [pc, #640]	; (8001d44 <RobotMoveDist+0x29c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 8001ac6:	48a0      	ldr	r0, [pc, #640]	; (8001d48 <RobotMoveDist+0x2a0>)
 8001ac8:	f7ff fe22 	bl	8001710 <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8001acc:	489f      	ldr	r0, [pc, #636]	; (8001d4c <RobotMoveDist+0x2a4>)
 8001ace:	f7ff fe1f 	bl	8001710 <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8001ad2:	489f      	ldr	r0, [pc, #636]	; (8001d50 <RobotMoveDist+0x2a8>)
 8001ad4:	f7ff fe1c 	bl	8001710 <PIDConfigReset>
  curDistTick = 0;
 8001ad8:	4b9e      	ldr	r3, [pc, #632]	; (8001d54 <RobotMoveDist+0x2ac>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]

  __GET_TARGETTICK(*targetDist, targetDistTick);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd28 	bl	8000538 <__aeabi_f2d>
 8001ae8:	a38f      	add	r3, pc, #572	; (adr r3, 8001d28 <RobotMoveDist+0x280>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fd7b 	bl	80005e8 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	a38d      	add	r3, pc, #564	; (adr r3, 8001d30 <RobotMoveDist+0x288>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fbba 	bl	8000278 <__aeabi_dsub>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b91      	ldr	r3, [pc, #580]	; (8001d58 <RobotMoveDist+0x2b0>)
 8001b12:	f7fe fe93 	bl	800083c <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	4b8e      	ldr	r3, [pc, #568]	; (8001d5c <RobotMoveDist+0x2b4>)
 8001b24:	f7fe fd60 	bl	80005e8 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b8a      	ldr	r3, [pc, #552]	; (8001d60 <RobotMoveDist+0x2b8>)
 8001b36:	f7fe fb9f 	bl	8000278 <__aeabi_dsub>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7fe ffeb 	bl	8000b1c <__aeabi_d2uiz>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b86      	ldr	r3, [pc, #536]	; (8001d64 <RobotMoveDist+0x2bc>)
 8001b4c:	801a      	strh	r2, [r3, #0]

  last_curTask_tick = HAL_GetTick();
 8001b4e:	f001 fb63 	bl	8003218 <HAL_GetTick>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4a84      	ldr	r2, [pc, #528]	; (8001d68 <RobotMoveDist+0x2c0>)
 8001b56:	6013      	str	r3, [r2, #0]
  __SET_MOTOR_DIRECTION(dir);
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf0c      	ite	eq
 8001b5e:	2301      	moveq	r3, #1
 8001b60:	2300      	movne	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	2104      	movs	r1, #4
 8001b68:	4880      	ldr	r0, [pc, #512]	; (8001d6c <RobotMoveDist+0x2c4>)
 8001b6a:	f001 fe95 	bl	8003898 <HAL_GPIO_WritePin>
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf14      	ite	ne
 8001b74:	2301      	movne	r3, #1
 8001b76:	2300      	moveq	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	487b      	ldr	r0, [pc, #492]	; (8001d6c <RobotMoveDist+0x2c4>)
 8001b80:	f001 fe8a 	bl	8003898 <HAL_GPIO_WritePin>
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf0c      	ite	eq
 8001b8a:	2301      	moveq	r3, #1
 8001b8c:	2300      	movne	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	2120      	movs	r1, #32
 8001b94:	4875      	ldr	r0, [pc, #468]	; (8001d6c <RobotMoveDist+0x2c4>)
 8001b96:	f001 fe7f 	bl	8003898 <HAL_GPIO_WritePin>
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf14      	ite	ne
 8001ba0:	2301      	movne	r3, #1
 8001ba2:	2300      	moveq	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2110      	movs	r1, #16
 8001baa:	4870      	ldr	r0, [pc, #448]	; (8001d6c <RobotMoveDist+0x2c4>)
 8001bac:	f001 fe74 	bl	8003898 <HAL_GPIO_WritePin>
  __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8001bb0:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <RobotMoveDist+0x2c8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <RobotMoveDist+0x2cc>)
 8001bba:	801a      	strh	r2, [r3, #0]
  do
  {
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8001bbc:	4b6c      	ldr	r3, [pc, #432]	; (8001d70 <RobotMoveDist+0x2c8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <RobotMoveDist+0x2c8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d117      	bne.n	8001c02 <RobotMoveDist+0x15a>
 8001bd2:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <RobotMoveDist+0x2cc>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d806      	bhi.n	8001bec <RobotMoveDist+0x144>
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <RobotMoveDist+0x2cc>)
 8001be0:	881a      	ldrh	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	e007      	b.n	8001bfc <RobotMoveDist+0x154>
 8001bec:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <RobotMoveDist+0x2cc>)
 8001bee:	881a      	ldrh	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4a5e      	ldr	r2, [pc, #376]	; (8001d78 <RobotMoveDist+0x2d0>)
 8001bfe:	8013      	strh	r3, [r2, #0]
 8001c00:	e016      	b.n	8001c30 <RobotMoveDist+0x188>
 8001c02:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <RobotMoveDist+0x2cc>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d306      	bcc.n	8001c1c <RobotMoveDist+0x174>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b58      	ldr	r3, [pc, #352]	; (8001d74 <RobotMoveDist+0x2cc>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	e007      	b.n	8001c2c <RobotMoveDist+0x184>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <RobotMoveDist+0x2cc>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <RobotMoveDist+0x2d0>)
 8001c2e:	8013      	strh	r3, [r2, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <RobotMoveDist+0x2cc>)
 8001c36:	801a      	strh	r2, [r3, #0]
    curDistTick += dist_dL;
 8001c38:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <RobotMoveDist+0x2ac>)
 8001c3a:	881a      	ldrh	r2, [r3, #0]
 8001c3c:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <RobotMoveDist+0x2d0>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	4413      	add	r3, r2
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <RobotMoveDist+0x2ac>)
 8001c46:	801a      	strh	r2, [r3, #0]

    if (curDistTick >= targetDistTick)
 8001c48:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <RobotMoveDist+0x2ac>)
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <RobotMoveDist+0x2bc>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f080 80a8 	bcs.w	8001da6 <RobotMoveDist+0x2fe>
      break;

    if (HAL_GetTick() - last_curTask_tick >= 10)
 8001c56:	f001 fadf 	bl	8003218 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <RobotMoveDist+0x2c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b09      	cmp	r3, #9
 8001c64:	d9aa      	bls.n	8001bbc <RobotMoveDist+0x114>
    {
      if (speedMode == SPEED_MODE_T)
 8001c66:	78bb      	ldrb	r3, [r7, #2]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d103      	bne.n	8001c74 <RobotMoveDist+0x1cc>
      {
        StraightLineMove(SPEED_MODE_T);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff fd61 	bl	8001734 <StraightLineMove>
 8001c72:	e092      	b.n	8001d9a <RobotMoveDist+0x2f2>
      }
      else
      {
        speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8001c74:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <RobotMoveDist+0x2ac>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <RobotMoveDist+0x2bc>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bfb8      	it	lt
 8001c84:	425b      	neglt	r3, r3
 8001c86:	4a3d      	ldr	r2, [pc, #244]	; (8001d7c <RobotMoveDist+0x2d4>)
 8001c88:	fb82 1203 	smull	r1, r2, r2, r3
 8001c8c:	11d2      	asrs	r2, r2, #7
 8001c8e:	17db      	asrs	r3, r3, #31
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9a:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <RobotMoveDist+0x2d8>)
 8001c9c:	edc3 7a00 	vstr	s15, [r3]
        if (speedMode == SPEED_MODE_1)
 8001ca0:	78bb      	ldrb	r3, [r7, #2]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d11e      	bne.n	8001ce4 <RobotMoveDist+0x23c>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8001ca6:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <RobotMoveDist+0x2d8>)
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	dd02      	ble.n	8001cc0 <RobotMoveDist+0x218>
 8001cba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cbe:	e00e      	b.n	8001cde <RobotMoveDist+0x236>
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <RobotMoveDist+0x2d8>)
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8001cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	d502      	bpl.n	8001cda <RobotMoveDist+0x232>
 8001cd4:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001cd8:	e001      	b.n	8001cde <RobotMoveDist+0x236>
 8001cda:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <RobotMoveDist+0x2d8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <RobotMoveDist+0x2d8>)
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e055      	b.n	8001d90 <RobotMoveDist+0x2e8>
        else if (speedMode == SPEED_MODE_2)
 8001ce4:	78bb      	ldrb	r3, [r7, #2]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d152      	bne.n	8001d90 <RobotMoveDist+0x2e8>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <RobotMoveDist+0x2d8>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	dd02      	ble.n	8001d04 <RobotMoveDist+0x25c>
 8001cfe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d02:	e043      	b.n	8001d8c <RobotMoveDist+0x2e4>
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <RobotMoveDist+0x2d8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc15 	bl	8000538 <__aeabi_f2d>
 8001d0e:	a30a      	add	r3, pc, #40	; (adr r3, 8001d38 <RobotMoveDist+0x290>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe feda 	bl	8000acc <__aeabi_dcmplt>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d034      	beq.n	8001d88 <RobotMoveDist+0x2e0>
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <RobotMoveDist+0x2dc>)
 8001d20:	e034      	b.n	8001d8c <RobotMoveDist+0x2e4>
 8001d22:	bf00      	nop
 8001d24:	f3af 8000 	nop.w
 8001d28:	fc66b22a 	.word	0xfc66b22a
 8001d2c:	3ff266ac 	.word	0x3ff266ac
 8001d30:	bb2526f8 	.word	0xbb2526f8
 8001d34:	3feee3d4 	.word	0x3feee3d4
 8001d38:	9999999a 	.word	0x9999999a
 8001d3c:	3fd99999 	.word	0x3fd99999
 8001d40:	200003c4 	.word	0x200003c4
 8001d44:	200003ce 	.word	0x200003ce
 8001d48:	200003f4 	.word	0x200003f4
 8001d4c:	200003e0 	.word	0x200003e0
 8001d50:	20000408 	.word	0x20000408
 8001d54:	200003d8 	.word	0x200003d8
 8001d58:	40340000 	.word	0x40340000
 8001d5c:	4094a000 	.word	0x4094a000
 8001d60:	40240000 	.word	0x40240000
 8001d64:	200003da 	.word	0x200003da
 8001d68:	200003d0 	.word	0x200003d0
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	2000025c 	.word	0x2000025c
 8001d74:	200003de 	.word	0x200003de
 8001d78:	200003dc 	.word	0x200003dc
 8001d7c:	21195767 	.word	0x21195767
 8001d80:	2000013c 	.word	0x2000013c
 8001d84:	3ecccccd 	.word	0x3ecccccd
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <RobotMoveDist+0x318>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <RobotMoveDist+0x318>)
 8001d8e:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(speedMode, &speedScale);
 8001d90:	78bb      	ldrb	r3, [r7, #2]
 8001d92:	490b      	ldr	r1, [pc, #44]	; (8001dc0 <RobotMoveDist+0x318>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 f819 	bl	8001dcc <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8001d9a:	f001 fa3d 	bl	8003218 <HAL_GetTick>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <RobotMoveDist+0x31c>)
 8001da2:	6013      	str	r3, [r2, #0]
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8001da4:	e70a      	b.n	8001bbc <RobotMoveDist+0x114>
      break;
 8001da6:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <RobotMoveDist+0x320>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <RobotMoveDist+0x320>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2200      	movs	r2, #0
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	2000013c 	.word	0x2000013c
 8001dc4:	200003d0 	.word	0x200003d0
 8001dc8:	200002a4 	.word	0x200002a4

08001dcc <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float *speedScale)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af04      	add	r7, sp, #16
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 8001dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	2302      	movs	r3, #2
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	4b9b      	ldr	r3, [pc, #620]	; (8002050 <StraightLineMoveSpeedScale+0x284>)
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2301      	movs	r3, #1
 8001de8:	2237      	movs	r2, #55	; 0x37
 8001dea:	21d0      	movs	r1, #208	; 0xd0
 8001dec:	4899      	ldr	r0, [pc, #612]	; (8002054 <StraightLineMoveSpeedScale+0x288>)
 8001dee:	f001 ffab 	bl	8003d48 <HAL_I2C_Mem_Read>
 8001df2:	4b97      	ldr	r3, [pc, #604]	; (8002050 <StraightLineMoveSpeedScale+0x284>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	4b95      	ldr	r3, [pc, #596]	; (8002050 <StraightLineMoveSpeedScale+0x284>)
 8001dfc:	785b      	ldrb	r3, [r3, #1]
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	4313      	orrs	r3, r2
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	4b94      	ldr	r3, [pc, #592]	; (8002058 <StraightLineMoveSpeedScale+0x28c>)
 8001e06:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 8001e08:	4b94      	ldr	r3, [pc, #592]	; (800205c <StraightLineMoveSpeedScale+0x290>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d101      	bne.n	8001e1a <StraightLineMoveSpeedScale+0x4e>
 8001e16:	2201      	movs	r2, #1
 8001e18:	e001      	b.n	8001e1e <StraightLineMoveSpeedScale+0x52>
 8001e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e1e:	4b90      	ldr	r3, [pc, #576]	; (8002060 <StraightLineMoveSpeedScale+0x294>)
 8001e20:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8001e22:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <StraightLineMoveSpeedScale+0x28c>)
 8001e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e28:	f113 0f04 	cmn.w	r3, #4
 8001e2c:	db04      	blt.n	8001e38 <StraightLineMoveSpeedScale+0x6c>
 8001e2e:	4b8a      	ldr	r3, [pc, #552]	; (8002058 <StraightLineMoveSpeedScale+0x28c>)
 8001e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e34:	2b0b      	cmp	r3, #11
 8001e36:	dd07      	ble.n	8001e48 <StraightLineMoveSpeedScale+0x7c>
 8001e38:	4b87      	ldr	r3, [pc, #540]	; (8002058 <StraightLineMoveSpeedScale+0x28c>)
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e46:	e001      	b.n	8001e4c <StraightLineMoveSpeedScale+0x80>
 8001e48:	eddf 7a86 	vldr	s15, [pc, #536]	; 8002064 <StraightLineMoveSpeedScale+0x298>
 8001e4c:	4b86      	ldr	r3, [pc, #536]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e56:	4b84      	ldr	r3, [pc, #528]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d165      	bne.n	8001f2e <StraightLineMoveSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8001e62:	4b82      	ldr	r3, [pc, #520]	; (800206c <StraightLineMoveSpeedScale+0x2a0>)
 8001e64:	ed93 7a00 	vldr	s14, [r3]
 8001e68:	4b7f      	ldr	r3, [pc, #508]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e72:	4b7e      	ldr	r3, [pc, #504]	; (800206c <StraightLineMoveSpeedScale+0x2a0>)
 8001e74:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e78:	4b7c      	ldr	r3, [pc, #496]	; (800206c <StraightLineMoveSpeedScale+0x2a0>)
 8001e7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e86:	4b79      	ldr	r3, [pc, #484]	; (800206c <StraightLineMoveSpeedScale+0x2a0>)
 8001e88:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e8c:	4b77      	ldr	r3, [pc, #476]	; (800206c <StraightLineMoveSpeedScale+0x2a0>)
 8001e8e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e92:	4b75      	ldr	r3, [pc, #468]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea8:	ee17 2a90 	vmov	r2, s15
 8001eac:	4b70      	ldr	r3, [pc, #448]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6d      	ldr	r2, [pc, #436]	; (800206c <StraightLineMoveSpeedScale+0x2a0>)
 8001eb6:	60d3      	str	r3, [r2, #12]
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	; (800206c <StraightLineMoveSpeedScale+0x2a0>)
 8001eba:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <StraightLineMoveSpeedScale+0x2a0>)
 8001eca:	edc3 7a04 	vstr	s15, [r3, #16]
 8001ece:	4b68      	ldr	r3, [pc, #416]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001ed6:	dc06      	bgt.n	8001ee6 <StraightLineMoveSpeedScale+0x11a>
 8001ed8:	4b65      	ldr	r3, [pc, #404]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a65      	ldr	r2, [pc, #404]	; (8002074 <StraightLineMoveSpeedScale+0x2a8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	bfb8      	it	lt
 8001ee2:	4613      	movlt	r3, r2
 8001ee4:	e001      	b.n	8001eea <StraightLineMoveSpeedScale+0x11e>
 8001ee6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001eea:	4a61      	ldr	r2, [pc, #388]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <StraightLineMoveSpeedScale+0x294>)
 8001ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	fb12 f303 	smulbb	r3, r2, r3
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <StraightLineMoveSpeedScale+0x2ac>)
 8001f0a:	801a      	strh	r2, [r3, #0]
 8001f0c:	4b54      	ldr	r3, [pc, #336]	; (8002060 <StraightLineMoveSpeedScale+0x294>)
 8001f0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b56      	ldr	r3, [pc, #344]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	fb12 f303 	smulbb	r3, r2, r3
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8001f24:	330c      	adds	r3, #12
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b54      	ldr	r3, [pc, #336]	; (800207c <StraightLineMoveSpeedScale+0x2b0>)
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	e067      	b.n	8001ffe <StraightLineMoveSpeedScale+0x232>
  else if (speedMode == SPEED_MODE_2)
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d164      	bne.n	8001ffe <StraightLineMoveSpeedScale+0x232>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8001f34:	4b52      	ldr	r3, [pc, #328]	; (8002080 <StraightLineMoveSpeedScale+0x2b4>)
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f44:	4b4e      	ldr	r3, [pc, #312]	; (8002080 <StraightLineMoveSpeedScale+0x2b4>)
 8001f46:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f4a:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <StraightLineMoveSpeedScale+0x2b4>)
 8001f4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f58:	4b49      	ldr	r3, [pc, #292]	; (8002080 <StraightLineMoveSpeedScale+0x2b4>)
 8001f5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f5e:	4b48      	ldr	r3, [pc, #288]	; (8002080 <StraightLineMoveSpeedScale+0x2b4>)
 8001f60:	ed93 6a03 	vldr	s12, [r3, #12]
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f7a:	ee17 2a90 	vmov	r2, s15
 8001f7e:	4b3c      	ldr	r3, [pc, #240]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a3e      	ldr	r2, [pc, #248]	; (8002080 <StraightLineMoveSpeedScale+0x2b4>)
 8001f88:	60d3      	str	r3, [r2, #12]
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <StraightLineMoveSpeedScale+0x2b4>)
 8001f8c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <StraightLineMoveSpeedScale+0x29c>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <StraightLineMoveSpeedScale+0x2b4>)
 8001f9c:	edc3 7a04 	vstr	s15, [r3, #16]
 8001fa0:	4b33      	ldr	r3, [pc, #204]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001fa8:	dc06      	bgt.n	8001fb8 <StraightLineMoveSpeedScale+0x1ec>
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a31      	ldr	r2, [pc, #196]	; (8002074 <StraightLineMoveSpeedScale+0x2a8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	bfb8      	it	lt
 8001fb4:	4613      	movlt	r3, r2
 8001fb6:	e001      	b.n	8001fbc <StraightLineMoveSpeedScale+0x1f0>
 8001fb8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001fbc:	4a2c      	ldr	r2, [pc, #176]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <StraightLineMoveSpeedScale+0x294>)
 8001fc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	fb12 f303 	smulbb	r3, r2, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b27      	ldr	r3, [pc, #156]	; (8002078 <StraightLineMoveSpeedScale+0x2ac>)
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <StraightLineMoveSpeedScale+0x294>)
 8001fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <StraightLineMoveSpeedScale+0x2a4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	fb12 f303 	smulbb	r3, r2, r3
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <StraightLineMoveSpeedScale+0x2b0>)
 8001ffc:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <StraightLineMoveSpeedScale+0x2ac>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <StraightLineMoveSpeedScale+0x2b8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201c:	ee17 2a90 	vmov	r2, s15
 8002020:	635a      	str	r2, [r3, #52]	; 0x34
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <StraightLineMoveSpeedScale+0x2b0>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <StraightLineMoveSpeedScale+0x2b8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002040:	ee17 2a90 	vmov	r2, s15
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200003cc 	.word	0x200003cc
 8002054:	200001c0 	.word	0x200001c0
 8002058:	200003ce 	.word	0x200003ce
 800205c:	2000025c 	.word	0x2000025c
 8002060:	20000140 	.word	0x20000140
 8002064:	00000000 	.word	0x00000000
 8002068:	200003c4 	.word	0x200003c4
 800206c:	200003e0 	.word	0x200003e0
 8002070:	2000041c 	.word	0x2000041c
 8002074:	fffffd44 	.word	0xfffffd44
 8002078:	20000002 	.word	0x20000002
 800207c:	20000004 	.word	0x20000004
 8002080:	20000408 	.word	0x20000408
 8002084:	200002a4 	.word	0x200002a4

08002088 <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  // HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  int cnt1 = 0, cnt2 = 0, diff = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
 8002098:	2300      	movs	r3, #0
 800209a:	633b      	str	r3, [r7, #48]	; 0x30

  uint32_t tick = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c

  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80020a0:	4b38      	ldr	r3, [pc, #224]	; (8002184 <runEncoder+0xfc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
  tick = HAL_GetTick();
 80020a8:	f001 f8b6 	bl	8003218 <HAL_GetTick>
 80020ac:	62f8      	str	r0, [r7, #44]	; 0x2c

  // uint8_t encoderBuffer[20];
  uint8_t speedBuffer[20];
  uint8_t directionBuffer[10];
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80020ae:	4b35      	ldr	r3, [pc, #212]	; (8002184 <runEncoder+0xfc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	b25a      	sxtb	r2, r3
 80020c4:	4b30      	ldr	r3, [pc, #192]	; (8002188 <runEncoder+0x100>)
 80020c6:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */

  for (;;)
  {
    // HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
    if (HAL_GetTick() - tick > 1000L)
 80020c8:	f001 f8a6 	bl	8003218 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020d6:	d951      	bls.n	800217c <runEncoder+0xf4>
    {
      cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <runEncoder+0xfc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <runEncoder+0xfc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d110      	bne.n	8002110 <runEncoder+0x88>
      {
        if (cnt2 < cnt1)
 80020ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f2:	429a      	cmp	r2, r3
 80020f4:	da04      	bge.n	8002100 <runEncoder+0x78>
        {
          diff = cnt1 - cnt2;
 80020f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
 80020fe:	e017      	b.n	8002130 <runEncoder+0xa8>
        }
        else
          diff = (65535 - cnt2) + cnt1;
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002106:	33ff      	adds	r3, #255	; 0xff
 8002108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800210a:	4413      	add	r3, r2
 800210c:	633b      	str	r3, [r7, #48]	; 0x30
 800210e:	e00f      	b.n	8002130 <runEncoder+0xa8>
      }
      else
      {
        if (cnt2 > cnt1)
 8002110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002114:	429a      	cmp	r2, r3
 8002116:	dd04      	ble.n	8002122 <runEncoder+0x9a>
        {
          diff = cnt2 - cnt1;
 8002118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
 8002120:	e006      	b.n	8002130 <runEncoder+0xa8>
        }
        else
          diff = (65535 - cnt1) + cnt2;
 8002122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002124:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002128:	33ff      	adds	r3, #255	; 0xff
 800212a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800212c:	4413      	add	r3, r2
 800212e:	633b      	str	r3, [r7, #48]	; 0x30
      }

      // display on oled
      sprintf(speedBuffer, "Speed:%5d\0", diff);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002136:	4915      	ldr	r1, [pc, #84]	; (800218c <runEncoder+0x104>)
 8002138:	4618      	mov	r0, r3
 800213a:	f008 fbf7 	bl	800a92c <siprintf>
      OLED_ShowString(0, 0, speedBuffer);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	461a      	mov	r2, r3
 8002144:	2100      	movs	r1, #0
 8002146:	2000      	movs	r0, #0
 8002148:	f008 fafe 	bl	800a748 <OLED_ShowString>
      sprintf(directionBuffer, "Dir:%5d\0", dir);
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <runEncoder+0x100>)
 800214e:	f993 3000 	ldrsb.w	r3, [r3]
 8002152:	461a      	mov	r2, r3
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	490d      	ldr	r1, [pc, #52]	; (8002190 <runEncoder+0x108>)
 800215a:	4618      	mov	r0, r3
 800215c:	f008 fbe6 	bl	800a92c <siprintf>
      OLED_ShowString(0, 15, directionBuffer);
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	461a      	mov	r2, r3
 8002166:	210f      	movs	r1, #15
 8002168:	2000      	movs	r0, #0
 800216a:	f008 faed 	bl	800a748 <OLED_ShowString>

      // OLED_Refresh_Gram();
      cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <runEncoder+0xfc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
      tick = HAL_GetTick();
 8002176:	f001 f84f 	bl	8003218 <HAL_GetTick>
 800217a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }

    osDelay(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f005 fb71 	bl	8007864 <osDelay>
    if (HAL_GetTick() - tick > 1000L)
 8002182:	e7a1      	b.n	80020c8 <runEncoder+0x40>
 8002184:	2000025c 	.word	0x2000025c
 8002188:	20000140 	.word	0x20000140
 800218c:	0800b2f4 	.word	0x0800b2f4
 8002190:	0800b300 	.word	0x0800b300
 8002194:	00000000 	.word	0x00000000

08002198 <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  for (;;)
  {

    // __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
    angleTemp = angleNow / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80021a0:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <runOledTask+0x80>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9c7 	bl	8000538 <__aeabi_f2d>
 80021aa:	a317      	add	r3, pc, #92	; (adr r3, 8002208 <runOledTask+0x70>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fb44 	bl	800083c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	a314      	add	r3, pc, #80	; (adr r3, 8002210 <runOledTask+0x78>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe fa11 	bl	80005e8 <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fcc5 	bl	8000b5c <__aeabi_d2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <runOledTask+0x84>)
 80021d6:	6013      	str	r3, [r2, #0]
    // angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ);
    snprintf(ch, sizeof(ch), "angle:%-4d", (int)angleTemp);
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <runOledTask+0x84>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e2:	ee17 3a90 	vmov	r3, s15
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <runOledTask+0x88>)
 80021e8:	2110      	movs	r1, #16
 80021ea:	480e      	ldr	r0, [pc, #56]	; (8002224 <runOledTask+0x8c>)
 80021ec:	f008 fb6a 	bl	800a8c4 <sniprintf>
    OLED_ShowString(0, 40, (char *)ch);
 80021f0:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <runOledTask+0x8c>)
 80021f2:	2128      	movs	r1, #40	; 0x28
 80021f4:	2000      	movs	r0, #0
 80021f6:	f008 faa7 	bl	800a748 <OLED_ShowString>

    OLED_Refresh_Gram();
 80021fa:	f008 f8a7 	bl	800a34c <OLED_Refresh_Gram>
    osDelay(10);
 80021fe:	200a      	movs	r0, #10
 8002200:	f005 fb30 	bl	8007864 <osDelay>
    angleTemp = angleNow / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002204:	e7cc      	b.n	80021a0 <runOledTask+0x8>
 8002206:	bf00      	nop
 8002208:	66666666 	.word	0x66666666
 800220c:	40306666 	.word	0x40306666
 8002210:	47ae147b 	.word	0x47ae147b
 8002214:	3f847ae1 	.word	0x3f847ae1
 8002218:	200003c4 	.word	0x200003c4
 800221c:	200003c8 	.word	0x200003c8
 8002220:	0800b30c 	.word	0x0800b30c
 8002224:	200003b0 	.word	0x200003b0

08002228 <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af02      	add	r7, sp, #8
 800222e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFWTask */

  /* Infinite loop */
  for (;;)
  {
    newDutyL = 500;
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <runFWTask+0xb0>)
 8002232:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002236:	801a      	strh	r2, [r3, #0]
    newDutyR = 500;
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <runFWTask+0xb4>)
 800223a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800223e:	801a      	strh	r2, [r3, #0]
    if (curTask != TASK_MOVE_FOREWARD)
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <runFWTask+0xb8>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <runFWTask+0x28>
      osDelay(100);
 8002248:	2064      	movs	r0, #100	; 0x64
 800224a:	f005 fb0b 	bl	8007864 <osDelay>
 800224e:	e03f      	b.n	80022d0 <runFWTask+0xa8>
    else
    {
      OLED_ShowString(0, 25, (uint8_t *)("FW\0"));
 8002250:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <runFWTask+0xbc>)
 8002252:	2119      	movs	r1, #25
 8002254:	2000      	movs	r0, #0
 8002256:	f008 fa77 	bl	800a748 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 800225a:	2200      	movs	r2, #0
 800225c:	2104      	movs	r1, #4
 800225e:	4822      	ldr	r0, [pc, #136]	; (80022e8 <runFWTask+0xc0>)
 8002260:	f001 fb1a 	bl	8003898 <HAL_GPIO_WritePin>
 8002264:	2201      	movs	r2, #1
 8002266:	2108      	movs	r1, #8
 8002268:	481f      	ldr	r0, [pc, #124]	; (80022e8 <runFWTask+0xc0>)
 800226a:	f001 fb15 	bl	8003898 <HAL_GPIO_WritePin>
 800226e:	2200      	movs	r2, #0
 8002270:	2120      	movs	r1, #32
 8002272:	481d      	ldr	r0, [pc, #116]	; (80022e8 <runFWTask+0xc0>)
 8002274:	f001 fb10 	bl	8003898 <HAL_GPIO_WritePin>
 8002278:	2201      	movs	r2, #1
 800227a:	2110      	movs	r1, #16
 800227c:	481a      	ldr	r0, [pc, #104]	; (80022e8 <runFWTask+0xc0>)
 800227e:	f001 fb0b 	bl	8003898 <HAL_GPIO_WritePin>
      __RESET_SERVO_TURN(&htim1);
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <runFWTask+0xc4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2291      	movs	r2, #145	; 0x91
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
 800228a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800228e:	f000 ffcf 	bl	8003230 <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <runFWTask+0xc4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002298:	230c      	movs	r3, #12
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2305      	movs	r3, #5
 800229e:	2132      	movs	r1, #50	; 0x32
 80022a0:	2000      	movs	r0, #0
 80022a2:	f008 f9e3 	bl	800a66c <OLED_ShowNumber>
      startTick = HAL_GetTick();
 80022a6:	f000 ffb7 	bl	8003218 <HAL_GetTick>
 80022aa:	4603      	mov	r3, r0
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <runFWTask+0xc8>)
 80022b0:	801a      	strh	r2, [r3, #0]
      // while (HAL_GetTick() - startTick < period)
      // {
      //   __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
      // }
      RobotMoveDist(&targetDist, curTask == TASK_MOVE_FOREWARD ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_1);
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <runFWTask+0xb8>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bf0c      	ite	eq
 80022ba:	2301      	moveq	r3, #1
 80022bc:	2300      	movne	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2201      	movs	r2, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	480b      	ldr	r0, [pc, #44]	; (80022f4 <runFWTask+0xcc>)
 80022c6:	f7ff fbef 	bl	8001aa8 <RobotMoveDist>
      // else
      // {
      //   RobotMoveDist(&targetDist, curTask == TASK_MOVE_FOREWARD ? DIR_FORWARD : DIR_BACKWARD, SPEED_MODE_2);
      // }

      osDelay(100);
 80022ca:	2064      	movs	r0, #100	; 0x64
 80022cc:	f005 faca 	bl	8007864 <osDelay>
    }
    osDelay(1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f005 fac7 	bl	8007864 <osDelay>
    newDutyL = 500;
 80022d6:	e7ab      	b.n	8002230 <runFWTask+0x8>
 80022d8:	20000002 	.word	0x20000002
 80022dc:	20000004 	.word	0x20000004
 80022e0:	20000138 	.word	0x20000138
 80022e4:	0800b318 	.word	0x0800b318
 80022e8:	40020000 	.word	0x40020000
 80022ec:	20000214 	.word	0x20000214
 80022f0:	20000420 	.word	0x20000420
 80022f4:	200003d4 	.word	0x200003d4

080022f8 <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 8002300:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <runBWTask+0xa8>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d003      	beq.n	8002310 <runBWTask+0x18>
      osDelay(100);
 8002308:	2064      	movs	r0, #100	; 0x64
 800230a:	f005 faab 	bl	8007864 <osDelay>
 800230e:	e7f7      	b.n	8002300 <runBWTask+0x8>

    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 8002310:	4a24      	ldr	r2, [pc, #144]	; (80023a4 <runBWTask+0xac>)
 8002312:	211e      	movs	r1, #30
 8002314:	2000      	movs	r0, #0
 8002316:	f008 fa17 	bl	800a748 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 800231a:	2201      	movs	r2, #1
 800231c:	2104      	movs	r1, #4
 800231e:	4822      	ldr	r0, [pc, #136]	; (80023a8 <runBWTask+0xb0>)
 8002320:	f001 faba 	bl	8003898 <HAL_GPIO_WritePin>
 8002324:	2200      	movs	r2, #0
 8002326:	2108      	movs	r1, #8
 8002328:	481f      	ldr	r0, [pc, #124]	; (80023a8 <runBWTask+0xb0>)
 800232a:	f001 fab5 	bl	8003898 <HAL_GPIO_WritePin>
 800232e:	2201      	movs	r2, #1
 8002330:	2120      	movs	r1, #32
 8002332:	481d      	ldr	r0, [pc, #116]	; (80023a8 <runBWTask+0xb0>)
 8002334:	f001 fab0 	bl	8003898 <HAL_GPIO_WritePin>
 8002338:	2200      	movs	r2, #0
 800233a:	2110      	movs	r1, #16
 800233c:	481a      	ldr	r0, [pc, #104]	; (80023a8 <runBWTask+0xb0>)
 800233e:	f001 faab 	bl	8003898 <HAL_GPIO_WritePin>
      __RESET_SERVO_TURN(&htim1);
 8002342:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <runBWTask+0xb4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2291      	movs	r2, #145	; 0x91
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
 800234a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800234e:	f000 ff6f 	bl	8003230 <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <runBWTask+0xb4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002358:	230c      	movs	r3, #12
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2305      	movs	r3, #5
 800235e:	2132      	movs	r1, #50	; 0x32
 8002360:	2000      	movs	r0, #0
 8002362:	f008 f983 	bl	800a66c <OLED_ShowNumber>
      startTick = HAL_GetTick();
 8002366:	f000 ff57 	bl	8003218 <HAL_GetTick>
 800236a:	4603      	mov	r3, r0
 800236c:	b29a      	uxth	r2, r3
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <runBWTask+0xb8>)
 8002370:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 8002372:	e009      	b.n	8002388 <runBWTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <runBWTask+0xbc>)
 8002376:	881a      	ldrh	r2, [r3, #0]
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <runBWTask+0xc0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	635a      	str	r2, [r3, #52]	; 0x34
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <runBWTask+0xc4>)
 8002380:	881a      	ldrh	r2, [r3, #0]
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <runBWTask+0xc0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 8002388:	f000 ff46 	bl	8003218 <HAL_GetTick>
 800238c:	4603      	mov	r3, r0
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <runBWTask+0xb8>)
 8002390:	8812      	ldrh	r2, [r2, #0]
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <runBWTask+0xc8>)
 8002396:	8812      	ldrh	r2, [r2, #0]
 8002398:	4293      	cmp	r3, r2
 800239a:	d3eb      	bcc.n	8002374 <runBWTask+0x7c>
    if (curTask != TASK_MOVE_BACKWARD)
 800239c:	e7b0      	b.n	8002300 <runBWTask+0x8>
 800239e:	bf00      	nop
 80023a0:	20000138 	.word	0x20000138
 80023a4:	0800b318 	.word	0x0800b318
 80023a8:	40020000 	.word	0x40020000
 80023ac:	20000214 	.word	0x20000214
 80023b0:	20000420 	.word	0x20000420
 80023b4:	20000002 	.word	0x20000002
 80023b8:	200002a4 	.word	0x200002a4
 80023bc:	20000004 	.word	0x20000004
 80023c0:	20000142 	.word	0x20000142

080023c4 <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <runFLTask+0xa8>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d003      	beq.n	80023dc <runFLTask+0x18>
      osDelay(100);
 80023d4:	2064      	movs	r0, #100	; 0x64
 80023d6:	f005 fa45 	bl	8007864 <osDelay>
 80023da:	e7f7      	b.n	80023cc <runFLTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <runFLTask+0xac>)
 80023de:	211e      	movs	r1, #30
 80023e0:	2000      	movs	r0, #0
 80023e2:	f008 f9b1 	bl	800a748 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2104      	movs	r1, #4
 80023ea:	4822      	ldr	r0, [pc, #136]	; (8002474 <runFLTask+0xb0>)
 80023ec:	f001 fa54 	bl	8003898 <HAL_GPIO_WritePin>
 80023f0:	2201      	movs	r2, #1
 80023f2:	2108      	movs	r1, #8
 80023f4:	481f      	ldr	r0, [pc, #124]	; (8002474 <runFLTask+0xb0>)
 80023f6:	f001 fa4f 	bl	8003898 <HAL_GPIO_WritePin>
 80023fa:	2200      	movs	r2, #0
 80023fc:	2120      	movs	r1, #32
 80023fe:	481d      	ldr	r0, [pc, #116]	; (8002474 <runFLTask+0xb0>)
 8002400:	f001 fa4a 	bl	8003898 <HAL_GPIO_WritePin>
 8002404:	2201      	movs	r2, #1
 8002406:	2110      	movs	r1, #16
 8002408:	481a      	ldr	r0, [pc, #104]	; (8002474 <runFLTask+0xb0>)
 800240a:	f001 fa45 	bl	8003898 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 0);
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <runFLTask+0xb4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2269      	movs	r2, #105	; 0x69
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
 8002416:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800241a:	f000 ff09 	bl	8003230 <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <runFLTask+0xb4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002424:	230c      	movs	r3, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2305      	movs	r3, #5
 800242a:	2132      	movs	r1, #50	; 0x32
 800242c:	2000      	movs	r0, #0
 800242e:	f008 f91d 	bl	800a66c <OLED_ShowNumber>
      startTick = HAL_GetTick();
 8002432:	f000 fef1 	bl	8003218 <HAL_GetTick>
 8002436:	4603      	mov	r3, r0
 8002438:	b29a      	uxth	r2, r3
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <runFLTask+0xb8>)
 800243c:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 800243e:	e009      	b.n	8002454 <runFLTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <runFLTask+0xbc>)
 8002442:	881a      	ldrh	r2, [r3, #0]
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <runFLTask+0xc0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <runFLTask+0xc4>)
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <runFLTask+0xc0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 8002454:	f000 fee0 	bl	8003218 <HAL_GetTick>
 8002458:	4603      	mov	r3, r0
 800245a:	4a08      	ldr	r2, [pc, #32]	; (800247c <runFLTask+0xb8>)
 800245c:	8812      	ldrh	r2, [r2, #0]
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <runFLTask+0xc8>)
 8002462:	8812      	ldrh	r2, [r2, #0]
 8002464:	4293      	cmp	r3, r2
 8002466:	d3eb      	bcc.n	8002440 <runFLTask+0x7c>
    if (curTask != TASK_FL)
 8002468:	e7b0      	b.n	80023cc <runFLTask+0x8>
 800246a:	bf00      	nop
 800246c:	20000138 	.word	0x20000138
 8002470:	0800b318 	.word	0x0800b318
 8002474:	40020000 	.word	0x40020000
 8002478:	20000214 	.word	0x20000214
 800247c:	20000420 	.word	0x20000420
 8002480:	20000002 	.word	0x20000002
 8002484:	200002a4 	.word	0x200002a4
 8002488:	20000004 	.word	0x20000004
 800248c:	20000142 	.word	0x20000142

08002490 <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af02      	add	r7, sp, #8
 8002496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <runFRTask+0xa8>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d003      	beq.n	80024a8 <runFRTask+0x18>
      osDelay(100);
 80024a0:	2064      	movs	r0, #100	; 0x64
 80024a2:	f005 f9df 	bl	8007864 <osDelay>
 80024a6:	e7f7      	b.n	8002498 <runFRTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 80024a8:	4a24      	ldr	r2, [pc, #144]	; (800253c <runFRTask+0xac>)
 80024aa:	211e      	movs	r1, #30
 80024ac:	2000      	movs	r0, #0
 80024ae:	f008 f94b 	bl	800a748 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2104      	movs	r1, #4
 80024b6:	4822      	ldr	r0, [pc, #136]	; (8002540 <runFRTask+0xb0>)
 80024b8:	f001 f9ee 	bl	8003898 <HAL_GPIO_WritePin>
 80024bc:	2201      	movs	r2, #1
 80024be:	2108      	movs	r1, #8
 80024c0:	481f      	ldr	r0, [pc, #124]	; (8002540 <runFRTask+0xb0>)
 80024c2:	f001 f9e9 	bl	8003898 <HAL_GPIO_WritePin>
 80024c6:	2200      	movs	r2, #0
 80024c8:	2120      	movs	r1, #32
 80024ca:	481d      	ldr	r0, [pc, #116]	; (8002540 <runFRTask+0xb0>)
 80024cc:	f001 f9e4 	bl	8003898 <HAL_GPIO_WritePin>
 80024d0:	2201      	movs	r2, #1
 80024d2:	2110      	movs	r1, #16
 80024d4:	481a      	ldr	r0, [pc, #104]	; (8002540 <runFRTask+0xb0>)
 80024d6:	f001 f9df 	bl	8003898 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 1);
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <runFRTask+0xb4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	22d2      	movs	r2, #210	; 0xd2
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
 80024e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024e6:	f000 fea3 	bl	8003230 <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <runFRTask+0xb4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f0:	230c      	movs	r3, #12
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2305      	movs	r3, #5
 80024f6:	2132      	movs	r1, #50	; 0x32
 80024f8:	2000      	movs	r0, #0
 80024fa:	f008 f8b7 	bl	800a66c <OLED_ShowNumber>
      startTick = HAL_GetTick();
 80024fe:	f000 fe8b 	bl	8003218 <HAL_GetTick>
 8002502:	4603      	mov	r3, r0
 8002504:	b29a      	uxth	r2, r3
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <runFRTask+0xb8>)
 8002508:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 800250a:	e009      	b.n	8002520 <runFRTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <runFRTask+0xbc>)
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <runFRTask+0xc0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	635a      	str	r2, [r3, #52]	; 0x34
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <runFRTask+0xc4>)
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <runFRTask+0xc0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 8002520:	f000 fe7a 	bl	8003218 <HAL_GetTick>
 8002524:	4603      	mov	r3, r0
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <runFRTask+0xb8>)
 8002528:	8812      	ldrh	r2, [r2, #0]
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <runFRTask+0xc8>)
 800252e:	8812      	ldrh	r2, [r2, #0]
 8002530:	4293      	cmp	r3, r2
 8002532:	d3eb      	bcc.n	800250c <runFRTask+0x7c>
    if (curTask != TASK_FR)
 8002534:	e7b0      	b.n	8002498 <runFRTask+0x8>
 8002536:	bf00      	nop
 8002538:	20000138 	.word	0x20000138
 800253c:	0800b318 	.word	0x0800b318
 8002540:	40020000 	.word	0x40020000
 8002544:	20000214 	.word	0x20000214
 8002548:	20000420 	.word	0x20000420
 800254c:	20000002 	.word	0x20000002
 8002550:	200002a4 	.word	0x200002a4
 8002554:	20000004 	.word	0x20000004
 8002558:	20000142 	.word	0x20000142

0800255c <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <runBLTask+0xa8>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d003      	beq.n	8002574 <runBLTask+0x18>
      osDelay(100);
 800256c:	2064      	movs	r0, #100	; 0x64
 800256e:	f005 f979 	bl	8007864 <osDelay>
 8002572:	e7f7      	b.n	8002564 <runBLTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <runBLTask+0xac>)
 8002576:	211e      	movs	r1, #30
 8002578:	2000      	movs	r0, #0
 800257a:	f008 f8e5 	bl	800a748 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 800257e:	2201      	movs	r2, #1
 8002580:	2104      	movs	r1, #4
 8002582:	4822      	ldr	r0, [pc, #136]	; (800260c <runBLTask+0xb0>)
 8002584:	f001 f988 	bl	8003898 <HAL_GPIO_WritePin>
 8002588:	2200      	movs	r2, #0
 800258a:	2108      	movs	r1, #8
 800258c:	481f      	ldr	r0, [pc, #124]	; (800260c <runBLTask+0xb0>)
 800258e:	f001 f983 	bl	8003898 <HAL_GPIO_WritePin>
 8002592:	2201      	movs	r2, #1
 8002594:	2120      	movs	r1, #32
 8002596:	481d      	ldr	r0, [pc, #116]	; (800260c <runBLTask+0xb0>)
 8002598:	f001 f97e 	bl	8003898 <HAL_GPIO_WritePin>
 800259c:	2200      	movs	r2, #0
 800259e:	2110      	movs	r1, #16
 80025a0:	481a      	ldr	r0, [pc, #104]	; (800260c <runBLTask+0xb0>)
 80025a2:	f001 f979 	bl	8003898 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 0);
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <runBLTask+0xb4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2269      	movs	r2, #105	; 0x69
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
 80025ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025b2:	f000 fe3d 	bl	8003230 <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <runBLTask+0xb4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025bc:	230c      	movs	r3, #12
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2305      	movs	r3, #5
 80025c2:	2132      	movs	r1, #50	; 0x32
 80025c4:	2000      	movs	r0, #0
 80025c6:	f008 f851 	bl	800a66c <OLED_ShowNumber>
      startTick = HAL_GetTick();
 80025ca:	f000 fe25 	bl	8003218 <HAL_GetTick>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <runBLTask+0xb8>)
 80025d4:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 80025d6:	e009      	b.n	80025ec <runBLTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <runBLTask+0xbc>)
 80025da:	881a      	ldrh	r2, [r3, #0]
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <runBLTask+0xc0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <runBLTask+0xc4>)
 80025e4:	881a      	ldrh	r2, [r3, #0]
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <runBLTask+0xc0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 80025ec:	f000 fe14 	bl	8003218 <HAL_GetTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <runBLTask+0xb8>)
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <runBLTask+0xc8>)
 80025fa:	8812      	ldrh	r2, [r2, #0]
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d3eb      	bcc.n	80025d8 <runBLTask+0x7c>
    if (curTask != TASK_BL)
 8002600:	e7b0      	b.n	8002564 <runBLTask+0x8>
 8002602:	bf00      	nop
 8002604:	20000138 	.word	0x20000138
 8002608:	0800b318 	.word	0x0800b318
 800260c:	40020000 	.word	0x40020000
 8002610:	20000214 	.word	0x20000214
 8002614:	20000420 	.word	0x20000420
 8002618:	20000002 	.word	0x20000002
 800261c:	200002a4 	.word	0x200002a4
 8002620:	20000004 	.word	0x20000004
 8002624:	20000142 	.word	0x20000142

08002628 <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af02      	add	r7, sp, #8
 800262e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <runBRTask+0xa8>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b05      	cmp	r3, #5
 8002636:	d003      	beq.n	8002640 <runBRTask+0x18>
      osDelay(100);
 8002638:	2064      	movs	r0, #100	; 0x64
 800263a:	f005 f913 	bl	8007864 <osDelay>
 800263e:	e7f7      	b.n	8002630 <runBRTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 8002640:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <runBRTask+0xac>)
 8002642:	211e      	movs	r1, #30
 8002644:	2000      	movs	r0, #0
 8002646:	f008 f87f 	bl	800a748 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 800264a:	2201      	movs	r2, #1
 800264c:	2104      	movs	r1, #4
 800264e:	4822      	ldr	r0, [pc, #136]	; (80026d8 <runBRTask+0xb0>)
 8002650:	f001 f922 	bl	8003898 <HAL_GPIO_WritePin>
 8002654:	2200      	movs	r2, #0
 8002656:	2108      	movs	r1, #8
 8002658:	481f      	ldr	r0, [pc, #124]	; (80026d8 <runBRTask+0xb0>)
 800265a:	f001 f91d 	bl	8003898 <HAL_GPIO_WritePin>
 800265e:	2201      	movs	r2, #1
 8002660:	2120      	movs	r1, #32
 8002662:	481d      	ldr	r0, [pc, #116]	; (80026d8 <runBRTask+0xb0>)
 8002664:	f001 f918 	bl	8003898 <HAL_GPIO_WritePin>
 8002668:	2200      	movs	r2, #0
 800266a:	2110      	movs	r1, #16
 800266c:	481a      	ldr	r0, [pc, #104]	; (80026d8 <runBRTask+0xb0>)
 800266e:	f001 f913 	bl	8003898 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 1);
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <runBRTask+0xb4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	22d2      	movs	r2, #210	; 0xd2
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
 800267a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800267e:	f000 fdd7 	bl	8003230 <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <runBRTask+0xb4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002688:	230c      	movs	r3, #12
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2305      	movs	r3, #5
 800268e:	2132      	movs	r1, #50	; 0x32
 8002690:	2000      	movs	r0, #0
 8002692:	f007 ffeb 	bl	800a66c <OLED_ShowNumber>
      startTick = HAL_GetTick();
 8002696:	f000 fdbf 	bl	8003218 <HAL_GetTick>
 800269a:	4603      	mov	r3, r0
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <runBRTask+0xb8>)
 80026a0:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 80026a2:	e009      	b.n	80026b8 <runBRTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <runBRTask+0xbc>)
 80026a6:	881a      	ldrh	r2, [r3, #0]
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <runBRTask+0xc0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <runBRTask+0xc4>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <runBRTask+0xc0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 80026b8:	f000 fdae 	bl	8003218 <HAL_GetTick>
 80026bc:	4603      	mov	r3, r0
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <runBRTask+0xb8>)
 80026c0:	8812      	ldrh	r2, [r2, #0]
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <runBRTask+0xc8>)
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d3eb      	bcc.n	80026a4 <runBRTask+0x7c>
    if (curTask != TASK_BR)
 80026cc:	e7b0      	b.n	8002630 <runBRTask+0x8>
 80026ce:	bf00      	nop
 80026d0:	20000138 	.word	0x20000138
 80026d4:	0800b318 	.word	0x0800b318
 80026d8:	40020000 	.word	0x40020000
 80026dc:	20000214 	.word	0x20000214
 80026e0:	20000420 	.word	0x20000420
 80026e4:	20000002 	.word	0x20000002
 80026e8:	200002a4 	.word	0x200002a4
 80026ec:	20000004 	.word	0x20000004
 80026f0:	20000142 	.word	0x20000142

080026f4 <runADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f005 f8b1 	bl	8007864 <osDelay>
 8002702:	e7fb      	b.n	80026fc <runADCTask+0x8>

08002704 <runMoveDistTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistTask */
void runMoveDistTask(void *argument)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
    //     // else
    //     //   __READ_COMMAND(cQueue, curCmd, rxMsg);
    //   }

    //   osDelay(100);
    osDelay(1);
 800270c:	2001      	movs	r0, #1
 800270e:	f005 f8a9 	bl	8007864 <osDelay>
 8002712:	e7fb      	b.n	800270c <runMoveDistTask+0x8>

08002714 <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 800271c:	4bc6      	ldr	r3, [pc, #792]	; (8002a38 <runCmdTask+0x324>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	2b63      	cmp	r3, #99	; 0x63
 8002724:	f200 8257 	bhi.w	8002bd6 <runCmdTask+0x4c2>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <runCmdTask+0x1c>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	080028c1 	.word	0x080028c1
 8002734:	080028c1 	.word	0x080028c1
 8002738:	080028dd 	.word	0x080028dd
 800273c:	080028dd 	.word	0x080028dd
 8002740:	080028dd 	.word	0x080028dd
 8002744:	080028dd 	.word	0x080028dd
 8002748:	08002aad 	.word	0x08002aad
 800274c:	08002abb 	.word	0x08002abb
 8002750:	08002ac9 	.word	0x08002ac9
 8002754:	08002ad7 	.word	0x08002ad7
 8002758:	08002ae5 	.word	0x08002ae5
 800275c:	08002ae5 	.word	0x08002ae5
 8002760:	08002bd7 	.word	0x08002bd7
 8002764:	08002bd7 	.word	0x08002bd7
 8002768:	08002bd7 	.word	0x08002bd7
 800276c:	08002bd7 	.word	0x08002bd7
 8002770:	08002bd7 	.word	0x08002bd7
 8002774:	08002bd7 	.word	0x08002bd7
 8002778:	08002bd7 	.word	0x08002bd7
 800277c:	08002bd7 	.word	0x08002bd7
 8002780:	08002bd7 	.word	0x08002bd7
 8002784:	08002bd7 	.word	0x08002bd7
 8002788:	08002bd7 	.word	0x08002bd7
 800278c:	08002bd7 	.word	0x08002bd7
 8002790:	08002bd7 	.word	0x08002bd7
 8002794:	08002bd7 	.word	0x08002bd7
 8002798:	08002bd7 	.word	0x08002bd7
 800279c:	08002bd7 	.word	0x08002bd7
 80027a0:	08002bd7 	.word	0x08002bd7
 80027a4:	08002bd7 	.word	0x08002bd7
 80027a8:	08002bd7 	.word	0x08002bd7
 80027ac:	08002bd7 	.word	0x08002bd7
 80027b0:	08002bd7 	.word	0x08002bd7
 80027b4:	08002bd7 	.word	0x08002bd7
 80027b8:	08002bd7 	.word	0x08002bd7
 80027bc:	08002bd7 	.word	0x08002bd7
 80027c0:	08002bd7 	.word	0x08002bd7
 80027c4:	08002bd7 	.word	0x08002bd7
 80027c8:	08002bd7 	.word	0x08002bd7
 80027cc:	08002bd7 	.word	0x08002bd7
 80027d0:	08002bd7 	.word	0x08002bd7
 80027d4:	08002bd7 	.word	0x08002bd7
 80027d8:	08002bd7 	.word	0x08002bd7
 80027dc:	08002bd7 	.word	0x08002bd7
 80027e0:	08002bd7 	.word	0x08002bd7
 80027e4:	08002bd7 	.word	0x08002bd7
 80027e8:	08002bd7 	.word	0x08002bd7
 80027ec:	08002bd7 	.word	0x08002bd7
 80027f0:	08002bd7 	.word	0x08002bd7
 80027f4:	08002bd7 	.word	0x08002bd7
 80027f8:	08002bd7 	.word	0x08002bd7
 80027fc:	08002bd7 	.word	0x08002bd7
 8002800:	08002bd7 	.word	0x08002bd7
 8002804:	08002bd7 	.word	0x08002bd7
 8002808:	08002bd7 	.word	0x08002bd7
 800280c:	08002bd7 	.word	0x08002bd7
 8002810:	08002bd7 	.word	0x08002bd7
 8002814:	08002bd7 	.word	0x08002bd7
 8002818:	08002bd7 	.word	0x08002bd7
 800281c:	08002bd7 	.word	0x08002bd7
 8002820:	08002bd7 	.word	0x08002bd7
 8002824:	08002bd7 	.word	0x08002bd7
 8002828:	08002bd7 	.word	0x08002bd7
 800282c:	08002bd7 	.word	0x08002bd7
 8002830:	08002bd7 	.word	0x08002bd7
 8002834:	08002bd7 	.word	0x08002bd7
 8002838:	08002bd7 	.word	0x08002bd7
 800283c:	08002bd7 	.word	0x08002bd7
 8002840:	08002bd7 	.word	0x08002bd7
 8002844:	08002bd7 	.word	0x08002bd7
 8002848:	08002bd7 	.word	0x08002bd7
 800284c:	08002bd7 	.word	0x08002bd7
 8002850:	08002bd7 	.word	0x08002bd7
 8002854:	08002bd7 	.word	0x08002bd7
 8002858:	08002bd7 	.word	0x08002bd7
 800285c:	08002bd7 	.word	0x08002bd7
 8002860:	08002bd7 	.word	0x08002bd7
 8002864:	08002bd7 	.word	0x08002bd7
 8002868:	08002bd7 	.word	0x08002bd7
 800286c:	08002bd7 	.word	0x08002bd7
 8002870:	08002bd7 	.word	0x08002bd7
 8002874:	08002bd7 	.word	0x08002bd7
 8002878:	08002bd7 	.word	0x08002bd7
 800287c:	08002bd7 	.word	0x08002bd7
 8002880:	08002bd7 	.word	0x08002bd7
 8002884:	08002bd7 	.word	0x08002bd7
 8002888:	08002bd7 	.word	0x08002bd7
 800288c:	08002b2d 	.word	0x08002b2d
 8002890:	08002b2d 	.word	0x08002b2d
 8002894:	08002bd7 	.word	0x08002bd7
 8002898:	08002bd7 	.word	0x08002bd7
 800289c:	08002bd7 	.word	0x08002bd7
 80028a0:	08002bd7 	.word	0x08002bd7
 80028a4:	08002bd7 	.word	0x08002bd7
 80028a8:	08002bd7 	.word	0x08002bd7
 80028ac:	08002bd7 	.word	0x08002bd7
 80028b0:	08002bd7 	.word	0x08002bd7
 80028b4:	08002bd7 	.word	0x08002bd7
 80028b8:	08002bd7 	.word	0x08002bd7
 80028bc:	08002bd7 	.word	0x08002bd7
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
    case 2: // BW
      curTask = curCmd.index == 1 ? TASK_MOVE_FOREWARD : TASK_MOVE_BACKWARD;
 80028c0:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <runCmdTask+0x324>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <runCmdTask+0x328>)
 80028d2:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 80028d4:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <runCmdTask+0x324>)
 80028d6:	2263      	movs	r2, #99	; 0x63
 80028d8:	701a      	strb	r2, [r3, #0]
      break;
 80028da:	e17d      	b.n	8002bd8 <runCmdTask+0x4c4>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 80028dc:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <runCmdTask+0x324>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <runCmdTask+0x32c>)
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	4413      	add	r3, r2
 80028e6:	3304      	adds	r3, #4
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002a44 <runCmdTask+0x330>
 80028f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	dd01      	ble.n	80028fe <runCmdTask+0x1ea>
 80028fa:	23d2      	movs	r3, #210	; 0xd2
 80028fc:	e01c      	b.n	8002938 <runCmdTask+0x224>
 80028fe:	4b4e      	ldr	r3, [pc, #312]	; (8002a38 <runCmdTask+0x324>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4a4f      	ldr	r2, [pc, #316]	; (8002a40 <runCmdTask+0x32c>)
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	edd3 7a00 	vldr	s15, [r3]
 800290e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002a48 <runCmdTask+0x334>
 8002912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	d501      	bpl.n	8002920 <runCmdTask+0x20c>
 800291c:	2369      	movs	r3, #105	; 0x69
 800291e:	e00b      	b.n	8002938 <runCmdTask+0x224>
 8002920:	4b45      	ldr	r3, [pc, #276]	; (8002a38 <runCmdTask+0x324>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4a46      	ldr	r2, [pc, #280]	; (8002a40 <runCmdTask+0x32c>)
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	4413      	add	r3, r2
 800292a:	3304      	adds	r3, #4
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002934:	ee17 3a90 	vmov	r3, s15
 8002938:	4a44      	ldr	r2, [pc, #272]	; (8002a4c <runCmdTask+0x338>)
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002942:	f004 ff8f 	bl	8007864 <osDelay>
 8002946:	4b3c      	ldr	r3, [pc, #240]	; (8002a38 <runCmdTask+0x324>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	4a3d      	ldr	r2, [pc, #244]	; (8002a40 <runCmdTask+0x32c>)
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	4413      	add	r3, r2
 8002950:	3308      	adds	r3, #8
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3e      	ldr	r2, [pc, #248]	; (8002a50 <runCmdTask+0x33c>)
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <runCmdTask+0x324>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4a38      	ldr	r2, [pc, #224]	; (8002a40 <runCmdTask+0x32c>)
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4413      	add	r3, r2
 8002962:	330c      	adds	r3, #12
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	2104      	movs	r1, #4
 8002974:	4837      	ldr	r0, [pc, #220]	; (8002a54 <runCmdTask+0x340>)
 8002976:	f000 ff8f 	bl	8003898 <HAL_GPIO_WritePin>
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <runCmdTask+0x324>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <runCmdTask+0x32c>)
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4413      	add	r3, r2
 8002984:	330c      	adds	r3, #12
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	2108      	movs	r1, #8
 8002996:	482f      	ldr	r0, [pc, #188]	; (8002a54 <runCmdTask+0x340>)
 8002998:	f000 ff7e 	bl	8003898 <HAL_GPIO_WritePin>
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <runCmdTask+0x324>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4a27      	ldr	r2, [pc, #156]	; (8002a40 <runCmdTask+0x32c>)
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	4413      	add	r3, r2
 80029a6:	330c      	adds	r3, #12
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	2120      	movs	r1, #32
 80029b8:	4826      	ldr	r0, [pc, #152]	; (8002a54 <runCmdTask+0x340>)
 80029ba:	f000 ff6d 	bl	8003898 <HAL_GPIO_WritePin>
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <runCmdTask+0x324>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <runCmdTask+0x32c>)
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	4413      	add	r3, r2
 80029c8:	330c      	adds	r3, #12
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	2110      	movs	r1, #16
 80029da:	481e      	ldr	r0, [pc, #120]	; (8002a54 <runCmdTask+0x340>)
 80029dc:	f000 ff5c 	bl	8003898 <HAL_GPIO_WritePin>
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <runCmdTask+0x324>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <runCmdTask+0x32c>)
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	4413      	add	r3, r2
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <runCmdTask+0x344>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <runCmdTask+0x324>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <runCmdTask+0x32c>)
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	3302      	adds	r3, #2
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <runCmdTask+0x344>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <runCmdTask+0x348>)
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <runCmdTask+0x348>)
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d12e      	bne.n	8002a70 <runCmdTask+0x35c>
      {
        __CLEAR_CURCMD(curCmd);
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <runCmdTask+0x324>)
 8002a14:	2264      	movs	r2, #100	; 0x64
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <runCmdTask+0x324>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <runCmdTask+0x34c>)
 8002a20:	210f      	movs	r1, #15
 8002a22:	4810      	ldr	r0, [pc, #64]	; (8002a64 <runCmdTask+0x350>)
 8002a24:	f007 ff4e 	bl	800a8c4 <sniprintf>
 8002a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a2c:	2206      	movs	r2, #6
 8002a2e:	490e      	ldr	r1, [pc, #56]	; (8002a68 <runCmdTask+0x354>)
 8002a30:	480e      	ldr	r0, [pc, #56]	; (8002a6c <runCmdTask+0x358>)
 8002a32:	f003 fdcc 	bl	80065ce <HAL_UART_Transmit>
 8002a36:	e035      	b.n	8002aa4 <runCmdTask+0x390>
 8002a38:	2000039c 	.word	0x2000039c
 8002a3c:	20000138 	.word	0x20000138
 8002a40:	20000008 	.word	0x20000008
 8002a44:	43520000 	.word	0x43520000
 8002a48:	42d20000 	.word	0x42d20000
 8002a4c:	20000214 	.word	0x20000214
 8002a50:	200003c0 	.word	0x200003c0
 8002a54:	40020000 	.word	0x40020000
 8002a58:	200002a4 	.word	0x200002a4
 8002a5c:	20000368 	.word	0x20000368
 8002a60:	0800b31c 	.word	0x0800b31c
 8002a64:	200003a0 	.word	0x200003a0
 8002a68:	0800b324 	.word	0x0800b324
 8002a6c:	200002ec 	.word	0x200002ec
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8002a70:	4b5b      	ldr	r3, [pc, #364]	; (8002be0 <runCmdTask+0x4cc>)
 8002a72:	785b      	ldrb	r3, [r3, #1]
 8002a74:	4a5b      	ldr	r2, [pc, #364]	; (8002be4 <runCmdTask+0x4d0>)
 8002a76:	495a      	ldr	r1, [pc, #360]	; (8002be0 <runCmdTask+0x4cc>)
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b57      	ldr	r3, [pc, #348]	; (8002be0 <runCmdTask+0x4cc>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	3301      	adds	r3, #1
 8002a86:	4a56      	ldr	r2, [pc, #344]	; (8002be0 <runCmdTask+0x4cc>)
 8002a88:	7892      	ldrb	r2, [r2, #2]
 8002a8a:	fb93 f1f2 	sdiv	r1, r3, r2
 8002a8e:	fb01 f202 	mul.w	r2, r1, r2
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <runCmdTask+0x4cc>)
 8002a98:	705a      	strb	r2, [r3, #1]
 8002a9a:	4a53      	ldr	r2, [pc, #332]	; (8002be8 <runCmdTask+0x4d4>)
 8002a9c:	210f      	movs	r1, #15
 8002a9e:	4853      	ldr	r0, [pc, #332]	; (8002bec <runCmdTask+0x4d8>)
 8002aa0:	f007 ff10 	bl	800a8c4 <sniprintf>
      __PEND_CURCMD(curCmd);
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <runCmdTask+0x4d0>)
 8002aa6:	2263      	movs	r2, #99	; 0x63
 8002aa8:	701a      	strb	r2, [r3, #0]
      break;
 8002aaa:	e095      	b.n	8002bd8 <runCmdTask+0x4c4>
    case 7: // FL
      curTask = TASK_FL;
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <runCmdTask+0x4dc>)
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <runCmdTask+0x4d0>)
 8002ab4:	2263      	movs	r2, #99	; 0x63
 8002ab6:	701a      	strb	r2, [r3, #0]
      break;
 8002ab8:	e08e      	b.n	8002bd8 <runCmdTask+0x4c4>
    case 8: // FR
      curTask = TASK_FR;
 8002aba:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <runCmdTask+0x4dc>)
 8002abc:	2203      	movs	r2, #3
 8002abe:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8002ac0:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <runCmdTask+0x4d0>)
 8002ac2:	2263      	movs	r2, #99	; 0x63
 8002ac4:	701a      	strb	r2, [r3, #0]
      break;
 8002ac6:	e087      	b.n	8002bd8 <runCmdTask+0x4c4>
    case 9: // BL
      curTask = TASK_BL;
 8002ac8:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <runCmdTask+0x4dc>)
 8002aca:	2204      	movs	r2, #4
 8002acc:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8002ace:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <runCmdTask+0x4d0>)
 8002ad0:	2263      	movs	r2, #99	; 0x63
 8002ad2:	701a      	strb	r2, [r3, #0]
      break;
 8002ad4:	e080      	b.n	8002bd8 <runCmdTask+0x4c4>
    case 10: // BR
      curTask = TASK_BR;
 8002ad6:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <runCmdTask+0x4dc>)
 8002ad8:	2205      	movs	r2, #5
 8002ada:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <runCmdTask+0x4d0>)
 8002ade:	2263      	movs	r2, #99	; 0x63
 8002ae0:	701a      	strb	r2, [r3, #0]
      break;
 8002ae2:	e079      	b.n	8002bd8 <runCmdTask+0x4c4>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8002ae4:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <runCmdTask+0x4d0>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b0b      	cmp	r3, #11
 8002aea:	d004      	beq.n	8002af6 <runCmdTask+0x3e2>
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <runCmdTask+0x4e0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	22d2      	movs	r2, #210	; 0xd2
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
 8002af4:	e003      	b.n	8002afe <runCmdTask+0x3ea>
 8002af6:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <runCmdTask+0x4e0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2269      	movs	r2, #105	; 0x69
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
 8002afe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b02:	f000 fb95 	bl	8003230 <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <runCmdTask+0x4d0>)
 8002b08:	2264      	movs	r2, #100	; 0x64
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <runCmdTask+0x4d0>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8002b12:	4a39      	ldr	r2, [pc, #228]	; (8002bf8 <runCmdTask+0x4e4>)
 8002b14:	210f      	movs	r1, #15
 8002b16:	4835      	ldr	r0, [pc, #212]	; (8002bec <runCmdTask+0x4d8>)
 8002b18:	f007 fed4 	bl	800a8c4 <sniprintf>
 8002b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b20:	2206      	movs	r2, #6
 8002b22:	4936      	ldr	r1, [pc, #216]	; (8002bfc <runCmdTask+0x4e8>)
 8002b24:	4836      	ldr	r0, [pc, #216]	; (8002c00 <runCmdTask+0x4ec>)
 8002b26:	f003 fd52 	bl	80065ce <HAL_UART_Transmit>
      break;
 8002b2a:	e055      	b.n	8002bd8 <runCmdTask+0x4c4>
    //   curTask = TASK_FASTESTPATH_V2;
    //   __PEND_CURCMD(curCmd);
    //   break;
    case 88: // Axxx, rotate left by xxx degree
    case 89: // Cxxx, rotate right by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <runCmdTask+0x4d0>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b58      	cmp	r3, #88	; 0x58
 8002b32:	d004      	beq.n	8002b3e <runCmdTask+0x42a>
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <runCmdTask+0x4e0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	22d2      	movs	r2, #210	; 0xd2
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b3c:	e003      	b.n	8002b46 <runCmdTask+0x432>
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <runCmdTask+0x4e0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2269      	movs	r2, #105	; 0x69
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
 8002b46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b4a:	f000 fb71 	bl	8003230 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2104      	movs	r1, #4
 8002b52:	482c      	ldr	r0, [pc, #176]	; (8002c04 <runCmdTask+0x4f0>)
 8002b54:	f000 fea0 	bl	8003898 <HAL_GPIO_WritePin>
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	4829      	ldr	r0, [pc, #164]	; (8002c04 <runCmdTask+0x4f0>)
 8002b5e:	f000 fe9b 	bl	8003898 <HAL_GPIO_WritePin>
 8002b62:	2200      	movs	r2, #0
 8002b64:	2120      	movs	r1, #32
 8002b66:	4827      	ldr	r0, [pc, #156]	; (8002c04 <runCmdTask+0x4f0>)
 8002b68:	f000 fe96 	bl	8003898 <HAL_GPIO_WritePin>
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2110      	movs	r1, #16
 8002b70:	4824      	ldr	r0, [pc, #144]	; (8002c04 <runCmdTask+0x4f0>)
 8002b72:	f000 fe91 	bl	8003898 <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <runCmdTask+0x4d0>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b58      	cmp	r3, #88	; 0x58
 8002b7c:	d113      	bne.n	8002ba6 <runCmdTask+0x492>
      {
        targetAngle = curCmd.val;
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <runCmdTask+0x4d0>)
 8002b80:	885b      	ldrh	r3, [r3, #2]
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <runCmdTask+0x4f4>)
 8002b8c:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 800, 1200);
 8002b90:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <runCmdTask+0x4f8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <runCmdTask+0x4f8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ba4:	e013      	b.n	8002bce <runCmdTask+0x4ba>
      }
      else
      {
        targetAngle = -curCmd.val;
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <runCmdTask+0x4d0>)
 8002ba8:	885b      	ldrh	r3, [r3, #2]
 8002baa:	425b      	negs	r3, r3
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <runCmdTask+0x4f4>)
 8002bb6:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1200, 800);
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <runCmdTask+0x4f8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002bc2:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <runCmdTask+0x4f8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <runCmdTask+0x4d0>)
 8002bd0:	2263      	movs	r2, #99	; 0x63
 8002bd2:	701a      	strb	r2, [r3, #0]
      // RobotTurn(&targetAngle);
      break;
 8002bd4:	e000      	b.n	8002bd8 <runCmdTask+0x4c4>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8002bd6:	bf00      	nop
    }
    osDelay(1);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f004 fe43 	bl	8007864 <osDelay>
    switch (curCmd.index)
 8002bde:	e59d      	b.n	800271c <runCmdTask+0x8>
 8002be0:	20000368 	.word	0x20000368
 8002be4:	2000039c 	.word	0x2000039c
 8002be8:	0800b32c 	.word	0x0800b32c
 8002bec:	200003a0 	.word	0x200003a0
 8002bf0:	20000138 	.word	0x20000138
 8002bf4:	20000214 	.word	0x20000214
 8002bf8:	0800b31c 	.word	0x0800b31c
 8002bfc:	0800b324 	.word	0x0800b324
 8002c00:	200002ec 	.word	0x200002ec
 8002c04:	40020000 	.word	0x40020000
 8002c08:	200003c0 	.word	0x200003c0
 8002c0c:	200002a4 	.word	0x200002a4

08002c10 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002c22:	f000 fae5 	bl	80031f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40000800 	.word	0x40000800

08002c34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c38:	b672      	cpsid	i
}
 8002c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <Error_Handler+0x8>
	...

08002c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_MspInit+0x54>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_MspInit+0x54>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_MspInit+0x54>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_MspInit+0x54>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <HAL_MspInit+0x54>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <HAL_MspInit+0x54>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	210f      	movs	r1, #15
 8002c82:	f06f 0001 	mvn.w	r0, #1
 8002c86:	f000 fbaf 	bl	80033e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <HAL_I2C_MspInit+0x84>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d12c      	bne.n	8002d14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_I2C_MspInit+0x88>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <HAL_I2C_MspInit+0x88>)
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_I2C_MspInit+0x88>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cdc:	2312      	movs	r3, #18
 8002cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ce8:	2304      	movs	r3, #4
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480c      	ldr	r0, [pc, #48]	; (8002d24 <HAL_I2C_MspInit+0x8c>)
 8002cf4:	f000 fc34 	bl	8003560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_I2C_MspInit+0x88>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <HAL_I2C_MspInit+0x88>)
 8002d02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d06:	6413      	str	r3, [r2, #64]	; 0x40
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_I2C_MspInit+0x88>)
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d14:	bf00      	nop
 8002d16:	3728      	adds	r7, #40	; 0x28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40005400 	.word	0x40005400
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40020400 	.word	0x40020400

08002d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <HAL_TIM_Base_MspInit+0xac>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d66:	e030      	b.n	8002dca <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_TIM_Base_MspInit+0xb4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12b      	bne.n	8002dca <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4806      	ldr	r0, [pc, #24]	; (8002de0 <HAL_TIM_Base_MspInit+0xb8>)
 8002dc6:	f000 fbcb 	bl	8003560 <HAL_GPIO_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40010400 	.word	0x40010400
 8002de0:	40020800 	.word	0x40020800

08002de4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e04:	d14a      	bne.n	8002e9c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4619      	mov	r1, r3
 8002e76:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002e78:	f000 fb72 	bl	8003560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	4619      	mov	r1, r3
 8002e96:	4805      	ldr	r0, [pc, #20]	; (8002eac <HAL_TIM_Encoder_MspInit+0xc8>)
 8002e98:	f000 fb62 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e9c:	bf00      	nop
 8002e9e:	3728      	adds	r7, #40	; 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400

08002eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <HAL_TIM_MspPostInit+0x68>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d11e      	bne.n	8002f10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_TIM_MspPostInit+0x6c>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a10      	ldr	r2, [pc, #64]	; (8002f1c <HAL_TIM_MspPostInit+0x6c>)
 8002edc:	f043 0310 	orr.w	r3, r3, #16
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_TIM_MspPostInit+0x6c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002eee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ef2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <HAL_TIM_MspPostInit+0x70>)
 8002f0c:	f000 fb28 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f10:	bf00      	nop
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <HAL_UART_MspInit+0x94>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d134      	bne.n	8002fb0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <HAL_UART_MspInit+0x98>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a1b      	ldr	r2, [pc, #108]	; (8002fbc <HAL_UART_MspInit+0x98>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_UART_MspInit+0x98>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_UART_MspInit+0x98>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <HAL_UART_MspInit+0x98>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_UART_MspInit+0x98>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f90:	2307      	movs	r3, #7
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4809      	ldr	r0, [pc, #36]	; (8002fc0 <HAL_UART_MspInit+0x9c>)
 8002f9c:	f000 fae0 	bl	8003560 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	2027      	movs	r0, #39	; 0x27
 8002fa6:	f000 fa1f 	bl	80033e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002faa:	2027      	movs	r0, #39	; 0x27
 8002fac:	f000 fa38 	bl	8003420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002fb0:	bf00      	nop
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40004800 	.word	0x40004800
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020800 	.word	0x40020800

08002fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08c      	sub	sp, #48	; 0x30
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	201e      	movs	r0, #30
 8002fda:	f000 fa05 	bl	80033e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fde:	201e      	movs	r0, #30
 8002fe0:	f000 fa1e 	bl	8003420 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_InitTick+0xa0>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <HAL_InitTick+0xa0>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff4:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_InitTick+0xa0>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003000:	f107 0210 	add.w	r2, r7, #16
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f002 f89e 	bl	800514c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003010:	f002 f874 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8003014:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	4a13      	ldr	r2, [pc, #76]	; (8003068 <HAL_InitTick+0xa4>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	0c9b      	lsrs	r3, r3, #18
 8003020:	3b01      	subs	r3, #1
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_InitTick+0xa8>)
 8003026:	4a12      	ldr	r2, [pc, #72]	; (8003070 <HAL_InitTick+0xac>)
 8003028:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_InitTick+0xa8>)
 800302c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003030:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003032:	4a0e      	ldr	r2, [pc, #56]	; (800306c <HAL_InitTick+0xa8>)
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_InitTick+0xa8>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303e:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_InitTick+0xa8>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003044:	4809      	ldr	r0, [pc, #36]	; (800306c <HAL_InitTick+0xa8>)
 8003046:	f002 f8b3 	bl	80051b0 <HAL_TIM_Base_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003050:	4806      	ldr	r0, [pc, #24]	; (800306c <HAL_InitTick+0xa8>)
 8003052:	f002 f8fd 	bl	8005250 <HAL_TIM_Base_Start_IT>
 8003056:	4603      	mov	r3, r0
 8003058:	e000      	b.n	800305c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	3730      	adds	r7, #48	; 0x30
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	431bde83 	.word	0x431bde83
 800306c:	20000424 	.word	0x20000424
 8003070:	40000800 	.word	0x40000800

08003074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <NMI_Handler+0x4>

0800307a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307e:	e7fe      	b.n	800307e <HardFault_Handler+0x4>

08003080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <MemManage_Handler+0x4>

08003086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <BusFault_Handler+0x4>

0800308c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <UsageFault_Handler+0x4>

08003092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <TIM4_IRQHandler+0x10>)
 80030a6:	f002 fb99 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000424 	.word	0x20000424

080030b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <USART3_IRQHandler+0x10>)
 80030ba:	f003 fb4b 	bl	8006754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200002ec 	.word	0x200002ec

080030c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d0:	4a14      	ldr	r2, [pc, #80]	; (8003124 <_sbrk+0x5c>)
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <_sbrk+0x60>)
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <_sbrk+0x64>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <_sbrk+0x64>)
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <_sbrk+0x68>)
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <_sbrk+0x64>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d207      	bcs.n	8003108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f8:	f007 fc40 	bl	800a97c <__errno>
 80030fc:	4603      	mov	r3, r0
 80030fe:	220c      	movs	r2, #12
 8003100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003106:	e009      	b.n	800311c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <_sbrk+0x64>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <_sbrk+0x64>)
 8003118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20020000 	.word	0x20020000
 8003128:	00000400 	.word	0x00000400
 800312c:	2000046c 	.word	0x2000046c
 8003130:	20005310 	.word	0x20005310

08003134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <SystemInit+0x20>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	4a05      	ldr	r2, [pc, #20]	; (8003154 <SystemInit+0x20>)
 8003140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003190 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800315c:	480d      	ldr	r0, [pc, #52]	; (8003194 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800315e:	490e      	ldr	r1, [pc, #56]	; (8003198 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003160:	4a0e      	ldr	r2, [pc, #56]	; (800319c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003164:	e002      	b.n	800316c <LoopCopyDataInit>

08003166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800316a:	3304      	adds	r3, #4

0800316c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800316c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800316e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003170:	d3f9      	bcc.n	8003166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003172:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003174:	4c0b      	ldr	r4, [pc, #44]	; (80031a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003178:	e001      	b.n	800317e <LoopFillZerobss>

0800317a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800317a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800317c:	3204      	adds	r2, #4

0800317e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800317e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003180:	d3fb      	bcc.n	800317a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003182:	f7ff ffd7 	bl	8003134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003186:	f007 fbff 	bl	800a988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800318a:	f7fd feb5 	bl	8000ef8 <main>
  bx  lr    
 800318e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003198:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 800319c:	0800bf98 	.word	0x0800bf98
  ldr r2, =_sbss
 80031a0:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 80031a4:	2000530c 	.word	0x2000530c

080031a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a8:	e7fe      	b.n	80031a8 <ADC_IRQHandler>
	...

080031ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_Init+0x40>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <HAL_Init+0x40>)
 80031b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_Init+0x40>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_Init+0x40>)
 80031c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <HAL_Init+0x40>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <HAL_Init+0x40>)
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d4:	2003      	movs	r0, #3
 80031d6:	f000 f8fc 	bl	80033d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031da:	200f      	movs	r0, #15
 80031dc:	f7ff fef2 	bl	8002fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031e0:	f7ff fd2e 	bl	8002c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023c00 	.word	0x40023c00

080031f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_IncTick+0x20>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_IncTick+0x24>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	4a04      	ldr	r2, [pc, #16]	; (8003214 <HAL_IncTick+0x24>)
 8003202:	6013      	str	r3, [r2, #0]
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	2000014c 	.word	0x2000014c
 8003214:	20000470 	.word	0x20000470

08003218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return uwTick;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_GetTick+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000470 	.word	0x20000470

08003230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003238:	f7ff ffee 	bl	8003218 <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003248:	d005      	beq.n	8003256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_Delay+0x44>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003256:	bf00      	nop
 8003258:	f7ff ffde 	bl	8003218 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	429a      	cmp	r2, r3
 8003266:	d8f7      	bhi.n	8003258 <HAL_Delay+0x28>
  {
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	2000014c 	.word	0x2000014c

08003278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <__NVIC_SetPriorityGrouping+0x44>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003294:	4013      	ands	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032aa:	4a04      	ldr	r2, [pc, #16]	; (80032bc <__NVIC_SetPriorityGrouping+0x44>)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	60d3      	str	r3, [r2, #12]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <__NVIC_GetPriorityGrouping+0x18>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f003 0307 	and.w	r3, r3, #7
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	db0b      	blt.n	8003306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	f003 021f 	and.w	r2, r3, #31
 80032f4:	4907      	ldr	r1, [pc, #28]	; (8003314 <__NVIC_EnableIRQ+0x38>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2001      	movs	r0, #1
 80032fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000e100 	.word	0xe000e100

08003318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	2b00      	cmp	r3, #0
 800332a:	db0a      	blt.n	8003342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	490c      	ldr	r1, [pc, #48]	; (8003364 <__NVIC_SetPriority+0x4c>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	440b      	add	r3, r1
 800333c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003340:	e00a      	b.n	8003358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <__NVIC_SetPriority+0x50>)
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3b04      	subs	r3, #4
 8003350:	0112      	lsls	r2, r2, #4
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	440b      	add	r3, r1
 8003356:	761a      	strb	r2, [r3, #24]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000e100 	.word	0xe000e100
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f1c3 0307 	rsb	r3, r3, #7
 8003386:	2b04      	cmp	r3, #4
 8003388:	bf28      	it	cs
 800338a:	2304      	movcs	r3, #4
 800338c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3304      	adds	r3, #4
 8003392:	2b06      	cmp	r3, #6
 8003394:	d902      	bls.n	800339c <NVIC_EncodePriority+0x30>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3b03      	subs	r3, #3
 800339a:	e000      	b.n	800339e <NVIC_EncodePriority+0x32>
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	401a      	ands	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	43d9      	mvns	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	4313      	orrs	r3, r2
         );
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ff4c 	bl	8003278 <__NVIC_SetPriorityGrouping>
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033fa:	f7ff ff61 	bl	80032c0 <__NVIC_GetPriorityGrouping>
 80033fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	6978      	ldr	r0, [r7, #20]
 8003406:	f7ff ffb1 	bl	800336c <NVIC_EncodePriority>
 800340a:	4602      	mov	r2, r0
 800340c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff80 	bl	8003318 <__NVIC_SetPriority>
}
 8003418:	bf00      	nop
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff54 	bl	80032dc <__NVIC_EnableIRQ>
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800344a:	f7ff fee5 	bl	8003218 <HAL_GetTick>
 800344e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d008      	beq.n	800346e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e052      	b.n	8003514 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0216 	bic.w	r2, r2, #22
 800347c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_DMA_Abort+0x62>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0208 	bic.w	r2, r2, #8
 80034ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034be:	e013      	b.n	80034e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c0:	f7ff feaa 	bl	8003218 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d90c      	bls.n	80034e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2203      	movs	r2, #3
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e015      	b.n	8003514 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e4      	bne.n	80034c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	223f      	movs	r2, #63	; 0x3f
 80034fc:	409a      	lsls	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d004      	beq.n	800353a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e00c      	b.n	8003554 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2205      	movs	r2, #5
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	e16b      	b.n	8003854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800357c:	2201      	movs	r2, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	f040 815a 	bne.w	800384e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d005      	beq.n	80035b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d130      	bne.n	8003614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e8:	2201      	movs	r2, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 0201 	and.w	r2, r3, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d017      	beq.n	8003650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d123      	bne.n	80036a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	220f      	movs	r2, #15
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	08da      	lsrs	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3208      	adds	r2, #8
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	2203      	movs	r2, #3
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0203 	and.w	r2, r3, #3
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b4 	beq.w	800384e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b60      	ldr	r3, [pc, #384]	; (800386c <HAL_GPIO_Init+0x30c>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	4a5f      	ldr	r2, [pc, #380]	; (800386c <HAL_GPIO_Init+0x30c>)
 80036f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f4:	6453      	str	r3, [r2, #68]	; 0x44
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <HAL_GPIO_Init+0x30c>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003702:	4a5b      	ldr	r2, [pc, #364]	; (8003870 <HAL_GPIO_Init+0x310>)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	3302      	adds	r3, #2
 800370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	220f      	movs	r2, #15
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_GPIO_Init+0x314>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02b      	beq.n	8003786 <HAL_GPIO_Init+0x226>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a51      	ldr	r2, [pc, #324]	; (8003878 <HAL_GPIO_Init+0x318>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d025      	beq.n	8003782 <HAL_GPIO_Init+0x222>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a50      	ldr	r2, [pc, #320]	; (800387c <HAL_GPIO_Init+0x31c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01f      	beq.n	800377e <HAL_GPIO_Init+0x21e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4f      	ldr	r2, [pc, #316]	; (8003880 <HAL_GPIO_Init+0x320>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d019      	beq.n	800377a <HAL_GPIO_Init+0x21a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a4e      	ldr	r2, [pc, #312]	; (8003884 <HAL_GPIO_Init+0x324>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_GPIO_Init+0x216>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a4d      	ldr	r2, [pc, #308]	; (8003888 <HAL_GPIO_Init+0x328>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00d      	beq.n	8003772 <HAL_GPIO_Init+0x212>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a4c      	ldr	r2, [pc, #304]	; (800388c <HAL_GPIO_Init+0x32c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <HAL_GPIO_Init+0x20e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4b      	ldr	r2, [pc, #300]	; (8003890 <HAL_GPIO_Init+0x330>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_GPIO_Init+0x20a>
 8003766:	2307      	movs	r3, #7
 8003768:	e00e      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800376a:	2308      	movs	r3, #8
 800376c:	e00c      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800376e:	2306      	movs	r3, #6
 8003770:	e00a      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003772:	2305      	movs	r3, #5
 8003774:	e008      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003776:	2304      	movs	r3, #4
 8003778:	e006      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800377a:	2303      	movs	r3, #3
 800377c:	e004      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800377e:	2302      	movs	r3, #2
 8003780:	e002      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003786:	2300      	movs	r3, #0
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	f002 0203 	and.w	r2, r2, #3
 800378e:	0092      	lsls	r2, r2, #2
 8003790:	4093      	lsls	r3, r2
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003798:	4935      	ldr	r1, [pc, #212]	; (8003870 <HAL_GPIO_Init+0x310>)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	3302      	adds	r3, #2
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ca:	4a32      	ldr	r2, [pc, #200]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037d0:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037f4:	4a27      	ldr	r2, [pc, #156]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_GPIO_Init+0x334>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_GPIO_Init+0x334>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003848:	4a12      	ldr	r2, [pc, #72]	; (8003894 <HAL_GPIO_Init+0x334>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b0f      	cmp	r3, #15
 8003858:	f67f ae90 	bls.w	800357c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40013800 	.word	0x40013800
 8003874:	40020000 	.word	0x40020000
 8003878:	40020400 	.word	0x40020400
 800387c:	40020800 	.word	0x40020800
 8003880:	40020c00 	.word	0x40020c00
 8003884:	40021000 	.word	0x40021000
 8003888:	40021400 	.word	0x40021400
 800388c:	40021800 	.word	0x40021800
 8003890:	40021c00 	.word	0x40021c00
 8003894:	40013c00 	.word	0x40013c00

08003898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038b4:	e003      	b.n	80038be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	041a      	lsls	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	619a      	str	r2, [r3, #24]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e12b      	b.n	8003b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff f9d0 	bl	8002c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800391e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800392e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003930:	f001 fbe4 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 8003934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a81      	ldr	r2, [pc, #516]	; (8003b40 <HAL_I2C_Init+0x274>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d807      	bhi.n	8003950 <HAL_I2C_Init+0x84>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a80      	ldr	r2, [pc, #512]	; (8003b44 <HAL_I2C_Init+0x278>)
 8003944:	4293      	cmp	r3, r2
 8003946:	bf94      	ite	ls
 8003948:	2301      	movls	r3, #1
 800394a:	2300      	movhi	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e006      	b.n	800395e <HAL_I2C_Init+0x92>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a7d      	ldr	r2, [pc, #500]	; (8003b48 <HAL_I2C_Init+0x27c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	bf94      	ite	ls
 8003958:	2301      	movls	r3, #1
 800395a:	2300      	movhi	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0e7      	b.n	8003b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a78      	ldr	r2, [pc, #480]	; (8003b4c <HAL_I2C_Init+0x280>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0c9b      	lsrs	r3, r3, #18
 8003970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4a6a      	ldr	r2, [pc, #424]	; (8003b40 <HAL_I2C_Init+0x274>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d802      	bhi.n	80039a0 <HAL_I2C_Init+0xd4>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3301      	adds	r3, #1
 800399e:	e009      	b.n	80039b4 <HAL_I2C_Init+0xe8>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039a6:	fb02 f303 	mul.w	r3, r2, r3
 80039aa:	4a69      	ldr	r2, [pc, #420]	; (8003b50 <HAL_I2C_Init+0x284>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	3301      	adds	r3, #1
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	495c      	ldr	r1, [pc, #368]	; (8003b40 <HAL_I2C_Init+0x274>)
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d819      	bhi.n	8003a08 <HAL_I2C_Init+0x13c>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e59      	subs	r1, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e2:	1c59      	adds	r1, r3, #1
 80039e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039e8:	400b      	ands	r3, r1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_I2C_Init+0x138>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e59      	subs	r1, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	e051      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a04:	2304      	movs	r3, #4
 8003a06:	e04f      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d111      	bne.n	8003a34 <HAL_I2C_Init+0x168>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e58      	subs	r0, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e012      	b.n	8003a5a <HAL_I2C_Init+0x18e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e58      	subs	r0, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	0099      	lsls	r1, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Init+0x196>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e022      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10e      	bne.n	8003a88 <HAL_I2C_Init+0x1bc>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1e58      	subs	r0, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	440b      	add	r3, r1
 8003a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a86:	e00f      	b.n	8003aa8 <HAL_I2C_Init+0x1dc>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1e58      	subs	r0, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	0099      	lsls	r1, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	6809      	ldr	r1, [r1, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6911      	ldr	r1, [r2, #16]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68d2      	ldr	r2, [r2, #12]
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	000186a0 	.word	0x000186a0
 8003b44:	001e847f 	.word	0x001e847f
 8003b48:	003d08ff 	.word	0x003d08ff
 8003b4c:	431bde83 	.word	0x431bde83
 8003b50:	10624dd3 	.word	0x10624dd3

08003b54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	817b      	strh	r3, [r7, #10]
 8003b66:	460b      	mov	r3, r1
 8003b68:	813b      	strh	r3, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b6e:	f7ff fb53 	bl	8003218 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	f040 80d9 	bne.w	8003d34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2319      	movs	r3, #25
 8003b88:	2201      	movs	r2, #1
 8003b8a:	496d      	ldr	r1, [pc, #436]	; (8003d40 <HAL_I2C_Mem_Write+0x1ec>)
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fc7f 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0cc      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_I2C_Mem_Write+0x56>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e0c5      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d007      	beq.n	8003bd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2221      	movs	r2, #33	; 0x21
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2240      	movs	r2, #64	; 0x40
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a4d      	ldr	r2, [pc, #308]	; (8003d44 <HAL_I2C_Mem_Write+0x1f0>)
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c12:	88f8      	ldrh	r0, [r7, #6]
 8003c14:	893a      	ldrh	r2, [r7, #8]
 8003c16:	8979      	ldrh	r1, [r7, #10]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	4603      	mov	r3, r0
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fab6 	bl	8004194 <I2C_RequestMemoryWrite>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d052      	beq.n	8003cd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e081      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fd00 	bl	800463c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d107      	bne.n	8003c5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e06b      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_I2C_Mem_Write+0x180>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d017      	beq.n	8003cd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1aa      	bne.n	8003c32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fcec 	bl	80046be <I2C_WaitOnBTFFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d107      	bne.n	8003d04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e016      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	00100002 	.word	0x00100002
 8003d44:	ffff0000 	.word	0xffff0000

08003d48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08c      	sub	sp, #48	; 0x30
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	461a      	mov	r2, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	817b      	strh	r3, [r7, #10]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	813b      	strh	r3, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d62:	f7ff fa59 	bl	8003218 <HAL_GetTick>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	f040 8208 	bne.w	8004186 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	2319      	movs	r3, #25
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	497b      	ldr	r1, [pc, #492]	; (8003f6c <HAL_I2C_Mem_Read+0x224>)
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fb85 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e1fb      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_I2C_Mem_Read+0x56>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e1f4      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d007      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2222      	movs	r2, #34	; 0x22
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003df4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a5b      	ldr	r2, [pc, #364]	; (8003f70 <HAL_I2C_Mem_Read+0x228>)
 8003e04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e06:	88f8      	ldrh	r0, [r7, #6]
 8003e08:	893a      	ldrh	r2, [r7, #8]
 8003e0a:	8979      	ldrh	r1, [r7, #10]
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4603      	mov	r3, r0
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 fa52 	bl	80042c0 <I2C_RequestMemoryRead>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1b0      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d113      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e184      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d11b      	bne.n	8003e96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e164      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d11b      	bne.n	8003ed6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	e144      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003eec:	e138      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	f200 80f1 	bhi.w	80040da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d123      	bne.n	8003f48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fc1b 	bl	8004740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e139      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f46:	e10b      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d14e      	bne.n	8003fee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	2200      	movs	r2, #0
 8003f58:	4906      	ldr	r1, [pc, #24]	; (8003f74 <HAL_I2C_Mem_Read+0x22c>)
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa98 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e10e      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
 8003f6a:	bf00      	nop
 8003f6c:	00100002 	.word	0x00100002
 8003f70:	ffff0000 	.word	0xffff0000
 8003f74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fec:	e0b8      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4966      	ldr	r1, [pc, #408]	; (8004190 <HAL_I2C_Mem_Read+0x448>)
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fa49 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0bf      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2200      	movs	r2, #0
 8004052:	494f      	ldr	r1, [pc, #316]	; (8004190 <HAL_I2C_Mem_Read+0x448>)
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fa1b 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e091      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040d8:	e042      	b.n	8004160 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fb2e 	bl	8004740 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e04c      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b04      	cmp	r3, #4
 800412c:	d118      	bne.n	8004160 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f aec2 	bne.w	8003eee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	3728      	adds	r7, #40	; 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	00010004 	.word	0x00010004

08004194 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	4608      	mov	r0, r1
 800419e:	4611      	mov	r1, r2
 80041a0:	461a      	mov	r2, r3
 80041a2:	4603      	mov	r3, r0
 80041a4:	817b      	strh	r3, [r7, #10]
 80041a6:	460b      	mov	r3, r1
 80041a8:	813b      	strh	r3, [r7, #8]
 80041aa:	4613      	mov	r3, r2
 80041ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f960 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e4:	d103      	bne.n	80041ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e05f      	b.n	80042b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041f2:	897b      	ldrh	r3, [r7, #10]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004200:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	492d      	ldr	r1, [pc, #180]	; (80042bc <I2C_RequestMemoryWrite+0x128>)
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f998 	bl	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e04c      	b.n	80042b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	6a39      	ldr	r1, [r7, #32]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fa02 	bl	800463c <I2C_WaitOnTXEFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	2b04      	cmp	r3, #4
 8004244:	d107      	bne.n	8004256 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004254:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e02b      	b.n	80042b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d105      	bne.n	800426c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004260:	893b      	ldrh	r3, [r7, #8]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	611a      	str	r2, [r3, #16]
 800426a:	e021      	b.n	80042b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800426c:	893b      	ldrh	r3, [r7, #8]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	b29b      	uxth	r3, r3
 8004272:	b2da      	uxtb	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	6a39      	ldr	r1, [r7, #32]
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f9dc 	bl	800463c <I2C_WaitOnTXEFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00d      	beq.n	80042a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b04      	cmp	r3, #4
 8004290:	d107      	bne.n	80042a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e005      	b.n	80042b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a6:	893b      	ldrh	r3, [r7, #8]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	00010002 	.word	0x00010002

080042c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	4608      	mov	r0, r1
 80042ca:	4611      	mov	r1, r2
 80042cc:	461a      	mov	r2, r3
 80042ce:	4603      	mov	r3, r0
 80042d0:	817b      	strh	r3, [r7, #10]
 80042d2:	460b      	mov	r3, r1
 80042d4:	813b      	strh	r3, [r7, #8]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	2200      	movs	r2, #0
 8004302:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f8c2 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004320:	d103      	bne.n	800432a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004328:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e0aa      	b.n	8004484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800432e:	897b      	ldrh	r3, [r7, #10]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800433c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	4952      	ldr	r1, [pc, #328]	; (800448c <I2C_RequestMemoryRead+0x1cc>)
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f8fa 	bl	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e097      	b.n	8004484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	6a39      	ldr	r1, [r7, #32]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f964 	bl	800463c <I2C_WaitOnTXEFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b04      	cmp	r3, #4
 8004380:	d107      	bne.n	8004392 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004390:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e076      	b.n	8004484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800439c:	893b      	ldrh	r3, [r7, #8]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	611a      	str	r2, [r3, #16]
 80043a6:	e021      	b.n	80043ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043a8:	893b      	ldrh	r3, [r7, #8]
 80043aa:	0a1b      	lsrs	r3, r3, #8
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	6a39      	ldr	r1, [r7, #32]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f93e 	bl	800463c <I2C_WaitOnTXEFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d107      	bne.n	80043de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e050      	b.n	8004484 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043e2:	893b      	ldrh	r3, [r7, #8]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ee:	6a39      	ldr	r1, [r7, #32]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f923 	bl	800463c <I2C_WaitOnTXEFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00d      	beq.n	8004418 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	2b04      	cmp	r3, #4
 8004402:	d107      	bne.n	8004414 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004412:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e035      	b.n	8004484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004426:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	2200      	movs	r2, #0
 8004430:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f82b 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d103      	bne.n	8004458 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e013      	b.n	8004484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800445c:	897b      	ldrh	r3, [r7, #10]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	4906      	ldr	r1, [pc, #24]	; (800448c <I2C_RequestMemoryRead+0x1cc>)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f863 	bl	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	00010002 	.word	0x00010002

08004490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a0:	e025      	b.n	80044ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a8:	d021      	beq.n	80044ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7fe feb5 	bl	8003218 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d116      	bne.n	80044ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e023      	b.n	8004536 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d10d      	bne.n	8004514 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	43da      	mvns	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4013      	ands	r3, r2
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf0c      	ite	eq
 800450a:	2301      	moveq	r3, #1
 800450c:	2300      	movne	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	e00c      	b.n	800452e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	43da      	mvns	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	429a      	cmp	r2, r3
 8004532:	d0b6      	beq.n	80044a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800454c:	e051      	b.n	80045f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455c:	d123      	bne.n	80045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004576:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f043 0204 	orr.w	r2, r3, #4
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e046      	b.n	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ac:	d021      	beq.n	80045f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7fe fe33 	bl	8003218 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d116      	bne.n	80045f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f043 0220 	orr.w	r2, r3, #32
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e020      	b.n	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d10c      	bne.n	8004616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	43da      	mvns	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4013      	ands	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf14      	ite	ne
 800460e:	2301      	movne	r3, #1
 8004610:	2300      	moveq	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	e00b      	b.n	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	43da      	mvns	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4013      	ands	r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	bf14      	ite	ne
 8004628:	2301      	movne	r3, #1
 800462a:	2300      	moveq	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d18d      	bne.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004648:	e02d      	b.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f8ce 	bl	80047ec <I2C_IsAcknowledgeFailed>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e02d      	b.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004660:	d021      	beq.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fe fdd9 	bl	8003218 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d116      	bne.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f043 0220 	orr.w	r2, r3, #32
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e007      	b.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b0:	2b80      	cmp	r3, #128	; 0x80
 80046b2:	d1ca      	bne.n	800464a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046ca:	e02d      	b.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f88d 	bl	80047ec <I2C_IsAcknowledgeFailed>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e02d      	b.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e2:	d021      	beq.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e4:	f7fe fd98 	bl	8003218 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d302      	bcc.n	80046fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d116      	bne.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e007      	b.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d1ca      	bne.n	80046cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800474c:	e042      	b.n	80047d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b10      	cmp	r3, #16
 800475a:	d119      	bne.n	8004790 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0210 	mvn.w	r2, #16
 8004764:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e029      	b.n	80047e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004790:	f7fe fd42 	bl	8003218 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	429a      	cmp	r2, r3
 800479e:	d302      	bcc.n	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d116      	bne.n	80047d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e007      	b.n	80047e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d1b5      	bne.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004802:	d11b      	bne.n	800483c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800480c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f043 0204 	orr.w	r2, r3, #4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_PWR_EnableBkUpAccess+0x20>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_PWR_EnableBkUpAccess+0x24>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800485e:	687b      	ldr	r3, [r7, #4]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	420e0020 	.word	0x420e0020
 8004870:	40007000 	.word	0x40007000

08004874 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_PWR_DisableBkUpAccess+0x20>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004886:	687b      	ldr	r3, [r7, #4]
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	420e0020 	.word	0x420e0020
 8004898:	40007000 	.word	0x40007000

0800489c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e267      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d075      	beq.n	80049a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ba:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d00c      	beq.n	80048e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c6:	4b85      	ldr	r3, [pc, #532]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d112      	bne.n	80048f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b82      	ldr	r3, [pc, #520]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048de:	d10b      	bne.n	80048f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	4b7e      	ldr	r3, [pc, #504]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05b      	beq.n	80049a4 <HAL_RCC_OscConfig+0x108>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d157      	bne.n	80049a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e242      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d106      	bne.n	8004910 <HAL_RCC_OscConfig+0x74>
 8004902:	4b76      	ldr	r3, [pc, #472]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a75      	ldr	r2, [pc, #468]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e01d      	b.n	800494c <HAL_RCC_OscConfig+0xb0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0x98>
 800491a:	4b70      	ldr	r3, [pc, #448]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a6f      	ldr	r2, [pc, #444]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b6d      	ldr	r3, [pc, #436]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6c      	ldr	r2, [pc, #432]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0xb0>
 8004934:	4b69      	ldr	r3, [pc, #420]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a68      	ldr	r2, [pc, #416]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4b66      	ldr	r3, [pc, #408]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a65      	ldr	r2, [pc, #404]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fe fc60 	bl	8003218 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800495c:	f7fe fc5c 	bl	8003218 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	; 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e207      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b5b      	ldr	r3, [pc, #364]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0xc0>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fe fc4c 	bl	8003218 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004984:	f7fe fc48 	bl	8003218 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e1f3      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	4b51      	ldr	r3, [pc, #324]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0xe8>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d063      	beq.n	8004a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049b2:	4b4a      	ldr	r3, [pc, #296]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049be:	4b47      	ldr	r3, [pc, #284]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d11c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ca:	4b44      	ldr	r3, [pc, #272]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d116      	bne.n	8004a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	4b41      	ldr	r3, [pc, #260]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_RCC_OscConfig+0x152>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e1c7      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b3b      	ldr	r3, [pc, #236]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4937      	ldr	r1, [pc, #220]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	e03a      	b.n	8004a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a0c:	4b34      	ldr	r3, [pc, #208]	; (8004ae0 <HAL_RCC_OscConfig+0x244>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fe fc01 	bl	8003218 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a1a:	f7fe fbfd 	bl	8003218 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e1a8      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a38:	4b28      	ldr	r3, [pc, #160]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4925      	ldr	r1, [pc, #148]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	600b      	str	r3, [r1, #0]
 8004a4c:	e015      	b.n	8004a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4e:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <HAL_RCC_OscConfig+0x244>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fe fbe0 	bl	8003218 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7fe fbdc 	bl	8003218 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e187      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d036      	beq.n	8004af4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <HAL_RCC_OscConfig+0x248>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a94:	f7fe fbc0 	bl	8003218 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9c:	f7fe fbbc 	bl	8003218 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e167      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCC_OscConfig+0x240>)
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x200>
 8004aba:	e01b      	b.n	8004af4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004abc:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_OscConfig+0x248>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac2:	f7fe fba9 	bl	8003218 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	e00e      	b.n	8004ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aca:	f7fe fba5 	bl	8003218 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d907      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e150      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	42470000 	.word	0x42470000
 8004ae4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae8:	4b88      	ldr	r3, [pc, #544]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ea      	bne.n	8004aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8097 	beq.w	8004c30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b06:	4b81      	ldr	r3, [pc, #516]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	4b7d      	ldr	r3, [pc, #500]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	4a7c      	ldr	r2, [pc, #496]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b20:	6413      	str	r3, [r2, #64]	; 0x40
 8004b22:	4b7a      	ldr	r3, [pc, #488]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b32:	4b77      	ldr	r3, [pc, #476]	; (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d118      	bne.n	8004b70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b3e:	4b74      	ldr	r3, [pc, #464]	; (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a73      	ldr	r2, [pc, #460]	; (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4a:	f7fe fb65 	bl	8003218 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b52:	f7fe fb61 	bl	8003218 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e10c      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <HAL_RCC_OscConfig+0x474>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x2ea>
 8004b78:	4b64      	ldr	r3, [pc, #400]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	4a63      	ldr	r2, [pc, #396]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6713      	str	r3, [r2, #112]	; 0x70
 8004b84:	e01c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x324>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x30c>
 8004b8e:	4b5f      	ldr	r3, [pc, #380]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	4a5e      	ldr	r2, [pc, #376]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b94:	f043 0304 	orr.w	r3, r3, #4
 8004b98:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9a:	4b5c      	ldr	r3, [pc, #368]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	4a5b      	ldr	r2, [pc, #364]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x324>
 8004ba8:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a57      	ldr	r2, [pc, #348]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	4b55      	ldr	r3, [pc, #340]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a54      	ldr	r2, [pc, #336]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004bba:	f023 0304 	bic.w	r3, r3, #4
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d015      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fe fb26 	bl	8003218 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd0:	f7fe fb22 	bl	8003218 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e0cb      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	4b49      	ldr	r3, [pc, #292]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0ee      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x334>
 8004bf2:	e014      	b.n	8004c1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf4:	f7fe fb10 	bl	8003218 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fe fb0c 	bl	8003218 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0b5      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c12:	4b3e      	ldr	r3, [pc, #248]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1ee      	bne.n	8004bfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d105      	bne.n	8004c30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c24:	4b39      	ldr	r3, [pc, #228]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	4a38      	ldr	r2, [pc, #224]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80a1 	beq.w	8004d7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c3a:	4b34      	ldr	r3, [pc, #208]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d05c      	beq.n	8004d00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d141      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4e:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_RCC_OscConfig+0x478>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c54:	f7fe fae0 	bl	8003218 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fe fadc 	bl	8003218 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e087      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	019b      	lsls	r3, r3, #6
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	3b01      	subs	r3, #1
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	491b      	ldr	r1, [pc, #108]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCC_OscConfig+0x478>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004caa:	f7fe fab5 	bl	8003218 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb2:	f7fe fab1 	bl	8003218 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e05c      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x416>
 8004cd0:	e054      	b.n	8004d7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <HAL_RCC_OscConfig+0x478>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd8:	f7fe fa9e 	bl	8003218 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fe fa9a 	bl	8003218 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e045      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCC_OscConfig+0x470>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x444>
 8004cfe:	e03d      	b.n	8004d7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e038      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40007000 	.word	0x40007000
 8004d14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <HAL_RCC_OscConfig+0x4ec>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d028      	beq.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d121      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d11a      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d48:	4013      	ands	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d111      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	3b01      	subs	r3, #1
 8004d62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800

08004d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0cc      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b68      	ldr	r3, [pc, #416]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d90c      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b63      	ldr	r3, [pc, #396]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b8      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de0:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a58      	ldr	r2, [pc, #352]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df8:	4b53      	ldr	r3, [pc, #332]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a52      	ldr	r2, [pc, #328]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e04:	4b50      	ldr	r3, [pc, #320]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	494d      	ldr	r1, [pc, #308]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d044      	beq.n	8004eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2a:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d119      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e06f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e067      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b37      	ldr	r3, [pc, #220]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4934      	ldr	r1, [pc, #208]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fe f9cc 	bl	8003218 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fe f9c8 	bl	8003218 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e04f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d20c      	bcs.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e032      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4916      	ldr	r1, [pc, #88]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	490e      	ldr	r1, [pc, #56]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f12:	f000 f821 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8004f16:	4602      	mov	r2, r0
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	490a      	ldr	r1, [pc, #40]	; (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004f24:	5ccb      	ldrb	r3, [r1, r3]
 8004f26:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe f846 	bl	8002fc4 <HAL_InitTick>

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023c00 	.word	0x40023c00
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	0800b4d8 	.word	0x0800b4d8
 8004f50:	20000144 	.word	0x20000144
 8004f54:	20000148 	.word	0x20000148

08004f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f5c:	b090      	sub	sp, #64	; 0x40
 8004f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
 8004f64:	2300      	movs	r3, #0
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f68:	2300      	movs	r3, #0
 8004f6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f70:	4b59      	ldr	r3, [pc, #356]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 030c 	and.w	r3, r3, #12
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d00d      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x40>
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	f200 80a1 	bhi.w	80050c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x34>
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d003      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f8a:	e09b      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f8c:	4b53      	ldr	r3, [pc, #332]	; (80050dc <HAL_RCC_GetSysClockFreq+0x184>)
 8004f8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f90:	e09b      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f92:	4b53      	ldr	r3, [pc, #332]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f96:	e098      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f98:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa2:	4b4d      	ldr	r3, [pc, #308]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d028      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fae:	4b4a      	ldr	r3, [pc, #296]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	099b      	lsrs	r3, r3, #6
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	623b      	str	r3, [r7, #32]
 8004fb8:	627a      	str	r2, [r7, #36]	; 0x24
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4b47      	ldr	r3, [pc, #284]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fc4:	fb03 f201 	mul.w	r2, r3, r1
 8004fc8:	2300      	movs	r3, #0
 8004fca:	fb00 f303 	mul.w	r3, r0, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	4a43      	ldr	r2, [pc, #268]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fd2:	fba0 1202 	umull	r1, r2, r0, r2
 8004fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd8:	460a      	mov	r2, r1
 8004fda:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fde:	4413      	add	r3, r2
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	61fa      	str	r2, [r7, #28]
 8004fea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ff2:	f7fb fe03 	bl	8000bfc <__aeabi_uldivmod>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffe:	e053      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005000:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	099b      	lsrs	r3, r3, #6
 8005006:	2200      	movs	r2, #0
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	617a      	str	r2, [r7, #20]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005012:	f04f 0b00 	mov.w	fp, #0
 8005016:	4652      	mov	r2, sl
 8005018:	465b      	mov	r3, fp
 800501a:	f04f 0000 	mov.w	r0, #0
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	0159      	lsls	r1, r3, #5
 8005024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005028:	0150      	lsls	r0, r2, #5
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	ebb2 080a 	subs.w	r8, r2, sl
 8005032:	eb63 090b 	sbc.w	r9, r3, fp
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005042:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005046:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800504a:	ebb2 0408 	subs.w	r4, r2, r8
 800504e:	eb63 0509 	sbc.w	r5, r3, r9
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	00eb      	lsls	r3, r5, #3
 800505c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005060:	00e2      	lsls	r2, r4, #3
 8005062:	4614      	mov	r4, r2
 8005064:	461d      	mov	r5, r3
 8005066:	eb14 030a 	adds.w	r3, r4, sl
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	eb45 030b 	adc.w	r3, r5, fp
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800507e:	4629      	mov	r1, r5
 8005080:	028b      	lsls	r3, r1, #10
 8005082:	4621      	mov	r1, r4
 8005084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005088:	4621      	mov	r1, r4
 800508a:	028a      	lsls	r2, r1, #10
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005092:	2200      	movs	r2, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	60fa      	str	r2, [r7, #12]
 8005098:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800509c:	f7fb fdae 	bl	8000bfc <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4613      	mov	r3, r2
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	3301      	adds	r3, #1
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80050b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050c2:	e002      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCC_GetSysClockFreq+0x184>)
 80050c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3740      	adds	r7, #64	; 0x40
 80050d0:	46bd      	mov	sp, r7
 80050d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800
 80050dc:	00f42400 	.word	0x00f42400
 80050e0:	017d7840 	.word	0x017d7840

080050e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000144 	.word	0x20000144

080050fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005100:	f7ff fff0 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0a9b      	lsrs	r3, r3, #10
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4903      	ldr	r1, [pc, #12]	; (8005120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005118:	4618      	mov	r0, r3
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40023800 	.word	0x40023800
 8005120:	0800b4e8 	.word	0x0800b4e8

08005124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005128:	f7ff ffdc 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 800512c:	4602      	mov	r2, r0
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	0b5b      	lsrs	r3, r3, #13
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	4903      	ldr	r1, [pc, #12]	; (8005148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800513a:	5ccb      	ldrb	r3, [r1, r3]
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40023800 	.word	0x40023800
 8005148:	0800b4e8 	.word	0x0800b4e8

0800514c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	220f      	movs	r2, #15
 800515a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_RCC_GetClockConfig+0x5c>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0203 	and.w	r2, r3, #3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <HAL_RCC_GetClockConfig+0x5c>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	08db      	lsrs	r3, r3, #3
 8005186:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800518e:	4b07      	ldr	r3, [pc, #28]	; (80051ac <HAL_RCC_GetClockConfig+0x60>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0207 	and.w	r2, r3, #7
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	601a      	str	r2, [r3, #0]
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40023c00 	.word	0x40023c00

080051b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e041      	b.n	8005246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fd fda6 	bl	8002d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f000 fdae 	bl	8005d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d001      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e04e      	b.n	8005306 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a23      	ldr	r2, [pc, #140]	; (8005314 <HAL_TIM_Base_Start_IT+0xc4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d022      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d01d      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1f      	ldr	r2, [pc, #124]	; (8005318 <HAL_TIM_Base_Start_IT+0xc8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d018      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1e      	ldr	r2, [pc, #120]	; (800531c <HAL_TIM_Base_Start_IT+0xcc>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d013      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <HAL_TIM_Base_Start_IT+0xd0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00e      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <HAL_TIM_Base_Start_IT+0xd4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a19      	ldr	r2, [pc, #100]	; (8005328 <HAL_TIM_Base_Start_IT+0xd8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x80>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a18      	ldr	r2, [pc, #96]	; (800532c <HAL_TIM_Base_Start_IT+0xdc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d111      	bne.n	80052f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d010      	beq.n	8005304 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f2:	e007      	b.n	8005304 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40010000 	.word	0x40010000
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40010400 	.word	0x40010400
 8005328:	40014000 	.word	0x40014000
 800532c:	40001800 	.word	0x40001800

08005330 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e041      	b.n	80053c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f839 	bl	80053ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f000 fcee 	bl	8005d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d109      	bne.n	8005408 <HAL_TIM_PWM_Start+0x24>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	bf14      	ite	ne
 8005400:	2301      	movne	r3, #1
 8005402:	2300      	moveq	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e022      	b.n	800544e <HAL_TIM_PWM_Start+0x6a>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d109      	bne.n	8005422 <HAL_TIM_PWM_Start+0x3e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b01      	cmp	r3, #1
 8005418:	bf14      	ite	ne
 800541a:	2301      	movne	r3, #1
 800541c:	2300      	moveq	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	e015      	b.n	800544e <HAL_TIM_PWM_Start+0x6a>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d109      	bne.n	800543c <HAL_TIM_PWM_Start+0x58>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e008      	b.n	800544e <HAL_TIM_PWM_Start+0x6a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	bf14      	ite	ne
 8005448:	2301      	movne	r3, #1
 800544a:	2300      	moveq	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e07c      	b.n	8005550 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d104      	bne.n	8005466 <HAL_TIM_PWM_Start+0x82>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005464:	e013      	b.n	800548e <HAL_TIM_PWM_Start+0xaa>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b04      	cmp	r3, #4
 800546a:	d104      	bne.n	8005476 <HAL_TIM_PWM_Start+0x92>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005474:	e00b      	b.n	800548e <HAL_TIM_PWM_Start+0xaa>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d104      	bne.n	8005486 <HAL_TIM_PWM_Start+0xa2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005484:	e003      	b.n	800548e <HAL_TIM_PWM_Start+0xaa>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2201      	movs	r2, #1
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f000 ff44 	bl	8006324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2d      	ldr	r2, [pc, #180]	; (8005558 <HAL_TIM_PWM_Start+0x174>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIM_PWM_Start+0xcc>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2c      	ldr	r2, [pc, #176]	; (800555c <HAL_TIM_PWM_Start+0x178>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d101      	bne.n	80054b4 <HAL_TIM_PWM_Start+0xd0>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <HAL_TIM_PWM_Start+0xd2>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a22      	ldr	r2, [pc, #136]	; (8005558 <HAL_TIM_PWM_Start+0x174>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d022      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054dc:	d01d      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <HAL_TIM_PWM_Start+0x17c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d018      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <HAL_TIM_PWM_Start+0x180>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <HAL_TIM_PWM_Start+0x184>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00e      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_TIM_PWM_Start+0x178>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d009      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a18      	ldr	r2, [pc, #96]	; (800556c <HAL_TIM_PWM_Start+0x188>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d004      	beq.n	800551a <HAL_TIM_PWM_Start+0x136>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a16      	ldr	r2, [pc, #88]	; (8005570 <HAL_TIM_PWM_Start+0x18c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d111      	bne.n	800553e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b06      	cmp	r3, #6
 800552a:	d010      	beq.n	800554e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553c:	e007      	b.n	800554e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0201 	orr.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40014000 	.word	0x40014000
 8005570:	40001800 	.word	0x40001800

08005574 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e097      	b.n	80056b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d106      	bne.n	80055a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7fd fc21 	bl	8002de4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b8:	f023 0307 	bic.w	r3, r3, #7
 80055bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f000 fbc1 	bl	8005d50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	4313      	orrs	r3, r2
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005614:	f023 030c 	bic.w	r3, r3, #12
 8005618:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	4313      	orrs	r3, r2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	011a      	lsls	r2, r3, #4
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	031b      	lsls	r3, r3, #12
 8005644:	4313      	orrs	r3, r2
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	4313      	orrs	r3, r2
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d110      	bne.n	8005712 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d102      	bne.n	80056fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056f6:	7b7b      	ldrb	r3, [r7, #13]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d001      	beq.n	8005700 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e069      	b.n	80057d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005710:	e031      	b.n	8005776 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d110      	bne.n	800573a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d102      	bne.n	8005724 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800571e:	7b3b      	ldrb	r3, [r7, #12]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d001      	beq.n	8005728 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e055      	b.n	80057d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005738:	e01d      	b.n	8005776 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d108      	bne.n	8005752 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005740:	7bbb      	ldrb	r3, [r7, #14]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d105      	bne.n	8005752 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005746:	7b7b      	ldrb	r3, [r7, #13]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d102      	bne.n	8005752 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800574c:	7b3b      	ldrb	r3, [r7, #12]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d001      	beq.n	8005756 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e03e      	b.n	80057d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2202      	movs	r2, #2
 8005762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2202      	movs	r2, #2
 800576a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_TIM_Encoder_Start+0xc4>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b04      	cmp	r3, #4
 8005780:	d008      	beq.n	8005794 <HAL_TIM_Encoder_Start+0xd4>
 8005782:	e00f      	b.n	80057a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2201      	movs	r2, #1
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fdc9 	bl	8006324 <TIM_CCxChannelCmd>
      break;
 8005792:	e016      	b.n	80057c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2201      	movs	r2, #1
 800579a:	2104      	movs	r1, #4
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fdc1 	bl	8006324 <TIM_CCxChannelCmd>
      break;
 80057a2:	e00e      	b.n	80057c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2201      	movs	r2, #1
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fdb9 	bl	8006324 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2201      	movs	r2, #1
 80057b8:	2104      	movs	r1, #4
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fdb2 	bl	8006324 <TIM_CCxChannelCmd>
      break;
 80057c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d122      	bne.n	8005838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d11b      	bne.n	8005838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0202 	mvn.w	r2, #2
 8005808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa77 	bl	8005d12 <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fa69 	bl	8005cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fa7a 	bl	8005d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b04      	cmp	r3, #4
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b04      	cmp	r3, #4
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0204 	mvn.w	r2, #4
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa4d 	bl	8005d12 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa3f 	bl	8005cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fa50 	bl	8005d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b08      	cmp	r3, #8
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0208 	mvn.w	r2, #8
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2204      	movs	r2, #4
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fa23 	bl	8005d12 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa15 	bl	8005cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fa26 	bl	8005d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b10      	cmp	r3, #16
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0210 	mvn.w	r2, #16
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2208      	movs	r2, #8
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f9f9 	bl	8005d12 <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f9eb 	bl	8005cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f9fc 	bl	8005d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10e      	bne.n	8005960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0201 	mvn.w	r2, #1
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fd f958 	bl	8002c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d10e      	bne.n	800598c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d107      	bne.n	800598c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fdca 	bl	8006520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d10e      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d107      	bne.n	80059b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f9c1 	bl	8005d3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d10e      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d107      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0220 	mvn.w	r2, #32
 80059dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fd94 	bl	800650c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e0ae      	b.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	f200 809f 	bhi.w	8005b58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a1a:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a55 	.word	0x08005a55
 8005a24:	08005b59 	.word	0x08005b59
 8005a28:	08005b59 	.word	0x08005b59
 8005a2c:	08005b59 	.word	0x08005b59
 8005a30:	08005a95 	.word	0x08005a95
 8005a34:	08005b59 	.word	0x08005b59
 8005a38:	08005b59 	.word	0x08005b59
 8005a3c:	08005b59 	.word	0x08005b59
 8005a40:	08005ad7 	.word	0x08005ad7
 8005a44:	08005b59 	.word	0x08005b59
 8005a48:	08005b59 	.word	0x08005b59
 8005a4c:	08005b59 	.word	0x08005b59
 8005a50:	08005b17 	.word	0x08005b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fa18 	bl	8005e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0208 	orr.w	r2, r2, #8
 8005a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0204 	bic.w	r2, r2, #4
 8005a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6999      	ldr	r1, [r3, #24]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	619a      	str	r2, [r3, #24]
      break;
 8005a92:	e064      	b.n	8005b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fa68 	bl	8005f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6999      	ldr	r1, [r3, #24]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	021a      	lsls	r2, r3, #8
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	619a      	str	r2, [r3, #24]
      break;
 8005ad4:	e043      	b.n	8005b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fabd 	bl	800605c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0208 	orr.w	r2, r2, #8
 8005af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0204 	bic.w	r2, r2, #4
 8005b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69d9      	ldr	r1, [r3, #28]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	61da      	str	r2, [r3, #28]
      break;
 8005b14:	e023      	b.n	8005b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fb11 	bl	8006144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69d9      	ldr	r1, [r3, #28]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	021a      	lsls	r2, r3, #8
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	61da      	str	r2, [r3, #28]
      break;
 8005b56:	e002      	b.n	8005b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_TIM_ConfigClockSource+0x1c>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e0b4      	b.n	8005cf6 <HAL_TIM_ConfigClockSource+0x186>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc4:	d03e      	beq.n	8005c44 <HAL_TIM_ConfigClockSource+0xd4>
 8005bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bca:	f200 8087 	bhi.w	8005cdc <HAL_TIM_ConfigClockSource+0x16c>
 8005bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd2:	f000 8086 	beq.w	8005ce2 <HAL_TIM_ConfigClockSource+0x172>
 8005bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bda:	d87f      	bhi.n	8005cdc <HAL_TIM_ConfigClockSource+0x16c>
 8005bdc:	2b70      	cmp	r3, #112	; 0x70
 8005bde:	d01a      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0xa6>
 8005be0:	2b70      	cmp	r3, #112	; 0x70
 8005be2:	d87b      	bhi.n	8005cdc <HAL_TIM_ConfigClockSource+0x16c>
 8005be4:	2b60      	cmp	r3, #96	; 0x60
 8005be6:	d050      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0x11a>
 8005be8:	2b60      	cmp	r3, #96	; 0x60
 8005bea:	d877      	bhi.n	8005cdc <HAL_TIM_ConfigClockSource+0x16c>
 8005bec:	2b50      	cmp	r3, #80	; 0x50
 8005bee:	d03c      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0xfa>
 8005bf0:	2b50      	cmp	r3, #80	; 0x50
 8005bf2:	d873      	bhi.n	8005cdc <HAL_TIM_ConfigClockSource+0x16c>
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	d058      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0x13a>
 8005bf8:	2b40      	cmp	r3, #64	; 0x40
 8005bfa:	d86f      	bhi.n	8005cdc <HAL_TIM_ConfigClockSource+0x16c>
 8005bfc:	2b30      	cmp	r3, #48	; 0x30
 8005bfe:	d064      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x15a>
 8005c00:	2b30      	cmp	r3, #48	; 0x30
 8005c02:	d86b      	bhi.n	8005cdc <HAL_TIM_ConfigClockSource+0x16c>
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d060      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x15a>
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d867      	bhi.n	8005cdc <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d05c      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x15a>
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d05a      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0x15a>
 8005c14:	e062      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	6899      	ldr	r1, [r3, #8]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f000 fb5d 	bl	80062e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	609a      	str	r2, [r3, #8]
      break;
 8005c42:	e04f      	b.n	8005ce4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	6899      	ldr	r1, [r3, #8]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f000 fb46 	bl	80062e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c66:	609a      	str	r2, [r3, #8]
      break;
 8005c68:	e03c      	b.n	8005ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6859      	ldr	r1, [r3, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f000 faba 	bl	80061f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2150      	movs	r1, #80	; 0x50
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fb13 	bl	80062ae <TIM_ITRx_SetConfig>
      break;
 8005c88:	e02c      	b.n	8005ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6859      	ldr	r1, [r3, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f000 fad9 	bl	800624e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2160      	movs	r1, #96	; 0x60
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fb03 	bl	80062ae <TIM_ITRx_SetConfig>
      break;
 8005ca8:	e01c      	b.n	8005ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6859      	ldr	r1, [r3, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f000 fa9a 	bl	80061f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2140      	movs	r1, #64	; 0x40
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 faf3 	bl	80062ae <TIM_ITRx_SetConfig>
      break;
 8005cc8:	e00c      	b.n	8005ce4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f000 faea 	bl	80062ae <TIM_ITRx_SetConfig>
      break;
 8005cda:	e003      	b.n	8005ce4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce0:	e000      	b.n	8005ce4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a40      	ldr	r2, [pc, #256]	; (8005e64 <TIM_Base_SetConfig+0x114>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d013      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6e:	d00f      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a3d      	ldr	r2, [pc, #244]	; (8005e68 <TIM_Base_SetConfig+0x118>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a3c      	ldr	r2, [pc, #240]	; (8005e6c <TIM_Base_SetConfig+0x11c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d007      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a3b      	ldr	r2, [pc, #236]	; (8005e70 <TIM_Base_SetConfig+0x120>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a3a      	ldr	r2, [pc, #232]	; (8005e74 <TIM_Base_SetConfig+0x124>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d108      	bne.n	8005da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2f      	ldr	r2, [pc, #188]	; (8005e64 <TIM_Base_SetConfig+0x114>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d02b      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d027      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a2c      	ldr	r2, [pc, #176]	; (8005e68 <TIM_Base_SetConfig+0x118>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d023      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a2b      	ldr	r2, [pc, #172]	; (8005e6c <TIM_Base_SetConfig+0x11c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01f      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2a      	ldr	r2, [pc, #168]	; (8005e70 <TIM_Base_SetConfig+0x120>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d01b      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a29      	ldr	r2, [pc, #164]	; (8005e74 <TIM_Base_SetConfig+0x124>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d017      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a28      	ldr	r2, [pc, #160]	; (8005e78 <TIM_Base_SetConfig+0x128>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a27      	ldr	r2, [pc, #156]	; (8005e7c <TIM_Base_SetConfig+0x12c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00f      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a26      	ldr	r2, [pc, #152]	; (8005e80 <TIM_Base_SetConfig+0x130>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00b      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a25      	ldr	r2, [pc, #148]	; (8005e84 <TIM_Base_SetConfig+0x134>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a24      	ldr	r2, [pc, #144]	; (8005e88 <TIM_Base_SetConfig+0x138>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a23      	ldr	r2, [pc, #140]	; (8005e8c <TIM_Base_SetConfig+0x13c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d108      	bne.n	8005e14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a0a      	ldr	r2, [pc, #40]	; (8005e64 <TIM_Base_SetConfig+0x114>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_Base_SetConfig+0xf8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a0c      	ldr	r2, [pc, #48]	; (8005e74 <TIM_Base_SetConfig+0x124>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d103      	bne.n	8005e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	615a      	str	r2, [r3, #20]
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40010400 	.word	0x40010400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800
 8005e84:	40001800 	.word	0x40001800
 8005e88:	40001c00 	.word	0x40001c00
 8005e8c:	40002000 	.word	0x40002000

08005e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f023 0201 	bic.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 0302 	bic.w	r3, r3, #2
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a20      	ldr	r2, [pc, #128]	; (8005f68 <TIM_OC1_SetConfig+0xd8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_OC1_SetConfig+0x64>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <TIM_OC1_SetConfig+0xdc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d10c      	bne.n	8005f0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0308 	bic.w	r3, r3, #8
 8005efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 0304 	bic.w	r3, r3, #4
 8005f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a15      	ldr	r2, [pc, #84]	; (8005f68 <TIM_OC1_SetConfig+0xd8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_OC1_SetConfig+0x8e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a14      	ldr	r2, [pc, #80]	; (8005f6c <TIM_OC1_SetConfig+0xdc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d111      	bne.n	8005f42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	621a      	str	r2, [r3, #32]
}
 8005f5c:	bf00      	nop
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40010000 	.word	0x40010000
 8005f6c:	40010400 	.word	0x40010400

08005f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f023 0210 	bic.w	r2, r3, #16
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	021b      	lsls	r3, r3, #8
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f023 0320 	bic.w	r3, r3, #32
 8005fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a22      	ldr	r2, [pc, #136]	; (8006054 <TIM_OC2_SetConfig+0xe4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_OC2_SetConfig+0x68>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a21      	ldr	r2, [pc, #132]	; (8006058 <TIM_OC2_SetConfig+0xe8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d10d      	bne.n	8005ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a17      	ldr	r2, [pc, #92]	; (8006054 <TIM_OC2_SetConfig+0xe4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_OC2_SetConfig+0x94>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a16      	ldr	r2, [pc, #88]	; (8006058 <TIM_OC2_SetConfig+0xe8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d113      	bne.n	800602c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800600a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40010400 	.word	0x40010400

0800605c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a21      	ldr	r2, [pc, #132]	; (800613c <TIM_OC3_SetConfig+0xe0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d003      	beq.n	80060c2 <TIM_OC3_SetConfig+0x66>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a20      	ldr	r2, [pc, #128]	; (8006140 <TIM_OC3_SetConfig+0xe4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d10d      	bne.n	80060de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a16      	ldr	r2, [pc, #88]	; (800613c <TIM_OC3_SetConfig+0xe0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_OC3_SetConfig+0x92>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a15      	ldr	r2, [pc, #84]	; (8006140 <TIM_OC3_SetConfig+0xe4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d113      	bne.n	8006116 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	621a      	str	r2, [r3, #32]
}
 8006130:	bf00      	nop
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	40010000 	.word	0x40010000
 8006140:	40010400 	.word	0x40010400

08006144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800618e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	031b      	lsls	r3, r3, #12
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a12      	ldr	r2, [pc, #72]	; (80061e8 <TIM_OC4_SetConfig+0xa4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_OC4_SetConfig+0x68>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a11      	ldr	r2, [pc, #68]	; (80061ec <TIM_OC4_SetConfig+0xa8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d109      	bne.n	80061c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	019b      	lsls	r3, r3, #6
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40010000 	.word	0x40010000
 80061ec:	40010400 	.word	0x40010400

080061f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f023 0201 	bic.w	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800621a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f023 030a 	bic.w	r3, r3, #10
 800622c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	621a      	str	r2, [r3, #32]
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800624e:	b480      	push	{r7}
 8006250:	b087      	sub	sp, #28
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f023 0210 	bic.w	r2, r3, #16
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	031b      	lsls	r3, r3, #12
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800628a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f043 0307 	orr.w	r3, r3, #7
 80062d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	bf00      	nop
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	021a      	lsls	r2, r3, #8
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	431a      	orrs	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4313      	orrs	r3, r2
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	4313      	orrs	r3, r2
 8006310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	609a      	str	r2, [r3, #8]
}
 8006318:	bf00      	nop
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2201      	movs	r2, #1
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	43db      	mvns	r3, r3
 8006346:	401a      	ands	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a1a      	ldr	r2, [r3, #32]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	fa01 f303 	lsl.w	r3, r1, r3
 800635c:	431a      	orrs	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
	...

08006370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006384:	2302      	movs	r3, #2
 8006386:	e05a      	b.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a21      	ldr	r2, [pc, #132]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d022      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d4:	d01d      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1d      	ldr	r2, [pc, #116]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d018      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1b      	ldr	r2, [pc, #108]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d013      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1a      	ldr	r2, [pc, #104]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00e      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a18      	ldr	r2, [pc, #96]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a17      	ldr	r2, [pc, #92]	; (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d004      	beq.n	8006412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d10c      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	4313      	orrs	r3, r2
 8006422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40010000 	.word	0x40010000
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40000c00 	.word	0x40000c00
 800645c:	40010400 	.word	0x40010400
 8006460:	40014000 	.word	0x40014000
 8006464:	40001800 	.word	0x40001800

08006468 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006480:	2302      	movs	r3, #2
 8006482:	e03d      	b.n	8006500 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e03f      	b.n	80065c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fc fce2 	bl	8002f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2224      	movs	r2, #36	; 0x24
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fddf 	bl	800713c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800658c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800659c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b08a      	sub	sp, #40	; 0x28
 80065d2:	af02      	add	r7, sp, #8
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d17c      	bne.n	80066e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HAL_UART_Transmit+0x2c>
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e075      	b.n	80066ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_UART_Transmit+0x3e>
 8006608:	2302      	movs	r3, #2
 800660a:	e06e      	b.n	80066ea <HAL_UART_Transmit+0x11c>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2221      	movs	r2, #33	; 0x21
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006622:	f7fc fdf9 	bl	8003218 <HAL_GetTick>
 8006626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663c:	d108      	bne.n	8006650 <HAL_UART_Transmit+0x82>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d104      	bne.n	8006650 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e003      	b.n	8006658 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006654:	2300      	movs	r3, #0
 8006656:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006660:	e02a      	b.n	80066b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2200      	movs	r2, #0
 800666a:	2180      	movs	r1, #128	; 0x80
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 fb1f 	bl	8006cb0 <UART_WaitOnFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e036      	b.n	80066ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	3302      	adds	r3, #2
 8006696:	61bb      	str	r3, [r7, #24]
 8006698:	e007      	b.n	80066aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	3301      	adds	r3, #1
 80066a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1cf      	bne.n	8006662 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2140      	movs	r1, #64	; 0x40
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 faef 	bl	8006cb0 <UART_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e006      	b.n	80066ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e000      	b.n	80066ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066e8:	2302      	movs	r3, #2
  }
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	4613      	mov	r3, r2
 80066fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b20      	cmp	r3, #32
 800670a:	d11d      	bne.n	8006748 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_UART_Receive_IT+0x26>
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e016      	b.n	800674a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_UART_Receive_IT+0x38>
 8006726:	2302      	movs	r3, #2
 8006728:	e00f      	b.n	800674a <HAL_UART_Receive_IT+0x58>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	461a      	mov	r2, r3
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fb24 	bl	8006d8c <UART_Start_Receive_IT>
 8006744:	4603      	mov	r3, r0
 8006746:	e000      	b.n	800674a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006748:	2302      	movs	r3, #2
  }
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b0ba      	sub	sp, #232	; 0xe8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800677a:	2300      	movs	r3, #0
 800677c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006780:	2300      	movs	r3, #0
 8006782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10f      	bne.n	80067ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <HAL_UART_IRQHandler+0x66>
 80067a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fc07 	bl	8006fc6 <UART_Receive_IT>
      return;
 80067b8:	e256      	b.n	8006c68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 80de 	beq.w	8006980 <HAL_UART_IRQHandler+0x22c>
 80067c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80d1 	beq.w	8006980 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_UART_IRQHandler+0xae>
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f043 0201 	orr.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006806:	f003 0304 	and.w	r3, r3, #4
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <HAL_UART_IRQHandler+0xd2>
 800680e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	f043 0202 	orr.w	r2, r3, #2
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <HAL_UART_IRQHandler+0xf6>
 8006832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	f043 0204 	orr.w	r2, r3, #4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800684a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d011      	beq.n	800687a <HAL_UART_IRQHandler+0x126>
 8006856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d105      	bne.n	800686e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f043 0208 	orr.w	r2, r3, #8
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 81ed 	beq.w	8006c5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d008      	beq.n	80068a2 <HAL_UART_IRQHandler+0x14e>
 8006890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fb92 	bl	8006fc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d103      	bne.n	80068ce <HAL_UART_IRQHandler+0x17a>
 80068c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d04f      	beq.n	800696e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa9a 	bl	8006e08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	d141      	bne.n	8006966 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3314      	adds	r3, #20
 800690a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800690e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800691a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1d9      	bne.n	80068e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	2b00      	cmp	r3, #0
 8006934:	d013      	beq.n	800695e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	4a7d      	ldr	r2, [pc, #500]	; (8006b30 <HAL_UART_IRQHandler+0x3dc>)
 800693c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	4618      	mov	r0, r3
 8006944:	f7fc fdea 	bl	800351c <HAL_DMA_Abort_IT>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d016      	beq.n	800697c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	e00e      	b.n	800697c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f990 	bl	8006c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	e00a      	b.n	800697c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f98c 	bl	8006c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	e006      	b.n	800697c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f988 	bl	8006c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800697a:	e170      	b.n	8006c5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	bf00      	nop
    return;
 800697e:	e16e      	b.n	8006c5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	2b01      	cmp	r3, #1
 8006986:	f040 814a 	bne.w	8006c1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8143 	beq.w	8006c1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800699c:	f003 0310 	and.w	r3, r3, #16
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 813c 	beq.w	8006c1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069a6:	2300      	movs	r3, #0
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c6:	2b40      	cmp	r3, #64	; 0x40
 80069c8:	f040 80b4 	bne.w	8006b34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8140 	beq.w	8006c62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ea:	429a      	cmp	r2, r3
 80069ec:	f080 8139 	bcs.w	8006c62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a02:	f000 8088 	beq.w	8006b16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1d9      	bne.n	8006a06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3314      	adds	r3, #20
 8006a58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3314      	adds	r3, #20
 8006a72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e1      	bne.n	8006a52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3314      	adds	r3, #20
 8006a94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3314      	adds	r3, #20
 8006aae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ab2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ab4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ab8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e3      	bne.n	8006a8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006af8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006afa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006afe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e3      	bne.n	8006ad4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fc fc93 	bl	800343c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f8b6 	bl	8006c98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b2c:	e099      	b.n	8006c62 <HAL_UART_IRQHandler+0x50e>
 8006b2e:	bf00      	nop
 8006b30:	08006ecf 	.word	0x08006ecf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 808b 	beq.w	8006c66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8086 	beq.w	8006c66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	330c      	adds	r3, #12
 8006b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b7e:	647a      	str	r2, [r7, #68]	; 0x44
 8006b80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e3      	bne.n	8006b5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3314      	adds	r3, #20
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e3      	bne.n	8006b92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	330c      	adds	r3, #12
 8006bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0310 	bic.w	r3, r3, #16
 8006bee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	330c      	adds	r3, #12
 8006bf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bfc:	61fa      	str	r2, [r7, #28]
 8006bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	69b9      	ldr	r1, [r7, #24]
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	617b      	str	r3, [r7, #20]
   return(result);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e3      	bne.n	8006bd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f83e 	bl	8006c98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c1c:	e023      	b.n	8006c66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <HAL_UART_IRQHandler+0x4ea>
 8006c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f95d 	bl	8006ef6 <UART_Transmit_IT>
    return;
 8006c3c:	e014      	b.n	8006c68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00e      	beq.n	8006c68 <HAL_UART_IRQHandler+0x514>
 8006c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d008      	beq.n	8006c68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f99d 	bl	8006f96 <UART_EndTransmit_IT>
    return;
 8006c5c:	e004      	b.n	8006c68 <HAL_UART_IRQHandler+0x514>
    return;
 8006c5e:	bf00      	nop
 8006c60:	e002      	b.n	8006c68 <HAL_UART_IRQHandler+0x514>
      return;
 8006c62:	bf00      	nop
 8006c64:	e000      	b.n	8006c68 <HAL_UART_IRQHandler+0x514>
      return;
 8006c66:	bf00      	nop
  }
}
 8006c68:	37e8      	adds	r7, #232	; 0xe8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop

08006c70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b090      	sub	sp, #64	; 0x40
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc0:	e050      	b.n	8006d64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc8:	d04c      	beq.n	8006d64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cd0:	f7fc faa2 	bl	8003218 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d241      	bcs.n	8006d64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d00:	637a      	str	r2, [r7, #52]	; 0x34
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e5      	bne.n	8006ce0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	613b      	str	r3, [r7, #16]
   return(result);
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3314      	adds	r3, #20
 8006d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d34:	623a      	str	r2, [r7, #32]
 8006d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	69f9      	ldr	r1, [r7, #28]
 8006d3a:	6a3a      	ldr	r2, [r7, #32]
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e5      	bne.n	8006d14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e00f      	b.n	8006d84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	bf0c      	ite	eq
 8006d74:	2301      	moveq	r3, #1
 8006d76:	2300      	movne	r3, #0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d09f      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3740      	adds	r7, #64	; 0x40
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	88fa      	ldrh	r2, [r7, #6]
 8006da4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	88fa      	ldrh	r2, [r7, #6]
 8006daa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2222      	movs	r2, #34	; 0x22
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d007      	beq.n	8006dda <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dd8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0201 	orr.w	r2, r2, #1
 8006de8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0220 	orr.w	r2, r2, #32
 8006df8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b095      	sub	sp, #84	; 0x54
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e30:	643a      	str	r2, [r7, #64]	; 0x40
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e5      	bne.n	8006e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3314      	adds	r3, #20
 8006e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3314      	adds	r3, #20
 8006e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d119      	bne.n	8006eb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f023 0310 	bic.w	r3, r3, #16
 8006e96:	647b      	str	r3, [r7, #68]	; 0x44
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ea0:	61ba      	str	r2, [r7, #24]
 8006ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6979      	ldr	r1, [r7, #20]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	613b      	str	r3, [r7, #16]
   return(result);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e5      	bne.n	8006e80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ec2:	bf00      	nop
 8006ec4:	3754      	adds	r7, #84	; 0x54
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff fecb 	bl	8006c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b21      	cmp	r3, #33	; 0x21
 8006f08:	d13e      	bne.n	8006f88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f12:	d114      	bne.n	8006f3e <UART_Transmit_IT+0x48>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d110      	bne.n	8006f3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	1c9a      	adds	r2, r3, #2
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	621a      	str	r2, [r3, #32]
 8006f3c:	e008      	b.n	8006f50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	1c59      	adds	r1, r3, #1
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6211      	str	r1, [r2, #32]
 8006f48:	781a      	ldrb	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10f      	bne.n	8006f84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	e000      	b.n	8006f8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f88:	2302      	movs	r3, #2
  }
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff fe5a 	bl	8006c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b08c      	sub	sp, #48	; 0x30
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b22      	cmp	r3, #34	; 0x22
 8006fd8:	f040 80ab 	bne.w	8007132 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe4:	d117      	bne.n	8007016 <UART_Receive_IT+0x50>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d113      	bne.n	8007016 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007004:	b29a      	uxth	r2, r3
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	1c9a      	adds	r2, r3, #2
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	629a      	str	r2, [r3, #40]	; 0x28
 8007014:	e026      	b.n	8007064 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007028:	d007      	beq.n	800703a <UART_Receive_IT+0x74>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <UART_Receive_IT+0x82>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	b2da      	uxtb	r2, r3
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	e008      	b.n	800705a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007054:	b2da      	uxtb	r2, r3
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29b      	uxth	r3, r3
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4619      	mov	r1, r3
 8007072:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007074:	2b00      	cmp	r3, #0
 8007076:	d15a      	bne.n	800712e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0220 	bic.w	r2, r2, #32
 8007086:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	695a      	ldr	r2, [r3, #20]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d135      	bne.n	8007124 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	330c      	adds	r3, #12
 80070c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	613b      	str	r3, [r7, #16]
   return(result);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f023 0310 	bic.w	r3, r3, #16
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	330c      	adds	r3, #12
 80070dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070de:	623a      	str	r2, [r7, #32]
 80070e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	69f9      	ldr	r1, [r7, #28]
 80070e4:	6a3a      	ldr	r2, [r7, #32]
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e5      	bne.n	80070be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b10      	cmp	r3, #16
 80070fe:	d10a      	bne.n	8007116 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff fdbb 	bl	8006c98 <HAL_UARTEx_RxEventCallback>
 8007122:	e002      	b.n	800712a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fa fadf 	bl	80016e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	e002      	b.n	8007134 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	e000      	b.n	8007134 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007132:	2302      	movs	r3, #2
  }
}
 8007134:	4618      	mov	r0, r3
 8007136:	3730      	adds	r7, #48	; 0x30
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800713c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007140:	b0c0      	sub	sp, #256	; 0x100
 8007142:	af00      	add	r7, sp, #0
 8007144:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007158:	68d9      	ldr	r1, [r3, #12]
 800715a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	ea40 0301 	orr.w	r3, r0, r1
 8007164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	431a      	orrs	r2, r3
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	431a      	orrs	r2, r3
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007194:	f021 010c 	bic.w	r1, r1, #12
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071a2:	430b      	orrs	r3, r1
 80071a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b6:	6999      	ldr	r1, [r3, #24]
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	ea40 0301 	orr.w	r3, r0, r1
 80071c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4b8f      	ldr	r3, [pc, #572]	; (8007408 <UART_SetConfig+0x2cc>)
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d005      	beq.n	80071dc <UART_SetConfig+0xa0>
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	4b8d      	ldr	r3, [pc, #564]	; (800740c <UART_SetConfig+0x2d0>)
 80071d8:	429a      	cmp	r2, r3
 80071da:	d104      	bne.n	80071e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071dc:	f7fd ffa2 	bl	8005124 <HAL_RCC_GetPCLK2Freq>
 80071e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071e4:	e003      	b.n	80071ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071e6:	f7fd ff89 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 80071ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f8:	f040 810c 	bne.w	8007414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007200:	2200      	movs	r2, #0
 8007202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007206:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800720a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800720e:	4622      	mov	r2, r4
 8007210:	462b      	mov	r3, r5
 8007212:	1891      	adds	r1, r2, r2
 8007214:	65b9      	str	r1, [r7, #88]	; 0x58
 8007216:	415b      	adcs	r3, r3
 8007218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800721a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800721e:	4621      	mov	r1, r4
 8007220:	eb12 0801 	adds.w	r8, r2, r1
 8007224:	4629      	mov	r1, r5
 8007226:	eb43 0901 	adc.w	r9, r3, r1
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800723a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800723e:	4690      	mov	r8, r2
 8007240:	4699      	mov	r9, r3
 8007242:	4623      	mov	r3, r4
 8007244:	eb18 0303 	adds.w	r3, r8, r3
 8007248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800724c:	462b      	mov	r3, r5
 800724e:	eb49 0303 	adc.w	r3, r9, r3
 8007252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007262:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800726a:	460b      	mov	r3, r1
 800726c:	18db      	adds	r3, r3, r3
 800726e:	653b      	str	r3, [r7, #80]	; 0x50
 8007270:	4613      	mov	r3, r2
 8007272:	eb42 0303 	adc.w	r3, r2, r3
 8007276:	657b      	str	r3, [r7, #84]	; 0x54
 8007278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800727c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007280:	f7f9 fcbc 	bl	8000bfc <__aeabi_uldivmod>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4b61      	ldr	r3, [pc, #388]	; (8007410 <UART_SetConfig+0x2d4>)
 800728a:	fba3 2302 	umull	r2, r3, r3, r2
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	011c      	lsls	r4, r3, #4
 8007292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007296:	2200      	movs	r2, #0
 8007298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800729c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072a4:	4642      	mov	r2, r8
 80072a6:	464b      	mov	r3, r9
 80072a8:	1891      	adds	r1, r2, r2
 80072aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80072ac:	415b      	adcs	r3, r3
 80072ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072b4:	4641      	mov	r1, r8
 80072b6:	eb12 0a01 	adds.w	sl, r2, r1
 80072ba:	4649      	mov	r1, r9
 80072bc:	eb43 0b01 	adc.w	fp, r3, r1
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072d4:	4692      	mov	sl, r2
 80072d6:	469b      	mov	fp, r3
 80072d8:	4643      	mov	r3, r8
 80072da:	eb1a 0303 	adds.w	r3, sl, r3
 80072de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072e2:	464b      	mov	r3, r9
 80072e4:	eb4b 0303 	adc.w	r3, fp, r3
 80072e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007300:	460b      	mov	r3, r1
 8007302:	18db      	adds	r3, r3, r3
 8007304:	643b      	str	r3, [r7, #64]	; 0x40
 8007306:	4613      	mov	r3, r2
 8007308:	eb42 0303 	adc.w	r3, r2, r3
 800730c:	647b      	str	r3, [r7, #68]	; 0x44
 800730e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007316:	f7f9 fc71 	bl	8000bfc <__aeabi_uldivmod>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4611      	mov	r1, r2
 8007320:	4b3b      	ldr	r3, [pc, #236]	; (8007410 <UART_SetConfig+0x2d4>)
 8007322:	fba3 2301 	umull	r2, r3, r3, r1
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	2264      	movs	r2, #100	; 0x64
 800732a:	fb02 f303 	mul.w	r3, r2, r3
 800732e:	1acb      	subs	r3, r1, r3
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007336:	4b36      	ldr	r3, [pc, #216]	; (8007410 <UART_SetConfig+0x2d4>)
 8007338:	fba3 2302 	umull	r2, r3, r3, r2
 800733c:	095b      	lsrs	r3, r3, #5
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007344:	441c      	add	r4, r3
 8007346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800734a:	2200      	movs	r2, #0
 800734c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007350:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007358:	4642      	mov	r2, r8
 800735a:	464b      	mov	r3, r9
 800735c:	1891      	adds	r1, r2, r2
 800735e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007360:	415b      	adcs	r3, r3
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007368:	4641      	mov	r1, r8
 800736a:	1851      	adds	r1, r2, r1
 800736c:	6339      	str	r1, [r7, #48]	; 0x30
 800736e:	4649      	mov	r1, r9
 8007370:	414b      	adcs	r3, r1
 8007372:	637b      	str	r3, [r7, #52]	; 0x34
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007380:	4659      	mov	r1, fp
 8007382:	00cb      	lsls	r3, r1, #3
 8007384:	4651      	mov	r1, sl
 8007386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800738a:	4651      	mov	r1, sl
 800738c:	00ca      	lsls	r2, r1, #3
 800738e:	4610      	mov	r0, r2
 8007390:	4619      	mov	r1, r3
 8007392:	4603      	mov	r3, r0
 8007394:	4642      	mov	r2, r8
 8007396:	189b      	adds	r3, r3, r2
 8007398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800739c:	464b      	mov	r3, r9
 800739e:	460a      	mov	r2, r1
 80073a0:	eb42 0303 	adc.w	r3, r2, r3
 80073a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073bc:	460b      	mov	r3, r1
 80073be:	18db      	adds	r3, r3, r3
 80073c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073c2:	4613      	mov	r3, r2
 80073c4:	eb42 0303 	adc.w	r3, r2, r3
 80073c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073d2:	f7f9 fc13 	bl	8000bfc <__aeabi_uldivmod>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <UART_SetConfig+0x2d4>)
 80073dc:	fba3 1302 	umull	r1, r3, r3, r2
 80073e0:	095b      	lsrs	r3, r3, #5
 80073e2:	2164      	movs	r1, #100	; 0x64
 80073e4:	fb01 f303 	mul.w	r3, r1, r3
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	3332      	adds	r3, #50	; 0x32
 80073ee:	4a08      	ldr	r2, [pc, #32]	; (8007410 <UART_SetConfig+0x2d4>)
 80073f0:	fba2 2303 	umull	r2, r3, r2, r3
 80073f4:	095b      	lsrs	r3, r3, #5
 80073f6:	f003 0207 	and.w	r2, r3, #7
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4422      	add	r2, r4
 8007402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007404:	e106      	b.n	8007614 <UART_SetConfig+0x4d8>
 8007406:	bf00      	nop
 8007408:	40011000 	.word	0x40011000
 800740c:	40011400 	.word	0x40011400
 8007410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007418:	2200      	movs	r2, #0
 800741a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800741e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007426:	4642      	mov	r2, r8
 8007428:	464b      	mov	r3, r9
 800742a:	1891      	adds	r1, r2, r2
 800742c:	6239      	str	r1, [r7, #32]
 800742e:	415b      	adcs	r3, r3
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
 8007432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007436:	4641      	mov	r1, r8
 8007438:	1854      	adds	r4, r2, r1
 800743a:	4649      	mov	r1, r9
 800743c:	eb43 0501 	adc.w	r5, r3, r1
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	f04f 0300 	mov.w	r3, #0
 8007448:	00eb      	lsls	r3, r5, #3
 800744a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800744e:	00e2      	lsls	r2, r4, #3
 8007450:	4614      	mov	r4, r2
 8007452:	461d      	mov	r5, r3
 8007454:	4643      	mov	r3, r8
 8007456:	18e3      	adds	r3, r4, r3
 8007458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800745c:	464b      	mov	r3, r9
 800745e:	eb45 0303 	adc.w	r3, r5, r3
 8007462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007476:	f04f 0200 	mov.w	r2, #0
 800747a:	f04f 0300 	mov.w	r3, #0
 800747e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007482:	4629      	mov	r1, r5
 8007484:	008b      	lsls	r3, r1, #2
 8007486:	4621      	mov	r1, r4
 8007488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800748c:	4621      	mov	r1, r4
 800748e:	008a      	lsls	r2, r1, #2
 8007490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007494:	f7f9 fbb2 	bl	8000bfc <__aeabi_uldivmod>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4b60      	ldr	r3, [pc, #384]	; (8007620 <UART_SetConfig+0x4e4>)
 800749e:	fba3 2302 	umull	r2, r3, r3, r2
 80074a2:	095b      	lsrs	r3, r3, #5
 80074a4:	011c      	lsls	r4, r3, #4
 80074a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074b8:	4642      	mov	r2, r8
 80074ba:	464b      	mov	r3, r9
 80074bc:	1891      	adds	r1, r2, r2
 80074be:	61b9      	str	r1, [r7, #24]
 80074c0:	415b      	adcs	r3, r3
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c8:	4641      	mov	r1, r8
 80074ca:	1851      	adds	r1, r2, r1
 80074cc:	6139      	str	r1, [r7, #16]
 80074ce:	4649      	mov	r1, r9
 80074d0:	414b      	adcs	r3, r1
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074e0:	4659      	mov	r1, fp
 80074e2:	00cb      	lsls	r3, r1, #3
 80074e4:	4651      	mov	r1, sl
 80074e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ea:	4651      	mov	r1, sl
 80074ec:	00ca      	lsls	r2, r1, #3
 80074ee:	4610      	mov	r0, r2
 80074f0:	4619      	mov	r1, r3
 80074f2:	4603      	mov	r3, r0
 80074f4:	4642      	mov	r2, r8
 80074f6:	189b      	adds	r3, r3, r2
 80074f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074fc:	464b      	mov	r3, r9
 80074fe:	460a      	mov	r2, r1
 8007500:	eb42 0303 	adc.w	r3, r2, r3
 8007504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	67bb      	str	r3, [r7, #120]	; 0x78
 8007512:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007520:	4649      	mov	r1, r9
 8007522:	008b      	lsls	r3, r1, #2
 8007524:	4641      	mov	r1, r8
 8007526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800752a:	4641      	mov	r1, r8
 800752c:	008a      	lsls	r2, r1, #2
 800752e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007532:	f7f9 fb63 	bl	8000bfc <__aeabi_uldivmod>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4611      	mov	r1, r2
 800753c:	4b38      	ldr	r3, [pc, #224]	; (8007620 <UART_SetConfig+0x4e4>)
 800753e:	fba3 2301 	umull	r2, r3, r3, r1
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	2264      	movs	r2, #100	; 0x64
 8007546:	fb02 f303 	mul.w	r3, r2, r3
 800754a:	1acb      	subs	r3, r1, r3
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	3332      	adds	r3, #50	; 0x32
 8007550:	4a33      	ldr	r2, [pc, #204]	; (8007620 <UART_SetConfig+0x4e4>)
 8007552:	fba2 2303 	umull	r2, r3, r2, r3
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800755c:	441c      	add	r4, r3
 800755e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007562:	2200      	movs	r2, #0
 8007564:	673b      	str	r3, [r7, #112]	; 0x70
 8007566:	677a      	str	r2, [r7, #116]	; 0x74
 8007568:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800756c:	4642      	mov	r2, r8
 800756e:	464b      	mov	r3, r9
 8007570:	1891      	adds	r1, r2, r2
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	415b      	adcs	r3, r3
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800757c:	4641      	mov	r1, r8
 800757e:	1851      	adds	r1, r2, r1
 8007580:	6039      	str	r1, [r7, #0]
 8007582:	4649      	mov	r1, r9
 8007584:	414b      	adcs	r3, r1
 8007586:	607b      	str	r3, [r7, #4]
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007594:	4659      	mov	r1, fp
 8007596:	00cb      	lsls	r3, r1, #3
 8007598:	4651      	mov	r1, sl
 800759a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800759e:	4651      	mov	r1, sl
 80075a0:	00ca      	lsls	r2, r1, #3
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	4642      	mov	r2, r8
 80075aa:	189b      	adds	r3, r3, r2
 80075ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80075ae:	464b      	mov	r3, r9
 80075b0:	460a      	mov	r2, r1
 80075b2:	eb42 0303 	adc.w	r3, r2, r3
 80075b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	663b      	str	r3, [r7, #96]	; 0x60
 80075c2:	667a      	str	r2, [r7, #100]	; 0x64
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075d0:	4649      	mov	r1, r9
 80075d2:	008b      	lsls	r3, r1, #2
 80075d4:	4641      	mov	r1, r8
 80075d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075da:	4641      	mov	r1, r8
 80075dc:	008a      	lsls	r2, r1, #2
 80075de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075e2:	f7f9 fb0b 	bl	8000bfc <__aeabi_uldivmod>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4b0d      	ldr	r3, [pc, #52]	; (8007620 <UART_SetConfig+0x4e4>)
 80075ec:	fba3 1302 	umull	r1, r3, r3, r2
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	2164      	movs	r1, #100	; 0x64
 80075f4:	fb01 f303 	mul.w	r3, r1, r3
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	3332      	adds	r3, #50	; 0x32
 80075fe:	4a08      	ldr	r2, [pc, #32]	; (8007620 <UART_SetConfig+0x4e4>)
 8007600:	fba2 2303 	umull	r2, r3, r2, r3
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	f003 020f 	and.w	r2, r3, #15
 800760a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4422      	add	r2, r4
 8007612:	609a      	str	r2, [r3, #8]
}
 8007614:	bf00      	nop
 8007616:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800761a:	46bd      	mov	sp, r7
 800761c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007620:	51eb851f 	.word	0x51eb851f

08007624 <__NVIC_SetPriority>:
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007634:	2b00      	cmp	r3, #0
 8007636:	db0a      	blt.n	800764e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	b2da      	uxtb	r2, r3
 800763c:	490c      	ldr	r1, [pc, #48]	; (8007670 <__NVIC_SetPriority+0x4c>)
 800763e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007642:	0112      	lsls	r2, r2, #4
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	440b      	add	r3, r1
 8007648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800764c:	e00a      	b.n	8007664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	4908      	ldr	r1, [pc, #32]	; (8007674 <__NVIC_SetPriority+0x50>)
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	3b04      	subs	r3, #4
 800765c:	0112      	lsls	r2, r2, #4
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	440b      	add	r3, r1
 8007662:	761a      	strb	r2, [r3, #24]
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	e000e100 	.word	0xe000e100
 8007674:	e000ed00 	.word	0xe000ed00

08007678 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <SysTick_Handler+0x1c>)
 800767e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007680:	f001 fcfe 	bl	8009080 <xTaskGetSchedulerState>
 8007684:	4603      	mov	r3, r0
 8007686:	2b01      	cmp	r3, #1
 8007688:	d001      	beq.n	800768e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800768a:	f002 fae5 	bl	8009c58 <xPortSysTickHandler>
  }
}
 800768e:	bf00      	nop
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	e000e010 	.word	0xe000e010

08007698 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800769c:	2100      	movs	r1, #0
 800769e:	f06f 0004 	mvn.w	r0, #4
 80076a2:	f7ff ffbf 	bl	8007624 <__NVIC_SetPriority>
#endif
}
 80076a6:	bf00      	nop
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b2:	f3ef 8305 	mrs	r3, IPSR
 80076b6:	603b      	str	r3, [r7, #0]
  return(result);
 80076b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076be:	f06f 0305 	mvn.w	r3, #5
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	e00c      	b.n	80076e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <osKernelInitialize+0x44>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d105      	bne.n	80076da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076ce:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <osKernelInitialize+0x44>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	e002      	b.n	80076e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076e0:	687b      	ldr	r3, [r7, #4]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000474 	.word	0x20000474

080076f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076fa:	f3ef 8305 	mrs	r3, IPSR
 80076fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007700:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007706:	f06f 0305 	mvn.w	r3, #5
 800770a:	607b      	str	r3, [r7, #4]
 800770c:	e010      	b.n	8007730 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800770e:	4b0b      	ldr	r3, [pc, #44]	; (800773c <osKernelStart+0x48>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d109      	bne.n	800772a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007716:	f7ff ffbf 	bl	8007698 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800771a:	4b08      	ldr	r3, [pc, #32]	; (800773c <osKernelStart+0x48>)
 800771c:	2202      	movs	r2, #2
 800771e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007720:	f001 f866 	bl	80087f0 <vTaskStartScheduler>
      stat = osOK;
 8007724:	2300      	movs	r3, #0
 8007726:	607b      	str	r3, [r7, #4]
 8007728:	e002      	b.n	8007730 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800772a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800772e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007730:	687b      	ldr	r3, [r7, #4]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20000474 	.word	0x20000474

08007740 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007740:	b580      	push	{r7, lr}
 8007742:	b08e      	sub	sp, #56	; 0x38
 8007744:	af04      	add	r7, sp, #16
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800774c:	2300      	movs	r3, #0
 800774e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007750:	f3ef 8305 	mrs	r3, IPSR
 8007754:	617b      	str	r3, [r7, #20]
  return(result);
 8007756:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007758:	2b00      	cmp	r3, #0
 800775a:	d17e      	bne.n	800785a <osThreadNew+0x11a>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d07b      	beq.n	800785a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007762:	2380      	movs	r3, #128	; 0x80
 8007764:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007766:	2318      	movs	r3, #24
 8007768:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800776e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007772:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d045      	beq.n	8007806 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <osThreadNew+0x48>
        name = attr->name;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d008      	beq.n	80077ae <osThreadNew+0x6e>
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b38      	cmp	r3, #56	; 0x38
 80077a0:	d805      	bhi.n	80077ae <osThreadNew+0x6e>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <osThreadNew+0x72>
        return (NULL);
 80077ae:	2300      	movs	r3, #0
 80077b0:	e054      	b.n	800785c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	089b      	lsrs	r3, r3, #2
 80077c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00e      	beq.n	80077e8 <osThreadNew+0xa8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	2b5b      	cmp	r3, #91	; 0x5b
 80077d0:	d90a      	bls.n	80077e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d006      	beq.n	80077e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <osThreadNew+0xa8>
        mem = 1;
 80077e2:	2301      	movs	r3, #1
 80077e4:	61bb      	str	r3, [r7, #24]
 80077e6:	e010      	b.n	800780a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10c      	bne.n	800780a <osThreadNew+0xca>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d108      	bne.n	800780a <osThreadNew+0xca>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <osThreadNew+0xca>
          mem = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	61bb      	str	r3, [r7, #24]
 8007804:	e001      	b.n	800780a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d110      	bne.n	8007832 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007818:	9202      	str	r2, [sp, #8]
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6a3a      	ldr	r2, [r7, #32]
 8007824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fe0c 	bl	8008444 <xTaskCreateStatic>
 800782c:	4603      	mov	r3, r0
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	e013      	b.n	800785a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d110      	bne.n	800785a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	b29a      	uxth	r2, r3
 800783c:	f107 0310 	add.w	r3, r7, #16
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 fe57 	bl	80084fe <xTaskCreate>
 8007850:	4603      	mov	r3, r0
 8007852:	2b01      	cmp	r3, #1
 8007854:	d001      	beq.n	800785a <osThreadNew+0x11a>
            hTask = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800785a:	693b      	ldr	r3, [r7, #16]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3728      	adds	r7, #40	; 0x28
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800786c:	f3ef 8305 	mrs	r3, IPSR
 8007870:	60bb      	str	r3, [r7, #8]
  return(result);
 8007872:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <osDelay+0x1c>
    stat = osErrorISR;
 8007878:	f06f 0305 	mvn.w	r3, #5
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	e007      	b.n	8007890 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <osDelay+0x2c>
      vTaskDelay(ticks);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 ff7c 	bl	8008788 <vTaskDelay>
    }
  }

  return (stat);
 8007890:	68fb      	ldr	r3, [r7, #12]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4a07      	ldr	r2, [pc, #28]	; (80078c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80078ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4a06      	ldr	r2, [pc, #24]	; (80078cc <vApplicationGetIdleTaskMemory+0x30>)
 80078b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2280      	movs	r2, #128	; 0x80
 80078b8:	601a      	str	r2, [r3, #0]
}
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000478 	.word	0x20000478
 80078cc:	200004d4 	.word	0x200004d4

080078d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4a07      	ldr	r2, [pc, #28]	; (80078fc <vApplicationGetTimerTaskMemory+0x2c>)
 80078e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4a06      	ldr	r2, [pc, #24]	; (8007900 <vApplicationGetTimerTaskMemory+0x30>)
 80078e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078ee:	601a      	str	r2, [r3, #0]
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	200006d4 	.word	0x200006d4
 8007900:	20000730 	.word	0x20000730

08007904 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f103 0208 	add.w	r2, r3, #8
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800791c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f103 0208 	add.w	r2, r3, #8
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f103 0208 	add.w	r2, r3, #8
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800795e:	b480      	push	{r7}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	601a      	str	r2, [r3, #0]
}
 800799a:	bf00      	nop
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079bc:	d103      	bne.n	80079c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	e00c      	b.n	80079e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3308      	adds	r3, #8
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	e002      	b.n	80079d4 <vListInsert+0x2e>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d2f6      	bcs.n	80079ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	601a      	str	r2, [r3, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6892      	ldr	r2, [r2, #8]
 8007a2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6852      	ldr	r2, [r2, #4]
 8007a38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d103      	bne.n	8007a4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	1e5a      	subs	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a96:	f002 f84d 	bl	8009b34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	68f9      	ldr	r1, [r7, #12]
 8007aa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aa6:	fb01 f303 	mul.w	r3, r1, r3
 8007aaa:	441a      	add	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	441a      	add	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	22ff      	movs	r2, #255	; 0xff
 8007ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	22ff      	movs	r2, #255	; 0xff
 8007ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d114      	bne.n	8007b16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d01a      	beq.n	8007b2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3310      	adds	r3, #16
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 f903 	bl	8008d04 <xTaskRemoveFromEventList>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d012      	beq.n	8007b2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b04:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <xQueueGenericReset+0xcc>)
 8007b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	e009      	b.n	8007b2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3310      	adds	r3, #16
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff fef2 	bl	8007904 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3324      	adds	r3, #36	; 0x24
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff feed 	bl	8007904 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b2a:	f002 f833 	bl	8009b94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b2e:	2301      	movs	r3, #1
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08e      	sub	sp, #56	; 0x38
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <xQueueGenericCreateStatic+0x52>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <xQueueGenericCreateStatic+0x56>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <xQueueGenericCreateStatic+0x58>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10a      	bne.n	8007bae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	623b      	str	r3, [r7, #32]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <xQueueGenericCreateStatic+0x7e>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <xQueueGenericCreateStatic+0x82>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <xQueueGenericCreateStatic+0x84>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	61fb      	str	r3, [r7, #28]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bda:	2350      	movs	r3, #80	; 0x50
 8007bdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b50      	cmp	r3, #80	; 0x50
 8007be2:	d00a      	beq.n	8007bfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	61bb      	str	r3, [r7, #24]
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bfa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00d      	beq.n	8007c22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	4613      	mov	r3, r2
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 f805 	bl	8007c2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3730      	adds	r7, #48	; 0x30
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d103      	bne.n	8007c48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	69b8      	ldr	r0, [r7, #24]
 8007c5e:	f7ff ff05 	bl	8007a6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c6a:	bf00      	nop
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08e      	sub	sp, #56	; 0x38
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c82:	2300      	movs	r3, #0
 8007c84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xQueueGenericSend+0x32>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d103      	bne.n	8007cb4 <xQueueGenericSend+0x40>
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <xQueueGenericSend+0x44>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <xQueueGenericSend+0x46>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <xQueueGenericSend+0x60>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d103      	bne.n	8007ce2 <xQueueGenericSend+0x6e>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <xQueueGenericSend+0x72>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <xQueueGenericSend+0x74>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <xQueueGenericSend+0x8e>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	623b      	str	r3, [r7, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d02:	f001 f9bd 	bl	8009080 <xTaskGetSchedulerState>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d102      	bne.n	8007d12 <xQueueGenericSend+0x9e>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <xQueueGenericSend+0xa2>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e000      	b.n	8007d18 <xQueueGenericSend+0xa4>
 8007d16:	2300      	movs	r3, #0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <xQueueGenericSend+0xbe>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	61fb      	str	r3, [r7, #28]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d32:	f001 feff 	bl	8009b34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <xQueueGenericSend+0xd4>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d129      	bne.n	8007d9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d4e:	f000 fa0b 	bl	8008168 <prvCopyDataToQueue>
 8007d52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d010      	beq.n	8007d7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	3324      	adds	r3, #36	; 0x24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 ffcf 	bl	8008d04 <xTaskRemoveFromEventList>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d013      	beq.n	8007d94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d6c:	4b3f      	ldr	r3, [pc, #252]	; (8007e6c <xQueueGenericSend+0x1f8>)
 8007d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	e00a      	b.n	8007d94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d84:	4b39      	ldr	r3, [pc, #228]	; (8007e6c <xQueueGenericSend+0x1f8>)
 8007d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d94:	f001 fefe 	bl	8009b94 <vPortExitCritical>
				return pdPASS;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e063      	b.n	8007e64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d103      	bne.n	8007daa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007da2:	f001 fef7 	bl	8009b94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	e05c      	b.n	8007e64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007db0:	f107 0314 	add.w	r3, r7, #20
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 f809 	bl	8008dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dbe:	f001 fee9 	bl	8009b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dc2:	f000 fd7b 	bl	80088bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dc6:	f001 feb5 	bl	8009b34 <vPortEnterCritical>
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dd0:	b25b      	sxtb	r3, r3
 8007dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dd6:	d103      	bne.n	8007de0 <xQueueGenericSend+0x16c>
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007de6:	b25b      	sxtb	r3, r3
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dec:	d103      	bne.n	8007df6 <xQueueGenericSend+0x182>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007df6:	f001 fecd 	bl	8009b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dfa:	1d3a      	adds	r2, r7, #4
 8007dfc:	f107 0314 	add.w	r3, r7, #20
 8007e00:	4611      	mov	r1, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fff8 	bl	8008df8 <xTaskCheckForTimeOut>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d124      	bne.n	8007e58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e10:	f000 faa2 	bl	8008358 <prvIsQueueFull>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d018      	beq.n	8007e4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	3310      	adds	r3, #16
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	4611      	mov	r1, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 ff1e 	bl	8008c64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e2a:	f000 fa2d 	bl	8008288 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e2e:	f000 fd53 	bl	80088d8 <xTaskResumeAll>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f47f af7c 	bne.w	8007d32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e3a:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <xQueueGenericSend+0x1f8>)
 8007e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e40:	601a      	str	r2, [r3, #0]
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	e772      	b.n	8007d32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e4e:	f000 fa1b 	bl	8008288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e52:	f000 fd41 	bl	80088d8 <xTaskResumeAll>
 8007e56:	e76c      	b.n	8007d32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e5a:	f000 fa15 	bl	8008288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e5e:	f000 fd3b 	bl	80088d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3738      	adds	r7, #56	; 0x38
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	e000ed04 	.word	0xe000ed04

08007e70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b090      	sub	sp, #64	; 0x40
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <xQueueGenericSendFromISR+0x3c>
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <xQueueGenericSendFromISR+0x40>
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <xQueueGenericSendFromISR+0x42>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10a      	bne.n	8007ecc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d103      	bne.n	8007eda <xQueueGenericSendFromISR+0x6a>
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <xQueueGenericSendFromISR+0x6e>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e000      	b.n	8007ee0 <xQueueGenericSendFromISR+0x70>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	623b      	str	r3, [r7, #32]
}
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007efa:	f001 fefd 	bl	8009cf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007efe:	f3ef 8211 	mrs	r2, BASEPRI
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	61fa      	str	r2, [r7, #28]
 8007f14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d302      	bcc.n	8007f2c <xQueueGenericSendFromISR+0xbc>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d12f      	bne.n	8007f8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f42:	f000 f911 	bl	8008168 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f4e:	d112      	bne.n	8007f76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d016      	beq.n	8007f86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	3324      	adds	r3, #36	; 0x24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fed1 	bl	8008d04 <xTaskRemoveFromEventList>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00e      	beq.n	8007f86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e007      	b.n	8007f86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	b25a      	sxtb	r2, r3
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f86:	2301      	movs	r3, #1
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f8a:	e001      	b.n	8007f90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3740      	adds	r7, #64	; 0x40
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08c      	sub	sp, #48	; 0x30
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <xQueueReceive+0x30>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	623b      	str	r3, [r7, #32]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d103      	bne.n	8007fe6 <xQueueReceive+0x3e>
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <xQueueReceive+0x42>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e000      	b.n	8007fec <xQueueReceive+0x44>
 8007fea:	2300      	movs	r3, #0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <xQueueReceive+0x5e>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	61fb      	str	r3, [r7, #28]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008006:	f001 f83b 	bl	8009080 <xTaskGetSchedulerState>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <xQueueReceive+0x6e>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <xQueueReceive+0x72>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <xQueueReceive+0x74>
 800801a:	2300      	movs	r3, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <xQueueReceive+0x8e>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	61bb      	str	r3, [r7, #24]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008036:	f001 fd7d 	bl	8009b34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01f      	beq.n	8008086 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800804a:	f000 f8f7 	bl	800823c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	1e5a      	subs	r2, r3, #1
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00f      	beq.n	800807e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	3310      	adds	r3, #16
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fe4e 	bl	8008d04 <xTaskRemoveFromEventList>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d007      	beq.n	800807e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800806e:	4b3d      	ldr	r3, [pc, #244]	; (8008164 <xQueueReceive+0x1bc>)
 8008070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800807e:	f001 fd89 	bl	8009b94 <vPortExitCritical>
				return pdPASS;
 8008082:	2301      	movs	r3, #1
 8008084:	e069      	b.n	800815a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d103      	bne.n	8008094 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800808c:	f001 fd82 	bl	8009b94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008090:	2300      	movs	r3, #0
 8008092:	e062      	b.n	800815a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800809a:	f107 0310 	add.w	r3, r7, #16
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fe94 	bl	8008dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080a8:	f001 fd74 	bl	8009b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080ac:	f000 fc06 	bl	80088bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080b0:	f001 fd40 	bl	8009b34 <vPortEnterCritical>
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ba:	b25b      	sxtb	r3, r3
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c0:	d103      	bne.n	80080ca <xQueueReceive+0x122>
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080d0:	b25b      	sxtb	r3, r3
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d6:	d103      	bne.n	80080e0 <xQueueReceive+0x138>
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080e0:	f001 fd58 	bl	8009b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080e4:	1d3a      	adds	r2, r7, #4
 80080e6:	f107 0310 	add.w	r3, r7, #16
 80080ea:	4611      	mov	r1, r2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fe83 	bl	8008df8 <xTaskCheckForTimeOut>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d123      	bne.n	8008140 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fa:	f000 f917 	bl	800832c <prvIsQueueEmpty>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d017      	beq.n	8008134 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	3324      	adds	r3, #36	; 0x24
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f000 fda9 	bl	8008c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008114:	f000 f8b8 	bl	8008288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008118:	f000 fbde 	bl	80088d8 <xTaskResumeAll>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d189      	bne.n	8008036 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008122:	4b10      	ldr	r3, [pc, #64]	; (8008164 <xQueueReceive+0x1bc>)
 8008124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	e780      	b.n	8008036 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008136:	f000 f8a7 	bl	8008288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800813a:	f000 fbcd 	bl	80088d8 <xTaskResumeAll>
 800813e:	e77a      	b.n	8008036 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008142:	f000 f8a1 	bl	8008288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008146:	f000 fbc7 	bl	80088d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800814a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800814c:	f000 f8ee 	bl	800832c <prvIsQueueEmpty>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	f43f af6f 	beq.w	8008036 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008158:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800815a:	4618      	mov	r0, r3
 800815c:	3730      	adds	r7, #48	; 0x30
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	e000ed04 	.word	0xe000ed04

08008168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10d      	bne.n	80081a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d14d      	bne.n	800822a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 ff92 	bl	80090bc <xTaskPriorityDisinherit>
 8008198:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	609a      	str	r2, [r3, #8]
 80081a0:	e043      	b.n	800822a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d119      	bne.n	80081dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6858      	ldr	r0, [r3, #4]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b0:	461a      	mov	r2, r3
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	f002 fc0e 	bl	800a9d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	441a      	add	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d32b      	bcc.n	800822a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	605a      	str	r2, [r3, #4]
 80081da:	e026      	b.n	800822a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	68d8      	ldr	r0, [r3, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	461a      	mov	r2, r3
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	f002 fbf4 	bl	800a9d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	425b      	negs	r3, r3
 80081f6:	441a      	add	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d207      	bcs.n	8008218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	425b      	negs	r3, r3
 8008212:	441a      	add	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d105      	bne.n	800822a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	3b01      	subs	r3, #1
 8008228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008232:	697b      	ldr	r3, [r7, #20]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	d018      	beq.n	8008280 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008256:	441a      	add	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	429a      	cmp	r2, r3
 8008266:	d303      	bcc.n	8008270 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68d9      	ldr	r1, [r3, #12]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	461a      	mov	r2, r3
 800827a:	6838      	ldr	r0, [r7, #0]
 800827c:	f002 fbaa 	bl	800a9d4 <memcpy>
	}
}
 8008280:	bf00      	nop
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008290:	f001 fc50 	bl	8009b34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800829a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800829c:	e011      	b.n	80082c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d012      	beq.n	80082cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3324      	adds	r3, #36	; 0x24
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fd2a 	bl	8008d04 <xTaskRemoveFromEventList>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082b6:	f000 fe01 	bl	8008ebc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	3b01      	subs	r3, #1
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dce9      	bgt.n	800829e <prvUnlockQueue+0x16>
 80082ca:	e000      	b.n	80082ce <prvUnlockQueue+0x46>
					break;
 80082cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	22ff      	movs	r2, #255	; 0xff
 80082d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082d6:	f001 fc5d 	bl	8009b94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082da:	f001 fc2b 	bl	8009b34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082e6:	e011      	b.n	800830c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d012      	beq.n	8008316 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3310      	adds	r3, #16
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fd05 	bl	8008d04 <xTaskRemoveFromEventList>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008300:	f000 fddc 	bl	8008ebc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	3b01      	subs	r3, #1
 8008308:	b2db      	uxtb	r3, r3
 800830a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800830c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008310:	2b00      	cmp	r3, #0
 8008312:	dce9      	bgt.n	80082e8 <prvUnlockQueue+0x60>
 8008314:	e000      	b.n	8008318 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008316:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	22ff      	movs	r2, #255	; 0xff
 800831c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008320:	f001 fc38 	bl	8009b94 <vPortExitCritical>
}
 8008324:	bf00      	nop
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008334:	f001 fbfe 	bl	8009b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	e001      	b.n	800834a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800834a:	f001 fc23 	bl	8009b94 <vPortExitCritical>

	return xReturn;
 800834e:	68fb      	ldr	r3, [r7, #12]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008360:	f001 fbe8 	bl	8009b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836c:	429a      	cmp	r2, r3
 800836e:	d102      	bne.n	8008376 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e001      	b.n	800837a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800837a:	f001 fc0b 	bl	8009b94 <vPortExitCritical>

	return xReturn;
 800837e:	68fb      	ldr	r3, [r7, #12]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e014      	b.n	80083c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008398:	4a0f      	ldr	r2, [pc, #60]	; (80083d8 <vQueueAddToRegistry+0x50>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083a4:	490c      	ldr	r1, [pc, #48]	; (80083d8 <vQueueAddToRegistry+0x50>)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083ae:	4a0a      	ldr	r2, [pc, #40]	; (80083d8 <vQueueAddToRegistry+0x50>)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4413      	add	r3, r2
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083ba:	e006      	b.n	80083ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b07      	cmp	r3, #7
 80083c6:	d9e7      	bls.n	8008398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000b30 	.word	0x20000b30

080083dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083ec:	f001 fba2 	bl	8009b34 <vPortEnterCritical>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083f6:	b25b      	sxtb	r3, r3
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083fc:	d103      	bne.n	8008406 <vQueueWaitForMessageRestricted+0x2a>
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800840c:	b25b      	sxtb	r3, r3
 800840e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008412:	d103      	bne.n	800841c <vQueueWaitForMessageRestricted+0x40>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800841c:	f001 fbba 	bl	8009b94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	3324      	adds	r3, #36	; 0x24
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 fc3b 	bl	8008cac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008436:	6978      	ldr	r0, [r7, #20]
 8008438:	f7ff ff26 	bl	8008288 <prvUnlockQueue>
	}
 800843c:	bf00      	nop
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08e      	sub	sp, #56	; 0x38
 8008448:	af04      	add	r7, sp, #16
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	623b      	str	r3, [r7, #32]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <xTaskCreateStatic+0x46>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	61fb      	str	r3, [r7, #28]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800848a:	235c      	movs	r3, #92	; 0x5c
 800848c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	2b5c      	cmp	r3, #92	; 0x5c
 8008492:	d00a      	beq.n	80084aa <xTaskCreateStatic+0x66>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	61bb      	str	r3, [r7, #24]
}
 80084a6:	bf00      	nop
 80084a8:	e7fe      	b.n	80084a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01e      	beq.n	80084f0 <xTaskCreateStatic+0xac>
 80084b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01b      	beq.n	80084f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	2202      	movs	r2, #2
 80084c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084ca:	2300      	movs	r3, #0
 80084cc:	9303      	str	r3, [sp, #12]
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	9302      	str	r3, [sp, #8]
 80084d2:	f107 0314 	add.w	r3, r7, #20
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 f850 	bl	8008588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084ea:	f000 f8dd 	bl	80086a8 <prvAddNewTaskToReadyList>
 80084ee:	e001      	b.n	80084f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084f4:	697b      	ldr	r3, [r7, #20]
	}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3728      	adds	r7, #40	; 0x28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b08c      	sub	sp, #48	; 0x30
 8008502:	af04      	add	r7, sp, #16
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	603b      	str	r3, [r7, #0]
 800850a:	4613      	mov	r3, r2
 800850c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800850e:	88fb      	ldrh	r3, [r7, #6]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4618      	mov	r0, r3
 8008514:	f001 fc30 	bl	8009d78 <pvPortMalloc>
 8008518:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00e      	beq.n	800853e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008520:	205c      	movs	r0, #92	; 0x5c
 8008522:	f001 fc29 	bl	8009d78 <pvPortMalloc>
 8008526:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	631a      	str	r2, [r3, #48]	; 0x30
 8008534:	e005      	b.n	8008542 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008536:	6978      	ldr	r0, [r7, #20]
 8008538:	f001 fcea 	bl	8009f10 <vPortFree>
 800853c:	e001      	b.n	8008542 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800853e:	2300      	movs	r3, #0
 8008540:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d017      	beq.n	8008578 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008550:	88fa      	ldrh	r2, [r7, #6]
 8008552:	2300      	movs	r3, #0
 8008554:	9303      	str	r3, [sp, #12]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	9302      	str	r3, [sp, #8]
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 f80e 	bl	8008588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800856c:	69f8      	ldr	r0, [r7, #28]
 800856e:	f000 f89b 	bl	80086a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008572:	2301      	movs	r3, #1
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	e002      	b.n	800857e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800857c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800857e:	69bb      	ldr	r3, [r7, #24]
	}
 8008580:	4618      	mov	r0, r3
 8008582:	3720      	adds	r7, #32
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	461a      	mov	r2, r3
 80085a0:	21a5      	movs	r1, #165	; 0xa5
 80085a2:	f002 f9e3 	bl	800a96c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085b0:	3b01      	subs	r3, #1
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	f023 0307 	bic.w	r3, r3, #7
 80085be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	617b      	str	r3, [r7, #20]
}
 80085dc:	bf00      	nop
 80085de:	e7fe      	b.n	80085de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d01f      	beq.n	8008626 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085e6:	2300      	movs	r3, #0
 80085e8:	61fb      	str	r3, [r7, #28]
 80085ea:	e012      	b.n	8008612 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	7819      	ldrb	r1, [r3, #0]
 80085f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	4413      	add	r3, r2
 80085fa:	3334      	adds	r3, #52	; 0x34
 80085fc:	460a      	mov	r2, r1
 80085fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	4413      	add	r3, r2
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	3301      	adds	r3, #1
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	2b0f      	cmp	r3, #15
 8008616:	d9e9      	bls.n	80085ec <prvInitialiseNewTask+0x64>
 8008618:	e000      	b.n	800861c <prvInitialiseNewTask+0x94>
			{
				break;
 800861a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008624:	e003      	b.n	800862e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	2b37      	cmp	r3, #55	; 0x37
 8008632:	d901      	bls.n	8008638 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008634:	2337      	movs	r3, #55	; 0x37
 8008636:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800863c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008642:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008646:	2200      	movs	r2, #0
 8008648:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	3304      	adds	r3, #4
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff f978 	bl	8007944 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	3318      	adds	r3, #24
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff f973 	bl	8007944 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008662:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008672:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	2200      	movs	r2, #0
 8008678:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	68f9      	ldr	r1, [r7, #12]
 8008686:	69b8      	ldr	r0, [r7, #24]
 8008688:	f001 f928 	bl	80098dc <pxPortInitialiseStack>
 800868c:	4602      	mov	r2, r0
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800869c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800869e:	bf00      	nop
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086b0:	f001 fa40 	bl	8009b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086b4:	4b2d      	ldr	r3, [pc, #180]	; (800876c <prvAddNewTaskToReadyList+0xc4>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3301      	adds	r3, #1
 80086ba:	4a2c      	ldr	r2, [pc, #176]	; (800876c <prvAddNewTaskToReadyList+0xc4>)
 80086bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086be:	4b2c      	ldr	r3, [pc, #176]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086c6:	4a2a      	ldr	r2, [pc, #168]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086cc:	4b27      	ldr	r3, [pc, #156]	; (800876c <prvAddNewTaskToReadyList+0xc4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d110      	bne.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086d4:	f000 fc16 	bl	8008f04 <prvInitialiseTaskLists>
 80086d8:	e00d      	b.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086da:	4b26      	ldr	r3, [pc, #152]	; (8008774 <prvAddNewTaskToReadyList+0xcc>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086e2:	4b23      	ldr	r3, [pc, #140]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d802      	bhi.n	80086f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086f0:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086f6:	4b20      	ldr	r3, [pc, #128]	; (8008778 <prvAddNewTaskToReadyList+0xd0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <prvAddNewTaskToReadyList+0xd0>)
 80086fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008700:	4b1d      	ldr	r3, [pc, #116]	; (8008778 <prvAddNewTaskToReadyList+0xd0>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870c:	4b1b      	ldr	r3, [pc, #108]	; (800877c <prvAddNewTaskToReadyList+0xd4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <prvAddNewTaskToReadyList+0x74>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	4a18      	ldr	r2, [pc, #96]	; (800877c <prvAddNewTaskToReadyList+0xd4>)
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4a15      	ldr	r2, [pc, #84]	; (8008780 <prvAddNewTaskToReadyList+0xd8>)
 800872a:	441a      	add	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3304      	adds	r3, #4
 8008730:	4619      	mov	r1, r3
 8008732:	4610      	mov	r0, r2
 8008734:	f7ff f913 	bl	800795e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008738:	f001 fa2c 	bl	8009b94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800873c:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <prvAddNewTaskToReadyList+0xcc>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00e      	beq.n	8008762 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008744:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <prvAddNewTaskToReadyList+0xc8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	429a      	cmp	r2, r3
 8008750:	d207      	bcs.n	8008762 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <prvAddNewTaskToReadyList+0xdc>)
 8008754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20001044 	.word	0x20001044
 8008770:	20000b70 	.word	0x20000b70
 8008774:	20001050 	.word	0x20001050
 8008778:	20001060 	.word	0x20001060
 800877c:	2000104c 	.word	0x2000104c
 8008780:	20000b74 	.word	0x20000b74
 8008784:	e000ed04 	.word	0xe000ed04

08008788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d017      	beq.n	80087ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <vTaskDelay+0x60>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <vTaskDelay+0x30>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	60bb      	str	r3, [r7, #8]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087b8:	f000 f880 	bl	80088bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087bc:	2100      	movs	r1, #0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fcea 	bl	8009198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087c4:	f000 f888 	bl	80088d8 <xTaskResumeAll>
 80087c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d107      	bne.n	80087e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <vTaskDelay+0x64>)
 80087d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	2000106c 	.word	0x2000106c
 80087ec:	e000ed04 	.word	0xe000ed04

080087f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08a      	sub	sp, #40	; 0x28
 80087f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087fe:	463a      	mov	r2, r7
 8008800:	1d39      	adds	r1, r7, #4
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff f848 	bl	800789c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	9202      	str	r2, [sp, #8]
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	2300      	movs	r3, #0
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	2300      	movs	r3, #0
 800881c:	460a      	mov	r2, r1
 800881e:	4921      	ldr	r1, [pc, #132]	; (80088a4 <vTaskStartScheduler+0xb4>)
 8008820:	4821      	ldr	r0, [pc, #132]	; (80088a8 <vTaskStartScheduler+0xb8>)
 8008822:	f7ff fe0f 	bl	8008444 <xTaskCreateStatic>
 8008826:	4603      	mov	r3, r0
 8008828:	4a20      	ldr	r2, [pc, #128]	; (80088ac <vTaskStartScheduler+0xbc>)
 800882a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800882c:	4b1f      	ldr	r3, [pc, #124]	; (80088ac <vTaskStartScheduler+0xbc>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008834:	2301      	movs	r3, #1
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	e001      	b.n	800883e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800883a:	2300      	movs	r3, #0
 800883c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d102      	bne.n	800884a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008844:	f000 fcfc 	bl	8009240 <xTimerCreateTimerTask>
 8008848:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d116      	bne.n	800887e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	613b      	str	r3, [r7, #16]
}
 8008862:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008864:	4b12      	ldr	r3, [pc, #72]	; (80088b0 <vTaskStartScheduler+0xc0>)
 8008866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800886a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800886c:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <vTaskStartScheduler+0xc4>)
 800886e:	2201      	movs	r2, #1
 8008870:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008872:	4b11      	ldr	r3, [pc, #68]	; (80088b8 <vTaskStartScheduler+0xc8>)
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008878:	f001 f8ba 	bl	80099f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800887c:	e00e      	b.n	800889c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008884:	d10a      	bne.n	800889c <vTaskStartScheduler+0xac>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	60fb      	str	r3, [r7, #12]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <vTaskStartScheduler+0xaa>
}
 800889c:	bf00      	nop
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	0800b334 	.word	0x0800b334
 80088a8:	08008ed5 	.word	0x08008ed5
 80088ac:	20001068 	.word	0x20001068
 80088b0:	20001064 	.word	0x20001064
 80088b4:	20001050 	.word	0x20001050
 80088b8:	20001048 	.word	0x20001048

080088bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088c0:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <vTaskSuspendAll+0x18>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	4a03      	ldr	r2, [pc, #12]	; (80088d4 <vTaskSuspendAll+0x18>)
 80088c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088ca:	bf00      	nop
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	2000106c 	.word	0x2000106c

080088d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088e2:	2300      	movs	r3, #0
 80088e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088e6:	4b42      	ldr	r3, [pc, #264]	; (80089f0 <xTaskResumeAll+0x118>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10a      	bne.n	8008904 <xTaskResumeAll+0x2c>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	603b      	str	r3, [r7, #0]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008904:	f001 f916 	bl	8009b34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008908:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <xTaskResumeAll+0x118>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3b01      	subs	r3, #1
 800890e:	4a38      	ldr	r2, [pc, #224]	; (80089f0 <xTaskResumeAll+0x118>)
 8008910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008912:	4b37      	ldr	r3, [pc, #220]	; (80089f0 <xTaskResumeAll+0x118>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d162      	bne.n	80089e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800891a:	4b36      	ldr	r3, [pc, #216]	; (80089f4 <xTaskResumeAll+0x11c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d05e      	beq.n	80089e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008922:	e02f      	b.n	8008984 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008924:	4b34      	ldr	r3, [pc, #208]	; (80089f8 <xTaskResumeAll+0x120>)
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3318      	adds	r3, #24
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff f871 	bl	8007a18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3304      	adds	r3, #4
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff f86c 	bl	8007a18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	4b2d      	ldr	r3, [pc, #180]	; (80089fc <xTaskResumeAll+0x124>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d903      	bls.n	8008954 <xTaskResumeAll+0x7c>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	4a2a      	ldr	r2, [pc, #168]	; (80089fc <xTaskResumeAll+0x124>)
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4a27      	ldr	r2, [pc, #156]	; (8008a00 <xTaskResumeAll+0x128>)
 8008962:	441a      	add	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3304      	adds	r3, #4
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe fff7 	bl	800795e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <xTaskResumeAll+0x12c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	429a      	cmp	r2, r3
 800897c:	d302      	bcc.n	8008984 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800897e:	4b22      	ldr	r3, [pc, #136]	; (8008a08 <xTaskResumeAll+0x130>)
 8008980:	2201      	movs	r2, #1
 8008982:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008984:	4b1c      	ldr	r3, [pc, #112]	; (80089f8 <xTaskResumeAll+0x120>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1cb      	bne.n	8008924 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008992:	f000 fb55 	bl	8009040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008996:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <xTaskResumeAll+0x134>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d010      	beq.n	80089c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089a2:	f000 f847 	bl	8008a34 <xTaskIncrementTick>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089ac:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <xTaskResumeAll+0x130>)
 80089ae:	2201      	movs	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1f1      	bne.n	80089a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80089be:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <xTaskResumeAll+0x134>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089c4:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <xTaskResumeAll+0x130>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089d0:	4b0f      	ldr	r3, [pc, #60]	; (8008a10 <xTaskResumeAll+0x138>)
 80089d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089e0:	f001 f8d8 	bl	8009b94 <vPortExitCritical>

	return xAlreadyYielded;
 80089e4:	68bb      	ldr	r3, [r7, #8]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	2000106c 	.word	0x2000106c
 80089f4:	20001044 	.word	0x20001044
 80089f8:	20001004 	.word	0x20001004
 80089fc:	2000104c 	.word	0x2000104c
 8008a00:	20000b74 	.word	0x20000b74
 8008a04:	20000b70 	.word	0x20000b70
 8008a08:	20001058 	.word	0x20001058
 8008a0c:	20001054 	.word	0x20001054
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <xTaskGetTickCount+0x1c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a20:	687b      	ldr	r3, [r7, #4]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	20001048 	.word	0x20001048

08008a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a3e:	4b4f      	ldr	r3, [pc, #316]	; (8008b7c <xTaskIncrementTick+0x148>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 808f 	bne.w	8008b66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a48:	4b4d      	ldr	r3, [pc, #308]	; (8008b80 <xTaskIncrementTick+0x14c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a50:	4a4b      	ldr	r2, [pc, #300]	; (8008b80 <xTaskIncrementTick+0x14c>)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d120      	bne.n	8008a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a5c:	4b49      	ldr	r3, [pc, #292]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00a      	beq.n	8008a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	603b      	str	r3, [r7, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	e7fe      	b.n	8008a7a <xTaskIncrementTick+0x46>
 8008a7c:	4b41      	ldr	r3, [pc, #260]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60fb      	str	r3, [r7, #12]
 8008a82:	4b41      	ldr	r3, [pc, #260]	; (8008b88 <xTaskIncrementTick+0x154>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a3f      	ldr	r2, [pc, #252]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	4a3f      	ldr	r2, [pc, #252]	; (8008b88 <xTaskIncrementTick+0x154>)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6013      	str	r3, [r2, #0]
 8008a90:	4b3e      	ldr	r3, [pc, #248]	; (8008b8c <xTaskIncrementTick+0x158>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	4a3d      	ldr	r2, [pc, #244]	; (8008b8c <xTaskIncrementTick+0x158>)
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	f000 fad1 	bl	8009040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a9e:	4b3c      	ldr	r3, [pc, #240]	; (8008b90 <xTaskIncrementTick+0x15c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d349      	bcc.n	8008b3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aa8:	4b36      	ldr	r3, [pc, #216]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d104      	bne.n	8008abc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab2:	4b37      	ldr	r3, [pc, #220]	; (8008b90 <xTaskIncrementTick+0x15c>)
 8008ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ab8:	601a      	str	r2, [r3, #0]
					break;
 8008aba:	e03f      	b.n	8008b3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008abc:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <xTaskIncrementTick+0x150>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d203      	bcs.n	8008adc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ad4:	4a2e      	ldr	r2, [pc, #184]	; (8008b90 <xTaskIncrementTick+0x15c>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ada:	e02f      	b.n	8008b3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe ff99 	bl	8007a18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d004      	beq.n	8008af8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	3318      	adds	r3, #24
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe ff90 	bl	8007a18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afc:	4b25      	ldr	r3, [pc, #148]	; (8008b94 <xTaskIncrementTick+0x160>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d903      	bls.n	8008b0c <xTaskIncrementTick+0xd8>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	4a22      	ldr	r2, [pc, #136]	; (8008b94 <xTaskIncrementTick+0x160>)
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <xTaskIncrementTick+0x164>)
 8008b1a:	441a      	add	r2, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4619      	mov	r1, r3
 8008b22:	4610      	mov	r0, r2
 8008b24:	f7fe ff1b 	bl	800795e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	4b1b      	ldr	r3, [pc, #108]	; (8008b9c <xTaskIncrementTick+0x168>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d3b8      	bcc.n	8008aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b3a:	e7b5      	b.n	8008aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b3c:	4b17      	ldr	r3, [pc, #92]	; (8008b9c <xTaskIncrementTick+0x168>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	4915      	ldr	r1, [pc, #84]	; (8008b98 <xTaskIncrementTick+0x164>)
 8008b44:	4613      	mov	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d901      	bls.n	8008b58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b58:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <xTaskIncrementTick+0x16c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	e004      	b.n	8008b70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <xTaskIncrementTick+0x170>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <xTaskIncrementTick+0x170>)
 8008b6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b70:	697b      	ldr	r3, [r7, #20]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	2000106c 	.word	0x2000106c
 8008b80:	20001048 	.word	0x20001048
 8008b84:	20000ffc 	.word	0x20000ffc
 8008b88:	20001000 	.word	0x20001000
 8008b8c:	2000105c 	.word	0x2000105c
 8008b90:	20001064 	.word	0x20001064
 8008b94:	2000104c 	.word	0x2000104c
 8008b98:	20000b74 	.word	0x20000b74
 8008b9c:	20000b70 	.word	0x20000b70
 8008ba0:	20001058 	.word	0x20001058
 8008ba4:	20001054 	.word	0x20001054

08008ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bae:	4b28      	ldr	r3, [pc, #160]	; (8008c50 <vTaskSwitchContext+0xa8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bb6:	4b27      	ldr	r3, [pc, #156]	; (8008c54 <vTaskSwitchContext+0xac>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bbc:	e041      	b.n	8008c42 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008bbe:	4b25      	ldr	r3, [pc, #148]	; (8008c54 <vTaskSwitchContext+0xac>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc4:	4b24      	ldr	r3, [pc, #144]	; (8008c58 <vTaskSwitchContext+0xb0>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	e010      	b.n	8008bee <vTaskSwitchContext+0x46>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	607b      	str	r3, [r7, #4]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <vTaskSwitchContext+0x3e>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]
 8008bee:	491b      	ldr	r1, [pc, #108]	; (8008c5c <vTaskSwitchContext+0xb4>)
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0e4      	beq.n	8008bcc <vTaskSwitchContext+0x24>
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4a13      	ldr	r2, [pc, #76]	; (8008c5c <vTaskSwitchContext+0xb4>)
 8008c0e:	4413      	add	r3, r2
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	605a      	str	r2, [r3, #4]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	3308      	adds	r3, #8
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d104      	bne.n	8008c32 <vTaskSwitchContext+0x8a>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	605a      	str	r2, [r3, #4]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4a09      	ldr	r2, [pc, #36]	; (8008c60 <vTaskSwitchContext+0xb8>)
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	4a06      	ldr	r2, [pc, #24]	; (8008c58 <vTaskSwitchContext+0xb0>)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6013      	str	r3, [r2, #0]
}
 8008c42:	bf00      	nop
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	2000106c 	.word	0x2000106c
 8008c54:	20001058 	.word	0x20001058
 8008c58:	2000104c 	.word	0x2000104c
 8008c5c:	20000b74 	.word	0x20000b74
 8008c60:	20000b70 	.word	0x20000b70

08008c64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	60fb      	str	r3, [r7, #12]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c8a:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <vTaskPlaceOnEventList+0x44>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3318      	adds	r3, #24
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7fe fe87 	bl	80079a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c98:	2101      	movs	r1, #1
 8008c9a:	6838      	ldr	r0, [r7, #0]
 8008c9c:	f000 fa7c 	bl	8009198 <prvAddCurrentTaskToDelayedList>
}
 8008ca0:	bf00      	nop
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20000b70 	.word	0x20000b70

08008cac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10a      	bne.n	8008cd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	617b      	str	r3, [r7, #20]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3318      	adds	r3, #24
 8008cda:	4619      	mov	r1, r3
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7fe fe3e 	bl	800795e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	68b8      	ldr	r0, [r7, #8]
 8008cf2:	f000 fa51 	bl	8009198 <prvAddCurrentTaskToDelayedList>
	}
 8008cf6:	bf00      	nop
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000b70 	.word	0x20000b70

08008d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10a      	bne.n	8008d30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	60fb      	str	r3, [r7, #12]
}
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	3318      	adds	r3, #24
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fe fe6f 	bl	8007a18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d3a:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <xTaskRemoveFromEventList+0xb0>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d11d      	bne.n	8008d7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	3304      	adds	r3, #4
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fe fe66 	bl	8007a18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d50:	4b19      	ldr	r3, [pc, #100]	; (8008db8 <xTaskRemoveFromEventList+0xb4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d903      	bls.n	8008d60 <xTaskRemoveFromEventList+0x5c>
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	4a16      	ldr	r2, [pc, #88]	; (8008db8 <xTaskRemoveFromEventList+0xb4>)
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4a13      	ldr	r2, [pc, #76]	; (8008dbc <xTaskRemoveFromEventList+0xb8>)
 8008d6e:	441a      	add	r2, r3
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f7fe fdf1 	bl	800795e <vListInsertEnd>
 8008d7c:	e005      	b.n	8008d8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	3318      	adds	r3, #24
 8008d82:	4619      	mov	r1, r3
 8008d84:	480e      	ldr	r0, [pc, #56]	; (8008dc0 <xTaskRemoveFromEventList+0xbc>)
 8008d86:	f7fe fdea 	bl	800795e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8e:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <xTaskRemoveFromEventList+0xc0>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d905      	bls.n	8008da4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <xTaskRemoveFromEventList+0xc4>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e001      	b.n	8008da8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008da8:	697b      	ldr	r3, [r7, #20]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	2000106c 	.word	0x2000106c
 8008db8:	2000104c 	.word	0x2000104c
 8008dbc:	20000b74 	.word	0x20000b74
 8008dc0:	20001004 	.word	0x20001004
 8008dc4:	20000b70 	.word	0x20000b70
 8008dc8:	20001058 	.word	0x20001058

08008dcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <vTaskInternalSetTimeOutState+0x24>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <vTaskInternalSetTimeOutState+0x28>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	605a      	str	r2, [r3, #4]
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	2000105c 	.word	0x2000105c
 8008df4:	20001048 	.word	0x20001048

08008df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	613b      	str	r3, [r7, #16]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	60fb      	str	r3, [r7, #12]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e3a:	f000 fe7b 	bl	8009b34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e3e:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <xTaskCheckForTimeOut+0xbc>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e56:	d102      	bne.n	8008e5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	e023      	b.n	8008ea6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b15      	ldr	r3, [pc, #84]	; (8008eb8 <xTaskCheckForTimeOut+0xc0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d007      	beq.n	8008e7a <xTaskCheckForTimeOut+0x82>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d302      	bcc.n	8008e7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	61fb      	str	r3, [r7, #28]
 8008e78:	e015      	b.n	8008ea6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d20b      	bcs.n	8008e9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	1ad2      	subs	r2, r2, r3
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff ff9b 	bl	8008dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	61fb      	str	r3, [r7, #28]
 8008e9a:	e004      	b.n	8008ea6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ea6:	f000 fe75 	bl	8009b94 <vPortExitCritical>

	return xReturn;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20001048 	.word	0x20001048
 8008eb8:	2000105c 	.word	0x2000105c

08008ebc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ec0:	4b03      	ldr	r3, [pc, #12]	; (8008ed0 <vTaskMissedYield+0x14>)
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	601a      	str	r2, [r3, #0]
}
 8008ec6:	bf00      	nop
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20001058 	.word	0x20001058

08008ed4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008edc:	f000 f852 	bl	8008f84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ee0:	4b06      	ldr	r3, [pc, #24]	; (8008efc <prvIdleTask+0x28>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d9f9      	bls.n	8008edc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ee8:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <prvIdleTask+0x2c>)
 8008eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ef8:	e7f0      	b.n	8008edc <prvIdleTask+0x8>
 8008efa:	bf00      	nop
 8008efc:	20000b74 	.word	0x20000b74
 8008f00:	e000ed04 	.word	0xe000ed04

08008f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	e00c      	b.n	8008f2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	4613      	mov	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4a12      	ldr	r2, [pc, #72]	; (8008f64 <prvInitialiseTaskLists+0x60>)
 8008f1c:	4413      	add	r3, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fcf0 	bl	8007904 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3301      	adds	r3, #1
 8008f28:	607b      	str	r3, [r7, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b37      	cmp	r3, #55	; 0x37
 8008f2e:	d9ef      	bls.n	8008f10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f30:	480d      	ldr	r0, [pc, #52]	; (8008f68 <prvInitialiseTaskLists+0x64>)
 8008f32:	f7fe fce7 	bl	8007904 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f36:	480d      	ldr	r0, [pc, #52]	; (8008f6c <prvInitialiseTaskLists+0x68>)
 8008f38:	f7fe fce4 	bl	8007904 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f3c:	480c      	ldr	r0, [pc, #48]	; (8008f70 <prvInitialiseTaskLists+0x6c>)
 8008f3e:	f7fe fce1 	bl	8007904 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f42:	480c      	ldr	r0, [pc, #48]	; (8008f74 <prvInitialiseTaskLists+0x70>)
 8008f44:	f7fe fcde 	bl	8007904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f48:	480b      	ldr	r0, [pc, #44]	; (8008f78 <prvInitialiseTaskLists+0x74>)
 8008f4a:	f7fe fcdb 	bl	8007904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <prvInitialiseTaskLists+0x78>)
 8008f50:	4a05      	ldr	r2, [pc, #20]	; (8008f68 <prvInitialiseTaskLists+0x64>)
 8008f52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f54:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <prvInitialiseTaskLists+0x7c>)
 8008f56:	4a05      	ldr	r2, [pc, #20]	; (8008f6c <prvInitialiseTaskLists+0x68>)
 8008f58:	601a      	str	r2, [r3, #0]
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000b74 	.word	0x20000b74
 8008f68:	20000fd4 	.word	0x20000fd4
 8008f6c:	20000fe8 	.word	0x20000fe8
 8008f70:	20001004 	.word	0x20001004
 8008f74:	20001018 	.word	0x20001018
 8008f78:	20001030 	.word	0x20001030
 8008f7c:	20000ffc 	.word	0x20000ffc
 8008f80:	20001000 	.word	0x20001000

08008f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f8a:	e019      	b.n	8008fc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f8c:	f000 fdd2 	bl	8009b34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f90:	4b10      	ldr	r3, [pc, #64]	; (8008fd4 <prvCheckTasksWaitingTermination+0x50>)
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe fd3b 	bl	8007a18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fa2:	4b0d      	ldr	r3, [pc, #52]	; (8008fd8 <prvCheckTasksWaitingTermination+0x54>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	4a0b      	ldr	r2, [pc, #44]	; (8008fd8 <prvCheckTasksWaitingTermination+0x54>)
 8008faa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fac:	4b0b      	ldr	r3, [pc, #44]	; (8008fdc <prvCheckTasksWaitingTermination+0x58>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	4a0a      	ldr	r2, [pc, #40]	; (8008fdc <prvCheckTasksWaitingTermination+0x58>)
 8008fb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fb6:	f000 fded 	bl	8009b94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f810 	bl	8008fe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fc0:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <prvCheckTasksWaitingTermination+0x58>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e1      	bne.n	8008f8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20001018 	.word	0x20001018
 8008fd8:	20001044 	.word	0x20001044
 8008fdc:	2000102c 	.word	0x2000102c

08008fe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d108      	bne.n	8009004 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 ff8a 	bl	8009f10 <vPortFree>
				vPortFree( pxTCB );
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 ff87 	bl	8009f10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009002:	e018      	b.n	8009036 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800900a:	2b01      	cmp	r3, #1
 800900c:	d103      	bne.n	8009016 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 ff7e 	bl	8009f10 <vPortFree>
	}
 8009014:	e00f      	b.n	8009036 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800901c:	2b02      	cmp	r3, #2
 800901e:	d00a      	beq.n	8009036 <prvDeleteTCB+0x56>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60fb      	str	r3, [r7, #12]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <prvDeleteTCB+0x54>
	}
 8009036:	bf00      	nop
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009046:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvResetNextTaskUnblockTime+0x38>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d104      	bne.n	800905a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <prvResetNextTaskUnblockTime+0x3c>)
 8009052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009058:	e008      	b.n	800906c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <prvResetNextTaskUnblockTime+0x38>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	4a04      	ldr	r2, [pc, #16]	; (800907c <prvResetNextTaskUnblockTime+0x3c>)
 800906a:	6013      	str	r3, [r2, #0]
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20000ffc 	.word	0x20000ffc
 800907c:	20001064 	.word	0x20001064

08009080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009086:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <xTaskGetSchedulerState+0x34>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d102      	bne.n	8009094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800908e:	2301      	movs	r3, #1
 8009090:	607b      	str	r3, [r7, #4]
 8009092:	e008      	b.n	80090a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009094:	4b08      	ldr	r3, [pc, #32]	; (80090b8 <xTaskGetSchedulerState+0x38>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800909c:	2302      	movs	r3, #2
 800909e:	607b      	str	r3, [r7, #4]
 80090a0:	e001      	b.n	80090a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090a2:	2300      	movs	r3, #0
 80090a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090a6:	687b      	ldr	r3, [r7, #4]
	}
 80090a8:	4618      	mov	r0, r3
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	20001050 	.word	0x20001050
 80090b8:	2000106c 	.word	0x2000106c

080090bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d056      	beq.n	8009180 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090d2:	4b2e      	ldr	r3, [pc, #184]	; (800918c <xTaskPriorityDisinherit+0xd0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d00a      	beq.n	80090f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	60fb      	str	r3, [r7, #12]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	60bb      	str	r3, [r7, #8]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009114:	1e5a      	subs	r2, r3, #1
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009122:	429a      	cmp	r2, r3
 8009124:	d02c      	beq.n	8009180 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912a:	2b00      	cmp	r3, #0
 800912c:	d128      	bne.n	8009180 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	3304      	adds	r3, #4
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fc70 	bl	8007a18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009150:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <xTaskPriorityDisinherit+0xd4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d903      	bls.n	8009160 <xTaskPriorityDisinherit+0xa4>
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915c:	4a0c      	ldr	r2, [pc, #48]	; (8009190 <xTaskPriorityDisinherit+0xd4>)
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009164:	4613      	mov	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4a09      	ldr	r2, [pc, #36]	; (8009194 <xTaskPriorityDisinherit+0xd8>)
 800916e:	441a      	add	r2, r3
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	3304      	adds	r3, #4
 8009174:	4619      	mov	r1, r3
 8009176:	4610      	mov	r0, r2
 8009178:	f7fe fbf1 	bl	800795e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800917c:	2301      	movs	r3, #1
 800917e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009180:	697b      	ldr	r3, [r7, #20]
	}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000b70 	.word	0x20000b70
 8009190:	2000104c 	.word	0x2000104c
 8009194:	20000b74 	.word	0x20000b74

08009198 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091a2:	4b21      	ldr	r3, [pc, #132]	; (8009228 <prvAddCurrentTaskToDelayedList+0x90>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a8:	4b20      	ldr	r3, [pc, #128]	; (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe fc32 	bl	8007a18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ba:	d10a      	bne.n	80091d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d007      	beq.n	80091d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091c2:	4b1a      	ldr	r3, [pc, #104]	; (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4819      	ldr	r0, [pc, #100]	; (8009230 <prvAddCurrentTaskToDelayedList+0x98>)
 80091cc:	f7fe fbc7 	bl	800795e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091d0:	e026      	b.n	8009220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4413      	add	r3, r2
 80091d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091da:	4b14      	ldr	r3, [pc, #80]	; (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d209      	bcs.n	80091fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ea:	4b12      	ldr	r3, [pc, #72]	; (8009234 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	4b0f      	ldr	r3, [pc, #60]	; (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f7fe fbd5 	bl	80079a6 <vListInsert>
}
 80091fc:	e010      	b.n	8009220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091fe:	4b0e      	ldr	r3, [pc, #56]	; (8009238 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	4b0a      	ldr	r3, [pc, #40]	; (800922c <prvAddCurrentTaskToDelayedList+0x94>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3304      	adds	r3, #4
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f7fe fbcb 	bl	80079a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009210:	4b0a      	ldr	r3, [pc, #40]	; (800923c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	429a      	cmp	r2, r3
 8009218:	d202      	bcs.n	8009220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800921a:	4a08      	ldr	r2, [pc, #32]	; (800923c <prvAddCurrentTaskToDelayedList+0xa4>)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	6013      	str	r3, [r2, #0]
}
 8009220:	bf00      	nop
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20001048 	.word	0x20001048
 800922c:	20000b70 	.word	0x20000b70
 8009230:	20001030 	.word	0x20001030
 8009234:	20001000 	.word	0x20001000
 8009238:	20000ffc 	.word	0x20000ffc
 800923c:	20001064 	.word	0x20001064

08009240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08a      	sub	sp, #40	; 0x28
 8009244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800924a:	f000 fb07 	bl	800985c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800924e:	4b1c      	ldr	r3, [pc, #112]	; (80092c0 <xTimerCreateTimerTask+0x80>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d021      	beq.n	800929a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800925e:	1d3a      	adds	r2, r7, #4
 8009260:	f107 0108 	add.w	r1, r7, #8
 8009264:	f107 030c 	add.w	r3, r7, #12
 8009268:	4618      	mov	r0, r3
 800926a:	f7fe fb31 	bl	80078d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	9202      	str	r2, [sp, #8]
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	2302      	movs	r3, #2
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	2300      	movs	r3, #0
 800927e:	460a      	mov	r2, r1
 8009280:	4910      	ldr	r1, [pc, #64]	; (80092c4 <xTimerCreateTimerTask+0x84>)
 8009282:	4811      	ldr	r0, [pc, #68]	; (80092c8 <xTimerCreateTimerTask+0x88>)
 8009284:	f7ff f8de 	bl	8008444 <xTaskCreateStatic>
 8009288:	4603      	mov	r3, r0
 800928a:	4a10      	ldr	r2, [pc, #64]	; (80092cc <xTimerCreateTimerTask+0x8c>)
 800928c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800928e:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <xTimerCreateTimerTask+0x8c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009296:	2301      	movs	r3, #1
 8009298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	613b      	str	r3, [r7, #16]
}
 80092b2:	bf00      	nop
 80092b4:	e7fe      	b.n	80092b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092b6:	697b      	ldr	r3, [r7, #20]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	200010a0 	.word	0x200010a0
 80092c4:	0800b33c 	.word	0x0800b33c
 80092c8:	08009405 	.word	0x08009405
 80092cc:	200010a4 	.word	0x200010a4

080092d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08a      	sub	sp, #40	; 0x28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092de:	2300      	movs	r3, #0
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	623b      	str	r3, [r7, #32]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092fe:	4b1a      	ldr	r3, [pc, #104]	; (8009368 <xTimerGenericCommand+0x98>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d02a      	beq.n	800935c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b05      	cmp	r3, #5
 8009316:	dc18      	bgt.n	800934a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009318:	f7ff feb2 	bl	8009080 <xTaskGetSchedulerState>
 800931c:	4603      	mov	r3, r0
 800931e:	2b02      	cmp	r3, #2
 8009320:	d109      	bne.n	8009336 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009322:	4b11      	ldr	r3, [pc, #68]	; (8009368 <xTimerGenericCommand+0x98>)
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f107 0110 	add.w	r1, r7, #16
 800932a:	2300      	movs	r3, #0
 800932c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800932e:	f7fe fca1 	bl	8007c74 <xQueueGenericSend>
 8009332:	6278      	str	r0, [r7, #36]	; 0x24
 8009334:	e012      	b.n	800935c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009336:	4b0c      	ldr	r3, [pc, #48]	; (8009368 <xTimerGenericCommand+0x98>)
 8009338:	6818      	ldr	r0, [r3, #0]
 800933a:	f107 0110 	add.w	r1, r7, #16
 800933e:	2300      	movs	r3, #0
 8009340:	2200      	movs	r2, #0
 8009342:	f7fe fc97 	bl	8007c74 <xQueueGenericSend>
 8009346:	6278      	str	r0, [r7, #36]	; 0x24
 8009348:	e008      	b.n	800935c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800934a:	4b07      	ldr	r3, [pc, #28]	; (8009368 <xTimerGenericCommand+0x98>)
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	f107 0110 	add.w	r1, r7, #16
 8009352:	2300      	movs	r3, #0
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	f7fe fd8b 	bl	8007e70 <xQueueGenericSendFromISR>
 800935a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800935e:	4618      	mov	r0, r3
 8009360:	3728      	adds	r7, #40	; 0x28
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	200010a0 	.word	0x200010a0

0800936c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b088      	sub	sp, #32
 8009370:	af02      	add	r7, sp, #8
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009376:	4b22      	ldr	r3, [pc, #136]	; (8009400 <prvProcessExpiredTimer+0x94>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	3304      	adds	r3, #4
 8009384:	4618      	mov	r0, r3
 8009386:	f7fe fb47 	bl	8007a18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b00      	cmp	r3, #0
 8009396:	d022      	beq.n	80093de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	18d1      	adds	r1, r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	6978      	ldr	r0, [r7, #20]
 80093a6:	f000 f8d1 	bl	800954c <prvInsertTimerInActiveList>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01f      	beq.n	80093f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093b0:	2300      	movs	r3, #0
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	2300      	movs	r3, #0
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	2100      	movs	r1, #0
 80093ba:	6978      	ldr	r0, [r7, #20]
 80093bc:	f7ff ff88 	bl	80092d0 <xTimerGenericCommand>
 80093c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d113      	bne.n	80093f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	60fb      	str	r3, [r7, #12]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093e4:	f023 0301 	bic.w	r3, r3, #1
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	6978      	ldr	r0, [r7, #20]
 80093f6:	4798      	blx	r3
}
 80093f8:	bf00      	nop
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20001098 	.word	0x20001098

08009404 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800940c:	f107 0308 	add.w	r3, r7, #8
 8009410:	4618      	mov	r0, r3
 8009412:	f000 f857 	bl	80094c4 <prvGetNextExpireTime>
 8009416:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4619      	mov	r1, r3
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f803 	bl	8009428 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009422:	f000 f8d5 	bl	80095d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009426:	e7f1      	b.n	800940c <prvTimerTask+0x8>

08009428 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009432:	f7ff fa43 	bl	80088bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009436:	f107 0308 	add.w	r3, r7, #8
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f866 	bl	800950c <prvSampleTimeNow>
 8009440:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d130      	bne.n	80094aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <prvProcessTimerOrBlockTask+0x3c>
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	429a      	cmp	r2, r3
 8009454:	d806      	bhi.n	8009464 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009456:	f7ff fa3f 	bl	80088d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800945a:	68f9      	ldr	r1, [r7, #12]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff ff85 	bl	800936c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009462:	e024      	b.n	80094ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d008      	beq.n	800947c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800946a:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <prvProcessTimerOrBlockTask+0x90>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <prvProcessTimerOrBlockTask+0x50>
 8009474:	2301      	movs	r3, #1
 8009476:	e000      	b.n	800947a <prvProcessTimerOrBlockTask+0x52>
 8009478:	2300      	movs	r3, #0
 800947a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800947c:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <prvProcessTimerOrBlockTask+0x94>)
 800947e:	6818      	ldr	r0, [r3, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	4619      	mov	r1, r3
 800948a:	f7fe ffa7 	bl	80083dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800948e:	f7ff fa23 	bl	80088d8 <xTaskResumeAll>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009498:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <prvProcessTimerOrBlockTask+0x98>)
 800949a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	f3bf 8f6f 	isb	sy
}
 80094a8:	e001      	b.n	80094ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094aa:	f7ff fa15 	bl	80088d8 <xTaskResumeAll>
}
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	2000109c 	.word	0x2000109c
 80094bc:	200010a0 	.word	0x200010a0
 80094c0:	e000ed04 	.word	0xe000ed04

080094c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094cc:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <prvGetNextExpireTime+0x44>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <prvGetNextExpireTime+0x16>
 80094d6:	2201      	movs	r2, #1
 80094d8:	e000      	b.n	80094dc <prvGetNextExpireTime+0x18>
 80094da:	2200      	movs	r2, #0
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d105      	bne.n	80094f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094e8:	4b07      	ldr	r3, [pc, #28]	; (8009508 <prvGetNextExpireTime+0x44>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	e001      	b.n	80094f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094f8:	68fb      	ldr	r3, [r7, #12]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3714      	adds	r7, #20
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	20001098 	.word	0x20001098

0800950c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009514:	f7ff fa7e 	bl	8008a14 <xTaskGetTickCount>
 8009518:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800951a:	4b0b      	ldr	r3, [pc, #44]	; (8009548 <prvSampleTimeNow+0x3c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	429a      	cmp	r2, r3
 8009522:	d205      	bcs.n	8009530 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009524:	f000 f936 	bl	8009794 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	e002      	b.n	8009536 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009536:	4a04      	ldr	r2, [pc, #16]	; (8009548 <prvSampleTimeNow+0x3c>)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800953c:	68fb      	ldr	r3, [r7, #12]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	200010a8 	.word	0x200010a8

0800954c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800955a:	2300      	movs	r3, #0
 800955c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	429a      	cmp	r2, r3
 8009570:	d812      	bhi.n	8009598 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	1ad2      	subs	r2, r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	429a      	cmp	r2, r3
 800957e:	d302      	bcc.n	8009586 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009580:	2301      	movs	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e01b      	b.n	80095be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009586:	4b10      	ldr	r3, [pc, #64]	; (80095c8 <prvInsertTimerInActiveList+0x7c>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	3304      	adds	r3, #4
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f7fe fa08 	bl	80079a6 <vListInsert>
 8009596:	e012      	b.n	80095be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	429a      	cmp	r2, r3
 800959e:	d206      	bcs.n	80095ae <prvInsertTimerInActiveList+0x62>
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d302      	bcc.n	80095ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095a8:	2301      	movs	r3, #1
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	e007      	b.n	80095be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ae:	4b07      	ldr	r3, [pc, #28]	; (80095cc <prvInsertTimerInActiveList+0x80>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3304      	adds	r3, #4
 80095b6:	4619      	mov	r1, r3
 80095b8:	4610      	mov	r0, r2
 80095ba:	f7fe f9f4 	bl	80079a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095be:	697b      	ldr	r3, [r7, #20]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	2000109c 	.word	0x2000109c
 80095cc:	20001098 	.word	0x20001098

080095d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08e      	sub	sp, #56	; 0x38
 80095d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095d6:	e0ca      	b.n	800976e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	da18      	bge.n	8009610 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095de:	1d3b      	adds	r3, r7, #4
 80095e0:	3304      	adds	r3, #4
 80095e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	61fb      	str	r3, [r7, #28]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009606:	6850      	ldr	r0, [r2, #4]
 8009608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800960a:	6892      	ldr	r2, [r2, #8]
 800960c:	4611      	mov	r1, r2
 800960e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	f2c0 80ab 	blt.w	800976e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	3304      	adds	r3, #4
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe f9f5 	bl	8007a18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800962e:	463b      	mov	r3, r7
 8009630:	4618      	mov	r0, r3
 8009632:	f7ff ff6b 	bl	800950c <prvSampleTimeNow>
 8009636:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b09      	cmp	r3, #9
 800963c:	f200 8096 	bhi.w	800976c <prvProcessReceivedCommands+0x19c>
 8009640:	a201      	add	r2, pc, #4	; (adr r2, 8009648 <prvProcessReceivedCommands+0x78>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	08009671 	.word	0x08009671
 800964c:	08009671 	.word	0x08009671
 8009650:	08009671 	.word	0x08009671
 8009654:	080096e5 	.word	0x080096e5
 8009658:	080096f9 	.word	0x080096f9
 800965c:	08009743 	.word	0x08009743
 8009660:	08009671 	.word	0x08009671
 8009664:	08009671 	.word	0x08009671
 8009668:	080096e5 	.word	0x080096e5
 800966c:	080096f9 	.word	0x080096f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009676:	f043 0301 	orr.w	r3, r3, #1
 800967a:	b2da      	uxtb	r2, r3
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	18d1      	adds	r1, r2, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800968e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009690:	f7ff ff5c 	bl	800954c <prvInsertTimerInActiveList>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d069      	beq.n	800976e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d05e      	beq.n	800976e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	441a      	add	r2, r3
 80096b8:	2300      	movs	r3, #0
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	2300      	movs	r3, #0
 80096be:	2100      	movs	r1, #0
 80096c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096c2:	f7ff fe05 	bl	80092d0 <xTimerGenericCommand>
 80096c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d14f      	bne.n	800976e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	61bb      	str	r3, [r7, #24]
}
 80096e0:	bf00      	nop
 80096e2:	e7fe      	b.n	80096e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ea:	f023 0301 	bic.w	r3, r3, #1
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096f6:	e03a      	b.n	800976e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096fe:	f043 0301 	orr.w	r3, r3, #1
 8009702:	b2da      	uxtb	r2, r3
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10a      	bne.n	800972e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	617b      	str	r3, [r7, #20]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009730:	699a      	ldr	r2, [r3, #24]
 8009732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009734:	18d1      	adds	r1, r2, r3
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800973a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800973c:	f7ff ff06 	bl	800954c <prvInsertTimerInActiveList>
					break;
 8009740:	e015      	b.n	800976e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d103      	bne.n	8009758 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009752:	f000 fbdd 	bl	8009f10 <vPortFree>
 8009756:	e00a      	b.n	800976e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800975e:	f023 0301 	bic.w	r3, r3, #1
 8009762:	b2da      	uxtb	r2, r3
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800976a:	e000      	b.n	800976e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800976c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800976e:	4b08      	ldr	r3, [pc, #32]	; (8009790 <prvProcessReceivedCommands+0x1c0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	1d39      	adds	r1, r7, #4
 8009774:	2200      	movs	r2, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fc16 	bl	8007fa8 <xQueueReceive>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	f47f af2a 	bne.w	80095d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	3730      	adds	r7, #48	; 0x30
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	200010a0 	.word	0x200010a0

08009794 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800979a:	e048      	b.n	800982e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800979c:	4b2d      	ldr	r3, [pc, #180]	; (8009854 <prvSwitchTimerLists+0xc0>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a6:	4b2b      	ldr	r3, [pc, #172]	; (8009854 <prvSwitchTimerLists+0xc0>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	3304      	adds	r3, #4
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7fe f92f 	bl	8007a18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d02e      	beq.n	800982e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	4413      	add	r3, r2
 80097d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d90e      	bls.n	8009800 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097ee:	4b19      	ldr	r3, [pc, #100]	; (8009854 <prvSwitchTimerLists+0xc0>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3304      	adds	r3, #4
 80097f6:	4619      	mov	r1, r3
 80097f8:	4610      	mov	r0, r2
 80097fa:	f7fe f8d4 	bl	80079a6 <vListInsert>
 80097fe:	e016      	b.n	800982e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009800:	2300      	movs	r3, #0
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	2300      	movs	r3, #0
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	2100      	movs	r1, #0
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f7ff fd60 	bl	80092d0 <xTimerGenericCommand>
 8009810:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	603b      	str	r3, [r7, #0]
}
 800982a:	bf00      	nop
 800982c:	e7fe      	b.n	800982c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800982e:	4b09      	ldr	r3, [pc, #36]	; (8009854 <prvSwitchTimerLists+0xc0>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1b1      	bne.n	800979c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009838:	4b06      	ldr	r3, [pc, #24]	; (8009854 <prvSwitchTimerLists+0xc0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800983e:	4b06      	ldr	r3, [pc, #24]	; (8009858 <prvSwitchTimerLists+0xc4>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a04      	ldr	r2, [pc, #16]	; (8009854 <prvSwitchTimerLists+0xc0>)
 8009844:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009846:	4a04      	ldr	r2, [pc, #16]	; (8009858 <prvSwitchTimerLists+0xc4>)
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	6013      	str	r3, [r2, #0]
}
 800984c:	bf00      	nop
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20001098 	.word	0x20001098
 8009858:	2000109c 	.word	0x2000109c

0800985c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009862:	f000 f967 	bl	8009b34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009866:	4b15      	ldr	r3, [pc, #84]	; (80098bc <prvCheckForValidListAndQueue+0x60>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d120      	bne.n	80098b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800986e:	4814      	ldr	r0, [pc, #80]	; (80098c0 <prvCheckForValidListAndQueue+0x64>)
 8009870:	f7fe f848 	bl	8007904 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009874:	4813      	ldr	r0, [pc, #76]	; (80098c4 <prvCheckForValidListAndQueue+0x68>)
 8009876:	f7fe f845 	bl	8007904 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800987a:	4b13      	ldr	r3, [pc, #76]	; (80098c8 <prvCheckForValidListAndQueue+0x6c>)
 800987c:	4a10      	ldr	r2, [pc, #64]	; (80098c0 <prvCheckForValidListAndQueue+0x64>)
 800987e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009880:	4b12      	ldr	r3, [pc, #72]	; (80098cc <prvCheckForValidListAndQueue+0x70>)
 8009882:	4a10      	ldr	r2, [pc, #64]	; (80098c4 <prvCheckForValidListAndQueue+0x68>)
 8009884:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009886:	2300      	movs	r3, #0
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	4b11      	ldr	r3, [pc, #68]	; (80098d0 <prvCheckForValidListAndQueue+0x74>)
 800988c:	4a11      	ldr	r2, [pc, #68]	; (80098d4 <prvCheckForValidListAndQueue+0x78>)
 800988e:	2110      	movs	r1, #16
 8009890:	200a      	movs	r0, #10
 8009892:	f7fe f953 	bl	8007b3c <xQueueGenericCreateStatic>
 8009896:	4603      	mov	r3, r0
 8009898:	4a08      	ldr	r2, [pc, #32]	; (80098bc <prvCheckForValidListAndQueue+0x60>)
 800989a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800989c:	4b07      	ldr	r3, [pc, #28]	; (80098bc <prvCheckForValidListAndQueue+0x60>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098a4:	4b05      	ldr	r3, [pc, #20]	; (80098bc <prvCheckForValidListAndQueue+0x60>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	490b      	ldr	r1, [pc, #44]	; (80098d8 <prvCheckForValidListAndQueue+0x7c>)
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe fd6c 	bl	8008388 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098b0:	f000 f970 	bl	8009b94 <vPortExitCritical>
}
 80098b4:	bf00      	nop
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	200010a0 	.word	0x200010a0
 80098c0:	20001070 	.word	0x20001070
 80098c4:	20001084 	.word	0x20001084
 80098c8:	20001098 	.word	0x20001098
 80098cc:	2000109c 	.word	0x2000109c
 80098d0:	2000114c 	.word	0x2000114c
 80098d4:	200010ac 	.word	0x200010ac
 80098d8:	0800b344 	.word	0x0800b344

080098dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3b04      	subs	r3, #4
 80098ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3b04      	subs	r3, #4
 80098fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	f023 0201 	bic.w	r2, r3, #1
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3b04      	subs	r3, #4
 800990a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800990c:	4a0c      	ldr	r2, [pc, #48]	; (8009940 <pxPortInitialiseStack+0x64>)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3b14      	subs	r3, #20
 8009916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3b04      	subs	r3, #4
 8009922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f06f 0202 	mvn.w	r2, #2
 800992a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3b20      	subs	r3, #32
 8009930:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009932:	68fb      	ldr	r3, [r7, #12]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	08009945 	.word	0x08009945

08009944 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800994e:	4b12      	ldr	r3, [pc, #72]	; (8009998 <prvTaskExitError+0x54>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009956:	d00a      	beq.n	800996e <prvTaskExitError+0x2a>
	__asm volatile
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	f383 8811 	msr	BASEPRI, r3
 8009960:	f3bf 8f6f 	isb	sy
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	60fb      	str	r3, [r7, #12]
}
 800996a:	bf00      	nop
 800996c:	e7fe      	b.n	800996c <prvTaskExitError+0x28>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	60bb      	str	r3, [r7, #8]
}
 8009980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009982:	bf00      	nop
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0fc      	beq.n	8009984 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800998a:	bf00      	nop
 800998c:	bf00      	nop
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	20000150 	.word	0x20000150
 800999c:	00000000 	.word	0x00000000

080099a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099a0:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <pxCurrentTCBConst2>)
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	6808      	ldr	r0, [r1, #0]
 80099a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099aa:	f380 8809 	msr	PSP, r0
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f04f 0000 	mov.w	r0, #0
 80099b6:	f380 8811 	msr	BASEPRI, r0
 80099ba:	4770      	bx	lr
 80099bc:	f3af 8000 	nop.w

080099c0 <pxCurrentTCBConst2>:
 80099c0:	20000b70 	.word	0x20000b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099c8:	4808      	ldr	r0, [pc, #32]	; (80099ec <prvPortStartFirstTask+0x24>)
 80099ca:	6800      	ldr	r0, [r0, #0]
 80099cc:	6800      	ldr	r0, [r0, #0]
 80099ce:	f380 8808 	msr	MSP, r0
 80099d2:	f04f 0000 	mov.w	r0, #0
 80099d6:	f380 8814 	msr	CONTROL, r0
 80099da:	b662      	cpsie	i
 80099dc:	b661      	cpsie	f
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	df00      	svc	0
 80099e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099ea:	bf00      	nop
 80099ec:	e000ed08 	.word	0xe000ed08

080099f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099f6:	4b46      	ldr	r3, [pc, #280]	; (8009b10 <xPortStartScheduler+0x120>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a46      	ldr	r2, [pc, #280]	; (8009b14 <xPortStartScheduler+0x124>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d10a      	bne.n	8009a16 <xPortStartScheduler+0x26>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	613b      	str	r3, [r7, #16]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a16:	4b3e      	ldr	r3, [pc, #248]	; (8009b10 <xPortStartScheduler+0x120>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a3f      	ldr	r2, [pc, #252]	; (8009b18 <xPortStartScheduler+0x128>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10a      	bne.n	8009a36 <xPortStartScheduler+0x46>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	60fb      	str	r3, [r7, #12]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a36:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <xPortStartScheduler+0x12c>)
 8009a38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	22ff      	movs	r2, #255	; 0xff
 8009a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	4b31      	ldr	r3, [pc, #196]	; (8009b20 <xPortStartScheduler+0x130>)
 8009a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a5e:	4b31      	ldr	r3, [pc, #196]	; (8009b24 <xPortStartScheduler+0x134>)
 8009a60:	2207      	movs	r2, #7
 8009a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a64:	e009      	b.n	8009a7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a66:	4b2f      	ldr	r3, [pc, #188]	; (8009b24 <xPortStartScheduler+0x134>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	4a2d      	ldr	r2, [pc, #180]	; (8009b24 <xPortStartScheduler+0x134>)
 8009a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a82:	2b80      	cmp	r3, #128	; 0x80
 8009a84:	d0ef      	beq.n	8009a66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a86:	4b27      	ldr	r3, [pc, #156]	; (8009b24 <xPortStartScheduler+0x134>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f1c3 0307 	rsb	r3, r3, #7
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d00a      	beq.n	8009aa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	60bb      	str	r3, [r7, #8]
}
 8009aa4:	bf00      	nop
 8009aa6:	e7fe      	b.n	8009aa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009aa8:	4b1e      	ldr	r3, [pc, #120]	; (8009b24 <xPortStartScheduler+0x134>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	4a1d      	ldr	r2, [pc, #116]	; (8009b24 <xPortStartScheduler+0x134>)
 8009ab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ab2:	4b1c      	ldr	r3, [pc, #112]	; (8009b24 <xPortStartScheduler+0x134>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aba:	4a1a      	ldr	r2, [pc, #104]	; (8009b24 <xPortStartScheduler+0x134>)
 8009abc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ac6:	4b18      	ldr	r3, [pc, #96]	; (8009b28 <xPortStartScheduler+0x138>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a17      	ldr	r2, [pc, #92]	; (8009b28 <xPortStartScheduler+0x138>)
 8009acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ad2:	4b15      	ldr	r3, [pc, #84]	; (8009b28 <xPortStartScheduler+0x138>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a14      	ldr	r2, [pc, #80]	; (8009b28 <xPortStartScheduler+0x138>)
 8009ad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009adc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ade:	f000 f8dd 	bl	8009c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ae2:	4b12      	ldr	r3, [pc, #72]	; (8009b2c <xPortStartScheduler+0x13c>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ae8:	f000 f8fc 	bl	8009ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009aec:	4b10      	ldr	r3, [pc, #64]	; (8009b30 <xPortStartScheduler+0x140>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a0f      	ldr	r2, [pc, #60]	; (8009b30 <xPortStartScheduler+0x140>)
 8009af2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009af6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009af8:	f7ff ff66 	bl	80099c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009afc:	f7ff f854 	bl	8008ba8 <vTaskSwitchContext>
	prvTaskExitError();
 8009b00:	f7ff ff20 	bl	8009944 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3718      	adds	r7, #24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	e000ed00 	.word	0xe000ed00
 8009b14:	410fc271 	.word	0x410fc271
 8009b18:	410fc270 	.word	0x410fc270
 8009b1c:	e000e400 	.word	0xe000e400
 8009b20:	2000119c 	.word	0x2000119c
 8009b24:	200011a0 	.word	0x200011a0
 8009b28:	e000ed20 	.word	0xe000ed20
 8009b2c:	20000150 	.word	0x20000150
 8009b30:	e000ef34 	.word	0xe000ef34

08009b34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	607b      	str	r3, [r7, #4]
}
 8009b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <vPortEnterCritical+0x58>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3301      	adds	r3, #1
 8009b54:	4a0d      	ldr	r2, [pc, #52]	; (8009b8c <vPortEnterCritical+0x58>)
 8009b56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b58:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <vPortEnterCritical+0x58>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10f      	bne.n	8009b80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <vPortEnterCritical+0x5c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	603b      	str	r3, [r7, #0]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <vPortEnterCritical+0x4a>
	}
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	20000150 	.word	0x20000150
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b9a:	4b12      	ldr	r3, [pc, #72]	; (8009be4 <vPortExitCritical+0x50>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10a      	bne.n	8009bb8 <vPortExitCritical+0x24>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	607b      	str	r3, [r7, #4]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <vPortExitCritical+0x50>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	4a09      	ldr	r2, [pc, #36]	; (8009be4 <vPortExitCritical+0x50>)
 8009bc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bc2:	4b08      	ldr	r3, [pc, #32]	; (8009be4 <vPortExitCritical+0x50>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d105      	bne.n	8009bd6 <vPortExitCritical+0x42>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	f383 8811 	msr	BASEPRI, r3
}
 8009bd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	20000150 	.word	0x20000150
	...

08009bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bf0:	f3ef 8009 	mrs	r0, PSP
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	4b15      	ldr	r3, [pc, #84]	; (8009c50 <pxCurrentTCBConst>)
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	f01e 0f10 	tst.w	lr, #16
 8009c00:	bf08      	it	eq
 8009c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0a:	6010      	str	r0, [r2, #0]
 8009c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c14:	f380 8811 	msr	BASEPRI, r0
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f7fe ffc2 	bl	8008ba8 <vTaskSwitchContext>
 8009c24:	f04f 0000 	mov.w	r0, #0
 8009c28:	f380 8811 	msr	BASEPRI, r0
 8009c2c:	bc09      	pop	{r0, r3}
 8009c2e:	6819      	ldr	r1, [r3, #0]
 8009c30:	6808      	ldr	r0, [r1, #0]
 8009c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c36:	f01e 0f10 	tst.w	lr, #16
 8009c3a:	bf08      	it	eq
 8009c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c40:	f380 8809 	msr	PSP, r0
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	f3af 8000 	nop.w

08009c50 <pxCurrentTCBConst>:
 8009c50:	20000b70 	.word	0x20000b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop

08009c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
}
 8009c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c72:	f7fe fedf 	bl	8008a34 <xTaskIncrementTick>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c7c:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <xPortSysTickHandler+0x40>)
 8009c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	2300      	movs	r3, #0
 8009c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	f383 8811 	msr	BASEPRI, r3
}
 8009c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	e000ed04 	.word	0xe000ed04

08009c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ca0:	4b0b      	ldr	r3, [pc, #44]	; (8009cd0 <vPortSetupTimerInterrupt+0x34>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	; (8009cd4 <vPortSetupTimerInterrupt+0x38>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cac:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <vPortSetupTimerInterrupt+0x3c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a0a      	ldr	r2, [pc, #40]	; (8009cdc <vPortSetupTimerInterrupt+0x40>)
 8009cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb6:	099b      	lsrs	r3, r3, #6
 8009cb8:	4a09      	ldr	r2, [pc, #36]	; (8009ce0 <vPortSetupTimerInterrupt+0x44>)
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cbe:	4b04      	ldr	r3, [pc, #16]	; (8009cd0 <vPortSetupTimerInterrupt+0x34>)
 8009cc0:	2207      	movs	r2, #7
 8009cc2:	601a      	str	r2, [r3, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	e000e010 	.word	0xe000e010
 8009cd4:	e000e018 	.word	0xe000e018
 8009cd8:	20000144 	.word	0x20000144
 8009cdc:	10624dd3 	.word	0x10624dd3
 8009ce0:	e000e014 	.word	0xe000e014

08009ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cf4 <vPortEnableVFP+0x10>
 8009ce8:	6801      	ldr	r1, [r0, #0]
 8009cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cee:	6001      	str	r1, [r0, #0]
 8009cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cf2:	bf00      	nop
 8009cf4:	e000ed88 	.word	0xe000ed88

08009cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cfe:	f3ef 8305 	mrs	r3, IPSR
 8009d02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b0f      	cmp	r3, #15
 8009d08:	d914      	bls.n	8009d34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d0a:	4a17      	ldr	r2, [pc, #92]	; (8009d68 <vPortValidateInterruptPriority+0x70>)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4413      	add	r3, r2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d14:	4b15      	ldr	r3, [pc, #84]	; (8009d6c <vPortValidateInterruptPriority+0x74>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	7afa      	ldrb	r2, [r7, #11]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d20a      	bcs.n	8009d34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	607b      	str	r3, [r7, #4]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d34:	4b0e      	ldr	r3, [pc, #56]	; (8009d70 <vPortValidateInterruptPriority+0x78>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d3c:	4b0d      	ldr	r3, [pc, #52]	; (8009d74 <vPortValidateInterruptPriority+0x7c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d90a      	bls.n	8009d5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d48:	f383 8811 	msr	BASEPRI, r3
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	603b      	str	r3, [r7, #0]
}
 8009d56:	bf00      	nop
 8009d58:	e7fe      	b.n	8009d58 <vPortValidateInterruptPriority+0x60>
	}
 8009d5a:	bf00      	nop
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	e000e3f0 	.word	0xe000e3f0
 8009d6c:	2000119c 	.word	0x2000119c
 8009d70:	e000ed0c 	.word	0xe000ed0c
 8009d74:	200011a0 	.word	0x200011a0

08009d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b08a      	sub	sp, #40	; 0x28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d84:	f7fe fd9a 	bl	80088bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d88:	4b5b      	ldr	r3, [pc, #364]	; (8009ef8 <pvPortMalloc+0x180>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d101      	bne.n	8009d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d90:	f000 f920 	bl	8009fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d94:	4b59      	ldr	r3, [pc, #356]	; (8009efc <pvPortMalloc+0x184>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 8093 	bne.w	8009ec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01d      	beq.n	8009de4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009da8:	2208      	movs	r2, #8
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4413      	add	r3, r2
 8009dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d014      	beq.n	8009de4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f023 0307 	bic.w	r3, r3, #7
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f003 0307 	and.w	r3, r3, #7
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <pvPortMalloc+0x6c>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	617b      	str	r3, [r7, #20]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d06e      	beq.n	8009ec8 <pvPortMalloc+0x150>
 8009dea:	4b45      	ldr	r3, [pc, #276]	; (8009f00 <pvPortMalloc+0x188>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d869      	bhi.n	8009ec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009df4:	4b43      	ldr	r3, [pc, #268]	; (8009f04 <pvPortMalloc+0x18c>)
 8009df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009df8:	4b42      	ldr	r3, [pc, #264]	; (8009f04 <pvPortMalloc+0x18c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dfe:	e004      	b.n	8009e0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d903      	bls.n	8009e1c <pvPortMalloc+0xa4>
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1f1      	bne.n	8009e00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e1c:	4b36      	ldr	r3, [pc, #216]	; (8009ef8 <pvPortMalloc+0x180>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d050      	beq.n	8009ec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	4413      	add	r3, r2
 8009e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	2308      	movs	r3, #8
 8009e42:	005b      	lsls	r3, r3, #1
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d91f      	bls.n	8009e88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00a      	beq.n	8009e70 <pvPortMalloc+0xf8>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	613b      	str	r3, [r7, #16]
}
 8009e6c:	bf00      	nop
 8009e6e:	e7fe      	b.n	8009e6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	1ad2      	subs	r2, r2, r3
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e82:	69b8      	ldr	r0, [r7, #24]
 8009e84:	f000 f908 	bl	800a098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e88:	4b1d      	ldr	r3, [pc, #116]	; (8009f00 <pvPortMalloc+0x188>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	4a1b      	ldr	r2, [pc, #108]	; (8009f00 <pvPortMalloc+0x188>)
 8009e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e96:	4b1a      	ldr	r3, [pc, #104]	; (8009f00 <pvPortMalloc+0x188>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	4b1b      	ldr	r3, [pc, #108]	; (8009f08 <pvPortMalloc+0x190>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d203      	bcs.n	8009eaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ea2:	4b17      	ldr	r3, [pc, #92]	; (8009f00 <pvPortMalloc+0x188>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a18      	ldr	r2, [pc, #96]	; (8009f08 <pvPortMalloc+0x190>)
 8009ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	4b13      	ldr	r3, [pc, #76]	; (8009efc <pvPortMalloc+0x184>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ebe:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <pvPortMalloc+0x194>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	4a11      	ldr	r2, [pc, #68]	; (8009f0c <pvPortMalloc+0x194>)
 8009ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ec8:	f7fe fd06 	bl	80088d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <pvPortMalloc+0x174>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	60fb      	str	r3, [r7, #12]
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <pvPortMalloc+0x172>
	return pvReturn;
 8009eec:	69fb      	ldr	r3, [r7, #28]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3728      	adds	r7, #40	; 0x28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20004dac 	.word	0x20004dac
 8009efc:	20004dc0 	.word	0x20004dc0
 8009f00:	20004db0 	.word	0x20004db0
 8009f04:	20004da4 	.word	0x20004da4
 8009f08:	20004db4 	.word	0x20004db4
 8009f0c:	20004db8 	.word	0x20004db8

08009f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d04d      	beq.n	8009fbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f22:	2308      	movs	r3, #8
 8009f24:	425b      	negs	r3, r3
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	4413      	add	r3, r2
 8009f2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	4b24      	ldr	r3, [pc, #144]	; (8009fc8 <vPortFree+0xb8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4013      	ands	r3, r2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <vPortFree+0x44>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	60fb      	str	r3, [r7, #12]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <vPortFree+0x62>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60bb      	str	r3, [r7, #8]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <vPortFree+0xb8>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01e      	beq.n	8009fbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d11a      	bne.n	8009fbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <vPortFree+0xb8>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	43db      	mvns	r3, r3
 8009f92:	401a      	ands	r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f98:	f7fe fc90 	bl	80088bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	4b0a      	ldr	r3, [pc, #40]	; (8009fcc <vPortFree+0xbc>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	4a09      	ldr	r2, [pc, #36]	; (8009fcc <vPortFree+0xbc>)
 8009fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009faa:	6938      	ldr	r0, [r7, #16]
 8009fac:	f000 f874 	bl	800a098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <vPortFree+0xc0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a06      	ldr	r2, [pc, #24]	; (8009fd0 <vPortFree+0xc0>)
 8009fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fba:	f7fe fc8d 	bl	80088d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fbe:	bf00      	nop
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20004dc0 	.word	0x20004dc0
 8009fcc:	20004db0 	.word	0x20004db0
 8009fd0:	20004dbc 	.word	0x20004dbc

08009fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fe0:	4b27      	ldr	r3, [pc, #156]	; (800a080 <prvHeapInit+0xac>)
 8009fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f003 0307 	and.w	r3, r3, #7
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00c      	beq.n	800a008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3307      	adds	r3, #7
 8009ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 0307 	bic.w	r3, r3, #7
 8009ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	4a1f      	ldr	r2, [pc, #124]	; (800a080 <prvHeapInit+0xac>)
 800a004:	4413      	add	r3, r2
 800a006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a00c:	4a1d      	ldr	r2, [pc, #116]	; (800a084 <prvHeapInit+0xb0>)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a012:	4b1c      	ldr	r3, [pc, #112]	; (800a084 <prvHeapInit+0xb0>)
 800a014:	2200      	movs	r2, #0
 800a016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	4413      	add	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a020:	2208      	movs	r2, #8
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1a9b      	subs	r3, r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0307 	bic.w	r3, r3, #7
 800a02e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4a15      	ldr	r2, [pc, #84]	; (800a088 <prvHeapInit+0xb4>)
 800a034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a036:	4b14      	ldr	r3, [pc, #80]	; (800a088 <prvHeapInit+0xb4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a03e:	4b12      	ldr	r3, [pc, #72]	; (800a088 <prvHeapInit+0xb4>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	1ad2      	subs	r2, r2, r3
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a054:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <prvHeapInit+0xb4>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4a0a      	ldr	r2, [pc, #40]	; (800a08c <prvHeapInit+0xb8>)
 800a062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4a09      	ldr	r2, [pc, #36]	; (800a090 <prvHeapInit+0xbc>)
 800a06a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <prvHeapInit+0xc0>)
 800a06e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a072:	601a      	str	r2, [r3, #0]
}
 800a074:	bf00      	nop
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	200011a4 	.word	0x200011a4
 800a084:	20004da4 	.word	0x20004da4
 800a088:	20004dac 	.word	0x20004dac
 800a08c:	20004db4 	.word	0x20004db4
 800a090:	20004db0 	.word	0x20004db0
 800a094:	20004dc0 	.word	0x20004dc0

0800a098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0a0:	4b28      	ldr	r3, [pc, #160]	; (800a144 <prvInsertBlockIntoFreeList+0xac>)
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e002      	b.n	800a0ac <prvInsertBlockIntoFreeList+0x14>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d8f7      	bhi.n	800a0a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d108      	bne.n	800a0da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	441a      	add	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	441a      	add	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d118      	bne.n	800a120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <prvInsertBlockIntoFreeList+0xb0>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d00d      	beq.n	800a116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	441a      	add	r2, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e008      	b.n	800a128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a116:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <prvInsertBlockIntoFreeList+0xb0>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	e003      	b.n	800a128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d002      	beq.n	800a136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a136:	bf00      	nop
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	20004da4 	.word	0x20004da4
 800a148:	20004dac 	.word	0x20004dac

0800a14c <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08a      	sub	sp, #40	; 0x28
 800a150:	af04      	add	r7, sp, #16
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	460b      	mov	r3, r1
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	b2db      	uxtb	r3, r3
 800a162:	011b      	lsls	r3, r3, #4
 800a164:	b2db      	uxtb	r3, r3
 800a166:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <_ICM20948_SelectUserBank+0x26>
 800a16e:	2368      	movs	r3, #104	; 0x68
 800a170:	e000      	b.n	800a174 <_ICM20948_SelectUserBank+0x28>
 800a172:	2369      	movs	r3, #105	; 0x69
 800a174:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800a176:	7dbb      	ldrb	r3, [r7, #22]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	005b      	lsls	r3, r3, #1
 800a17c:	b299      	uxth	r1, r3
 800a17e:	230a      	movs	r3, #10
 800a180:	9302      	str	r3, [sp, #8]
 800a182:	2301      	movs	r3, #1
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	f107 0315 	add.w	r3, r7, #21
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	2301      	movs	r3, #1
 800a18e:	227f      	movs	r2, #127	; 0x7f
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f7f9 fcdf 	bl	8003b54 <HAL_I2C_Mem_Write>
 800a196:	4603      	mov	r3, r0
 800a198:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af04      	add	r7, sp, #16
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	70fb      	strb	r3, [r7, #3]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	70bb      	strb	r3, [r7, #2]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800a1c2:	78fb      	ldrb	r3, [r7, #3]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d101      	bne.n	800a1cc <_ICM20948_WriteByte+0x28>
 800a1c8:	2368      	movs	r3, #104	; 0x68
 800a1ca:	e000      	b.n	800a1ce <_ICM20948_WriteByte+0x2a>
 800a1cc:	2369      	movs	r3, #105	; 0x69
 800a1ce:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	b299      	uxth	r1, r3
 800a1d8:	78bb      	ldrb	r3, [r7, #2]
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	230a      	movs	r3, #10
 800a1de:	9302      	str	r3, [sp, #8]
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	9301      	str	r3, [sp, #4]
 800a1e4:	1c7b      	adds	r3, r7, #1
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7f9 fcb2 	bl	8003b54 <HAL_I2C_Mem_Write>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	4608      	mov	r0, r1
 800a208:	4611      	mov	r1, r2
 800a20a:	461a      	mov	r2, r3
 800a20c:	4603      	mov	r3, r0
 800a20e:	70fb      	strb	r3, [r7, #3]
 800a210:	460b      	mov	r3, r1
 800a212:	70bb      	strb	r3, [r7, #2]
 800a214:	4613      	mov	r3, r2
 800a216:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	2200      	movs	r2, #0
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7ff ff92 	bl	800a14c <_ICM20948_SelectUserBank>
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800a22c:	78f9      	ldrb	r1, [r7, #3]
 800a22e:	2380      	movs	r3, #128	; 0x80
 800a230:	2206      	movs	r2, #6
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff ffb6 	bl	800a1a4 <_ICM20948_WriteByte>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800a23c:	20c8      	movs	r0, #200	; 0xc8
 800a23e:	f7f8 fff7 	bl	8003230 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800a242:	78f9      	ldrb	r1, [r7, #3]
 800a244:	2301      	movs	r3, #1
 800a246:	2206      	movs	r2, #6
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f7ff ffab 	bl	800a1a4 <_ICM20948_WriteByte>
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800a252:	78f9      	ldrb	r1, [r7, #3]
 800a254:	2300      	movs	r3, #0
 800a256:	2207      	movs	r2, #7
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff ffa3 	bl	800a1a4 <_ICM20948_WriteByte>
 800a25e:	4603      	mov	r3, r0
 800a260:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800a262:	78fb      	ldrb	r3, [r7, #3]
 800a264:	2202      	movs	r2, #2
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f7ff ff6f 	bl	800a14c <_ICM20948_SelectUserBank>
 800a26e:	4603      	mov	r3, r0
 800a270:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800a272:	78bb      	ldrb	r3, [r7, #2]
 800a274:	005b      	lsls	r3, r3, #1
 800a276:	b25b      	sxtb	r3, r3
 800a278:	f043 0319 	orr.w	r3, r3, #25
 800a27c:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	78f9      	ldrb	r1, [r7, #3]
 800a282:	2201      	movs	r2, #1
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7ff ff8d 	bl	800a1a4 <_ICM20948_WriteByte>
 800a28a:	4603      	mov	r3, r0
 800a28c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800a28e:	78f9      	ldrb	r1, [r7, #3]
 800a290:	2303      	movs	r3, #3
 800a292:	2253      	movs	r2, #83	; 0x53
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff ff85 	bl	800a1a4 <_ICM20948_WriteByte>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800a29e:	78f9      	ldrb	r1, [r7, #3]
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff ff7d 	bl	800a1a4 <_ICM20948_WriteByte>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800a2ae:	787b      	ldrb	r3, [r7, #1]
 800a2b0:	005b      	lsls	r3, r3, #1
 800a2b2:	b25b      	sxtb	r3, r3
 800a2b4:	f043 0319 	orr.w	r3, r3, #25
 800a2b8:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	78f9      	ldrb	r1, [r7, #3]
 800a2be:	2214      	movs	r2, #20
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7ff ff6f 	bl	800a1a4 <_ICM20948_WriteByte>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800a2ca:	78f9      	ldrb	r1, [r7, #3]
 800a2cc:	2304      	movs	r3, #4
 800a2ce:	2211      	movs	r2, #17
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff ff67 	bl	800a1a4 <_ICM20948_WriteByte>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800a2da:	78fb      	ldrb	r3, [r7, #3]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff ff33 	bl	800a14c <_ICM20948_SelectUserBank>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800a2ea:	78f9      	ldrb	r1, [r7, #3]
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	220f      	movs	r2, #15
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff ff57 	bl	800a1a4 <_ICM20948_WriteByte>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800a2fa:	2208      	movs	r2, #8
 800a2fc:	2131      	movs	r1, #49	; 0x31
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f806 	bl	800a310 <_AK09918_WriteByte>
 800a304:	4603      	mov	r3, r0
 800a306:	73fb      	strb	r3, [r7, #15]
}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af04      	add	r7, sp, #16
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
 800a31c:	4613      	mov	r3, r2
 800a31e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	b29a      	uxth	r2, r3
 800a328:	230a      	movs	r3, #10
 800a32a:	9302      	str	r3, [sp, #8]
 800a32c:	2301      	movs	r3, #1
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	1cbb      	adds	r3, r7, #2
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	2301      	movs	r3, #1
 800a336:	2118      	movs	r1, #24
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7f9 fc0b 	bl	8003b54 <HAL_I2C_Mem_Write>
 800a33e:	4603      	mov	r3, r0
 800a340:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800a342:	7bfb      	ldrb	r3, [r7, #15]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800a352:	2300      	movs	r3, #0
 800a354:	71fb      	strb	r3, [r7, #7]
 800a356:	e026      	b.n	800a3a6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800a358:	79fb      	ldrb	r3, [r7, #7]
 800a35a:	3b50      	subs	r3, #80	; 0x50
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2100      	movs	r1, #0
 800a360:	4618      	mov	r0, r3
 800a362:	f000 f82b 	bl	800a3bc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800a366:	2100      	movs	r1, #0
 800a368:	2000      	movs	r0, #0
 800a36a:	f000 f827 	bl	800a3bc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800a36e:	2100      	movs	r1, #0
 800a370:	2010      	movs	r0, #16
 800a372:	f000 f823 	bl	800a3bc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800a376:	2300      	movs	r3, #0
 800a378:	71bb      	strb	r3, [r7, #6]
 800a37a:	e00d      	b.n	800a398 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800a37c:	79ba      	ldrb	r2, [r7, #6]
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	490d      	ldr	r1, [pc, #52]	; (800a3b8 <OLED_Refresh_Gram+0x6c>)
 800a382:	00d2      	lsls	r2, r2, #3
 800a384:	440a      	add	r2, r1
 800a386:	4413      	add	r3, r2
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	2101      	movs	r1, #1
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 f815 	bl	800a3bc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800a392:	79bb      	ldrb	r3, [r7, #6]
 800a394:	3301      	adds	r3, #1
 800a396:	71bb      	strb	r3, [r7, #6]
 800a398:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	daed      	bge.n	800a37c <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800a3a0:	79fb      	ldrb	r3, [r7, #7]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	71fb      	strb	r3, [r7, #7]
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	2b07      	cmp	r3, #7
 800a3aa:	d9d5      	bls.n	800a358 <OLED_Refresh_Gram+0xc>
	}
}
 800a3ac:	bf00      	nop
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20004dc4 	.word	0x20004dc4

0800a3bc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	460a      	mov	r2, r1
 800a3c6:	71fb      	strb	r3, [r7, #7]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800a3cc:	79bb      	ldrb	r3, [r7, #6]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a3d8:	481c      	ldr	r0, [pc, #112]	; (800a44c <OLED_WR_Byte+0x90>)
 800a3da:	f7f9 fa5d 	bl	8003898 <HAL_GPIO_WritePin>
 800a3de:	e005      	b.n	800a3ec <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a3e6:	4819      	ldr	r0, [pc, #100]	; (800a44c <OLED_WR_Byte+0x90>)
 800a3e8:	f7f9 fa56 	bl	8003898 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]
 800a3f0:	e01e      	b.n	800a430 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2120      	movs	r1, #32
 800a3f6:	4815      	ldr	r0, [pc, #84]	; (800a44c <OLED_WR_Byte+0x90>)
 800a3f8:	f7f9 fa4e 	bl	8003898 <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800a3fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a400:	2b00      	cmp	r3, #0
 800a402:	da05      	bge.n	800a410 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800a404:	2201      	movs	r2, #1
 800a406:	2140      	movs	r1, #64	; 0x40
 800a408:	4810      	ldr	r0, [pc, #64]	; (800a44c <OLED_WR_Byte+0x90>)
 800a40a:	f7f9 fa45 	bl	8003898 <HAL_GPIO_WritePin>
 800a40e:	e004      	b.n	800a41a <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800a410:	2200      	movs	r2, #0
 800a412:	2140      	movs	r1, #64	; 0x40
 800a414:	480d      	ldr	r0, [pc, #52]	; (800a44c <OLED_WR_Byte+0x90>)
 800a416:	f7f9 fa3f 	bl	8003898 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800a41a:	2201      	movs	r2, #1
 800a41c:	2120      	movs	r1, #32
 800a41e:	480b      	ldr	r0, [pc, #44]	; (800a44c <OLED_WR_Byte+0x90>)
 800a420:	f7f9 fa3a 	bl	8003898 <HAL_GPIO_WritePin>
		dat <<= 1;
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
 800a42c:	3301      	adds	r3, #1
 800a42e:	73fb      	strb	r3, [r7, #15]
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	2b07      	cmp	r3, #7
 800a434:	d9dd      	bls.n	800a3f2 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800a436:	2201      	movs	r2, #1
 800a438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a43c:	4803      	ldr	r0, [pc, #12]	; (800a44c <OLED_WR_Byte+0x90>)
 800a43e:	f7f9 fa2b 	bl	8003898 <HAL_GPIO_WritePin>
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	40021000 	.word	0x40021000

0800a450 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800a456:	2300      	movs	r3, #0
 800a458:	71fb      	strb	r3, [r7, #7]
 800a45a:	e014      	b.n	800a486 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800a45c:	2300      	movs	r3, #0
 800a45e:	71bb      	strb	r3, [r7, #6]
 800a460:	e00a      	b.n	800a478 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800a462:	79ba      	ldrb	r2, [r7, #6]
 800a464:	79fb      	ldrb	r3, [r7, #7]
 800a466:	490c      	ldr	r1, [pc, #48]	; (800a498 <OLED_Clear+0x48>)
 800a468:	00d2      	lsls	r2, r2, #3
 800a46a:	440a      	add	r2, r1
 800a46c:	4413      	add	r3, r2
 800a46e:	2200      	movs	r2, #0
 800a470:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800a472:	79bb      	ldrb	r3, [r7, #6]
 800a474:	3301      	adds	r3, #1
 800a476:	71bb      	strb	r3, [r7, #6]
 800a478:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	daf0      	bge.n	800a462 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800a480:	79fb      	ldrb	r3, [r7, #7]
 800a482:	3301      	adds	r3, #1
 800a484:	71fb      	strb	r3, [r7, #7]
 800a486:	79fb      	ldrb	r3, [r7, #7]
 800a488:	2b07      	cmp	r3, #7
 800a48a:	d9e7      	bls.n	800a45c <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800a48c:	f7ff ff5e 	bl	800a34c <OLED_Refresh_Gram>
}
 800a490:	bf00      	nop
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	20004dc4 	.word	0x20004dc4

0800a49c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	71fb      	strb	r3, [r7, #7]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	71bb      	strb	r3, [r7, #6]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800a4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	db41      	blt.n	800a53e <OLED_DrawPoint+0xa2>
 800a4ba:	79bb      	ldrb	r3, [r7, #6]
 800a4bc:	2b3f      	cmp	r3, #63	; 0x3f
 800a4be:	d83e      	bhi.n	800a53e <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800a4c0:	79bb      	ldrb	r3, [r7, #6]
 800a4c2:	08db      	lsrs	r3, r3, #3
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	f1c3 0307 	rsb	r3, r3, #7
 800a4ca:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800a4cc:	79bb      	ldrb	r3, [r7, #6]
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800a4d4:	7b7b      	ldrb	r3, [r7, #13]
 800a4d6:	f1c3 0307 	rsb	r3, r3, #7
 800a4da:	2201      	movs	r2, #1
 800a4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e0:	73fb      	strb	r3, [r7, #15]
	if (t)
 800a4e2:	797b      	ldrb	r3, [r7, #5]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d012      	beq.n	800a50e <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800a4e8:	79fa      	ldrb	r2, [r7, #7]
 800a4ea:	7bbb      	ldrb	r3, [r7, #14]
 800a4ec:	4917      	ldr	r1, [pc, #92]	; (800a54c <OLED_DrawPoint+0xb0>)
 800a4ee:	00d2      	lsls	r2, r2, #3
 800a4f0:	440a      	add	r2, r1
 800a4f2:	4413      	add	r3, r2
 800a4f4:	7818      	ldrb	r0, [r3, #0]
 800a4f6:	79fa      	ldrb	r2, [r7, #7]
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	7bf9      	ldrb	r1, [r7, #15]
 800a4fc:	4301      	orrs	r1, r0
 800a4fe:	b2c8      	uxtb	r0, r1
 800a500:	4912      	ldr	r1, [pc, #72]	; (800a54c <OLED_DrawPoint+0xb0>)
 800a502:	00d2      	lsls	r2, r2, #3
 800a504:	440a      	add	r2, r1
 800a506:	4413      	add	r3, r2
 800a508:	4602      	mov	r2, r0
 800a50a:	701a      	strb	r2, [r3, #0]
 800a50c:	e018      	b.n	800a540 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800a50e:	79fa      	ldrb	r2, [r7, #7]
 800a510:	7bbb      	ldrb	r3, [r7, #14]
 800a512:	490e      	ldr	r1, [pc, #56]	; (800a54c <OLED_DrawPoint+0xb0>)
 800a514:	00d2      	lsls	r2, r2, #3
 800a516:	440a      	add	r2, r1
 800a518:	4413      	add	r3, r2
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	b25a      	sxtb	r2, r3
 800a51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a522:	43db      	mvns	r3, r3
 800a524:	b25b      	sxtb	r3, r3
 800a526:	4013      	ands	r3, r2
 800a528:	b259      	sxtb	r1, r3
 800a52a:	79fa      	ldrb	r2, [r7, #7]
 800a52c:	7bbb      	ldrb	r3, [r7, #14]
 800a52e:	b2c8      	uxtb	r0, r1
 800a530:	4906      	ldr	r1, [pc, #24]	; (800a54c <OLED_DrawPoint+0xb0>)
 800a532:	00d2      	lsls	r2, r2, #3
 800a534:	440a      	add	r2, r1
 800a536:	4413      	add	r3, r2
 800a538:	4602      	mov	r2, r0
 800a53a:	701a      	strb	r2, [r3, #0]
 800a53c:	e000      	b.n	800a540 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800a53e:	bf00      	nop
}
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	20004dc4 	.word	0x20004dc4

0800a550 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800a550:	b590      	push	{r4, r7, lr}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	4604      	mov	r4, r0
 800a558:	4608      	mov	r0, r1
 800a55a:	4611      	mov	r1, r2
 800a55c:	461a      	mov	r2, r3
 800a55e:	4623      	mov	r3, r4
 800a560:	71fb      	strb	r3, [r7, #7]
 800a562:	4603      	mov	r3, r0
 800a564:	71bb      	strb	r3, [r7, #6]
 800a566:	460b      	mov	r3, r1
 800a568:	717b      	strb	r3, [r7, #5]
 800a56a:	4613      	mov	r3, r2
 800a56c:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800a56e:	79bb      	ldrb	r3, [r7, #6]
 800a570:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800a572:	797b      	ldrb	r3, [r7, #5]
 800a574:	3b20      	subs	r3, #32
 800a576:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800a578:	2300      	movs	r3, #0
 800a57a:	73bb      	strb	r3, [r7, #14]
 800a57c:	e04d      	b.n	800a61a <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800a57e:	793b      	ldrb	r3, [r7, #4]
 800a580:	2b0c      	cmp	r3, #12
 800a582:	d10b      	bne.n	800a59c <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800a584:	797a      	ldrb	r2, [r7, #5]
 800a586:	7bb9      	ldrb	r1, [r7, #14]
 800a588:	4828      	ldr	r0, [pc, #160]	; (800a62c <OLED_ShowChar+0xdc>)
 800a58a:	4613      	mov	r3, r2
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4403      	add	r3, r0
 800a594:	440b      	add	r3, r1
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	73fb      	strb	r3, [r7, #15]
 800a59a:	e007      	b.n	800a5ac <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800a59c:	797a      	ldrb	r2, [r7, #5]
 800a59e:	7bbb      	ldrb	r3, [r7, #14]
 800a5a0:	4923      	ldr	r1, [pc, #140]	; (800a630 <OLED_ShowChar+0xe0>)
 800a5a2:	0112      	lsls	r2, r2, #4
 800a5a4:	440a      	add	r2, r1
 800a5a6:	4413      	add	r3, r2
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	737b      	strb	r3, [r7, #13]
 800a5b0:	e02d      	b.n	800a60e <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800a5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	da07      	bge.n	800a5ca <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800a5ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a5be:	79b9      	ldrb	r1, [r7, #6]
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7ff ff6a 	bl	800a49c <OLED_DrawPoint>
 800a5c8:	e00c      	b.n	800a5e4 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800a5ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bf0c      	ite	eq
 800a5d2:	2301      	moveq	r3, #1
 800a5d4:	2300      	movne	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	461a      	mov	r2, r3
 800a5da:	79b9      	ldrb	r1, [r7, #6]
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff ff5c 	bl	800a49c <OLED_DrawPoint>
			temp <<= 1;
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	73fb      	strb	r3, [r7, #15]
			y++;
 800a5ea:	79bb      	ldrb	r3, [r7, #6]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800a5f0:	79ba      	ldrb	r2, [r7, #6]
 800a5f2:	7b3b      	ldrb	r3, [r7, #12]
 800a5f4:	1ad2      	subs	r2, r2, r3
 800a5f6:	793b      	ldrb	r3, [r7, #4]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d105      	bne.n	800a608 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800a5fc:	7b3b      	ldrb	r3, [r7, #12]
 800a5fe:	71bb      	strb	r3, [r7, #6]
				x++;
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	3301      	adds	r3, #1
 800a604:	71fb      	strb	r3, [r7, #7]
				break;
 800a606:	e005      	b.n	800a614 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800a608:	7b7b      	ldrb	r3, [r7, #13]
 800a60a:	3301      	adds	r3, #1
 800a60c:	737b      	strb	r3, [r7, #13]
 800a60e:	7b7b      	ldrb	r3, [r7, #13]
 800a610:	2b07      	cmp	r3, #7
 800a612:	d9ce      	bls.n	800a5b2 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	3301      	adds	r3, #1
 800a618:	73bb      	strb	r3, [r7, #14]
 800a61a:	7bba      	ldrb	r2, [r7, #14]
 800a61c:	793b      	ldrb	r3, [r7, #4]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d3ad      	bcc.n	800a57e <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800a622:	bf00      	nop
 800a624:	bf00      	nop
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd90      	pop	{r4, r7, pc}
 800a62c:	0800b4f0 	.word	0x0800b4f0
 800a630:	0800b964 	.word	0x0800b964

0800a634 <oled_pow>:

uint32_t oled_pow(uint8_t m, uint8_t n)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	460a      	mov	r2, r1
 800a63e:	71fb      	strb	r3, [r7, #7]
 800a640:	4613      	mov	r3, r2
 800a642:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800a644:	2301      	movs	r3, #1
 800a646:	60fb      	str	r3, [r7, #12]
	while (n--)
 800a648:	e004      	b.n	800a654 <oled_pow+0x20>
		result *= m;
 800a64a:	79fa      	ldrb	r2, [r7, #7]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	fb02 f303 	mul.w	r3, r2, r3
 800a652:	60fb      	str	r3, [r7, #12]
	while (n--)
 800a654:	79bb      	ldrb	r3, [r7, #6]
 800a656:	1e5a      	subs	r2, r3, #1
 800a658:	71ba      	strb	r2, [r7, #6]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1f5      	bne.n	800a64a <oled_pow+0x16>
	return result;
 800a65e:	68fb      	ldr	r3, [r7, #12]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 800a66c:	b590      	push	{r4, r7, lr}
 800a66e:	b087      	sub	sp, #28
 800a670:	af02      	add	r7, sp, #8
 800a672:	603a      	str	r2, [r7, #0]
 800a674:	461a      	mov	r2, r3
 800a676:	4603      	mov	r3, r0
 800a678:	71fb      	strb	r3, [r7, #7]
 800a67a:	460b      	mov	r3, r1
 800a67c:	71bb      	strb	r3, [r7, #6]
 800a67e:	4613      	mov	r3, r2
 800a680:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 800a686:	2300      	movs	r3, #0
 800a688:	73fb      	strb	r3, [r7, #15]
 800a68a:	e051      	b.n	800a730 <OLED_ShowNumber+0xc4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 800a68c:	797a      	ldrb	r2, [r7, #5]
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	b2db      	uxtb	r3, r3
 800a694:	3b01      	subs	r3, #1
 800a696:	b2db      	uxtb	r3, r3
 800a698:	4619      	mov	r1, r3
 800a69a:	200a      	movs	r0, #10
 800a69c:	f7ff ffca 	bl	800a634 <oled_pow>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6a8:	4b26      	ldr	r3, [pc, #152]	; (800a744 <OLED_ShowNumber+0xd8>)
 800a6aa:	fba3 2301 	umull	r2, r3, r3, r1
 800a6ae:	08da      	lsrs	r2, r3, #3
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	1aca      	subs	r2, r1, r3
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 800a6be:	7bbb      	ldrb	r3, [r7, #14]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d11d      	bne.n	800a700 <OLED_ShowNumber+0x94>
 800a6c4:	7bfa      	ldrb	r2, [r7, #15]
 800a6c6:	797b      	ldrb	r3, [r7, #5]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	da18      	bge.n	800a700 <OLED_ShowNumber+0x94>
		{
			if (temp == 0)
 800a6ce:	7b7b      	ldrb	r3, [r7, #13]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d113      	bne.n	800a6fc <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ', size, 1);
 800a6d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6d8:	085b      	lsrs	r3, r3, #1
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	7bfa      	ldrb	r2, [r7, #15]
 800a6de:	fb12 f303 	smulbb	r3, r2, r3
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	b2d8      	uxtb	r0, r3
 800a6ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6ee:	79b9      	ldrb	r1, [r7, #6]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	9200      	str	r2, [sp, #0]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	f7ff ff2b 	bl	800a550 <OLED_ShowChar>
				continue;
 800a6fa:	e016      	b.n	800a72a <OLED_ShowNumber+0xbe>
			}
			else
				enshow = 1;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	73bb      	strb	r3, [r7, #14]
		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
 800a700:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a704:	085b      	lsrs	r3, r3, #1
 800a706:	b2db      	uxtb	r3, r3
 800a708:	7bfa      	ldrb	r2, [r7, #15]
 800a70a:	fb12 f303 	smulbb	r3, r2, r3
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	4413      	add	r3, r2
 800a714:	b2d8      	uxtb	r0, r3
 800a716:	7b7b      	ldrb	r3, [r7, #13]
 800a718:	3330      	adds	r3, #48	; 0x30
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a720:	79b9      	ldrb	r1, [r7, #6]
 800a722:	2401      	movs	r4, #1
 800a724:	9400      	str	r4, [sp, #0]
 800a726:	f7ff ff13 	bl	800a550 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	3301      	adds	r3, #1
 800a72e:	73fb      	strb	r3, [r7, #15]
 800a730:	7bfa      	ldrb	r2, [r7, #15]
 800a732:	797b      	ldrb	r3, [r7, #5]
 800a734:	429a      	cmp	r2, r3
 800a736:	d3a9      	bcc.n	800a68c <OLED_ShowNumber+0x20>
	}
}
 800a738:	bf00      	nop
 800a73a:	bf00      	nop
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd90      	pop	{r4, r7, pc}
 800a742:	bf00      	nop
 800a744:	cccccccd 	.word	0xcccccccd

0800a748 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af02      	add	r7, sp, #8
 800a74e:	4603      	mov	r3, r0
 800a750:	603a      	str	r2, [r7, #0]
 800a752:	71fb      	strb	r3, [r7, #7]
 800a754:	460b      	mov	r3, r1
 800a756:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800a758:	e01f      	b.n	800a79a <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800a75a:	79fb      	ldrb	r3, [r7, #7]
 800a75c:	2b7a      	cmp	r3, #122	; 0x7a
 800a75e:	d904      	bls.n	800a76a <OLED_ShowString+0x22>
		{
			x = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800a764:	79bb      	ldrb	r3, [r7, #6]
 800a766:	3310      	adds	r3, #16
 800a768:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800a76a:	79bb      	ldrb	r3, [r7, #6]
 800a76c:	2b3a      	cmp	r3, #58	; 0x3a
 800a76e:	d905      	bls.n	800a77c <OLED_ShowString+0x34>
		{
			y = x = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	71fb      	strb	r3, [r7, #7]
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800a778:	f7ff fe6a 	bl	800a450 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	79b9      	ldrb	r1, [r7, #6]
 800a782:	79f8      	ldrb	r0, [r7, #7]
 800a784:	2301      	movs	r3, #1
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	230c      	movs	r3, #12
 800a78a:	f7ff fee1 	bl	800a550 <OLED_ShowChar>
		x += 8;
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	3308      	adds	r3, #8
 800a792:	71fb      	strb	r3, [r7, #7]
		p++;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	3301      	adds	r3, #1
 800a798:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1db      	bne.n	800a75a <OLED_ShowString+0x12>
	}
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800a7b0:	f7fa f84c 	bl	800484c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800a7b4:	4b41      	ldr	r3, [pc, #260]	; (800a8bc <OLED_Init+0x110>)
 800a7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b8:	4a40      	ldr	r2, [pc, #256]	; (800a8bc <OLED_Init+0x110>)
 800a7ba:	f023 0301 	bic.w	r3, r3, #1
 800a7be:	6713      	str	r3, [r2, #112]	; 0x70
 800a7c0:	4b3e      	ldr	r3, [pc, #248]	; (800a8bc <OLED_Init+0x110>)
 800a7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c4:	4a3d      	ldr	r2, [pc, #244]	; (800a8bc <OLED_Init+0x110>)
 800a7c6:	f023 0304 	bic.w	r3, r3, #4
 800a7ca:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800a7cc:	f7fa f852 	bl	8004874 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	2180      	movs	r1, #128	; 0x80
 800a7d4:	483a      	ldr	r0, [pc, #232]	; (800a8c0 <OLED_Init+0x114>)
 800a7d6:	f7f9 f85f 	bl	8003898 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800a7da:	2064      	movs	r0, #100	; 0x64
 800a7dc:	f7f8 fd28 	bl	8003230 <HAL_Delay>
	OLED_RST_Set();
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	2180      	movs	r1, #128	; 0x80
 800a7e4:	4836      	ldr	r0, [pc, #216]	; (800a8c0 <OLED_Init+0x114>)
 800a7e6:	f7f9 f857 	bl	8003898 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	20ae      	movs	r0, #174	; 0xae
 800a7ee:	f7ff fde5 	bl	800a3bc <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	20d5      	movs	r0, #213	; 0xd5
 800a7f6:	f7ff fde1 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	2050      	movs	r0, #80	; 0x50
 800a7fe:	f7ff fddd 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800a802:	2100      	movs	r1, #0
 800a804:	20a8      	movs	r0, #168	; 0xa8
 800a806:	f7ff fdd9 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800a80a:	2100      	movs	r1, #0
 800a80c:	203f      	movs	r0, #63	; 0x3f
 800a80e:	f7ff fdd5 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800a812:	2100      	movs	r1, #0
 800a814:	20d3      	movs	r0, #211	; 0xd3
 800a816:	f7ff fdd1 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800a81a:	2100      	movs	r1, #0
 800a81c:	2000      	movs	r0, #0
 800a81e:	f7ff fdcd 	bl	800a3bc <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800a822:	2100      	movs	r1, #0
 800a824:	2040      	movs	r0, #64	; 0x40
 800a826:	f7ff fdc9 	bl	800a3bc <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800a82a:	2100      	movs	r1, #0
 800a82c:	208d      	movs	r0, #141	; 0x8d
 800a82e:	f7ff fdc5 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800a832:	2100      	movs	r1, #0
 800a834:	2014      	movs	r0, #20
 800a836:	f7ff fdc1 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800a83a:	2100      	movs	r1, #0
 800a83c:	2020      	movs	r0, #32
 800a83e:	f7ff fdbd 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800a842:	2100      	movs	r1, #0
 800a844:	2002      	movs	r0, #2
 800a846:	f7ff fdb9 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800a84a:	2100      	movs	r1, #0
 800a84c:	20a1      	movs	r0, #161	; 0xa1
 800a84e:	f7ff fdb5 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800a852:	2100      	movs	r1, #0
 800a854:	20c0      	movs	r0, #192	; 0xc0
 800a856:	f7ff fdb1 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800a85a:	2100      	movs	r1, #0
 800a85c:	20da      	movs	r0, #218	; 0xda
 800a85e:	f7ff fdad 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800a862:	2100      	movs	r1, #0
 800a864:	2012      	movs	r0, #18
 800a866:	f7ff fda9 	bl	800a3bc <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800a86a:	2100      	movs	r1, #0
 800a86c:	2081      	movs	r0, #129	; 0x81
 800a86e:	f7ff fda5 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800a872:	2100      	movs	r1, #0
 800a874:	20ef      	movs	r0, #239	; 0xef
 800a876:	f7ff fda1 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800a87a:	2100      	movs	r1, #0
 800a87c:	20d9      	movs	r0, #217	; 0xd9
 800a87e:	f7ff fd9d 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800a882:	2100      	movs	r1, #0
 800a884:	20f1      	movs	r0, #241	; 0xf1
 800a886:	f7ff fd99 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800a88a:	2100      	movs	r1, #0
 800a88c:	20db      	movs	r0, #219	; 0xdb
 800a88e:	f7ff fd95 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800a892:	2100      	movs	r1, #0
 800a894:	2030      	movs	r0, #48	; 0x30
 800a896:	f7ff fd91 	bl	800a3bc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800a89a:	2100      	movs	r1, #0
 800a89c:	20a4      	movs	r0, #164	; 0xa4
 800a89e:	f7ff fd8d 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	20a6      	movs	r0, #166	; 0xa6
 800a8a6:	f7ff fd89 	bl	800a3bc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	20af      	movs	r0, #175	; 0xaf
 800a8ae:	f7ff fd85 	bl	800a3bc <OLED_WR_Byte>
	OLED_Clear();
 800a8b2:	f7ff fdcd 	bl	800a450 <OLED_Clear>
 800a8b6:	bf00      	nop
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	40023800 	.word	0x40023800
 800a8c0:	40021000 	.word	0x40021000

0800a8c4 <sniprintf>:
 800a8c4:	b40c      	push	{r2, r3}
 800a8c6:	b530      	push	{r4, r5, lr}
 800a8c8:	4b17      	ldr	r3, [pc, #92]	; (800a928 <sniprintf+0x64>)
 800a8ca:	1e0c      	subs	r4, r1, #0
 800a8cc:	681d      	ldr	r5, [r3, #0]
 800a8ce:	b09d      	sub	sp, #116	; 0x74
 800a8d0:	da08      	bge.n	800a8e4 <sniprintf+0x20>
 800a8d2:	238b      	movs	r3, #139	; 0x8b
 800a8d4:	602b      	str	r3, [r5, #0]
 800a8d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8da:	b01d      	add	sp, #116	; 0x74
 800a8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8e0:	b002      	add	sp, #8
 800a8e2:	4770      	bx	lr
 800a8e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8ec:	bf14      	ite	ne
 800a8ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a8f2:	4623      	moveq	r3, r4
 800a8f4:	9304      	str	r3, [sp, #16]
 800a8f6:	9307      	str	r3, [sp, #28]
 800a8f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8fc:	9002      	str	r0, [sp, #8]
 800a8fe:	9006      	str	r0, [sp, #24]
 800a900:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a904:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a906:	ab21      	add	r3, sp, #132	; 0x84
 800a908:	a902      	add	r1, sp, #8
 800a90a:	4628      	mov	r0, r5
 800a90c:	9301      	str	r3, [sp, #4]
 800a90e:	f000 f8c9 	bl	800aaa4 <_svfiprintf_r>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	bfbc      	itt	lt
 800a916:	238b      	movlt	r3, #139	; 0x8b
 800a918:	602b      	strlt	r3, [r5, #0]
 800a91a:	2c00      	cmp	r4, #0
 800a91c:	d0dd      	beq.n	800a8da <sniprintf+0x16>
 800a91e:	9b02      	ldr	r3, [sp, #8]
 800a920:	2200      	movs	r2, #0
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	e7d9      	b.n	800a8da <sniprintf+0x16>
 800a926:	bf00      	nop
 800a928:	200001a0 	.word	0x200001a0

0800a92c <siprintf>:
 800a92c:	b40e      	push	{r1, r2, r3}
 800a92e:	b500      	push	{lr}
 800a930:	b09c      	sub	sp, #112	; 0x70
 800a932:	ab1d      	add	r3, sp, #116	; 0x74
 800a934:	9002      	str	r0, [sp, #8]
 800a936:	9006      	str	r0, [sp, #24]
 800a938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a93c:	4809      	ldr	r0, [pc, #36]	; (800a964 <siprintf+0x38>)
 800a93e:	9107      	str	r1, [sp, #28]
 800a940:	9104      	str	r1, [sp, #16]
 800a942:	4909      	ldr	r1, [pc, #36]	; (800a968 <siprintf+0x3c>)
 800a944:	f853 2b04 	ldr.w	r2, [r3], #4
 800a948:	9105      	str	r1, [sp, #20]
 800a94a:	6800      	ldr	r0, [r0, #0]
 800a94c:	9301      	str	r3, [sp, #4]
 800a94e:	a902      	add	r1, sp, #8
 800a950:	f000 f8a8 	bl	800aaa4 <_svfiprintf_r>
 800a954:	9b02      	ldr	r3, [sp, #8]
 800a956:	2200      	movs	r2, #0
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	b01c      	add	sp, #112	; 0x70
 800a95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a960:	b003      	add	sp, #12
 800a962:	4770      	bx	lr
 800a964:	200001a0 	.word	0x200001a0
 800a968:	ffff0208 	.word	0xffff0208

0800a96c <memset>:
 800a96c:	4402      	add	r2, r0
 800a96e:	4603      	mov	r3, r0
 800a970:	4293      	cmp	r3, r2
 800a972:	d100      	bne.n	800a976 <memset+0xa>
 800a974:	4770      	bx	lr
 800a976:	f803 1b01 	strb.w	r1, [r3], #1
 800a97a:	e7f9      	b.n	800a970 <memset+0x4>

0800a97c <__errno>:
 800a97c:	4b01      	ldr	r3, [pc, #4]	; (800a984 <__errno+0x8>)
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	200001a0 	.word	0x200001a0

0800a988 <__libc_init_array>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	4d0d      	ldr	r5, [pc, #52]	; (800a9c0 <__libc_init_array+0x38>)
 800a98c:	4c0d      	ldr	r4, [pc, #52]	; (800a9c4 <__libc_init_array+0x3c>)
 800a98e:	1b64      	subs	r4, r4, r5
 800a990:	10a4      	asrs	r4, r4, #2
 800a992:	2600      	movs	r6, #0
 800a994:	42a6      	cmp	r6, r4
 800a996:	d109      	bne.n	800a9ac <__libc_init_array+0x24>
 800a998:	4d0b      	ldr	r5, [pc, #44]	; (800a9c8 <__libc_init_array+0x40>)
 800a99a:	4c0c      	ldr	r4, [pc, #48]	; (800a9cc <__libc_init_array+0x44>)
 800a99c:	f000 fc6a 	bl	800b274 <_init>
 800a9a0:	1b64      	subs	r4, r4, r5
 800a9a2:	10a4      	asrs	r4, r4, #2
 800a9a4:	2600      	movs	r6, #0
 800a9a6:	42a6      	cmp	r6, r4
 800a9a8:	d105      	bne.n	800a9b6 <__libc_init_array+0x2e>
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b0:	4798      	blx	r3
 800a9b2:	3601      	adds	r6, #1
 800a9b4:	e7ee      	b.n	800a994 <__libc_init_array+0xc>
 800a9b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ba:	4798      	blx	r3
 800a9bc:	3601      	adds	r6, #1
 800a9be:	e7f2      	b.n	800a9a6 <__libc_init_array+0x1e>
 800a9c0:	0800bf90 	.word	0x0800bf90
 800a9c4:	0800bf90 	.word	0x0800bf90
 800a9c8:	0800bf90 	.word	0x0800bf90
 800a9cc:	0800bf94 	.word	0x0800bf94

0800a9d0 <__retarget_lock_acquire_recursive>:
 800a9d0:	4770      	bx	lr

0800a9d2 <__retarget_lock_release_recursive>:
 800a9d2:	4770      	bx	lr

0800a9d4 <memcpy>:
 800a9d4:	440a      	add	r2, r1
 800a9d6:	4291      	cmp	r1, r2
 800a9d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a9dc:	d100      	bne.n	800a9e0 <memcpy+0xc>
 800a9de:	4770      	bx	lr
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ea:	4291      	cmp	r1, r2
 800a9ec:	d1f9      	bne.n	800a9e2 <memcpy+0xe>
 800a9ee:	bd10      	pop	{r4, pc}

0800a9f0 <__ssputs_r>:
 800a9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f4:	688e      	ldr	r6, [r1, #8]
 800a9f6:	461f      	mov	r7, r3
 800a9f8:	42be      	cmp	r6, r7
 800a9fa:	680b      	ldr	r3, [r1, #0]
 800a9fc:	4682      	mov	sl, r0
 800a9fe:	460c      	mov	r4, r1
 800aa00:	4690      	mov	r8, r2
 800aa02:	d82c      	bhi.n	800aa5e <__ssputs_r+0x6e>
 800aa04:	898a      	ldrh	r2, [r1, #12]
 800aa06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa0a:	d026      	beq.n	800aa5a <__ssputs_r+0x6a>
 800aa0c:	6965      	ldr	r5, [r4, #20]
 800aa0e:	6909      	ldr	r1, [r1, #16]
 800aa10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa14:	eba3 0901 	sub.w	r9, r3, r1
 800aa18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa1c:	1c7b      	adds	r3, r7, #1
 800aa1e:	444b      	add	r3, r9
 800aa20:	106d      	asrs	r5, r5, #1
 800aa22:	429d      	cmp	r5, r3
 800aa24:	bf38      	it	cc
 800aa26:	461d      	movcc	r5, r3
 800aa28:	0553      	lsls	r3, r2, #21
 800aa2a:	d527      	bpl.n	800aa7c <__ssputs_r+0x8c>
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	f000 f957 	bl	800ace0 <_malloc_r>
 800aa32:	4606      	mov	r6, r0
 800aa34:	b360      	cbz	r0, 800aa90 <__ssputs_r+0xa0>
 800aa36:	6921      	ldr	r1, [r4, #16]
 800aa38:	464a      	mov	r2, r9
 800aa3a:	f7ff ffcb 	bl	800a9d4 <memcpy>
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa48:	81a3      	strh	r3, [r4, #12]
 800aa4a:	6126      	str	r6, [r4, #16]
 800aa4c:	6165      	str	r5, [r4, #20]
 800aa4e:	444e      	add	r6, r9
 800aa50:	eba5 0509 	sub.w	r5, r5, r9
 800aa54:	6026      	str	r6, [r4, #0]
 800aa56:	60a5      	str	r5, [r4, #8]
 800aa58:	463e      	mov	r6, r7
 800aa5a:	42be      	cmp	r6, r7
 800aa5c:	d900      	bls.n	800aa60 <__ssputs_r+0x70>
 800aa5e:	463e      	mov	r6, r7
 800aa60:	6820      	ldr	r0, [r4, #0]
 800aa62:	4632      	mov	r2, r6
 800aa64:	4641      	mov	r1, r8
 800aa66:	f000 fb86 	bl	800b176 <memmove>
 800aa6a:	68a3      	ldr	r3, [r4, #8]
 800aa6c:	1b9b      	subs	r3, r3, r6
 800aa6e:	60a3      	str	r3, [r4, #8]
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	4433      	add	r3, r6
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	2000      	movs	r0, #0
 800aa78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa7c:	462a      	mov	r2, r5
 800aa7e:	f000 fb4b 	bl	800b118 <_realloc_r>
 800aa82:	4606      	mov	r6, r0
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d1e0      	bne.n	800aa4a <__ssputs_r+0x5a>
 800aa88:	6921      	ldr	r1, [r4, #16]
 800aa8a:	4650      	mov	r0, sl
 800aa8c:	f000 fb9e 	bl	800b1cc <_free_r>
 800aa90:	230c      	movs	r3, #12
 800aa92:	f8ca 3000 	str.w	r3, [sl]
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa9c:	81a3      	strh	r3, [r4, #12]
 800aa9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaa2:	e7e9      	b.n	800aa78 <__ssputs_r+0x88>

0800aaa4 <_svfiprintf_r>:
 800aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	4698      	mov	r8, r3
 800aaaa:	898b      	ldrh	r3, [r1, #12]
 800aaac:	061b      	lsls	r3, r3, #24
 800aaae:	b09d      	sub	sp, #116	; 0x74
 800aab0:	4607      	mov	r7, r0
 800aab2:	460d      	mov	r5, r1
 800aab4:	4614      	mov	r4, r2
 800aab6:	d50e      	bpl.n	800aad6 <_svfiprintf_r+0x32>
 800aab8:	690b      	ldr	r3, [r1, #16]
 800aaba:	b963      	cbnz	r3, 800aad6 <_svfiprintf_r+0x32>
 800aabc:	2140      	movs	r1, #64	; 0x40
 800aabe:	f000 f90f 	bl	800ace0 <_malloc_r>
 800aac2:	6028      	str	r0, [r5, #0]
 800aac4:	6128      	str	r0, [r5, #16]
 800aac6:	b920      	cbnz	r0, 800aad2 <_svfiprintf_r+0x2e>
 800aac8:	230c      	movs	r3, #12
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aad0:	e0d0      	b.n	800ac74 <_svfiprintf_r+0x1d0>
 800aad2:	2340      	movs	r3, #64	; 0x40
 800aad4:	616b      	str	r3, [r5, #20]
 800aad6:	2300      	movs	r3, #0
 800aad8:	9309      	str	r3, [sp, #36]	; 0x24
 800aada:	2320      	movs	r3, #32
 800aadc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aae0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aae4:	2330      	movs	r3, #48	; 0x30
 800aae6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac8c <_svfiprintf_r+0x1e8>
 800aaea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaee:	f04f 0901 	mov.w	r9, #1
 800aaf2:	4623      	mov	r3, r4
 800aaf4:	469a      	mov	sl, r3
 800aaf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aafa:	b10a      	cbz	r2, 800ab00 <_svfiprintf_r+0x5c>
 800aafc:	2a25      	cmp	r2, #37	; 0x25
 800aafe:	d1f9      	bne.n	800aaf4 <_svfiprintf_r+0x50>
 800ab00:	ebba 0b04 	subs.w	fp, sl, r4
 800ab04:	d00b      	beq.n	800ab1e <_svfiprintf_r+0x7a>
 800ab06:	465b      	mov	r3, fp
 800ab08:	4622      	mov	r2, r4
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	f7ff ff6f 	bl	800a9f0 <__ssputs_r>
 800ab12:	3001      	adds	r0, #1
 800ab14:	f000 80a9 	beq.w	800ac6a <_svfiprintf_r+0x1c6>
 800ab18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab1a:	445a      	add	r2, fp
 800ab1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f000 80a1 	beq.w	800ac6a <_svfiprintf_r+0x1c6>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab32:	f10a 0a01 	add.w	sl, sl, #1
 800ab36:	9304      	str	r3, [sp, #16]
 800ab38:	9307      	str	r3, [sp, #28]
 800ab3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab3e:	931a      	str	r3, [sp, #104]	; 0x68
 800ab40:	4654      	mov	r4, sl
 800ab42:	2205      	movs	r2, #5
 800ab44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab48:	4850      	ldr	r0, [pc, #320]	; (800ac8c <_svfiprintf_r+0x1e8>)
 800ab4a:	f7f5 fb41 	bl	80001d0 <memchr>
 800ab4e:	9a04      	ldr	r2, [sp, #16]
 800ab50:	b9d8      	cbnz	r0, 800ab8a <_svfiprintf_r+0xe6>
 800ab52:	06d0      	lsls	r0, r2, #27
 800ab54:	bf44      	itt	mi
 800ab56:	2320      	movmi	r3, #32
 800ab58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab5c:	0711      	lsls	r1, r2, #28
 800ab5e:	bf44      	itt	mi
 800ab60:	232b      	movmi	r3, #43	; 0x2b
 800ab62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab66:	f89a 3000 	ldrb.w	r3, [sl]
 800ab6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab6c:	d015      	beq.n	800ab9a <_svfiprintf_r+0xf6>
 800ab6e:	9a07      	ldr	r2, [sp, #28]
 800ab70:	4654      	mov	r4, sl
 800ab72:	2000      	movs	r0, #0
 800ab74:	f04f 0c0a 	mov.w	ip, #10
 800ab78:	4621      	mov	r1, r4
 800ab7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab7e:	3b30      	subs	r3, #48	; 0x30
 800ab80:	2b09      	cmp	r3, #9
 800ab82:	d94d      	bls.n	800ac20 <_svfiprintf_r+0x17c>
 800ab84:	b1b0      	cbz	r0, 800abb4 <_svfiprintf_r+0x110>
 800ab86:	9207      	str	r2, [sp, #28]
 800ab88:	e014      	b.n	800abb4 <_svfiprintf_r+0x110>
 800ab8a:	eba0 0308 	sub.w	r3, r0, r8
 800ab8e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab92:	4313      	orrs	r3, r2
 800ab94:	9304      	str	r3, [sp, #16]
 800ab96:	46a2      	mov	sl, r4
 800ab98:	e7d2      	b.n	800ab40 <_svfiprintf_r+0x9c>
 800ab9a:	9b03      	ldr	r3, [sp, #12]
 800ab9c:	1d19      	adds	r1, r3, #4
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	9103      	str	r1, [sp, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	bfbb      	ittet	lt
 800aba6:	425b      	neglt	r3, r3
 800aba8:	f042 0202 	orrlt.w	r2, r2, #2
 800abac:	9307      	strge	r3, [sp, #28]
 800abae:	9307      	strlt	r3, [sp, #28]
 800abb0:	bfb8      	it	lt
 800abb2:	9204      	strlt	r2, [sp, #16]
 800abb4:	7823      	ldrb	r3, [r4, #0]
 800abb6:	2b2e      	cmp	r3, #46	; 0x2e
 800abb8:	d10c      	bne.n	800abd4 <_svfiprintf_r+0x130>
 800abba:	7863      	ldrb	r3, [r4, #1]
 800abbc:	2b2a      	cmp	r3, #42	; 0x2a
 800abbe:	d134      	bne.n	800ac2a <_svfiprintf_r+0x186>
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	1d1a      	adds	r2, r3, #4
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	9203      	str	r2, [sp, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	bfb8      	it	lt
 800abcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800abd0:	3402      	adds	r4, #2
 800abd2:	9305      	str	r3, [sp, #20]
 800abd4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac9c <_svfiprintf_r+0x1f8>
 800abd8:	7821      	ldrb	r1, [r4, #0]
 800abda:	2203      	movs	r2, #3
 800abdc:	4650      	mov	r0, sl
 800abde:	f7f5 faf7 	bl	80001d0 <memchr>
 800abe2:	b138      	cbz	r0, 800abf4 <_svfiprintf_r+0x150>
 800abe4:	9b04      	ldr	r3, [sp, #16]
 800abe6:	eba0 000a 	sub.w	r0, r0, sl
 800abea:	2240      	movs	r2, #64	; 0x40
 800abec:	4082      	lsls	r2, r0
 800abee:	4313      	orrs	r3, r2
 800abf0:	3401      	adds	r4, #1
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf8:	4825      	ldr	r0, [pc, #148]	; (800ac90 <_svfiprintf_r+0x1ec>)
 800abfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abfe:	2206      	movs	r2, #6
 800ac00:	f7f5 fae6 	bl	80001d0 <memchr>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d038      	beq.n	800ac7a <_svfiprintf_r+0x1d6>
 800ac08:	4b22      	ldr	r3, [pc, #136]	; (800ac94 <_svfiprintf_r+0x1f0>)
 800ac0a:	bb1b      	cbnz	r3, 800ac54 <_svfiprintf_r+0x1b0>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	3307      	adds	r3, #7
 800ac10:	f023 0307 	bic.w	r3, r3, #7
 800ac14:	3308      	adds	r3, #8
 800ac16:	9303      	str	r3, [sp, #12]
 800ac18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1a:	4433      	add	r3, r6
 800ac1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1e:	e768      	b.n	800aaf2 <_svfiprintf_r+0x4e>
 800ac20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac24:	460c      	mov	r4, r1
 800ac26:	2001      	movs	r0, #1
 800ac28:	e7a6      	b.n	800ab78 <_svfiprintf_r+0xd4>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	3401      	adds	r4, #1
 800ac2e:	9305      	str	r3, [sp, #20]
 800ac30:	4619      	mov	r1, r3
 800ac32:	f04f 0c0a 	mov.w	ip, #10
 800ac36:	4620      	mov	r0, r4
 800ac38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac3c:	3a30      	subs	r2, #48	; 0x30
 800ac3e:	2a09      	cmp	r2, #9
 800ac40:	d903      	bls.n	800ac4a <_svfiprintf_r+0x1a6>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0c6      	beq.n	800abd4 <_svfiprintf_r+0x130>
 800ac46:	9105      	str	r1, [sp, #20]
 800ac48:	e7c4      	b.n	800abd4 <_svfiprintf_r+0x130>
 800ac4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac4e:	4604      	mov	r4, r0
 800ac50:	2301      	movs	r3, #1
 800ac52:	e7f0      	b.n	800ac36 <_svfiprintf_r+0x192>
 800ac54:	ab03      	add	r3, sp, #12
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	462a      	mov	r2, r5
 800ac5a:	4b0f      	ldr	r3, [pc, #60]	; (800ac98 <_svfiprintf_r+0x1f4>)
 800ac5c:	a904      	add	r1, sp, #16
 800ac5e:	4638      	mov	r0, r7
 800ac60:	f3af 8000 	nop.w
 800ac64:	1c42      	adds	r2, r0, #1
 800ac66:	4606      	mov	r6, r0
 800ac68:	d1d6      	bne.n	800ac18 <_svfiprintf_r+0x174>
 800ac6a:	89ab      	ldrh	r3, [r5, #12]
 800ac6c:	065b      	lsls	r3, r3, #25
 800ac6e:	f53f af2d 	bmi.w	800aacc <_svfiprintf_r+0x28>
 800ac72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac74:	b01d      	add	sp, #116	; 0x74
 800ac76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7a:	ab03      	add	r3, sp, #12
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4b05      	ldr	r3, [pc, #20]	; (800ac98 <_svfiprintf_r+0x1f4>)
 800ac82:	a904      	add	r1, sp, #16
 800ac84:	4638      	mov	r0, r7
 800ac86:	f000 f919 	bl	800aebc <_printf_i>
 800ac8a:	e7eb      	b.n	800ac64 <_svfiprintf_r+0x1c0>
 800ac8c:	0800bf54 	.word	0x0800bf54
 800ac90:	0800bf5e 	.word	0x0800bf5e
 800ac94:	00000000 	.word	0x00000000
 800ac98:	0800a9f1 	.word	0x0800a9f1
 800ac9c:	0800bf5a 	.word	0x0800bf5a

0800aca0 <sbrk_aligned>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	4e0e      	ldr	r6, [pc, #56]	; (800acdc <sbrk_aligned+0x3c>)
 800aca4:	460c      	mov	r4, r1
 800aca6:	6831      	ldr	r1, [r6, #0]
 800aca8:	4605      	mov	r5, r0
 800acaa:	b911      	cbnz	r1, 800acb2 <sbrk_aligned+0x12>
 800acac:	f000 fa7e 	bl	800b1ac <_sbrk_r>
 800acb0:	6030      	str	r0, [r6, #0]
 800acb2:	4621      	mov	r1, r4
 800acb4:	4628      	mov	r0, r5
 800acb6:	f000 fa79 	bl	800b1ac <_sbrk_r>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	d00a      	beq.n	800acd4 <sbrk_aligned+0x34>
 800acbe:	1cc4      	adds	r4, r0, #3
 800acc0:	f024 0403 	bic.w	r4, r4, #3
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d007      	beq.n	800acd8 <sbrk_aligned+0x38>
 800acc8:	1a21      	subs	r1, r4, r0
 800acca:	4628      	mov	r0, r5
 800accc:	f000 fa6e 	bl	800b1ac <_sbrk_r>
 800acd0:	3001      	adds	r0, #1
 800acd2:	d101      	bne.n	800acd8 <sbrk_aligned+0x38>
 800acd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800acd8:	4620      	mov	r0, r4
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	20005304 	.word	0x20005304

0800ace0 <_malloc_r>:
 800ace0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace4:	1ccd      	adds	r5, r1, #3
 800ace6:	f025 0503 	bic.w	r5, r5, #3
 800acea:	3508      	adds	r5, #8
 800acec:	2d0c      	cmp	r5, #12
 800acee:	bf38      	it	cc
 800acf0:	250c      	movcc	r5, #12
 800acf2:	2d00      	cmp	r5, #0
 800acf4:	4607      	mov	r7, r0
 800acf6:	db01      	blt.n	800acfc <_malloc_r+0x1c>
 800acf8:	42a9      	cmp	r1, r5
 800acfa:	d905      	bls.n	800ad08 <_malloc_r+0x28>
 800acfc:	230c      	movs	r3, #12
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	2600      	movs	r6, #0
 800ad02:	4630      	mov	r0, r6
 800ad04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800addc <_malloc_r+0xfc>
 800ad0c:	f000 f9f8 	bl	800b100 <__malloc_lock>
 800ad10:	f8d8 3000 	ldr.w	r3, [r8]
 800ad14:	461c      	mov	r4, r3
 800ad16:	bb5c      	cbnz	r4, 800ad70 <_malloc_r+0x90>
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	f7ff ffc0 	bl	800aca0 <sbrk_aligned>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	4604      	mov	r4, r0
 800ad24:	d155      	bne.n	800add2 <_malloc_r+0xf2>
 800ad26:	f8d8 4000 	ldr.w	r4, [r8]
 800ad2a:	4626      	mov	r6, r4
 800ad2c:	2e00      	cmp	r6, #0
 800ad2e:	d145      	bne.n	800adbc <_malloc_r+0xdc>
 800ad30:	2c00      	cmp	r4, #0
 800ad32:	d048      	beq.n	800adc6 <_malloc_r+0xe6>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	4631      	mov	r1, r6
 800ad38:	4638      	mov	r0, r7
 800ad3a:	eb04 0903 	add.w	r9, r4, r3
 800ad3e:	f000 fa35 	bl	800b1ac <_sbrk_r>
 800ad42:	4581      	cmp	r9, r0
 800ad44:	d13f      	bne.n	800adc6 <_malloc_r+0xe6>
 800ad46:	6821      	ldr	r1, [r4, #0]
 800ad48:	1a6d      	subs	r5, r5, r1
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f7ff ffa7 	bl	800aca0 <sbrk_aligned>
 800ad52:	3001      	adds	r0, #1
 800ad54:	d037      	beq.n	800adc6 <_malloc_r+0xe6>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	442b      	add	r3, r5
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d038      	beq.n	800add6 <_malloc_r+0xf6>
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	42a2      	cmp	r2, r4
 800ad68:	d12b      	bne.n	800adc2 <_malloc_r+0xe2>
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	605a      	str	r2, [r3, #4]
 800ad6e:	e00f      	b.n	800ad90 <_malloc_r+0xb0>
 800ad70:	6822      	ldr	r2, [r4, #0]
 800ad72:	1b52      	subs	r2, r2, r5
 800ad74:	d41f      	bmi.n	800adb6 <_malloc_r+0xd6>
 800ad76:	2a0b      	cmp	r2, #11
 800ad78:	d917      	bls.n	800adaa <_malloc_r+0xca>
 800ad7a:	1961      	adds	r1, r4, r5
 800ad7c:	42a3      	cmp	r3, r4
 800ad7e:	6025      	str	r5, [r4, #0]
 800ad80:	bf18      	it	ne
 800ad82:	6059      	strne	r1, [r3, #4]
 800ad84:	6863      	ldr	r3, [r4, #4]
 800ad86:	bf08      	it	eq
 800ad88:	f8c8 1000 	streq.w	r1, [r8]
 800ad8c:	5162      	str	r2, [r4, r5]
 800ad8e:	604b      	str	r3, [r1, #4]
 800ad90:	4638      	mov	r0, r7
 800ad92:	f104 060b 	add.w	r6, r4, #11
 800ad96:	f000 f9b9 	bl	800b10c <__malloc_unlock>
 800ad9a:	f026 0607 	bic.w	r6, r6, #7
 800ad9e:	1d23      	adds	r3, r4, #4
 800ada0:	1af2      	subs	r2, r6, r3
 800ada2:	d0ae      	beq.n	800ad02 <_malloc_r+0x22>
 800ada4:	1b9b      	subs	r3, r3, r6
 800ada6:	50a3      	str	r3, [r4, r2]
 800ada8:	e7ab      	b.n	800ad02 <_malloc_r+0x22>
 800adaa:	42a3      	cmp	r3, r4
 800adac:	6862      	ldr	r2, [r4, #4]
 800adae:	d1dd      	bne.n	800ad6c <_malloc_r+0x8c>
 800adb0:	f8c8 2000 	str.w	r2, [r8]
 800adb4:	e7ec      	b.n	800ad90 <_malloc_r+0xb0>
 800adb6:	4623      	mov	r3, r4
 800adb8:	6864      	ldr	r4, [r4, #4]
 800adba:	e7ac      	b.n	800ad16 <_malloc_r+0x36>
 800adbc:	4634      	mov	r4, r6
 800adbe:	6876      	ldr	r6, [r6, #4]
 800adc0:	e7b4      	b.n	800ad2c <_malloc_r+0x4c>
 800adc2:	4613      	mov	r3, r2
 800adc4:	e7cc      	b.n	800ad60 <_malloc_r+0x80>
 800adc6:	230c      	movs	r3, #12
 800adc8:	603b      	str	r3, [r7, #0]
 800adca:	4638      	mov	r0, r7
 800adcc:	f000 f99e 	bl	800b10c <__malloc_unlock>
 800add0:	e797      	b.n	800ad02 <_malloc_r+0x22>
 800add2:	6025      	str	r5, [r4, #0]
 800add4:	e7dc      	b.n	800ad90 <_malloc_r+0xb0>
 800add6:	605b      	str	r3, [r3, #4]
 800add8:	deff      	udf	#255	; 0xff
 800adda:	bf00      	nop
 800addc:	20005300 	.word	0x20005300

0800ade0 <_printf_common>:
 800ade0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade4:	4616      	mov	r6, r2
 800ade6:	4699      	mov	r9, r3
 800ade8:	688a      	ldr	r2, [r1, #8]
 800adea:	690b      	ldr	r3, [r1, #16]
 800adec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adf0:	4293      	cmp	r3, r2
 800adf2:	bfb8      	it	lt
 800adf4:	4613      	movlt	r3, r2
 800adf6:	6033      	str	r3, [r6, #0]
 800adf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800adfc:	4607      	mov	r7, r0
 800adfe:	460c      	mov	r4, r1
 800ae00:	b10a      	cbz	r2, 800ae06 <_printf_common+0x26>
 800ae02:	3301      	adds	r3, #1
 800ae04:	6033      	str	r3, [r6, #0]
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	0699      	lsls	r1, r3, #26
 800ae0a:	bf42      	ittt	mi
 800ae0c:	6833      	ldrmi	r3, [r6, #0]
 800ae0e:	3302      	addmi	r3, #2
 800ae10:	6033      	strmi	r3, [r6, #0]
 800ae12:	6825      	ldr	r5, [r4, #0]
 800ae14:	f015 0506 	ands.w	r5, r5, #6
 800ae18:	d106      	bne.n	800ae28 <_printf_common+0x48>
 800ae1a:	f104 0a19 	add.w	sl, r4, #25
 800ae1e:	68e3      	ldr	r3, [r4, #12]
 800ae20:	6832      	ldr	r2, [r6, #0]
 800ae22:	1a9b      	subs	r3, r3, r2
 800ae24:	42ab      	cmp	r3, r5
 800ae26:	dc26      	bgt.n	800ae76 <_printf_common+0x96>
 800ae28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae2c:	1e13      	subs	r3, r2, #0
 800ae2e:	6822      	ldr	r2, [r4, #0]
 800ae30:	bf18      	it	ne
 800ae32:	2301      	movne	r3, #1
 800ae34:	0692      	lsls	r2, r2, #26
 800ae36:	d42b      	bmi.n	800ae90 <_printf_common+0xb0>
 800ae38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae3c:	4649      	mov	r1, r9
 800ae3e:	4638      	mov	r0, r7
 800ae40:	47c0      	blx	r8
 800ae42:	3001      	adds	r0, #1
 800ae44:	d01e      	beq.n	800ae84 <_printf_common+0xa4>
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	6922      	ldr	r2, [r4, #16]
 800ae4a:	f003 0306 	and.w	r3, r3, #6
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	bf02      	ittt	eq
 800ae52:	68e5      	ldreq	r5, [r4, #12]
 800ae54:	6833      	ldreq	r3, [r6, #0]
 800ae56:	1aed      	subeq	r5, r5, r3
 800ae58:	68a3      	ldr	r3, [r4, #8]
 800ae5a:	bf0c      	ite	eq
 800ae5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae60:	2500      	movne	r5, #0
 800ae62:	4293      	cmp	r3, r2
 800ae64:	bfc4      	itt	gt
 800ae66:	1a9b      	subgt	r3, r3, r2
 800ae68:	18ed      	addgt	r5, r5, r3
 800ae6a:	2600      	movs	r6, #0
 800ae6c:	341a      	adds	r4, #26
 800ae6e:	42b5      	cmp	r5, r6
 800ae70:	d11a      	bne.n	800aea8 <_printf_common+0xc8>
 800ae72:	2000      	movs	r0, #0
 800ae74:	e008      	b.n	800ae88 <_printf_common+0xa8>
 800ae76:	2301      	movs	r3, #1
 800ae78:	4652      	mov	r2, sl
 800ae7a:	4649      	mov	r1, r9
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	47c0      	blx	r8
 800ae80:	3001      	adds	r0, #1
 800ae82:	d103      	bne.n	800ae8c <_printf_common+0xac>
 800ae84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8c:	3501      	adds	r5, #1
 800ae8e:	e7c6      	b.n	800ae1e <_printf_common+0x3e>
 800ae90:	18e1      	adds	r1, r4, r3
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	2030      	movs	r0, #48	; 0x30
 800ae96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae9a:	4422      	add	r2, r4
 800ae9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aea4:	3302      	adds	r3, #2
 800aea6:	e7c7      	b.n	800ae38 <_printf_common+0x58>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	4622      	mov	r2, r4
 800aeac:	4649      	mov	r1, r9
 800aeae:	4638      	mov	r0, r7
 800aeb0:	47c0      	blx	r8
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	d0e6      	beq.n	800ae84 <_printf_common+0xa4>
 800aeb6:	3601      	adds	r6, #1
 800aeb8:	e7d9      	b.n	800ae6e <_printf_common+0x8e>
	...

0800aebc <_printf_i>:
 800aebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aec0:	7e0f      	ldrb	r7, [r1, #24]
 800aec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aec4:	2f78      	cmp	r7, #120	; 0x78
 800aec6:	4691      	mov	r9, r2
 800aec8:	4680      	mov	r8, r0
 800aeca:	460c      	mov	r4, r1
 800aecc:	469a      	mov	sl, r3
 800aece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aed2:	d807      	bhi.n	800aee4 <_printf_i+0x28>
 800aed4:	2f62      	cmp	r7, #98	; 0x62
 800aed6:	d80a      	bhi.n	800aeee <_printf_i+0x32>
 800aed8:	2f00      	cmp	r7, #0
 800aeda:	f000 80d4 	beq.w	800b086 <_printf_i+0x1ca>
 800aede:	2f58      	cmp	r7, #88	; 0x58
 800aee0:	f000 80c0 	beq.w	800b064 <_printf_i+0x1a8>
 800aee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aeec:	e03a      	b.n	800af64 <_printf_i+0xa8>
 800aeee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aef2:	2b15      	cmp	r3, #21
 800aef4:	d8f6      	bhi.n	800aee4 <_printf_i+0x28>
 800aef6:	a101      	add	r1, pc, #4	; (adr r1, 800aefc <_printf_i+0x40>)
 800aef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aefc:	0800af55 	.word	0x0800af55
 800af00:	0800af69 	.word	0x0800af69
 800af04:	0800aee5 	.word	0x0800aee5
 800af08:	0800aee5 	.word	0x0800aee5
 800af0c:	0800aee5 	.word	0x0800aee5
 800af10:	0800aee5 	.word	0x0800aee5
 800af14:	0800af69 	.word	0x0800af69
 800af18:	0800aee5 	.word	0x0800aee5
 800af1c:	0800aee5 	.word	0x0800aee5
 800af20:	0800aee5 	.word	0x0800aee5
 800af24:	0800aee5 	.word	0x0800aee5
 800af28:	0800b06d 	.word	0x0800b06d
 800af2c:	0800af95 	.word	0x0800af95
 800af30:	0800b027 	.word	0x0800b027
 800af34:	0800aee5 	.word	0x0800aee5
 800af38:	0800aee5 	.word	0x0800aee5
 800af3c:	0800b08f 	.word	0x0800b08f
 800af40:	0800aee5 	.word	0x0800aee5
 800af44:	0800af95 	.word	0x0800af95
 800af48:	0800aee5 	.word	0x0800aee5
 800af4c:	0800aee5 	.word	0x0800aee5
 800af50:	0800b02f 	.word	0x0800b02f
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	1d1a      	adds	r2, r3, #4
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	602a      	str	r2, [r5, #0]
 800af5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af64:	2301      	movs	r3, #1
 800af66:	e09f      	b.n	800b0a8 <_printf_i+0x1ec>
 800af68:	6820      	ldr	r0, [r4, #0]
 800af6a:	682b      	ldr	r3, [r5, #0]
 800af6c:	0607      	lsls	r7, r0, #24
 800af6e:	f103 0104 	add.w	r1, r3, #4
 800af72:	6029      	str	r1, [r5, #0]
 800af74:	d501      	bpl.n	800af7a <_printf_i+0xbe>
 800af76:	681e      	ldr	r6, [r3, #0]
 800af78:	e003      	b.n	800af82 <_printf_i+0xc6>
 800af7a:	0646      	lsls	r6, r0, #25
 800af7c:	d5fb      	bpl.n	800af76 <_printf_i+0xba>
 800af7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af82:	2e00      	cmp	r6, #0
 800af84:	da03      	bge.n	800af8e <_printf_i+0xd2>
 800af86:	232d      	movs	r3, #45	; 0x2d
 800af88:	4276      	negs	r6, r6
 800af8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af8e:	485a      	ldr	r0, [pc, #360]	; (800b0f8 <_printf_i+0x23c>)
 800af90:	230a      	movs	r3, #10
 800af92:	e012      	b.n	800afba <_printf_i+0xfe>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	6820      	ldr	r0, [r4, #0]
 800af98:	1d19      	adds	r1, r3, #4
 800af9a:	6029      	str	r1, [r5, #0]
 800af9c:	0605      	lsls	r5, r0, #24
 800af9e:	d501      	bpl.n	800afa4 <_printf_i+0xe8>
 800afa0:	681e      	ldr	r6, [r3, #0]
 800afa2:	e002      	b.n	800afaa <_printf_i+0xee>
 800afa4:	0641      	lsls	r1, r0, #25
 800afa6:	d5fb      	bpl.n	800afa0 <_printf_i+0xe4>
 800afa8:	881e      	ldrh	r6, [r3, #0]
 800afaa:	4853      	ldr	r0, [pc, #332]	; (800b0f8 <_printf_i+0x23c>)
 800afac:	2f6f      	cmp	r7, #111	; 0x6f
 800afae:	bf0c      	ite	eq
 800afb0:	2308      	moveq	r3, #8
 800afb2:	230a      	movne	r3, #10
 800afb4:	2100      	movs	r1, #0
 800afb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afba:	6865      	ldr	r5, [r4, #4]
 800afbc:	60a5      	str	r5, [r4, #8]
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	bfa2      	ittt	ge
 800afc2:	6821      	ldrge	r1, [r4, #0]
 800afc4:	f021 0104 	bicge.w	r1, r1, #4
 800afc8:	6021      	strge	r1, [r4, #0]
 800afca:	b90e      	cbnz	r6, 800afd0 <_printf_i+0x114>
 800afcc:	2d00      	cmp	r5, #0
 800afce:	d04b      	beq.n	800b068 <_printf_i+0x1ac>
 800afd0:	4615      	mov	r5, r2
 800afd2:	fbb6 f1f3 	udiv	r1, r6, r3
 800afd6:	fb03 6711 	mls	r7, r3, r1, r6
 800afda:	5dc7      	ldrb	r7, [r0, r7]
 800afdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afe0:	4637      	mov	r7, r6
 800afe2:	42bb      	cmp	r3, r7
 800afe4:	460e      	mov	r6, r1
 800afe6:	d9f4      	bls.n	800afd2 <_printf_i+0x116>
 800afe8:	2b08      	cmp	r3, #8
 800afea:	d10b      	bne.n	800b004 <_printf_i+0x148>
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	07de      	lsls	r6, r3, #31
 800aff0:	d508      	bpl.n	800b004 <_printf_i+0x148>
 800aff2:	6923      	ldr	r3, [r4, #16]
 800aff4:	6861      	ldr	r1, [r4, #4]
 800aff6:	4299      	cmp	r1, r3
 800aff8:	bfde      	ittt	le
 800affa:	2330      	movle	r3, #48	; 0x30
 800affc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b000:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b004:	1b52      	subs	r2, r2, r5
 800b006:	6122      	str	r2, [r4, #16]
 800b008:	f8cd a000 	str.w	sl, [sp]
 800b00c:	464b      	mov	r3, r9
 800b00e:	aa03      	add	r2, sp, #12
 800b010:	4621      	mov	r1, r4
 800b012:	4640      	mov	r0, r8
 800b014:	f7ff fee4 	bl	800ade0 <_printf_common>
 800b018:	3001      	adds	r0, #1
 800b01a:	d14a      	bne.n	800b0b2 <_printf_i+0x1f6>
 800b01c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b020:	b004      	add	sp, #16
 800b022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	f043 0320 	orr.w	r3, r3, #32
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	4833      	ldr	r0, [pc, #204]	; (800b0fc <_printf_i+0x240>)
 800b030:	2778      	movs	r7, #120	; 0x78
 800b032:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	6829      	ldr	r1, [r5, #0]
 800b03a:	061f      	lsls	r7, r3, #24
 800b03c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b040:	d402      	bmi.n	800b048 <_printf_i+0x18c>
 800b042:	065f      	lsls	r7, r3, #25
 800b044:	bf48      	it	mi
 800b046:	b2b6      	uxthmi	r6, r6
 800b048:	07df      	lsls	r7, r3, #31
 800b04a:	bf48      	it	mi
 800b04c:	f043 0320 	orrmi.w	r3, r3, #32
 800b050:	6029      	str	r1, [r5, #0]
 800b052:	bf48      	it	mi
 800b054:	6023      	strmi	r3, [r4, #0]
 800b056:	b91e      	cbnz	r6, 800b060 <_printf_i+0x1a4>
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	f023 0320 	bic.w	r3, r3, #32
 800b05e:	6023      	str	r3, [r4, #0]
 800b060:	2310      	movs	r3, #16
 800b062:	e7a7      	b.n	800afb4 <_printf_i+0xf8>
 800b064:	4824      	ldr	r0, [pc, #144]	; (800b0f8 <_printf_i+0x23c>)
 800b066:	e7e4      	b.n	800b032 <_printf_i+0x176>
 800b068:	4615      	mov	r5, r2
 800b06a:	e7bd      	b.n	800afe8 <_printf_i+0x12c>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	6826      	ldr	r6, [r4, #0]
 800b070:	6961      	ldr	r1, [r4, #20]
 800b072:	1d18      	adds	r0, r3, #4
 800b074:	6028      	str	r0, [r5, #0]
 800b076:	0635      	lsls	r5, r6, #24
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	d501      	bpl.n	800b080 <_printf_i+0x1c4>
 800b07c:	6019      	str	r1, [r3, #0]
 800b07e:	e002      	b.n	800b086 <_printf_i+0x1ca>
 800b080:	0670      	lsls	r0, r6, #25
 800b082:	d5fb      	bpl.n	800b07c <_printf_i+0x1c0>
 800b084:	8019      	strh	r1, [r3, #0]
 800b086:	2300      	movs	r3, #0
 800b088:	6123      	str	r3, [r4, #16]
 800b08a:	4615      	mov	r5, r2
 800b08c:	e7bc      	b.n	800b008 <_printf_i+0x14c>
 800b08e:	682b      	ldr	r3, [r5, #0]
 800b090:	1d1a      	adds	r2, r3, #4
 800b092:	602a      	str	r2, [r5, #0]
 800b094:	681d      	ldr	r5, [r3, #0]
 800b096:	6862      	ldr	r2, [r4, #4]
 800b098:	2100      	movs	r1, #0
 800b09a:	4628      	mov	r0, r5
 800b09c:	f7f5 f898 	bl	80001d0 <memchr>
 800b0a0:	b108      	cbz	r0, 800b0a6 <_printf_i+0x1ea>
 800b0a2:	1b40      	subs	r0, r0, r5
 800b0a4:	6060      	str	r0, [r4, #4]
 800b0a6:	6863      	ldr	r3, [r4, #4]
 800b0a8:	6123      	str	r3, [r4, #16]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0b0:	e7aa      	b.n	800b008 <_printf_i+0x14c>
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	4649      	mov	r1, r9
 800b0b8:	4640      	mov	r0, r8
 800b0ba:	47d0      	blx	sl
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d0ad      	beq.n	800b01c <_printf_i+0x160>
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	079b      	lsls	r3, r3, #30
 800b0c4:	d413      	bmi.n	800b0ee <_printf_i+0x232>
 800b0c6:	68e0      	ldr	r0, [r4, #12]
 800b0c8:	9b03      	ldr	r3, [sp, #12]
 800b0ca:	4298      	cmp	r0, r3
 800b0cc:	bfb8      	it	lt
 800b0ce:	4618      	movlt	r0, r3
 800b0d0:	e7a6      	b.n	800b020 <_printf_i+0x164>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	4632      	mov	r2, r6
 800b0d6:	4649      	mov	r1, r9
 800b0d8:	4640      	mov	r0, r8
 800b0da:	47d0      	blx	sl
 800b0dc:	3001      	adds	r0, #1
 800b0de:	d09d      	beq.n	800b01c <_printf_i+0x160>
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	68e3      	ldr	r3, [r4, #12]
 800b0e4:	9903      	ldr	r1, [sp, #12]
 800b0e6:	1a5b      	subs	r3, r3, r1
 800b0e8:	42ab      	cmp	r3, r5
 800b0ea:	dcf2      	bgt.n	800b0d2 <_printf_i+0x216>
 800b0ec:	e7eb      	b.n	800b0c6 <_printf_i+0x20a>
 800b0ee:	2500      	movs	r5, #0
 800b0f0:	f104 0619 	add.w	r6, r4, #25
 800b0f4:	e7f5      	b.n	800b0e2 <_printf_i+0x226>
 800b0f6:	bf00      	nop
 800b0f8:	0800bf65 	.word	0x0800bf65
 800b0fc:	0800bf76 	.word	0x0800bf76

0800b100 <__malloc_lock>:
 800b100:	4801      	ldr	r0, [pc, #4]	; (800b108 <__malloc_lock+0x8>)
 800b102:	f7ff bc65 	b.w	800a9d0 <__retarget_lock_acquire_recursive>
 800b106:	bf00      	nop
 800b108:	200052fc 	.word	0x200052fc

0800b10c <__malloc_unlock>:
 800b10c:	4801      	ldr	r0, [pc, #4]	; (800b114 <__malloc_unlock+0x8>)
 800b10e:	f7ff bc60 	b.w	800a9d2 <__retarget_lock_release_recursive>
 800b112:	bf00      	nop
 800b114:	200052fc 	.word	0x200052fc

0800b118 <_realloc_r>:
 800b118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11c:	4680      	mov	r8, r0
 800b11e:	4614      	mov	r4, r2
 800b120:	460e      	mov	r6, r1
 800b122:	b921      	cbnz	r1, 800b12e <_realloc_r+0x16>
 800b124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b128:	4611      	mov	r1, r2
 800b12a:	f7ff bdd9 	b.w	800ace0 <_malloc_r>
 800b12e:	b92a      	cbnz	r2, 800b13c <_realloc_r+0x24>
 800b130:	f000 f84c 	bl	800b1cc <_free_r>
 800b134:	4625      	mov	r5, r4
 800b136:	4628      	mov	r0, r5
 800b138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b13c:	f000 f892 	bl	800b264 <_malloc_usable_size_r>
 800b140:	4284      	cmp	r4, r0
 800b142:	4607      	mov	r7, r0
 800b144:	d802      	bhi.n	800b14c <_realloc_r+0x34>
 800b146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b14a:	d812      	bhi.n	800b172 <_realloc_r+0x5a>
 800b14c:	4621      	mov	r1, r4
 800b14e:	4640      	mov	r0, r8
 800b150:	f7ff fdc6 	bl	800ace0 <_malloc_r>
 800b154:	4605      	mov	r5, r0
 800b156:	2800      	cmp	r0, #0
 800b158:	d0ed      	beq.n	800b136 <_realloc_r+0x1e>
 800b15a:	42bc      	cmp	r4, r7
 800b15c:	4622      	mov	r2, r4
 800b15e:	4631      	mov	r1, r6
 800b160:	bf28      	it	cs
 800b162:	463a      	movcs	r2, r7
 800b164:	f7ff fc36 	bl	800a9d4 <memcpy>
 800b168:	4631      	mov	r1, r6
 800b16a:	4640      	mov	r0, r8
 800b16c:	f000 f82e 	bl	800b1cc <_free_r>
 800b170:	e7e1      	b.n	800b136 <_realloc_r+0x1e>
 800b172:	4635      	mov	r5, r6
 800b174:	e7df      	b.n	800b136 <_realloc_r+0x1e>

0800b176 <memmove>:
 800b176:	4288      	cmp	r0, r1
 800b178:	b510      	push	{r4, lr}
 800b17a:	eb01 0402 	add.w	r4, r1, r2
 800b17e:	d902      	bls.n	800b186 <memmove+0x10>
 800b180:	4284      	cmp	r4, r0
 800b182:	4623      	mov	r3, r4
 800b184:	d807      	bhi.n	800b196 <memmove+0x20>
 800b186:	1e43      	subs	r3, r0, #1
 800b188:	42a1      	cmp	r1, r4
 800b18a:	d008      	beq.n	800b19e <memmove+0x28>
 800b18c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b190:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b194:	e7f8      	b.n	800b188 <memmove+0x12>
 800b196:	4402      	add	r2, r0
 800b198:	4601      	mov	r1, r0
 800b19a:	428a      	cmp	r2, r1
 800b19c:	d100      	bne.n	800b1a0 <memmove+0x2a>
 800b19e:	bd10      	pop	{r4, pc}
 800b1a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1a8:	e7f7      	b.n	800b19a <memmove+0x24>
	...

0800b1ac <_sbrk_r>:
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	4d06      	ldr	r5, [pc, #24]	; (800b1c8 <_sbrk_r+0x1c>)
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	4608      	mov	r0, r1
 800b1b6:	602b      	str	r3, [r5, #0]
 800b1b8:	f7f7 ff86 	bl	80030c8 <_sbrk>
 800b1bc:	1c43      	adds	r3, r0, #1
 800b1be:	d102      	bne.n	800b1c6 <_sbrk_r+0x1a>
 800b1c0:	682b      	ldr	r3, [r5, #0]
 800b1c2:	b103      	cbz	r3, 800b1c6 <_sbrk_r+0x1a>
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	bd38      	pop	{r3, r4, r5, pc}
 800b1c8:	20005308 	.word	0x20005308

0800b1cc <_free_r>:
 800b1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ce:	2900      	cmp	r1, #0
 800b1d0:	d044      	beq.n	800b25c <_free_r+0x90>
 800b1d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1d6:	9001      	str	r0, [sp, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f1a1 0404 	sub.w	r4, r1, #4
 800b1de:	bfb8      	it	lt
 800b1e0:	18e4      	addlt	r4, r4, r3
 800b1e2:	f7ff ff8d 	bl	800b100 <__malloc_lock>
 800b1e6:	4a1e      	ldr	r2, [pc, #120]	; (800b260 <_free_r+0x94>)
 800b1e8:	9801      	ldr	r0, [sp, #4]
 800b1ea:	6813      	ldr	r3, [r2, #0]
 800b1ec:	b933      	cbnz	r3, 800b1fc <_free_r+0x30>
 800b1ee:	6063      	str	r3, [r4, #4]
 800b1f0:	6014      	str	r4, [r2, #0]
 800b1f2:	b003      	add	sp, #12
 800b1f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1f8:	f7ff bf88 	b.w	800b10c <__malloc_unlock>
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	d908      	bls.n	800b212 <_free_r+0x46>
 800b200:	6825      	ldr	r5, [r4, #0]
 800b202:	1961      	adds	r1, r4, r5
 800b204:	428b      	cmp	r3, r1
 800b206:	bf01      	itttt	eq
 800b208:	6819      	ldreq	r1, [r3, #0]
 800b20a:	685b      	ldreq	r3, [r3, #4]
 800b20c:	1949      	addeq	r1, r1, r5
 800b20e:	6021      	streq	r1, [r4, #0]
 800b210:	e7ed      	b.n	800b1ee <_free_r+0x22>
 800b212:	461a      	mov	r2, r3
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	b10b      	cbz	r3, 800b21c <_free_r+0x50>
 800b218:	42a3      	cmp	r3, r4
 800b21a:	d9fa      	bls.n	800b212 <_free_r+0x46>
 800b21c:	6811      	ldr	r1, [r2, #0]
 800b21e:	1855      	adds	r5, r2, r1
 800b220:	42a5      	cmp	r5, r4
 800b222:	d10b      	bne.n	800b23c <_free_r+0x70>
 800b224:	6824      	ldr	r4, [r4, #0]
 800b226:	4421      	add	r1, r4
 800b228:	1854      	adds	r4, r2, r1
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	6011      	str	r1, [r2, #0]
 800b22e:	d1e0      	bne.n	800b1f2 <_free_r+0x26>
 800b230:	681c      	ldr	r4, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	6053      	str	r3, [r2, #4]
 800b236:	440c      	add	r4, r1
 800b238:	6014      	str	r4, [r2, #0]
 800b23a:	e7da      	b.n	800b1f2 <_free_r+0x26>
 800b23c:	d902      	bls.n	800b244 <_free_r+0x78>
 800b23e:	230c      	movs	r3, #12
 800b240:	6003      	str	r3, [r0, #0]
 800b242:	e7d6      	b.n	800b1f2 <_free_r+0x26>
 800b244:	6825      	ldr	r5, [r4, #0]
 800b246:	1961      	adds	r1, r4, r5
 800b248:	428b      	cmp	r3, r1
 800b24a:	bf04      	itt	eq
 800b24c:	6819      	ldreq	r1, [r3, #0]
 800b24e:	685b      	ldreq	r3, [r3, #4]
 800b250:	6063      	str	r3, [r4, #4]
 800b252:	bf04      	itt	eq
 800b254:	1949      	addeq	r1, r1, r5
 800b256:	6021      	streq	r1, [r4, #0]
 800b258:	6054      	str	r4, [r2, #4]
 800b25a:	e7ca      	b.n	800b1f2 <_free_r+0x26>
 800b25c:	b003      	add	sp, #12
 800b25e:	bd30      	pop	{r4, r5, pc}
 800b260:	20005300 	.word	0x20005300

0800b264 <_malloc_usable_size_r>:
 800b264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b268:	1f18      	subs	r0, r3, #4
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	bfbc      	itt	lt
 800b26e:	580b      	ldrlt	r3, [r1, r0]
 800b270:	18c0      	addlt	r0, r0, r3
 800b272:	4770      	bx	lr

0800b274 <_init>:
 800b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b276:	bf00      	nop
 800b278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27a:	bc08      	pop	{r3}
 800b27c:	469e      	mov	lr, r3
 800b27e:	4770      	bx	lr

0800b280 <_fini>:
 800b280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b282:	bf00      	nop
 800b284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b286:	bc08      	pop	{r3}
 800b288:	469e      	mov	lr, r3
 800b28a:	4770      	bx	lr
