
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d08  0800e85c  0800e85c  0001e85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f564  0800f564  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f564  0800f564  0001f564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f56c  0800f56c  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f56c  0800f56c  0001f56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f570  0800f570  0001f570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800f574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a0  2**0
                  CONTENTS
 10 .bss          00005298  200001a0  200001a0  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005438  20005438  000201a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001de29  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003eb9  00000000  00000000  0003e03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ab0  00000000  00000000  00041ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014f3  00000000  00000000  000439a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000056e8  00000000  00000000  00044e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f070  00000000  00000000  0004a583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e925b  00000000  00000000  000695f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000078b0  00000000  00000000  00152850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0015a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e844 	.word	0x0800e844

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800e844 	.word	0x0800e844

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f004 fbf7 	bl	80056f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f96b 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fd05 	bl	8001914 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fcd9 	bl	80018c0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 fa67 	bl	80013e0 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fc2b 	bl	800176c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fb2f 	bl	8001578 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 fa8f 	bl	800143c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1e:	f000 fb7f 	bl	8001620 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f22:	f000 fbed 	bl	8001700 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000f26:	f000 f9b7 	bl	8001298 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f2a:	f000 fa07 	bl	800133c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f2e:	f00c ff45 	bl	800ddbc <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f32:	2300      	movs	r3, #0
 8000f34:	2203      	movs	r2, #3
 8000f36:	2100      	movs	r1, #0
 8000f38:	486f      	ldr	r0, [pc, #444]	; (80010f8 <main+0x200>)
 8000f3a:	f00c fc68 	bl	800d80e <ICM20948_init>

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f3e:	210c      	movs	r1, #12
 8000f40:	486e      	ldr	r0, [pc, #440]	; (80010fc <main+0x204>)
 8000f42:	f007 f925 	bl	8008190 <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	486d      	ldr	r0, [pc, #436]	; (8001100 <main+0x208>)
 8000f4a:	f007 f921 	bl	8008190 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	486b      	ldr	r0, [pc, #428]	; (8001100 <main+0x208>)
 8000f52:	f007 f91d 	bl	8008190 <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f56:	213c      	movs	r1, #60	; 0x3c
 8000f58:	486a      	ldr	r0, [pc, #424]	; (8001104 <main+0x20c>)
 8000f5a:	f007 fcb7 	bl	80088cc <HAL_TIM_Encoder_Start>

  // uart
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <main+0x210>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	4969      	ldr	r1, [pc, #420]	; (800110c <main+0x214>)
 8000f68:	4869      	ldr	r0, [pc, #420]	; (8001110 <main+0x218>)
 8000f6a:	f008 fec8 	bl	8009cfe <HAL_UART_Receive_IT>

  // ultrasonic
  HAL_TIM_Base_Start(&htim6);
 8000f6e:	4869      	ldr	r0, [pc, #420]	; (8001114 <main+0x21c>)
 8000f70:	f006 ffdc 	bl	8007f2c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f74:	2104      	movs	r1, #4
 8000f76:	4868      	ldr	r0, [pc, #416]	; (8001118 <main+0x220>)
 8000f78:	f007 fa2c 	bl	80083d4 <HAL_TIM_IC_Start_IT>

  // IR
  // HAL_ADC_Start(&hadc1);
  // HAL_ADC_Start(&hadc2);

  __RESET_SERVO_TURN(&htim1);
 8000f7c:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <main+0x204>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2291      	movs	r2, #145	; 0x91
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
 8000f84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f88:	f004 fbf4 	bl	8005774 <HAL_Delay>

  // command queue initialization
  curCmd.index = 100;
 8000f8c:	4b63      	ldr	r3, [pc, #396]	; (800111c <main+0x224>)
 8000f8e:	2264      	movs	r2, #100	; 0x64
 8000f90:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f92:	4b62      	ldr	r3, [pc, #392]	; (800111c <main+0x224>)
 8000f94:	220a      	movs	r2, #10
 8000f96:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8000f98:	4b61      	ldr	r3, [pc, #388]	; (8001120 <main+0x228>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8000f9e:	4b60      	ldr	r3, [pc, #384]	; (8001120 <main+0x228>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8000fa4:	4b5f      	ldr	r3, [pc, #380]	; (8001124 <main+0x22c>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b5d      	ldr	r3, [pc, #372]	; (8001120 <main+0x228>)
 8000faa:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	e00c      	b.n	8000fcc <main+0xd4>
  {
    Command cmd;
    cmd.index = 100;
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000fba:	4a59      	ldr	r2, [pc, #356]	; (8001120 <main+0x228>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b55      	ldr	r3, [pc, #340]	; (8001124 <main+0x22c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	dbec      	blt.n	8000fb2 <main+0xba>
  }
  PIDConfigInit(&pidTSlow, 2.1, 0.045, 0.8);
 8000fd8:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8001128 <main+0x230>
 8000fdc:	eddf 0a53 	vldr	s1, [pc, #332]	; 800112c <main+0x234>
 8000fe0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001130 <main+0x238>
 8000fe4:	4853      	ldr	r0, [pc, #332]	; (8001134 <main+0x23c>)
 8000fe6:	f001 fa33 	bl	8002450 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.1, 0.045, 0.8);
 8000fea:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8001128 <main+0x230>
 8000fee:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800112c <main+0x234>
 8000ff2:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001130 <main+0x238>
 8000ff6:	4850      	ldr	r0, [pc, #320]	; (8001138 <main+0x240>)
 8000ff8:	f001 fa2a 	bl	8002450 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.1, 0.05, 0.3);
 8000ffc:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 800113c <main+0x244>
 8001000:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001140 <main+0x248>
 8001004:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001144 <main+0x24c>
 8001008:	484f      	ldr	r0, [pc, #316]	; (8001148 <main+0x250>)
 800100a:	f001 fa21 	bl	8002450 <PIDConfigInit>
  // TODO:overwrite curCmd for debugging individual task
  // curCmd.index = 1;
  // curCmd.val = 30;

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <main+0x210>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	493d      	ldr	r1, [pc, #244]	; (800110c <main+0x214>)
 8001018:	483d      	ldr	r0, [pc, #244]	; (8001110 <main+0x218>)
 800101a:	f008 fe70 	bl	8009cfe <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 800101e:	4b37      	ldr	r3, [pc, #220]	; (80010fc <main+0x204>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2291      	movs	r2, #145	; 0x91
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
 8001026:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800102a:	f004 fba3 	bl	8005774 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800102e:	f009 fe43 	bl	800acb8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 8001032:	4a46      	ldr	r2, [pc, #280]	; (800114c <main+0x254>)
 8001034:	2100      	movs	r1, #0
 8001036:	4846      	ldr	r0, [pc, #280]	; (8001150 <main+0x258>)
 8001038:	f009 fe88 	bl	800ad4c <osThreadNew>
 800103c:	4603      	mov	r3, r0
 800103e:	4a45      	ldr	r2, [pc, #276]	; (8001154 <main+0x25c>)
 8001040:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 8001042:	4a45      	ldr	r2, [pc, #276]	; (8001158 <main+0x260>)
 8001044:	2100      	movs	r1, #0
 8001046:	4845      	ldr	r0, [pc, #276]	; (800115c <main+0x264>)
 8001048:	f009 fe80 	bl	800ad4c <osThreadNew>
 800104c:	4603      	mov	r3, r0
 800104e:	4a44      	ldr	r2, [pc, #272]	; (8001160 <main+0x268>)
 8001050:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 8001052:	4a44      	ldr	r2, [pc, #272]	; (8001164 <main+0x26c>)
 8001054:	2100      	movs	r1, #0
 8001056:	4844      	ldr	r0, [pc, #272]	; (8001168 <main+0x270>)
 8001058:	f009 fe78 	bl	800ad4c <osThreadNew>
 800105c:	4603      	mov	r3, r0
 800105e:	4a43      	ldr	r2, [pc, #268]	; (800116c <main+0x274>)
 8001060:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 8001062:	4a43      	ldr	r2, [pc, #268]	; (8001170 <main+0x278>)
 8001064:	2100      	movs	r1, #0
 8001066:	4843      	ldr	r0, [pc, #268]	; (8001174 <main+0x27c>)
 8001068:	f009 fe70 	bl	800ad4c <osThreadNew>
 800106c:	4603      	mov	r3, r0
 800106e:	4a42      	ldr	r2, [pc, #264]	; (8001178 <main+0x280>)
 8001070:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001072:	4a42      	ldr	r2, [pc, #264]	; (800117c <main+0x284>)
 8001074:	2100      	movs	r1, #0
 8001076:	4842      	ldr	r0, [pc, #264]	; (8001180 <main+0x288>)
 8001078:	f009 fe68 	bl	800ad4c <osThreadNew>
 800107c:	4603      	mov	r3, r0
 800107e:	4a41      	ldr	r2, [pc, #260]	; (8001184 <main+0x28c>)
 8001080:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 8001082:	4a41      	ldr	r2, [pc, #260]	; (8001188 <main+0x290>)
 8001084:	2100      	movs	r1, #0
 8001086:	4841      	ldr	r0, [pc, #260]	; (800118c <main+0x294>)
 8001088:	f009 fe60 	bl	800ad4c <osThreadNew>
 800108c:	4603      	mov	r3, r0
 800108e:	4a40      	ldr	r2, [pc, #256]	; (8001190 <main+0x298>)
 8001090:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 8001092:	4a40      	ldr	r2, [pc, #256]	; (8001194 <main+0x29c>)
 8001094:	2100      	movs	r1, #0
 8001096:	4840      	ldr	r0, [pc, #256]	; (8001198 <main+0x2a0>)
 8001098:	f009 fe58 	bl	800ad4c <osThreadNew>
 800109c:	4603      	mov	r3, r0
 800109e:	4a3f      	ldr	r2, [pc, #252]	; (800119c <main+0x2a4>)
 80010a0:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 80010a2:	4a3f      	ldr	r2, [pc, #252]	; (80011a0 <main+0x2a8>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	483f      	ldr	r0, [pc, #252]	; (80011a4 <main+0x2ac>)
 80010a8:	f009 fe50 	bl	800ad4c <osThreadNew>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a3e      	ldr	r2, [pc, #248]	; (80011a8 <main+0x2b0>)
 80010b0:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 80010b2:	4a3e      	ldr	r2, [pc, #248]	; (80011ac <main+0x2b4>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	483e      	ldr	r0, [pc, #248]	; (80011b0 <main+0x2b8>)
 80010b8:	f009 fe48 	bl	800ad4c <osThreadNew>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a3d      	ldr	r2, [pc, #244]	; (80011b4 <main+0x2bc>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80010c2:	4a3d      	ldr	r2, [pc, #244]	; (80011b8 <main+0x2c0>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	483d      	ldr	r0, [pc, #244]	; (80011bc <main+0x2c4>)
 80010c8:	f009 fe40 	bl	800ad4c <osThreadNew>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a3c      	ldr	r2, [pc, #240]	; (80011c0 <main+0x2c8>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80010d2:	4a3c      	ldr	r2, [pc, #240]	; (80011c4 <main+0x2cc>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	483c      	ldr	r0, [pc, #240]	; (80011c8 <main+0x2d0>)
 80010d8:	f009 fe38 	bl	800ad4c <osThreadNew>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a3b      	ldr	r2, [pc, #236]	; (80011cc <main+0x2d4>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* creation of navArdObsTask */
  navArdObsTaskHandle = osThreadNew(runNavArdObsTask, NULL, &navArdObsTask_attributes);
 80010e2:	4a3b      	ldr	r2, [pc, #236]	; (80011d0 <main+0x2d8>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	483b      	ldr	r0, [pc, #236]	; (80011d4 <main+0x2dc>)
 80010e8:	f009 fe30 	bl	800ad4c <osThreadNew>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a3a      	ldr	r2, [pc, #232]	; (80011d8 <main+0x2e0>)
 80010f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010f2:	f009 fe05 	bl	800ad00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <main+0x1fe>
 80010f8:	2000024c 	.word	0x2000024c
 80010fc:	200002a0 	.word	0x200002a0
 8001100:	200003c0 	.word	0x200003c0
 8001104:	200002e8 	.word	0x200002e8
 8001108:	20000000 	.word	0x20000000
 800110c:	2000047c 	.word	0x2000047c
 8001110:	20000408 	.word	0x20000408
 8001114:	20000378 	.word	0x20000378
 8001118:	20000330 	.word	0x20000330
 800111c:	200004bc 	.word	0x200004bc
 8001120:	20000488 	.word	0x20000488
 8001124:	20000001 	.word	0x20000001
 8001128:	3f4ccccd 	.word	0x3f4ccccd
 800112c:	3d3851ec 	.word	0x3d3851ec
 8001130:	40066666 	.word	0x40066666
 8001134:	20000508 	.word	0x20000508
 8001138:	200004f4 	.word	0x200004f4
 800113c:	3e99999a 	.word	0x3e99999a
 8001140:	3d4ccccd 	.word	0x3d4ccccd
 8001144:	3f8ccccd 	.word	0x3f8ccccd
 8001148:	2000051c 	.word	0x2000051c
 800114c:	0800e904 	.word	0x0800e904
 8001150:	080032a1 	.word	0x080032a1
 8001154:	2000044c 	.word	0x2000044c
 8001158:	0800e928 	.word	0x0800e928
 800115c:	080032b1 	.word	0x080032b1
 8001160:	20000450 	.word	0x20000450
 8001164:	0800e94c 	.word	0x0800e94c
 8001168:	0800333d 	.word	0x0800333d
 800116c:	20000454 	.word	0x20000454
 8001170:	0800e970 	.word	0x0800e970
 8001174:	08003565 	.word	0x08003565
 8001178:	20000458 	.word	0x20000458
 800117c:	0800e994 	.word	0x0800e994
 8001180:	0800378d 	.word	0x0800378d
 8001184:	2000045c 	.word	0x2000045c
 8001188:	0800e9b8 	.word	0x0800e9b8
 800118c:	08003b99 	.word	0x08003b99
 8001190:	20000460 	.word	0x20000460
 8001194:	0800e9dc 	.word	0x0800e9dc
 8001198:	08003fb1 	.word	0x08003fb1
 800119c:	20000464 	.word	0x20000464
 80011a0:	0800ea00 	.word	0x0800ea00
 80011a4:	080043a9 	.word	0x080043a9
 80011a8:	20000468 	.word	0x20000468
 80011ac:	0800ea24 	.word	0x0800ea24
 80011b0:	080047b5 	.word	0x080047b5
 80011b4:	2000046c 	.word	0x2000046c
 80011b8:	0800ea48 	.word	0x0800ea48
 80011bc:	08004879 	.word	0x08004879
 80011c0:	20000470 	.word	0x20000470
 80011c4:	0800ea6c 	.word	0x0800ea6c
 80011c8:	08004e8d 	.word	0x08004e8d
 80011cc:	20000474 	.word	0x20000474
 80011d0:	0800ea90 	.word	0x0800ea90
 80011d4:	08004f7d 	.word	0x08004f7d
 80011d8:	20000478 	.word	0x20000478

080011dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00c fea6 	bl	800df3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <SystemClock_Config+0xb4>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a21      	ldr	r2, [pc, #132]	; (8001290 <SystemClock_Config+0xb4>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <SystemClock_Config+0xb4>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <SystemClock_Config+0xb8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <SystemClock_Config+0xb8>)
 8001226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <SystemClock_Config+0xb8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001244:	2300      	movs	r3, #0
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4618      	mov	r0, r3
 800124e:	f006 f993 	bl	8007578 <HAL_RCC_OscConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001258:	f003 feaa 	bl	8004fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800125c:	230f      	movs	r3, #15
 800125e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f006 fbf6 	bl	8007a68 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001282:	f003 fe95 	bl	8004fb0 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3750      	adds	r7, #80	; 0x50
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_ADC1_Init+0x98>)
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <MX_ADC1_Init+0x9c>)
 80012ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_ADC1_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_ADC1_Init+0x98>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_ADC1_Init+0x98>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_ADC1_Init+0x98>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_ADC1_Init+0x98>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_ADC1_Init+0x98>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_ADC1_Init+0x98>)
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <MX_ADC1_Init+0xa0>)
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_ADC1_Init+0x98>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_ADC1_Init+0x98>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_ADC1_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_ADC1_Init+0x98>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <MX_ADC1_Init+0x98>)
 80012f8:	f004 fa60 	bl	80057bc <HAL_ADC_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001302:	f003 fe55 	bl	8004fb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_11;
 8001306:	230b      	movs	r3, #11
 8001308:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800130a:	2301      	movs	r3, #1
 800130c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_ADC1_Init+0x98>)
 8001318:	f004 fbfe 	bl	8005b18 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001322:	f003 fe45 	bl	8004fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200001bc 	.word	0x200001bc
 8001334:	40012000 	.word	0x40012000
 8001338:	0f000001 	.word	0x0f000001

0800133c <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc2.Instance = ADC2;
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MX_ADC2_Init+0x98>)
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <MX_ADC2_Init+0x9c>)
 8001352:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_ADC2_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_ADC2_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_ADC2_Init+0x98>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_ADC2_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_ADC2_Init+0x98>)
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_ADC2_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_ADC2_Init+0x98>)
 800137c:	4a17      	ldr	r2, [pc, #92]	; (80013dc <MX_ADC2_Init+0xa0>)
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_ADC2_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_ADC2_Init+0x98>)
 8001388:	2201      	movs	r2, #1
 800138a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_ADC2_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_ADC2_Init+0x98>)
 8001396:	2201      	movs	r2, #1
 8001398:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <MX_ADC2_Init+0x98>)
 800139c:	f004 fa0e 	bl	80057bc <HAL_ADC_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f003 fe03 	bl	8004fb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_12;
 80013aa:	230c      	movs	r3, #12
 80013ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <MX_ADC2_Init+0x98>)
 80013bc:	f004 fbac 	bl	8005b18 <HAL_ADC_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80013c6:	f003 fdf3 	bl	8004fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000204 	.word	0x20000204
 80013d8:	40012100 	.word	0x40012100
 80013dc:	0f000001 	.word	0x0f000001

080013e0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_I2C1_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <MX_I2C1_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_I2C1_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_I2C1_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_I2C1_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_I2C1_Init+0x50>)
 800141e:	f005 f8c3 	bl	80065a8 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001428:	f003 fdc2 	bl	8004fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000024c 	.word	0x2000024c
 8001434:	40005400 	.word	0x40005400
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b096      	sub	sp, #88	; 0x58
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2220      	movs	r2, #32
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f00c fd61 	bl	800df3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <MX_TIM1_Init+0x134>)
 800147c:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <MX_TIM1_Init+0x138>)
 800147e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001480:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <MX_TIM1_Init+0x134>)
 8001482:	22a0      	movs	r2, #160	; 0xa0
 8001484:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <MX_TIM1_Init+0x134>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <MX_TIM1_Init+0x134>)
 800148e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001492:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <MX_TIM1_Init+0x134>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <MX_TIM1_Init+0x134>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <MX_TIM1_Init+0x134>)
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014a6:	4832      	ldr	r0, [pc, #200]	; (8001570 <MX_TIM1_Init+0x134>)
 80014a8:	f006 fcf0 	bl	8007e8c <HAL_TIM_Base_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014b2:	f003 fd7d 	bl	8004fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014c0:	4619      	mov	r1, r3
 80014c2:	482b      	ldr	r0, [pc, #172]	; (8001570 <MX_TIM1_Init+0x134>)
 80014c4:	f007 fcf6 	bl	8008eb4 <HAL_TIM_ConfigClockSource>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014ce:	f003 fd6f 	bl	8004fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <MX_TIM1_Init+0x134>)
 80014d4:	f006 fe02 	bl	80080dc <HAL_TIM_PWM_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014de:	f003 fd67 	bl	8004fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ee:	4619      	mov	r1, r3
 80014f0:	481f      	ldr	r0, [pc, #124]	; (8001570 <MX_TIM1_Init+0x134>)
 80014f2:	f008 fa43 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014fc:	f003 fd58 	bl	8004fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001500:	2360      	movs	r3, #96	; 0x60
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	220c      	movs	r2, #12
 800151e:	4619      	mov	r1, r3
 8001520:	4813      	ldr	r0, [pc, #76]	; (8001570 <MX_TIM1_Init+0x134>)
 8001522:	f007 fc05 	bl	8008d30 <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800152c:	f003 fd40 	bl	8004fb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001548:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_TIM1_Init+0x134>)
 8001554:	f008 fa8e 	bl	8009a74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800155e:	f003 fd27 	bl	8004fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001562:	4803      	ldr	r0, [pc, #12]	; (8001570 <MX_TIM1_Init+0x134>)
 8001564:	f003 ff32 	bl	80053cc <HAL_TIM_MspPostInit>
}
 8001568:	bf00      	nop
 800156a:	3758      	adds	r7, #88	; 0x58
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200002a0 	.word	0x200002a0
 8001574:	40010000 	.word	0x40010000

08001578 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2224      	movs	r2, #36	; 0x24
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f00c fcd8 	bl	800df3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <MX_TIM2_Init+0xa4>)
 8001596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_TIM2_Init+0xa4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_TIM2_Init+0xa4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_TIM2_Init+0xa4>)
 80015aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM2_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_TIM2_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015bc:	2303      	movs	r3, #3
 80015be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c4:	2301      	movs	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80015cc:	230a      	movs	r3, #10
 80015ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d4:	2301      	movs	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80015dc:	230a      	movs	r3, #10
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_TIM2_Init+0xa4>)
 80015e8:	f007 f8ca 	bl	8008780 <HAL_TIM_Encoder_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015f2:	f003 fcdd 	bl	8004fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_TIM2_Init+0xa4>)
 8001604:	f008 f9ba 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800160e:	f003 fccf 	bl	8004fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001612:	bf00      	nop
 8001614:	3730      	adds	r7, #48	; 0x30
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200002e8 	.word	0x200002e8

08001620 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <MX_TIM3_Init+0xd8>)
 800164c:	4a2b      	ldr	r2, [pc, #172]	; (80016fc <MX_TIM3_Init+0xdc>)
 800164e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <MX_TIM3_Init+0xd8>)
 8001652:	220f      	movs	r2, #15
 8001654:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <MX_TIM3_Init+0xd8>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MX_TIM3_Init+0xd8>)
 800165e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001662:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <MX_TIM3_Init+0xd8>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <MX_TIM3_Init+0xd8>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001670:	4821      	ldr	r0, [pc, #132]	; (80016f8 <MX_TIM3_Init+0xd8>)
 8001672:	f006 fc0b 	bl	8007e8c <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800167c:	f003 fc98 	bl	8004fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	4619      	mov	r1, r3
 800168c:	481a      	ldr	r0, [pc, #104]	; (80016f8 <MX_TIM3_Init+0xd8>)
 800168e:	f007 fc11 	bl	8008eb4 <HAL_TIM_ConfigClockSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001698:	f003 fc8a 	bl	8004fb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800169c:	4816      	ldr	r0, [pc, #88]	; (80016f8 <MX_TIM3_Init+0xd8>)
 800169e:	f006 fe3f 	bl	8008320 <HAL_TIM_IC_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016a8:	f003 fc82 	bl	8004fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4619      	mov	r1, r3
 80016ba:	480f      	ldr	r0, [pc, #60]	; (80016f8 <MX_TIM3_Init+0xd8>)
 80016bc:	f008 f95e 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80016c6:	f003 fc73 	bl	8004fb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80016ca:	230a      	movs	r3, #10
 80016cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016ce:	2301      	movs	r3, #1
 80016d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016da:	463b      	mov	r3, r7
 80016dc:	2204      	movs	r2, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM3_Init+0xd8>)
 80016e2:	f007 fa89 	bl	8008bf8 <HAL_TIM_IC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80016ec:	f003 fc60 	bl	8004fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000330 	.word	0x20000330
 80016fc:	40000400 	.word	0x40000400

08001700 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001706:	463b      	mov	r3, r7
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <MX_TIM6_Init+0x64>)
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <MX_TIM6_Init+0x68>)
 8001712:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_TIM6_Init+0x64>)
 8001716:	220f      	movs	r2, #15
 8001718:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_TIM6_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_TIM6_Init+0x64>)
 8001722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001726:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_TIM6_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <MX_TIM6_Init+0x64>)
 8001730:	f006 fbac 	bl	8007e8c <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800173a:	f003 fc39 	bl	8004fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	; (8001764 <MX_TIM6_Init+0x64>)
 800174c:	f008 f916 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001756:	f003 fc2b 	bl	8004fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000378 	.word	0x20000378
 8001768:	40001000 	.word	0x40001000

0800176c <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b096      	sub	sp, #88	; 0x58
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2220      	movs	r2, #32
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00c fbc9 	bl	800df3c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80017ac:	4a43      	ldr	r2, [pc, #268]	; (80018bc <MX_TIM8_Init+0x150>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017b0:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80017bc:	4b3e      	ldr	r3, [pc, #248]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80017be:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80017c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017d6:	4838      	ldr	r0, [pc, #224]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80017d8:	f006 fb58 	bl	8007e8c <HAL_TIM_Base_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80017e2:	f003 fbe5 	bl	8004fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017f0:	4619      	mov	r1, r3
 80017f2:	4831      	ldr	r0, [pc, #196]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80017f4:	f007 fb5e 	bl	8008eb4 <HAL_TIM_ConfigClockSource>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80017fe:	f003 fbd7 	bl	8004fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001802:	482d      	ldr	r0, [pc, #180]	; (80018b8 <MX_TIM8_Init+0x14c>)
 8001804:	f006 fc6a 	bl	80080dc <HAL_TIM_PWM_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800180e:	f003 fbcf 	bl	8004fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800181a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800181e:	4619      	mov	r1, r3
 8001820:	4825      	ldr	r0, [pc, #148]	; (80018b8 <MX_TIM8_Init+0x14c>)
 8001822:	f008 f8ab 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800182c:	f003 fbc0 	bl	8004fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001830:	2360      	movs	r3, #96	; 0x60
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	4818      	ldr	r0, [pc, #96]	; (80018b8 <MX_TIM8_Init+0x14c>)
 8001856:	f007 fa6b 	bl	8008d30 <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001860:	f003 fba6 	bl	8004fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	2204      	movs	r2, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4812      	ldr	r0, [pc, #72]	; (80018b8 <MX_TIM8_Init+0x14c>)
 800186e:	f007 fa5f 	bl	8008d30 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001878:	f003 fb9a 	bl	8004fb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001894:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_TIM8_Init+0x14c>)
 80018a0:	f008 f8e8 	bl	8009a74 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80018aa:	f003 fb81 	bl	8004fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 80018ae:	bf00      	nop
 80018b0:	3758      	adds	r7, #88	; 0x58
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200003c0 	.word	0x200003c0
 80018bc:	40010400 	.word	0x40010400

080018c0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USART3_UART_Init+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <MX_USART3_UART_Init+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_USART3_UART_Init+0x4c>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USART3_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_USART3_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USART3_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USART3_UART_Init+0x4c>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USART3_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USART3_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USART3_UART_Init+0x4c>)
 80018f8:	f008 f922 	bl	8009b40 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001902:	f003 fb55 	bl	8004fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000408 	.word	0x20000408
 8001910:	40004800 	.word	0x40004800

08001914 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <MX_GPIO_Init+0xfc>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a37      	ldr	r2, [pc, #220]	; (8001a10 <MX_GPIO_Init+0xfc>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <MX_GPIO_Init+0xfc>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <MX_GPIO_Init+0xfc>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <MX_GPIO_Init+0xfc>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <MX_GPIO_Init+0xfc>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <MX_GPIO_Init+0xfc>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <MX_GPIO_Init+0xfc>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <MX_GPIO_Init+0xfc>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <MX_GPIO_Init+0xfc>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <MX_GPIO_Init+0xfc>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_GPIO_Init+0xfc>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 80019a0:	481c      	ldr	r0, [pc, #112]	; (8001a14 <MX_GPIO_Init+0x100>)
 80019a2:	f004 fde7 	bl	8006574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	213c      	movs	r1, #60	; 0x3c
 80019aa:	481b      	ldr	r0, [pc, #108]	; (8001a18 <MX_GPIO_Init+0x104>)
 80019ac:	f004 fde2 	bl	8006574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin US_Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin;
 80019b0:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4812      	ldr	r0, [pc, #72]	; (8001a14 <MX_GPIO_Init+0x100>)
 80019ca:	f004 fc37 	bl	800623c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 80019ce:	230c      	movs	r3, #12
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <MX_GPIO_Init+0x104>)
 80019e6:	f004 fc29 	bl	800623c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 80019ea:	2330      	movs	r3, #48	; 0x30
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_GPIO_Init+0x104>)
 8001a02:	f004 fc1b 	bl	800623c <HAL_GPIO_Init>
}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	; 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	00000000 	.word	0x00000000

08001a20 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t US_diff = 0;
uint8_t Is_First_Captured = 0; // is the first value captured ?

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // if the interrupt source is channel2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7f1b      	ldrb	r3, [r3, #28]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	f040 808c 	bne.w	8001b4a <HAL_TIM_IC_CaptureCallback+0x12a>
  {
    if (Is_First_Captured == 0) // if the first value is not captured
 8001a32:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d11a      	bne.n	8001a70 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f007 fb01 	bl	8009044 <HAL_TIM_ReadCapturedValue>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001a46:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;                                    // set the first captured as true
 8001a48:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
      // Now change the polarity to falling edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a1a      	ldr	r2, [r3, #32]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a5c:	621a      	str	r2, [r3, #32]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6a1a      	ldr	r2, [r3, #32]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	621a      	str	r2, [r3, #32]
      // set polarity to rising edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
    }
  }
}
 8001a6e:	e06c      	b.n	8001b4a <HAL_TIM_IC_CaptureCallback+0x12a>
    else if (Is_First_Captured == 1) // if the first is already captured
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d168      	bne.n	8001b4a <HAL_TIM_IC_CaptureCallback+0x12a>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001a78:	2104      	movs	r1, #4
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f007 fae2 	bl	8009044 <HAL_TIM_ReadCapturedValue>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a39      	ldr	r2, [pc, #228]	; (8001b68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001a84:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);                           // reset the counter
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
      if (IC_Val2 > IC_Val1)
 8001a8e:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d90c      	bls.n	8001ab4 <HAL_TIM_IC_CaptureCallback+0x94>
        obsDist_US = IC_Val2 - IC_Val1;
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aac:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001aae:	edc3 7a00 	vstr	s15, [r3]
 8001ab2:	e014      	b.n	8001ade <HAL_TIM_IC_CaptureCallback+0xbe>
      else if (IC_Val1 > IC_Val2)
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d90e      	bls.n	8001ade <HAL_TIM_IC_CaptureCallback+0xbe>
        obsDist_US = (0xffff - IC_Val1) + IC_Val2;
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001ace:	33ff      	adds	r3, #255	; 0xff
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001ada:	edc3 7a00 	vstr	s15, [r3]
      obsDist_US = obsDist_US * .034 / 2;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd28 	bl	8000538 <__aeabi_f2d>
 8001ae8:	a31b      	add	r3, pc, #108	; (adr r3, 8001b58 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fd7b 	bl	80005e8 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b02:	f7fe fe9b 	bl	800083c <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f825 	bl	8000b5c <__aeabi_d2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b16:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 0; // set it back to false
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a1a      	ldr	r2, [r3, #32]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b2c:	621a      	str	r2, [r3, #32]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6a12      	ldr	r2, [r2, #32]
 8001b38:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0204 	bic.w	r2, r2, #4
 8001b48:	60da      	str	r2, [r3, #12]
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	f3af 8000 	nop.w
 8001b58:	b020c49c 	.word	0xb020c49c
 8001b5c:	3fa16872 	.word	0x3fa16872
 8001b60:	20000544 	.word	0x20000544
 8001b64:	2000053c 	.word	0x2000053c
 8001b68:	20000540 	.word	0x20000540
 8001b6c:	20000530 	.word	0x20000530
 8001b70:	20000330 	.word	0x20000330

08001b74 <HAL_UART_RxCpltCallback>:
int targetD = 5;
uint8_t tempDir = 1;
int8_t step = 0;
uint8_t turnMode = 2;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  // TODO: add delimeter at end of command
  //  prevent unused argument(s) compilation warning
  UNUSED(huart);
  int val;

  val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001b7c:	4b94      	ldr	r3, [pc, #592]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001b7e:	789b      	ldrb	r3, [r3, #2]
 8001b80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b90      	ldr	r3, [pc, #576]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001b90:	78db      	ldrb	r3, [r3, #3]
 8001b92:	3b30      	subs	r3, #48	; 0x30
 8001b94:	4413      	add	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
  if (aRxBuffer[4] >= '0' && aRxBuffer[4] <= '9')
 8001b98:	4b8d      	ldr	r3, [pc, #564]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001b9a:	791b      	ldrb	r3, [r3, #4]
 8001b9c:	2b2f      	cmp	r3, #47	; 0x2f
 8001b9e:	d90e      	bls.n	8001bbe <HAL_UART_RxCpltCallback+0x4a>
 8001ba0:	4b8b      	ldr	r3, [pc, #556]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001ba2:	791b      	ldrb	r3, [r3, #4]
 8001ba4:	2b39      	cmp	r3, #57	; 0x39
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_UART_RxCpltCallback+0x4a>
    // val += (aRxBuffer[4] - 48) * 100;
    val = val * 10 + (aRxBuffer[4] - 48);
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b86      	ldr	r3, [pc, #536]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001bb6:	791b      	ldrb	r3, [r3, #4]
 8001bb8:	3b30      	subs	r3, #48	; 0x30
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]

  manualMode = 0;
 8001bbe:	4b85      	ldr	r3, [pc, #532]	; (8001dd4 <HAL_UART_RxCpltCallback+0x260>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]

  if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T')
 8001bc4:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b53      	cmp	r3, #83	; 0x53
 8001bca:	d159      	bne.n	8001c80 <HAL_UART_RxCpltCallback+0x10c>
 8001bcc:	4b80      	ldr	r3, [pc, #512]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	2b54      	cmp	r3, #84	; 0x54
 8001bd2:	d155      	bne.n	8001c80 <HAL_UART_RxCpltCallback+0x10c>
  { // only STOP can preempt any greedy task
    //		__ADD_COMMAND(cQueue, 0, 0); // stop
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001bd4:	4b80      	ldr	r3, [pc, #512]	; (8001dd8 <HAL_UART_RxCpltCallback+0x264>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34
 8001bdc:	4b7e      	ldr	r3, [pc, #504]	; (8001dd8 <HAL_UART_RxCpltCallback+0x264>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	639a      	str	r2, [r3, #56]	; 0x38
 8001be4:	4b7d      	ldr	r3, [pc, #500]	; (8001ddc <HAL_UART_RxCpltCallback+0x268>)
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	4b7d      	ldr	r3, [pc, #500]	; (8001de0 <HAL_UART_RxCpltCallback+0x26c>)
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	4b7b      	ldr	r3, [pc, #492]	; (8001ddc <HAL_UART_RxCpltCallback+0x268>)
 8001bee:	220b      	movs	r2, #11
 8001bf0:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001bf2:	4b7c      	ldr	r3, [pc, #496]	; (8001de4 <HAL_UART_RxCpltCallback+0x270>)
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001bfa:	4b7b      	ldr	r3, [pc, #492]	; (8001de8 <HAL_UART_RxCpltCallback+0x274>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 8001c00:	487a      	ldr	r0, [pc, #488]	; (8001dec <HAL_UART_RxCpltCallback+0x278>)
 8001c02:	f000 fc46 	bl	8002492 <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001c06:	487a      	ldr	r0, [pc, #488]	; (8001df0 <HAL_UART_RxCpltCallback+0x27c>)
 8001c08:	f000 fc43 	bl	8002492 <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001c0c:	4879      	ldr	r0, [pc, #484]	; (8001df4 <HAL_UART_RxCpltCallback+0x280>)
 8001c0e:	f000 fc40 	bl	8002492 <PIDConfigReset>
    curDistTick = 0;
 8001c12:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <HAL_UART_RxCpltCallback+0x284>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001c18:	4b78      	ldr	r3, [pc, #480]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	4b77      	ldr	r3, [pc, #476]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d112      	bne.n	8001c4a <HAL_UART_RxCpltCallback+0xd6>
    {
      __CLEAR_CURCMD(curCmd);
 8001c24:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <HAL_UART_RxCpltCallback+0x28c>)
 8001c26:	2264      	movs	r2, #100	; 0x64
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	4b75      	ldr	r3, [pc, #468]	; (8001e00 <HAL_UART_RxCpltCallback+0x28c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001c30:	4a74      	ldr	r2, [pc, #464]	; (8001e04 <HAL_UART_RxCpltCallback+0x290>)
 8001c32:	210f      	movs	r1, #15
 8001c34:	4874      	ldr	r0, [pc, #464]	; (8001e08 <HAL_UART_RxCpltCallback+0x294>)
 8001c36:	f00c f94d 	bl	800ded4 <sniprintf>
 8001c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3e:	2206      	movs	r2, #6
 8001c40:	4972      	ldr	r1, [pc, #456]	; (8001e0c <HAL_UART_RxCpltCallback+0x298>)
 8001c42:	4873      	ldr	r0, [pc, #460]	; (8001e10 <HAL_UART_RxCpltCallback+0x29c>)
 8001c44:	f007 ffc9 	bl	8009bda <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001c48:	e3c5      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001c4a:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	4a6c      	ldr	r2, [pc, #432]	; (8001e00 <HAL_UART_RxCpltCallback+0x28c>)
 8001c50:	496a      	ldr	r1, [pc, #424]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b68      	ldr	r3, [pc, #416]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001c5c:	785b      	ldrb	r3, [r3, #1]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a66      	ldr	r2, [pc, #408]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001c62:	7892      	ldrb	r2, [r2, #2]
 8001c64:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c68:	fb01 f202 	mul.w	r2, r1, r2
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b62      	ldr	r3, [pc, #392]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001c72:	705a      	strb	r2, [r3, #1]
 8001c74:	4a67      	ldr	r2, [pc, #412]	; (8001e14 <HAL_UART_RxCpltCallback+0x2a0>)
 8001c76:	210f      	movs	r1, #15
 8001c78:	4863      	ldr	r0, [pc, #396]	; (8001e08 <HAL_UART_RxCpltCallback+0x294>)
 8001c7a:	f00c f92b 	bl	800ded4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001c7e:	e3aa      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
    }
  }
  else if (aRxBuffer[0] == 'R' && aRxBuffer[1] == 'S')
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b52      	cmp	r3, #82	; 0x52
 8001c86:	d161      	bne.n	8001d4c <HAL_UART_RxCpltCallback+0x1d8>
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	2b53      	cmp	r3, #83	; 0x53
 8001c8e:	d15d      	bne.n	8001d4c <HAL_UART_RxCpltCallback+0x1d8>
  {
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001c90:	4b51      	ldr	r3, [pc, #324]	; (8001dd8 <HAL_UART_RxCpltCallback+0x264>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	635a      	str	r2, [r3, #52]	; 0x34
 8001c98:	4b4f      	ldr	r3, [pc, #316]	; (8001dd8 <HAL_UART_RxCpltCallback+0x264>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38
 8001ca0:	4b4e      	ldr	r3, [pc, #312]	; (8001ddc <HAL_UART_RxCpltCallback+0x268>)
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	4b4e      	ldr	r3, [pc, #312]	; (8001de0 <HAL_UART_RxCpltCallback+0x26c>)
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <HAL_UART_RxCpltCallback+0x268>)
 8001caa:	220b      	movs	r2, #11
 8001cac:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001cae:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <HAL_UART_RxCpltCallback+0x270>)
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001cb6:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <HAL_UART_RxCpltCallback+0x274>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	801a      	strh	r2, [r3, #0]
    __RESET_SERVO_TURN(&htim1);
 8001cbc:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <HAL_UART_RxCpltCallback+0x2a4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2291      	movs	r2, #145	; 0x91
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
 8001cc4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001cc8:	f003 fd54 	bl	8005774 <HAL_Delay>
    PIDConfigReset(&pidTSlow);
 8001ccc:	4847      	ldr	r0, [pc, #284]	; (8001dec <HAL_UART_RxCpltCallback+0x278>)
 8001cce:	f000 fbe0 	bl	8002492 <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001cd2:	4847      	ldr	r0, [pc, #284]	; (8001df0 <HAL_UART_RxCpltCallback+0x27c>)
 8001cd4:	f000 fbdd 	bl	8002492 <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001cd8:	4846      	ldr	r0, [pc, #280]	; (8001df4 <HAL_UART_RxCpltCallback+0x280>)
 8001cda:	f000 fbda 	bl	8002492 <PIDConfigReset>
    curDistTick = 0;
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_UART_RxCpltCallback+0x284>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001ce4:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d112      	bne.n	8001d16 <HAL_UART_RxCpltCallback+0x1a2>
    {
      __CLEAR_CURCMD(curCmd);
 8001cf0:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_UART_RxCpltCallback+0x28c>)
 8001cf2:	2264      	movs	r2, #100	; 0x64
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <HAL_UART_RxCpltCallback+0x28c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001cfc:	4a41      	ldr	r2, [pc, #260]	; (8001e04 <HAL_UART_RxCpltCallback+0x290>)
 8001cfe:	210f      	movs	r1, #15
 8001d00:	4841      	ldr	r0, [pc, #260]	; (8001e08 <HAL_UART_RxCpltCallback+0x294>)
 8001d02:	f00c f8e7 	bl	800ded4 <sniprintf>
 8001d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0a:	2206      	movs	r2, #6
 8001d0c:	493f      	ldr	r1, [pc, #252]	; (8001e0c <HAL_UART_RxCpltCallback+0x298>)
 8001d0e:	4840      	ldr	r0, [pc, #256]	; (8001e10 <HAL_UART_RxCpltCallback+0x29c>)
 8001d10:	f007 ff63 	bl	8009bda <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d14:	e35f      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001d16:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	4a39      	ldr	r2, [pc, #228]	; (8001e00 <HAL_UART_RxCpltCallback+0x28c>)
 8001d1c:	4937      	ldr	r1, [pc, #220]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a33      	ldr	r2, [pc, #204]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001d2e:	7892      	ldrb	r2, [r2, #2]
 8001d30:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d34:	fb01 f202 	mul.w	r2, r1, r2
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001d3e:	705a      	strb	r2, [r3, #1]
 8001d40:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_UART_RxCpltCallback+0x2a0>)
 8001d42:	210f      	movs	r1, #15
 8001d44:	4830      	ldr	r0, [pc, #192]	; (8001e08 <HAL_UART_RxCpltCallback+0x294>)
 8001d46:	f00c f8c5 	bl	800ded4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d4a:	e344      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
    }
  }
  else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b46      	cmp	r3, #70	; 0x46
 8001d52:	d165      	bne.n	8001e20 <HAL_UART_RxCpltCallback+0x2ac>
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001d56:	785b      	ldrb	r3, [r3, #1]
 8001d58:	2b57      	cmp	r3, #87	; 0x57
 8001d5a:	d003      	beq.n	8001d64 <HAL_UART_RxCpltCallback+0x1f0>
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	2b53      	cmp	r3, #83	; 0x53
 8001d62:	d15d      	bne.n	8001e20 <HAL_UART_RxCpltCallback+0x2ac>
  { // FW or FS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001d66:	789b      	ldrb	r3, [r3, #2]
 8001d68:	2b2d      	cmp	r3, #45	; 0x2d
 8001d6a:	d105      	bne.n	8001d78 <HAL_UART_RxCpltCallback+0x204>
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001d6e:	78db      	ldrb	r3, [r3, #3]
 8001d70:	2b2d      	cmp	r3, #45	; 0x2d
 8001d72:	d101      	bne.n	8001d78 <HAL_UART_RxCpltCallback+0x204>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_UART_RxCpltCallback+0x206>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_UART_RxCpltCallback+0x260>)
 8001d7e:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_UART_RxCpltCallback+0x25c>)
 8001d82:	785b      	ldrb	r3, [r3, #1]
 8001d84:	2b53      	cmp	r3, #83	; 0x53
 8001d86:	bf14      	ite	ne
 8001d88:	2301      	movne	r3, #1
 8001d8a:	2300      	moveq	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <HAL_UART_RxCpltCallback+0x2a8>)
 8001d92:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 1, val);
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	2201      	movs	r2, #1
 8001da0:	711a      	strb	r2, [r3, #4]
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	b291      	uxth	r1, r2
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	460a      	mov	r2, r1
 8001db2:	80da      	strh	r2, [r3, #6]
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001dbc:	7892      	ldrb	r2, [r2, #2]
 8001dbe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dc2:	fb01 f202 	mul.w	r2, r1, r2
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_UART_RxCpltCallback+0x288>)
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e302      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
 8001dd0:	2000047c 	.word	0x2000047c
 8001dd4:	200004d0 	.word	0x200004d0
 8001dd8:	200003c0 	.word	0x200003c0
 8001ddc:	20000134 	.word	0x20000134
 8001de0:	20000135 	.word	0x20000135
 8001de4:	200004d8 	.word	0x200004d8
 8001de8:	200004de 	.word	0x200004de
 8001dec:	20000508 	.word	0x20000508
 8001df0:	200004f4 	.word	0x200004f4
 8001df4:	2000051c 	.word	0x2000051c
 8001df8:	200004ec 	.word	0x200004ec
 8001dfc:	20000488 	.word	0x20000488
 8001e00:	200004bc 	.word	0x200004bc
 8001e04:	0800e8d4 	.word	0x0800e8d4
 8001e08:	200004c0 	.word	0x200004c0
 8001e0c:	0800e8dc 	.word	0x0800e8dc
 8001e10:	20000408 	.word	0x20000408
 8001e14:	0800e8e4 	.word	0x0800e8e4
 8001e18:	200002a0 	.word	0x200002a0
 8001e1c:	20000136 	.word	0x20000136
  }
  else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001e20:	4b96      	ldr	r3, [pc, #600]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b42      	cmp	r3, #66	; 0x42
 8001e26:	d13d      	bne.n	8001ea4 <HAL_UART_RxCpltCallback+0x330>
 8001e28:	4b94      	ldr	r3, [pc, #592]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	2b57      	cmp	r3, #87	; 0x57
 8001e2e:	d003      	beq.n	8001e38 <HAL_UART_RxCpltCallback+0x2c4>
 8001e30:	4b92      	ldr	r3, [pc, #584]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001e32:	785b      	ldrb	r3, [r3, #1]
 8001e34:	2b53      	cmp	r3, #83	; 0x53
 8001e36:	d135      	bne.n	8001ea4 <HAL_UART_RxCpltCallback+0x330>
  { // BW or BS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e38:	4b90      	ldr	r3, [pc, #576]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001e3a:	789b      	ldrb	r3, [r3, #2]
 8001e3c:	2b2d      	cmp	r3, #45	; 0x2d
 8001e3e:	d105      	bne.n	8001e4c <HAL_UART_RxCpltCallback+0x2d8>
 8001e40:	4b8e      	ldr	r3, [pc, #568]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001e42:	78db      	ldrb	r3, [r3, #3]
 8001e44:	2b2d      	cmp	r3, #45	; 0x2d
 8001e46:	d101      	bne.n	8001e4c <HAL_UART_RxCpltCallback+0x2d8>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_UART_RxCpltCallback+0x2da>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b8b      	ldr	r3, [pc, #556]	; (8002080 <HAL_UART_RxCpltCallback+0x50c>)
 8001e52:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001e54:	4b89      	ldr	r3, [pc, #548]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001e56:	785b      	ldrb	r3, [r3, #1]
 8001e58:	2b53      	cmp	r3, #83	; 0x53
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b87      	ldr	r3, [pc, #540]	; (8002084 <HAL_UART_RxCpltCallback+0x510>)
 8001e66:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 2, val);
 8001e68:	4b87      	ldr	r3, [pc, #540]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4a86      	ldr	r2, [pc, #536]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	2202      	movs	r2, #2
 8001e74:	711a      	strb	r2, [r3, #4]
 8001e76:	4b84      	ldr	r3, [pc, #528]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	b291      	uxth	r1, r2
 8001e7e:	4a82      	ldr	r2, [pc, #520]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	460a      	mov	r2, r1
 8001e86:	80da      	strh	r2, [r3, #6]
 8001e88:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	4a7e      	ldr	r2, [pc, #504]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001e90:	7892      	ldrb	r2, [r2, #2]
 8001e92:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e96:	fb01 f202 	mul.w	r2, r1, r2
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b7a      	ldr	r3, [pc, #488]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e298      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  }

  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L')
 8001ea4:	4b75      	ldr	r3, [pc, #468]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b46      	cmp	r3, #70	; 0x46
 8001eaa:	d136      	bne.n	8001f1a <HAL_UART_RxCpltCallback+0x3a6>
 8001eac:	4b73      	ldr	r3, [pc, #460]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001eae:	785b      	ldrb	r3, [r3, #1]
 8001eb0:	2b4c      	cmp	r3, #76	; 0x4c
 8001eb2:	d132      	bne.n	8001f1a <HAL_UART_RxCpltCallback+0x3a6>
  { // FL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001eb4:	4b71      	ldr	r3, [pc, #452]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001eb6:	789b      	ldrb	r3, [r3, #2]
 8001eb8:	2b2d      	cmp	r3, #45	; 0x2d
 8001eba:	d105      	bne.n	8001ec8 <HAL_UART_RxCpltCallback+0x354>
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001ebe:	78db      	ldrb	r3, [r3, #3]
 8001ec0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ec2:	d101      	bne.n	8001ec8 <HAL_UART_RxCpltCallback+0x354>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_UART_RxCpltCallback+0x356>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <HAL_UART_RxCpltCallback+0x50c>)
 8001ece:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001ed0:	4b6b      	ldr	r3, [pc, #428]	; (8002080 <HAL_UART_RxCpltCallback+0x50c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_UART_RxCpltCallback+0x368>
 8001ed8:	2103      	movs	r1, #3
 8001eda:	e000      	b.n	8001ede <HAL_UART_RxCpltCallback+0x36a>
 8001edc:	2107      	movs	r1, #7
 8001ede:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	4a69      	ldr	r2, [pc, #420]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	460a      	mov	r2, r1
 8001eea:	711a      	strb	r2, [r3, #4]
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	b291      	uxth	r1, r2
 8001ef4:	4a64      	ldr	r2, [pc, #400]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	460a      	mov	r2, r1
 8001efc:	80da      	strh	r2, [r3, #6]
 8001efe:	4b62      	ldr	r3, [pc, #392]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	4a60      	ldr	r2, [pc, #384]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f06:	7892      	ldrb	r2, [r2, #2]
 8001f08:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f0c:	fb01 f202 	mul.w	r2, r1, r2
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b5c      	ldr	r3, [pc, #368]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e25d      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  }
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R')
 8001f1a:	4b58      	ldr	r3, [pc, #352]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b46      	cmp	r3, #70	; 0x46
 8001f20:	d136      	bne.n	8001f90 <HAL_UART_RxCpltCallback+0x41c>
 8001f22:	4b56      	ldr	r3, [pc, #344]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001f24:	785b      	ldrb	r3, [r3, #1]
 8001f26:	2b52      	cmp	r3, #82	; 0x52
 8001f28:	d132      	bne.n	8001f90 <HAL_UART_RxCpltCallback+0x41c>
  { // FR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f2a:	4b54      	ldr	r3, [pc, #336]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001f2c:	789b      	ldrb	r3, [r3, #2]
 8001f2e:	2b2d      	cmp	r3, #45	; 0x2d
 8001f30:	d105      	bne.n	8001f3e <HAL_UART_RxCpltCallback+0x3ca>
 8001f32:	4b52      	ldr	r3, [pc, #328]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001f34:	78db      	ldrb	r3, [r3, #3]
 8001f36:	2b2d      	cmp	r3, #45	; 0x2d
 8001f38:	d101      	bne.n	8001f3e <HAL_UART_RxCpltCallback+0x3ca>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_UART_RxCpltCallback+0x3cc>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b4f      	ldr	r3, [pc, #316]	; (8002080 <HAL_UART_RxCpltCallback+0x50c>)
 8001f44:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001f46:	4b4e      	ldr	r3, [pc, #312]	; (8002080 <HAL_UART_RxCpltCallback+0x50c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_UART_RxCpltCallback+0x3de>
 8001f4e:	2104      	movs	r1, #4
 8001f50:	e000      	b.n	8001f54 <HAL_UART_RxCpltCallback+0x3e0>
 8001f52:	2108      	movs	r1, #8
 8001f54:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	460a      	mov	r2, r1
 8001f60:	711a      	strb	r2, [r3, #4]
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	b291      	uxth	r1, r2
 8001f6a:	4a47      	ldr	r2, [pc, #284]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	460a      	mov	r2, r1
 8001f72:	80da      	strh	r2, [r3, #6]
 8001f74:	4b44      	ldr	r3, [pc, #272]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	4a43      	ldr	r2, [pc, #268]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f7c:	7892      	ldrb	r2, [r2, #2]
 8001f7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f82:	fb01 f202 	mul.w	r2, r1, r2
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e222      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L')
 8001f90:	4b3a      	ldr	r3, [pc, #232]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b42      	cmp	r3, #66	; 0x42
 8001f96:	d136      	bne.n	8002006 <HAL_UART_RxCpltCallback+0x492>
 8001f98:	4b38      	ldr	r3, [pc, #224]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	2b4c      	cmp	r3, #76	; 0x4c
 8001f9e:	d132      	bne.n	8002006 <HAL_UART_RxCpltCallback+0x492>
  { // BL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001fa0:	4b36      	ldr	r3, [pc, #216]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001fa2:	789b      	ldrb	r3, [r3, #2]
 8001fa4:	2b2d      	cmp	r3, #45	; 0x2d
 8001fa6:	d105      	bne.n	8001fb4 <HAL_UART_RxCpltCallback+0x440>
 8001fa8:	4b34      	ldr	r3, [pc, #208]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8001faa:	78db      	ldrb	r3, [r3, #3]
 8001fac:	2b2d      	cmp	r3, #45	; 0x2d
 8001fae:	d101      	bne.n	8001fb4 <HAL_UART_RxCpltCallback+0x440>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_UART_RxCpltCallback+0x442>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_UART_RxCpltCallback+0x50c>)
 8001fba:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8001fbc:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_UART_RxCpltCallback+0x50c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_RxCpltCallback+0x454>
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	e000      	b.n	8001fca <HAL_UART_RxCpltCallback+0x456>
 8001fc8:	2109      	movs	r1, #9
 8001fca:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4a2e      	ldr	r2, [pc, #184]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	711a      	strb	r2, [r3, #4]
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	b291      	uxth	r1, r2
 8001fe0:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	460a      	mov	r2, r1
 8001fe8:	80da      	strh	r2, [r3, #6]
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	4a25      	ldr	r2, [pc, #148]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8001ff2:	7892      	ldrb	r2, [r2, #2]
 8001ff4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ff8:	fb01 f202 	mul.w	r2, r1, r2
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e1e7      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R')
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b42      	cmp	r3, #66	; 0x42
 800200c:	d13e      	bne.n	800208c <HAL_UART_RxCpltCallback+0x518>
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8002010:	785b      	ldrb	r3, [r3, #1]
 8002012:	2b52      	cmp	r3, #82	; 0x52
 8002014:	d13a      	bne.n	800208c <HAL_UART_RxCpltCallback+0x518>
  { // BR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8002018:	789b      	ldrb	r3, [r3, #2]
 800201a:	2b2d      	cmp	r3, #45	; 0x2d
 800201c:	d105      	bne.n	800202a <HAL_UART_RxCpltCallback+0x4b6>
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_UART_RxCpltCallback+0x508>)
 8002020:	78db      	ldrb	r3, [r3, #3]
 8002022:	2b2d      	cmp	r3, #45	; 0x2d
 8002024:	d101      	bne.n	800202a <HAL_UART_RxCpltCallback+0x4b6>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_UART_RxCpltCallback+0x4b8>
 800202a:	2300      	movs	r3, #0
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_UART_RxCpltCallback+0x50c>)
 8002030:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_UART_RxCpltCallback+0x50c>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_UART_RxCpltCallback+0x4ca>
 800203a:	2106      	movs	r1, #6
 800203c:	e000      	b.n	8002040 <HAL_UART_RxCpltCallback+0x4cc>
 800203e:	210a      	movs	r1, #10
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	460a      	mov	r2, r1
 800204c:	711a      	strb	r2, [r3, #4]
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	b291      	uxth	r1, r2
 8002056:	4a0c      	ldr	r2, [pc, #48]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	460a      	mov	r2, r1
 800205e:	80da      	strh	r2, [r3, #6]
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8002068:	7892      	ldrb	r2, [r2, #2]
 800206a:	fb93 f1f2 	sdiv	r1, r3, r2
 800206e:	fb01 f202 	mul.w	r2, r1, r2
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_UART_RxCpltCallback+0x514>)
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e1ac      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
 800207c:	2000047c 	.word	0x2000047c
 8002080:	200004d0 	.word	0x200004d0
 8002084:	20000136 	.word	0x20000136
 8002088:	20000488 	.word	0x20000488
  }
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L')
 800208c:	4b97      	ldr	r3, [pc, #604]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b54      	cmp	r3, #84	; 0x54
 8002092:	d121      	bne.n	80020d8 <HAL_UART_RxCpltCallback+0x564>
 8002094:	4b95      	ldr	r3, [pc, #596]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	2b4c      	cmp	r3, #76	; 0x4c
 800209a:	d11d      	bne.n	80020d8 <HAL_UART_RxCpltCallback+0x564>
    __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 800209c:	4b94      	ldr	r3, [pc, #592]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4a93      	ldr	r2, [pc, #588]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	220b      	movs	r2, #11
 80020a8:	711a      	strb	r2, [r3, #4]
 80020aa:	4b91      	ldr	r3, [pc, #580]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	b291      	uxth	r1, r2
 80020b2:	4a8f      	ldr	r2, [pc, #572]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	460a      	mov	r2, r1
 80020ba:	80da      	strh	r2, [r3, #6]
 80020bc:	4b8c      	ldr	r3, [pc, #560]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a8b      	ldr	r2, [pc, #556]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80020c4:	7892      	ldrb	r2, [r2, #2]
 80020c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80020ca:	fb01 f202 	mul.w	r2, r1, r2
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b87      	ldr	r3, [pc, #540]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e17e      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R')
 80020d8:	4b84      	ldr	r3, [pc, #528]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b54      	cmp	r3, #84	; 0x54
 80020de:	d121      	bne.n	8002124 <HAL_UART_RxCpltCallback+0x5b0>
 80020e0:	4b82      	ldr	r3, [pc, #520]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	2b52      	cmp	r3, #82	; 0x52
 80020e6:	d11d      	bne.n	8002124 <HAL_UART_RxCpltCallback+0x5b0>
    __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 80020e8:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4a80      	ldr	r2, [pc, #512]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	220c      	movs	r2, #12
 80020f4:	711a      	strb	r2, [r3, #4]
 80020f6:	4b7e      	ldr	r3, [pc, #504]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	b291      	uxth	r1, r2
 80020fe:	4a7c      	ldr	r2, [pc, #496]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	460a      	mov	r2, r1
 8002106:	80da      	strh	r2, [r3, #6]
 8002108:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	4a78      	ldr	r2, [pc, #480]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002110:	7892      	ldrb	r2, [r2, #2]
 8002112:	fb93 f1f2 	sdiv	r1, r3, r2
 8002116:	fb01 f202 	mul.w	r2, r1, r2
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b74      	ldr	r3, [pc, #464]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e158      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R')
 8002124:	4b71      	ldr	r3, [pc, #452]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b49      	cmp	r3, #73	; 0x49
 800212a:	d121      	bne.n	8002170 <HAL_UART_RxCpltCallback+0x5fc>
 800212c:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 800212e:	785b      	ldrb	r3, [r3, #1]
 8002130:	2b52      	cmp	r3, #82	; 0x52
 8002132:	d11d      	bne.n	8002170 <HAL_UART_RxCpltCallback+0x5fc>
    __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 8002134:	4b6e      	ldr	r3, [pc, #440]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4a6d      	ldr	r2, [pc, #436]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	220d      	movs	r2, #13
 8002140:	711a      	strb	r2, [r3, #4]
 8002142:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	b291      	uxth	r1, r2
 800214a:	4a69      	ldr	r2, [pc, #420]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	460a      	mov	r2, r1
 8002152:	80da      	strh	r2, [r3, #6]
 8002154:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800215c:	7892      	ldrb	r2, [r2, #2]
 800215e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002162:	fb01 f202 	mul.w	r2, r1, r2
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b61      	ldr	r3, [pc, #388]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	e132      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T')
 8002170:	4b5e      	ldr	r3, [pc, #376]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b44      	cmp	r3, #68	; 0x44
 8002176:	d121      	bne.n	80021bc <HAL_UART_RxCpltCallback+0x648>
 8002178:	4b5c      	ldr	r3, [pc, #368]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 800217a:	785b      	ldrb	r3, [r3, #1]
 800217c:	2b54      	cmp	r3, #84	; 0x54
 800217e:	d11d      	bne.n	80021bc <HAL_UART_RxCpltCallback+0x648>
    __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 8002180:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4a5a      	ldr	r2, [pc, #360]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	220e      	movs	r2, #14
 800218c:	711a      	strb	r2, [r3, #4]
 800218e:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	b291      	uxth	r1, r2
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	460a      	mov	r2, r1
 800219e:	80da      	strh	r2, [r3, #6]
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80021a8:	7892      	ldrb	r2, [r2, #2]
 80021aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80021ae:	fb01 f202 	mul.w	r2, r1, r2
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b4e      	ldr	r3, [pc, #312]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e10c      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z')
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b5a      	cmp	r3, #90	; 0x5a
 80021c2:	d121      	bne.n	8002208 <HAL_UART_RxCpltCallback+0x694>
 80021c4:	4b49      	ldr	r3, [pc, #292]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	2b5a      	cmp	r3, #90	; 0x5a
 80021ca:	d11d      	bne.n	8002208 <HAL_UART_RxCpltCallback+0x694>
    __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
 80021cc:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	220f      	movs	r2, #15
 80021d8:	711a      	strb	r2, [r3, #4]
 80021da:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	b291      	uxth	r1, r2
 80021e2:	4a43      	ldr	r2, [pc, #268]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	460a      	mov	r2, r1
 80021ea:	80da      	strh	r2, [r3, #6]
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a3f      	ldr	r2, [pc, #252]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80021f4:	7892      	ldrb	r2, [r2, #2]
 80021f6:	fb93 f1f2 	sdiv	r1, r3, r2
 80021fa:	fb01 f202 	mul.w	r2, r1, r2
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e0e6      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X')
 8002208:	4b38      	ldr	r3, [pc, #224]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b57      	cmp	r3, #87	; 0x57
 800220e:	d121      	bne.n	8002254 <HAL_UART_RxCpltCallback+0x6e0>
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	2b58      	cmp	r3, #88	; 0x58
 8002216:	d11d      	bne.n	8002254 <HAL_UART_RxCpltCallback+0x6e0>
    __ADD_COMMAND(cQueue, 16, val); // WN fastest path
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	4a34      	ldr	r2, [pc, #208]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	2210      	movs	r2, #16
 8002224:	711a      	strb	r2, [r3, #4]
 8002226:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	b291      	uxth	r1, r2
 800222e:	4a30      	ldr	r2, [pc, #192]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	460a      	mov	r2, r1
 8002236:	80da      	strh	r2, [r3, #6]
 8002238:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002240:	7892      	ldrb	r2, [r2, #2]
 8002242:	fb93 f1f2 	sdiv	r1, r3, r2
 8002246:	fb01 f202 	mul.w	r2, r1, r2
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e0c0      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N')
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b57      	cmp	r3, #87	; 0x57
 800225a:	d121      	bne.n	80022a0 <HAL_UART_RxCpltCallback+0x72c>
 800225c:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b4e      	cmp	r3, #78	; 0x4e
 8002262:	d11d      	bne.n	80022a0 <HAL_UART_RxCpltCallback+0x72c>
    __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
 8002264:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	2211      	movs	r2, #17
 8002270:	711a      	strb	r2, [r3, #4]
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	b291      	uxth	r1, r2
 800227a:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	460a      	mov	r2, r1
 8002282:	80da      	strh	r2, [r3, #6]
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800228c:	7892      	ldrb	r2, [r2, #2]
 800228e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002292:	fb01 f202 	mul.w	r2, r1, r2
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 800229c:	701a      	strb	r2, [r3, #0]
 800229e:	e09a      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'A')
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b46      	cmp	r3, #70	; 0x46
 80022a6:	d125      	bne.n	80022f4 <HAL_UART_RxCpltCallback+0x780>
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_UART_RxCpltCallback+0x778>)
 80022aa:	785b      	ldrb	r3, [r3, #1]
 80022ac:	2b41      	cmp	r3, #65	; 0x41
 80022ae:	d121      	bne.n	80022f4 <HAL_UART_RxCpltCallback+0x780>
    __ADD_COMMAND(cQueue, 88, val); // forward anti-clockwise rotation with variable
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	2258      	movs	r2, #88	; 0x58
 80022bc:	711a      	strb	r2, [r3, #4]
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	b291      	uxth	r1, r2
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	460a      	mov	r2, r1
 80022ce:	80da      	strh	r2, [r3, #6]
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80022d8:	7892      	ldrb	r2, [r2, #2]
 80022da:	fb93 f1f2 	sdiv	r1, r3, r2
 80022de:	fb01 f202 	mul.w	r2, r1, r2
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <HAL_UART_RxCpltCallback+0x77c>)
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	e074      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
 80022ec:	2000047c 	.word	0x2000047c
 80022f0:	20000488 	.word	0x20000488
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'C')
 80022f4:	4b4f      	ldr	r3, [pc, #316]	; (8002434 <HAL_UART_RxCpltCallback+0x8c0>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b46      	cmp	r3, #70	; 0x46
 80022fa:	d121      	bne.n	8002340 <HAL_UART_RxCpltCallback+0x7cc>
 80022fc:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <HAL_UART_RxCpltCallback+0x8c0>)
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	2b43      	cmp	r3, #67	; 0x43
 8002302:	d11d      	bne.n	8002340 <HAL_UART_RxCpltCallback+0x7cc>
    __ADD_COMMAND(cQueue, 89, val); // forward clockwise rotation with variable
 8002304:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4a4b      	ldr	r2, [pc, #300]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	2259      	movs	r2, #89	; 0x59
 8002310:	711a      	strb	r2, [r3, #4]
 8002312:	4b49      	ldr	r3, [pc, #292]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	b291      	uxth	r1, r2
 800231a:	4a47      	ldr	r2, [pc, #284]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	460a      	mov	r2, r1
 8002322:	80da      	strh	r2, [r3, #6]
 8002324:	4b44      	ldr	r3, [pc, #272]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	4a43      	ldr	r2, [pc, #268]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 800232c:	7892      	ldrb	r2, [r2, #2]
 800232e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002332:	fb01 f202 	mul.w	r2, r1, r2
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e04a      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'A')
 8002340:	4b3c      	ldr	r3, [pc, #240]	; (8002434 <HAL_UART_RxCpltCallback+0x8c0>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b42      	cmp	r3, #66	; 0x42
 8002346:	d121      	bne.n	800238c <HAL_UART_RxCpltCallback+0x818>
 8002348:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_UART_RxCpltCallback+0x8c0>)
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	2b41      	cmp	r3, #65	; 0x41
 800234e:	d11d      	bne.n	800238c <HAL_UART_RxCpltCallback+0x818>
    __ADD_COMMAND(cQueue, 90, val); // backward anti-clockwise rotation with variable
 8002350:	4b39      	ldr	r3, [pc, #228]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4a38      	ldr	r2, [pc, #224]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	225a      	movs	r2, #90	; 0x5a
 800235c:	711a      	strb	r2, [r3, #4]
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	b291      	uxth	r1, r2
 8002366:	4a34      	ldr	r2, [pc, #208]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	460a      	mov	r2, r1
 800236e:	80da      	strh	r2, [r3, #6]
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	4a30      	ldr	r2, [pc, #192]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002378:	7892      	ldrb	r2, [r2, #2]
 800237a:	fb93 f1f2 	sdiv	r1, r3, r2
 800237e:	fb01 f202 	mul.w	r2, r1, r2
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e024      	b.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'C')
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_UART_RxCpltCallback+0x8c0>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b42      	cmp	r3, #66	; 0x42
 8002392:	d120      	bne.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_UART_RxCpltCallback+0x8c0>)
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	2b43      	cmp	r3, #67	; 0x43
 800239a:	d11c      	bne.n	80023d6 <HAL_UART_RxCpltCallback+0x862>
    __ADD_COMMAND(cQueue, 91, val); // backward clockwise rotation with variable
 800239c:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4a25      	ldr	r2, [pc, #148]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	225b      	movs	r2, #91	; 0x5b
 80023a8:	711a      	strb	r2, [r3, #4]
 80023aa:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	b291      	uxth	r1, r2
 80023b2:	4a21      	ldr	r2, [pc, #132]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	460a      	mov	r2, r1
 80023ba:	80da      	strh	r2, [r3, #6]
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023c4:	7892      	ldrb	r2, [r2, #2]
 80023c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80023ca:	fb01 f202 	mul.w	r2, r1, r2
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023d4:	701a      	strb	r2, [r3, #0]

  if (!__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023dc:	785b      	ldrb	r3, [r3, #1]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d019      	beq.n	8002416 <HAL_UART_RxCpltCallback+0x8a2>
  {
    __READ_COMMAND(cQueue, curCmd, rxMsg);
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023e4:	785b      	ldrb	r3, [r3, #1]
 80023e6:	4a15      	ldr	r2, [pc, #84]	; (800243c <HAL_UART_RxCpltCallback+0x8c8>)
 80023e8:	4913      	ldr	r1, [pc, #76]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023f4:	785b      	ldrb	r3, [r3, #1]
 80023f6:	3301      	adds	r3, #1
 80023f8:	4a0f      	ldr	r2, [pc, #60]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 80023fa:	7892      	ldrb	r2, [r2, #2]
 80023fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8002400:	fb01 f202 	mul.w	r2, r1, r2
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_UART_RxCpltCallback+0x8c4>)
 800240a:	705a      	strb	r2, [r3, #1]
 800240c:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <HAL_UART_RxCpltCallback+0x8cc>)
 800240e:	210f      	movs	r1, #15
 8002410:	480c      	ldr	r0, [pc, #48]	; (8002444 <HAL_UART_RxCpltCallback+0x8d0>)
 8002412:	f00b fd5f 	bl	800ded4 <sniprintf>
  }

  // clear aRx buffer
  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_UART_RxCpltCallback+0x8d4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_UART_RxCpltCallback+0x8d8>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_UART_RxCpltCallback+0x8c0>)
 8002426:	4808      	ldr	r0, [pc, #32]	; (8002448 <HAL_UART_RxCpltCallback+0x8d4>)
 8002428:	f007 fc69 	bl	8009cfe <HAL_UART_Receive_IT>
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2000047c 	.word	0x2000047c
 8002438:	20000488 	.word	0x20000488
 800243c:	200004bc 	.word	0x200004bc
 8002440:	0800e8e4 	.word	0x0800e8e4
 8002444:	200004c0 	.word	0x200004c0
 8002448:	20000408 	.word	0x20000408
 800244c:	20000000 	.word	0x20000000

08002450 <PIDConfigInit>:

// pid
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	ed87 0a02 	vstr	s0, [r7, #8]
 800245c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002460:	ed87 1a00 	vstr	s2, [r7]
  cfg->Kp = Kp;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	601a      	str	r2, [r3, #0]
  cfg->Ki = Ki;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	605a      	str	r2, [r3, #4]
  cfg->Kd = Kd;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	609a      	str	r2, [r3, #8]
  cfg->ek1 = 0;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <PIDConfigReset>:

void PIDConfigReset(PIDConfig *cfg)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HCSR04_Read>:

void HCSR04_Read(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024c2:	481a      	ldr	r0, [pc, #104]	; (800252c <HCSR04_Read+0x74>)
 80024c4:	f004 f856 	bl	8006574 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HCSR04_Read+0x78>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HCSR04_Read+0x78>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	2b31      	cmp	r3, #49	; 0x31
 80024d8:	d9fa      	bls.n	80024d0 <HCSR04_Read+0x18>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 80024da:	2201      	movs	r2, #1
 80024dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e0:	4812      	ldr	r0, [pc, #72]	; (800252c <HCSR04_Read+0x74>)
 80024e2:	f004 f847 	bl	8006574 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 10);                                            // wait for 10 us
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HCSR04_Read+0x78>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HCSR04_Read+0x78>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d9fa      	bls.n	80024ee <HCSR04_Read+0x36>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
 80024f8:	2200      	movs	r2, #0
 80024fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024fe:	480b      	ldr	r0, [pc, #44]	; (800252c <HCSR04_Read+0x74>)
 8002500:	f004 f838 	bl	8006574 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HCSR04_Read+0x78>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	625a      	str	r2, [r3, #36]	; 0x24
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HCSR04_Read+0x78>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2b31      	cmp	r3, #49	; 0x31
 8002514:	d9fa      	bls.n	800250c <HCSR04_Read+0x54>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HCSR04_Read+0x7c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HCSR04_Read+0x7c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0204 	orr.w	r2, r2, #4
 8002524:	60da      	str	r2, [r3, #12]
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	20000378 	.word	0x20000378
 8002534:	20000330 	.word	0x20000330

08002538 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;

void StraightLineMove(const uint8_t speedMode)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af04      	add	r7, sp, #16
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]

  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	2302      	movs	r3, #2
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	4ba9      	ldr	r3, [pc, #676]	; (80027f4 <StraightLineMove+0x2bc>)
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2301      	movs	r3, #1
 8002552:	2237      	movs	r2, #55	; 0x37
 8002554:	21d0      	movs	r1, #208	; 0xd0
 8002556:	48a8      	ldr	r0, [pc, #672]	; (80027f8 <StraightLineMove+0x2c0>)
 8002558:	f004 fa64 	bl	8006a24 <HAL_I2C_Mem_Read>
 800255c:	4ba5      	ldr	r3, [pc, #660]	; (80027f4 <StraightLineMove+0x2bc>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	b21a      	sxth	r2, r3
 8002564:	4ba3      	ldr	r3, [pc, #652]	; (80027f4 <StraightLineMove+0x2bc>)
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	b21b      	sxth	r3, r3
 800256a:	4313      	orrs	r3, r2
 800256c:	b21a      	sxth	r2, r3
 800256e:	4ba3      	ldr	r3, [pc, #652]	; (80027fc <StraightLineMove+0x2c4>)
 8002570:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8002572:	4ba3      	ldr	r3, [pc, #652]	; (8002800 <StraightLineMove+0x2c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b10      	cmp	r3, #16
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	b25a      	sxtb	r2, r3
 8002588:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <StraightLineMove+0x2cc>)
 800258a:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 800258c:	4b9b      	ldr	r3, [pc, #620]	; (80027fc <StraightLineMove+0x2c4>)
 800258e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002592:	f113 0f04 	cmn.w	r3, #4
 8002596:	db04      	blt.n	80025a2 <StraightLineMove+0x6a>
 8002598:	4b98      	ldr	r3, [pc, #608]	; (80027fc <StraightLineMove+0x2c4>)
 800259a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259e:	2b0b      	cmp	r3, #11
 80025a0:	dd07      	ble.n	80025b2 <StraightLineMove+0x7a>
 80025a2:	4b96      	ldr	r3, [pc, #600]	; (80027fc <StraightLineMove+0x2c4>)
 80025a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b0:	e001      	b.n	80025b6 <StraightLineMove+0x7e>
 80025b2:	eddf 7a95 	vldr	s15, [pc, #596]	; 8002808 <StraightLineMove+0x2d0>
 80025b6:	4b95      	ldr	r3, [pc, #596]	; (800280c <StraightLineMove+0x2d4>)
 80025b8:	ed93 7a00 	vldr	s14, [r3]
 80025bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025c0:	4b92      	ldr	r3, [pc, #584]	; (800280c <StraightLineMove+0x2d4>)
 80025c2:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d164      	bne.n	8002696 <StraightLineMove+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80025cc:	4b90      	ldr	r3, [pc, #576]	; (8002810 <StraightLineMove+0x2d8>)
 80025ce:	ed93 7a00 	vldr	s14, [r3]
 80025d2:	4b8e      	ldr	r3, [pc, #568]	; (800280c <StraightLineMove+0x2d4>)
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025dc:	4b8c      	ldr	r3, [pc, #560]	; (8002810 <StraightLineMove+0x2d8>)
 80025de:	edd3 6a01 	vldr	s13, [r3, #4]
 80025e2:	4b8b      	ldr	r3, [pc, #556]	; (8002810 <StraightLineMove+0x2d8>)
 80025e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80025e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f0:	4b87      	ldr	r3, [pc, #540]	; (8002810 <StraightLineMove+0x2d8>)
 80025f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80025f6:	4b86      	ldr	r3, [pc, #536]	; (8002810 <StraightLineMove+0x2d8>)
 80025f8:	ed93 6a03 	vldr	s12, [r3, #12]
 80025fc:	4b83      	ldr	r3, [pc, #524]	; (800280c <StraightLineMove+0x2d4>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002612:	ee17 2a90 	vmov	r2, s15
 8002616:	4b7f      	ldr	r3, [pc, #508]	; (8002814 <StraightLineMove+0x2dc>)
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	4b7c      	ldr	r3, [pc, #496]	; (800280c <StraightLineMove+0x2d4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7c      	ldr	r2, [pc, #496]	; (8002810 <StraightLineMove+0x2d8>)
 8002620:	60d3      	str	r3, [r2, #12]
 8002622:	4b7b      	ldr	r3, [pc, #492]	; (8002810 <StraightLineMove+0x2d8>)
 8002624:	ed93 7a04 	vldr	s14, [r3, #16]
 8002628:	4b78      	ldr	r3, [pc, #480]	; (800280c <StraightLineMove+0x2d4>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	4b77      	ldr	r3, [pc, #476]	; (8002810 <StraightLineMove+0x2d8>)
 8002634:	edc3 7a04 	vstr	s15, [r3, #16]
 8002638:	4b76      	ldr	r3, [pc, #472]	; (8002814 <StraightLineMove+0x2dc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002640:	dc06      	bgt.n	8002650 <StraightLineMove+0x118>
 8002642:	4b74      	ldr	r3, [pc, #464]	; (8002814 <StraightLineMove+0x2dc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a74      	ldr	r2, [pc, #464]	; (8002818 <StraightLineMove+0x2e0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	bfb8      	it	lt
 800264c:	4613      	movlt	r3, r2
 800264e:	e001      	b.n	8002654 <StraightLineMove+0x11c>
 8002650:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002654:	4a6f      	ldr	r2, [pc, #444]	; (8002814 <StraightLineMove+0x2dc>)
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <StraightLineMove+0x2cc>)
 800265a:	f993 3000 	ldrsb.w	r3, [r3]
 800265e:	b29a      	uxth	r2, r3
 8002660:	4b6c      	ldr	r3, [pc, #432]	; (8002814 <StraightLineMove+0x2dc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	fb12 f303 	smulbb	r3, r2, r3
 800266a:	b29b      	uxth	r3, r3
 800266c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002670:	b29a      	uxth	r2, r3
 8002672:	4b6a      	ldr	r3, [pc, #424]	; (800281c <StraightLineMove+0x2e4>)
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <StraightLineMove+0x2cc>)
 8002678:	f993 3000 	ldrsb.w	r3, [r3]
 800267c:	b29a      	uxth	r2, r3
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <StraightLineMove+0x2dc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	fb12 f303 	smulbb	r3, r2, r3
 8002688:	b29b      	uxth	r3, r3
 800268a:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b63      	ldr	r3, [pc, #396]	; (8002820 <StraightLineMove+0x2e8>)
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	e0ef      	b.n	8002876 <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_2)
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d165      	bne.n	8002768 <StraightLineMove+0x230>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 800269c:	4b61      	ldr	r3, [pc, #388]	; (8002824 <StraightLineMove+0x2ec>)
 800269e:	ed93 7a00 	vldr	s14, [r3]
 80026a2:	4b5a      	ldr	r3, [pc, #360]	; (800280c <StraightLineMove+0x2d4>)
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ac:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <StraightLineMove+0x2ec>)
 80026ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80026b2:	4b5c      	ldr	r3, [pc, #368]	; (8002824 <StraightLineMove+0x2ec>)
 80026b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80026b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c0:	4b58      	ldr	r3, [pc, #352]	; (8002824 <StraightLineMove+0x2ec>)
 80026c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80026c6:	4b57      	ldr	r3, [pc, #348]	; (8002824 <StraightLineMove+0x2ec>)
 80026c8:	ed93 6a03 	vldr	s12, [r3, #12]
 80026cc:	4b4f      	ldr	r3, [pc, #316]	; (800280c <StraightLineMove+0x2d4>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80026d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e2:	ee17 2a90 	vmov	r2, s15
 80026e6:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <StraightLineMove+0x2dc>)
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	4b48      	ldr	r3, [pc, #288]	; (800280c <StraightLineMove+0x2d4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a4d      	ldr	r2, [pc, #308]	; (8002824 <StraightLineMove+0x2ec>)
 80026f0:	60d3      	str	r3, [r2, #12]
 80026f2:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <StraightLineMove+0x2ec>)
 80026f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80026f8:	4b44      	ldr	r3, [pc, #272]	; (800280c <StraightLineMove+0x2d4>)
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002702:	4b48      	ldr	r3, [pc, #288]	; (8002824 <StraightLineMove+0x2ec>)
 8002704:	edc3 7a04 	vstr	s15, [r3, #16]
 8002708:	4b42      	ldr	r3, [pc, #264]	; (8002814 <StraightLineMove+0x2dc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002710:	dc06      	bgt.n	8002720 <StraightLineMove+0x1e8>
 8002712:	4b40      	ldr	r3, [pc, #256]	; (8002814 <StraightLineMove+0x2dc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a44      	ldr	r2, [pc, #272]	; (8002828 <StraightLineMove+0x2f0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	bfb8      	it	lt
 800271c:	4613      	movlt	r3, r2
 800271e:	e001      	b.n	8002724 <StraightLineMove+0x1ec>
 8002720:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002724:	4a3b      	ldr	r2, [pc, #236]	; (8002814 <StraightLineMove+0x2dc>)
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <StraightLineMove+0x2cc>)
 800272a:	f993 3000 	ldrsb.w	r3, [r3]
 800272e:	b29a      	uxth	r2, r3
 8002730:	4b38      	ldr	r3, [pc, #224]	; (8002814 <StraightLineMove+0x2dc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	fb12 f303 	smulbb	r3, r2, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <StraightLineMove+0x2e4>)
 8002744:	801a      	strh	r2, [r3, #0]
 8002746:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <StraightLineMove+0x2cc>)
 8002748:	f993 3000 	ldrsb.w	r3, [r3]
 800274c:	b29a      	uxth	r2, r3
 800274e:	4b31      	ldr	r3, [pc, #196]	; (8002814 <StraightLineMove+0x2dc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	fb12 f303 	smulbb	r3, r2, r3
 8002758:	b29b      	uxth	r3, r3
 800275a:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 800275e:	3308      	adds	r3, #8
 8002760:	b29a      	uxth	r2, r3
 8002762:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <StraightLineMove+0x2e8>)
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	e086      	b.n	8002876 <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_1)
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	2b01      	cmp	r3, #1
 800276c:	f040 8083 	bne.w	8002876 <StraightLineMove+0x33e>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002770:	4b2e      	ldr	r3, [pc, #184]	; (800282c <StraightLineMove+0x2f4>)
 8002772:	ed93 7a00 	vldr	s14, [r3]
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <StraightLineMove+0x2d4>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <StraightLineMove+0x2f4>)
 8002782:	edd3 6a01 	vldr	s13, [r3, #4]
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <StraightLineMove+0x2f4>)
 8002788:	edd3 7a04 	vldr	s15, [r3, #16]
 800278c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <StraightLineMove+0x2f4>)
 8002796:	edd3 6a02 	vldr	s13, [r3, #8]
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <StraightLineMove+0x2f4>)
 800279c:	ed93 6a03 	vldr	s12, [r3, #12]
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <StraightLineMove+0x2d4>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027b6:	ee17 2a90 	vmov	r2, s15
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <StraightLineMove+0x2dc>)
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <StraightLineMove+0x2d4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1a      	ldr	r2, [pc, #104]	; (800282c <StraightLineMove+0x2f4>)
 80027c4:	60d3      	str	r3, [r2, #12]
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <StraightLineMove+0x2f4>)
 80027c8:	ed93 7a04 	vldr	s14, [r3, #16]
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <StraightLineMove+0x2d4>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <StraightLineMove+0x2f4>)
 80027d8:	edc3 7a04 	vstr	s15, [r3, #16]
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <StraightLineMove+0x2dc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80027e4:	dc24      	bgt.n	8002830 <StraightLineMove+0x2f8>
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <StraightLineMove+0x2dc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <StraightLineMove+0x2f0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bfb8      	it	lt
 80027f0:	4613      	movlt	r3, r2
 80027f2:	e01f      	b.n	8002834 <StraightLineMove+0x2fc>
 80027f4:	200004dc 	.word	0x200004dc
 80027f8:	2000024c 	.word	0x2000024c
 80027fc:	200004de 	.word	0x200004de
 8002800:	200002e8 	.word	0x200002e8
 8002804:	2000013c 	.word	0x2000013c
 8002808:	00000000 	.word	0x00000000
 800280c:	200004d8 	.word	0x200004d8
 8002810:	20000508 	.word	0x20000508
 8002814:	2000054c 	.word	0x2000054c
 8002818:	fffffda8 	.word	0xfffffda8
 800281c:	200004e0 	.word	0x200004e0
 8002820:	200004e2 	.word	0x200004e2
 8002824:	2000051c 	.word	0x2000051c
 8002828:	fffffd44 	.word	0xfffffd44
 800282c:	200004f4 	.word	0x200004f4
 8002830:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <StraightLineMove+0x35c>)
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <StraightLineMove+0x360>)
 800283a:	f993 3000 	ldrsb.w	r3, [r3]
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <StraightLineMove+0x35c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	fb12 f303 	smulbb	r3, r2, r3
 800284a:	b29b      	uxth	r3, r3
 800284c:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002850:	b29a      	uxth	r2, r3
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <StraightLineMove+0x364>)
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <StraightLineMove+0x360>)
 8002858:	f993 3000 	ldrsb.w	r3, [r3]
 800285c:	b29a      	uxth	r2, r3
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <StraightLineMove+0x35c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	fb12 f303 	smulbb	r3, r2, r3
 8002868:	b29b      	uxth	r3, r3
 800286a:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 800286e:	330c      	adds	r3, #12
 8002870:	b29a      	uxth	r2, r3
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <StraightLineMove+0x368>)
 8002874:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <StraightLineMove+0x364>)
 8002878:	881a      	ldrh	r2, [r3, #0]
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <StraightLineMove+0x36c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <StraightLineMove+0x368>)
 8002882:	881a      	ldrh	r2, [r3, #0]
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <StraightLineMove+0x36c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	2000054c 	.word	0x2000054c
 8002898:	2000013c 	.word	0x2000013c
 800289c:	200004e0 	.word	0x200004e0
 80028a0:	200004e2 	.word	0x200004e2
 80028a4:	200003c0 	.word	0x200003c0

080028a8 <RobotMoveDist>:

void RobotMoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
 80028b4:	4613      	mov	r3, r2
 80028b6:	70bb      	strb	r3, [r7, #2]
  angleNow = 0;
 80028b8:	4ba3      	ldr	r3, [pc, #652]	; (8002b48 <RobotMoveDist+0x2a0>)
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
  gyroZ = 0; // reset angle for PID
 80028c0:	4ba2      	ldr	r3, [pc, #648]	; (8002b4c <RobotMoveDist+0x2a4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 80028c6:	48a2      	ldr	r0, [pc, #648]	; (8002b50 <RobotMoveDist+0x2a8>)
 80028c8:	f7ff fde3 	bl	8002492 <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 80028cc:	48a1      	ldr	r0, [pc, #644]	; (8002b54 <RobotMoveDist+0x2ac>)
 80028ce:	f7ff fde0 	bl	8002492 <PIDConfigReset>
  PIDConfigReset(&pidFast);
 80028d2:	48a1      	ldr	r0, [pc, #644]	; (8002b58 <RobotMoveDist+0x2b0>)
 80028d4:	f7ff fddd 	bl	8002492 <PIDConfigReset>
  curDistTick = 0;
 80028d8:	4ba0      	ldr	r3, [pc, #640]	; (8002b5c <RobotMoveDist+0x2b4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	801a      	strh	r2, [r3, #0]
  dist_dL = 0;
 80028de:	4ba0      	ldr	r3, [pc, #640]	; (8002b60 <RobotMoveDist+0x2b8>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	801a      	strh	r2, [r3, #0]
  curDistTick = 0;
 80028e4:	4b9d      	ldr	r3, [pc, #628]	; (8002b5c <RobotMoveDist+0x2b4>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	801a      	strh	r2, [r3, #0]

  // char distBuf[70];

  __GET_TARGETTICK(*targetDist, targetDistTick);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fe22 	bl	8000538 <__aeabi_f2d>
 80028f4:	a38e      	add	r3, pc, #568	; (adr r3, 8002b30 <RobotMoveDist+0x288>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f7fd fe75 	bl	80005e8 <__aeabi_dmul>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	a38c      	add	r3, pc, #560	; (adr r3, 8002b38 <RobotMoveDist+0x290>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fd fcb4 	bl	8000278 <__aeabi_dsub>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	4b91      	ldr	r3, [pc, #580]	; (8002b64 <RobotMoveDist+0x2bc>)
 800291e:	f7fd ff8d 	bl	800083c <__aeabi_ddiv>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	4b8e      	ldr	r3, [pc, #568]	; (8002b68 <RobotMoveDist+0x2c0>)
 8002930:	f7fd fe5a 	bl	80005e8 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	4b8a      	ldr	r3, [pc, #552]	; (8002b6c <RobotMoveDist+0x2c4>)
 8002942:	f7fd fc99 	bl	8000278 <__aeabi_dsub>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f7fe f8e5 	bl	8000b1c <__aeabi_d2uiz>
 8002952:	4603      	mov	r3, r0
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b86      	ldr	r3, [pc, #536]	; (8002b70 <RobotMoveDist+0x2c8>)
 8002958:	801a      	strh	r2, [r3, #0]

  last_curTask_tick = HAL_GetTick();
 800295a:	f002 feff 	bl	800575c <HAL_GetTick>
 800295e:	4603      	mov	r3, r0
 8002960:	4a84      	ldr	r2, [pc, #528]	; (8002b74 <RobotMoveDist+0x2cc>)
 8002962:	6013      	str	r3, [r2, #0]
  __SET_MOTOR_DIRECTION(dir);
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	2104      	movs	r1, #4
 8002974:	4880      	ldr	r0, [pc, #512]	; (8002b78 <RobotMoveDist+0x2d0>)
 8002976:	f003 fdfd 	bl	8006574 <HAL_GPIO_WritePin>
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	2108      	movs	r1, #8
 800298a:	487b      	ldr	r0, [pc, #492]	; (8002b78 <RobotMoveDist+0x2d0>)
 800298c:	f003 fdf2 	bl	8006574 <HAL_GPIO_WritePin>
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf0c      	ite	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	2300      	movne	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	2120      	movs	r1, #32
 80029a0:	4875      	ldr	r0, [pc, #468]	; (8002b78 <RobotMoveDist+0x2d0>)
 80029a2:	f003 fde7 	bl	8006574 <HAL_GPIO_WritePin>
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	2110      	movs	r1, #16
 80029b6:	4870      	ldr	r0, [pc, #448]	; (8002b78 <RobotMoveDist+0x2d0>)
 80029b8:	f003 fddc 	bl	8006574 <HAL_GPIO_WritePin>
  __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 80029bc:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <RobotMoveDist+0x2d4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b6e      	ldr	r3, [pc, #440]	; (8002b80 <RobotMoveDist+0x2d8>)
 80029c6:	801a      	strh	r2, [r3, #0]
  do
  {

    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 80029c8:	4b6c      	ldr	r3, [pc, #432]	; (8002b7c <RobotMoveDist+0x2d4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <RobotMoveDist+0x2d4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d117      	bne.n	8002a0e <RobotMoveDist+0x166>
 80029de:	4b68      	ldr	r3, [pc, #416]	; (8002b80 <RobotMoveDist+0x2d8>)
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d806      	bhi.n	80029f8 <RobotMoveDist+0x150>
 80029ea:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <RobotMoveDist+0x2d8>)
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	e007      	b.n	8002a08 <RobotMoveDist+0x160>
 80029f8:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <RobotMoveDist+0x2d8>)
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4a55      	ldr	r2, [pc, #340]	; (8002b60 <RobotMoveDist+0x2b8>)
 8002a0a:	8013      	strh	r3, [r2, #0]
 8002a0c:	e016      	b.n	8002a3c <RobotMoveDist+0x194>
 8002a0e:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <RobotMoveDist+0x2d8>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d306      	bcc.n	8002a28 <RobotMoveDist+0x180>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	4b58      	ldr	r3, [pc, #352]	; (8002b80 <RobotMoveDist+0x2d8>)
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	e007      	b.n	8002a38 <RobotMoveDist+0x190>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	4b54      	ldr	r3, [pc, #336]	; (8002b80 <RobotMoveDist+0x2d8>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4a49      	ldr	r2, [pc, #292]	; (8002b60 <RobotMoveDist+0x2b8>)
 8002a3a:	8013      	strh	r3, [r2, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	4b4f      	ldr	r3, [pc, #316]	; (8002b80 <RobotMoveDist+0x2d8>)
 8002a42:	801a      	strh	r2, [r3, #0]
    curDistTick += dist_dL;
 8002a44:	4b45      	ldr	r3, [pc, #276]	; (8002b5c <RobotMoveDist+0x2b4>)
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	4b45      	ldr	r3, [pc, #276]	; (8002b60 <RobotMoveDist+0x2b8>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <RobotMoveDist+0x2b4>)
 8002a52:	801a      	strh	r2, [r3, #0]

    // sprintf(distBuf, "curtick: %d lasttick: %d dl: %d tar: %d cur: %d \r\n", 0, lastDistTick_L, dist_dL, targetDistTick, curDistTick);

    // HAL_UART_Transmit(&huart3, distBuf, strlen(distBuf), 0xFFFF);

    if (curDistTick >= targetDistTick)
 8002a54:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <RobotMoveDist+0x2b4>)
 8002a56:	881a      	ldrh	r2, [r3, #0]
 8002a58:	4b45      	ldr	r3, [pc, #276]	; (8002b70 <RobotMoveDist+0x2c8>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	f080 80a6 	bcs.w	8002bae <RobotMoveDist+0x306>
      break;

    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002a62:	f002 fe7b 	bl	800575c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b42      	ldr	r3, [pc, #264]	; (8002b74 <RobotMoveDist+0x2cc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	d9aa      	bls.n	80029c8 <RobotMoveDist+0x120>
    {
      if (speedMode == SPEED_MODE_T)
 8002a72:	78bb      	ldrb	r3, [r7, #2]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d103      	bne.n	8002a80 <RobotMoveDist+0x1d8>
      {
        StraightLineMove(SPEED_MODE_T);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7ff fd5d 	bl	8002538 <StraightLineMove>
 8002a7e:	e090      	b.n	8002ba2 <RobotMoveDist+0x2fa>
      }
      else
      {
        speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <RobotMoveDist+0x2b4>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <RobotMoveDist+0x2c8>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bfb8      	it	lt
 8002a90:	425b      	neglt	r3, r3
 8002a92:	4a3c      	ldr	r2, [pc, #240]	; (8002b84 <RobotMoveDist+0x2dc>)
 8002a94:	fb82 1203 	smull	r1, r2, r2, r3
 8002a98:	11d2      	asrs	r2, r2, #7
 8002a9a:	17db      	asrs	r3, r3, #31
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <RobotMoveDist+0x2e0>)
 8002aa8:	edc3 7a00 	vstr	s15, [r3]
        if (speedMode == SPEED_MODE_1)
 8002aac:	78bb      	ldrb	r3, [r7, #2]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d11e      	bne.n	8002af0 <RobotMoveDist+0x248>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002ab2:	4b35      	ldr	r3, [pc, #212]	; (8002b88 <RobotMoveDist+0x2e0>)
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac4:	dd02      	ble.n	8002acc <RobotMoveDist+0x224>
 8002ac6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002aca:	e00e      	b.n	8002aea <RobotMoveDist+0x242>
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <RobotMoveDist+0x2e0>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	d502      	bpl.n	8002ae6 <RobotMoveDist+0x23e>
 8002ae0:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002ae4:	e001      	b.n	8002aea <RobotMoveDist+0x242>
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <RobotMoveDist+0x2e0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <RobotMoveDist+0x2e0>)
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e053      	b.n	8002b98 <RobotMoveDist+0x2f0>
        else if (speedMode == SPEED_MODE_2)
 8002af0:	78bb      	ldrb	r3, [r7, #2]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d150      	bne.n	8002b98 <RobotMoveDist+0x2f0>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <RobotMoveDist+0x2e0>)
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b08:	dd02      	ble.n	8002b10 <RobotMoveDist+0x268>
 8002b0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b0e:	e041      	b.n	8002b94 <RobotMoveDist+0x2ec>
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <RobotMoveDist+0x2e0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fd0f 	bl	8000538 <__aeabi_f2d>
 8002b1a:	a309      	add	r3, pc, #36	; (adr r3, 8002b40 <RobotMoveDist+0x298>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd ffd4 	bl	8000acc <__aeabi_dcmplt>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d032      	beq.n	8002b90 <RobotMoveDist+0x2e8>
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <RobotMoveDist+0x2e4>)
 8002b2c:	e032      	b.n	8002b94 <RobotMoveDist+0x2ec>
 8002b2e:	bf00      	nop
 8002b30:	fc66b22a 	.word	0xfc66b22a
 8002b34:	3ff266ac 	.word	0x3ff266ac
 8002b38:	bb2526f8 	.word	0xbb2526f8
 8002b3c:	3feee3d4 	.word	0x3feee3d4
 8002b40:	9999999a 	.word	0x9999999a
 8002b44:	3fd99999 	.word	0x3fd99999
 8002b48:	200004d8 	.word	0x200004d8
 8002b4c:	200004de 	.word	0x200004de
 8002b50:	20000508 	.word	0x20000508
 8002b54:	200004f4 	.word	0x200004f4
 8002b58:	2000051c 	.word	0x2000051c
 8002b5c:	200004ec 	.word	0x200004ec
 8002b60:	200004f0 	.word	0x200004f0
 8002b64:	40340000 	.word	0x40340000
 8002b68:	4094a000 	.word	0x4094a000
 8002b6c:	40240000 	.word	0x40240000
 8002b70:	200004ee 	.word	0x200004ee
 8002b74:	200004e4 	.word	0x200004e4
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	200002e8 	.word	0x200002e8
 8002b80:	200004f2 	.word	0x200004f2
 8002b84:	21195767 	.word	0x21195767
 8002b88:	20000138 	.word	0x20000138
 8002b8c:	3ecccccd 	.word	0x3ecccccd
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <RobotMoveDist+0x320>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <RobotMoveDist+0x320>)
 8002b96:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002b98:	78bb      	ldrb	r3, [r7, #2]
 8002b9a:	490b      	ldr	r1, [pc, #44]	; (8002bc8 <RobotMoveDist+0x320>)
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f819 	bl	8002bd4 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8002ba2:	f002 fddb 	bl	800575c <HAL_GetTick>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <RobotMoveDist+0x324>)
 8002baa:	6013      	str	r3, [r2, #0]
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002bac:	e70c      	b.n	80029c8 <RobotMoveDist+0x120>
      break;
 8002bae:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <RobotMoveDist+0x328>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <RobotMoveDist+0x328>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000138 	.word	0x20000138
 8002bcc:	200004e4 	.word	0x200004e4
 8002bd0:	200003c0 	.word	0x200003c0

08002bd4 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float *speedScale)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af04      	add	r7, sp, #16
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 8002be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	2302      	movs	r3, #2
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	4b9b      	ldr	r3, [pc, #620]	; (8002e58 <StraightLineMoveSpeedScale+0x284>)
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	2237      	movs	r2, #55	; 0x37
 8002bf2:	21d0      	movs	r1, #208	; 0xd0
 8002bf4:	4899      	ldr	r0, [pc, #612]	; (8002e5c <StraightLineMoveSpeedScale+0x288>)
 8002bf6:	f003 ff15 	bl	8006a24 <HAL_I2C_Mem_Read>
 8002bfa:	4b97      	ldr	r3, [pc, #604]	; (8002e58 <StraightLineMoveSpeedScale+0x284>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	b21a      	sxth	r2, r3
 8002c02:	4b95      	ldr	r3, [pc, #596]	; (8002e58 <StraightLineMoveSpeedScale+0x284>)
 8002c04:	785b      	ldrb	r3, [r3, #1]
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	b21a      	sxth	r2, r3
 8002c0c:	4b94      	ldr	r3, [pc, #592]	; (8002e60 <StraightLineMoveSpeedScale+0x28c>)
 8002c0e:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 8002c10:	4b94      	ldr	r3, [pc, #592]	; (8002e64 <StraightLineMoveSpeedScale+0x290>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d101      	bne.n	8002c22 <StraightLineMoveSpeedScale+0x4e>
 8002c1e:	2201      	movs	r2, #1
 8002c20:	e001      	b.n	8002c26 <StraightLineMoveSpeedScale+0x52>
 8002c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c26:	4b90      	ldr	r3, [pc, #576]	; (8002e68 <StraightLineMoveSpeedScale+0x294>)
 8002c28:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002c2a:	4b8d      	ldr	r3, [pc, #564]	; (8002e60 <StraightLineMoveSpeedScale+0x28c>)
 8002c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c30:	f113 0f04 	cmn.w	r3, #4
 8002c34:	db04      	blt.n	8002c40 <StraightLineMoveSpeedScale+0x6c>
 8002c36:	4b8a      	ldr	r3, [pc, #552]	; (8002e60 <StraightLineMoveSpeedScale+0x28c>)
 8002c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3c:	2b0b      	cmp	r3, #11
 8002c3e:	dd07      	ble.n	8002c50 <StraightLineMoveSpeedScale+0x7c>
 8002c40:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <StraightLineMoveSpeedScale+0x28c>)
 8002c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4e:	e001      	b.n	8002c54 <StraightLineMoveSpeedScale+0x80>
 8002c50:	eddf 7a86 	vldr	s15, [pc, #536]	; 8002e6c <StraightLineMoveSpeedScale+0x298>
 8002c54:	4b86      	ldr	r3, [pc, #536]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002c56:	ed93 7a00 	vldr	s14, [r3]
 8002c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c5e:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002c60:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d165      	bne.n	8002d36 <StraightLineMoveSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002c6a:	4b82      	ldr	r3, [pc, #520]	; (8002e74 <StraightLineMoveSpeedScale+0x2a0>)
 8002c6c:	ed93 7a00 	vldr	s14, [r3]
 8002c70:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c7a:	4b7e      	ldr	r3, [pc, #504]	; (8002e74 <StraightLineMoveSpeedScale+0x2a0>)
 8002c7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c80:	4b7c      	ldr	r3, [pc, #496]	; (8002e74 <StraightLineMoveSpeedScale+0x2a0>)
 8002c82:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8e:	4b79      	ldr	r3, [pc, #484]	; (8002e74 <StraightLineMoveSpeedScale+0x2a0>)
 8002c90:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c94:	4b77      	ldr	r3, [pc, #476]	; (8002e74 <StraightLineMoveSpeedScale+0x2a0>)
 8002c96:	ed93 6a03 	vldr	s12, [r3, #12]
 8002c9a:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb0:	ee17 2a90 	vmov	r2, s15
 8002cb4:	4b70      	ldr	r3, [pc, #448]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	4b6d      	ldr	r3, [pc, #436]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6d      	ldr	r2, [pc, #436]	; (8002e74 <StraightLineMoveSpeedScale+0x2a0>)
 8002cbe:	60d3      	str	r3, [r2, #12]
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <StraightLineMoveSpeedScale+0x2a0>)
 8002cc2:	ed93 7a04 	vldr	s14, [r3, #16]
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	4b68      	ldr	r3, [pc, #416]	; (8002e74 <StraightLineMoveSpeedScale+0x2a0>)
 8002cd2:	edc3 7a04 	vstr	s15, [r3, #16]
 8002cd6:	4b68      	ldr	r3, [pc, #416]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002cde:	dc06      	bgt.n	8002cee <StraightLineMoveSpeedScale+0x11a>
 8002ce0:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a65      	ldr	r2, [pc, #404]	; (8002e7c <StraightLineMoveSpeedScale+0x2a8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	bfb8      	it	lt
 8002cea:	4613      	movlt	r3, r2
 8002cec:	e001      	b.n	8002cf2 <StraightLineMoveSpeedScale+0x11e>
 8002cee:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002cf2:	4a61      	ldr	r2, [pc, #388]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b5c      	ldr	r3, [pc, #368]	; (8002e68 <StraightLineMoveSpeedScale+0x294>)
 8002cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	fb12 f303 	smulbb	r3, r2, r3
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <StraightLineMoveSpeedScale+0x2ac>)
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	4b54      	ldr	r3, [pc, #336]	; (8002e68 <StraightLineMoveSpeedScale+0x294>)
 8002d16:	f993 3000 	ldrsb.w	r3, [r3]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	fb12 f303 	smulbb	r3, r2, r3
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b54      	ldr	r3, [pc, #336]	; (8002e84 <StraightLineMoveSpeedScale+0x2b0>)
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	e067      	b.n	8002e06 <StraightLineMoveSpeedScale+0x232>
  else if (speedMode == SPEED_MODE_2)
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d164      	bne.n	8002e06 <StraightLineMoveSpeedScale+0x232>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002d3c:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <StraightLineMoveSpeedScale+0x2b4>)
 8002d3e:	ed93 7a00 	vldr	s14, [r3]
 8002d42:	4b4b      	ldr	r3, [pc, #300]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d4c:	4b4e      	ldr	r3, [pc, #312]	; (8002e88 <StraightLineMoveSpeedScale+0x2b4>)
 8002d4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d52:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <StraightLineMoveSpeedScale+0x2b4>)
 8002d54:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d60:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <StraightLineMoveSpeedScale+0x2b4>)
 8002d62:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d66:	4b48      	ldr	r3, [pc, #288]	; (8002e88 <StraightLineMoveSpeedScale+0x2b4>)
 8002d68:	ed93 6a03 	vldr	s12, [r3, #12]
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d82:	ee17 2a90 	vmov	r2, s15
 8002d86:	4b3c      	ldr	r3, [pc, #240]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a3e      	ldr	r2, [pc, #248]	; (8002e88 <StraightLineMoveSpeedScale+0x2b4>)
 8002d90:	60d3      	str	r3, [r2, #12]
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <StraightLineMoveSpeedScale+0x2b4>)
 8002d94:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d98:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <StraightLineMoveSpeedScale+0x29c>)
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <StraightLineMoveSpeedScale+0x2b4>)
 8002da4:	edc3 7a04 	vstr	s15, [r3, #16]
 8002da8:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002db0:	dc06      	bgt.n	8002dc0 <StraightLineMoveSpeedScale+0x1ec>
 8002db2:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a31      	ldr	r2, [pc, #196]	; (8002e7c <StraightLineMoveSpeedScale+0x2a8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bfb8      	it	lt
 8002dbc:	4613      	movlt	r3, r2
 8002dbe:	e001      	b.n	8002dc4 <StraightLineMoveSpeedScale+0x1f0>
 8002dc0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002dc4:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <StraightLineMoveSpeedScale+0x294>)
 8002dca:	f993 3000 	ldrsb.w	r3, [r3]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	fb12 f303 	smulbb	r3, r2, r3
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <StraightLineMoveSpeedScale+0x2ac>)
 8002de4:	801a      	strh	r2, [r3, #0]
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <StraightLineMoveSpeedScale+0x294>)
 8002de8:	f993 3000 	ldrsb.w	r3, [r3]
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <StraightLineMoveSpeedScale+0x2a4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	fb12 f303 	smulbb	r3, r2, r3
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002dfe:	3308      	adds	r3, #8
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <StraightLineMoveSpeedScale+0x2b0>)
 8002e04:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <StraightLineMoveSpeedScale+0x2ac>)
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <StraightLineMoveSpeedScale+0x2b8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e24:	ee17 2a90 	vmov	r2, s15
 8002e28:	635a      	str	r2, [r3, #52]	; 0x34
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <StraightLineMoveSpeedScale+0x2b0>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <StraightLineMoveSpeedScale+0x2b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e48:	ee17 2a90 	vmov	r2, s15
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200004dc 	.word	0x200004dc
 8002e5c:	2000024c 	.word	0x2000024c
 8002e60:	200004de 	.word	0x200004de
 8002e64:	200002e8 	.word	0x200002e8
 8002e68:	2000013c 	.word	0x2000013c
 8002e6c:	00000000 	.word	0x00000000
 8002e70:	200004d8 	.word	0x200004d8
 8002e74:	200004f4 	.word	0x200004f4
 8002e78:	2000054c 	.word	0x2000054c
 8002e7c:	fffffd44 	.word	0xfffffd44
 8002e80:	200004e0 	.word	0x200004e0
 8002e84:	200004e2 	.word	0x200004e2
 8002e88:	2000051c 	.word	0x2000051c
 8002e8c:	200003c0 	.word	0x200003c0

08002e90 <RobotTurn>:

void RobotTurn(float *targetAngle)
{
 8002e90:	b5b0      	push	{r4, r5, r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af04      	add	r7, sp, #16
 8002e96:	6078      	str	r0, [r7, #4]
  angleNow = 0;
 8002e98:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <RobotTurn+0x138>)
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <RobotTurn+0x13c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8002ea6:	f002 fc59 	bl	800575c <HAL_GetTick>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4a48      	ldr	r2, [pc, #288]	; (8002fd0 <RobotTurn+0x140>)
 8002eae:	6013      	str	r3, [r2, #0]
  do
  {
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002eb0:	f002 fc54 	bl	800575c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <RobotTurn+0x140>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d9f7      	bls.n	8002eb0 <RobotTurn+0x20>
    { // sample gyro every 5ms
      __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8002ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ec4:	9302      	str	r3, [sp, #8]
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <RobotTurn+0x144>)
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	2237      	movs	r2, #55	; 0x37
 8002ed2:	21d0      	movs	r1, #208	; 0xd0
 8002ed4:	4840      	ldr	r0, [pc, #256]	; (8002fd8 <RobotTurn+0x148>)
 8002ed6:	f003 fda5 	bl	8006a24 <HAL_I2C_Mem_Read>
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <RobotTurn+0x144>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	4b3c      	ldr	r3, [pc, #240]	; (8002fd4 <RobotTurn+0x144>)
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	b21a      	sxth	r2, r3
 8002eec:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <RobotTurn+0x13c>)
 8002eee:	801a      	strh	r2, [r3, #0]
      angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002ef0:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <RobotTurn+0x138>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb1f 	bl	8000538 <__aeabi_f2d>
 8002efa:	4604      	mov	r4, r0
 8002efc:	460d      	mov	r5, r1
 8002efe:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <RobotTurn+0x13c>)
 8002f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fb05 	bl	8000514 <__aeabi_i2d>
 8002f0a:	a32b      	add	r3, pc, #172	; (adr r3, 8002fb8 <RobotTurn+0x128>)
 8002f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f10:	f7fd fc94 	bl	800083c <__aeabi_ddiv>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	a328      	add	r3, pc, #160	; (adr r3, 8002fc0 <RobotTurn+0x130>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f7fd fb61 	bl	80005e8 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f9a5 	bl	800027c <__adddf3>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fe0f 	bl	8000b5c <__aeabi_d2f>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <RobotTurn+0x138>)
 8002f42:	6013      	str	r3, [r2, #0]
      if (abs(angleNow - *targetAngle) < 0.01)
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <RobotTurn+0x138>)
 8002f46:	ed93 7a00 	vldr	s14, [r3]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f58:	ee17 3a90 	vmov	r3, s15
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db0d      	blt.n	8002f7c <RobotTurn+0xec>
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <RobotTurn+0x138>)
 8002f62:	ed93 7a00 	vldr	s14, [r3]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f74:	ee17 3a90 	vmov	r3, s15
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dd05      	ble.n	8002f88 <RobotTurn+0xf8>
        break;
      last_curTask_tick = HAL_GetTick();
 8002f7c:	f002 fbee 	bl	800575c <HAL_GetTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <RobotTurn+0x140>)
 8002f84:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002f86:	e793      	b.n	8002eb0 <RobotTurn+0x20>
        break;
 8002f88:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002f8a:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <RobotTurn+0x14c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <RobotTurn+0x14c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
  __RESET_SERVO_TURN(&htim1);
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <RobotTurn+0x150>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2291      	movs	r2, #145	; 0x91
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fa6:	f002 fbe5 	bl	8005774 <HAL_Delay>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	66666666 	.word	0x66666666
 8002fbc:	40306666 	.word	0x40306666
 8002fc0:	47ae147b 	.word	0x47ae147b
 8002fc4:	3f847ae1 	.word	0x3f847ae1
 8002fc8:	200004d8 	.word	0x200004d8
 8002fcc:	200004de 	.word	0x200004de
 8002fd0:	200004e4 	.word	0x200004e4
 8002fd4:	200004dc 	.word	0x200004dc
 8002fd8:	2000024c 	.word	0x2000024c
 8002fdc:	200003c0 	.word	0x200003c0
 8002fe0:	200002a0 	.word	0x200002a0
 8002fe4:	00000000 	.word	0x00000000

08002fe8 <RobotMoveDistObstacle>:
}

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float *targetDist, const uint8_t speedMode)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  angleNow = 0;
 8002ff4:	4b9c      	ldr	r3, [pc, #624]	; (8003268 <RobotMoveDistObstacle+0x280>)
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8002ffc:	4b9b      	ldr	r3, [pc, #620]	; (800326c <RobotMoveDistObstacle+0x284>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 8003002:	489b      	ldr	r0, [pc, #620]	; (8003270 <RobotMoveDistObstacle+0x288>)
 8003004:	f7ff fa45 	bl	8002492 <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8003008:	489a      	ldr	r0, [pc, #616]	; (8003274 <RobotMoveDistObstacle+0x28c>)
 800300a:	f7ff fa42 	bl	8002492 <PIDConfigReset>
  PIDConfigReset(&pidFast);
 800300e:	489a      	ldr	r0, [pc, #616]	; (8003278 <RobotMoveDistObstacle+0x290>)
 8003010:	f7ff fa3f 	bl	8002492 <PIDConfigReset>
  obsDist_US = 1000;
 8003014:	4b99      	ldr	r3, [pc, #612]	; (800327c <RobotMoveDistObstacle+0x294>)
 8003016:	4a9a      	ldr	r2, [pc, #616]	; (8003280 <RobotMoveDistObstacle+0x298>)
 8003018:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800301a:	2104      	movs	r1, #4
 800301c:	4899      	ldr	r0, [pc, #612]	; (8003284 <RobotMoveDistObstacle+0x29c>)
 800301e:	f005 f9d9 	bl	80083d4 <HAL_TIM_IC_Start_IT>
  last_curTask_tick = HAL_GetTick();
 8003022:	f002 fb9b 	bl	800575c <HAL_GetTick>
 8003026:	4603      	mov	r3, r0
 8003028:	4a97      	ldr	r2, [pc, #604]	; (8003288 <RobotMoveDistObstacle+0x2a0>)
 800302a:	6013      	str	r3, [r2, #0]
    // HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
    // __delay_us(&htim6, 10);                                            // wait for 10us
    // HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
    // __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);

    HCSR04_Read();
 800302c:	f7ff fa44 	bl	80024b8 <HCSR04_Read>

    osDelay(10); // give timer interrupt chance to update obsDist_US value
 8003030:	200a      	movs	r0, #10
 8003032:	f007 ff1d 	bl	800ae70 <osDelay>
    if (abs(*targetDist - obsDist_US) < 0.1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	ed93 7a00 	vldr	s14, [r3]
 800303c:	4b8f      	ldr	r3, [pc, #572]	; (800327c <RobotMoveDistObstacle+0x294>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800304a:	ee17 3a90 	vmov	r3, s15
 800304e:	2b00      	cmp	r3, #0
 8003050:	db0e      	blt.n	8003070 <RobotMoveDistObstacle+0x88>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	ed93 7a00 	vldr	s14, [r3]
 8003058:	4b88      	ldr	r3, [pc, #544]	; (800327c <RobotMoveDistObstacle+0x294>)
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003066:	ee17 3a90 	vmov	r3, s15
 800306a:	2b00      	cmp	r3, #0
 800306c:	f340 80e6 	ble.w	800323c <RobotMoveDistObstacle+0x254>
      break;
    __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	ed93 7a00 	vldr	s14, [r3]
 8003076:	4b81      	ldr	r3, [pc, #516]	; (800327c <RobotMoveDistObstacle+0x294>)
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003084:	bf94      	ite	ls
 8003086:	2301      	movls	r3, #1
 8003088:	2300      	movhi	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f083 0301 	eor.w	r3, r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	2104      	movs	r1, #4
 8003098:	487c      	ldr	r0, [pc, #496]	; (800328c <RobotMoveDistObstacle+0x2a4>)
 800309a:	f003 fa6b 	bl	8006574 <HAL_GPIO_WritePin>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	ed93 7a00 	vldr	s14, [r3]
 80030a4:	4b75      	ldr	r3, [pc, #468]	; (800327c <RobotMoveDistObstacle+0x294>)
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	bf94      	ite	ls
 80030b4:	2301      	movls	r3, #1
 80030b6:	2300      	movhi	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	2108      	movs	r1, #8
 80030be:	4873      	ldr	r0, [pc, #460]	; (800328c <RobotMoveDistObstacle+0x2a4>)
 80030c0:	f003 fa58 	bl	8006574 <HAL_GPIO_WritePin>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	ed93 7a00 	vldr	s14, [r3]
 80030ca:	4b6c      	ldr	r3, [pc, #432]	; (800327c <RobotMoveDistObstacle+0x294>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	bf94      	ite	ls
 80030da:	2301      	movls	r3, #1
 80030dc:	2300      	movhi	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	2120      	movs	r1, #32
 80030ec:	4867      	ldr	r0, [pc, #412]	; (800328c <RobotMoveDistObstacle+0x2a4>)
 80030ee:	f003 fa41 	bl	8006574 <HAL_GPIO_WritePin>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	ed93 7a00 	vldr	s14, [r3]
 80030f8:	4b60      	ldr	r3, [pc, #384]	; (800327c <RobotMoveDistObstacle+0x294>)
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	2110      	movs	r1, #16
 8003112:	485e      	ldr	r0, [pc, #376]	; (800328c <RobotMoveDistObstacle+0x2a4>)
 8003114:	f003 fa2e 	bl	8006574 <HAL_GPIO_WritePin>
    if (HAL_GetTick() - last_curTask_tick >= 20)
 8003118:	f002 fb20 	bl	800575c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	4b5a      	ldr	r3, [pc, #360]	; (8003288 <RobotMoveDistObstacle+0x2a0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b13      	cmp	r3, #19
 8003126:	d981      	bls.n	800302c <RobotMoveDistObstacle+0x44>
    {
      //		  speedScale = 1;
      if (speedMode == SPEED_MODE_1)
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d13f      	bne.n	80031ae <RobotMoveDistObstacle+0x1c6>
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 800312e:	4b53      	ldr	r3, [pc, #332]	; (800327c <RobotMoveDistObstacle+0x294>)
 8003130:	ed93 7a00 	vldr	s14, [r3]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003142:	ee17 3a90 	vmov	r3, s15
 8003146:	2b00      	cmp	r3, #0
 8003148:	bfb8      	it	lt
 800314a:	425b      	neglt	r3, r3
 800314c:	4a50      	ldr	r2, [pc, #320]	; (8003290 <RobotMoveDistObstacle+0x2a8>)
 800314e:	fb82 1203 	smull	r1, r2, r2, r3
 8003152:	441a      	add	r2, r3
 8003154:	10d2      	asrs	r2, r2, #3
 8003156:	17db      	asrs	r3, r3, #31
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003162:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 8003164:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8003168:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317a:	dd02      	ble.n	8003182 <RobotMoveDistObstacle+0x19a>
 800317c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003180:	e00e      	b.n	80031a0 <RobotMoveDistObstacle+0x1b8>
 8003182:	4b44      	ldr	r3, [pc, #272]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 8003184:	edd3 7a00 	vldr	s15, [r3]
 8003188:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800318c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003194:	d502      	bpl.n	800319c <RobotMoveDistObstacle+0x1b4>
 8003196:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 800319a:	e001      	b.n	80031a0 <RobotMoveDistObstacle+0x1b8>
 800319c:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 80031a2:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 80031a4:	493b      	ldr	r1, [pc, #236]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7ff fd14 	bl	8002bd4 <StraightLineMoveSpeedScale>
 80031ac:	e040      	b.n	8003230 <RobotMoveDistObstacle+0x248>
      }
      else
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 80031ae:	4b33      	ldr	r3, [pc, #204]	; (800327c <RobotMoveDistObstacle+0x294>)
 80031b0:	ed93 7a00 	vldr	s14, [r3]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031c2:	ee17 3a90 	vmov	r3, s15
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bfb8      	it	lt
 80031ca:	425b      	neglt	r3, r3
 80031cc:	4a30      	ldr	r2, [pc, #192]	; (8003290 <RobotMoveDistObstacle+0x2a8>)
 80031ce:	fb82 1203 	smull	r1, r2, r2, r3
 80031d2:	441a      	add	r2, r3
 80031d4:	10d2      	asrs	r2, r2, #3
 80031d6:	17db      	asrs	r3, r3, #31
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e2:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 80031e4:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	dd02      	ble.n	8003202 <RobotMoveDistObstacle+0x21a>
 80031fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003200:	e010      	b.n	8003224 <RobotMoveDistObstacle+0x23c>
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f996 	bl	8000538 <__aeabi_f2d>
 800320c:	a314      	add	r3, pc, #80	; (adr r3, 8003260 <RobotMoveDistObstacle+0x278>)
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f7fd fc5b 	bl	8000acc <__aeabi_dcmplt>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <RobotMoveDistObstacle+0x238>
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <RobotMoveDistObstacle+0x2b0>)
 800321e:	e001      	b.n	8003224 <RobotMoveDistObstacle+0x23c>
 8003220:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 8003226:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 8003228:	491a      	ldr	r1, [pc, #104]	; (8003294 <RobotMoveDistObstacle+0x2ac>)
 800322a:	2002      	movs	r0, #2
 800322c:	f7ff fcd2 	bl	8002bd4 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8003230:	f002 fa94 	bl	800575c <HAL_GetTick>
 8003234:	4603      	mov	r3, r0
 8003236:	4a14      	ldr	r2, [pc, #80]	; (8003288 <RobotMoveDistObstacle+0x2a0>)
 8003238:	6013      	str	r3, [r2, #0]
    HCSR04_Read();
 800323a:	e6f7      	b.n	800302c <RobotMoveDistObstacle+0x44>
      break;
 800323c:	bf00      	nop
    }

  } while (1);

  __SET_MOTOR_DUTY(&htim8, 0, 0);
 800323e:	4b17      	ldr	r3, [pc, #92]	; (800329c <RobotMoveDistObstacle+0x2b4>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	635a      	str	r2, [r3, #52]	; 0x34
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <RobotMoveDistObstacle+0x2b4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2200      	movs	r2, #0
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 800324e:	2104      	movs	r1, #4
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <RobotMoveDistObstacle+0x29c>)
 8003252:	f005 f9e7 	bl	8008624 <HAL_TIM_IC_Stop_IT>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	9999999a 	.word	0x9999999a
 8003264:	3fd99999 	.word	0x3fd99999
 8003268:	200004d8 	.word	0x200004d8
 800326c:	200004de 	.word	0x200004de
 8003270:	20000508 	.word	0x20000508
 8003274:	200004f4 	.word	0x200004f4
 8003278:	2000051c 	.word	0x2000051c
 800327c:	20000530 	.word	0x20000530
 8003280:	447a0000 	.word	0x447a0000
 8003284:	20000330 	.word	0x20000330
 8003288:	200004e4 	.word	0x200004e4
 800328c:	40020000 	.word	0x40020000
 8003290:	88888889 	.word	0x88888889
 8003294:	20000138 	.word	0x20000138
 8003298:	3ecccccd 	.word	0x3ecccccd
 800329c:	200003c0 	.word	0x200003c0

080032a0 <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  // dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);

  // /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 80032a8:	2064      	movs	r0, #100	; 0x64
 80032aa:	f007 fde1 	bl	800ae70 <osDelay>
 80032ae:	e7fb      	b.n	80032a8 <runEncoder+0x8>

080032b0 <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	6078      	str	r0, [r7, #4]
    // HAL_UART_Transmit(&huart3, aRxBuffer, RX_BUFFER_SIZE, 0xFFFF);
    // IR_data_raw_acc_R = HAL_ADC_GetValue(&hadc1);
    // IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);

    // ir debugging
    HAL_ADC_Start(&hadc1);
 80032b8:	481b      	ldr	r0, [pc, #108]	; (8003328 <runOledTask+0x78>)
 80032ba:	f002 fac3 	bl	8005844 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 20);
 80032be:	2114      	movs	r1, #20
 80032c0:	4819      	ldr	r0, [pc, #100]	; (8003328 <runOledTask+0x78>)
 80032c2:	f002 fb91 	bl	80059e8 <HAL_ADC_PollForConversion>
    IR_data_raw_acc_R = HAL_ADC_GetValue(&hadc1);
 80032c6:	4818      	ldr	r0, [pc, #96]	; (8003328 <runOledTask+0x78>)
 80032c8:	f002 fc19 	bl	8005afe <HAL_ADC_GetValue>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4a17      	ldr	r2, [pc, #92]	; (800332c <runOledTask+0x7c>)
 80032d0:	6013      	str	r3, [r2, #0]
    OLED_ShowNumber(0, 10, IR_data_raw_acc_R, 20, 12);
 80032d2:	4b16      	ldr	r3, [pc, #88]	; (800332c <runOledTask+0x7c>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	230c      	movs	r3, #12
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2314      	movs	r3, #20
 80032dc:	210a      	movs	r1, #10
 80032de:	2000      	movs	r0, #0
 80032e0:	f00a fccc 	bl	800dc7c <OLED_ShowNumber>
    // HAL_ADC_Stop(&hadc1);

    HAL_ADC_Start(&hadc2);
 80032e4:	4812      	ldr	r0, [pc, #72]	; (8003330 <runOledTask+0x80>)
 80032e6:	f002 faad 	bl	8005844 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 20);
 80032ea:	2114      	movs	r1, #20
 80032ec:	4810      	ldr	r0, [pc, #64]	; (8003330 <runOledTask+0x80>)
 80032ee:	f002 fb7b 	bl	80059e8 <HAL_ADC_PollForConversion>
    IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);
 80032f2:	480f      	ldr	r0, [pc, #60]	; (8003330 <runOledTask+0x80>)
 80032f4:	f002 fc03 	bl	8005afe <HAL_ADC_GetValue>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <runOledTask+0x84>)
 80032fc:	6013      	str	r3, [r2, #0]
    OLED_ShowNumber(0, 20, IR_data_raw_acc_L, 20, 12);
 80032fe:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <runOledTask+0x84>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	230c      	movs	r3, #12
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2314      	movs	r3, #20
 8003308:	2114      	movs	r1, #20
 800330a:	2000      	movs	r0, #0
 800330c:	f00a fcb6 	bl	800dc7c <OLED_ShowNumber>
    // us debugging
    // HCSR04_Read();
    // OLED_ShowNumber(0, 0, obsDist_US, 5, 12);

    // display current command
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 8003310:	4a09      	ldr	r2, [pc, #36]	; (8003338 <runOledTask+0x88>)
 8003312:	2128      	movs	r1, #40	; 0x28
 8003314:	2000      	movs	r0, #0
 8003316:	f00a fd1f 	bl	800dd58 <OLED_ShowString>

    OLED_Refresh_Gram();
 800331a:	f00a fb1f 	bl	800d95c <OLED_Refresh_Gram>
    osDelay(100);
 800331e:	2064      	movs	r0, #100	; 0x64
 8003320:	f007 fda6 	bl	800ae70 <osDelay>
    HAL_ADC_Start(&hadc1);
 8003324:	e7c8      	b.n	80032b8 <runOledTask+0x8>
 8003326:	bf00      	nop
 8003328:	200001bc 	.word	0x200001bc
 800332c:	20000538 	.word	0x20000538
 8003330:	20000204 	.word	0x20000204
 8003334:	20000534 	.word	0x20000534
 8003338:	2000047c 	.word	0x2000047c

0800333c <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFWTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_FORWARD)
 8003344:	4b71      	ldr	r3, [pc, #452]	; (800350c <runFWTask+0x1d0>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <runFWTask+0x1a>
      osDelay(1000);
 800334c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003350:	f007 fd8e 	bl	800ae70 <osDelay>
 8003354:	e7f6      	b.n	8003344 <runFWTask+0x8>
    else
    {
      targetDist = 0;
 8003356:	4b6e      	ldr	r3, [pc, #440]	; (8003510 <runFWTask+0x1d4>)
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 800335e:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <runFWTask+0x1d8>)
 8003360:	2200      	movs	r2, #0
 8003362:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 8003364:	4b6c      	ldr	r3, [pc, #432]	; (8003518 <runFWTask+0x1dc>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d061      	beq.n	8003430 <runFWTask+0xf4>
      {

        angleNow = 0;
 800336c:	4b6b      	ldr	r3, [pc, #428]	; (800351c <runFWTask+0x1e0>)
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 8003374:	4b6a      	ldr	r3, [pc, #424]	; (8003520 <runFWTask+0x1e4>)
 8003376:	2200      	movs	r2, #0
 8003378:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 800337a:	486a      	ldr	r0, [pc, #424]	; (8003524 <runFWTask+0x1e8>)
 800337c:	f7ff f889 	bl	8002492 <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 8003380:	4869      	ldr	r0, [pc, #420]	; (8003528 <runFWTask+0x1ec>)
 8003382:	f7ff f886 	bl	8002492 <PIDConfigReset>
        PIDConfigReset(&pidFast);
 8003386:	4869      	ldr	r0, [pc, #420]	; (800352c <runFWTask+0x1f0>)
 8003388:	f7ff f883 	bl	8002492 <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 800338c:	2200      	movs	r2, #0
 800338e:	2104      	movs	r1, #4
 8003390:	4867      	ldr	r0, [pc, #412]	; (8003530 <runFWTask+0x1f4>)
 8003392:	f003 f8ef 	bl	8006574 <HAL_GPIO_WritePin>
 8003396:	2201      	movs	r2, #1
 8003398:	2108      	movs	r1, #8
 800339a:	4865      	ldr	r0, [pc, #404]	; (8003530 <runFWTask+0x1f4>)
 800339c:	f003 f8ea 	bl	8006574 <HAL_GPIO_WritePin>
 80033a0:	2200      	movs	r2, #0
 80033a2:	2120      	movs	r1, #32
 80033a4:	4862      	ldr	r0, [pc, #392]	; (8003530 <runFWTask+0x1f4>)
 80033a6:	f003 f8e5 	bl	8006574 <HAL_GPIO_WritePin>
 80033aa:	2201      	movs	r2, #1
 80033ac:	2110      	movs	r1, #16
 80033ae:	4860      	ldr	r0, [pc, #384]	; (8003530 <runFWTask+0x1f4>)
 80033b0:	f003 f8e0 	bl	8006574 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 80033b4:	4b5f      	ldr	r3, [pc, #380]	; (8003534 <runFWTask+0x1f8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2200      	movs	r2, #0
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34
 80033bc:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <runFWTask+0x1f8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2200      	movs	r2, #0
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
 80033c4:	4b51      	ldr	r3, [pc, #324]	; (800350c <runFWTask+0x1d0>)
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <runFWTask+0x1fc>)
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	4b4f      	ldr	r3, [pc, #316]	; (800350c <runFWTask+0x1d0>)
 80033ce:	220b      	movs	r2, #11
 80033d0:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80033d2:	4b5a      	ldr	r3, [pc, #360]	; (800353c <runFWTask+0x200>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <runFWTask+0x204>)
 80033da:	2264      	movs	r2, #100	; 0x64
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	4b58      	ldr	r3, [pc, #352]	; (8003540 <runFWTask+0x204>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80033e4:	4a57      	ldr	r2, [pc, #348]	; (8003544 <runFWTask+0x208>)
 80033e6:	210f      	movs	r1, #15
 80033e8:	4857      	ldr	r0, [pc, #348]	; (8003548 <runFWTask+0x20c>)
 80033ea:	f00a fd73 	bl	800ded4 <sniprintf>
 80033ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033f2:	2206      	movs	r2, #6
 80033f4:	4955      	ldr	r1, [pc, #340]	; (800354c <runFWTask+0x210>)
 80033f6:	4856      	ldr	r0, [pc, #344]	; (8003550 <runFWTask+0x214>)
 80033f8:	f006 fbef 	bl	8009bda <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 80033fc:	f002 f9ae 	bl	800575c <HAL_GetTick>
 8003400:	4603      	mov	r3, r0
 8003402:	4a54      	ldr	r2, [pc, #336]	; (8003554 <runFWTask+0x218>)
 8003404:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 8003406:	4b44      	ldr	r3, [pc, #272]	; (8003518 <runFWTask+0x1dc>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d07b      	beq.n	8003506 <runFWTask+0x1ca>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 800340e:	f002 f9a5 	bl	800575c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	4b4f      	ldr	r3, [pc, #316]	; (8003554 <runFWTask+0x218>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b09      	cmp	r3, #9
 800341c:	d9f3      	bls.n	8003406 <runFWTask+0xca>
          {

            StraightLineMove(SPEED_MODE_T);
 800341e:	2000      	movs	r0, #0
 8003420:	f7ff f88a 	bl	8002538 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 8003424:	f002 f99a 	bl	800575c <HAL_GetTick>
 8003428:	4603      	mov	r3, r0
 800342a:	4a4a      	ldr	r2, [pc, #296]	; (8003554 <runFWTask+0x218>)
 800342c:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 800342e:	e7ea      	b.n	8003406 <runFWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 8003430:	4b43      	ldr	r3, [pc, #268]	; (8003540 <runFWTask+0x204>)
 8003432:	885b      	ldrh	r3, [r3, #2]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343c:	4b34      	ldr	r3, [pc, #208]	; (8003510 <runFWTask+0x1d4>)
 800343e:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 10, move mode must be forced to SLOW
        if (targetDist <= 15)
 8003442:	4b33      	ldr	r3, [pc, #204]	; (8003510 <runFWTask+0x1d4>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800344c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003454:	d802      	bhi.n	800345c <runFWTask+0x120>
          moveMode = SLOW;
 8003456:	4b40      	ldr	r3, [pc, #256]	; (8003558 <runFWTask+0x21c>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]

        if (moveMode == SLOW)
 800345c:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <runFWTask+0x21c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <runFWTask+0x134>
        {
          // HAL_UART_Transmit(&huart3, (uint8_t *)("FW10\r\n"), 6, 0xFFFF);
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003464:	2200      	movs	r2, #0
 8003466:	2101      	movs	r1, #1
 8003468:	4829      	ldr	r0, [pc, #164]	; (8003510 <runFWTask+0x1d4>)
 800346a:	f7ff fa1d 	bl	80028a8 <RobotMoveDist>
 800346e:	e004      	b.n	800347a <runFWTask+0x13e>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_2);
 8003470:	2202      	movs	r2, #2
 8003472:	2101      	movs	r1, #1
 8003474:	4826      	ldr	r0, [pc, #152]	; (8003510 <runFWTask+0x1d4>)
 8003476:	f7ff fa17 	bl	80028a8 <RobotMoveDist>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 800347a:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <runFWTask+0x1f8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	635a      	str	r2, [r3, #52]	; 0x34
 8003482:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <runFWTask+0x1f8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	639a      	str	r2, [r3, #56]	; 0x38
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <runFWTask+0x1d0>)
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <runFWTask+0x1fc>)
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <runFWTask+0x1d0>)
 8003494:	220b      	movs	r2, #11
 8003496:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <runFWTask+0x200>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <runFWTask+0x220>)
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	4b2e      	ldr	r3, [pc, #184]	; (800355c <runFWTask+0x220>)
 80034a4:	785b      	ldrb	r3, [r3, #1]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d112      	bne.n	80034d0 <runFWTask+0x194>
        {
          __CLEAR_CURCMD(curCmd);
 80034aa:	4b25      	ldr	r3, [pc, #148]	; (8003540 <runFWTask+0x204>)
 80034ac:	2264      	movs	r2, #100	; 0x64
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	4b23      	ldr	r3, [pc, #140]	; (8003540 <runFWTask+0x204>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 80034b6:	4a23      	ldr	r2, [pc, #140]	; (8003544 <runFWTask+0x208>)
 80034b8:	210f      	movs	r1, #15
 80034ba:	4823      	ldr	r0, [pc, #140]	; (8003548 <runFWTask+0x20c>)
 80034bc:	f00a fd0a 	bl	800ded4 <sniprintf>
 80034c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c4:	2206      	movs	r2, #6
 80034c6:	4921      	ldr	r1, [pc, #132]	; (800354c <runFWTask+0x210>)
 80034c8:	4821      	ldr	r0, [pc, #132]	; (8003550 <runFWTask+0x214>)
 80034ca:	f006 fb86 	bl	8009bda <HAL_UART_Transmit>
 80034ce:	e739      	b.n	8003344 <runFWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 80034d0:	4b22      	ldr	r3, [pc, #136]	; (800355c <runFWTask+0x220>)
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <runFWTask+0x204>)
 80034d6:	4921      	ldr	r1, [pc, #132]	; (800355c <runFWTask+0x220>)
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	4b1e      	ldr	r3, [pc, #120]	; (800355c <runFWTask+0x220>)
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	3301      	adds	r3, #1
 80034e6:	4a1d      	ldr	r2, [pc, #116]	; (800355c <runFWTask+0x220>)
 80034e8:	7892      	ldrb	r2, [r2, #2]
 80034ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80034ee:	fb01 f202 	mul.w	r2, r1, r2
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <runFWTask+0x220>)
 80034f8:	705a      	strb	r2, [r3, #1]
 80034fa:	4a19      	ldr	r2, [pc, #100]	; (8003560 <runFWTask+0x224>)
 80034fc:	210f      	movs	r1, #15
 80034fe:	4812      	ldr	r0, [pc, #72]	; (8003548 <runFWTask+0x20c>)
 8003500:	f00a fce8 	bl	800ded4 <sniprintf>
 8003504:	e71e      	b.n	8003344 <runFWTask+0x8>
            break;
 8003506:	bf00      	nop
    if (curTask != TASK_MOVE_FORWARD)
 8003508:	e71c      	b.n	8003344 <runFWTask+0x8>
 800350a:	bf00      	nop
 800350c:	20000134 	.word	0x20000134
 8003510:	200004e8 	.word	0x200004e8
 8003514:	200004ee 	.word	0x200004ee
 8003518:	200004d0 	.word	0x200004d0
 800351c:	200004d8 	.word	0x200004d8
 8003520:	200004de 	.word	0x200004de
 8003524:	20000508 	.word	0x20000508
 8003528:	200004f4 	.word	0x200004f4
 800352c:	2000051c 	.word	0x2000051c
 8003530:	40020000 	.word	0x40020000
 8003534:	200003c0 	.word	0x200003c0
 8003538:	20000135 	.word	0x20000135
 800353c:	20000548 	.word	0x20000548
 8003540:	200004bc 	.word	0x200004bc
 8003544:	0800e8d4 	.word	0x0800e8d4
 8003548:	200004c0 	.word	0x200004c0
 800354c:	0800e8dc 	.word	0x0800e8dc
 8003550:	20000408 	.word	0x20000408
 8003554:	200004e4 	.word	0x200004e4
 8003558:	20000136 	.word	0x20000136
 800355c:	20000488 	.word	0x20000488
 8003560:	0800e8e4 	.word	0x0800e8e4

08003564 <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 800356c:	4b71      	ldr	r3, [pc, #452]	; (8003734 <runBWTask+0x1d0>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d004      	beq.n	800357e <runBWTask+0x1a>
      osDelay(1000);
 8003574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003578:	f007 fc7a 	bl	800ae70 <osDelay>
 800357c:	e7f6      	b.n	800356c <runBWTask+0x8>
    else
    {
      targetDist = 0;
 800357e:	4b6e      	ldr	r3, [pc, #440]	; (8003738 <runBWTask+0x1d4>)
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 8003586:	4b6d      	ldr	r3, [pc, #436]	; (800373c <runBWTask+0x1d8>)
 8003588:	2200      	movs	r2, #0
 800358a:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <runBWTask+0x1dc>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d061      	beq.n	8003658 <runBWTask+0xf4>
      {

        angleNow = 0;
 8003594:	4b6b      	ldr	r3, [pc, #428]	; (8003744 <runBWTask+0x1e0>)
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 800359c:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <runBWTask+0x1e4>)
 800359e:	2200      	movs	r2, #0
 80035a0:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 80035a2:	486a      	ldr	r0, [pc, #424]	; (800374c <runBWTask+0x1e8>)
 80035a4:	f7fe ff75 	bl	8002492 <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 80035a8:	4869      	ldr	r0, [pc, #420]	; (8003750 <runBWTask+0x1ec>)
 80035aa:	f7fe ff72 	bl	8002492 <PIDConfigReset>
        PIDConfigReset(&pidFast);
 80035ae:	4869      	ldr	r0, [pc, #420]	; (8003754 <runBWTask+0x1f0>)
 80035b0:	f7fe ff6f 	bl	8002492 <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 80035b4:	2201      	movs	r2, #1
 80035b6:	2104      	movs	r1, #4
 80035b8:	4867      	ldr	r0, [pc, #412]	; (8003758 <runBWTask+0x1f4>)
 80035ba:	f002 ffdb 	bl	8006574 <HAL_GPIO_WritePin>
 80035be:	2200      	movs	r2, #0
 80035c0:	2108      	movs	r1, #8
 80035c2:	4865      	ldr	r0, [pc, #404]	; (8003758 <runBWTask+0x1f4>)
 80035c4:	f002 ffd6 	bl	8006574 <HAL_GPIO_WritePin>
 80035c8:	2201      	movs	r2, #1
 80035ca:	2120      	movs	r1, #32
 80035cc:	4862      	ldr	r0, [pc, #392]	; (8003758 <runBWTask+0x1f4>)
 80035ce:	f002 ffd1 	bl	8006574 <HAL_GPIO_WritePin>
 80035d2:	2200      	movs	r2, #0
 80035d4:	2110      	movs	r1, #16
 80035d6:	4860      	ldr	r0, [pc, #384]	; (8003758 <runBWTask+0x1f4>)
 80035d8:	f002 ffcc 	bl	8006574 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 80035dc:	4b5f      	ldr	r3, [pc, #380]	; (800375c <runBWTask+0x1f8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	635a      	str	r2, [r3, #52]	; 0x34
 80035e4:	4b5d      	ldr	r3, [pc, #372]	; (800375c <runBWTask+0x1f8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
 80035ec:	4b51      	ldr	r3, [pc, #324]	; (8003734 <runBWTask+0x1d0>)
 80035ee:	781a      	ldrb	r2, [r3, #0]
 80035f0:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <runBWTask+0x1fc>)
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	4b4f      	ldr	r3, [pc, #316]	; (8003734 <runBWTask+0x1d0>)
 80035f6:	220b      	movs	r2, #11
 80035f8:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80035fa:	4b5a      	ldr	r3, [pc, #360]	; (8003764 <runBWTask+0x200>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 8003600:	4b59      	ldr	r3, [pc, #356]	; (8003768 <runBWTask+0x204>)
 8003602:	2264      	movs	r2, #100	; 0x64
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	4b58      	ldr	r3, [pc, #352]	; (8003768 <runBWTask+0x204>)
 8003608:	2200      	movs	r2, #0
 800360a:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800360c:	4a57      	ldr	r2, [pc, #348]	; (800376c <runBWTask+0x208>)
 800360e:	210f      	movs	r1, #15
 8003610:	4857      	ldr	r0, [pc, #348]	; (8003770 <runBWTask+0x20c>)
 8003612:	f00a fc5f 	bl	800ded4 <sniprintf>
 8003616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800361a:	2206      	movs	r2, #6
 800361c:	4955      	ldr	r1, [pc, #340]	; (8003774 <runBWTask+0x210>)
 800361e:	4856      	ldr	r0, [pc, #344]	; (8003778 <runBWTask+0x214>)
 8003620:	f006 fadb 	bl	8009bda <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 8003624:	f002 f89a 	bl	800575c <HAL_GetTick>
 8003628:	4603      	mov	r3, r0
 800362a:	4a54      	ldr	r2, [pc, #336]	; (800377c <runBWTask+0x218>)
 800362c:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 800362e:	4b44      	ldr	r3, [pc, #272]	; (8003740 <runBWTask+0x1dc>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d07b      	beq.n	800372e <runBWTask+0x1ca>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 8003636:	f002 f891 	bl	800575c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	4b4f      	ldr	r3, [pc, #316]	; (800377c <runBWTask+0x218>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b09      	cmp	r3, #9
 8003644:	d9f3      	bls.n	800362e <runBWTask+0xca>
          {
            StraightLineMove(SPEED_MODE_T);
 8003646:	2000      	movs	r0, #0
 8003648:	f7fe ff76 	bl	8002538 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 800364c:	f002 f886 	bl	800575c <HAL_GetTick>
 8003650:	4603      	mov	r3, r0
 8003652:	4a4a      	ldr	r2, [pc, #296]	; (800377c <runBWTask+0x218>)
 8003654:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 8003656:	e7ea      	b.n	800362e <runBWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 8003658:	4b43      	ldr	r3, [pc, #268]	; (8003768 <runBWTask+0x204>)
 800365a:	885b      	ldrh	r3, [r3, #2]
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <runBWTask+0x1d4>)
 8003666:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 800366a:	4b33      	ldr	r3, [pc, #204]	; (8003738 <runBWTask+0x1d4>)
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	d802      	bhi.n	8003684 <runBWTask+0x120>
          moveMode = SLOW;
 800367e:	4b40      	ldr	r3, [pc, #256]	; (8003780 <runBWTask+0x21c>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]

        if (moveMode == SLOW)
 8003684:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <runBWTask+0x21c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <runBWTask+0x134>
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_1);
 800368c:	2201      	movs	r2, #1
 800368e:	2100      	movs	r1, #0
 8003690:	4829      	ldr	r0, [pc, #164]	; (8003738 <runBWTask+0x1d4>)
 8003692:	f7ff f909 	bl	80028a8 <RobotMoveDist>
 8003696:	e004      	b.n	80036a2 <runBWTask+0x13e>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_2);
 8003698:	2202      	movs	r2, #2
 800369a:	2100      	movs	r1, #0
 800369c:	4826      	ldr	r0, [pc, #152]	; (8003738 <runBWTask+0x1d4>)
 800369e:	f7ff f903 	bl	80028a8 <RobotMoveDist>
          // OLED_ShowString(40, 40, (uint8_t *)"BW");
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 80036a2:	4b2e      	ldr	r3, [pc, #184]	; (800375c <runBWTask+0x1f8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2200      	movs	r2, #0
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34
 80036aa:	4b2c      	ldr	r3, [pc, #176]	; (800375c <runBWTask+0x1f8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	639a      	str	r2, [r3, #56]	; 0x38
 80036b2:	4b20      	ldr	r3, [pc, #128]	; (8003734 <runBWTask+0x1d0>)
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <runBWTask+0x1fc>)
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <runBWTask+0x1d0>)
 80036bc:	220b      	movs	r2, #11
 80036be:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80036c0:	4b28      	ldr	r3, [pc, #160]	; (8003764 <runBWTask+0x200>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80036c6:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <runBWTask+0x220>)
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <runBWTask+0x220>)
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d112      	bne.n	80036f8 <runBWTask+0x194>
        {
          __CLEAR_CURCMD(curCmd);
 80036d2:	4b25      	ldr	r3, [pc, #148]	; (8003768 <runBWTask+0x204>)
 80036d4:	2264      	movs	r2, #100	; 0x64
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <runBWTask+0x204>)
 80036da:	2200      	movs	r2, #0
 80036dc:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 80036de:	4a23      	ldr	r2, [pc, #140]	; (800376c <runBWTask+0x208>)
 80036e0:	210f      	movs	r1, #15
 80036e2:	4823      	ldr	r0, [pc, #140]	; (8003770 <runBWTask+0x20c>)
 80036e4:	f00a fbf6 	bl	800ded4 <sniprintf>
 80036e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ec:	2206      	movs	r2, #6
 80036ee:	4921      	ldr	r1, [pc, #132]	; (8003774 <runBWTask+0x210>)
 80036f0:	4821      	ldr	r0, [pc, #132]	; (8003778 <runBWTask+0x214>)
 80036f2:	f006 fa72 	bl	8009bda <HAL_UART_Transmit>
 80036f6:	e739      	b.n	800356c <runBWTask+0x8>
          // HAL_UART_Transmit(&huart3, (uint8_t *)(curTask), 6, 0xFFFF);
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 80036f8:	4b22      	ldr	r3, [pc, #136]	; (8003784 <runBWTask+0x220>)
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <runBWTask+0x204>)
 80036fe:	4921      	ldr	r1, [pc, #132]	; (8003784 <runBWTask+0x220>)
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <runBWTask+0x220>)
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	3301      	adds	r3, #1
 800370e:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <runBWTask+0x220>)
 8003710:	7892      	ldrb	r2, [r2, #2]
 8003712:	fb93 f1f2 	sdiv	r1, r3, r2
 8003716:	fb01 f202 	mul.w	r2, r1, r2
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4b19      	ldr	r3, [pc, #100]	; (8003784 <runBWTask+0x220>)
 8003720:	705a      	strb	r2, [r3, #1]
 8003722:	4a19      	ldr	r2, [pc, #100]	; (8003788 <runBWTask+0x224>)
 8003724:	210f      	movs	r1, #15
 8003726:	4812      	ldr	r0, [pc, #72]	; (8003770 <runBWTask+0x20c>)
 8003728:	f00a fbd4 	bl	800ded4 <sniprintf>
 800372c:	e71e      	b.n	800356c <runBWTask+0x8>
            break;
 800372e:	bf00      	nop
    if (curTask != TASK_MOVE_BACKWARD)
 8003730:	e71c      	b.n	800356c <runBWTask+0x8>
 8003732:	bf00      	nop
 8003734:	20000134 	.word	0x20000134
 8003738:	200004e8 	.word	0x200004e8
 800373c:	200004ee 	.word	0x200004ee
 8003740:	200004d0 	.word	0x200004d0
 8003744:	200004d8 	.word	0x200004d8
 8003748:	200004de 	.word	0x200004de
 800374c:	20000508 	.word	0x20000508
 8003750:	200004f4 	.word	0x200004f4
 8003754:	2000051c 	.word	0x2000051c
 8003758:	40020000 	.word	0x40020000
 800375c:	200003c0 	.word	0x200003c0
 8003760:	20000135 	.word	0x20000135
 8003764:	20000548 	.word	0x20000548
 8003768:	200004bc 	.word	0x200004bc
 800376c:	0800e8d4 	.word	0x0800e8d4
 8003770:	200004c0 	.word	0x200004c0
 8003774:	0800e8dc 	.word	0x0800e8dc
 8003778:	20000408 	.word	0x20000408
 800377c:	200004e4 	.word	0x200004e4
 8003780:	20000136 	.word	0x20000136
 8003784:	20000488 	.word	0x20000488
 8003788:	0800e8e4 	.word	0x0800e8e4

0800378c <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  // osDelay(100);

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 8003794:	4b94      	ldr	r3, [pc, #592]	; (80039e8 <runFLTask+0x25c>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d004      	beq.n	80037a6 <runFLTask+0x1a>
      osDelay(1000);
 800379c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037a0:	f007 fb66 	bl	800ae70 <osDelay>
 80037a4:	e7f6      	b.n	8003794 <runFLTask+0x8>
    else
    {

      switch (curCmd.val)
 80037a6:	4b91      	ldr	r3, [pc, #580]	; (80039ec <runFLTask+0x260>)
 80037a8:	885b      	ldrh	r3, [r3, #2]
 80037aa:	2b14      	cmp	r3, #20
 80037ac:	f000 8083 	beq.w	80038b6 <runFLTask+0x12a>
 80037b0:	2b1e      	cmp	r3, #30
 80037b2:	f040 80f8 	bne.w	80039a6 <runFLTask+0x21a>
      {
      case 30: // FL30 (3x2)
        targetDist = 5;
 80037b6:	4b8e      	ldr	r3, [pc, #568]	; (80039f0 <runFLTask+0x264>)
 80037b8:	4a8e      	ldr	r2, [pc, #568]	; (80039f4 <runFLTask+0x268>)
 80037ba:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80037bc:	2200      	movs	r2, #0
 80037be:	2101      	movs	r1, #1
 80037c0:	488b      	ldr	r0, [pc, #556]	; (80039f0 <runFLTask+0x264>)
 80037c2:	f7ff f871 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 80037c6:	4b8c      	ldr	r3, [pc, #560]	; (80039f8 <runFLTask+0x26c>)
 80037c8:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80037cc:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80039fc <runFLTask+0x270>
 80037d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d8:	dd02      	ble.n	80037e0 <runFLTask+0x54>
 80037da:	f240 1309 	movw	r3, #265	; 0x109
 80037de:	e012      	b.n	8003806 <runFLTask+0x7a>
 80037e0:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <runFLTask+0x26c>)
 80037e2:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80037e6:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003a00 <runFLTask+0x274>
 80037ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f2:	d501      	bpl.n	80037f8 <runFLTask+0x6c>
 80037f4:	2346      	movs	r3, #70	; 0x46
 80037f6:	e006      	b.n	8003806 <runFLTask+0x7a>
 80037f8:	4b7f      	ldr	r3, [pc, #508]	; (80039f8 <runFLTask+0x26c>)
 80037fa:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80037fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003802:	ee17 3a90 	vmov	r3, s15
 8003806:	4a7f      	ldr	r2, [pc, #508]	; (8003a04 <runFLTask+0x278>)
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	6413      	str	r3, [r2, #64]	; 0x40
 800380c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003810:	f001 ffb0 	bl	8005774 <HAL_Delay>
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <runFLTask+0x26c>)
 8003816:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800381a:	4a7b      	ldr	r2, [pc, #492]	; (8003a08 <runFLTask+0x27c>)
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b76      	ldr	r3, [pc, #472]	; (80039f8 <runFLTask+0x26c>)
 8003820:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	2104      	movs	r1, #4
 8003832:	4876      	ldr	r0, [pc, #472]	; (8003a0c <runFLTask+0x280>)
 8003834:	f002 fe9e 	bl	8006574 <HAL_GPIO_WritePin>
 8003838:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <runFLTask+0x26c>)
 800383a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	2108      	movs	r1, #8
 800384c:	486f      	ldr	r0, [pc, #444]	; (8003a0c <runFLTask+0x280>)
 800384e:	f002 fe91 	bl	8006574 <HAL_GPIO_WritePin>
 8003852:	4b69      	ldr	r3, [pc, #420]	; (80039f8 <runFLTask+0x26c>)
 8003854:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	2120      	movs	r1, #32
 8003866:	4869      	ldr	r0, [pc, #420]	; (8003a0c <runFLTask+0x280>)
 8003868:	f002 fe84 	bl	8006574 <HAL_GPIO_WritePin>
 800386c:	4b62      	ldr	r3, [pc, #392]	; (80039f8 <runFLTask+0x26c>)
 800386e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	2110      	movs	r1, #16
 8003880:	4862      	ldr	r0, [pc, #392]	; (8003a0c <runFLTask+0x280>)
 8003882:	f002 fe77 	bl	8006574 <HAL_GPIO_WritePin>
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <runFLTask+0x26c>)
 8003888:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 800388c:	4b60      	ldr	r3, [pc, #384]	; (8003a10 <runFLTask+0x284>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	635a      	str	r2, [r3, #52]	; 0x34
 8003892:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <runFLTask+0x26c>)
 8003894:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 8003898:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <runFLTask+0x284>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 800389e:	485a      	ldr	r0, [pc, #360]	; (8003a08 <runFLTask+0x27c>)
 80038a0:	f7ff faf6 	bl	8002e90 <RobotTurn>
        // osDelay(10);
        targetDist = 3;
 80038a4:	4b52      	ldr	r3, [pc, #328]	; (80039f0 <runFLTask+0x264>)
 80038a6:	4a5b      	ldr	r2, [pc, #364]	; (8003a14 <runFLTask+0x288>)
 80038a8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	4850      	ldr	r0, [pc, #320]	; (80039f0 <runFLTask+0x264>)
 80038b0:	f7fe fffa 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        break;
 80038b4:	e111      	b.n	8003ada <runFLTask+0x34e>
      case 20: // FL20 (outdoor 3x1)
        targetDist = 5;
 80038b6:	4b4e      	ldr	r3, [pc, #312]	; (80039f0 <runFLTask+0x264>)
 80038b8:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <runFLTask+0x268>)
 80038ba:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80038bc:	2200      	movs	r2, #0
 80038be:	2101      	movs	r1, #1
 80038c0:	484b      	ldr	r0, [pc, #300]	; (80039f0 <runFLTask+0x264>)
 80038c2:	f7fe fff1 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 80038c6:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <runFLTask+0x26c>)
 80038c8:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80038cc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80039fc <runFLTask+0x270>
 80038d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d8:	dd02      	ble.n	80038e0 <runFLTask+0x154>
 80038da:	f240 1309 	movw	r3, #265	; 0x109
 80038de:	e012      	b.n	8003906 <runFLTask+0x17a>
 80038e0:	4b45      	ldr	r3, [pc, #276]	; (80039f8 <runFLTask+0x26c>)
 80038e2:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80038e6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003a00 <runFLTask+0x274>
 80038ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f2:	d501      	bpl.n	80038f8 <runFLTask+0x16c>
 80038f4:	2346      	movs	r3, #70	; 0x46
 80038f6:	e006      	b.n	8003906 <runFLTask+0x17a>
 80038f8:	4b3f      	ldr	r3, [pc, #252]	; (80039f8 <runFLTask+0x26c>)
 80038fa:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80038fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003902:	ee17 3a90 	vmov	r3, s15
 8003906:	4a3f      	ldr	r2, [pc, #252]	; (8003a04 <runFLTask+0x278>)
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	6413      	str	r3, [r2, #64]	; 0x40
 800390c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003910:	f001 ff30 	bl	8005774 <HAL_Delay>
 8003914:	4b38      	ldr	r3, [pc, #224]	; (80039f8 <runFLTask+0x26c>)
 8003916:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800391a:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <runFLTask+0x27c>)
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <runFLTask+0x26c>)
 8003920:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	2104      	movs	r1, #4
 8003932:	4836      	ldr	r0, [pc, #216]	; (8003a0c <runFLTask+0x280>)
 8003934:	f002 fe1e 	bl	8006574 <HAL_GPIO_WritePin>
 8003938:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <runFLTask+0x26c>)
 800393a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800393e:	2b00      	cmp	r3, #0
 8003940:	bf14      	ite	ne
 8003942:	2301      	movne	r3, #1
 8003944:	2300      	moveq	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	2108      	movs	r1, #8
 800394c:	482f      	ldr	r0, [pc, #188]	; (8003a0c <runFLTask+0x280>)
 800394e:	f002 fe11 	bl	8006574 <HAL_GPIO_WritePin>
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <runFLTask+0x26c>)
 8003954:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	2120      	movs	r1, #32
 8003966:	4829      	ldr	r0, [pc, #164]	; (8003a0c <runFLTask+0x280>)
 8003968:	f002 fe04 	bl	8006574 <HAL_GPIO_WritePin>
 800396c:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <runFLTask+0x26c>)
 800396e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	2110      	movs	r1, #16
 8003980:	4822      	ldr	r0, [pc, #136]	; (8003a0c <runFLTask+0x280>)
 8003982:	f002 fdf7 	bl	8006574 <HAL_GPIO_WritePin>
 8003986:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <runFLTask+0x26c>)
 8003988:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 800398c:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <runFLTask+0x284>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	635a      	str	r2, [r3, #52]	; 0x34
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <runFLTask+0x26c>)
 8003994:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <runFLTask+0x284>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 800399e:	481a      	ldr	r0, [pc, #104]	; (8003a08 <runFLTask+0x27c>)
 80039a0:	f7ff fa76 	bl	8002e90 <RobotTurn>
        // osDelay(10);
        // targetDist = 7;
        // RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
        // osDelay(10);
        break;
 80039a4:	e099      	b.n	8003ada <runFLTask+0x34e>
      default: // FL00 (indoor 3x1)
        targetDist = 9;
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <runFLTask+0x264>)
 80039a8:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <runFLTask+0x28c>)
 80039aa:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2101      	movs	r1, #1
 80039b0:	480f      	ldr	r0, [pc, #60]	; (80039f0 <runFLTask+0x264>)
 80039b2:	f7fe ff79 	bl	80028a8 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <runFLTask+0x26c>)
 80039b8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80039bc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80039fc <runFLTask+0x270>
 80039c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	dd02      	ble.n	80039d0 <runFLTask+0x244>
 80039ca:	f240 1309 	movw	r3, #265	; 0x109
 80039ce:	e02c      	b.n	8003a2a <runFLTask+0x29e>
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <runFLTask+0x26c>)
 80039d2:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80039d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003a00 <runFLTask+0x274>
 80039da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e2:	d51b      	bpl.n	8003a1c <runFLTask+0x290>
 80039e4:	2346      	movs	r3, #70	; 0x46
 80039e6:	e020      	b.n	8003a2a <runFLTask+0x29e>
 80039e8:	20000134 	.word	0x20000134
 80039ec:	200004bc 	.word	0x200004bc
 80039f0:	200004e8 	.word	0x200004e8
 80039f4:	40a00000 	.word	0x40a00000
 80039f8:	20000004 	.word	0x20000004
 80039fc:	43848000 	.word	0x43848000
 8003a00:	428c0000 	.word	0x428c0000
 8003a04:	200002a0 	.word	0x200002a0
 8003a08:	200004d4 	.word	0x200004d4
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	200003c0 	.word	0x200003c0
 8003a14:	40400000 	.word	0x40400000
 8003a18:	41100000 	.word	0x41100000
 8003a1c:	4b4e      	ldr	r3, [pc, #312]	; (8003b58 <runFLTask+0x3cc>)
 8003a1e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a26:	ee17 3a90 	vmov	r3, s15
 8003a2a:	4a4c      	ldr	r2, [pc, #304]	; (8003b5c <runFLTask+0x3d0>)
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a34:	f001 fe9e 	bl	8005774 <HAL_Delay>
 8003a38:	4b47      	ldr	r3, [pc, #284]	; (8003b58 <runFLTask+0x3cc>)
 8003a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a3c:	4a48      	ldr	r2, [pc, #288]	; (8003b60 <runFLTask+0x3d4>)
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b45      	ldr	r3, [pc, #276]	; (8003b58 <runFLTask+0x3cc>)
 8003a42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	2104      	movs	r1, #4
 8003a54:	4843      	ldr	r0, [pc, #268]	; (8003b64 <runFLTask+0x3d8>)
 8003a56:	f002 fd8d 	bl	8006574 <HAL_GPIO_WritePin>
 8003a5a:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <runFLTask+0x3cc>)
 8003a5c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2108      	movs	r1, #8
 8003a6e:	483d      	ldr	r0, [pc, #244]	; (8003b64 <runFLTask+0x3d8>)
 8003a70:	f002 fd80 	bl	8006574 <HAL_GPIO_WritePin>
 8003a74:	4b38      	ldr	r3, [pc, #224]	; (8003b58 <runFLTask+0x3cc>)
 8003a76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	2120      	movs	r1, #32
 8003a88:	4836      	ldr	r0, [pc, #216]	; (8003b64 <runFLTask+0x3d8>)
 8003a8a:	f002 fd73 	bl	8006574 <HAL_GPIO_WritePin>
 8003a8e:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <runFLTask+0x3cc>)
 8003a90:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2110      	movs	r1, #16
 8003aa2:	4830      	ldr	r0, [pc, #192]	; (8003b64 <runFLTask+0x3d8>)
 8003aa4:	f002 fd66 	bl	8006574 <HAL_GPIO_WritePin>
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <runFLTask+0x3cc>)
 8003aaa:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8003aae:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <runFLTask+0x3dc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ab4:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <runFLTask+0x3cc>)
 8003ab6:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8003aba:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <runFLTask+0x3dc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003ac0:	4827      	ldr	r0, [pc, #156]	; (8003b60 <runFLTask+0x3d4>)
 8003ac2:	f7ff f9e5 	bl	8002e90 <RobotTurn>

        targetDist = 1;
 8003ac6:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <runFLTask+0x3e0>)
 8003ac8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003acc:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	4826      	ldr	r0, [pc, #152]	; (8003b6c <runFLTask+0x3e0>)
 8003ad4:	f7fe fee8 	bl	80028a8 <RobotMoveDist>

        break;
 8003ad8:	bf00      	nop
      }
      clickOnce = 0;
 8003ada:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <runFLTask+0x3e4>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8003ae0:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <runFLTask+0x3e8>)
 8003ae2:	781a      	ldrb	r2, [r3, #0]
 8003ae4:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <runFLTask+0x3ec>)
 8003ae6:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8003ae8:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <runFLTask+0x3e8>)
 8003aea:	220b      	movs	r2, #11
 8003aec:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <runFLTask+0x3f0>)
 8003af0:	781a      	ldrb	r2, [r3, #0]
 8003af2:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <runFLTask+0x3f0>)
 8003af4:	785b      	ldrb	r3, [r3, #1]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d112      	bne.n	8003b20 <runFLTask+0x394>
      {
        __CLEAR_CURCMD(curCmd);
 8003afa:	4b21      	ldr	r3, [pc, #132]	; (8003b80 <runFLTask+0x3f4>)
 8003afc:	2264      	movs	r2, #100	; 0x64
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <runFLTask+0x3f4>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8003b06:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <runFLTask+0x3f8>)
 8003b08:	210f      	movs	r1, #15
 8003b0a:	481f      	ldr	r0, [pc, #124]	; (8003b88 <runFLTask+0x3fc>)
 8003b0c:	f00a f9e2 	bl	800ded4 <sniprintf>
 8003b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b14:	2206      	movs	r2, #6
 8003b16:	491d      	ldr	r1, [pc, #116]	; (8003b8c <runFLTask+0x400>)
 8003b18:	481d      	ldr	r0, [pc, #116]	; (8003b90 <runFLTask+0x404>)
 8003b1a:	f006 f85e 	bl	8009bda <HAL_UART_Transmit>
 8003b1e:	e639      	b.n	8003794 <runFLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003b20:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <runFLTask+0x3f0>)
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <runFLTask+0x3f4>)
 8003b26:	4915      	ldr	r1, [pc, #84]	; (8003b7c <runFLTask+0x3f0>)
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <runFLTask+0x3f0>)
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	3301      	adds	r3, #1
 8003b36:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <runFLTask+0x3f0>)
 8003b38:	7892      	ldrb	r2, [r2, #2]
 8003b3a:	fb93 f1f2 	sdiv	r1, r3, r2
 8003b3e:	fb01 f202 	mul.w	r2, r1, r2
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <runFLTask+0x3f0>)
 8003b48:	705a      	strb	r2, [r3, #1]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <runFLTask+0x408>)
 8003b4c:	210f      	movs	r1, #15
 8003b4e:	480e      	ldr	r0, [pc, #56]	; (8003b88 <runFLTask+0x3fc>)
 8003b50:	f00a f9c0 	bl	800ded4 <sniprintf>
    if (curTask != TASK_FL)
 8003b54:	e61e      	b.n	8003794 <runFLTask+0x8>
 8003b56:	bf00      	nop
 8003b58:	20000004 	.word	0x20000004
 8003b5c:	200002a0 	.word	0x200002a0
 8003b60:	200004d4 	.word	0x200004d4
 8003b64:	40020000 	.word	0x40020000
 8003b68:	200003c0 	.word	0x200003c0
 8003b6c:	200004e8 	.word	0x200004e8
 8003b70:	20000548 	.word	0x20000548
 8003b74:	20000134 	.word	0x20000134
 8003b78:	20000135 	.word	0x20000135
 8003b7c:	20000488 	.word	0x20000488
 8003b80:	200004bc 	.word	0x200004bc
 8003b84:	0800e8d4 	.word	0x0800e8d4
 8003b88:	200004c0 	.word	0x200004c0
 8003b8c:	0800e8dc 	.word	0x0800e8dc
 8003b90:	20000408 	.word	0x20000408
 8003b94:	0800e8e4 	.word	0x0800e8e4

08003b98 <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 8003ba0:	4b99      	ldr	r3, [pc, #612]	; (8003e08 <runFRTask+0x270>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d004      	beq.n	8003bb2 <runFRTask+0x1a>
      osDelay(1000);
 8003ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bac:	f007 f960 	bl	800ae70 <osDelay>
 8003bb0:	e7f6      	b.n	8003ba0 <runFRTask+0x8>
    else
    {

      switch (curCmd.val)
 8003bb2:	4b96      	ldr	r3, [pc, #600]	; (8003e0c <runFRTask+0x274>)
 8003bb4:	885b      	ldrh	r3, [r3, #2]
 8003bb6:	2b14      	cmp	r3, #20
 8003bb8:	f000 8085 	beq.w	8003cc6 <runFRTask+0x12e>
 8003bbc:	2b1e      	cmp	r3, #30
 8003bbe:	f040 8101 	bne.w	8003dc4 <runFRTask+0x22c>
      {
      case 30: // FR30 (outdoor)
        targetDist = 4;
 8003bc2:	4b93      	ldr	r3, [pc, #588]	; (8003e10 <runFRTask+0x278>)
 8003bc4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003bc8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4890      	ldr	r0, [pc, #576]	; (8003e10 <runFRTask+0x278>)
 8003bd0:	f7fe fe6a 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8003bd4:	4b8f      	ldr	r3, [pc, #572]	; (8003e14 <runFRTask+0x27c>)
 8003bd6:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003bda:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8003e18 <runFRTask+0x280>
 8003bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be6:	dd02      	ble.n	8003bee <runFRTask+0x56>
 8003be8:	f240 1309 	movw	r3, #265	; 0x109
 8003bec:	e012      	b.n	8003c14 <runFRTask+0x7c>
 8003bee:	4b89      	ldr	r3, [pc, #548]	; (8003e14 <runFRTask+0x27c>)
 8003bf0:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003bf4:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003e1c <runFRTask+0x284>
 8003bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c00:	d501      	bpl.n	8003c06 <runFRTask+0x6e>
 8003c02:	2346      	movs	r3, #70	; 0x46
 8003c04:	e006      	b.n	8003c14 <runFRTask+0x7c>
 8003c06:	4b83      	ldr	r3, [pc, #524]	; (8003e14 <runFRTask+0x27c>)
 8003c08:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c10:	ee17 3a90 	vmov	r3, s15
 8003c14:	4a82      	ldr	r2, [pc, #520]	; (8003e20 <runFRTask+0x288>)
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003c1e:	f001 fda9 	bl	8005774 <HAL_Delay>
 8003c22:	4b7c      	ldr	r3, [pc, #496]	; (8003e14 <runFRTask+0x27c>)
 8003c24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c28:	4a7e      	ldr	r2, [pc, #504]	; (8003e24 <runFRTask+0x28c>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b79      	ldr	r3, [pc, #484]	; (8003e14 <runFRTask+0x27c>)
 8003c2e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf0c      	ite	eq
 8003c36:	2301      	moveq	r3, #1
 8003c38:	2300      	movne	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2104      	movs	r1, #4
 8003c40:	4879      	ldr	r0, [pc, #484]	; (8003e28 <runFRTask+0x290>)
 8003c42:	f002 fc97 	bl	8006574 <HAL_GPIO_WritePin>
 8003c46:	4b73      	ldr	r3, [pc, #460]	; (8003e14 <runFRTask+0x27c>)
 8003c48:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf14      	ite	ne
 8003c50:	2301      	movne	r3, #1
 8003c52:	2300      	moveq	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	2108      	movs	r1, #8
 8003c5a:	4873      	ldr	r0, [pc, #460]	; (8003e28 <runFRTask+0x290>)
 8003c5c:	f002 fc8a 	bl	8006574 <HAL_GPIO_WritePin>
 8003c60:	4b6c      	ldr	r3, [pc, #432]	; (8003e14 <runFRTask+0x27c>)
 8003c62:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	2120      	movs	r1, #32
 8003c74:	486c      	ldr	r0, [pc, #432]	; (8003e28 <runFRTask+0x290>)
 8003c76:	f002 fc7d 	bl	8006574 <HAL_GPIO_WritePin>
 8003c7a:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <runFRTask+0x27c>)
 8003c7c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2110      	movs	r1, #16
 8003c8e:	4866      	ldr	r0, [pc, #408]	; (8003e28 <runFRTask+0x290>)
 8003c90:	f002 fc70 	bl	8006574 <HAL_GPIO_WritePin>
 8003c94:	4b5f      	ldr	r3, [pc, #380]	; (8003e14 <runFRTask+0x27c>)
 8003c96:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8003c9a:	4b64      	ldr	r3, [pc, #400]	; (8003e2c <runFRTask+0x294>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	635a      	str	r2, [r3, #52]	; 0x34
 8003ca0:	4b5c      	ldr	r3, [pc, #368]	; (8003e14 <runFRTask+0x27c>)
 8003ca2:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8003ca6:	4b61      	ldr	r3, [pc, #388]	; (8003e2c <runFRTask+0x294>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003cac:	485d      	ldr	r0, [pc, #372]	; (8003e24 <runFRTask+0x28c>)
 8003cae:	f7ff f8ef 	bl	8002e90 <RobotTurn>
        // osDelay(10);
        targetDist = 2;
 8003cb2:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <runFRTask+0x278>)
 8003cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cb8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4854      	ldr	r0, [pc, #336]	; (8003e10 <runFRTask+0x278>)
 8003cc0:	f7fe fdf2 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        break;
 8003cc4:	e116      	b.n	8003ef4 <runFRTask+0x35c>
      case 20: // FR20 (outdoor 3x1)
        targetDist = 4;
 8003cc6:	4b52      	ldr	r3, [pc, #328]	; (8003e10 <runFRTask+0x278>)
 8003cc8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003ccc:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	484f      	ldr	r0, [pc, #316]	; (8003e10 <runFRTask+0x278>)
 8003cd4:	f7fe fde8 	bl	80028a8 <RobotMoveDist>
        osDelay(10);
 8003cd8:	200a      	movs	r0, #10
 8003cda:	f007 f8c9 	bl	800ae70 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 8003cde:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <runFRTask+0x27c>)
 8003ce0:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003ce4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003e18 <runFRTask+0x280>
 8003ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf0:	dd02      	ble.n	8003cf8 <runFRTask+0x160>
 8003cf2:	f240 1309 	movw	r3, #265	; 0x109
 8003cf6:	e012      	b.n	8003d1e <runFRTask+0x186>
 8003cf8:	4b46      	ldr	r3, [pc, #280]	; (8003e14 <runFRTask+0x27c>)
 8003cfa:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003cfe:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003e1c <runFRTask+0x284>
 8003d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0a:	d501      	bpl.n	8003d10 <runFRTask+0x178>
 8003d0c:	2346      	movs	r3, #70	; 0x46
 8003d0e:	e006      	b.n	8003d1e <runFRTask+0x186>
 8003d10:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <runFRTask+0x27c>)
 8003d12:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d1a:	ee17 3a90 	vmov	r3, s15
 8003d1e:	4a40      	ldr	r2, [pc, #256]	; (8003e20 <runFRTask+0x288>)
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	6413      	str	r3, [r2, #64]	; 0x40
 8003d24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003d28:	f001 fd24 	bl	8005774 <HAL_Delay>
 8003d2c:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <runFRTask+0x27c>)
 8003d2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003d32:	4a3c      	ldr	r2, [pc, #240]	; (8003e24 <runFRTask+0x28c>)
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <runFRTask+0x27c>)
 8003d38:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	2104      	movs	r1, #4
 8003d4a:	4837      	ldr	r0, [pc, #220]	; (8003e28 <runFRTask+0x290>)
 8003d4c:	f002 fc12 	bl	8006574 <HAL_GPIO_WritePin>
 8003d50:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <runFRTask+0x27c>)
 8003d52:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	2108      	movs	r1, #8
 8003d64:	4830      	ldr	r0, [pc, #192]	; (8003e28 <runFRTask+0x290>)
 8003d66:	f002 fc05 	bl	8006574 <HAL_GPIO_WritePin>
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <runFRTask+0x27c>)
 8003d6c:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	2120      	movs	r1, #32
 8003d7e:	482a      	ldr	r0, [pc, #168]	; (8003e28 <runFRTask+0x290>)
 8003d80:	f002 fbf8 	bl	8006574 <HAL_GPIO_WritePin>
 8003d84:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <runFRTask+0x27c>)
 8003d86:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf14      	ite	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	2300      	moveq	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	2110      	movs	r1, #16
 8003d98:	4823      	ldr	r0, [pc, #140]	; (8003e28 <runFRTask+0x290>)
 8003d9a:	f002 fbeb 	bl	8006574 <HAL_GPIO_WritePin>
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <runFRTask+0x27c>)
 8003da0:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8003da4:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <runFRTask+0x294>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	635a      	str	r2, [r3, #52]	; 0x34
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <runFRTask+0x27c>)
 8003dac:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8003db0:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <runFRTask+0x294>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003db6:	481b      	ldr	r0, [pc, #108]	; (8003e24 <runFRTask+0x28c>)
 8003db8:	f7ff f86a 	bl	8002e90 <RobotTurn>
        osDelay(10);
 8003dbc:	200a      	movs	r0, #10
 8003dbe:	f007 f857 	bl	800ae70 <osDelay>
        // targetDist = 7;
        // RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
        // osDelay(10);
        break;
 8003dc2:	e097      	b.n	8003ef4 <runFRTask+0x35c>
      default: // FR00 (indoor 3x2)
        targetDist = 3;
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <runFRTask+0x278>)
 8003dc6:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <runFRTask+0x298>)
 8003dc8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4810      	ldr	r0, [pc, #64]	; (8003e10 <runFRTask+0x278>)
 8003dd0:	f7fe fd6a 	bl	80028a8 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <runFRTask+0x27c>)
 8003dd6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003dda:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003e18 <runFRTask+0x280>
 8003dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de6:	dd02      	ble.n	8003dee <runFRTask+0x256>
 8003de8:	f240 1309 	movw	r3, #265	; 0x109
 8003dec:	e029      	b.n	8003e42 <runFRTask+0x2aa>
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <runFRTask+0x27c>)
 8003df0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003df4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003e1c <runFRTask+0x284>
 8003df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e00:	d518      	bpl.n	8003e34 <runFRTask+0x29c>
 8003e02:	2346      	movs	r3, #70	; 0x46
 8003e04:	e01d      	b.n	8003e42 <runFRTask+0x2aa>
 8003e06:	bf00      	nop
 8003e08:	20000134 	.word	0x20000134
 8003e0c:	200004bc 	.word	0x200004bc
 8003e10:	200004e8 	.word	0x200004e8
 8003e14:	20000004 	.word	0x20000004
 8003e18:	43848000 	.word	0x43848000
 8003e1c:	428c0000 	.word	0x428c0000
 8003e20:	200002a0 	.word	0x200002a0
 8003e24:	200004d4 	.word	0x200004d4
 8003e28:	40020000 	.word	0x40020000
 8003e2c:	200003c0 	.word	0x200003c0
 8003e30:	40400000 	.word	0x40400000
 8003e34:	4b4e      	ldr	r3, [pc, #312]	; (8003f70 <runFRTask+0x3d8>)
 8003e36:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e3e:	ee17 3a90 	vmov	r3, s15
 8003e42:	4a4c      	ldr	r2, [pc, #304]	; (8003f74 <runFRTask+0x3dc>)
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	6413      	str	r3, [r2, #64]	; 0x40
 8003e48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003e4c:	f001 fc92 	bl	8005774 <HAL_Delay>
 8003e50:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <runFRTask+0x3d8>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	4a48      	ldr	r2, [pc, #288]	; (8003f78 <runFRTask+0x3e0>)
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b45      	ldr	r3, [pc, #276]	; (8003f70 <runFRTask+0x3d8>)
 8003e5c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf0c      	ite	eq
 8003e64:	2301      	moveq	r3, #1
 8003e66:	2300      	movne	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2104      	movs	r1, #4
 8003e6e:	4843      	ldr	r0, [pc, #268]	; (8003f7c <runFRTask+0x3e4>)
 8003e70:	f002 fb80 	bl	8006574 <HAL_GPIO_WritePin>
 8003e74:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <runFRTask+0x3d8>)
 8003e76:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	2108      	movs	r1, #8
 8003e88:	483c      	ldr	r0, [pc, #240]	; (8003f7c <runFRTask+0x3e4>)
 8003e8a:	f002 fb73 	bl	8006574 <HAL_GPIO_WritePin>
 8003e8e:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <runFRTask+0x3d8>)
 8003e90:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2120      	movs	r1, #32
 8003ea2:	4836      	ldr	r0, [pc, #216]	; (8003f7c <runFRTask+0x3e4>)
 8003ea4:	f002 fb66 	bl	8006574 <HAL_GPIO_WritePin>
 8003ea8:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <runFRTask+0x3d8>)
 8003eaa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2110      	movs	r1, #16
 8003ebc:	482f      	ldr	r0, [pc, #188]	; (8003f7c <runFRTask+0x3e4>)
 8003ebe:	f002 fb59 	bl	8006574 <HAL_GPIO_WritePin>
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <runFRTask+0x3d8>)
 8003ec4:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8003ec8:	4b2d      	ldr	r3, [pc, #180]	; (8003f80 <runFRTask+0x3e8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8003ece:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <runFRTask+0x3d8>)
 8003ed0:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003ed4:	4b2a      	ldr	r3, [pc, #168]	; (8003f80 <runFRTask+0x3e8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003eda:	4827      	ldr	r0, [pc, #156]	; (8003f78 <runFRTask+0x3e0>)
 8003edc:	f7fe ffd8 	bl	8002e90 <RobotTurn>

        targetDist = 4;
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <runFRTask+0x3ec>)
 8003ee2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003ee6:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2100      	movs	r1, #0
 8003eec:	4825      	ldr	r0, [pc, #148]	; (8003f84 <runFRTask+0x3ec>)
 8003eee:	f7fe fcdb 	bl	80028a8 <RobotMoveDist>

        break;
 8003ef2:	bf00      	nop
      }
      clickOnce = 0;
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <runFRTask+0x3f0>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <runFRTask+0x3f4>)
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <runFRTask+0x3f8>)
 8003f00:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <runFRTask+0x3f4>)
 8003f04:	220b      	movs	r2, #11
 8003f06:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8003f08:	4b22      	ldr	r3, [pc, #136]	; (8003f94 <runFRTask+0x3fc>)
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <runFRTask+0x3fc>)
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d112      	bne.n	8003f3a <runFRTask+0x3a2>
      {
        __CLEAR_CURCMD(curCmd);
 8003f14:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <runFRTask+0x400>)
 8003f16:	2264      	movs	r2, #100	; 0x64
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <runFRTask+0x400>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8003f20:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <runFRTask+0x404>)
 8003f22:	210f      	movs	r1, #15
 8003f24:	481e      	ldr	r0, [pc, #120]	; (8003fa0 <runFRTask+0x408>)
 8003f26:	f009 ffd5 	bl	800ded4 <sniprintf>
 8003f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f2e:	2206      	movs	r2, #6
 8003f30:	491c      	ldr	r1, [pc, #112]	; (8003fa4 <runFRTask+0x40c>)
 8003f32:	481d      	ldr	r0, [pc, #116]	; (8003fa8 <runFRTask+0x410>)
 8003f34:	f005 fe51 	bl	8009bda <HAL_UART_Transmit>
 8003f38:	e632      	b.n	8003ba0 <runFRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <runFRTask+0x3fc>)
 8003f3c:	785b      	ldrb	r3, [r3, #1]
 8003f3e:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <runFRTask+0x400>)
 8003f40:	4914      	ldr	r1, [pc, #80]	; (8003f94 <runFRTask+0x3fc>)
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <runFRTask+0x3fc>)
 8003f4c:	785b      	ldrb	r3, [r3, #1]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <runFRTask+0x3fc>)
 8003f52:	7892      	ldrb	r2, [r2, #2]
 8003f54:	fb93 f1f2 	sdiv	r1, r3, r2
 8003f58:	fb01 f202 	mul.w	r2, r1, r2
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <runFRTask+0x3fc>)
 8003f62:	705a      	strb	r2, [r3, #1]
 8003f64:	4a11      	ldr	r2, [pc, #68]	; (8003fac <runFRTask+0x414>)
 8003f66:	210f      	movs	r1, #15
 8003f68:	480d      	ldr	r0, [pc, #52]	; (8003fa0 <runFRTask+0x408>)
 8003f6a:	f009 ffb3 	bl	800ded4 <sniprintf>
    if (curTask != TASK_FR)
 8003f6e:	e617      	b.n	8003ba0 <runFRTask+0x8>
 8003f70:	20000004 	.word	0x20000004
 8003f74:	200002a0 	.word	0x200002a0
 8003f78:	200004d4 	.word	0x200004d4
 8003f7c:	40020000 	.word	0x40020000
 8003f80:	200003c0 	.word	0x200003c0
 8003f84:	200004e8 	.word	0x200004e8
 8003f88:	20000548 	.word	0x20000548
 8003f8c:	20000134 	.word	0x20000134
 8003f90:	20000135 	.word	0x20000135
 8003f94:	20000488 	.word	0x20000488
 8003f98:	200004bc 	.word	0x200004bc
 8003f9c:	0800e8d4 	.word	0x0800e8d4
 8003fa0:	200004c0 	.word	0x200004c0
 8003fa4:	0800e8dc 	.word	0x0800e8dc
 8003fa8:	20000408 	.word	0x20000408
 8003fac:	0800e8e4 	.word	0x0800e8e4

08003fb0 <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 8003fb8:	4b91      	ldr	r3, [pc, #580]	; (8004200 <runBLTask+0x250>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d004      	beq.n	8003fca <runBLTask+0x1a>
      osDelay(1000);
 8003fc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fc4:	f006 ff54 	bl	800ae70 <osDelay>
 8003fc8:	e7f6      	b.n	8003fb8 <runBLTask+0x8>
    else
    {

      switch (curCmd.val)
 8003fca:	4b8e      	ldr	r3, [pc, #568]	; (8004204 <runBLTask+0x254>)
 8003fcc:	885b      	ldrh	r3, [r3, #2]
 8003fce:	2b14      	cmp	r3, #20
 8003fd0:	f000 8084 	beq.w	80040dc <runBLTask+0x12c>
 8003fd4:	2b1e      	cmp	r3, #30
 8003fd6:	f040 80fa 	bne.w	80041ce <runBLTask+0x21e>
      {
      case 30: // BL30 (outdoor 3x2)
        targetDist = 1;
 8003fda:	4b8b      	ldr	r3, [pc, #556]	; (8004208 <runBLTask+0x258>)
 8003fdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003fe0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	4888      	ldr	r0, [pc, #544]	; (8004208 <runBLTask+0x258>)
 8003fe8:	f7fe fc5e 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 8003fec:	4b87      	ldr	r3, [pc, #540]	; (800420c <runBLTask+0x25c>)
 8003fee:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8003ff2:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8004210 <runBLTask+0x260>
 8003ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffe:	dd02      	ble.n	8004006 <runBLTask+0x56>
 8004000:	f240 1309 	movw	r3, #265	; 0x109
 8004004:	e012      	b.n	800402c <runBLTask+0x7c>
 8004006:	4b81      	ldr	r3, [pc, #516]	; (800420c <runBLTask+0x25c>)
 8004008:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 800400c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004214 <runBLTask+0x264>
 8004010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004018:	d501      	bpl.n	800401e <runBLTask+0x6e>
 800401a:	2346      	movs	r3, #70	; 0x46
 800401c:	e006      	b.n	800402c <runBLTask+0x7c>
 800401e:	4b7b      	ldr	r3, [pc, #492]	; (800420c <runBLTask+0x25c>)
 8004020:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8004024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004028:	ee17 3a90 	vmov	r3, s15
 800402c:	4a7a      	ldr	r2, [pc, #488]	; (8004218 <runBLTask+0x268>)
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004036:	f001 fb9d 	bl	8005774 <HAL_Delay>
 800403a:	4b74      	ldr	r3, [pc, #464]	; (800420c <runBLTask+0x25c>)
 800403c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004040:	4a76      	ldr	r2, [pc, #472]	; (800421c <runBLTask+0x26c>)
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b71      	ldr	r3, [pc, #452]	; (800420c <runBLTask+0x25c>)
 8004046:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	2104      	movs	r1, #4
 8004058:	4871      	ldr	r0, [pc, #452]	; (8004220 <runBLTask+0x270>)
 800405a:	f002 fa8b 	bl	8006574 <HAL_GPIO_WritePin>
 800405e:	4b6b      	ldr	r3, [pc, #428]	; (800420c <runBLTask+0x25c>)
 8004060:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	2108      	movs	r1, #8
 8004072:	486b      	ldr	r0, [pc, #428]	; (8004220 <runBLTask+0x270>)
 8004074:	f002 fa7e 	bl	8006574 <HAL_GPIO_WritePin>
 8004078:	4b64      	ldr	r3, [pc, #400]	; (800420c <runBLTask+0x25c>)
 800407a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800407e:	2b00      	cmp	r3, #0
 8004080:	bf0c      	ite	eq
 8004082:	2301      	moveq	r3, #1
 8004084:	2300      	movne	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	2120      	movs	r1, #32
 800408c:	4864      	ldr	r0, [pc, #400]	; (8004220 <runBLTask+0x270>)
 800408e:	f002 fa71 	bl	8006574 <HAL_GPIO_WritePin>
 8004092:	4b5e      	ldr	r3, [pc, #376]	; (800420c <runBLTask+0x25c>)
 8004094:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	2110      	movs	r1, #16
 80040a6:	485e      	ldr	r0, [pc, #376]	; (8004220 <runBLTask+0x270>)
 80040a8:	f002 fa64 	bl	8006574 <HAL_GPIO_WritePin>
 80040ac:	4b57      	ldr	r3, [pc, #348]	; (800420c <runBLTask+0x25c>)
 80040ae:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 80040b2:	4b5c      	ldr	r3, [pc, #368]	; (8004224 <runBLTask+0x274>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	635a      	str	r2, [r3, #52]	; 0x34
 80040b8:	4b54      	ldr	r3, [pc, #336]	; (800420c <runBLTask+0x25c>)
 80040ba:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 80040be:	4b59      	ldr	r3, [pc, #356]	; (8004224 <runBLTask+0x274>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80040c4:	4855      	ldr	r0, [pc, #340]	; (800421c <runBLTask+0x26c>)
 80040c6:	f7fe fee3 	bl	8002e90 <RobotTurn>
        // osDelay(10);
        targetDist = 6;
 80040ca:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <runBLTask+0x258>)
 80040cc:	4a56      	ldr	r2, [pc, #344]	; (8004228 <runBLTask+0x278>)
 80040ce:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80040d0:	2200      	movs	r2, #0
 80040d2:	2100      	movs	r1, #0
 80040d4:	484c      	ldr	r0, [pc, #304]	; (8004208 <runBLTask+0x258>)
 80040d6:	f7fe fbe7 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        break;
 80040da:	e107      	b.n	80042ec <runBLTask+0x33c>
      case 20: // BL20 (outdoor 3x1)
        // targetDist = 4;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 80040dc:	4b4b      	ldr	r3, [pc, #300]	; (800420c <runBLTask+0x25c>)
 80040de:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80040e2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004210 <runBLTask+0x260>
 80040e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ee:	dd02      	ble.n	80040f6 <runBLTask+0x146>
 80040f0:	f240 1309 	movw	r3, #265	; 0x109
 80040f4:	e012      	b.n	800411c <runBLTask+0x16c>
 80040f6:	4b45      	ldr	r3, [pc, #276]	; (800420c <runBLTask+0x25c>)
 80040f8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80040fc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004214 <runBLTask+0x264>
 8004100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004108:	d501      	bpl.n	800410e <runBLTask+0x15e>
 800410a:	2346      	movs	r3, #70	; 0x46
 800410c:	e006      	b.n	800411c <runBLTask+0x16c>
 800410e:	4b3f      	ldr	r3, [pc, #252]	; (800420c <runBLTask+0x25c>)
 8004110:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8004114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004118:	ee17 3a90 	vmov	r3, s15
 800411c:	4a3e      	ldr	r2, [pc, #248]	; (8004218 <runBLTask+0x268>)
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	6413      	str	r3, [r2, #64]	; 0x40
 8004122:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004126:	f001 fb25 	bl	8005774 <HAL_Delay>
 800412a:	4b38      	ldr	r3, [pc, #224]	; (800420c <runBLTask+0x25c>)
 800412c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004130:	4a3a      	ldr	r2, [pc, #232]	; (800421c <runBLTask+0x26c>)
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b35      	ldr	r3, [pc, #212]	; (800420c <runBLTask+0x25c>)
 8004136:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800413a:	2b00      	cmp	r3, #0
 800413c:	bf0c      	ite	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	2300      	movne	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	2104      	movs	r1, #4
 8004148:	4835      	ldr	r0, [pc, #212]	; (8004220 <runBLTask+0x270>)
 800414a:	f002 fa13 	bl	8006574 <HAL_GPIO_WritePin>
 800414e:	4b2f      	ldr	r3, [pc, #188]	; (800420c <runBLTask+0x25c>)
 8004150:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	2108      	movs	r1, #8
 8004162:	482f      	ldr	r0, [pc, #188]	; (8004220 <runBLTask+0x270>)
 8004164:	f002 fa06 	bl	8006574 <HAL_GPIO_WritePin>
 8004168:	4b28      	ldr	r3, [pc, #160]	; (800420c <runBLTask+0x25c>)
 800416a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	2120      	movs	r1, #32
 800417c:	4828      	ldr	r0, [pc, #160]	; (8004220 <runBLTask+0x270>)
 800417e:	f002 f9f9 	bl	8006574 <HAL_GPIO_WritePin>
 8004182:	4b22      	ldr	r3, [pc, #136]	; (800420c <runBLTask+0x25c>)
 8004184:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	2110      	movs	r1, #16
 8004196:	4822      	ldr	r0, [pc, #136]	; (8004220 <runBLTask+0x270>)
 8004198:	f002 f9ec 	bl	8006574 <HAL_GPIO_WritePin>
 800419c:	4b1b      	ldr	r3, [pc, #108]	; (800420c <runBLTask+0x25c>)
 800419e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <runBLTask+0x274>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34
 80041a8:	4b18      	ldr	r3, [pc, #96]	; (800420c <runBLTask+0x25c>)
 80041aa:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80041ae:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <runBLTask+0x274>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80041b4:	4819      	ldr	r0, [pc, #100]	; (800421c <runBLTask+0x26c>)
 80041b6:	f7fe fe6b 	bl	8002e90 <RobotTurn>
        // osDelay(10);
        targetDist = 4;
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <runBLTask+0x258>)
 80041bc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80041c0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80041c2:	2200      	movs	r2, #0
 80041c4:	2100      	movs	r1, #0
 80041c6:	4810      	ldr	r0, [pc, #64]	; (8004208 <runBLTask+0x258>)
 80041c8:	f7fe fb6e 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        break;
 80041cc:	e08e      	b.n	80042ec <runBLTask+0x33c>
      default: // BL00 (indoor 3x2)
        // targetDist = 2;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);

        __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <runBLTask+0x25c>)
 80041d0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80041d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004210 <runBLTask+0x260>
 80041d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e0:	dd02      	ble.n	80041e8 <runBLTask+0x238>
 80041e2:	f240 1309 	movw	r3, #265	; 0x109
 80041e6:	e028      	b.n	800423a <runBLTask+0x28a>
 80041e8:	4b08      	ldr	r3, [pc, #32]	; (800420c <runBLTask+0x25c>)
 80041ea:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80041ee:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004214 <runBLTask+0x264>
 80041f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fa:	d517      	bpl.n	800422c <runBLTask+0x27c>
 80041fc:	2346      	movs	r3, #70	; 0x46
 80041fe:	e01c      	b.n	800423a <runBLTask+0x28a>
 8004200:	20000134 	.word	0x20000134
 8004204:	200004bc 	.word	0x200004bc
 8004208:	200004e8 	.word	0x200004e8
 800420c:	20000004 	.word	0x20000004
 8004210:	43848000 	.word	0x43848000
 8004214:	428c0000 	.word	0x428c0000
 8004218:	200002a0 	.word	0x200002a0
 800421c:	200004d4 	.word	0x200004d4
 8004220:	40020000 	.word	0x40020000
 8004224:	200003c0 	.word	0x200003c0
 8004228:	40c00000 	.word	0x40c00000
 800422c:	4b4e      	ldr	r3, [pc, #312]	; (8004368 <runBLTask+0x3b8>)
 800422e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004236:	ee17 3a90 	vmov	r3, s15
 800423a:	4a4c      	ldr	r2, [pc, #304]	; (800436c <runBLTask+0x3bc>)
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	6413      	str	r3, [r2, #64]	; 0x40
 8004240:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004244:	f001 fa96 	bl	8005774 <HAL_Delay>
 8004248:	4b47      	ldr	r3, [pc, #284]	; (8004368 <runBLTask+0x3b8>)
 800424a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800424e:	4a48      	ldr	r2, [pc, #288]	; (8004370 <runBLTask+0x3c0>)
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	4b45      	ldr	r3, [pc, #276]	; (8004368 <runBLTask+0x3b8>)
 8004254:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	2104      	movs	r1, #4
 8004266:	4843      	ldr	r0, [pc, #268]	; (8004374 <runBLTask+0x3c4>)
 8004268:	f002 f984 	bl	8006574 <HAL_GPIO_WritePin>
 800426c:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <runBLTask+0x3b8>)
 800426e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	2108      	movs	r1, #8
 8004280:	483c      	ldr	r0, [pc, #240]	; (8004374 <runBLTask+0x3c4>)
 8004282:	f002 f977 	bl	8006574 <HAL_GPIO_WritePin>
 8004286:	4b38      	ldr	r3, [pc, #224]	; (8004368 <runBLTask+0x3b8>)
 8004288:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	2120      	movs	r1, #32
 800429a:	4836      	ldr	r0, [pc, #216]	; (8004374 <runBLTask+0x3c4>)
 800429c:	f002 f96a 	bl	8006574 <HAL_GPIO_WritePin>
 80042a0:	4b31      	ldr	r3, [pc, #196]	; (8004368 <runBLTask+0x3b8>)
 80042a2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	2110      	movs	r1, #16
 80042b4:	482f      	ldr	r0, [pc, #188]	; (8004374 <runBLTask+0x3c4>)
 80042b6:	f002 f95d 	bl	8006574 <HAL_GPIO_WritePin>
 80042ba:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <runBLTask+0x3b8>)
 80042bc:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 80042c0:	4b2d      	ldr	r3, [pc, #180]	; (8004378 <runBLTask+0x3c8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	635a      	str	r2, [r3, #52]	; 0x34
 80042c6:	4b28      	ldr	r3, [pc, #160]	; (8004368 <runBLTask+0x3b8>)
 80042c8:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 80042cc:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <runBLTask+0x3c8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80042d2:	4827      	ldr	r0, [pc, #156]	; (8004370 <runBLTask+0x3c0>)
 80042d4:	f7fe fddc 	bl	8002e90 <RobotTurn>

        targetDist = 8;
 80042d8:	4b28      	ldr	r3, [pc, #160]	; (800437c <runBLTask+0x3cc>)
 80042da:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80042de:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80042e0:	2200      	movs	r2, #0
 80042e2:	2100      	movs	r1, #0
 80042e4:	4825      	ldr	r0, [pc, #148]	; (800437c <runBLTask+0x3cc>)
 80042e6:	f7fe fadf 	bl	80028a8 <RobotMoveDist>

        break;
 80042ea:	bf00      	nop
      }
      clickOnce = 0;
 80042ec:	4b24      	ldr	r3, [pc, #144]	; (8004380 <runBLTask+0x3d0>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <runBLTask+0x3d4>)
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	4b24      	ldr	r3, [pc, #144]	; (8004388 <runBLTask+0x3d8>)
 80042f8:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <runBLTask+0x3d4>)
 80042fc:	220b      	movs	r2, #11
 80042fe:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004300:	4b22      	ldr	r3, [pc, #136]	; (800438c <runBLTask+0x3dc>)
 8004302:	781a      	ldrb	r2, [r3, #0]
 8004304:	4b21      	ldr	r3, [pc, #132]	; (800438c <runBLTask+0x3dc>)
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	429a      	cmp	r2, r3
 800430a:	d112      	bne.n	8004332 <runBLTask+0x382>
      {
        __CLEAR_CURCMD(curCmd);
 800430c:	4b20      	ldr	r3, [pc, #128]	; (8004390 <runBLTask+0x3e0>)
 800430e:	2264      	movs	r2, #100	; 0x64
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <runBLTask+0x3e0>)
 8004314:	2200      	movs	r2, #0
 8004316:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004318:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <runBLTask+0x3e4>)
 800431a:	210f      	movs	r1, #15
 800431c:	481e      	ldr	r0, [pc, #120]	; (8004398 <runBLTask+0x3e8>)
 800431e:	f009 fdd9 	bl	800ded4 <sniprintf>
 8004322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004326:	2206      	movs	r2, #6
 8004328:	491c      	ldr	r1, [pc, #112]	; (800439c <runBLTask+0x3ec>)
 800432a:	481d      	ldr	r0, [pc, #116]	; (80043a0 <runBLTask+0x3f0>)
 800432c:	f005 fc55 	bl	8009bda <HAL_UART_Transmit>
 8004330:	e642      	b.n	8003fb8 <runBLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004332:	4b16      	ldr	r3, [pc, #88]	; (800438c <runBLTask+0x3dc>)
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	4a16      	ldr	r2, [pc, #88]	; (8004390 <runBLTask+0x3e0>)
 8004338:	4914      	ldr	r1, [pc, #80]	; (800438c <runBLTask+0x3dc>)
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <runBLTask+0x3dc>)
 8004344:	785b      	ldrb	r3, [r3, #1]
 8004346:	3301      	adds	r3, #1
 8004348:	4a10      	ldr	r2, [pc, #64]	; (800438c <runBLTask+0x3dc>)
 800434a:	7892      	ldrb	r2, [r2, #2]
 800434c:	fb93 f1f2 	sdiv	r1, r3, r2
 8004350:	fb01 f202 	mul.w	r2, r1, r2
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	b2da      	uxtb	r2, r3
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <runBLTask+0x3dc>)
 800435a:	705a      	strb	r2, [r3, #1]
 800435c:	4a11      	ldr	r2, [pc, #68]	; (80043a4 <runBLTask+0x3f4>)
 800435e:	210f      	movs	r1, #15
 8004360:	480d      	ldr	r0, [pc, #52]	; (8004398 <runBLTask+0x3e8>)
 8004362:	f009 fdb7 	bl	800ded4 <sniprintf>
    if (curTask != TASK_BL)
 8004366:	e627      	b.n	8003fb8 <runBLTask+0x8>
 8004368:	20000004 	.word	0x20000004
 800436c:	200002a0 	.word	0x200002a0
 8004370:	200004d4 	.word	0x200004d4
 8004374:	40020000 	.word	0x40020000
 8004378:	200003c0 	.word	0x200003c0
 800437c:	200004e8 	.word	0x200004e8
 8004380:	20000548 	.word	0x20000548
 8004384:	20000134 	.word	0x20000134
 8004388:	20000135 	.word	0x20000135
 800438c:	20000488 	.word	0x20000488
 8004390:	200004bc 	.word	0x200004bc
 8004394:	0800e8d4 	.word	0x0800e8d4
 8004398:	200004c0 	.word	0x200004c0
 800439c:	0800e8dc 	.word	0x0800e8dc
 80043a0:	20000408 	.word	0x20000408
 80043a4:	0800e8e4 	.word	0x0800e8e4

080043a8 <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 80043b0:	4b95      	ldr	r3, [pc, #596]	; (8004608 <runBRTask+0x260>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d004      	beq.n	80043c2 <runBRTask+0x1a>
      osDelay(1000);
 80043b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043bc:	f006 fd58 	bl	800ae70 <osDelay>
 80043c0:	e7f6      	b.n	80043b0 <runBRTask+0x8>
    else
    {

      switch (curCmd.val)
 80043c2:	4b92      	ldr	r3, [pc, #584]	; (800460c <runBRTask+0x264>)
 80043c4:	885b      	ldrh	r3, [r3, #2]
 80043c6:	2b14      	cmp	r3, #20
 80043c8:	f000 8084 	beq.w	80044d4 <runBRTask+0x12c>
 80043cc:	2b1e      	cmp	r3, #30
 80043ce:	f040 80fa 	bne.w	80045c6 <runBRTask+0x21e>
      {
      case 30: // BR30 (4x2)
        targetDist = 2;
 80043d2:	4b8f      	ldr	r3, [pc, #572]	; (8004610 <runBRTask+0x268>)
 80043d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043d8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80043da:	2200      	movs	r2, #0
 80043dc:	2100      	movs	r1, #0
 80043de:	488c      	ldr	r0, [pc, #560]	; (8004610 <runBRTask+0x268>)
 80043e0:	f7fe fa62 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 80043e4:	4b8b      	ldr	r3, [pc, #556]	; (8004614 <runBRTask+0x26c>)
 80043e6:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80043ea:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004618 <runBRTask+0x270>
 80043ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	dd02      	ble.n	80043fe <runBRTask+0x56>
 80043f8:	f240 1309 	movw	r3, #265	; 0x109
 80043fc:	e012      	b.n	8004424 <runBRTask+0x7c>
 80043fe:	4b85      	ldr	r3, [pc, #532]	; (8004614 <runBRTask+0x26c>)
 8004400:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8004404:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800461c <runBRTask+0x274>
 8004408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004410:	d501      	bpl.n	8004416 <runBRTask+0x6e>
 8004412:	2346      	movs	r3, #70	; 0x46
 8004414:	e006      	b.n	8004424 <runBRTask+0x7c>
 8004416:	4b7f      	ldr	r3, [pc, #508]	; (8004614 <runBRTask+0x26c>)
 8004418:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 800441c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004420:	ee17 3a90 	vmov	r3, s15
 8004424:	4a7e      	ldr	r2, [pc, #504]	; (8004620 <runBRTask+0x278>)
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
 800442a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800442e:	f001 f9a1 	bl	8005774 <HAL_Delay>
 8004432:	4b78      	ldr	r3, [pc, #480]	; (8004614 <runBRTask+0x26c>)
 8004434:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004438:	4a7a      	ldr	r2, [pc, #488]	; (8004624 <runBRTask+0x27c>)
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b75      	ldr	r3, [pc, #468]	; (8004614 <runBRTask+0x26c>)
 800443e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	2104      	movs	r1, #4
 8004450:	4875      	ldr	r0, [pc, #468]	; (8004628 <runBRTask+0x280>)
 8004452:	f002 f88f 	bl	8006574 <HAL_GPIO_WritePin>
 8004456:	4b6f      	ldr	r3, [pc, #444]	; (8004614 <runBRTask+0x26c>)
 8004458:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	2108      	movs	r1, #8
 800446a:	486f      	ldr	r0, [pc, #444]	; (8004628 <runBRTask+0x280>)
 800446c:	f002 f882 	bl	8006574 <HAL_GPIO_WritePin>
 8004470:	4b68      	ldr	r3, [pc, #416]	; (8004614 <runBRTask+0x26c>)
 8004472:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004476:	2b00      	cmp	r3, #0
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	2120      	movs	r1, #32
 8004484:	4868      	ldr	r0, [pc, #416]	; (8004628 <runBRTask+0x280>)
 8004486:	f002 f875 	bl	8006574 <HAL_GPIO_WritePin>
 800448a:	4b62      	ldr	r3, [pc, #392]	; (8004614 <runBRTask+0x26c>)
 800448c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	2110      	movs	r1, #16
 800449e:	4862      	ldr	r0, [pc, #392]	; (8004628 <runBRTask+0x280>)
 80044a0:	f002 f868 	bl	8006574 <HAL_GPIO_WritePin>
 80044a4:	4b5b      	ldr	r3, [pc, #364]	; (8004614 <runBRTask+0x26c>)
 80044a6:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 80044aa:	4b60      	ldr	r3, [pc, #384]	; (800462c <runBRTask+0x284>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34
 80044b0:	4b58      	ldr	r3, [pc, #352]	; (8004614 <runBRTask+0x26c>)
 80044b2:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <runBRTask+0x284>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80044bc:	4859      	ldr	r0, [pc, #356]	; (8004624 <runBRTask+0x27c>)
 80044be:	f7fe fce7 	bl	8002e90 <RobotTurn>
        // osDelay(10);
        targetDist = 7;
 80044c2:	4b53      	ldr	r3, [pc, #332]	; (8004610 <runBRTask+0x268>)
 80044c4:	4a5a      	ldr	r2, [pc, #360]	; (8004630 <runBRTask+0x288>)
 80044c6:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80044c8:	2200      	movs	r2, #0
 80044ca:	2100      	movs	r1, #0
 80044cc:	4850      	ldr	r0, [pc, #320]	; (8004610 <runBRTask+0x268>)
 80044ce:	f7fe f9eb 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        break;
 80044d2:	e111      	b.n	80046f8 <runBRTask+0x350>
      case 20: // BR20 (outdoor 3x1)
        // targetDist = 4;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 80044d4:	4b4f      	ldr	r3, [pc, #316]	; (8004614 <runBRTask+0x26c>)
 80044d6:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80044da:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004618 <runBRTask+0x270>
 80044de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e6:	dd02      	ble.n	80044ee <runBRTask+0x146>
 80044e8:	f240 1309 	movw	r3, #265	; 0x109
 80044ec:	e012      	b.n	8004514 <runBRTask+0x16c>
 80044ee:	4b49      	ldr	r3, [pc, #292]	; (8004614 <runBRTask+0x26c>)
 80044f0:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80044f4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800461c <runBRTask+0x274>
 80044f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	d501      	bpl.n	8004506 <runBRTask+0x15e>
 8004502:	2346      	movs	r3, #70	; 0x46
 8004504:	e006      	b.n	8004514 <runBRTask+0x16c>
 8004506:	4b43      	ldr	r3, [pc, #268]	; (8004614 <runBRTask+0x26c>)
 8004508:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800450c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004510:	ee17 3a90 	vmov	r3, s15
 8004514:	4a42      	ldr	r2, [pc, #264]	; (8004620 <runBRTask+0x278>)
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	6413      	str	r3, [r2, #64]	; 0x40
 800451a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800451e:	f001 f929 	bl	8005774 <HAL_Delay>
 8004522:	4b3c      	ldr	r3, [pc, #240]	; (8004614 <runBRTask+0x26c>)
 8004524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004528:	4a3e      	ldr	r2, [pc, #248]	; (8004624 <runBRTask+0x27c>)
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b39      	ldr	r3, [pc, #228]	; (8004614 <runBRTask+0x26c>)
 800452e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	2104      	movs	r1, #4
 8004540:	4839      	ldr	r0, [pc, #228]	; (8004628 <runBRTask+0x280>)
 8004542:	f002 f817 	bl	8006574 <HAL_GPIO_WritePin>
 8004546:	4b33      	ldr	r3, [pc, #204]	; (8004614 <runBRTask+0x26c>)
 8004548:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	2108      	movs	r1, #8
 800455a:	4833      	ldr	r0, [pc, #204]	; (8004628 <runBRTask+0x280>)
 800455c:	f002 f80a 	bl	8006574 <HAL_GPIO_WritePin>
 8004560:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <runBRTask+0x26c>)
 8004562:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8004566:	2b00      	cmp	r3, #0
 8004568:	bf0c      	ite	eq
 800456a:	2301      	moveq	r3, #1
 800456c:	2300      	movne	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	2120      	movs	r1, #32
 8004574:	482c      	ldr	r0, [pc, #176]	; (8004628 <runBRTask+0x280>)
 8004576:	f001 fffd 	bl	8006574 <HAL_GPIO_WritePin>
 800457a:	4b26      	ldr	r3, [pc, #152]	; (8004614 <runBRTask+0x26c>)
 800457c:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	2110      	movs	r1, #16
 800458e:	4826      	ldr	r0, [pc, #152]	; (8004628 <runBRTask+0x280>)
 8004590:	f001 fff0 	bl	8006574 <HAL_GPIO_WritePin>
 8004594:	4b1f      	ldr	r3, [pc, #124]	; (8004614 <runBRTask+0x26c>)
 8004596:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 800459a:	4b24      	ldr	r3, [pc, #144]	; (800462c <runBRTask+0x284>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	635a      	str	r2, [r3, #52]	; 0x34
 80045a0:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <runBRTask+0x26c>)
 80045a2:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80045a6:	4b21      	ldr	r3, [pc, #132]	; (800462c <runBRTask+0x284>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80045ac:	481d      	ldr	r0, [pc, #116]	; (8004624 <runBRTask+0x27c>)
 80045ae:	f7fe fc6f 	bl	8002e90 <RobotTurn>
        // osDelay(10);
        targetDist = 4;
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <runBRTask+0x268>)
 80045b4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80045b8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	4814      	ldr	r0, [pc, #80]	; (8004610 <runBRTask+0x268>)
 80045c0:	f7fe f972 	bl	80028a8 <RobotMoveDist>
        // osDelay(10);
        break;
 80045c4:	e098      	b.n	80046f8 <runBRTask+0x350>
      default: // BR00 (indoor 3x1)
        targetDist = 3;
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <runBRTask+0x268>)
 80045c8:	4a1a      	ldr	r2, [pc, #104]	; (8004634 <runBRTask+0x28c>)
 80045ca:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80045cc:	2200      	movs	r2, #0
 80045ce:	2101      	movs	r1, #1
 80045d0:	480f      	ldr	r0, [pc, #60]	; (8004610 <runBRTask+0x268>)
 80045d2:	f7fe f969 	bl	80028a8 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 80045d6:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <runBRTask+0x26c>)
 80045d8:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80045dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004618 <runBRTask+0x270>
 80045e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e8:	dd02      	ble.n	80045f0 <runBRTask+0x248>
 80045ea:	f240 1309 	movw	r3, #265	; 0x109
 80045ee:	e02a      	b.n	8004646 <runBRTask+0x29e>
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <runBRTask+0x26c>)
 80045f2:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80045f6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800461c <runBRTask+0x274>
 80045fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004602:	d519      	bpl.n	8004638 <runBRTask+0x290>
 8004604:	2346      	movs	r3, #70	; 0x46
 8004606:	e01e      	b.n	8004646 <runBRTask+0x29e>
 8004608:	20000134 	.word	0x20000134
 800460c:	200004bc 	.word	0x200004bc
 8004610:	200004e8 	.word	0x200004e8
 8004614:	20000004 	.word	0x20000004
 8004618:	43848000 	.word	0x43848000
 800461c:	428c0000 	.word	0x428c0000
 8004620:	200002a0 	.word	0x200002a0
 8004624:	200004d4 	.word	0x200004d4
 8004628:	40020000 	.word	0x40020000
 800462c:	200003c0 	.word	0x200003c0
 8004630:	40e00000 	.word	0x40e00000
 8004634:	40400000 	.word	0x40400000
 8004638:	4b4e      	ldr	r3, [pc, #312]	; (8004774 <runBRTask+0x3cc>)
 800463a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800463e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004642:	ee17 3a90 	vmov	r3, s15
 8004646:	4a4c      	ldr	r2, [pc, #304]	; (8004778 <runBRTask+0x3d0>)
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	6413      	str	r3, [r2, #64]	; 0x40
 800464c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004650:	f001 f890 	bl	8005774 <HAL_Delay>
 8004654:	4b47      	ldr	r3, [pc, #284]	; (8004774 <runBRTask+0x3cc>)
 8004656:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800465a:	4a48      	ldr	r2, [pc, #288]	; (800477c <runBRTask+0x3d4>)
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	4b45      	ldr	r3, [pc, #276]	; (8004774 <runBRTask+0x3cc>)
 8004660:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	2104      	movs	r1, #4
 8004672:	4843      	ldr	r0, [pc, #268]	; (8004780 <runBRTask+0x3d8>)
 8004674:	f001 ff7e 	bl	8006574 <HAL_GPIO_WritePin>
 8004678:	4b3e      	ldr	r3, [pc, #248]	; (8004774 <runBRTask+0x3cc>)
 800467a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800467e:	2b00      	cmp	r3, #0
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	2108      	movs	r1, #8
 800468c:	483c      	ldr	r0, [pc, #240]	; (8004780 <runBRTask+0x3d8>)
 800468e:	f001 ff71 	bl	8006574 <HAL_GPIO_WritePin>
 8004692:	4b38      	ldr	r3, [pc, #224]	; (8004774 <runBRTask+0x3cc>)
 8004694:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	2120      	movs	r1, #32
 80046a6:	4836      	ldr	r0, [pc, #216]	; (8004780 <runBRTask+0x3d8>)
 80046a8:	f001 ff64 	bl	8006574 <HAL_GPIO_WritePin>
 80046ac:	4b31      	ldr	r3, [pc, #196]	; (8004774 <runBRTask+0x3cc>)
 80046ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	2110      	movs	r1, #16
 80046c0:	482f      	ldr	r0, [pc, #188]	; (8004780 <runBRTask+0x3d8>)
 80046c2:	f001 ff57 	bl	8006574 <HAL_GPIO_WritePin>
 80046c6:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <runBRTask+0x3cc>)
 80046c8:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80046cc:	4b2d      	ldr	r3, [pc, #180]	; (8004784 <runBRTask+0x3dc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	635a      	str	r2, [r3, #52]	; 0x34
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <runBRTask+0x3cc>)
 80046d4:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 80046d8:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <runBRTask+0x3dc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80046de:	4827      	ldr	r0, [pc, #156]	; (800477c <runBRTask+0x3d4>)
 80046e0:	f7fe fbd6 	bl	8002e90 <RobotTurn>

        targetDist = 8;
 80046e4:	4b28      	ldr	r3, [pc, #160]	; (8004788 <runBRTask+0x3e0>)
 80046e6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80046ea:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80046ec:	2200      	movs	r2, #0
 80046ee:	2100      	movs	r1, #0
 80046f0:	4825      	ldr	r0, [pc, #148]	; (8004788 <runBRTask+0x3e0>)
 80046f2:	f7fe f8d9 	bl	80028a8 <RobotMoveDist>

        break;
 80046f6:	bf00      	nop
      }
      clickOnce = 0;
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <runBRTask+0x3e4>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 80046fe:	4b24      	ldr	r3, [pc, #144]	; (8004790 <runBRTask+0x3e8>)
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	4b24      	ldr	r3, [pc, #144]	; (8004794 <runBRTask+0x3ec>)
 8004704:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004706:	4b22      	ldr	r3, [pc, #136]	; (8004790 <runBRTask+0x3e8>)
 8004708:	220b      	movs	r2, #11
 800470a:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800470c:	4b22      	ldr	r3, [pc, #136]	; (8004798 <runBRTask+0x3f0>)
 800470e:	781a      	ldrb	r2, [r3, #0]
 8004710:	4b21      	ldr	r3, [pc, #132]	; (8004798 <runBRTask+0x3f0>)
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	429a      	cmp	r2, r3
 8004716:	d112      	bne.n	800473e <runBRTask+0x396>
      {
        __CLEAR_CURCMD(curCmd);
 8004718:	4b20      	ldr	r3, [pc, #128]	; (800479c <runBRTask+0x3f4>)
 800471a:	2264      	movs	r2, #100	; 0x64
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	4b1f      	ldr	r3, [pc, #124]	; (800479c <runBRTask+0x3f4>)
 8004720:	2200      	movs	r2, #0
 8004722:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004724:	4a1e      	ldr	r2, [pc, #120]	; (80047a0 <runBRTask+0x3f8>)
 8004726:	210f      	movs	r1, #15
 8004728:	481e      	ldr	r0, [pc, #120]	; (80047a4 <runBRTask+0x3fc>)
 800472a:	f009 fbd3 	bl	800ded4 <sniprintf>
 800472e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004732:	2206      	movs	r2, #6
 8004734:	491c      	ldr	r1, [pc, #112]	; (80047a8 <runBRTask+0x400>)
 8004736:	481d      	ldr	r0, [pc, #116]	; (80047ac <runBRTask+0x404>)
 8004738:	f005 fa4f 	bl	8009bda <HAL_UART_Transmit>
 800473c:	e638      	b.n	80043b0 <runBRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <runBRTask+0x3f0>)
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	4a16      	ldr	r2, [pc, #88]	; (800479c <runBRTask+0x3f4>)
 8004744:	4914      	ldr	r1, [pc, #80]	; (8004798 <runBRTask+0x3f0>)
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <runBRTask+0x3f0>)
 8004750:	785b      	ldrb	r3, [r3, #1]
 8004752:	3301      	adds	r3, #1
 8004754:	4a10      	ldr	r2, [pc, #64]	; (8004798 <runBRTask+0x3f0>)
 8004756:	7892      	ldrb	r2, [r2, #2]
 8004758:	fb93 f1f2 	sdiv	r1, r3, r2
 800475c:	fb01 f202 	mul.w	r2, r1, r2
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	b2da      	uxtb	r2, r3
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <runBRTask+0x3f0>)
 8004766:	705a      	strb	r2, [r3, #1]
 8004768:	4a11      	ldr	r2, [pc, #68]	; (80047b0 <runBRTask+0x408>)
 800476a:	210f      	movs	r1, #15
 800476c:	480d      	ldr	r0, [pc, #52]	; (80047a4 <runBRTask+0x3fc>)
 800476e:	f009 fbb1 	bl	800ded4 <sniprintf>
    if (curTask != TASK_BR)
 8004772:	e61d      	b.n	80043b0 <runBRTask+0x8>
 8004774:	20000004 	.word	0x20000004
 8004778:	200002a0 	.word	0x200002a0
 800477c:	200004d4 	.word	0x200004d4
 8004780:	40020000 	.word	0x40020000
 8004784:	200003c0 	.word	0x200003c0
 8004788:	200004e8 	.word	0x200004e8
 800478c:	20000548 	.word	0x20000548
 8004790:	20000134 	.word	0x20000134
 8004794:	20000135 	.word	0x20000135
 8004798:	20000488 	.word	0x20000488
 800479c:	200004bc 	.word	0x200004bc
 80047a0:	0800e8d4 	.word	0x0800e8d4
 80047a4:	200004c0 	.word	0x200004c0
 80047a8:	0800e8dc 	.word	0x0800e8dc
 80047ac:	20000408 	.word	0x20000408
 80047b0:	0800e8e4 	.word	0x0800e8e4

080047b4 <runADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
  for (;;)
  {
    if (curTask != TASK_ADC)
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <runADCTask+0x9c>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d004      	beq.n	80047ce <runADCTask+0x1a>
      osDelay(1000);
 80047c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047c8:	f006 fb52 	bl	800ae70 <osDelay>
 80047cc:	e7f6      	b.n	80047bc <runADCTask+0x8>
    else
    {
      //			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
      //			last_curTask_tick = HAL_GetTick();
      __PEND_CURCMD(curCmd);
 80047ce:	4b21      	ldr	r3, [pc, #132]	; (8004854 <runADCTask+0xa0>)
 80047d0:	2263      	movs	r2, #99	; 0x63
 80047d2:	701a      	strb	r2, [r3, #0]
      //			  osDelay(5);
      //			} while (1);
      //
      //		  __ON_TASK_END(&htim8, prevTask, curTask);
      //		  HAL_ADC_Stop(&hadc1);
      clickOnce = 0;
 80047d4:	4b20      	ldr	r3, [pc, #128]	; (8004858 <runADCTask+0xa4>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <runADCTask+0x9c>)
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	4b1f      	ldr	r3, [pc, #124]	; (800485c <runADCTask+0xa8>)
 80047e0:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80047e2:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <runADCTask+0x9c>)
 80047e4:	220b      	movs	r2, #11
 80047e6:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80047e8:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <runADCTask+0xac>)
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	4b1c      	ldr	r3, [pc, #112]	; (8004860 <runADCTask+0xac>)
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d112      	bne.n	800481a <runADCTask+0x66>
      {
        __CLEAR_CURCMD(curCmd);
 80047f4:	4b17      	ldr	r3, [pc, #92]	; (8004854 <runADCTask+0xa0>)
 80047f6:	2264      	movs	r2, #100	; 0x64
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	4b16      	ldr	r3, [pc, #88]	; (8004854 <runADCTask+0xa0>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004800:	4a18      	ldr	r2, [pc, #96]	; (8004864 <runADCTask+0xb0>)
 8004802:	210f      	movs	r1, #15
 8004804:	4818      	ldr	r0, [pc, #96]	; (8004868 <runADCTask+0xb4>)
 8004806:	f009 fb65 	bl	800ded4 <sniprintf>
 800480a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800480e:	2206      	movs	r2, #6
 8004810:	4916      	ldr	r1, [pc, #88]	; (800486c <runADCTask+0xb8>)
 8004812:	4817      	ldr	r0, [pc, #92]	; (8004870 <runADCTask+0xbc>)
 8004814:	f005 f9e1 	bl	8009bda <HAL_UART_Transmit>
 8004818:	e7d0      	b.n	80047bc <runADCTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <runADCTask+0xac>)
 800481c:	785b      	ldrb	r3, [r3, #1]
 800481e:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <runADCTask+0xa0>)
 8004820:	490f      	ldr	r1, [pc, #60]	; (8004860 <runADCTask+0xac>)
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b0d      	ldr	r3, [pc, #52]	; (8004860 <runADCTask+0xac>)
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	3301      	adds	r3, #1
 8004830:	4a0b      	ldr	r2, [pc, #44]	; (8004860 <runADCTask+0xac>)
 8004832:	7892      	ldrb	r2, [r2, #2]
 8004834:	fb93 f1f2 	sdiv	r1, r3, r2
 8004838:	fb01 f202 	mul.w	r2, r1, r2
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	b2da      	uxtb	r2, r3
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <runADCTask+0xac>)
 8004842:	705a      	strb	r2, [r3, #1]
 8004844:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <runADCTask+0xc0>)
 8004846:	210f      	movs	r1, #15
 8004848:	4807      	ldr	r0, [pc, #28]	; (8004868 <runADCTask+0xb4>)
 800484a:	f009 fb43 	bl	800ded4 <sniprintf>
    if (curTask != TASK_ADC)
 800484e:	e7b5      	b.n	80047bc <runADCTask+0x8>
 8004850:	20000134 	.word	0x20000134
 8004854:	200004bc 	.word	0x200004bc
 8004858:	20000548 	.word	0x20000548
 800485c:	20000135 	.word	0x20000135
 8004860:	20000488 	.word	0x20000488
 8004864:	0800e8d4 	.word	0x0800e8d4
 8004868:	200004c0 	.word	0x200004c0
 800486c:	0800e8dc 	.word	0x0800e8dc
 8004870:	20000408 	.word	0x20000408
 8004874:	0800e8e4 	.word	0x0800e8e4

08004878 <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 8004880:	4bc7      	ldr	r3, [pc, #796]	; (8004ba0 <runCmdTask+0x328>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	3b01      	subs	r3, #1
 8004886:	2b63      	cmp	r3, #99	; 0x63
 8004888:	f200 82e2 	bhi.w	8004e50 <runCmdTask+0x5d8>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <runCmdTask+0x1c>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	08004a25 	.word	0x08004a25
 8004898:	08004a33 	.word	0x08004a33
 800489c:	08004a41 	.word	0x08004a41
 80048a0:	08004a41 	.word	0x08004a41
 80048a4:	08004a41 	.word	0x08004a41
 80048a8:	08004a41 	.word	0x08004a41
 80048ac:	08004c15 	.word	0x08004c15
 80048b0:	08004c23 	.word	0x08004c23
 80048b4:	08004c31 	.word	0x08004c31
 80048b8:	08004c3f 	.word	0x08004c3f
 80048bc:	08004c4d 	.word	0x08004c4d
 80048c0:	08004c4d 	.word	0x08004c4d
 80048c4:	08004e51 	.word	0x08004e51
 80048c8:	08004c97 	.word	0x08004c97
 80048cc:	08004e51 	.word	0x08004e51
 80048d0:	08004e51 	.word	0x08004e51
 80048d4:	08004e51 	.word	0x08004e51
 80048d8:	08004e51 	.word	0x08004e51
 80048dc:	08004e51 	.word	0x08004e51
 80048e0:	08004e51 	.word	0x08004e51
 80048e4:	08004e51 	.word	0x08004e51
 80048e8:	08004e51 	.word	0x08004e51
 80048ec:	08004e51 	.word	0x08004e51
 80048f0:	08004e51 	.word	0x08004e51
 80048f4:	08004e51 	.word	0x08004e51
 80048f8:	08004e51 	.word	0x08004e51
 80048fc:	08004e51 	.word	0x08004e51
 8004900:	08004e51 	.word	0x08004e51
 8004904:	08004e51 	.word	0x08004e51
 8004908:	08004e51 	.word	0x08004e51
 800490c:	08004e51 	.word	0x08004e51
 8004910:	08004e51 	.word	0x08004e51
 8004914:	08004e51 	.word	0x08004e51
 8004918:	08004e51 	.word	0x08004e51
 800491c:	08004e51 	.word	0x08004e51
 8004920:	08004e51 	.word	0x08004e51
 8004924:	08004e51 	.word	0x08004e51
 8004928:	08004e51 	.word	0x08004e51
 800492c:	08004e51 	.word	0x08004e51
 8004930:	08004e51 	.word	0x08004e51
 8004934:	08004e51 	.word	0x08004e51
 8004938:	08004e51 	.word	0x08004e51
 800493c:	08004e51 	.word	0x08004e51
 8004940:	08004e51 	.word	0x08004e51
 8004944:	08004e51 	.word	0x08004e51
 8004948:	08004e51 	.word	0x08004e51
 800494c:	08004e51 	.word	0x08004e51
 8004950:	08004e51 	.word	0x08004e51
 8004954:	08004e51 	.word	0x08004e51
 8004958:	08004e51 	.word	0x08004e51
 800495c:	08004e51 	.word	0x08004e51
 8004960:	08004e51 	.word	0x08004e51
 8004964:	08004e51 	.word	0x08004e51
 8004968:	08004e51 	.word	0x08004e51
 800496c:	08004e51 	.word	0x08004e51
 8004970:	08004e51 	.word	0x08004e51
 8004974:	08004e51 	.word	0x08004e51
 8004978:	08004e51 	.word	0x08004e51
 800497c:	08004e51 	.word	0x08004e51
 8004980:	08004e51 	.word	0x08004e51
 8004984:	08004e51 	.word	0x08004e51
 8004988:	08004e51 	.word	0x08004e51
 800498c:	08004e51 	.word	0x08004e51
 8004990:	08004e51 	.word	0x08004e51
 8004994:	08004e51 	.word	0x08004e51
 8004998:	08004e51 	.word	0x08004e51
 800499c:	08004e51 	.word	0x08004e51
 80049a0:	08004e51 	.word	0x08004e51
 80049a4:	08004e51 	.word	0x08004e51
 80049a8:	08004e51 	.word	0x08004e51
 80049ac:	08004e51 	.word	0x08004e51
 80049b0:	08004e51 	.word	0x08004e51
 80049b4:	08004e51 	.word	0x08004e51
 80049b8:	08004e51 	.word	0x08004e51
 80049bc:	08004e51 	.word	0x08004e51
 80049c0:	08004e51 	.word	0x08004e51
 80049c4:	08004e51 	.word	0x08004e51
 80049c8:	08004e51 	.word	0x08004e51
 80049cc:	08004e51 	.word	0x08004e51
 80049d0:	08004e51 	.word	0x08004e51
 80049d4:	08004e51 	.word	0x08004e51
 80049d8:	08004e51 	.word	0x08004e51
 80049dc:	08004e51 	.word	0x08004e51
 80049e0:	08004e51 	.word	0x08004e51
 80049e4:	08004e51 	.word	0x08004e51
 80049e8:	08004e51 	.word	0x08004e51
 80049ec:	08004e51 	.word	0x08004e51
 80049f0:	08004ca5 	.word	0x08004ca5
 80049f4:	08004ca5 	.word	0x08004ca5
 80049f8:	08004d7b 	.word	0x08004d7b
 80049fc:	08004d7b 	.word	0x08004d7b
 8004a00:	08004e51 	.word	0x08004e51
 8004a04:	08004e51 	.word	0x08004e51
 8004a08:	08004e51 	.word	0x08004e51
 8004a0c:	08004e51 	.word	0x08004e51
 8004a10:	08004e51 	.word	0x08004e51
 8004a14:	08004e51 	.word	0x08004e51
 8004a18:	08004e51 	.word	0x08004e51
 8004a1c:	08004e51 	.word	0x08004e51
 8004a20:	08004e51 	.word	0x08004e51
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
      curTask = TASK_MOVE_FORWARD;
 8004a24:	4b5f      	ldr	r3, [pc, #380]	; (8004ba4 <runCmdTask+0x32c>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004a2a:	4b5d      	ldr	r3, [pc, #372]	; (8004ba0 <runCmdTask+0x328>)
 8004a2c:	2263      	movs	r2, #99	; 0x63
 8004a2e:	701a      	strb	r2, [r3, #0]
      break;
 8004a30:	e20f      	b.n	8004e52 <runCmdTask+0x5da>
    case 2: // BW
      curTask = TASK_MOVE_BACKWARD;
 8004a32:	4b5c      	ldr	r3, [pc, #368]	; (8004ba4 <runCmdTask+0x32c>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004a38:	4b59      	ldr	r3, [pc, #356]	; (8004ba0 <runCmdTask+0x328>)
 8004a3a:	2263      	movs	r2, #99	; 0x63
 8004a3c:	701a      	strb	r2, [r3, #0]
      break;
 8004a3e:	e208      	b.n	8004e52 <runCmdTask+0x5da>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8004a40:	4b57      	ldr	r3, [pc, #348]	; (8004ba0 <runCmdTask+0x328>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	4a58      	ldr	r2, [pc, #352]	; (8004ba8 <runCmdTask+0x330>)
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	4413      	add	r3, r2
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	edd3 7a00 	vldr	s15, [r3]
 8004a50:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004bac <runCmdTask+0x334>
 8004a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5c:	dd02      	ble.n	8004a64 <runCmdTask+0x1ec>
 8004a5e:	f240 1309 	movw	r3, #265	; 0x109
 8004a62:	e01c      	b.n	8004a9e <runCmdTask+0x226>
 8004a64:	4b4e      	ldr	r3, [pc, #312]	; (8004ba0 <runCmdTask+0x328>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	4a4f      	ldr	r2, [pc, #316]	; (8004ba8 <runCmdTask+0x330>)
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	edd3 7a00 	vldr	s15, [r3]
 8004a74:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004bb0 <runCmdTask+0x338>
 8004a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d501      	bpl.n	8004a86 <runCmdTask+0x20e>
 8004a82:	2346      	movs	r3, #70	; 0x46
 8004a84:	e00b      	b.n	8004a9e <runCmdTask+0x226>
 8004a86:	4b46      	ldr	r3, [pc, #280]	; (8004ba0 <runCmdTask+0x328>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	4a47      	ldr	r2, [pc, #284]	; (8004ba8 <runCmdTask+0x330>)
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	4413      	add	r3, r2
 8004a90:	3304      	adds	r3, #4
 8004a92:	edd3 7a00 	vldr	s15, [r3]
 8004a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9a:	ee17 3a90 	vmov	r3, s15
 8004a9e:	4a45      	ldr	r2, [pc, #276]	; (8004bb4 <runCmdTask+0x33c>)
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004aa8:	f000 fe64 	bl	8005774 <HAL_Delay>
 8004aac:	4b3c      	ldr	r3, [pc, #240]	; (8004ba0 <runCmdTask+0x328>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	4a3d      	ldr	r2, [pc, #244]	; (8004ba8 <runCmdTask+0x330>)
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3f      	ldr	r2, [pc, #252]	; (8004bb8 <runCmdTask+0x340>)
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	4b38      	ldr	r3, [pc, #224]	; (8004ba0 <runCmdTask+0x328>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	4a39      	ldr	r2, [pc, #228]	; (8004ba8 <runCmdTask+0x330>)
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4413      	add	r3, r2
 8004ac8:	330c      	adds	r3, #12
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2104      	movs	r1, #4
 8004ada:	4838      	ldr	r0, [pc, #224]	; (8004bbc <runCmdTask+0x344>)
 8004adc:	f001 fd4a 	bl	8006574 <HAL_GPIO_WritePin>
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	; (8004ba0 <runCmdTask+0x328>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4a30      	ldr	r2, [pc, #192]	; (8004ba8 <runCmdTask+0x330>)
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	4413      	add	r3, r2
 8004aea:	330c      	adds	r3, #12
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bf14      	ite	ne
 8004af2:	2301      	movne	r3, #1
 8004af4:	2300      	moveq	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	2108      	movs	r1, #8
 8004afc:	482f      	ldr	r0, [pc, #188]	; (8004bbc <runCmdTask+0x344>)
 8004afe:	f001 fd39 	bl	8006574 <HAL_GPIO_WritePin>
 8004b02:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <runCmdTask+0x328>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	4a28      	ldr	r2, [pc, #160]	; (8004ba8 <runCmdTask+0x330>)
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	4413      	add	r3, r2
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2120      	movs	r1, #32
 8004b1e:	4827      	ldr	r0, [pc, #156]	; (8004bbc <runCmdTask+0x344>)
 8004b20:	f001 fd28 	bl	8006574 <HAL_GPIO_WritePin>
 8004b24:	4b1e      	ldr	r3, [pc, #120]	; (8004ba0 <runCmdTask+0x328>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <runCmdTask+0x330>)
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	4413      	add	r3, r2
 8004b2e:	330c      	adds	r3, #12
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf14      	ite	ne
 8004b36:	2301      	movne	r3, #1
 8004b38:	2300      	moveq	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2110      	movs	r1, #16
 8004b40:	481e      	ldr	r0, [pc, #120]	; (8004bbc <runCmdTask+0x344>)
 8004b42:	f001 fd17 	bl	8006574 <HAL_GPIO_WritePin>
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <runCmdTask+0x328>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <runCmdTask+0x330>)
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	4413      	add	r3, r2
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <runCmdTask+0x348>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34
 8004b58:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <runCmdTask+0x328>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <runCmdTask+0x330>)
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	4413      	add	r3, r2
 8004b62:	3302      	adds	r3, #2
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	4b16      	ldr	r3, [pc, #88]	; (8004bc0 <runCmdTask+0x348>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004b6c:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <runCmdTask+0x34c>)
 8004b6e:	781a      	ldrb	r2, [r3, #0]
 8004b70:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <runCmdTask+0x34c>)
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d12f      	bne.n	8004bd8 <runCmdTask+0x360>
      {
        __CLEAR_CURCMD(curCmd);
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <runCmdTask+0x328>)
 8004b7a:	2264      	movs	r2, #100	; 0x64
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <runCmdTask+0x328>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004b84:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <runCmdTask+0x350>)
 8004b86:	210f      	movs	r1, #15
 8004b88:	4810      	ldr	r0, [pc, #64]	; (8004bcc <runCmdTask+0x354>)
 8004b8a:	f009 f9a3 	bl	800ded4 <sniprintf>
 8004b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b92:	2206      	movs	r2, #6
 8004b94:	490e      	ldr	r1, [pc, #56]	; (8004bd0 <runCmdTask+0x358>)
 8004b96:	480f      	ldr	r0, [pc, #60]	; (8004bd4 <runCmdTask+0x35c>)
 8004b98:	f005 f81f 	bl	8009bda <HAL_UART_Transmit>
 8004b9c:	e036      	b.n	8004c0c <runCmdTask+0x394>
 8004b9e:	bf00      	nop
 8004ba0:	200004bc 	.word	0x200004bc
 8004ba4:	20000134 	.word	0x20000134
 8004ba8:	20000004 	.word	0x20000004
 8004bac:	43848000 	.word	0x43848000
 8004bb0:	428c0000 	.word	0x428c0000
 8004bb4:	200002a0 	.word	0x200002a0
 8004bb8:	200004d4 	.word	0x200004d4
 8004bbc:	40020000 	.word	0x40020000
 8004bc0:	200003c0 	.word	0x200003c0
 8004bc4:	20000488 	.word	0x20000488
 8004bc8:	0800e8d4 	.word	0x0800e8d4
 8004bcc:	200004c0 	.word	0x200004c0
 8004bd0:	0800e8dc 	.word	0x0800e8dc
 8004bd4:	20000408 	.word	0x20000408
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004bd8:	4ba0      	ldr	r3, [pc, #640]	; (8004e5c <runCmdTask+0x5e4>)
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	4aa0      	ldr	r2, [pc, #640]	; (8004e60 <runCmdTask+0x5e8>)
 8004bde:	499f      	ldr	r1, [pc, #636]	; (8004e5c <runCmdTask+0x5e4>)
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b9c      	ldr	r3, [pc, #624]	; (8004e5c <runCmdTask+0x5e4>)
 8004bea:	785b      	ldrb	r3, [r3, #1]
 8004bec:	3301      	adds	r3, #1
 8004bee:	4a9b      	ldr	r2, [pc, #620]	; (8004e5c <runCmdTask+0x5e4>)
 8004bf0:	7892      	ldrb	r2, [r2, #2]
 8004bf2:	fb93 f1f2 	sdiv	r1, r3, r2
 8004bf6:	fb01 f202 	mul.w	r2, r1, r2
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	4b97      	ldr	r3, [pc, #604]	; (8004e5c <runCmdTask+0x5e4>)
 8004c00:	705a      	strb	r2, [r3, #1]
 8004c02:	4a98      	ldr	r2, [pc, #608]	; (8004e64 <runCmdTask+0x5ec>)
 8004c04:	210f      	movs	r1, #15
 8004c06:	4898      	ldr	r0, [pc, #608]	; (8004e68 <runCmdTask+0x5f0>)
 8004c08:	f009 f964 	bl	800ded4 <sniprintf>
      __PEND_CURCMD(curCmd);
 8004c0c:	4b94      	ldr	r3, [pc, #592]	; (8004e60 <runCmdTask+0x5e8>)
 8004c0e:	2263      	movs	r2, #99	; 0x63
 8004c10:	701a      	strb	r2, [r3, #0]
      break;
 8004c12:	e11e      	b.n	8004e52 <runCmdTask+0x5da>
    case 7: // FL
      curTask = TASK_FL;
 8004c14:	4b95      	ldr	r3, [pc, #596]	; (8004e6c <runCmdTask+0x5f4>)
 8004c16:	2202      	movs	r2, #2
 8004c18:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004c1a:	4b91      	ldr	r3, [pc, #580]	; (8004e60 <runCmdTask+0x5e8>)
 8004c1c:	2263      	movs	r2, #99	; 0x63
 8004c1e:	701a      	strb	r2, [r3, #0]
      break;
 8004c20:	e117      	b.n	8004e52 <runCmdTask+0x5da>
    case 8: // FR
      curTask = TASK_FR;
 8004c22:	4b92      	ldr	r3, [pc, #584]	; (8004e6c <runCmdTask+0x5f4>)
 8004c24:	2203      	movs	r2, #3
 8004c26:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004c28:	4b8d      	ldr	r3, [pc, #564]	; (8004e60 <runCmdTask+0x5e8>)
 8004c2a:	2263      	movs	r2, #99	; 0x63
 8004c2c:	701a      	strb	r2, [r3, #0]
      break;
 8004c2e:	e110      	b.n	8004e52 <runCmdTask+0x5da>
    case 9: // BL
      curTask = TASK_BL;
 8004c30:	4b8e      	ldr	r3, [pc, #568]	; (8004e6c <runCmdTask+0x5f4>)
 8004c32:	2204      	movs	r2, #4
 8004c34:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004c36:	4b8a      	ldr	r3, [pc, #552]	; (8004e60 <runCmdTask+0x5e8>)
 8004c38:	2263      	movs	r2, #99	; 0x63
 8004c3a:	701a      	strb	r2, [r3, #0]
      break;
 8004c3c:	e109      	b.n	8004e52 <runCmdTask+0x5da>
    case 10: // BR
      curTask = TASK_BR;
 8004c3e:	4b8b      	ldr	r3, [pc, #556]	; (8004e6c <runCmdTask+0x5f4>)
 8004c40:	2205      	movs	r2, #5
 8004c42:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004c44:	4b86      	ldr	r3, [pc, #536]	; (8004e60 <runCmdTask+0x5e8>)
 8004c46:	2263      	movs	r2, #99	; 0x63
 8004c48:	701a      	strb	r2, [r3, #0]
      break;
 8004c4a:	e102      	b.n	8004e52 <runCmdTask+0x5da>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8004c4c:	4b84      	ldr	r3, [pc, #528]	; (8004e60 <runCmdTask+0x5e8>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b0b      	cmp	r3, #11
 8004c52:	d005      	beq.n	8004c60 <runCmdTask+0x3e8>
 8004c54:	4b86      	ldr	r3, [pc, #536]	; (8004e70 <runCmdTask+0x5f8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f240 1209 	movw	r2, #265	; 0x109
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c5e:	e003      	b.n	8004c68 <runCmdTask+0x3f0>
 8004c60:	4b83      	ldr	r3, [pc, #524]	; (8004e70 <runCmdTask+0x5f8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2246      	movs	r2, #70	; 0x46
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
 8004c68:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004c6c:	f000 fd82 	bl	8005774 <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 8004c70:	4b7b      	ldr	r3, [pc, #492]	; (8004e60 <runCmdTask+0x5e8>)
 8004c72:	2264      	movs	r2, #100	; 0x64
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	4b7a      	ldr	r3, [pc, #488]	; (8004e60 <runCmdTask+0x5e8>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8004c7c:	4a7d      	ldr	r2, [pc, #500]	; (8004e74 <runCmdTask+0x5fc>)
 8004c7e:	210f      	movs	r1, #15
 8004c80:	4879      	ldr	r0, [pc, #484]	; (8004e68 <runCmdTask+0x5f0>)
 8004c82:	f009 f927 	bl	800ded4 <sniprintf>
 8004c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c8a:	2206      	movs	r2, #6
 8004c8c:	497a      	ldr	r1, [pc, #488]	; (8004e78 <runCmdTask+0x600>)
 8004c8e:	487b      	ldr	r0, [pc, #492]	; (8004e7c <runCmdTask+0x604>)
 8004c90:	f004 ffa3 	bl	8009bda <HAL_UART_Transmit>
      break;
 8004c94:	e0dd      	b.n	8004e52 <runCmdTask+0x5da>
    case 13: // debug IR sensor
      // curTask = TASK_ADC;
      break;
    case 14: // DT move until specified distance from obstacle
      curTask = TASK_MOVE_OBS;
 8004c96:	4b75      	ldr	r3, [pc, #468]	; (8004e6c <runCmdTask+0x5f4>)
 8004c98:	2209      	movs	r2, #9
 8004c9a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004c9c:	4b70      	ldr	r3, [pc, #448]	; (8004e60 <runCmdTask+0x5e8>)
 8004c9e:	2263      	movs	r2, #99	; 0x63
 8004ca0:	701a      	strb	r2, [r3, #0]
      break;
 8004ca2:	e0d6      	b.n	8004e52 <runCmdTask+0x5da>

      // FIXME:find the motor duty combination to balance between speed and accuracy

    case 88: // FAxxx, forward rotate left by xxx degree
    case 89: // FCxxx, forward rotate right by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 8004ca4:	4b6e      	ldr	r3, [pc, #440]	; (8004e60 <runCmdTask+0x5e8>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b58      	cmp	r3, #88	; 0x58
 8004caa:	d005      	beq.n	8004cb8 <runCmdTask+0x440>
 8004cac:	4b70      	ldr	r3, [pc, #448]	; (8004e70 <runCmdTask+0x5f8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f240 1209 	movw	r2, #265	; 0x109
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
 8004cb6:	e003      	b.n	8004cc0 <runCmdTask+0x448>
 8004cb8:	4b6d      	ldr	r3, [pc, #436]	; (8004e70 <runCmdTask+0x5f8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2246      	movs	r2, #70	; 0x46
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8004cc0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004cc4:	f000 fd56 	bl	8005774 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2104      	movs	r1, #4
 8004ccc:	486c      	ldr	r0, [pc, #432]	; (8004e80 <runCmdTask+0x608>)
 8004cce:	f001 fc51 	bl	8006574 <HAL_GPIO_WritePin>
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	2108      	movs	r1, #8
 8004cd6:	486a      	ldr	r0, [pc, #424]	; (8004e80 <runCmdTask+0x608>)
 8004cd8:	f001 fc4c 	bl	8006574 <HAL_GPIO_WritePin>
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2120      	movs	r1, #32
 8004ce0:	4867      	ldr	r0, [pc, #412]	; (8004e80 <runCmdTask+0x608>)
 8004ce2:	f001 fc47 	bl	8006574 <HAL_GPIO_WritePin>
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2110      	movs	r1, #16
 8004cea:	4865      	ldr	r0, [pc, #404]	; (8004e80 <runCmdTask+0x608>)
 8004cec:	f001 fc42 	bl	8006574 <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 8004cf0:	4b5b      	ldr	r3, [pc, #364]	; (8004e60 <runCmdTask+0x5e8>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b58      	cmp	r3, #88	; 0x58
 8004cf6:	d113      	bne.n	8004d20 <runCmdTask+0x4a8>
      {
        targetAngle = curCmd.val;
 8004cf8:	4b59      	ldr	r3, [pc, #356]	; (8004e60 <runCmdTask+0x5e8>)
 8004cfa:	885b      	ldrh	r3, [r3, #2]
 8004cfc:	ee07 3a90 	vmov	s15, r3
 8004d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d04:	4b5f      	ldr	r3, [pc, #380]	; (8004e84 <runCmdTask+0x60c>)
 8004d06:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8004d0a:	4b5f      	ldr	r3, [pc, #380]	; (8004e88 <runCmdTask+0x610>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f240 5235 	movw	r2, #1333	; 0x535
 8004d12:	635a      	str	r2, [r3, #52]	; 0x34
 8004d14:	4b5c      	ldr	r3, [pc, #368]	; (8004e88 <runCmdTask+0x610>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004d1e:	e013      	b.n	8004d48 <runCmdTask+0x4d0>
      }
      else
      {
        targetAngle = -curCmd.val;
 8004d20:	4b4f      	ldr	r3, [pc, #316]	; (8004e60 <runCmdTask+0x5e8>)
 8004d22:	885b      	ldrh	r3, [r3, #2]
 8004d24:	425b      	negs	r3, r3
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d2e:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <runCmdTask+0x60c>)
 8004d30:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8004d34:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <runCmdTask+0x610>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d3e:	4b52      	ldr	r3, [pc, #328]	; (8004e88 <runCmdTask+0x610>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f240 5235 	movw	r2, #1333	; 0x535
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8004d48:	4b45      	ldr	r3, [pc, #276]	; (8004e60 <runCmdTask+0x5e8>)
 8004d4a:	2263      	movs	r2, #99	; 0x63
 8004d4c:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8004d4e:	484d      	ldr	r0, [pc, #308]	; (8004e84 <runCmdTask+0x60c>)
 8004d50:	f7fe f89e 	bl	8002e90 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 8004d54:	4b42      	ldr	r3, [pc, #264]	; (8004e60 <runCmdTask+0x5e8>)
 8004d56:	2264      	movs	r2, #100	; 0x64
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <runCmdTask+0x5e8>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8004d60:	4a44      	ldr	r2, [pc, #272]	; (8004e74 <runCmdTask+0x5fc>)
 8004d62:	210f      	movs	r1, #15
 8004d64:	4840      	ldr	r0, [pc, #256]	; (8004e68 <runCmdTask+0x5f0>)
 8004d66:	f009 f8b5 	bl	800ded4 <sniprintf>
 8004d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d6e:	2206      	movs	r2, #6
 8004d70:	4941      	ldr	r1, [pc, #260]	; (8004e78 <runCmdTask+0x600>)
 8004d72:	4842      	ldr	r0, [pc, #264]	; (8004e7c <runCmdTask+0x604>)
 8004d74:	f004 ff31 	bl	8009bda <HAL_UART_Transmit>
      break;
 8004d78:	e06b      	b.n	8004e52 <runCmdTask+0x5da>
    case 90: // BAxxx, backward rotate right by xxx degree
    case 91: // BCxxx, backward rotate left by xxx degree

      // To offset the stm and robot center difference:

      __SET_SERVO_TURN_MAX(&htim1, (int)(!(curCmd.index - 90)));
 8004d7a:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <runCmdTask+0x5e8>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b5a      	cmp	r3, #90	; 0x5a
 8004d80:	d105      	bne.n	8004d8e <runCmdTask+0x516>
 8004d82:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <runCmdTask+0x5f8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f240 1209 	movw	r2, #265	; 0x109
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40
 8004d8c:	e003      	b.n	8004d96 <runCmdTask+0x51e>
 8004d8e:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <runCmdTask+0x5f8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2246      	movs	r2, #70	; 0x46
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
 8004d96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004d9a:	f000 fceb 	bl	8005774 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2104      	movs	r1, #4
 8004da2:	4837      	ldr	r0, [pc, #220]	; (8004e80 <runCmdTask+0x608>)
 8004da4:	f001 fbe6 	bl	8006574 <HAL_GPIO_WritePin>
 8004da8:	2200      	movs	r2, #0
 8004daa:	2108      	movs	r1, #8
 8004dac:	4834      	ldr	r0, [pc, #208]	; (8004e80 <runCmdTask+0x608>)
 8004dae:	f001 fbe1 	bl	8006574 <HAL_GPIO_WritePin>
 8004db2:	2201      	movs	r2, #1
 8004db4:	2120      	movs	r1, #32
 8004db6:	4832      	ldr	r0, [pc, #200]	; (8004e80 <runCmdTask+0x608>)
 8004db8:	f001 fbdc 	bl	8006574 <HAL_GPIO_WritePin>
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2110      	movs	r1, #16
 8004dc0:	482f      	ldr	r0, [pc, #188]	; (8004e80 <runCmdTask+0x608>)
 8004dc2:	f001 fbd7 	bl	8006574 <HAL_GPIO_WritePin>
      if (curCmd.index == 90)
 8004dc6:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <runCmdTask+0x5e8>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b5a      	cmp	r3, #90	; 0x5a
 8004dcc:	d113      	bne.n	8004df6 <runCmdTask+0x57e>
      {

        targetAngle = curCmd.val;
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <runCmdTask+0x5e8>)
 8004dd0:	885b      	ldrh	r3, [r3, #2]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	4b2a      	ldr	r3, [pc, #168]	; (8004e84 <runCmdTask+0x60c>)
 8004ddc:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8004de0:	4b29      	ldr	r3, [pc, #164]	; (8004e88 <runCmdTask+0x610>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004de8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dea:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <runCmdTask+0x610>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f240 5235 	movw	r2, #1333	; 0x535
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
 8004df4:	e013      	b.n	8004e1e <runCmdTask+0x5a6>
      }
      else
      {
        targetAngle = -curCmd.val;
 8004df6:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <runCmdTask+0x5e8>)
 8004df8:	885b      	ldrh	r3, [r3, #2]
 8004dfa:	425b      	negs	r3, r3
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <runCmdTask+0x60c>)
 8004e06:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8004e0a:	4b1f      	ldr	r3, [pc, #124]	; (8004e88 <runCmdTask+0x610>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f240 5235 	movw	r2, #1333	; 0x535
 8004e12:	635a      	str	r2, [r3, #52]	; 0x34
 8004e14:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <runCmdTask+0x610>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <runCmdTask+0x5e8>)
 8004e20:	2263      	movs	r2, #99	; 0x63
 8004e22:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8004e24:	4817      	ldr	r0, [pc, #92]	; (8004e84 <runCmdTask+0x60c>)
 8004e26:	f7fe f833 	bl	8002e90 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <runCmdTask+0x5e8>)
 8004e2c:	2264      	movs	r2, #100	; 0x64
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <runCmdTask+0x5e8>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8004e36:	4a0f      	ldr	r2, [pc, #60]	; (8004e74 <runCmdTask+0x5fc>)
 8004e38:	210f      	movs	r1, #15
 8004e3a:	480b      	ldr	r0, [pc, #44]	; (8004e68 <runCmdTask+0x5f0>)
 8004e3c:	f009 f84a 	bl	800ded4 <sniprintf>
 8004e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e44:	2206      	movs	r2, #6
 8004e46:	490c      	ldr	r1, [pc, #48]	; (8004e78 <runCmdTask+0x600>)
 8004e48:	480c      	ldr	r0, [pc, #48]	; (8004e7c <runCmdTask+0x604>)
 8004e4a:	f004 fec6 	bl	8009bda <HAL_UART_Transmit>
      break;
 8004e4e:	e000      	b.n	8004e52 <runCmdTask+0x5da>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8004e50:	bf00      	nop
    }
    osDelay(1);
 8004e52:	2001      	movs	r0, #1
 8004e54:	f006 f80c 	bl	800ae70 <osDelay>
    switch (curCmd.index)
 8004e58:	e512      	b.n	8004880 <runCmdTask+0x8>
 8004e5a:	bf00      	nop
 8004e5c:	20000488 	.word	0x20000488
 8004e60:	200004bc 	.word	0x200004bc
 8004e64:	0800e8e4 	.word	0x0800e8e4
 8004e68:	200004c0 	.word	0x200004c0
 8004e6c:	20000134 	.word	0x20000134
 8004e70:	200002a0 	.word	0x200002a0
 8004e74:	0800e8d4 	.word	0x0800e8d4
 8004e78:	0800e8dc 	.word	0x0800e8dc
 8004e7c:	20000408 	.word	0x20000408
 8004e80:	40020000 	.word	0x40020000
 8004e84:	200004d4 	.word	0x200004d4
 8004e88:	200003c0 	.word	0x200003c0

08004e8c <runMoveDistObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS)
 8004e94:	4b2d      	ldr	r3, [pc, #180]	; (8004f4c <runMoveDistObsTask+0xc0>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b09      	cmp	r3, #9
 8004e9a:	d004      	beq.n	8004ea6 <runMoveDistObsTask+0x1a>
      osDelay(1000);
 8004e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ea0:	f005 ffe6 	bl	800ae70 <osDelay>
 8004ea4:	e7f6      	b.n	8004e94 <runMoveDistObsTask+0x8>
    else
    {
      targetDist = (float)curCmd.val;
 8004ea6:	4b2a      	ldr	r3, [pc, #168]	; (8004f50 <runMoveDistObsTask+0xc4>)
 8004ea8:	885b      	ldrh	r3, [r3, #2]
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	4b28      	ldr	r3, [pc, #160]	; (8004f54 <runMoveDistObsTask+0xc8>)
 8004eb4:	edc3 7a00 	vstr	s15, [r3]
      RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8004eb8:	2102      	movs	r1, #2
 8004eba:	4826      	ldr	r0, [pc, #152]	; (8004f54 <runMoveDistObsTask+0xc8>)
 8004ebc:	f7fe f894 	bl	8002fe8 <RobotMoveDistObstacle>

      __ON_TASK_END(&htim8, prevTask, curTask);
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <runMoveDistObsTask+0xcc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec8:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <runMoveDistObsTask+0xcc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
 8004ed0:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <runMoveDistObsTask+0xc0>)
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <runMoveDistObsTask+0xd0>)
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	4b1c      	ldr	r3, [pc, #112]	; (8004f4c <runMoveDistObsTask+0xc0>)
 8004eda:	220b      	movs	r2, #11
 8004edc:	701a      	strb	r2, [r3, #0]
      clickOnce = 0;
 8004ede:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <runMoveDistObsTask+0xd4>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004ee4:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <runMoveDistObsTask+0xd8>)
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <runMoveDistObsTask+0xd8>)
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d112      	bne.n	8004f16 <runMoveDistObsTask+0x8a>
      {
        __CLEAR_CURCMD(curCmd);
 8004ef0:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <runMoveDistObsTask+0xc4>)
 8004ef2:	2264      	movs	r2, #100	; 0x64
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <runMoveDistObsTask+0xc4>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004efc:	4a1a      	ldr	r2, [pc, #104]	; (8004f68 <runMoveDistObsTask+0xdc>)
 8004efe:	210f      	movs	r1, #15
 8004f00:	481a      	ldr	r0, [pc, #104]	; (8004f6c <runMoveDistObsTask+0xe0>)
 8004f02:	f008 ffe7 	bl	800ded4 <sniprintf>
 8004f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f0a:	2206      	movs	r2, #6
 8004f0c:	4918      	ldr	r1, [pc, #96]	; (8004f70 <runMoveDistObsTask+0xe4>)
 8004f0e:	4819      	ldr	r0, [pc, #100]	; (8004f74 <runMoveDistObsTask+0xe8>)
 8004f10:	f004 fe63 	bl	8009bda <HAL_UART_Transmit>
 8004f14:	e7be      	b.n	8004e94 <runMoveDistObsTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004f16:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <runMoveDistObsTask+0xd8>)
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	4a0d      	ldr	r2, [pc, #52]	; (8004f50 <runMoveDistObsTask+0xc4>)
 8004f1c:	4911      	ldr	r1, [pc, #68]	; (8004f64 <runMoveDistObsTask+0xd8>)
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <runMoveDistObsTask+0xd8>)
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	4a0d      	ldr	r2, [pc, #52]	; (8004f64 <runMoveDistObsTask+0xd8>)
 8004f2e:	7892      	ldrb	r2, [r2, #2]
 8004f30:	fb93 f1f2 	sdiv	r1, r3, r2
 8004f34:	fb01 f202 	mul.w	r2, r1, r2
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <runMoveDistObsTask+0xd8>)
 8004f3e:	705a      	strb	r2, [r3, #1]
 8004f40:	4a0d      	ldr	r2, [pc, #52]	; (8004f78 <runMoveDistObsTask+0xec>)
 8004f42:	210f      	movs	r1, #15
 8004f44:	4809      	ldr	r0, [pc, #36]	; (8004f6c <runMoveDistObsTask+0xe0>)
 8004f46:	f008 ffc5 	bl	800ded4 <sniprintf>
    if (curTask != TASK_MOVE_OBS)
 8004f4a:	e7a3      	b.n	8004e94 <runMoveDistObsTask+0x8>
 8004f4c:	20000134 	.word	0x20000134
 8004f50:	200004bc 	.word	0x200004bc
 8004f54:	200004e8 	.word	0x200004e8
 8004f58:	200003c0 	.word	0x200003c0
 8004f5c:	20000135 	.word	0x20000135
 8004f60:	20000548 	.word	0x20000548
 8004f64:	20000488 	.word	0x20000488
 8004f68:	0800e8d4 	.word	0x0800e8d4
 8004f6c:	200004c0 	.word	0x200004c0
 8004f70:	0800e8dc 	.word	0x0800e8dc
 8004f74:	20000408 	.word	0x20000408
 8004f78:	0800e8e4 	.word	0x0800e8e4

08004f7c <runNavArdObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runNavArdObsTask */
void runNavArdObsTask(void *argument)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runNavArdObsTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8004f84:	2001      	movs	r0, #1
 8004f86:	f005 ff73 	bl	800ae70 <osDelay>
 8004f8a:	e7fb      	b.n	8004f84 <runNavArdObsTask+0x8>

08004f8c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a04      	ldr	r2, [pc, #16]	; (8004fac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8004f9e:	f000 fbc9 	bl	8005734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40000800 	.word	0x40000800

08004fb0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fb4:	b672      	cpsid	i
}
 8004fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fb8:	e7fe      	b.n	8004fb8 <Error_Handler+0x8>
	...

08004fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	4b12      	ldr	r3, [pc, #72]	; (8005010 <HAL_MspInit+0x54>)
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <HAL_MspInit+0x54>)
 8004fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <HAL_MspInit+0x54>)
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <HAL_MspInit+0x54>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <HAL_MspInit+0x54>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6413      	str	r3, [r2, #64]	; 0x40
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_MspInit+0x54>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	210f      	movs	r1, #15
 8004ffe:	f06f 0001 	mvn.w	r0, #1
 8005002:	f001 f85f 	bl	80060c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40023800 	.word	0x40023800

08005014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08c      	sub	sp, #48	; 0x30
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800501c:	f107 031c 	add.w	r3, r7, #28
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	605a      	str	r2, [r3, #4]
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a2e      	ldr	r2, [pc, #184]	; (80050ec <HAL_ADC_MspInit+0xd8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d128      	bne.n	8005088 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	4a2c      	ldr	r2, [pc, #176]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005044:	6453      	str	r3, [r2, #68]	; 0x44
 8005046:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 8005048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	4a25      	ldr	r2, [pc, #148]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	6313      	str	r3, [r2, #48]	; 0x30
 8005062:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800506e:	2302      	movs	r3, #2
 8005070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005072:	2303      	movs	r3, #3
 8005074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005076:	2300      	movs	r3, #0
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800507a:	f107 031c 	add.w	r3, r7, #28
 800507e:	4619      	mov	r1, r3
 8005080:	481c      	ldr	r0, [pc, #112]	; (80050f4 <HAL_ADC_MspInit+0xe0>)
 8005082:	f001 f8db 	bl	800623c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005086:	e02c      	b.n	80050e2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <HAL_ADC_MspInit+0xe4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d127      	bne.n	80050e2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 800509c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050a0:	6453      	str	r3, [r2, #68]	; 0x44
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 80050b8:	f043 0304 	orr.w	r3, r3, #4
 80050bc:	6313      	str	r3, [r2, #48]	; 0x30
 80050be:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_ADC_MspInit+0xdc>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050ca:	2304      	movs	r3, #4
 80050cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ce:	2303      	movs	r3, #3
 80050d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050d6:	f107 031c 	add.w	r3, r7, #28
 80050da:	4619      	mov	r1, r3
 80050dc:	4805      	ldr	r0, [pc, #20]	; (80050f4 <HAL_ADC_MspInit+0xe0>)
 80050de:	f001 f8ad 	bl	800623c <HAL_GPIO_Init>
}
 80050e2:	bf00      	nop
 80050e4:	3730      	adds	r7, #48	; 0x30
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40012000 	.word	0x40012000
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40020800 	.word	0x40020800
 80050f8:	40012100 	.word	0x40012100

080050fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	; 0x28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005104:	f107 0314 	add.w	r3, r7, #20
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <HAL_I2C_MspInit+0x84>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d12c      	bne.n	8005178 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	4b18      	ldr	r3, [pc, #96]	; (8005184 <HAL_I2C_MspInit+0x88>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	4a17      	ldr	r2, [pc, #92]	; (8005184 <HAL_I2C_MspInit+0x88>)
 8005128:	f043 0302 	orr.w	r3, r3, #2
 800512c:	6313      	str	r3, [r2, #48]	; 0x30
 800512e:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_I2C_MspInit+0x88>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800513a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800513e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005140:	2312      	movs	r3, #18
 8005142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005148:	2303      	movs	r3, #3
 800514a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800514c:	2304      	movs	r3, #4
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	4619      	mov	r1, r3
 8005156:	480c      	ldr	r0, [pc, #48]	; (8005188 <HAL_I2C_MspInit+0x8c>)
 8005158:	f001 f870 	bl	800623c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	4b08      	ldr	r3, [pc, #32]	; (8005184 <HAL_I2C_MspInit+0x88>)
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	4a07      	ldr	r2, [pc, #28]	; (8005184 <HAL_I2C_MspInit+0x88>)
 8005166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800516a:	6413      	str	r3, [r2, #64]	; 0x40
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_I2C_MspInit+0x88>)
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005178:	bf00      	nop
 800517a:	3728      	adds	r7, #40	; 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40005400 	.word	0x40005400
 8005184:	40023800 	.word	0x40023800
 8005188:	40020400 	.word	0x40020400

0800518c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08e      	sub	sp, #56	; 0x38
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	60da      	str	r2, [r3, #12]
 80051a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a4e      	ldr	r2, [pc, #312]	; (80052e4 <HAL_TIM_Base_MspInit+0x158>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d116      	bne.n	80051dc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	4b4d      	ldr	r3, [pc, #308]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	4a4c      	ldr	r2, [pc, #304]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	6453      	str	r3, [r2, #68]	; 0x44
 80051be:	4b4a      	ldr	r3, [pc, #296]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80051ca:	2200      	movs	r2, #0
 80051cc:	2105      	movs	r1, #5
 80051ce:	201b      	movs	r0, #27
 80051d0:	f000 ff78 	bl	80060c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80051d4:	201b      	movs	r0, #27
 80051d6:	f000 ff91 	bl	80060fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80051da:	e07e      	b.n	80052da <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a42      	ldr	r2, [pc, #264]	; (80052ec <HAL_TIM_Base_MspInit+0x160>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d134      	bne.n	8005250 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	4b3f      	ldr	r3, [pc, #252]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	4a3e      	ldr	r2, [pc, #248]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	6413      	str	r3, [r2, #64]	; 0x40
 80051f6:	4b3c      	ldr	r3, [pc, #240]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	4a37      	ldr	r2, [pc, #220]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	6313      	str	r3, [r2, #48]	; 0x30
 8005212:	4b35      	ldr	r3, [pc, #212]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = US_Echo_Pin;
 800521e:	2320      	movs	r3, #32
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005222:	2302      	movs	r3, #2
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005226:	2300      	movs	r3, #0
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800522a:	2300      	movs	r3, #0
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800522e:	2302      	movs	r3, #2
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(US_Echo_GPIO_Port, &GPIO_InitStruct);
 8005232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005236:	4619      	mov	r1, r3
 8005238:	482d      	ldr	r0, [pc, #180]	; (80052f0 <HAL_TIM_Base_MspInit+0x164>)
 800523a:	f000 ffff 	bl	800623c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800523e:	2200      	movs	r2, #0
 8005240:	2105      	movs	r1, #5
 8005242:	201d      	movs	r0, #29
 8005244:	f000 ff3e 	bl	80060c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005248:	201d      	movs	r0, #29
 800524a:	f000 ff57 	bl	80060fc <HAL_NVIC_EnableIRQ>
}
 800524e:	e044      	b.n	80052da <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM6)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <HAL_TIM_Base_MspInit+0x168>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10e      	bne.n	8005278 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 8005264:	f043 0310 	orr.w	r3, r3, #16
 8005268:	6413      	str	r3, [r2, #64]	; 0x40
 800526a:	4b1f      	ldr	r3, [pc, #124]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
}
 8005276:	e030      	b.n	80052da <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM8)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <HAL_TIM_Base_MspInit+0x16c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d12b      	bne.n	80052da <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 800528c:	f043 0302 	orr.w	r3, r3, #2
 8005290:	6453      	str	r3, [r2, #68]	; 0x44
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 8005294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4b11      	ldr	r3, [pc, #68]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 80052a8:	f043 0304 	orr.w	r3, r3, #4
 80052ac:	6313      	str	r3, [r2, #48]	; 0x30
 80052ae:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <HAL_TIM_Base_MspInit+0x15c>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80052ba:	23c0      	movs	r3, #192	; 0xc0
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052be:	2302      	movs	r3, #2
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c6:	2300      	movs	r3, #0
 80052c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80052ca:	2303      	movs	r3, #3
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052d2:	4619      	mov	r1, r3
 80052d4:	4809      	ldr	r0, [pc, #36]	; (80052fc <HAL_TIM_Base_MspInit+0x170>)
 80052d6:	f000 ffb1 	bl	800623c <HAL_GPIO_Init>
}
 80052da:	bf00      	nop
 80052dc:	3738      	adds	r7, #56	; 0x38
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40020400 	.word	0x40020400
 80052f4:	40001000 	.word	0x40001000
 80052f8:	40010400 	.word	0x40010400
 80052fc:	40020800 	.word	0x40020800

08005300 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08a      	sub	sp, #40	; 0x28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005308:	f107 0314 	add.w	r3, r7, #20
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005320:	d14a      	bne.n	80053b8 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <HAL_TIM_Encoder_MspInit+0xc0>)
 800532c:	f043 0301 	orr.w	r3, r3, #1
 8005330:	6413      	str	r3, [r2, #64]	; 0x40
 8005332:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	4a1e      	ldr	r2, [pc, #120]	; (80053c0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6313      	str	r3, [r2, #48]	; 0x30
 800534e:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005364:	f043 0302 	orr.w	r3, r3, #2
 8005368:	6313      	str	r3, [r2, #48]	; 0x30
 800536a:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <HAL_TIM_Encoder_MspInit+0xc0>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537c:	2302      	movs	r3, #2
 800537e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005384:	2300      	movs	r3, #0
 8005386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005388:	2301      	movs	r3, #1
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538c:	f107 0314 	add.w	r3, r7, #20
 8005390:	4619      	mov	r1, r3
 8005392:	480c      	ldr	r0, [pc, #48]	; (80053c4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005394:	f000 ff52 	bl	800623c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005398:	2308      	movs	r3, #8
 800539a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539c:	2302      	movs	r3, #2
 800539e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a4:	2300      	movs	r3, #0
 80053a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80053a8:	2301      	movs	r3, #1
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ac:	f107 0314 	add.w	r3, r7, #20
 80053b0:	4619      	mov	r1, r3
 80053b2:	4805      	ldr	r0, [pc, #20]	; (80053c8 <HAL_TIM_Encoder_MspInit+0xc8>)
 80053b4:	f000 ff42 	bl	800623c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80053b8:	bf00      	nop
 80053ba:	3728      	adds	r7, #40	; 0x28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40020000 	.word	0x40020000
 80053c8:	40020400 	.word	0x40020400

080053cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d4:	f107 030c 	add.w	r3, r7, #12
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	609a      	str	r2, [r3, #8]
 80053e0:	60da      	str	r2, [r3, #12]
 80053e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a12      	ldr	r2, [pc, #72]	; (8005434 <HAL_TIM_MspPostInit+0x68>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d11e      	bne.n	800542c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80053ee:	2300      	movs	r3, #0
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	4b11      	ldr	r3, [pc, #68]	; (8005438 <HAL_TIM_MspPostInit+0x6c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	4a10      	ldr	r2, [pc, #64]	; (8005438 <HAL_TIM_MspPostInit+0x6c>)
 80053f8:	f043 0310 	orr.w	r3, r3, #16
 80053fc:	6313      	str	r3, [r2, #48]	; 0x30
 80053fe:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <HAL_TIM_MspPostInit+0x6c>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800540a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800540e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005410:	2302      	movs	r3, #2
 8005412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005414:	2300      	movs	r3, #0
 8005416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800541c:	2301      	movs	r3, #1
 800541e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005420:	f107 030c 	add.w	r3, r7, #12
 8005424:	4619      	mov	r1, r3
 8005426:	4805      	ldr	r0, [pc, #20]	; (800543c <HAL_TIM_MspPostInit+0x70>)
 8005428:	f000 ff08 	bl	800623c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800542c:	bf00      	nop
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40010000 	.word	0x40010000
 8005438:	40023800 	.word	0x40023800
 800543c:	40021000 	.word	0x40021000

08005440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005448:	f107 0314 	add.w	r3, r7, #20
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	609a      	str	r2, [r3, #8]
 8005454:	60da      	str	r2, [r3, #12]
 8005456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <HAL_UART_MspInit+0x94>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d134      	bne.n	80054cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HAL_UART_MspInit+0x98>)
 800546c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005470:	6413      	str	r3, [r2, #64]	; 0x40
 8005472:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	6313      	str	r3, [r2, #48]	; 0x30
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_UART_MspInit+0x98>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800549a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800549e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a8:	2303      	movs	r3, #3
 80054aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054ac:	2307      	movs	r3, #7
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	4619      	mov	r1, r3
 80054b6:	4809      	ldr	r0, [pc, #36]	; (80054dc <HAL_UART_MspInit+0x9c>)
 80054b8:	f000 fec0 	bl	800623c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80054bc:	2200      	movs	r2, #0
 80054be:	2105      	movs	r1, #5
 80054c0:	2027      	movs	r0, #39	; 0x27
 80054c2:	f000 fdff 	bl	80060c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80054c6:	2027      	movs	r0, #39	; 0x27
 80054c8:	f000 fe18 	bl	80060fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80054cc:	bf00      	nop
 80054ce:	3728      	adds	r7, #40	; 0x28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40004800 	.word	0x40004800
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40020800 	.word	0x40020800

080054e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08c      	sub	sp, #48	; 0x30
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80054f0:	2200      	movs	r2, #0
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	201e      	movs	r0, #30
 80054f6:	f000 fde5 	bl	80060c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80054fa:	201e      	movs	r0, #30
 80054fc:	f000 fdfe 	bl	80060fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <HAL_InitTick+0xa0>)
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_InitTick+0xa0>)
 800550a:	f043 0304 	orr.w	r3, r3, #4
 800550e:	6413      	str	r3, [r2, #64]	; 0x40
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <HAL_InitTick+0xa0>)
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800551c:	f107 0210 	add.w	r2, r7, #16
 8005520:	f107 0314 	add.w	r3, r7, #20
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f002 fc7e 	bl	8007e28 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800552c:	f002 fc54 	bl	8007dd8 <HAL_RCC_GetPCLK1Freq>
 8005530:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <HAL_InitTick+0xa4>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	0c9b      	lsrs	r3, r3, #18
 800553c:	3b01      	subs	r3, #1
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_InitTick+0xa8>)
 8005542:	4a12      	ldr	r2, [pc, #72]	; (800558c <HAL_InitTick+0xac>)
 8005544:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <HAL_InitTick+0xa8>)
 8005548:	f240 32e7 	movw	r2, #999	; 0x3e7
 800554c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800554e:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <HAL_InitTick+0xa8>)
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <HAL_InitTick+0xa8>)
 8005556:	2200      	movs	r2, #0
 8005558:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <HAL_InitTick+0xa8>)
 800555c:	2200      	movs	r2, #0
 800555e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <HAL_InitTick+0xa8>)
 8005562:	f002 fc93 	bl	8007e8c <HAL_TIM_Base_Init>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800556c:	4806      	ldr	r0, [pc, #24]	; (8005588 <HAL_InitTick+0xa8>)
 800556e:	f002 fd45 	bl	8007ffc <HAL_TIM_Base_Start_IT>
 8005572:	4603      	mov	r3, r0
 8005574:	e000      	b.n	8005578 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
}
 8005578:	4618      	mov	r0, r3
 800557a:	3730      	adds	r7, #48	; 0x30
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40023800 	.word	0x40023800
 8005584:	431bde83 	.word	0x431bde83
 8005588:	20000550 	.word	0x20000550
 800558c:	40000800 	.word	0x40000800

08005590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005594:	e7fe      	b.n	8005594 <NMI_Handler+0x4>

08005596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800559a:	e7fe      	b.n	800559a <HardFault_Handler+0x4>

0800559c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055a0:	e7fe      	b.n	80055a0 <MemManage_Handler+0x4>

080055a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055a2:	b480      	push	{r7}
 80055a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055a6:	e7fe      	b.n	80055a6 <BusFault_Handler+0x4>

080055a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055ac:	e7fe      	b.n	80055ac <UsageFault_Handler+0x4>

080055ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80055c0:	4802      	ldr	r0, [pc, #8]	; (80055cc <TIM1_CC_IRQHandler+0x10>)
 80055c2:	f003 fa11 	bl	80089e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	200002a0 	.word	0x200002a0

080055d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80055d4:	4802      	ldr	r0, [pc, #8]	; (80055e0 <TIM3_IRQHandler+0x10>)
 80055d6:	f003 fa07 	bl	80089e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000330 	.word	0x20000330

080055e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80055e8:	4802      	ldr	r0, [pc, #8]	; (80055f4 <TIM4_IRQHandler+0x10>)
 80055ea:	f003 f9fd 	bl	80089e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000550 	.word	0x20000550

080055f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80055fc:	4802      	ldr	r0, [pc, #8]	; (8005608 <USART3_IRQHandler+0x10>)
 80055fe:	f004 fbaf 	bl	8009d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005602:	bf00      	nop
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000408 	.word	0x20000408

0800560c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005614:	4a14      	ldr	r2, [pc, #80]	; (8005668 <_sbrk+0x5c>)
 8005616:	4b15      	ldr	r3, [pc, #84]	; (800566c <_sbrk+0x60>)
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005620:	4b13      	ldr	r3, [pc, #76]	; (8005670 <_sbrk+0x64>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <_sbrk+0x64>)
 800562a:	4a12      	ldr	r2, [pc, #72]	; (8005674 <_sbrk+0x68>)
 800562c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800562e:	4b10      	ldr	r3, [pc, #64]	; (8005670 <_sbrk+0x64>)
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4413      	add	r3, r2
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	429a      	cmp	r2, r3
 800563a:	d207      	bcs.n	800564c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800563c:	f008 fc86 	bl	800df4c <__errno>
 8005640:	4603      	mov	r3, r0
 8005642:	220c      	movs	r2, #12
 8005644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800564a:	e009      	b.n	8005660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800564c:	4b08      	ldr	r3, [pc, #32]	; (8005670 <_sbrk+0x64>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005652:	4b07      	ldr	r3, [pc, #28]	; (8005670 <_sbrk+0x64>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	4a05      	ldr	r2, [pc, #20]	; (8005670 <_sbrk+0x64>)
 800565c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20020000 	.word	0x20020000
 800566c:	00000400 	.word	0x00000400
 8005670:	20000598 	.word	0x20000598
 8005674:	20005438 	.word	0x20005438

08005678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <SystemInit+0x20>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	4a05      	ldr	r2, [pc, #20]	; (8005698 <SystemInit+0x20>)
 8005684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800568c:	bf00      	nop
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800569c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056a0:	480d      	ldr	r0, [pc, #52]	; (80056d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80056a2:	490e      	ldr	r1, [pc, #56]	; (80056dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80056a4:	4a0e      	ldr	r2, [pc, #56]	; (80056e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80056a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056a8:	e002      	b.n	80056b0 <LoopCopyDataInit>

080056aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056ae:	3304      	adds	r3, #4

080056b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056b4:	d3f9      	bcc.n	80056aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056b6:	4a0b      	ldr	r2, [pc, #44]	; (80056e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056b8:	4c0b      	ldr	r4, [pc, #44]	; (80056e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80056ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056bc:	e001      	b.n	80056c2 <LoopFillZerobss>

080056be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056c0:	3204      	adds	r2, #4

080056c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056c4:	d3fb      	bcc.n	80056be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056c6:	f7ff ffd7 	bl	8005678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056ca:	f008 fc45 	bl	800df58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ce:	f7fb fc13 	bl	8000ef8 <main>
  bx  lr    
 80056d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80056d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056dc:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80056e0:	0800f574 	.word	0x0800f574
  ldr r2, =_sbss
 80056e4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80056e8:	20005438 	.word	0x20005438

080056ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056ec:	e7fe      	b.n	80056ec <ADC_IRQHandler>
	...

080056f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056f4:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <HAL_Init+0x40>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0d      	ldr	r2, [pc, #52]	; (8005730 <HAL_Init+0x40>)
 80056fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_Init+0x40>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <HAL_Init+0x40>)
 8005706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800570a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <HAL_Init+0x40>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a07      	ldr	r2, [pc, #28]	; (8005730 <HAL_Init+0x40>)
 8005712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005718:	2003      	movs	r0, #3
 800571a:	f000 fcc8 	bl	80060ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800571e:	200f      	movs	r0, #15
 8005720:	f7ff fede 	bl	80054e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005724:	f7ff fc4a 	bl	8004fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40023c00 	.word	0x40023c00

08005734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005738:	4b06      	ldr	r3, [pc, #24]	; (8005754 <HAL_IncTick+0x20>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	4b06      	ldr	r3, [pc, #24]	; (8005758 <HAL_IncTick+0x24>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4413      	add	r3, r2
 8005744:	4a04      	ldr	r2, [pc, #16]	; (8005758 <HAL_IncTick+0x24>)
 8005746:	6013      	str	r3, [r2, #0]
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20000148 	.word	0x20000148
 8005758:	2000059c 	.word	0x2000059c

0800575c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  return uwTick;
 8005760:	4b03      	ldr	r3, [pc, #12]	; (8005770 <HAL_GetTick+0x14>)
 8005762:	681b      	ldr	r3, [r3, #0]
}
 8005764:	4618      	mov	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	2000059c 	.word	0x2000059c

08005774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800577c:	f7ff ffee 	bl	800575c <HAL_GetTick>
 8005780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578c:	d005      	beq.n	800579a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800578e:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <HAL_Delay+0x44>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800579a:	bf00      	nop
 800579c:	f7ff ffde 	bl	800575c <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d8f7      	bhi.n	800579c <HAL_Delay+0x28>
  {
  }
}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000148 	.word	0x20000148

080057bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e033      	b.n	800583a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff fc1a 	bl	8005014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d118      	bne.n	800582c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005802:	f023 0302 	bic.w	r3, r3, #2
 8005806:	f043 0202 	orr.w	r2, r3, #2
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 faa4 	bl	8005d5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
 800582a:	e001      	b.n	8005830 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_ADC_Start+0x1a>
 800585a:	2302      	movs	r3, #2
 800585c:	e0b2      	b.n	80059c4 <HAL_ADC_Start+0x180>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b01      	cmp	r3, #1
 8005872:	d018      	beq.n	80058a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005884:	4b52      	ldr	r3, [pc, #328]	; (80059d0 <HAL_ADC_Start+0x18c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a52      	ldr	r2, [pc, #328]	; (80059d4 <HAL_ADC_Start+0x190>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	0c9a      	lsrs	r2, r3, #18
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005898:	e002      	b.n	80058a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3b01      	subs	r3, #1
 800589e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f9      	bne.n	800589a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d17a      	bne.n	80059aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f2:	d106      	bne.n	8005902 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	f023 0206 	bic.w	r2, r3, #6
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	645a      	str	r2, [r3, #68]	; 0x44
 8005900:	e002      	b.n	8005908 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005910:	4b31      	ldr	r3, [pc, #196]	; (80059d8 <HAL_ADC_Start+0x194>)
 8005912:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800591c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2b00      	cmp	r3, #0
 8005928:	d12a      	bne.n	8005980 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2b      	ldr	r2, [pc, #172]	; (80059dc <HAL_ADC_Start+0x198>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d015      	beq.n	8005960 <HAL_ADC_Start+0x11c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a29      	ldr	r2, [pc, #164]	; (80059e0 <HAL_ADC_Start+0x19c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d105      	bne.n	800594a <HAL_ADC_Start+0x106>
 800593e:	4b26      	ldr	r3, [pc, #152]	; (80059d8 <HAL_ADC_Start+0x194>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a25      	ldr	r2, [pc, #148]	; (80059e4 <HAL_ADC_Start+0x1a0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d136      	bne.n	80059c2 <HAL_ADC_Start+0x17e>
 8005954:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <HAL_ADC_Start+0x194>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	d130      	bne.n	80059c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d129      	bne.n	80059c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	e020      	b.n	80059c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a15      	ldr	r2, [pc, #84]	; (80059dc <HAL_ADC_Start+0x198>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d11b      	bne.n	80059c2 <HAL_ADC_Start+0x17e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d114      	bne.n	80059c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	e00b      	b.n	80059c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f043 0210 	orr.w	r2, r3, #16
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ba:	f043 0201 	orr.w	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20000140 	.word	0x20000140
 80059d4:	431bde83 	.word	0x431bde83
 80059d8:	40012300 	.word	0x40012300
 80059dc:	40012000 	.word	0x40012000
 80059e0:	40012100 	.word	0x40012100
 80059e4:	40012200 	.word	0x40012200

080059e8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a04:	d113      	bne.n	8005a2e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a14:	d10b      	bne.n	8005a2e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e063      	b.n	8005af6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005a2e:	f7ff fe95 	bl	800575c <HAL_GetTick>
 8005a32:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a34:	e021      	b.n	8005a7a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a3c:	d01d      	beq.n	8005a7a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_ADC_PollForConversion+0x6c>
 8005a44:	f7ff fe8a 	bl	800575c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d212      	bcs.n	8005a7a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d00b      	beq.n	8005a7a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f043 0204 	orr.w	r2, r3, #4
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e03d      	b.n	8005af6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d1d6      	bne.n	8005a36 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0212 	mvn.w	r2, #18
 8005a90:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d123      	bne.n	8005af4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11f      	bne.n	8005af4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d006      	beq.n	8005ad0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d111      	bne.n	8005af4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	f043 0201 	orr.w	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x1c>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e105      	b.n	8005d40 <HAL_ADC_ConfigChannel+0x228>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b09      	cmp	r3, #9
 8005b42:	d925      	bls.n	8005b90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68d9      	ldr	r1, [r3, #12]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	4613      	mov	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	3b1e      	subs	r3, #30
 8005b5a:	2207      	movs	r2, #7
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	43da      	mvns	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	400a      	ands	r2, r1
 8005b68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68d9      	ldr	r1, [r3, #12]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	4403      	add	r3, r0
 8005b82:	3b1e      	subs	r3, #30
 8005b84:	409a      	lsls	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	60da      	str	r2, [r3, #12]
 8005b8e:	e022      	b.n	8005bd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6919      	ldr	r1, [r3, #16]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	4413      	add	r3, r2
 8005ba4:	2207      	movs	r2, #7
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43da      	mvns	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	400a      	ands	r2, r1
 8005bb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6919      	ldr	r1, [r3, #16]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	4403      	add	r3, r0
 8005bcc:	409a      	lsls	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b06      	cmp	r3, #6
 8005bdc:	d824      	bhi.n	8005c28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	3b05      	subs	r3, #5
 8005bf0:	221f      	movs	r2, #31
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43da      	mvns	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	400a      	ands	r2, r1
 8005bfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	3b05      	subs	r3, #5
 8005c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	635a      	str	r2, [r3, #52]	; 0x34
 8005c26:	e04c      	b.n	8005cc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b0c      	cmp	r3, #12
 8005c2e:	d824      	bhi.n	8005c7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	3b23      	subs	r3, #35	; 0x23
 8005c42:	221f      	movs	r2, #31
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43da      	mvns	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	400a      	ands	r2, r1
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	4618      	mov	r0, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	3b23      	subs	r3, #35	; 0x23
 8005c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30
 8005c78:	e023      	b.n	8005cc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	3b41      	subs	r3, #65	; 0x41
 8005c8c:	221f      	movs	r2, #31
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43da      	mvns	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	400a      	ands	r2, r1
 8005c9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	4618      	mov	r0, r3
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3b41      	subs	r3, #65	; 0x41
 8005cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cc2:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <HAL_ADC_ConfigChannel+0x234>)
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a21      	ldr	r2, [pc, #132]	; (8005d50 <HAL_ADC_ConfigChannel+0x238>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d109      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x1cc>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b12      	cmp	r3, #18
 8005cd6:	d105      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_ADC_ConfigChannel+0x238>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d123      	bne.n	8005d36 <HAL_ADC_ConfigChannel+0x21e>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d003      	beq.n	8005cfe <HAL_ADC_ConfigChannel+0x1e6>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b11      	cmp	r3, #17
 8005cfc:	d11b      	bne.n	8005d36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d111      	bne.n	8005d36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d12:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <HAL_ADC_ConfigChannel+0x23c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <HAL_ADC_ConfigChannel+0x240>)
 8005d18:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1c:	0c9a      	lsrs	r2, r3, #18
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005d28:	e002      	b.n	8005d30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f9      	bne.n	8005d2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40012300 	.word	0x40012300
 8005d50:	40012000 	.word	0x40012000
 8005d54:	20000140 	.word	0x20000140
 8005d58:	431bde83 	.word	0x431bde83

08005d5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d64:	4b79      	ldr	r3, [pc, #484]	; (8005f4c <ADC_Init+0x1f0>)
 8005d66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6859      	ldr	r1, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	021a      	lsls	r2, r3, #8
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005db4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6859      	ldr	r1, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6899      	ldr	r1, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	4a58      	ldr	r2, [pc, #352]	; (8005f50 <ADC_Init+0x1f4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d022      	beq.n	8005e3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6899      	ldr	r1, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6899      	ldr	r1, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]
 8005e38:	e00f      	b.n	8005e5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0202 	bic.w	r2, r2, #2
 8005e68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6899      	ldr	r1, [r3, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7e1b      	ldrb	r3, [r3, #24]
 8005e74:	005a      	lsls	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005ea6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6859      	ldr	r1, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	035a      	lsls	r2, r3, #13
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	605a      	str	r2, [r3, #4]
 8005ebe:	e007      	b.n	8005ed0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ece:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	051a      	lsls	r2, r3, #20
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6899      	ldr	r1, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f12:	025a      	lsls	r2, r3, #9
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6899      	ldr	r1, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	029a      	lsls	r2, r3, #10
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	609a      	str	r2, [r3, #8]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40012300 	.word	0x40012300
 8005f50:	0f000001 	.word	0x0f000001

08005f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <__NVIC_SetPriorityGrouping+0x44>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f70:	4013      	ands	r3, r2
 8005f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f86:	4a04      	ldr	r2, [pc, #16]	; (8005f98 <__NVIC_SetPriorityGrouping+0x44>)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	60d3      	str	r3, [r2, #12]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	e000ed00 	.word	0xe000ed00

08005f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fa0:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	f003 0307 	and.w	r3, r3, #7
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	e000ed00 	.word	0xe000ed00

08005fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	db0b      	blt.n	8005fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	f003 021f 	and.w	r2, r3, #31
 8005fd0:	4907      	ldr	r1, [pc, #28]	; (8005ff0 <__NVIC_EnableIRQ+0x38>)
 8005fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	2001      	movs	r0, #1
 8005fda:	fa00 f202 	lsl.w	r2, r0, r2
 8005fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	e000e100 	.word	0xe000e100

08005ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	6039      	str	r1, [r7, #0]
 8005ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006004:	2b00      	cmp	r3, #0
 8006006:	db0a      	blt.n	800601e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	b2da      	uxtb	r2, r3
 800600c:	490c      	ldr	r1, [pc, #48]	; (8006040 <__NVIC_SetPriority+0x4c>)
 800600e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006012:	0112      	lsls	r2, r2, #4
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	440b      	add	r3, r1
 8006018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800601c:	e00a      	b.n	8006034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	b2da      	uxtb	r2, r3
 8006022:	4908      	ldr	r1, [pc, #32]	; (8006044 <__NVIC_SetPriority+0x50>)
 8006024:	79fb      	ldrb	r3, [r7, #7]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	3b04      	subs	r3, #4
 800602c:	0112      	lsls	r2, r2, #4
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	440b      	add	r3, r1
 8006032:	761a      	strb	r2, [r3, #24]
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	e000e100 	.word	0xe000e100
 8006044:	e000ed00 	.word	0xe000ed00

08006048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006048:	b480      	push	{r7}
 800604a:	b089      	sub	sp, #36	; 0x24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f1c3 0307 	rsb	r3, r3, #7
 8006062:	2b04      	cmp	r3, #4
 8006064:	bf28      	it	cs
 8006066:	2304      	movcs	r3, #4
 8006068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3304      	adds	r3, #4
 800606e:	2b06      	cmp	r3, #6
 8006070:	d902      	bls.n	8006078 <NVIC_EncodePriority+0x30>
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3b03      	subs	r3, #3
 8006076:	e000      	b.n	800607a <NVIC_EncodePriority+0x32>
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800607c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43da      	mvns	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	401a      	ands	r2, r3
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	fa01 f303 	lsl.w	r3, r1, r3
 800609a:	43d9      	mvns	r1, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a0:	4313      	orrs	r3, r2
         );
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3724      	adds	r7, #36	; 0x24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ff4c 	bl	8005f54 <__NVIC_SetPriorityGrouping>
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	4603      	mov	r3, r0
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060d6:	f7ff ff61 	bl	8005f9c <__NVIC_GetPriorityGrouping>
 80060da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	6978      	ldr	r0, [r7, #20]
 80060e2:	f7ff ffb1 	bl	8006048 <NVIC_EncodePriority>
 80060e6:	4602      	mov	r2, r0
 80060e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff ff80 	bl	8005ff4 <__NVIC_SetPriority>
}
 80060f4:	bf00      	nop
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff ff54 	bl	8005fb8 <__NVIC_EnableIRQ>
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006124:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006126:	f7ff fb19 	bl	800575c <HAL_GetTick>
 800612a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d008      	beq.n	800614a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2280      	movs	r2, #128	; 0x80
 800613c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e052      	b.n	80061f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0216 	bic.w	r2, r2, #22
 8006158:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006168:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <HAL_DMA_Abort+0x62>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0208 	bic.w	r2, r2, #8
 8006188:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800619a:	e013      	b.n	80061c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800619c:	f7ff fade 	bl	800575c <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d90c      	bls.n	80061c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2203      	movs	r2, #3
 80061b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e015      	b.n	80061f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e4      	bne.n	800619c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d6:	223f      	movs	r2, #63	; 0x3f
 80061d8:	409a      	lsls	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d004      	beq.n	8006216 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2280      	movs	r2, #128	; 0x80
 8006210:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e00c      	b.n	8006230 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2205      	movs	r2, #5
 800621a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0201 	bic.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800623c:	b480      	push	{r7}
 800623e:	b089      	sub	sp, #36	; 0x24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	e16b      	b.n	8006530 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006258:	2201      	movs	r2, #1
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4013      	ands	r3, r2
 800626a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	429a      	cmp	r2, r3
 8006272:	f040 815a 	bne.w	800652a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b01      	cmp	r3, #1
 8006280:	d005      	beq.n	800628e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800628a:	2b02      	cmp	r3, #2
 800628c:	d130      	bne.n	80062f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	2203      	movs	r2, #3
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	4013      	ands	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062c4:	2201      	movs	r2, #1
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	091b      	lsrs	r3, r3, #4
 80062da:	f003 0201 	and.w	r2, r3, #1
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d017      	beq.n	800632c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	2203      	movs	r2, #3
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	43db      	mvns	r3, r3
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4013      	ands	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4313      	orrs	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d123      	bne.n	8006380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	08da      	lsrs	r2, r3, #3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3208      	adds	r2, #8
 8006340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	220f      	movs	r2, #15
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	43db      	mvns	r3, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4013      	ands	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	4313      	orrs	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	08da      	lsrs	r2, r3, #3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3208      	adds	r2, #8
 800637a:	69b9      	ldr	r1, [r7, #24]
 800637c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	2203      	movs	r2, #3
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	43db      	mvns	r3, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4013      	ands	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f003 0203 	and.w	r2, r3, #3
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 80b4 	beq.w	800652a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	4b60      	ldr	r3, [pc, #384]	; (8006548 <HAL_GPIO_Init+0x30c>)
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	4a5f      	ldr	r2, [pc, #380]	; (8006548 <HAL_GPIO_Init+0x30c>)
 80063cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063d0:	6453      	str	r3, [r2, #68]	; 0x44
 80063d2:	4b5d      	ldr	r3, [pc, #372]	; (8006548 <HAL_GPIO_Init+0x30c>)
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063de:	4a5b      	ldr	r2, [pc, #364]	; (800654c <HAL_GPIO_Init+0x310>)
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	089b      	lsrs	r3, r3, #2
 80063e4:	3302      	adds	r3, #2
 80063e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	220f      	movs	r2, #15
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	43db      	mvns	r3, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4013      	ands	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a52      	ldr	r2, [pc, #328]	; (8006550 <HAL_GPIO_Init+0x314>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d02b      	beq.n	8006462 <HAL_GPIO_Init+0x226>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a51      	ldr	r2, [pc, #324]	; (8006554 <HAL_GPIO_Init+0x318>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d025      	beq.n	800645e <HAL_GPIO_Init+0x222>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a50      	ldr	r2, [pc, #320]	; (8006558 <HAL_GPIO_Init+0x31c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01f      	beq.n	800645a <HAL_GPIO_Init+0x21e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a4f      	ldr	r2, [pc, #316]	; (800655c <HAL_GPIO_Init+0x320>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d019      	beq.n	8006456 <HAL_GPIO_Init+0x21a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a4e      	ldr	r2, [pc, #312]	; (8006560 <HAL_GPIO_Init+0x324>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_GPIO_Init+0x216>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a4d      	ldr	r2, [pc, #308]	; (8006564 <HAL_GPIO_Init+0x328>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00d      	beq.n	800644e <HAL_GPIO_Init+0x212>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a4c      	ldr	r2, [pc, #304]	; (8006568 <HAL_GPIO_Init+0x32c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d007      	beq.n	800644a <HAL_GPIO_Init+0x20e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a4b      	ldr	r2, [pc, #300]	; (800656c <HAL_GPIO_Init+0x330>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d101      	bne.n	8006446 <HAL_GPIO_Init+0x20a>
 8006442:	2307      	movs	r3, #7
 8006444:	e00e      	b.n	8006464 <HAL_GPIO_Init+0x228>
 8006446:	2308      	movs	r3, #8
 8006448:	e00c      	b.n	8006464 <HAL_GPIO_Init+0x228>
 800644a:	2306      	movs	r3, #6
 800644c:	e00a      	b.n	8006464 <HAL_GPIO_Init+0x228>
 800644e:	2305      	movs	r3, #5
 8006450:	e008      	b.n	8006464 <HAL_GPIO_Init+0x228>
 8006452:	2304      	movs	r3, #4
 8006454:	e006      	b.n	8006464 <HAL_GPIO_Init+0x228>
 8006456:	2303      	movs	r3, #3
 8006458:	e004      	b.n	8006464 <HAL_GPIO_Init+0x228>
 800645a:	2302      	movs	r3, #2
 800645c:	e002      	b.n	8006464 <HAL_GPIO_Init+0x228>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <HAL_GPIO_Init+0x228>
 8006462:	2300      	movs	r3, #0
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	f002 0203 	and.w	r2, r2, #3
 800646a:	0092      	lsls	r2, r2, #2
 800646c:	4093      	lsls	r3, r2
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	4313      	orrs	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006474:	4935      	ldr	r1, [pc, #212]	; (800654c <HAL_GPIO_Init+0x310>)
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	089b      	lsrs	r3, r3, #2
 800647a:	3302      	adds	r3, #2
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006482:	4b3b      	ldr	r3, [pc, #236]	; (8006570 <HAL_GPIO_Init+0x334>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	43db      	mvns	r3, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	4013      	ands	r3, r2
 8006490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064a6:	4a32      	ldr	r2, [pc, #200]	; (8006570 <HAL_GPIO_Init+0x334>)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064ac:	4b30      	ldr	r3, [pc, #192]	; (8006570 <HAL_GPIO_Init+0x334>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	43db      	mvns	r3, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4013      	ands	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064d0:	4a27      	ldr	r2, [pc, #156]	; (8006570 <HAL_GPIO_Init+0x334>)
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064d6:	4b26      	ldr	r3, [pc, #152]	; (8006570 <HAL_GPIO_Init+0x334>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	43db      	mvns	r3, r3
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	4013      	ands	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064fa:	4a1d      	ldr	r2, [pc, #116]	; (8006570 <HAL_GPIO_Init+0x334>)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006500:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <HAL_GPIO_Init+0x334>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	43db      	mvns	r3, r3
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	4013      	ands	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006524:	4a12      	ldr	r2, [pc, #72]	; (8006570 <HAL_GPIO_Init+0x334>)
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	3301      	adds	r3, #1
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	2b0f      	cmp	r3, #15
 8006534:	f67f ae90 	bls.w	8006258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	3724      	adds	r7, #36	; 0x24
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40023800 	.word	0x40023800
 800654c:	40013800 	.word	0x40013800
 8006550:	40020000 	.word	0x40020000
 8006554:	40020400 	.word	0x40020400
 8006558:	40020800 	.word	0x40020800
 800655c:	40020c00 	.word	0x40020c00
 8006560:	40021000 	.word	0x40021000
 8006564:	40021400 	.word	0x40021400
 8006568:	40021800 	.word	0x40021800
 800656c:	40021c00 	.word	0x40021c00
 8006570:	40013c00 	.word	0x40013c00

08006574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	807b      	strh	r3, [r7, #2]
 8006580:	4613      	mov	r3, r2
 8006582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006584:	787b      	ldrb	r3, [r7, #1]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800658a:	887a      	ldrh	r2, [r7, #2]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006590:	e003      	b.n	800659a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006592:	887b      	ldrh	r3, [r7, #2]
 8006594:	041a      	lsls	r2, r3, #16
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	619a      	str	r2, [r3, #24]
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
	...

080065a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e12b      	b.n	8006812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fe fd94 	bl	80050fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2224      	movs	r2, #36	; 0x24
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0201 	bic.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800660a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800660c:	f001 fbe4 	bl	8007dd8 <HAL_RCC_GetPCLK1Freq>
 8006610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	4a81      	ldr	r2, [pc, #516]	; (800681c <HAL_I2C_Init+0x274>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d807      	bhi.n	800662c <HAL_I2C_Init+0x84>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a80      	ldr	r2, [pc, #512]	; (8006820 <HAL_I2C_Init+0x278>)
 8006620:	4293      	cmp	r3, r2
 8006622:	bf94      	ite	ls
 8006624:	2301      	movls	r3, #1
 8006626:	2300      	movhi	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	e006      	b.n	800663a <HAL_I2C_Init+0x92>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a7d      	ldr	r2, [pc, #500]	; (8006824 <HAL_I2C_Init+0x27c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	bf94      	ite	ls
 8006634:	2301      	movls	r3, #1
 8006636:	2300      	movhi	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e0e7      	b.n	8006812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4a78      	ldr	r2, [pc, #480]	; (8006828 <HAL_I2C_Init+0x280>)
 8006646:	fba2 2303 	umull	r2, r3, r2, r3
 800664a:	0c9b      	lsrs	r3, r3, #18
 800664c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4a6a      	ldr	r2, [pc, #424]	; (800681c <HAL_I2C_Init+0x274>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d802      	bhi.n	800667c <HAL_I2C_Init+0xd4>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	3301      	adds	r3, #1
 800667a:	e009      	b.n	8006690 <HAL_I2C_Init+0xe8>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	4a69      	ldr	r2, [pc, #420]	; (800682c <HAL_I2C_Init+0x284>)
 8006688:	fba2 2303 	umull	r2, r3, r2, r3
 800668c:	099b      	lsrs	r3, r3, #6
 800668e:	3301      	adds	r3, #1
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	430b      	orrs	r3, r1
 8006696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	495c      	ldr	r1, [pc, #368]	; (800681c <HAL_I2C_Init+0x274>)
 80066ac:	428b      	cmp	r3, r1
 80066ae:	d819      	bhi.n	80066e4 <HAL_I2C_Init+0x13c>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1e59      	subs	r1, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80066be:	1c59      	adds	r1, r3, #1
 80066c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066c4:	400b      	ands	r3, r1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <HAL_I2C_Init+0x138>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1e59      	subs	r1, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80066d8:	3301      	adds	r3, #1
 80066da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066de:	e051      	b.n	8006784 <HAL_I2C_Init+0x1dc>
 80066e0:	2304      	movs	r3, #4
 80066e2:	e04f      	b.n	8006784 <HAL_I2C_Init+0x1dc>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d111      	bne.n	8006710 <HAL_I2C_Init+0x168>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1e58      	subs	r0, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	440b      	add	r3, r1
 80066fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80066fe:	3301      	adds	r3, #1
 8006700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006704:	2b00      	cmp	r3, #0
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	e012      	b.n	8006736 <HAL_I2C_Init+0x18e>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1e58      	subs	r0, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6859      	ldr	r1, [r3, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	440b      	add	r3, r1
 800671e:	0099      	lsls	r1, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	fbb0 f3f3 	udiv	r3, r0, r3
 8006726:	3301      	adds	r3, #1
 8006728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800672c:	2b00      	cmp	r3, #0
 800672e:	bf0c      	ite	eq
 8006730:	2301      	moveq	r3, #1
 8006732:	2300      	movne	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <HAL_I2C_Init+0x196>
 800673a:	2301      	movs	r3, #1
 800673c:	e022      	b.n	8006784 <HAL_I2C_Init+0x1dc>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10e      	bne.n	8006764 <HAL_I2C_Init+0x1bc>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1e58      	subs	r0, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6859      	ldr	r1, [r3, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	440b      	add	r3, r1
 8006754:	fbb0 f3f3 	udiv	r3, r0, r3
 8006758:	3301      	adds	r3, #1
 800675a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006762:	e00f      	b.n	8006784 <HAL_I2C_Init+0x1dc>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1e58      	subs	r0, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6859      	ldr	r1, [r3, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	0099      	lsls	r1, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	fbb0 f3f3 	udiv	r3, r0, r3
 800677a:	3301      	adds	r3, #1
 800677c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	6809      	ldr	r1, [r1, #0]
 8006788:	4313      	orrs	r3, r2
 800678a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80067b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6911      	ldr	r1, [r2, #16]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	68d2      	ldr	r2, [r2, #12]
 80067be:	4311      	orrs	r1, r2
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	000186a0 	.word	0x000186a0
 8006820:	001e847f 	.word	0x001e847f
 8006824:	003d08ff 	.word	0x003d08ff
 8006828:	431bde83 	.word	0x431bde83
 800682c:	10624dd3 	.word	0x10624dd3

08006830 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	4603      	mov	r3, r0
 8006840:	817b      	strh	r3, [r7, #10]
 8006842:	460b      	mov	r3, r1
 8006844:	813b      	strh	r3, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800684a:	f7fe ff87 	bl	800575c <HAL_GetTick>
 800684e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b20      	cmp	r3, #32
 800685a:	f040 80d9 	bne.w	8006a10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	2319      	movs	r3, #25
 8006864:	2201      	movs	r2, #1
 8006866:	496d      	ldr	r1, [pc, #436]	; (8006a1c <HAL_I2C_Mem_Write+0x1ec>)
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 fc7f 	bl	800716c <I2C_WaitOnFlagUntilTimeout>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006874:	2302      	movs	r3, #2
 8006876:	e0cc      	b.n	8006a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_I2C_Mem_Write+0x56>
 8006882:	2302      	movs	r3, #2
 8006884:	e0c5      	b.n	8006a12 <HAL_I2C_Mem_Write+0x1e2>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b01      	cmp	r3, #1
 800689a:	d007      	beq.n	80068ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2221      	movs	r2, #33	; 0x21
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2240      	movs	r2, #64	; 0x40
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a3a      	ldr	r2, [r7, #32]
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4a4d      	ldr	r2, [pc, #308]	; (8006a20 <HAL_I2C_Mem_Write+0x1f0>)
 80068ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068ee:	88f8      	ldrh	r0, [r7, #6]
 80068f0:	893a      	ldrh	r2, [r7, #8]
 80068f2:	8979      	ldrh	r1, [r7, #10]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	4603      	mov	r3, r0
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fab6 	bl	8006e70 <I2C_RequestMemoryWrite>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d052      	beq.n	80069b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e081      	b.n	8006a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fd00 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00d      	beq.n	800693a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	2b04      	cmp	r3, #4
 8006924:	d107      	bne.n	8006936 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006934:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e06b      	b.n	8006a12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b04      	cmp	r3, #4
 8006976:	d11b      	bne.n	80069b0 <HAL_I2C_Mem_Write+0x180>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697c:	2b00      	cmp	r3, #0
 800697e:	d017      	beq.n	80069b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1aa      	bne.n	800690e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fcec 	bl	800739a <I2C_WaitOnBTFFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00d      	beq.n	80069e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d107      	bne.n	80069e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e016      	b.n	8006a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	e000      	b.n	8006a12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006a10:	2302      	movs	r3, #2
  }
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	00100002 	.word	0x00100002
 8006a20:	ffff0000 	.word	0xffff0000

08006a24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08c      	sub	sp, #48	; 0x30
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	4611      	mov	r1, r2
 8006a30:	461a      	mov	r2, r3
 8006a32:	4603      	mov	r3, r0
 8006a34:	817b      	strh	r3, [r7, #10]
 8006a36:	460b      	mov	r3, r1
 8006a38:	813b      	strh	r3, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a3e:	f7fe fe8d 	bl	800575c <HAL_GetTick>
 8006a42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	f040 8208 	bne.w	8006e62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	2319      	movs	r3, #25
 8006a58:	2201      	movs	r2, #1
 8006a5a:	497b      	ldr	r1, [pc, #492]	; (8006c48 <HAL_I2C_Mem_Read+0x224>)
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fb85 	bl	800716c <I2C_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e1fb      	b.n	8006e64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_I2C_Mem_Read+0x56>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e1f4      	b.n	8006e64 <HAL_I2C_Mem_Read+0x440>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d007      	beq.n	8006aa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2222      	movs	r2, #34	; 0x22
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2240      	movs	r2, #64	; 0x40
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a5b      	ldr	r2, [pc, #364]	; (8006c4c <HAL_I2C_Mem_Read+0x228>)
 8006ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ae2:	88f8      	ldrh	r0, [r7, #6]
 8006ae4:	893a      	ldrh	r2, [r7, #8]
 8006ae6:	8979      	ldrh	r1, [r7, #10]
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	4603      	mov	r3, r0
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fa52 	bl	8006f9c <I2C_RequestMemoryRead>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e1b0      	b.n	8006e64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d113      	bne.n	8006b32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	623b      	str	r3, [r7, #32]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	623b      	str	r3, [r7, #32]
 8006b1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e184      	b.n	8006e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d11b      	bne.n	8006b72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	61fb      	str	r3, [r7, #28]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	61fb      	str	r3, [r7, #28]
 8006b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e164      	b.n	8006e3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d11b      	bne.n	8006bb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	e144      	b.n	8006e3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006bc8:	e138      	b.n	8006e3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	f200 80f1 	bhi.w	8006db6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d123      	bne.n	8006c24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fc1b 	bl	800741c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e139      	b.n	8006e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c22:	e10b      	b.n	8006e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d14e      	bne.n	8006cca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	2200      	movs	r2, #0
 8006c34:	4906      	ldr	r1, [pc, #24]	; (8006c50 <HAL_I2C_Mem_Read+0x22c>)
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 fa98 	bl	800716c <I2C_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e10e      	b.n	8006e64 <HAL_I2C_Mem_Read+0x440>
 8006c46:	bf00      	nop
 8006c48:	00100002 	.word	0x00100002
 8006c4c:	ffff0000 	.word	0xffff0000
 8006c50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cc8:	e0b8      	b.n	8006e3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4966      	ldr	r1, [pc, #408]	; (8006e6c <HAL_I2C_Mem_Read+0x448>)
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fa49 	bl	800716c <I2C_WaitOnFlagUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0bf      	b.n	8006e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	494f      	ldr	r1, [pc, #316]	; (8006e6c <HAL_I2C_Mem_Read+0x448>)
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fa1b 	bl	800716c <I2C_WaitOnFlagUntilTimeout>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e091      	b.n	8006e64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006db4:	e042      	b.n	8006e3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 fb2e 	bl	800741c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e04c      	b.n	8006e64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d118      	bne.n	8006e3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691a      	ldr	r2, [r3, #16]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f aec2 	bne.w	8006bca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	e000      	b.n	8006e64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e62:	2302      	movs	r3, #2
  }
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3728      	adds	r7, #40	; 0x28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	00010004 	.word	0x00010004

08006e70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	460b      	mov	r3, r1
 8006e84:	813b      	strh	r3, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f960 	bl	800716c <I2C_WaitOnFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00d      	beq.n	8006ece <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec0:	d103      	bne.n	8006eca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e05f      	b.n	8006f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ece:	897b      	ldrh	r3, [r7, #10]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006edc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	492d      	ldr	r1, [pc, #180]	; (8006f98 <I2C_RequestMemoryWrite+0x128>)
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f998 	bl	800721a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e04c      	b.n	8006f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0c:	6a39      	ldr	r1, [r7, #32]
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 fa02 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00d      	beq.n	8006f36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d107      	bne.n	8006f32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e02b      	b.n	8006f8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d105      	bne.n	8006f48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f3c:	893b      	ldrh	r3, [r7, #8]
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	611a      	str	r2, [r3, #16]
 8006f46:	e021      	b.n	8006f8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f48:	893b      	ldrh	r3, [r7, #8]
 8006f4a:	0a1b      	lsrs	r3, r3, #8
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f58:	6a39      	ldr	r1, [r7, #32]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f9dc 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00d      	beq.n	8006f82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d107      	bne.n	8006f7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e005      	b.n	8006f8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f82:	893b      	ldrh	r3, [r7, #8]
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	00010002 	.word	0x00010002

08006f9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4603      	mov	r3, r0
 8006fac:	817b      	strh	r3, [r7, #10]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	813b      	strh	r3, [r7, #8]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f8c2 	bl	800716c <I2C_WaitOnFlagUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffc:	d103      	bne.n	8007006 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e0aa      	b.n	8007160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800700a:	897b      	ldrh	r3, [r7, #10]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007018:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	6a3a      	ldr	r2, [r7, #32]
 800701e:	4952      	ldr	r1, [pc, #328]	; (8007168 <I2C_RequestMemoryRead+0x1cc>)
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f8fa 	bl	800721a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e097      	b.n	8007160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007048:	6a39      	ldr	r1, [r7, #32]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f964 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00d      	beq.n	8007072 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	2b04      	cmp	r3, #4
 800705c:	d107      	bne.n	800706e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800706c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e076      	b.n	8007160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d105      	bne.n	8007084 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007078:	893b      	ldrh	r3, [r7, #8]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	611a      	str	r2, [r3, #16]
 8007082:	e021      	b.n	80070c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007084:	893b      	ldrh	r3, [r7, #8]
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	b29b      	uxth	r3, r3
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007094:	6a39      	ldr	r1, [r7, #32]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f93e 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00d      	beq.n	80070be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d107      	bne.n	80070ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e050      	b.n	8007160 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070be:	893b      	ldrh	r3, [r7, #8]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ca:	6a39      	ldr	r1, [r7, #32]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f923 	bl	8007318 <I2C_WaitOnTXEFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00d      	beq.n	80070f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d107      	bne.n	80070f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e035      	b.n	8007160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007102:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	2200      	movs	r2, #0
 800710c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 f82b 	bl	800716c <I2C_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00d      	beq.n	8007138 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712a:	d103      	bne.n	8007134 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007132:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e013      	b.n	8007160 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007138:	897b      	ldrh	r3, [r7, #10]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f043 0301 	orr.w	r3, r3, #1
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	6a3a      	ldr	r2, [r7, #32]
 800714c:	4906      	ldr	r1, [pc, #24]	; (8007168 <I2C_RequestMemoryRead+0x1cc>)
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f863 	bl	800721a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	00010002 	.word	0x00010002

0800716c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	4613      	mov	r3, r2
 800717a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800717c:	e025      	b.n	80071ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007184:	d021      	beq.n	80071ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007186:	f7fe fae9 	bl	800575c <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d116      	bne.n	80071ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f043 0220 	orr.w	r2, r3, #32
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e023      	b.n	8007212 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	0c1b      	lsrs	r3, r3, #16
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d10d      	bne.n	80071f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	43da      	mvns	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4013      	ands	r3, r2
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	bf0c      	ite	eq
 80071e6:	2301      	moveq	r3, #1
 80071e8:	2300      	movne	r3, #0
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	e00c      	b.n	800720a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	43da      	mvns	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4013      	ands	r3, r2
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	429a      	cmp	r2, r3
 800720e:	d0b6      	beq.n	800717e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
 8007226:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007228:	e051      	b.n	80072ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007238:	d123      	bne.n	8007282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007248:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007252:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f043 0204 	orr.w	r2, r3, #4
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e046      	b.n	8007310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007288:	d021      	beq.n	80072ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728a:	f7fe fa67 	bl	800575c <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	429a      	cmp	r2, r3
 8007298:	d302      	bcc.n	80072a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d116      	bne.n	80072ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f043 0220 	orr.w	r2, r3, #32
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e020      	b.n	8007310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	0c1b      	lsrs	r3, r3, #16
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d10c      	bne.n	80072f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	43da      	mvns	r2, r3
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4013      	ands	r3, r2
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bf14      	ite	ne
 80072ea:	2301      	movne	r3, #1
 80072ec:	2300      	moveq	r3, #0
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	e00b      	b.n	800730a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	43da      	mvns	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	4013      	ands	r3, r2
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	bf14      	ite	ne
 8007304:	2301      	movne	r3, #1
 8007306:	2300      	moveq	r3, #0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d18d      	bne.n	800722a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007324:	e02d      	b.n	8007382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f8ce 	bl	80074c8 <I2C_IsAcknowledgeFailed>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e02d      	b.n	8007392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800733c:	d021      	beq.n	8007382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733e:	f7fe fa0d 	bl	800575c <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	d302      	bcc.n	8007354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d116      	bne.n	8007382 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f043 0220 	orr.w	r2, r3, #32
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e007      	b.n	8007392 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738c:	2b80      	cmp	r3, #128	; 0x80
 800738e:	d1ca      	bne.n	8007326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073a6:	e02d      	b.n	8007404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f88d 	bl	80074c8 <I2C_IsAcknowledgeFailed>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e02d      	b.n	8007414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073be:	d021      	beq.n	8007404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c0:	f7fe f9cc 	bl	800575c <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d302      	bcc.n	80073d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d116      	bne.n	8007404 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	f043 0220 	orr.w	r2, r3, #32
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e007      	b.n	8007414 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	f003 0304 	and.w	r3, r3, #4
 800740e:	2b04      	cmp	r3, #4
 8007410:	d1ca      	bne.n	80073a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007428:	e042      	b.n	80074b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b10      	cmp	r3, #16
 8007436:	d119      	bne.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0210 	mvn.w	r2, #16
 8007440:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e029      	b.n	80074c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800746c:	f7fe f976 	bl	800575c <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d302      	bcc.n	8007482 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d116      	bne.n	80074b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	f043 0220 	orr.w	r2, r3, #32
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e007      	b.n	80074c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d1b5      	bne.n	800742a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074de:	d11b      	bne.n	8007518 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	f043 0204 	orr.w	r2, r3, #4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
	...

08007528 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800752e:	4b06      	ldr	r3, [pc, #24]	; (8007548 <HAL_PWR_EnableBkUpAccess+0x20>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <HAL_PWR_EnableBkUpAccess+0x24>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800753a:	687b      	ldr	r3, [r7, #4]
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	420e0020 	.word	0x420e0020
 800754c:	40007000 	.word	0x40007000

08007550 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8007556:	4b06      	ldr	r3, [pc, #24]	; (8007570 <HAL_PWR_DisableBkUpAccess+0x20>)
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800755c:	4b05      	ldr	r3, [pc, #20]	; (8007574 <HAL_PWR_DisableBkUpAccess+0x24>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007562:	687b      	ldr	r3, [r7, #4]
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	420e0020 	.word	0x420e0020
 8007574:	40007000 	.word	0x40007000

08007578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e267      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d075      	beq.n	8007682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007596:	4b88      	ldr	r3, [pc, #544]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 030c 	and.w	r3, r3, #12
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d00c      	beq.n	80075bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075a2:	4b85      	ldr	r3, [pc, #532]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d112      	bne.n	80075d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075ae:	4b82      	ldr	r3, [pc, #520]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075ba:	d10b      	bne.n	80075d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075bc:	4b7e      	ldr	r3, [pc, #504]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05b      	beq.n	8007680 <HAL_RCC_OscConfig+0x108>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d157      	bne.n	8007680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e242      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075dc:	d106      	bne.n	80075ec <HAL_RCC_OscConfig+0x74>
 80075de:	4b76      	ldr	r3, [pc, #472]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a75      	ldr	r2, [pc, #468]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80075e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e01d      	b.n	8007628 <HAL_RCC_OscConfig+0xb0>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075f4:	d10c      	bne.n	8007610 <HAL_RCC_OscConfig+0x98>
 80075f6:	4b70      	ldr	r3, [pc, #448]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a6f      	ldr	r2, [pc, #444]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80075fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	4b6d      	ldr	r3, [pc, #436]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a6c      	ldr	r2, [pc, #432]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	e00b      	b.n	8007628 <HAL_RCC_OscConfig+0xb0>
 8007610:	4b69      	ldr	r3, [pc, #420]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a68      	ldr	r2, [pc, #416]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	4b66      	ldr	r3, [pc, #408]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a65      	ldr	r2, [pc, #404]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d013      	beq.n	8007658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007630:	f7fe f894 	bl	800575c <HAL_GetTick>
 8007634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007636:	e008      	b.n	800764a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007638:	f7fe f890 	bl	800575c <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b64      	cmp	r3, #100	; 0x64
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e207      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800764a:	4b5b      	ldr	r3, [pc, #364]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0f0      	beq.n	8007638 <HAL_RCC_OscConfig+0xc0>
 8007656:	e014      	b.n	8007682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007658:	f7fe f880 	bl	800575c <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007660:	f7fe f87c 	bl	800575c <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b64      	cmp	r3, #100	; 0x64
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e1f3      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007672:	4b51      	ldr	r3, [pc, #324]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f0      	bne.n	8007660 <HAL_RCC_OscConfig+0xe8>
 800767e:	e000      	b.n	8007682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d063      	beq.n	8007756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800768e:	4b4a      	ldr	r3, [pc, #296]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800769a:	4b47      	ldr	r3, [pc, #284]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d11c      	bne.n	80076e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076a6:	4b44      	ldr	r3, [pc, #272]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d116      	bne.n	80076e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076b2:	4b41      	ldr	r3, [pc, #260]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_RCC_OscConfig+0x152>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d001      	beq.n	80076ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e1c7      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ca:	4b3b      	ldr	r3, [pc, #236]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	4937      	ldr	r1, [pc, #220]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076de:	e03a      	b.n	8007756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d020      	beq.n	800772a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076e8:	4b34      	ldr	r3, [pc, #208]	; (80077bc <HAL_RCC_OscConfig+0x244>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ee:	f7fe f835 	bl	800575c <HAL_GetTick>
 80076f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f4:	e008      	b.n	8007708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076f6:	f7fe f831 	bl	800575c <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d901      	bls.n	8007708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e1a8      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007708:	4b2b      	ldr	r3, [pc, #172]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0f0      	beq.n	80076f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007714:	4b28      	ldr	r3, [pc, #160]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	4925      	ldr	r1, [pc, #148]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 8007724:	4313      	orrs	r3, r2
 8007726:	600b      	str	r3, [r1, #0]
 8007728:	e015      	b.n	8007756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800772a:	4b24      	ldr	r3, [pc, #144]	; (80077bc <HAL_RCC_OscConfig+0x244>)
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007730:	f7fe f814 	bl	800575c <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007738:	f7fe f810 	bl	800575c <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e187      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774a:	4b1b      	ldr	r3, [pc, #108]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f0      	bne.n	8007738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d036      	beq.n	80077d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d016      	beq.n	8007798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800776a:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <HAL_RCC_OscConfig+0x248>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007770:	f7fd fff4 	bl	800575c <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007778:	f7fd fff0 	bl	800575c <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e167      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <HAL_RCC_OscConfig+0x240>)
 800778c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <HAL_RCC_OscConfig+0x200>
 8007796:	e01b      	b.n	80077d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007798:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <HAL_RCC_OscConfig+0x248>)
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800779e:	f7fd ffdd 	bl	800575c <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a4:	e00e      	b.n	80077c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077a6:	f7fd ffd9 	bl	800575c <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d907      	bls.n	80077c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e150      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
 80077b8:	40023800 	.word	0x40023800
 80077bc:	42470000 	.word	0x42470000
 80077c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077c4:	4b88      	ldr	r3, [pc, #544]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 80077c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1ea      	bne.n	80077a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 8097 	beq.w	800790c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077de:	2300      	movs	r3, #0
 80077e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077e2:	4b81      	ldr	r3, [pc, #516]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10f      	bne.n	800780e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ee:	2300      	movs	r3, #0
 80077f0:	60bb      	str	r3, [r7, #8]
 80077f2:	4b7d      	ldr	r3, [pc, #500]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	4a7c      	ldr	r2, [pc, #496]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 80077f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077fc:	6413      	str	r3, [r2, #64]	; 0x40
 80077fe:	4b7a      	ldr	r3, [pc, #488]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007806:	60bb      	str	r3, [r7, #8]
 8007808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800780e:	4b77      	ldr	r3, [pc, #476]	; (80079ec <HAL_RCC_OscConfig+0x474>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d118      	bne.n	800784c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800781a:	4b74      	ldr	r3, [pc, #464]	; (80079ec <HAL_RCC_OscConfig+0x474>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a73      	ldr	r2, [pc, #460]	; (80079ec <HAL_RCC_OscConfig+0x474>)
 8007820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007826:	f7fd ff99 	bl	800575c <HAL_GetTick>
 800782a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800782c:	e008      	b.n	8007840 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800782e:	f7fd ff95 	bl	800575c <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d901      	bls.n	8007840 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e10c      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007840:	4b6a      	ldr	r3, [pc, #424]	; (80079ec <HAL_RCC_OscConfig+0x474>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0f0      	beq.n	800782e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d106      	bne.n	8007862 <HAL_RCC_OscConfig+0x2ea>
 8007854:	4b64      	ldr	r3, [pc, #400]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007858:	4a63      	ldr	r2, [pc, #396]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	6713      	str	r3, [r2, #112]	; 0x70
 8007860:	e01c      	b.n	800789c <HAL_RCC_OscConfig+0x324>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b05      	cmp	r3, #5
 8007868:	d10c      	bne.n	8007884 <HAL_RCC_OscConfig+0x30c>
 800786a:	4b5f      	ldr	r3, [pc, #380]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	4a5e      	ldr	r2, [pc, #376]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007870:	f043 0304 	orr.w	r3, r3, #4
 8007874:	6713      	str	r3, [r2, #112]	; 0x70
 8007876:	4b5c      	ldr	r3, [pc, #368]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	4a5b      	ldr	r2, [pc, #364]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 800787c:	f043 0301 	orr.w	r3, r3, #1
 8007880:	6713      	str	r3, [r2, #112]	; 0x70
 8007882:	e00b      	b.n	800789c <HAL_RCC_OscConfig+0x324>
 8007884:	4b58      	ldr	r3, [pc, #352]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007888:	4a57      	ldr	r2, [pc, #348]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 800788a:	f023 0301 	bic.w	r3, r3, #1
 800788e:	6713      	str	r3, [r2, #112]	; 0x70
 8007890:	4b55      	ldr	r3, [pc, #340]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007894:	4a54      	ldr	r2, [pc, #336]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007896:	f023 0304 	bic.w	r3, r3, #4
 800789a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d015      	beq.n	80078d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a4:	f7fd ff5a 	bl	800575c <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078aa:	e00a      	b.n	80078c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078ac:	f7fd ff56 	bl	800575c <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e0cb      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c2:	4b49      	ldr	r3, [pc, #292]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0ee      	beq.n	80078ac <HAL_RCC_OscConfig+0x334>
 80078ce:	e014      	b.n	80078fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078d0:	f7fd ff44 	bl	800575c <HAL_GetTick>
 80078d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078d6:	e00a      	b.n	80078ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078d8:	f7fd ff40 	bl	800575c <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e0b5      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ee:	4b3e      	ldr	r3, [pc, #248]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 80078f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1ee      	bne.n	80078d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d105      	bne.n	800790c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007900:	4b39      	ldr	r3, [pc, #228]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	4a38      	ldr	r2, [pc, #224]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800790a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80a1 	beq.w	8007a58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007916:	4b34      	ldr	r3, [pc, #208]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 030c 	and.w	r3, r3, #12
 800791e:	2b08      	cmp	r3, #8
 8007920:	d05c      	beq.n	80079dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d141      	bne.n	80079ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800792a:	4b31      	ldr	r3, [pc, #196]	; (80079f0 <HAL_RCC_OscConfig+0x478>)
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007930:	f7fd ff14 	bl	800575c <HAL_GetTick>
 8007934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007938:	f7fd ff10 	bl	800575c <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b02      	cmp	r3, #2
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e087      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800794a:	4b27      	ldr	r3, [pc, #156]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1f0      	bne.n	8007938 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69da      	ldr	r2, [r3, #28]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	019b      	lsls	r3, r3, #6
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	085b      	lsrs	r3, r3, #1
 800796e:	3b01      	subs	r3, #1
 8007970:	041b      	lsls	r3, r3, #16
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	061b      	lsls	r3, r3, #24
 800797a:	491b      	ldr	r1, [pc, #108]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 800797c:	4313      	orrs	r3, r2
 800797e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007980:	4b1b      	ldr	r3, [pc, #108]	; (80079f0 <HAL_RCC_OscConfig+0x478>)
 8007982:	2201      	movs	r2, #1
 8007984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007986:	f7fd fee9 	bl	800575c <HAL_GetTick>
 800798a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800798c:	e008      	b.n	80079a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800798e:	f7fd fee5 	bl	800575c <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e05c      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a0:	4b11      	ldr	r3, [pc, #68]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0f0      	beq.n	800798e <HAL_RCC_OscConfig+0x416>
 80079ac:	e054      	b.n	8007a58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ae:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <HAL_RCC_OscConfig+0x478>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b4:	f7fd fed2 	bl	800575c <HAL_GetTick>
 80079b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079bc:	f7fd fece 	bl	800575c <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e045      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <HAL_RCC_OscConfig+0x470>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1f0      	bne.n	80079bc <HAL_RCC_OscConfig+0x444>
 80079da:	e03d      	b.n	8007a58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d107      	bne.n	80079f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e038      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
 80079e8:	40023800 	.word	0x40023800
 80079ec:	40007000 	.word	0x40007000
 80079f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079f4:	4b1b      	ldr	r3, [pc, #108]	; (8007a64 <HAL_RCC_OscConfig+0x4ec>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d028      	beq.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d121      	bne.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d11a      	bne.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a24:	4013      	ands	r3, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d111      	bne.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d107      	bne.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d001      	beq.n	8007a58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	40023800 	.word	0x40023800

08007a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0cc      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a7c:	4b68      	ldr	r3, [pc, #416]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d90c      	bls.n	8007aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a8a:	4b65      	ldr	r3, [pc, #404]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a92:	4b63      	ldr	r3, [pc, #396]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d001      	beq.n	8007aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e0b8      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d020      	beq.n	8007af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007abc:	4b59      	ldr	r3, [pc, #356]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	4a58      	ldr	r2, [pc, #352]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0308 	and.w	r3, r3, #8
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ad4:	4b53      	ldr	r3, [pc, #332]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	4a52      	ldr	r2, [pc, #328]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ae0:	4b50      	ldr	r3, [pc, #320]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	494d      	ldr	r1, [pc, #308]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d044      	beq.n	8007b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d107      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b06:	4b47      	ldr	r3, [pc, #284]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d119      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e07f      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d003      	beq.n	8007b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d107      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b26:	4b3f      	ldr	r3, [pc, #252]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e06f      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b36:	4b3b      	ldr	r3, [pc, #236]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e067      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b46:	4b37      	ldr	r3, [pc, #220]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f023 0203 	bic.w	r2, r3, #3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4934      	ldr	r1, [pc, #208]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b58:	f7fd fe00 	bl	800575c <HAL_GetTick>
 8007b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b5e:	e00a      	b.n	8007b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b60:	f7fd fdfc 	bl	800575c <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e04f      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b76:	4b2b      	ldr	r3, [pc, #172]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 020c 	and.w	r2, r3, #12
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d1eb      	bne.n	8007b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b88:	4b25      	ldr	r3, [pc, #148]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d20c      	bcs.n	8007bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b96:	4b22      	ldr	r3, [pc, #136]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b9e:	4b20      	ldr	r3, [pc, #128]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d001      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e032      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bbc:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4916      	ldr	r1, [pc, #88]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	490e      	ldr	r1, [pc, #56]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bee:	f000 f821 	bl	8007c34 <HAL_RCC_GetSysClockFreq>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	091b      	lsrs	r3, r3, #4
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	490a      	ldr	r1, [pc, #40]	; (8007c28 <HAL_RCC_ClockConfig+0x1c0>)
 8007c00:	5ccb      	ldrb	r3, [r1, r3]
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	4a09      	ldr	r2, [pc, #36]	; (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fd fc66 	bl	80054e0 <HAL_InitTick>

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	40023c00 	.word	0x40023c00
 8007c24:	40023800 	.word	0x40023800
 8007c28:	0800eab4 	.word	0x0800eab4
 8007c2c:	20000140 	.word	0x20000140
 8007c30:	20000144 	.word	0x20000144

08007c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c38:	b090      	sub	sp, #64	; 0x40
 8007c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c40:	2300      	movs	r3, #0
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c44:	2300      	movs	r3, #0
 8007c46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c4c:	4b59      	ldr	r3, [pc, #356]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 030c 	and.w	r3, r3, #12
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d00d      	beq.n	8007c74 <HAL_RCC_GetSysClockFreq+0x40>
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	f200 80a1 	bhi.w	8007da0 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <HAL_RCC_GetSysClockFreq+0x34>
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d003      	beq.n	8007c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8007c66:	e09b      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c68:	4b53      	ldr	r3, [pc, #332]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c6a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007c6c:	e09b      	b.n	8007da6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c6e:	4b53      	ldr	r3, [pc, #332]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x188>)
 8007c70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c72:	e098      	b.n	8007da6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c74:	4b4f      	ldr	r3, [pc, #316]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c7e:	4b4d      	ldr	r3, [pc, #308]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d028      	beq.n	8007cdc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c8a:	4b4a      	ldr	r3, [pc, #296]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	099b      	lsrs	r3, r3, #6
 8007c90:	2200      	movs	r2, #0
 8007c92:	623b      	str	r3, [r7, #32]
 8007c94:	627a      	str	r2, [r7, #36]	; 0x24
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4b47      	ldr	r3, [pc, #284]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x188>)
 8007ca0:	fb03 f201 	mul.w	r2, r3, r1
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	fb00 f303 	mul.w	r3, r0, r3
 8007caa:	4413      	add	r3, r2
 8007cac:	4a43      	ldr	r2, [pc, #268]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x188>)
 8007cae:	fba0 1202 	umull	r1, r2, r0, r2
 8007cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cb4:	460a      	mov	r2, r1
 8007cb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8007cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cba:	4413      	add	r3, r2
 8007cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	61fa      	str	r2, [r7, #28]
 8007cc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007cce:	f7f8 ff95 	bl	8000bfc <__aeabi_uldivmod>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cda:	e053      	b.n	8007d84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cdc:	4b35      	ldr	r3, [pc, #212]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	099b      	lsrs	r3, r3, #6
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	617a      	str	r2, [r7, #20]
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007cee:	f04f 0b00 	mov.w	fp, #0
 8007cf2:	4652      	mov	r2, sl
 8007cf4:	465b      	mov	r3, fp
 8007cf6:	f04f 0000 	mov.w	r0, #0
 8007cfa:	f04f 0100 	mov.w	r1, #0
 8007cfe:	0159      	lsls	r1, r3, #5
 8007d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d04:	0150      	lsls	r0, r2, #5
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	ebb2 080a 	subs.w	r8, r2, sl
 8007d0e:	eb63 090b 	sbc.w	r9, r3, fp
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	f04f 0300 	mov.w	r3, #0
 8007d1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d26:	ebb2 0408 	subs.w	r4, r2, r8
 8007d2a:	eb63 0509 	sbc.w	r5, r3, r9
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	00eb      	lsls	r3, r5, #3
 8007d38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d3c:	00e2      	lsls	r2, r4, #3
 8007d3e:	4614      	mov	r4, r2
 8007d40:	461d      	mov	r5, r3
 8007d42:	eb14 030a 	adds.w	r3, r4, sl
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	eb45 030b 	adc.w	r3, r5, fp
 8007d4c:	607b      	str	r3, [r7, #4]
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	f04f 0300 	mov.w	r3, #0
 8007d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	028b      	lsls	r3, r1, #10
 8007d5e:	4621      	mov	r1, r4
 8007d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d64:	4621      	mov	r1, r4
 8007d66:	028a      	lsls	r2, r1, #10
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6e:	2200      	movs	r2, #0
 8007d70:	60bb      	str	r3, [r7, #8]
 8007d72:	60fa      	str	r2, [r7, #12]
 8007d74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d78:	f7f8 ff40 	bl	8000bfc <__aeabi_uldivmod>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4613      	mov	r3, r2
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d84:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	3301      	adds	r3, #1
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d9e:	e002      	b.n	8007da6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007da2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3740      	adds	r7, #64	; 0x40
 8007dac:	46bd      	mov	sp, r7
 8007dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007db2:	bf00      	nop
 8007db4:	40023800 	.word	0x40023800
 8007db8:	00f42400 	.word	0x00f42400
 8007dbc:	017d7840 	.word	0x017d7840

08007dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dc4:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	20000140 	.word	0x20000140

08007dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ddc:	f7ff fff0 	bl	8007dc0 <HAL_RCC_GetHCLKFreq>
 8007de0:	4602      	mov	r2, r0
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	0a9b      	lsrs	r3, r3, #10
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	4903      	ldr	r1, [pc, #12]	; (8007dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dee:	5ccb      	ldrb	r3, [r1, r3]
 8007df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40023800 	.word	0x40023800
 8007dfc:	0800eac4 	.word	0x0800eac4

08007e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e04:	f7ff ffdc 	bl	8007dc0 <HAL_RCC_GetHCLKFreq>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	0b5b      	lsrs	r3, r3, #13
 8007e10:	f003 0307 	and.w	r3, r3, #7
 8007e14:	4903      	ldr	r1, [pc, #12]	; (8007e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e16:	5ccb      	ldrb	r3, [r1, r3]
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	40023800 	.word	0x40023800
 8007e24:	0800eac4 	.word	0x0800eac4

08007e28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	220f      	movs	r2, #15
 8007e36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e38:	4b12      	ldr	r3, [pc, #72]	; (8007e84 <HAL_RCC_GetClockConfig+0x5c>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f003 0203 	and.w	r2, r3, #3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e44:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <HAL_RCC_GetClockConfig+0x5c>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <HAL_RCC_GetClockConfig+0x5c>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007e5c:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <HAL_RCC_GetClockConfig+0x5c>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	08db      	lsrs	r3, r3, #3
 8007e62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e6a:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <HAL_RCC_GetClockConfig+0x60>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0207 	and.w	r2, r3, #7
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	601a      	str	r2, [r3, #0]
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40023800 	.word	0x40023800
 8007e88:	40023c00 	.word	0x40023c00

08007e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e041      	b.n	8007f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d106      	bne.n	8007eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fd f96a 	bl	800518c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f001 f91c 	bl	8009108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d001      	beq.n	8007f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e046      	b.n	8007fd2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a23      	ldr	r2, [pc, #140]	; (8007fe0 <HAL_TIM_Base_Start+0xb4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d022      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5e:	d01d      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1f      	ldr	r2, [pc, #124]	; (8007fe4 <HAL_TIM_Base_Start+0xb8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d018      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a1e      	ldr	r2, [pc, #120]	; (8007fe8 <HAL_TIM_Base_Start+0xbc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d013      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a1c      	ldr	r2, [pc, #112]	; (8007fec <HAL_TIM_Base_Start+0xc0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d00e      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1b      	ldr	r2, [pc, #108]	; (8007ff0 <HAL_TIM_Base_Start+0xc4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d009      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <HAL_TIM_Base_Start+0xc8>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d004      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <HAL_TIM_Base_Start+0xcc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d111      	bne.n	8007fc0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b06      	cmp	r3, #6
 8007fac:	d010      	beq.n	8007fd0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0201 	orr.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbe:	e007      	b.n	8007fd0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0201 	orr.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40000400 	.word	0x40000400
 8007fe8:	40000800 	.word	0x40000800
 8007fec:	40000c00 	.word	0x40000c00
 8007ff0:	40010400 	.word	0x40010400
 8007ff4:	40014000 	.word	0x40014000
 8007ff8:	40001800 	.word	0x40001800

08007ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	d001      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e04e      	b.n	80080b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0201 	orr.w	r2, r2, #1
 800802a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a23      	ldr	r2, [pc, #140]	; (80080c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d022      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803e:	d01d      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1f      	ldr	r2, [pc, #124]	; (80080c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d018      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d013      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1c      	ldr	r2, [pc, #112]	; (80080cc <HAL_TIM_Base_Start_IT+0xd0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00e      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1b      	ldr	r2, [pc, #108]	; (80080d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d009      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a19      	ldr	r2, [pc, #100]	; (80080d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d004      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d111      	bne.n	80080a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b06      	cmp	r3, #6
 800808c:	d010      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0201 	orr.w	r2, r2, #1
 800809c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809e:	e007      	b.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40010400 	.word	0x40010400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	40001800 	.word	0x40001800

080080dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e041      	b.n	8008172 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d106      	bne.n	8008108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f839 	bl	800817a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f000 fff4 	bl	8009108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
	...

08008190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <HAL_TIM_PWM_Start+0x24>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	bf14      	ite	ne
 80081ac:	2301      	movne	r3, #1
 80081ae:	2300      	moveq	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	e022      	b.n	80081fa <HAL_TIM_PWM_Start+0x6a>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d109      	bne.n	80081ce <HAL_TIM_PWM_Start+0x3e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	bf14      	ite	ne
 80081c6:	2301      	movne	r3, #1
 80081c8:	2300      	moveq	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	e015      	b.n	80081fa <HAL_TIM_PWM_Start+0x6a>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d109      	bne.n	80081e8 <HAL_TIM_PWM_Start+0x58>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	bf14      	ite	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	2300      	moveq	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	e008      	b.n	80081fa <HAL_TIM_PWM_Start+0x6a>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	bf14      	ite	ne
 80081f4:	2301      	movne	r3, #1
 80081f6:	2300      	moveq	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e07c      	b.n	80082fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <HAL_TIM_PWM_Start+0x82>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008210:	e013      	b.n	800823a <HAL_TIM_PWM_Start+0xaa>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b04      	cmp	r3, #4
 8008216:	d104      	bne.n	8008222 <HAL_TIM_PWM_Start+0x92>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008220:	e00b      	b.n	800823a <HAL_TIM_PWM_Start+0xaa>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b08      	cmp	r3, #8
 8008226:	d104      	bne.n	8008232 <HAL_TIM_PWM_Start+0xa2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008230:	e003      	b.n	800823a <HAL_TIM_PWM_Start+0xaa>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2202      	movs	r2, #2
 8008236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2201      	movs	r2, #1
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f001 fb74 	bl	8009930 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a2d      	ldr	r2, [pc, #180]	; (8008304 <HAL_TIM_PWM_Start+0x174>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_TIM_PWM_Start+0xcc>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a2c      	ldr	r2, [pc, #176]	; (8008308 <HAL_TIM_PWM_Start+0x178>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d101      	bne.n	8008260 <HAL_TIM_PWM_Start+0xd0>
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <HAL_TIM_PWM_Start+0xd2>
 8008260:	2300      	movs	r3, #0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a22      	ldr	r2, [pc, #136]	; (8008304 <HAL_TIM_PWM_Start+0x174>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d022      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008288:	d01d      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1f      	ldr	r2, [pc, #124]	; (800830c <HAL_TIM_PWM_Start+0x17c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d018      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a1d      	ldr	r2, [pc, #116]	; (8008310 <HAL_TIM_PWM_Start+0x180>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1c      	ldr	r2, [pc, #112]	; (8008314 <HAL_TIM_PWM_Start+0x184>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d00e      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a16      	ldr	r2, [pc, #88]	; (8008308 <HAL_TIM_PWM_Start+0x178>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d009      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a18      	ldr	r2, [pc, #96]	; (8008318 <HAL_TIM_PWM_Start+0x188>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d004      	beq.n	80082c6 <HAL_TIM_PWM_Start+0x136>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a16      	ldr	r2, [pc, #88]	; (800831c <HAL_TIM_PWM_Start+0x18c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d111      	bne.n	80082ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b06      	cmp	r3, #6
 80082d6:	d010      	beq.n	80082fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0201 	orr.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e8:	e007      	b.n	80082fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 0201 	orr.w	r2, r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	40010000 	.word	0x40010000
 8008308:	40010400 	.word	0x40010400
 800830c:	40000400 	.word	0x40000400
 8008310:	40000800 	.word	0x40000800
 8008314:	40000c00 	.word	0x40000c00
 8008318:	40014000 	.word	0x40014000
 800831c:	40001800 	.word	0x40001800

08008320 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e041      	b.n	80083b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f839 	bl	80083be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3304      	adds	r3, #4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f000 fed2 	bl	8009108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <HAL_TIM_IC_Start_IT+0x1e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	e013      	b.n	800841a <HAL_TIM_IC_Start_IT+0x46>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d104      	bne.n	8008402 <HAL_TIM_IC_Start_IT+0x2e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	e00b      	b.n	800841a <HAL_TIM_IC_Start_IT+0x46>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b08      	cmp	r3, #8
 8008406:	d104      	bne.n	8008412 <HAL_TIM_IC_Start_IT+0x3e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800840e:	b2db      	uxtb	r3, r3
 8008410:	e003      	b.n	800841a <HAL_TIM_IC_Start_IT+0x46>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008418:	b2db      	uxtb	r3, r3
 800841a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <HAL_TIM_IC_Start_IT+0x58>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008428:	b2db      	uxtb	r3, r3
 800842a:	e013      	b.n	8008454 <HAL_TIM_IC_Start_IT+0x80>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2b04      	cmp	r3, #4
 8008430:	d104      	bne.n	800843c <HAL_TIM_IC_Start_IT+0x68>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008438:	b2db      	uxtb	r3, r3
 800843a:	e00b      	b.n	8008454 <HAL_TIM_IC_Start_IT+0x80>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b08      	cmp	r3, #8
 8008440:	d104      	bne.n	800844c <HAL_TIM_IC_Start_IT+0x78>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008448:	b2db      	uxtb	r3, r3
 800844a:	e003      	b.n	8008454 <HAL_TIM_IC_Start_IT+0x80>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008452:	b2db      	uxtb	r3, r3
 8008454:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d102      	bne.n	8008462 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800845c:	7b7b      	ldrb	r3, [r7, #13]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d001      	beq.n	8008466 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e0cc      	b.n	8008600 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <HAL_TIM_IC_Start_IT+0xa2>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008474:	e013      	b.n	800849e <HAL_TIM_IC_Start_IT+0xca>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d104      	bne.n	8008486 <HAL_TIM_IC_Start_IT+0xb2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008484:	e00b      	b.n	800849e <HAL_TIM_IC_Start_IT+0xca>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b08      	cmp	r3, #8
 800848a:	d104      	bne.n	8008496 <HAL_TIM_IC_Start_IT+0xc2>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008494:	e003      	b.n	800849e <HAL_TIM_IC_Start_IT+0xca>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2202      	movs	r2, #2
 800849a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <HAL_TIM_IC_Start_IT+0xda>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084ac:	e013      	b.n	80084d6 <HAL_TIM_IC_Start_IT+0x102>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b04      	cmp	r3, #4
 80084b2:	d104      	bne.n	80084be <HAL_TIM_IC_Start_IT+0xea>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084bc:	e00b      	b.n	80084d6 <HAL_TIM_IC_Start_IT+0x102>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d104      	bne.n	80084ce <HAL_TIM_IC_Start_IT+0xfa>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084cc:	e003      	b.n	80084d6 <HAL_TIM_IC_Start_IT+0x102>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b0c      	cmp	r3, #12
 80084da:	d841      	bhi.n	8008560 <HAL_TIM_IC_Start_IT+0x18c>
 80084dc:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <HAL_TIM_IC_Start_IT+0x110>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	08008519 	.word	0x08008519
 80084e8:	08008561 	.word	0x08008561
 80084ec:	08008561 	.word	0x08008561
 80084f0:	08008561 	.word	0x08008561
 80084f4:	0800852b 	.word	0x0800852b
 80084f8:	08008561 	.word	0x08008561
 80084fc:	08008561 	.word	0x08008561
 8008500:	08008561 	.word	0x08008561
 8008504:	0800853d 	.word	0x0800853d
 8008508:	08008561 	.word	0x08008561
 800850c:	08008561 	.word	0x08008561
 8008510:	08008561 	.word	0x08008561
 8008514:	0800854f 	.word	0x0800854f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0202 	orr.w	r2, r2, #2
 8008526:	60da      	str	r2, [r3, #12]
      break;
 8008528:	e01d      	b.n	8008566 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f042 0204 	orr.w	r2, r2, #4
 8008538:	60da      	str	r2, [r3, #12]
      break;
 800853a:	e014      	b.n	8008566 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68da      	ldr	r2, [r3, #12]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0208 	orr.w	r2, r2, #8
 800854a:	60da      	str	r2, [r3, #12]
      break;
 800854c:	e00b      	b.n	8008566 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f042 0210 	orr.w	r2, r2, #16
 800855c:	60da      	str	r2, [r3, #12]
      break;
 800855e:	e002      	b.n	8008566 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	73fb      	strb	r3, [r7, #15]
      break;
 8008564:	bf00      	nop
  }

  if (status == HAL_OK)
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d148      	bne.n	80085fe <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2201      	movs	r2, #1
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f001 f9db 	bl	8009930 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a22      	ldr	r2, [pc, #136]	; (8008608 <HAL_TIM_IC_Start_IT+0x234>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d022      	beq.n	80085ca <HAL_TIM_IC_Start_IT+0x1f6>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858c:	d01d      	beq.n	80085ca <HAL_TIM_IC_Start_IT+0x1f6>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1e      	ldr	r2, [pc, #120]	; (800860c <HAL_TIM_IC_Start_IT+0x238>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d018      	beq.n	80085ca <HAL_TIM_IC_Start_IT+0x1f6>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1c      	ldr	r2, [pc, #112]	; (8008610 <HAL_TIM_IC_Start_IT+0x23c>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d013      	beq.n	80085ca <HAL_TIM_IC_Start_IT+0x1f6>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a1b      	ldr	r2, [pc, #108]	; (8008614 <HAL_TIM_IC_Start_IT+0x240>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00e      	beq.n	80085ca <HAL_TIM_IC_Start_IT+0x1f6>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a19      	ldr	r2, [pc, #100]	; (8008618 <HAL_TIM_IC_Start_IT+0x244>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d009      	beq.n	80085ca <HAL_TIM_IC_Start_IT+0x1f6>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a18      	ldr	r2, [pc, #96]	; (800861c <HAL_TIM_IC_Start_IT+0x248>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d004      	beq.n	80085ca <HAL_TIM_IC_Start_IT+0x1f6>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a16      	ldr	r2, [pc, #88]	; (8008620 <HAL_TIM_IC_Start_IT+0x24c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d111      	bne.n	80085ee <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b06      	cmp	r3, #6
 80085da:	d010      	beq.n	80085fe <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0201 	orr.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ec:	e007      	b.n	80085fe <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f042 0201 	orr.w	r2, r2, #1
 80085fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	40010000 	.word	0x40010000
 800860c:	40000400 	.word	0x40000400
 8008610:	40000800 	.word	0x40000800
 8008614:	40000c00 	.word	0x40000c00
 8008618:	40010400 	.word	0x40010400
 800861c:	40014000 	.word	0x40014000
 8008620:	40001800 	.word	0x40001800

08008624 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b0c      	cmp	r3, #12
 8008636:	d841      	bhi.n	80086bc <HAL_TIM_IC_Stop_IT+0x98>
 8008638:	a201      	add	r2, pc, #4	; (adr r2, 8008640 <HAL_TIM_IC_Stop_IT+0x1c>)
 800863a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863e:	bf00      	nop
 8008640:	08008675 	.word	0x08008675
 8008644:	080086bd 	.word	0x080086bd
 8008648:	080086bd 	.word	0x080086bd
 800864c:	080086bd 	.word	0x080086bd
 8008650:	08008687 	.word	0x08008687
 8008654:	080086bd 	.word	0x080086bd
 8008658:	080086bd 	.word	0x080086bd
 800865c:	080086bd 	.word	0x080086bd
 8008660:	08008699 	.word	0x08008699
 8008664:	080086bd 	.word	0x080086bd
 8008668:	080086bd 	.word	0x080086bd
 800866c:	080086bd 	.word	0x080086bd
 8008670:	080086ab 	.word	0x080086ab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0202 	bic.w	r2, r2, #2
 8008682:	60da      	str	r2, [r3, #12]
      break;
 8008684:	e01d      	b.n	80086c2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 0204 	bic.w	r2, r2, #4
 8008694:	60da      	str	r2, [r3, #12]
      break;
 8008696:	e014      	b.n	80086c2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0208 	bic.w	r2, r2, #8
 80086a6:	60da      	str	r2, [r3, #12]
      break;
 80086a8:	e00b      	b.n	80086c2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0210 	bic.w	r2, r2, #16
 80086b8:	60da      	str	r2, [r3, #12]
      break;
 80086ba:	e002      	b.n	80086c2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d156      	bne.n	8008776 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2200      	movs	r2, #0
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 f92d 	bl	8009930 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6a1a      	ldr	r2, [r3, #32]
 80086dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80086e0:	4013      	ands	r3, r2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10f      	bne.n	8008706 <HAL_TIM_IC_Stop_IT+0xe2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6a1a      	ldr	r2, [r3, #32]
 80086ec:	f240 4344 	movw	r3, #1092	; 0x444
 80086f0:	4013      	ands	r3, r2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <HAL_TIM_IC_Stop_IT+0xe2>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0201 	bic.w	r2, r2, #1
 8008704:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <HAL_TIM_IC_Stop_IT+0xf2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008714:	e013      	b.n	800873e <HAL_TIM_IC_Stop_IT+0x11a>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b04      	cmp	r3, #4
 800871a:	d104      	bne.n	8008726 <HAL_TIM_IC_Stop_IT+0x102>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008724:	e00b      	b.n	800873e <HAL_TIM_IC_Stop_IT+0x11a>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b08      	cmp	r3, #8
 800872a:	d104      	bne.n	8008736 <HAL_TIM_IC_Stop_IT+0x112>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008734:	e003      	b.n	800873e <HAL_TIM_IC_Stop_IT+0x11a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d104      	bne.n	800874e <HAL_TIM_IC_Stop_IT+0x12a>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800874c:	e013      	b.n	8008776 <HAL_TIM_IC_Stop_IT+0x152>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b04      	cmp	r3, #4
 8008752:	d104      	bne.n	800875e <HAL_TIM_IC_Stop_IT+0x13a>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800875c:	e00b      	b.n	8008776 <HAL_TIM_IC_Stop_IT+0x152>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b08      	cmp	r3, #8
 8008762:	d104      	bne.n	800876e <HAL_TIM_IC_Stop_IT+0x14a>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800876c:	e003      	b.n	8008776 <HAL_TIM_IC_Stop_IT+0x152>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e097      	b.n	80088c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d106      	bne.n	80087ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7fc fda9 	bl	8005300 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2202      	movs	r2, #2
 80087b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6812      	ldr	r2, [r2, #0]
 80087c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c4:	f023 0307 	bic.w	r3, r3, #7
 80087c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3304      	adds	r3, #4
 80087d2:	4619      	mov	r1, r3
 80087d4:	4610      	mov	r0, r2
 80087d6:	f000 fc97 	bl	8009108 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008802:	f023 0303 	bic.w	r3, r3, #3
 8008806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	4313      	orrs	r3, r2
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008820:	f023 030c 	bic.w	r3, r3, #12
 8008824:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800882c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	021b      	lsls	r3, r3, #8
 800883c:	4313      	orrs	r3, r2
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	4313      	orrs	r3, r2
 8008842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	011a      	lsls	r2, r3, #4
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	031b      	lsls	r3, r3, #12
 8008850:	4313      	orrs	r3, r2
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	4313      	orrs	r3, r2
 8008856:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800885e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008866:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	011b      	lsls	r3, r3, #4
 8008872:	4313      	orrs	r3, r2
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	4313      	orrs	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80088f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d110      	bne.n	800891e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d102      	bne.n	8008908 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008902:	7b7b      	ldrb	r3, [r7, #13]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d001      	beq.n	800890c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e069      	b.n	80089e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800891c:	e031      	b.n	8008982 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b04      	cmp	r3, #4
 8008922:	d110      	bne.n	8008946 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d102      	bne.n	8008930 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800892a:	7b3b      	ldrb	r3, [r7, #12]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d001      	beq.n	8008934 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e055      	b.n	80089e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008944:	e01d      	b.n	8008982 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d108      	bne.n	800895e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d105      	bne.n	800895e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008952:	7b7b      	ldrb	r3, [r7, #13]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d102      	bne.n	800895e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008958:	7b3b      	ldrb	r3, [r7, #12]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d001      	beq.n	8008962 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e03e      	b.n	80089e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2202      	movs	r2, #2
 800896e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2202      	movs	r2, #2
 8008976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2202      	movs	r2, #2
 800897e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <HAL_TIM_Encoder_Start+0xc4>
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b04      	cmp	r3, #4
 800898c:	d008      	beq.n	80089a0 <HAL_TIM_Encoder_Start+0xd4>
 800898e:	e00f      	b.n	80089b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2201      	movs	r2, #1
 8008996:	2100      	movs	r1, #0
 8008998:	4618      	mov	r0, r3
 800899a:	f000 ffc9 	bl	8009930 <TIM_CCxChannelCmd>
      break;
 800899e:	e016      	b.n	80089ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2201      	movs	r2, #1
 80089a6:	2104      	movs	r1, #4
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 ffc1 	bl	8009930 <TIM_CCxChannelCmd>
      break;
 80089ae:	e00e      	b.n	80089ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2201      	movs	r2, #1
 80089b6:	2100      	movs	r1, #0
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 ffb9 	bl	8009930 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2201      	movs	r2, #1
 80089c4:	2104      	movs	r1, #4
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 ffb2 	bl	8009930 <TIM_CCxChannelCmd>
      break;
 80089cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d122      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d11b      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f06f 0202 	mvn.w	r2, #2
 8008a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7f8 fff8 	bl	8001a20 <HAL_TIM_IC_CaptureCallback>
 8008a30:	e005      	b.n	8008a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fb4a 	bl	80090cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fb51 	bl	80090e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f003 0304 	and.w	r3, r3, #4
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d122      	bne.n	8008a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d11b      	bne.n	8008a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f06f 0204 	mvn.w	r2, #4
 8008a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7f8 ffce 	bl	8001a20 <HAL_TIM_IC_CaptureCallback>
 8008a84:	e005      	b.n	8008a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fb20 	bl	80090cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fb27 	bl	80090e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	2b08      	cmp	r3, #8
 8008aa4:	d122      	bne.n	8008aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f003 0308 	and.w	r3, r3, #8
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d11b      	bne.n	8008aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0208 	mvn.w	r2, #8
 8008abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2204      	movs	r2, #4
 8008ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7f8 ffa4 	bl	8001a20 <HAL_TIM_IC_CaptureCallback>
 8008ad8:	e005      	b.n	8008ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 faf6 	bl	80090cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fafd 	bl	80090e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f003 0310 	and.w	r3, r3, #16
 8008af6:	2b10      	cmp	r3, #16
 8008af8:	d122      	bne.n	8008b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	2b10      	cmp	r3, #16
 8008b06:	d11b      	bne.n	8008b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f06f 0210 	mvn.w	r2, #16
 8008b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2208      	movs	r2, #8
 8008b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7f8 ff7a 	bl	8001a20 <HAL_TIM_IC_CaptureCallback>
 8008b2c:	e005      	b.n	8008b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 facc 	bl	80090cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fad3 	bl	80090e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d10e      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d107      	bne.n	8008b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f06f 0201 	mvn.w	r2, #1
 8008b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7fc fa10 	bl	8004f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b76:	2b80      	cmp	r3, #128	; 0x80
 8008b78:	d10e      	bne.n	8008b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b84:	2b80      	cmp	r3, #128	; 0x80
 8008b86:	d107      	bne.n	8008b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 ffca 	bl	8009b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba2:	2b40      	cmp	r3, #64	; 0x40
 8008ba4:	d10e      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb0:	2b40      	cmp	r3, #64	; 0x40
 8008bb2:	d107      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fa98 	bl	80090f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f003 0320 	and.w	r3, r3, #32
 8008bce:	2b20      	cmp	r3, #32
 8008bd0:	d10e      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f003 0320 	and.w	r3, r3, #32
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	d107      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f06f 0220 	mvn.w	r2, #32
 8008be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 ff94 	bl	8009b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d101      	bne.n	8008c16 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e088      	b.n	8008d28 <HAL_TIM_IC_ConfigChannel+0x130>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d11b      	bne.n	8008c5c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6818      	ldr	r0, [r3, #0]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	6819      	ldr	r1, [r3, #0]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f000 fcb8 	bl	80095a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 020c 	bic.w	r2, r2, #12
 8008c46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6999      	ldr	r1, [r3, #24]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	619a      	str	r2, [r3, #24]
 8008c5a:	e060      	b.n	8008d1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	d11c      	bne.n	8008c9c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6819      	ldr	r1, [r3, #0]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	f000 fd3c 	bl	80096ee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6999      	ldr	r1, [r3, #24]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	021a      	lsls	r2, r3, #8
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	619a      	str	r2, [r3, #24]
 8008c9a:	e040      	b.n	8008d1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d11b      	bne.n	8008cda <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6819      	ldr	r1, [r3, #0]
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f000 fd89 	bl	80097c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69da      	ldr	r2, [r3, #28]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 020c 	bic.w	r2, r2, #12
 8008cc4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	69d9      	ldr	r1, [r3, #28]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	689a      	ldr	r2, [r3, #8]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	61da      	str	r2, [r3, #28]
 8008cd8:	e021      	b.n	8008d1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b0c      	cmp	r3, #12
 8008cde:	d11c      	bne.n	8008d1a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6819      	ldr	r1, [r3, #0]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f000 fda6 	bl	8009840 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69da      	ldr	r2, [r3, #28]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008d02:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	69d9      	ldr	r1, [r3, #28]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	021a      	lsls	r2, r3, #8
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	61da      	str	r2, [r3, #28]
 8008d18:	e001      	b.n	8008d1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e0ae      	b.n	8008eac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b0c      	cmp	r3, #12
 8008d5a:	f200 809f 	bhi.w	8008e9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008d5e:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008d99 	.word	0x08008d99
 8008d68:	08008e9d 	.word	0x08008e9d
 8008d6c:	08008e9d 	.word	0x08008e9d
 8008d70:	08008e9d 	.word	0x08008e9d
 8008d74:	08008dd9 	.word	0x08008dd9
 8008d78:	08008e9d 	.word	0x08008e9d
 8008d7c:	08008e9d 	.word	0x08008e9d
 8008d80:	08008e9d 	.word	0x08008e9d
 8008d84:	08008e1b 	.word	0x08008e1b
 8008d88:	08008e9d 	.word	0x08008e9d
 8008d8c:	08008e9d 	.word	0x08008e9d
 8008d90:	08008e9d 	.word	0x08008e9d
 8008d94:	08008e5b 	.word	0x08008e5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68b9      	ldr	r1, [r7, #8]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 fa52 	bl	8009248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	699a      	ldr	r2, [r3, #24]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 0208 	orr.w	r2, r2, #8
 8008db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	699a      	ldr	r2, [r3, #24]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f022 0204 	bic.w	r2, r2, #4
 8008dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6999      	ldr	r1, [r3, #24]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	691a      	ldr	r2, [r3, #16]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	619a      	str	r2, [r3, #24]
      break;
 8008dd6:	e064      	b.n	8008ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68b9      	ldr	r1, [r7, #8]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 faa2 	bl	8009328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	699a      	ldr	r2, [r3, #24]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	699a      	ldr	r2, [r3, #24]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6999      	ldr	r1, [r3, #24]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	021a      	lsls	r2, r3, #8
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	430a      	orrs	r2, r1
 8008e16:	619a      	str	r2, [r3, #24]
      break;
 8008e18:	e043      	b.n	8008ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 faf7 	bl	8009414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69da      	ldr	r2, [r3, #28]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0208 	orr.w	r2, r2, #8
 8008e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69da      	ldr	r2, [r3, #28]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0204 	bic.w	r2, r2, #4
 8008e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	69d9      	ldr	r1, [r3, #28]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	61da      	str	r2, [r3, #28]
      break;
 8008e58:	e023      	b.n	8008ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68b9      	ldr	r1, [r7, #8]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fb4b 	bl	80094fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69da      	ldr	r2, [r3, #28]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69da      	ldr	r2, [r3, #28]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	69d9      	ldr	r1, [r3, #28]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	021a      	lsls	r2, r3, #8
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	61da      	str	r2, [r3, #28]
      break;
 8008e9a:	e002      	b.n	8008ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d101      	bne.n	8008ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e0b4      	b.n	800903a <HAL_TIM_ConfigClockSource+0x186>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f08:	d03e      	beq.n	8008f88 <HAL_TIM_ConfigClockSource+0xd4>
 8008f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f0e:	f200 8087 	bhi.w	8009020 <HAL_TIM_ConfigClockSource+0x16c>
 8008f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f16:	f000 8086 	beq.w	8009026 <HAL_TIM_ConfigClockSource+0x172>
 8008f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f1e:	d87f      	bhi.n	8009020 <HAL_TIM_ConfigClockSource+0x16c>
 8008f20:	2b70      	cmp	r3, #112	; 0x70
 8008f22:	d01a      	beq.n	8008f5a <HAL_TIM_ConfigClockSource+0xa6>
 8008f24:	2b70      	cmp	r3, #112	; 0x70
 8008f26:	d87b      	bhi.n	8009020 <HAL_TIM_ConfigClockSource+0x16c>
 8008f28:	2b60      	cmp	r3, #96	; 0x60
 8008f2a:	d050      	beq.n	8008fce <HAL_TIM_ConfigClockSource+0x11a>
 8008f2c:	2b60      	cmp	r3, #96	; 0x60
 8008f2e:	d877      	bhi.n	8009020 <HAL_TIM_ConfigClockSource+0x16c>
 8008f30:	2b50      	cmp	r3, #80	; 0x50
 8008f32:	d03c      	beq.n	8008fae <HAL_TIM_ConfigClockSource+0xfa>
 8008f34:	2b50      	cmp	r3, #80	; 0x50
 8008f36:	d873      	bhi.n	8009020 <HAL_TIM_ConfigClockSource+0x16c>
 8008f38:	2b40      	cmp	r3, #64	; 0x40
 8008f3a:	d058      	beq.n	8008fee <HAL_TIM_ConfigClockSource+0x13a>
 8008f3c:	2b40      	cmp	r3, #64	; 0x40
 8008f3e:	d86f      	bhi.n	8009020 <HAL_TIM_ConfigClockSource+0x16c>
 8008f40:	2b30      	cmp	r3, #48	; 0x30
 8008f42:	d064      	beq.n	800900e <HAL_TIM_ConfigClockSource+0x15a>
 8008f44:	2b30      	cmp	r3, #48	; 0x30
 8008f46:	d86b      	bhi.n	8009020 <HAL_TIM_ConfigClockSource+0x16c>
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	d060      	beq.n	800900e <HAL_TIM_ConfigClockSource+0x15a>
 8008f4c:	2b20      	cmp	r3, #32
 8008f4e:	d867      	bhi.n	8009020 <HAL_TIM_ConfigClockSource+0x16c>
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d05c      	beq.n	800900e <HAL_TIM_ConfigClockSource+0x15a>
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d05a      	beq.n	800900e <HAL_TIM_ConfigClockSource+0x15a>
 8008f58:	e062      	b.n	8009020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	6899      	ldr	r1, [r3, #8]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f000 fcc1 	bl	80098f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	609a      	str	r2, [r3, #8]
      break;
 8008f86:	e04f      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6818      	ldr	r0, [r3, #0]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	6899      	ldr	r1, [r3, #8]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f000 fcaa 	bl	80098f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008faa:	609a      	str	r2, [r3, #8]
      break;
 8008fac:	e03c      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6818      	ldr	r0, [r3, #0]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	6859      	ldr	r1, [r3, #4]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f000 fb68 	bl	8009690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2150      	movs	r1, #80	; 0x50
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fc77 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 8008fcc:	e02c      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	6859      	ldr	r1, [r3, #4]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f000 fbc4 	bl	8009768 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2160      	movs	r1, #96	; 0x60
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fc67 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 8008fec:	e01c      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	6859      	ldr	r1, [r3, #4]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f000 fb48 	bl	8009690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2140      	movs	r1, #64	; 0x40
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fc57 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 800900c:	e00c      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4619      	mov	r1, r3
 8009018:	4610      	mov	r0, r2
 800901a:	f000 fc4e 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 800901e:	e003      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	73fb      	strb	r3, [r7, #15]
      break;
 8009024:	e000      	b.n	8009028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b0c      	cmp	r3, #12
 8009056:	d831      	bhi.n	80090bc <HAL_TIM_ReadCapturedValue+0x78>
 8009058:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <HAL_TIM_ReadCapturedValue+0x1c>)
 800905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905e:	bf00      	nop
 8009060:	08009095 	.word	0x08009095
 8009064:	080090bd 	.word	0x080090bd
 8009068:	080090bd 	.word	0x080090bd
 800906c:	080090bd 	.word	0x080090bd
 8009070:	0800909f 	.word	0x0800909f
 8009074:	080090bd 	.word	0x080090bd
 8009078:	080090bd 	.word	0x080090bd
 800907c:	080090bd 	.word	0x080090bd
 8009080:	080090a9 	.word	0x080090a9
 8009084:	080090bd 	.word	0x080090bd
 8009088:	080090bd 	.word	0x080090bd
 800908c:	080090bd 	.word	0x080090bd
 8009090:	080090b3 	.word	0x080090b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909a:	60fb      	str	r3, [r7, #12]

      break;
 800909c:	e00f      	b.n	80090be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	60fb      	str	r3, [r7, #12]

      break;
 80090a6:	e00a      	b.n	80090be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ae:	60fb      	str	r3, [r7, #12]

      break;
 80090b0:	e005      	b.n	80090be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b8:	60fb      	str	r3, [r7, #12]

      break;
 80090ba:	e000      	b.n	80090be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80090bc:	bf00      	nop
  }

  return tmpreg;
 80090be:	68fb      	ldr	r3, [r7, #12]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a40      	ldr	r2, [pc, #256]	; (800921c <TIM_Base_SetConfig+0x114>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d013      	beq.n	8009148 <TIM_Base_SetConfig+0x40>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009126:	d00f      	beq.n	8009148 <TIM_Base_SetConfig+0x40>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a3d      	ldr	r2, [pc, #244]	; (8009220 <TIM_Base_SetConfig+0x118>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d00b      	beq.n	8009148 <TIM_Base_SetConfig+0x40>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a3c      	ldr	r2, [pc, #240]	; (8009224 <TIM_Base_SetConfig+0x11c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d007      	beq.n	8009148 <TIM_Base_SetConfig+0x40>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a3b      	ldr	r2, [pc, #236]	; (8009228 <TIM_Base_SetConfig+0x120>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d003      	beq.n	8009148 <TIM_Base_SetConfig+0x40>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a3a      	ldr	r2, [pc, #232]	; (800922c <TIM_Base_SetConfig+0x124>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d108      	bne.n	800915a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800914e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a2f      	ldr	r2, [pc, #188]	; (800921c <TIM_Base_SetConfig+0x114>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d02b      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009168:	d027      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a2c      	ldr	r2, [pc, #176]	; (8009220 <TIM_Base_SetConfig+0x118>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d023      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a2b      	ldr	r2, [pc, #172]	; (8009224 <TIM_Base_SetConfig+0x11c>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d01f      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a2a      	ldr	r2, [pc, #168]	; (8009228 <TIM_Base_SetConfig+0x120>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d01b      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a29      	ldr	r2, [pc, #164]	; (800922c <TIM_Base_SetConfig+0x124>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d017      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a28      	ldr	r2, [pc, #160]	; (8009230 <TIM_Base_SetConfig+0x128>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a27      	ldr	r2, [pc, #156]	; (8009234 <TIM_Base_SetConfig+0x12c>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00f      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a26      	ldr	r2, [pc, #152]	; (8009238 <TIM_Base_SetConfig+0x130>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d00b      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a25      	ldr	r2, [pc, #148]	; (800923c <TIM_Base_SetConfig+0x134>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d007      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a24      	ldr	r2, [pc, #144]	; (8009240 <TIM_Base_SetConfig+0x138>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d003      	beq.n	80091ba <TIM_Base_SetConfig+0xb2>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a23      	ldr	r2, [pc, #140]	; (8009244 <TIM_Base_SetConfig+0x13c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d108      	bne.n	80091cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a0a      	ldr	r2, [pc, #40]	; (800921c <TIM_Base_SetConfig+0x114>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d003      	beq.n	8009200 <TIM_Base_SetConfig+0xf8>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a0c      	ldr	r2, [pc, #48]	; (800922c <TIM_Base_SetConfig+0x124>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d103      	bne.n	8009208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	691a      	ldr	r2, [r3, #16]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	615a      	str	r2, [r3, #20]
}
 800920e:	bf00      	nop
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	40010000 	.word	0x40010000
 8009220:	40000400 	.word	0x40000400
 8009224:	40000800 	.word	0x40000800
 8009228:	40000c00 	.word	0x40000c00
 800922c:	40010400 	.word	0x40010400
 8009230:	40014000 	.word	0x40014000
 8009234:	40014400 	.word	0x40014400
 8009238:	40014800 	.word	0x40014800
 800923c:	40001800 	.word	0x40001800
 8009240:	40001c00 	.word	0x40001c00
 8009244:	40002000 	.word	0x40002000

08009248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f023 0201 	bic.w	r2, r3, #1
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0303 	bic.w	r3, r3, #3
 800927e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f023 0302 	bic.w	r3, r3, #2
 8009290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	4313      	orrs	r3, r2
 800929a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a20      	ldr	r2, [pc, #128]	; (8009320 <TIM_OC1_SetConfig+0xd8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d003      	beq.n	80092ac <TIM_OC1_SetConfig+0x64>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a1f      	ldr	r2, [pc, #124]	; (8009324 <TIM_OC1_SetConfig+0xdc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d10c      	bne.n	80092c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f023 0308 	bic.w	r3, r3, #8
 80092b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f023 0304 	bic.w	r3, r3, #4
 80092c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a15      	ldr	r2, [pc, #84]	; (8009320 <TIM_OC1_SetConfig+0xd8>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d003      	beq.n	80092d6 <TIM_OC1_SetConfig+0x8e>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a14      	ldr	r2, [pc, #80]	; (8009324 <TIM_OC1_SetConfig+0xdc>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d111      	bne.n	80092fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	621a      	str	r2, [r3, #32]
}
 8009314:	bf00      	nop
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	40010000 	.word	0x40010000
 8009324:	40010400 	.word	0x40010400

08009328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	f023 0210 	bic.w	r2, r3, #16
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800935e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	021b      	lsls	r3, r3, #8
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	4313      	orrs	r3, r2
 800936a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f023 0320 	bic.w	r3, r3, #32
 8009372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	4313      	orrs	r3, r2
 800937e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a22      	ldr	r2, [pc, #136]	; (800940c <TIM_OC2_SetConfig+0xe4>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d003      	beq.n	8009390 <TIM_OC2_SetConfig+0x68>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a21      	ldr	r2, [pc, #132]	; (8009410 <TIM_OC2_SetConfig+0xe8>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d10d      	bne.n	80093ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a17      	ldr	r2, [pc, #92]	; (800940c <TIM_OC2_SetConfig+0xe4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d003      	beq.n	80093bc <TIM_OC2_SetConfig+0x94>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a16      	ldr	r2, [pc, #88]	; (8009410 <TIM_OC2_SetConfig+0xe8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d113      	bne.n	80093e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	693a      	ldr	r2, [r7, #16]
 80093e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	621a      	str	r2, [r3, #32]
}
 80093fe:	bf00      	nop
 8009400:	371c      	adds	r7, #28
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	40010000 	.word	0x40010000
 8009410:	40010400 	.word	0x40010400

08009414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0303 	bic.w	r3, r3, #3
 800944a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800945c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	4313      	orrs	r3, r2
 8009468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a21      	ldr	r2, [pc, #132]	; (80094f4 <TIM_OC3_SetConfig+0xe0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d003      	beq.n	800947a <TIM_OC3_SetConfig+0x66>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a20      	ldr	r2, [pc, #128]	; (80094f8 <TIM_OC3_SetConfig+0xe4>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d10d      	bne.n	8009496 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	021b      	lsls	r3, r3, #8
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	4313      	orrs	r3, r2
 800948c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a16      	ldr	r2, [pc, #88]	; (80094f4 <TIM_OC3_SetConfig+0xe0>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d003      	beq.n	80094a6 <TIM_OC3_SetConfig+0x92>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a15      	ldr	r2, [pc, #84]	; (80094f8 <TIM_OC3_SetConfig+0xe4>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d113      	bne.n	80094ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4313      	orrs	r3, r2
 80094c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	621a      	str	r2, [r3, #32]
}
 80094e8:	bf00      	nop
 80094ea:	371c      	adds	r7, #28
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	40010000 	.word	0x40010000
 80094f8:	40010400 	.word	0x40010400

080094fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800952a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	021b      	lsls	r3, r3, #8
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4313      	orrs	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	031b      	lsls	r3, r3, #12
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	4313      	orrs	r3, r2
 8009552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a12      	ldr	r2, [pc, #72]	; (80095a0 <TIM_OC4_SetConfig+0xa4>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d003      	beq.n	8009564 <TIM_OC4_SetConfig+0x68>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a11      	ldr	r2, [pc, #68]	; (80095a4 <TIM_OC4_SetConfig+0xa8>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d109      	bne.n	8009578 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800956a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	019b      	lsls	r3, r3, #6
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	4313      	orrs	r3, r2
 8009576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	621a      	str	r2, [r3, #32]
}
 8009592:	bf00      	nop
 8009594:	371c      	adds	r7, #28
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	40010000 	.word	0x40010000
 80095a4:	40010400 	.word	0x40010400

080095a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f023 0201 	bic.w	r2, r3, #1
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	4a28      	ldr	r2, [pc, #160]	; (8009674 <TIM_TI1_SetConfig+0xcc>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d01b      	beq.n	800960e <TIM_TI1_SetConfig+0x66>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095dc:	d017      	beq.n	800960e <TIM_TI1_SetConfig+0x66>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4a25      	ldr	r2, [pc, #148]	; (8009678 <TIM_TI1_SetConfig+0xd0>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d013      	beq.n	800960e <TIM_TI1_SetConfig+0x66>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4a24      	ldr	r2, [pc, #144]	; (800967c <TIM_TI1_SetConfig+0xd4>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d00f      	beq.n	800960e <TIM_TI1_SetConfig+0x66>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4a23      	ldr	r2, [pc, #140]	; (8009680 <TIM_TI1_SetConfig+0xd8>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d00b      	beq.n	800960e <TIM_TI1_SetConfig+0x66>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4a22      	ldr	r2, [pc, #136]	; (8009684 <TIM_TI1_SetConfig+0xdc>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d007      	beq.n	800960e <TIM_TI1_SetConfig+0x66>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4a21      	ldr	r2, [pc, #132]	; (8009688 <TIM_TI1_SetConfig+0xe0>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d003      	beq.n	800960e <TIM_TI1_SetConfig+0x66>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4a20      	ldr	r2, [pc, #128]	; (800968c <TIM_TI1_SetConfig+0xe4>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d101      	bne.n	8009612 <TIM_TI1_SetConfig+0x6a>
 800960e:	2301      	movs	r3, #1
 8009610:	e000      	b.n	8009614 <TIM_TI1_SetConfig+0x6c>
 8009612:	2300      	movs	r3, #0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d008      	beq.n	800962a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f023 0303 	bic.w	r3, r3, #3
 800961e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]
 8009628:	e003      	b.n	8009632 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f043 0301 	orr.w	r3, r3, #1
 8009630:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	011b      	lsls	r3, r3, #4
 800963e:	b2db      	uxtb	r3, r3
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	4313      	orrs	r3, r2
 8009644:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f023 030a 	bic.w	r3, r3, #10
 800964c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f003 030a 	and.w	r3, r3, #10
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	4313      	orrs	r3, r2
 8009658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	621a      	str	r2, [r3, #32]
}
 8009666:	bf00      	nop
 8009668:	371c      	adds	r7, #28
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	40010000 	.word	0x40010000
 8009678:	40000400 	.word	0x40000400
 800967c:	40000800 	.word	0x40000800
 8009680:	40000c00 	.word	0x40000c00
 8009684:	40010400 	.word	0x40010400
 8009688:	40014000 	.word	0x40014000
 800968c:	40001800 	.word	0x40001800

08009690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009690:	b480      	push	{r7}
 8009692:	b087      	sub	sp, #28
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	f023 0201 	bic.w	r2, r3, #1
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f023 030a 	bic.w	r3, r3, #10
 80096cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	621a      	str	r2, [r3, #32]
}
 80096e2:	bf00      	nop
 80096e4:	371c      	adds	r7, #28
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b087      	sub	sp, #28
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	f023 0210 	bic.w	r2, r3, #16
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800971a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	021b      	lsls	r3, r3, #8
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800972c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	031b      	lsls	r3, r3, #12
 8009732:	b29b      	uxth	r3, r3
 8009734:	697a      	ldr	r2, [r7, #20]
 8009736:	4313      	orrs	r3, r2
 8009738:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009740:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	011b      	lsls	r3, r3, #4
 8009746:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	4313      	orrs	r3, r2
 800974e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	621a      	str	r2, [r3, #32]
}
 800975c:	bf00      	nop
 800975e:	371c      	adds	r7, #28
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009768:	b480      	push	{r7}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	f023 0210 	bic.w	r2, r3, #16
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009792:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	031b      	lsls	r3, r3, #12
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	4313      	orrs	r3, r2
 800979c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	011b      	lsls	r3, r3, #4
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	621a      	str	r2, [r3, #32]
}
 80097bc:	bf00      	nop
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f023 0303 	bic.w	r3, r3, #3
 80097f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009804:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	011b      	lsls	r3, r3, #4
 800980a:	b2db      	uxtb	r3, r3
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	4313      	orrs	r3, r2
 8009810:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009818:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	021b      	lsls	r3, r3, #8
 800981e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4313      	orrs	r3, r2
 8009826:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	621a      	str	r2, [r3, #32]
}
 8009834:	bf00      	nop
 8009836:	371c      	adds	r7, #28
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6a1b      	ldr	r3, [r3, #32]
 8009864:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800986c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	021b      	lsls	r3, r3, #8
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	4313      	orrs	r3, r2
 8009876:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800987e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	031b      	lsls	r3, r3, #12
 8009884:	b29b      	uxth	r3, r3
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	4313      	orrs	r3, r2
 800988a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009892:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	031b      	lsls	r3, r3, #12
 8009898:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	4313      	orrs	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	f043 0307 	orr.w	r3, r3, #7
 80098dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	609a      	str	r2, [r3, #8]
}
 80098e4:	bf00      	nop
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800990a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	021a      	lsls	r2, r3, #8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	431a      	orrs	r2, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4313      	orrs	r3, r2
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	609a      	str	r2, [r3, #8]
}
 8009924:	bf00      	nop
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f003 031f 	and.w	r3, r3, #31
 8009942:	2201      	movs	r2, #1
 8009944:	fa02 f303 	lsl.w	r3, r2, r3
 8009948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a1a      	ldr	r2, [r3, #32]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	43db      	mvns	r3, r3
 8009952:	401a      	ands	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6a1a      	ldr	r2, [r3, #32]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f003 031f 	and.w	r3, r3, #31
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	fa01 f303 	lsl.w	r3, r1, r3
 8009968:	431a      	orrs	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	621a      	str	r2, [r3, #32]
}
 800996e:	bf00      	nop
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
	...

0800997c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009990:	2302      	movs	r3, #2
 8009992:	e05a      	b.n	8009a4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a21      	ldr	r2, [pc, #132]	; (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d022      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e0:	d01d      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a1d      	ldr	r2, [pc, #116]	; (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d018      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a1b      	ldr	r2, [pc, #108]	; (8009a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d013      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00e      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a18      	ldr	r2, [pc, #96]	; (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d009      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a17      	ldr	r2, [pc, #92]	; (8009a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d004      	beq.n	8009a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a15      	ldr	r2, [pc, #84]	; (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d10c      	bne.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	40010000 	.word	0x40010000
 8009a5c:	40000400 	.word	0x40000400
 8009a60:	40000800 	.word	0x40000800
 8009a64:	40000c00 	.word	0x40000c00
 8009a68:	40010400 	.word	0x40010400
 8009a6c:	40014000 	.word	0x40014000
 8009a70:	40001800 	.word	0x40001800

08009a74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e03d      	b.n	8009b0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e03f      	b.n	8009bd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d106      	bne.n	8009b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7fb fc6a 	bl	8005440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2224      	movs	r2, #36	; 0x24
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fddf 	bl	800a748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	691a      	ldr	r2, [r3, #16]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	695a      	ldr	r2, [r3, #20]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b08a      	sub	sp, #40	; 0x28
 8009bde:	af02      	add	r7, sp, #8
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	603b      	str	r3, [r7, #0]
 8009be6:	4613      	mov	r3, r2
 8009be8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d17c      	bne.n	8009cf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <HAL_UART_Transmit+0x2c>
 8009c00:	88fb      	ldrh	r3, [r7, #6]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e075      	b.n	8009cf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d101      	bne.n	8009c18 <HAL_UART_Transmit+0x3e>
 8009c14:	2302      	movs	r3, #2
 8009c16:	e06e      	b.n	8009cf6 <HAL_UART_Transmit+0x11c>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2221      	movs	r2, #33	; 0x21
 8009c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c2e:	f7fb fd95 	bl	800575c <HAL_GetTick>
 8009c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	88fa      	ldrh	r2, [r7, #6]
 8009c38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	88fa      	ldrh	r2, [r7, #6]
 8009c3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c48:	d108      	bne.n	8009c5c <HAL_UART_Transmit+0x82>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d104      	bne.n	8009c5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	61bb      	str	r3, [r7, #24]
 8009c5a:	e003      	b.n	8009c64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009c6c:	e02a      	b.n	8009cc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2200      	movs	r2, #0
 8009c76:	2180      	movs	r1, #128	; 0x80
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 fb1f 	bl	800a2bc <UART_WaitOnFlagUntilTimeout>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e036      	b.n	8009cf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10b      	bne.n	8009ca6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	3302      	adds	r3, #2
 8009ca2:	61bb      	str	r3, [r7, #24]
 8009ca4:	e007      	b.n	8009cb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	781a      	ldrb	r2, [r3, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1cf      	bne.n	8009c6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2140      	movs	r1, #64	; 0x40
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 faef 	bl	800a2bc <UART_WaitOnFlagUntilTimeout>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e006      	b.n	8009cf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	e000      	b.n	8009cf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009cf4:	2302      	movs	r3, #2
  }
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3720      	adds	r7, #32
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	60b9      	str	r1, [r7, #8]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d11d      	bne.n	8009d54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <HAL_UART_Receive_IT+0x26>
 8009d1e:	88fb      	ldrh	r3, [r7, #6]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e016      	b.n	8009d56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <HAL_UART_Receive_IT+0x38>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e00f      	b.n	8009d56 <HAL_UART_Receive_IT+0x58>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d44:	88fb      	ldrh	r3, [r7, #6]
 8009d46:	461a      	mov	r2, r3
 8009d48:	68b9      	ldr	r1, [r7, #8]
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f000 fb24 	bl	800a398 <UART_Start_Receive_IT>
 8009d50:	4603      	mov	r3, r0
 8009d52:	e000      	b.n	8009d56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009d54:	2302      	movs	r3, #2
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b0ba      	sub	sp, #232	; 0xe8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d96:	f003 030f 	and.w	r3, r3, #15
 8009d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10f      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d009      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x66>
 8009db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db6:	f003 0320 	and.w	r3, r3, #32
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fc07 	bl	800a5d2 <UART_Receive_IT>
      return;
 8009dc4:	e256      	b.n	800a274 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 80de 	beq.w	8009f8c <HAL_UART_IRQHandler+0x22c>
 8009dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d106      	bne.n	8009dea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 80d1 	beq.w	8009f8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00b      	beq.n	8009e0e <HAL_UART_IRQHandler+0xae>
 8009df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d005      	beq.n	8009e0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e06:	f043 0201 	orr.w	r2, r3, #1
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00b      	beq.n	8009e32 <HAL_UART_IRQHandler+0xd2>
 8009e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d005      	beq.n	8009e32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2a:	f043 0202 	orr.w	r2, r3, #2
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <HAL_UART_IRQHandler+0xf6>
 8009e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	f043 0204 	orr.w	r2, r3, #4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d011      	beq.n	8009e86 <HAL_UART_IRQHandler+0x126>
 8009e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d105      	bne.n	8009e7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d005      	beq.n	8009e86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	f043 0208 	orr.w	r2, r3, #8
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 81ed 	beq.w	800a26a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e94:	f003 0320 	and.w	r3, r3, #32
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d008      	beq.n	8009eae <HAL_UART_IRQHandler+0x14e>
 8009e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea0:	f003 0320 	and.w	r3, r3, #32
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fb92 	bl	800a5d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b40      	cmp	r3, #64	; 0x40
 8009eba:	bf0c      	ite	eq
 8009ebc:	2301      	moveq	r3, #1
 8009ebe:	2300      	movne	r3, #0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	f003 0308 	and.w	r3, r3, #8
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d103      	bne.n	8009eda <HAL_UART_IRQHandler+0x17a>
 8009ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d04f      	beq.n	8009f7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa9a 	bl	800a414 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eea:	2b40      	cmp	r3, #64	; 0x40
 8009eec:	d141      	bne.n	8009f72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3314      	adds	r3, #20
 8009ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3314      	adds	r3, #20
 8009f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1d9      	bne.n	8009eee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d013      	beq.n	8009f6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f46:	4a7d      	ldr	r2, [pc, #500]	; (800a13c <HAL_UART_IRQHandler+0x3dc>)
 8009f48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fc f952 	bl	80061f8 <HAL_DMA_Abort_IT>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d016      	beq.n	8009f88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f64:	4610      	mov	r0, r2
 8009f66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f68:	e00e      	b.n	8009f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f990 	bl	800a290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f70:	e00a      	b.n	8009f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f98c 	bl	800a290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f78:	e006      	b.n	8009f88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f988 	bl	800a290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f86:	e170      	b.n	800a26a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f88:	bf00      	nop
    return;
 8009f8a:	e16e      	b.n	800a26a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	f040 814a 	bne.w	800a22a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f9a:	f003 0310 	and.w	r3, r3, #16
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 8143 	beq.w	800a22a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fa8:	f003 0310 	and.w	r3, r3, #16
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 813c 	beq.w	800a22a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	60bb      	str	r3, [r7, #8]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	60bb      	str	r3, [r7, #8]
 8009fc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd2:	2b40      	cmp	r3, #64	; 0x40
 8009fd4:	f040 80b4 	bne.w	800a140 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 8140 	beq.w	800a26e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	f080 8139 	bcs.w	800a26e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a002:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00e:	f000 8088 	beq.w	800a122 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	330c      	adds	r3, #12
 800a018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a02c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	330c      	adds	r3, #12
 800a03a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a03e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a04a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1d9      	bne.n	800a012 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3314      	adds	r3, #20
 800a064:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a06e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a070:	f023 0301 	bic.w	r3, r3, #1
 800a074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3314      	adds	r3, #20
 800a07e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a082:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a086:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a08a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e1      	bne.n	800a05e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3314      	adds	r3, #20
 800a0a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0a4:	e853 3f00 	ldrex	r3, [r3]
 800a0a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	3314      	adds	r3, #20
 800a0ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0c6:	e841 2300 	strex	r3, r2, [r1]
 800a0ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1e3      	bne.n	800a09a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	330c      	adds	r3, #12
 800a0e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ea:	e853 3f00 	ldrex	r3, [r3]
 800a0ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0f2:	f023 0310 	bic.w	r3, r3, #16
 800a0f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	330c      	adds	r3, #12
 800a100:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a104:	65ba      	str	r2, [r7, #88]	; 0x58
 800a106:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a108:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a10a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a10c:	e841 2300 	strex	r3, r2, [r1]
 800a110:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1e3      	bne.n	800a0e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fb fffb 	bl	8006118 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f8b6 	bl	800a2a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a138:	e099      	b.n	800a26e <HAL_UART_IRQHandler+0x50e>
 800a13a:	bf00      	nop
 800a13c:	0800a4db 	.word	0x0800a4db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a148:	b29b      	uxth	r3, r3
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a154:	b29b      	uxth	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 808b 	beq.w	800a272 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a15c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 8086 	beq.w	800a272 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	330c      	adds	r3, #12
 800a16c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a17c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	330c      	adds	r3, #12
 800a186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a18a:	647a      	str	r2, [r7, #68]	; 0x44
 800a18c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a192:	e841 2300 	strex	r3, r2, [r1]
 800a196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e3      	bne.n	800a166 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3314      	adds	r3, #20
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3314      	adds	r3, #20
 800a1be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1c2:	633a      	str	r2, [r7, #48]	; 0x30
 800a1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e3      	bne.n	800a19e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	330c      	adds	r3, #12
 800a1ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0310 	bic.w	r3, r3, #16
 800a1fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	330c      	adds	r3, #12
 800a204:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a208:	61fa      	str	r2, [r7, #28]
 800a20a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	69b9      	ldr	r1, [r7, #24]
 800a20e:	69fa      	ldr	r2, [r7, #28]
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	617b      	str	r3, [r7, #20]
   return(result);
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e3      	bne.n	800a1e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a21c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f83e 	bl	800a2a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a228:	e023      	b.n	800a272 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a232:	2b00      	cmp	r3, #0
 800a234:	d009      	beq.n	800a24a <HAL_UART_IRQHandler+0x4ea>
 800a236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f95d 	bl	800a502 <UART_Transmit_IT>
    return;
 800a248:	e014      	b.n	800a274 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00e      	beq.n	800a274 <HAL_UART_IRQHandler+0x514>
 800a256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d008      	beq.n	800a274 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f99d 	bl	800a5a2 <UART_EndTransmit_IT>
    return;
 800a268:	e004      	b.n	800a274 <HAL_UART_IRQHandler+0x514>
    return;
 800a26a:	bf00      	nop
 800a26c:	e002      	b.n	800a274 <HAL_UART_IRQHandler+0x514>
      return;
 800a26e:	bf00      	nop
 800a270:	e000      	b.n	800a274 <HAL_UART_IRQHandler+0x514>
      return;
 800a272:	bf00      	nop
  }
}
 800a274:	37e8      	adds	r7, #232	; 0xe8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop

0800a27c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b090      	sub	sp, #64	; 0x40
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2cc:	e050      	b.n	800a370 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d4:	d04c      	beq.n	800a370 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d007      	beq.n	800a2ec <UART_WaitOnFlagUntilTimeout+0x30>
 800a2dc:	f7fb fa3e 	bl	800575c <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d241      	bcs.n	800a370 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	e853 3f00 	ldrex	r3, [r3]
 800a2fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	330c      	adds	r3, #12
 800a30a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a30c:	637a      	str	r2, [r7, #52]	; 0x34
 800a30e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e5      	bne.n	800a2ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3314      	adds	r3, #20
 800a326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	613b      	str	r3, [r7, #16]
   return(result);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f023 0301 	bic.w	r3, r3, #1
 800a336:	63bb      	str	r3, [r7, #56]	; 0x38
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3314      	adds	r3, #20
 800a33e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a340:	623a      	str	r2, [r7, #32]
 800a342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	69f9      	ldr	r1, [r7, #28]
 800a346:	6a3a      	ldr	r2, [r7, #32]
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e5      	bne.n	800a320 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2220      	movs	r2, #32
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2220      	movs	r2, #32
 800a360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e00f      	b.n	800a390 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	4013      	ands	r3, r2
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	bf0c      	ite	eq
 800a380:	2301      	moveq	r3, #1
 800a382:	2300      	movne	r3, #0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	461a      	mov	r2, r3
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d09f      	beq.n	800a2ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3740      	adds	r7, #64	; 0x40
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	88fa      	ldrh	r2, [r7, #6]
 800a3b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	88fa      	ldrh	r2, [r7, #6]
 800a3b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2222      	movs	r2, #34	; 0x22
 800a3c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	695a      	ldr	r2, [r3, #20]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f042 0201 	orr.w	r2, r2, #1
 800a3f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f042 0220 	orr.w	r2, r2, #32
 800a404:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a414:	b480      	push	{r7}
 800a416:	b095      	sub	sp, #84	; 0x54
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	330c      	adds	r3, #12
 800a422:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a426:	e853 3f00 	ldrex	r3, [r3]
 800a42a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a432:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	330c      	adds	r3, #12
 800a43a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a43c:	643a      	str	r2, [r7, #64]	; 0x40
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a440:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a444:	e841 2300 	strex	r3, r2, [r1]
 800a448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e5      	bne.n	800a41c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3314      	adds	r3, #20
 800a456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	e853 3f00 	ldrex	r3, [r3]
 800a45e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f023 0301 	bic.w	r3, r3, #1
 800a466:	64bb      	str	r3, [r7, #72]	; 0x48
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3314      	adds	r3, #20
 800a46e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a470:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a478:	e841 2300 	strex	r3, r2, [r1]
 800a47c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1e5      	bne.n	800a450 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d119      	bne.n	800a4c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	330c      	adds	r3, #12
 800a492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f023 0310 	bic.w	r3, r3, #16
 800a4a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	330c      	adds	r3, #12
 800a4aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ac:	61ba      	str	r2, [r7, #24]
 800a4ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	6979      	ldr	r1, [r7, #20]
 800a4b2:	69ba      	ldr	r2, [r7, #24]
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e5      	bne.n	800a48c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a4ce:	bf00      	nop
 800a4d0:	3754      	adds	r7, #84	; 0x54
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f7ff fecb 	bl	800a290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a510:	b2db      	uxtb	r3, r3
 800a512:	2b21      	cmp	r3, #33	; 0x21
 800a514:	d13e      	bne.n	800a594 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a51e:	d114      	bne.n	800a54a <UART_Transmit_IT+0x48>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d110      	bne.n	800a54a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
 800a52c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a53c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	1c9a      	adds	r2, r3, #2
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	621a      	str	r2, [r3, #32]
 800a548:	e008      	b.n	800a55c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	1c59      	adds	r1, r3, #1
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	6211      	str	r1, [r2, #32]
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a560:	b29b      	uxth	r3, r3
 800a562:	3b01      	subs	r3, #1
 800a564:	b29b      	uxth	r3, r3
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	4619      	mov	r1, r3
 800a56a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10f      	bne.n	800a590 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68da      	ldr	r2, [r3, #12]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a57e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68da      	ldr	r2, [r3, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a58e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	e000      	b.n	800a596 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a594:	2302      	movs	r3, #2
  }
}
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68da      	ldr	r2, [r3, #12]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff fe5a 	bl	800a27c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b08c      	sub	sp, #48	; 0x30
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b22      	cmp	r3, #34	; 0x22
 800a5e4:	f040 80ab 	bne.w	800a73e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f0:	d117      	bne.n	800a622 <UART_Receive_IT+0x50>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d113      	bne.n	800a622 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a602:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a610:	b29a      	uxth	r2, r3
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61a:	1c9a      	adds	r2, r3, #2
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	629a      	str	r2, [r3, #40]	; 0x28
 800a620:	e026      	b.n	800a670 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a626:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a634:	d007      	beq.n	800a646 <UART_Receive_IT+0x74>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10a      	bne.n	800a654 <UART_Receive_IT+0x82>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d106      	bne.n	800a654 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	701a      	strb	r2, [r3, #0]
 800a652:	e008      	b.n	800a666 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a660:	b2da      	uxtb	r2, r3
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a674:	b29b      	uxth	r3, r3
 800a676:	3b01      	subs	r3, #1
 800a678:	b29b      	uxth	r3, r3
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	4619      	mov	r1, r3
 800a67e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a680:	2b00      	cmp	r3, #0
 800a682:	d15a      	bne.n	800a73a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68da      	ldr	r2, [r3, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0220 	bic.w	r2, r2, #32
 800a692:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68da      	ldr	r2, [r3, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	695a      	ldr	r2, [r3, #20]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f022 0201 	bic.w	r2, r2, #1
 800a6b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d135      	bne.n	800a730 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	330c      	adds	r3, #12
 800a6d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f023 0310 	bic.w	r3, r3, #16
 800a6e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	330c      	adds	r3, #12
 800a6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ea:	623a      	str	r2, [r7, #32]
 800a6ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	69f9      	ldr	r1, [r7, #28]
 800a6f0:	6a3a      	ldr	r2, [r7, #32]
 800a6f2:	e841 2300 	strex	r3, r2, [r1]
 800a6f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1e5      	bne.n	800a6ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0310 	and.w	r3, r3, #16
 800a708:	2b10      	cmp	r3, #16
 800a70a:	d10a      	bne.n	800a722 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a70c:	2300      	movs	r3, #0
 800a70e:	60fb      	str	r3, [r7, #12]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	60fb      	str	r3, [r7, #12]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	60fb      	str	r3, [r7, #12]
 800a720:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff fdbb 	bl	800a2a4 <HAL_UARTEx_RxEventCallback>
 800a72e:	e002      	b.n	800a736 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7f7 fa1f 	bl	8001b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	e002      	b.n	800a740 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	e000      	b.n	800a740 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a73e:	2302      	movs	r3, #2
  }
}
 800a740:	4618      	mov	r0, r3
 800a742:	3730      	adds	r7, #48	; 0x30
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a74c:	b0c0      	sub	sp, #256	; 0x100
 800a74e:	af00      	add	r7, sp, #0
 800a750:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a764:	68d9      	ldr	r1, [r3, #12]
 800a766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	ea40 0301 	orr.w	r3, r0, r1
 800a770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a776:	689a      	ldr	r2, [r3, #8]
 800a778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	431a      	orrs	r2, r3
 800a780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	431a      	orrs	r2, r3
 800a788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a78c:	69db      	ldr	r3, [r3, #28]
 800a78e:	4313      	orrs	r3, r2
 800a790:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a7a0:	f021 010c 	bic.w	r1, r1, #12
 800a7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7ae:	430b      	orrs	r3, r1
 800a7b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	695b      	ldr	r3, [r3, #20]
 800a7ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a7be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c2:	6999      	ldr	r1, [r3, #24]
 800a7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	ea40 0301 	orr.w	r3, r0, r1
 800a7ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	4b8f      	ldr	r3, [pc, #572]	; (800aa14 <UART_SetConfig+0x2cc>)
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d005      	beq.n	800a7e8 <UART_SetConfig+0xa0>
 800a7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	4b8d      	ldr	r3, [pc, #564]	; (800aa18 <UART_SetConfig+0x2d0>)
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d104      	bne.n	800a7f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7e8:	f7fd fb0a 	bl	8007e00 <HAL_RCC_GetPCLK2Freq>
 800a7ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a7f0:	e003      	b.n	800a7fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a7f2:	f7fd faf1 	bl	8007dd8 <HAL_RCC_GetPCLK1Freq>
 800a7f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a804:	f040 810c 	bne.w	800aa20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a80c:	2200      	movs	r2, #0
 800a80e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a812:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a81a:	4622      	mov	r2, r4
 800a81c:	462b      	mov	r3, r5
 800a81e:	1891      	adds	r1, r2, r2
 800a820:	65b9      	str	r1, [r7, #88]	; 0x58
 800a822:	415b      	adcs	r3, r3
 800a824:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a82a:	4621      	mov	r1, r4
 800a82c:	eb12 0801 	adds.w	r8, r2, r1
 800a830:	4629      	mov	r1, r5
 800a832:	eb43 0901 	adc.w	r9, r3, r1
 800a836:	f04f 0200 	mov.w	r2, #0
 800a83a:	f04f 0300 	mov.w	r3, #0
 800a83e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a84a:	4690      	mov	r8, r2
 800a84c:	4699      	mov	r9, r3
 800a84e:	4623      	mov	r3, r4
 800a850:	eb18 0303 	adds.w	r3, r8, r3
 800a854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a858:	462b      	mov	r3, r5
 800a85a:	eb49 0303 	adc.w	r3, r9, r3
 800a85e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a86e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a876:	460b      	mov	r3, r1
 800a878:	18db      	adds	r3, r3, r3
 800a87a:	653b      	str	r3, [r7, #80]	; 0x50
 800a87c:	4613      	mov	r3, r2
 800a87e:	eb42 0303 	adc.w	r3, r2, r3
 800a882:	657b      	str	r3, [r7, #84]	; 0x54
 800a884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a88c:	f7f6 f9b6 	bl	8000bfc <__aeabi_uldivmod>
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4b61      	ldr	r3, [pc, #388]	; (800aa1c <UART_SetConfig+0x2d4>)
 800a896:	fba3 2302 	umull	r2, r3, r3, r2
 800a89a:	095b      	lsrs	r3, r3, #5
 800a89c:	011c      	lsls	r4, r3, #4
 800a89e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a8ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	464b      	mov	r3, r9
 800a8b4:	1891      	adds	r1, r2, r2
 800a8b6:	64b9      	str	r1, [r7, #72]	; 0x48
 800a8b8:	415b      	adcs	r3, r3
 800a8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	eb12 0a01 	adds.w	sl, r2, r1
 800a8c6:	4649      	mov	r1, r9
 800a8c8:	eb43 0b01 	adc.w	fp, r3, r1
 800a8cc:	f04f 0200 	mov.w	r2, #0
 800a8d0:	f04f 0300 	mov.w	r3, #0
 800a8d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a8d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a8dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8e0:	4692      	mov	sl, r2
 800a8e2:	469b      	mov	fp, r3
 800a8e4:	4643      	mov	r3, r8
 800a8e6:	eb1a 0303 	adds.w	r3, sl, r3
 800a8ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8ee:	464b      	mov	r3, r9
 800a8f0:	eb4b 0303 	adc.w	r3, fp, r3
 800a8f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a904:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a90c:	460b      	mov	r3, r1
 800a90e:	18db      	adds	r3, r3, r3
 800a910:	643b      	str	r3, [r7, #64]	; 0x40
 800a912:	4613      	mov	r3, r2
 800a914:	eb42 0303 	adc.w	r3, r2, r3
 800a918:	647b      	str	r3, [r7, #68]	; 0x44
 800a91a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a91e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a922:	f7f6 f96b 	bl	8000bfc <__aeabi_uldivmod>
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	4611      	mov	r1, r2
 800a92c:	4b3b      	ldr	r3, [pc, #236]	; (800aa1c <UART_SetConfig+0x2d4>)
 800a92e:	fba3 2301 	umull	r2, r3, r3, r1
 800a932:	095b      	lsrs	r3, r3, #5
 800a934:	2264      	movs	r2, #100	; 0x64
 800a936:	fb02 f303 	mul.w	r3, r2, r3
 800a93a:	1acb      	subs	r3, r1, r3
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a942:	4b36      	ldr	r3, [pc, #216]	; (800aa1c <UART_SetConfig+0x2d4>)
 800a944:	fba3 2302 	umull	r2, r3, r3, r2
 800a948:	095b      	lsrs	r3, r3, #5
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a950:	441c      	add	r4, r3
 800a952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a956:	2200      	movs	r2, #0
 800a958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a95c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a964:	4642      	mov	r2, r8
 800a966:	464b      	mov	r3, r9
 800a968:	1891      	adds	r1, r2, r2
 800a96a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a96c:	415b      	adcs	r3, r3
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a974:	4641      	mov	r1, r8
 800a976:	1851      	adds	r1, r2, r1
 800a978:	6339      	str	r1, [r7, #48]	; 0x30
 800a97a:	4649      	mov	r1, r9
 800a97c:	414b      	adcs	r3, r1
 800a97e:	637b      	str	r3, [r7, #52]	; 0x34
 800a980:	f04f 0200 	mov.w	r2, #0
 800a984:	f04f 0300 	mov.w	r3, #0
 800a988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a98c:	4659      	mov	r1, fp
 800a98e:	00cb      	lsls	r3, r1, #3
 800a990:	4651      	mov	r1, sl
 800a992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a996:	4651      	mov	r1, sl
 800a998:	00ca      	lsls	r2, r1, #3
 800a99a:	4610      	mov	r0, r2
 800a99c:	4619      	mov	r1, r3
 800a99e:	4603      	mov	r3, r0
 800a9a0:	4642      	mov	r2, r8
 800a9a2:	189b      	adds	r3, r3, r2
 800a9a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9a8:	464b      	mov	r3, r9
 800a9aa:	460a      	mov	r2, r1
 800a9ac:	eb42 0303 	adc.w	r3, r2, r3
 800a9b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a9c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	18db      	adds	r3, r3, r3
 800a9cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	eb42 0303 	adc.w	r3, r2, r3
 800a9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a9da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a9de:	f7f6 f90d 	bl	8000bfc <__aeabi_uldivmod>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <UART_SetConfig+0x2d4>)
 800a9e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ec:	095b      	lsrs	r3, r3, #5
 800a9ee:	2164      	movs	r1, #100	; 0x64
 800a9f0:	fb01 f303 	mul.w	r3, r1, r3
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	00db      	lsls	r3, r3, #3
 800a9f8:	3332      	adds	r3, #50	; 0x32
 800a9fa:	4a08      	ldr	r2, [pc, #32]	; (800aa1c <UART_SetConfig+0x2d4>)
 800a9fc:	fba2 2303 	umull	r2, r3, r2, r3
 800aa00:	095b      	lsrs	r3, r3, #5
 800aa02:	f003 0207 	and.w	r2, r3, #7
 800aa06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4422      	add	r2, r4
 800aa0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa10:	e106      	b.n	800ac20 <UART_SetConfig+0x4d8>
 800aa12:	bf00      	nop
 800aa14:	40011000 	.word	0x40011000
 800aa18:	40011400 	.word	0x40011400
 800aa1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa24:	2200      	movs	r2, #0
 800aa26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa32:	4642      	mov	r2, r8
 800aa34:	464b      	mov	r3, r9
 800aa36:	1891      	adds	r1, r2, r2
 800aa38:	6239      	str	r1, [r7, #32]
 800aa3a:	415b      	adcs	r3, r3
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa42:	4641      	mov	r1, r8
 800aa44:	1854      	adds	r4, r2, r1
 800aa46:	4649      	mov	r1, r9
 800aa48:	eb43 0501 	adc.w	r5, r3, r1
 800aa4c:	f04f 0200 	mov.w	r2, #0
 800aa50:	f04f 0300 	mov.w	r3, #0
 800aa54:	00eb      	lsls	r3, r5, #3
 800aa56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa5a:	00e2      	lsls	r2, r4, #3
 800aa5c:	4614      	mov	r4, r2
 800aa5e:	461d      	mov	r5, r3
 800aa60:	4643      	mov	r3, r8
 800aa62:	18e3      	adds	r3, r4, r3
 800aa64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa68:	464b      	mov	r3, r9
 800aa6a:	eb45 0303 	adc.w	r3, r5, r3
 800aa6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa82:	f04f 0200 	mov.w	r2, #0
 800aa86:	f04f 0300 	mov.w	r3, #0
 800aa8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aa8e:	4629      	mov	r1, r5
 800aa90:	008b      	lsls	r3, r1, #2
 800aa92:	4621      	mov	r1, r4
 800aa94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa98:	4621      	mov	r1, r4
 800aa9a:	008a      	lsls	r2, r1, #2
 800aa9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aaa0:	f7f6 f8ac 	bl	8000bfc <__aeabi_uldivmod>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	4b60      	ldr	r3, [pc, #384]	; (800ac2c <UART_SetConfig+0x4e4>)
 800aaaa:	fba3 2302 	umull	r2, r3, r3, r2
 800aaae:	095b      	lsrs	r3, r3, #5
 800aab0:	011c      	lsls	r4, r3, #4
 800aab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aab6:	2200      	movs	r2, #0
 800aab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aabc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aac4:	4642      	mov	r2, r8
 800aac6:	464b      	mov	r3, r9
 800aac8:	1891      	adds	r1, r2, r2
 800aaca:	61b9      	str	r1, [r7, #24]
 800aacc:	415b      	adcs	r3, r3
 800aace:	61fb      	str	r3, [r7, #28]
 800aad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aad4:	4641      	mov	r1, r8
 800aad6:	1851      	adds	r1, r2, r1
 800aad8:	6139      	str	r1, [r7, #16]
 800aada:	4649      	mov	r1, r9
 800aadc:	414b      	adcs	r3, r1
 800aade:	617b      	str	r3, [r7, #20]
 800aae0:	f04f 0200 	mov.w	r2, #0
 800aae4:	f04f 0300 	mov.w	r3, #0
 800aae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aaec:	4659      	mov	r1, fp
 800aaee:	00cb      	lsls	r3, r1, #3
 800aaf0:	4651      	mov	r1, sl
 800aaf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaf6:	4651      	mov	r1, sl
 800aaf8:	00ca      	lsls	r2, r1, #3
 800aafa:	4610      	mov	r0, r2
 800aafc:	4619      	mov	r1, r3
 800aafe:	4603      	mov	r3, r0
 800ab00:	4642      	mov	r2, r8
 800ab02:	189b      	adds	r3, r3, r2
 800ab04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab08:	464b      	mov	r3, r9
 800ab0a:	460a      	mov	r2, r1
 800ab0c:	eb42 0303 	adc.w	r3, r2, r3
 800ab10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab20:	f04f 0200 	mov.w	r2, #0
 800ab24:	f04f 0300 	mov.w	r3, #0
 800ab28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	008b      	lsls	r3, r1, #2
 800ab30:	4641      	mov	r1, r8
 800ab32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab36:	4641      	mov	r1, r8
 800ab38:	008a      	lsls	r2, r1, #2
 800ab3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab3e:	f7f6 f85d 	bl	8000bfc <__aeabi_uldivmod>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4611      	mov	r1, r2
 800ab48:	4b38      	ldr	r3, [pc, #224]	; (800ac2c <UART_SetConfig+0x4e4>)
 800ab4a:	fba3 2301 	umull	r2, r3, r3, r1
 800ab4e:	095b      	lsrs	r3, r3, #5
 800ab50:	2264      	movs	r2, #100	; 0x64
 800ab52:	fb02 f303 	mul.w	r3, r2, r3
 800ab56:	1acb      	subs	r3, r1, r3
 800ab58:	011b      	lsls	r3, r3, #4
 800ab5a:	3332      	adds	r3, #50	; 0x32
 800ab5c:	4a33      	ldr	r2, [pc, #204]	; (800ac2c <UART_SetConfig+0x4e4>)
 800ab5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab62:	095b      	lsrs	r3, r3, #5
 800ab64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab68:	441c      	add	r4, r3
 800ab6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab6e:	2200      	movs	r2, #0
 800ab70:	673b      	str	r3, [r7, #112]	; 0x70
 800ab72:	677a      	str	r2, [r7, #116]	; 0x74
 800ab74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ab78:	4642      	mov	r2, r8
 800ab7a:	464b      	mov	r3, r9
 800ab7c:	1891      	adds	r1, r2, r2
 800ab7e:	60b9      	str	r1, [r7, #8]
 800ab80:	415b      	adcs	r3, r3
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab88:	4641      	mov	r1, r8
 800ab8a:	1851      	adds	r1, r2, r1
 800ab8c:	6039      	str	r1, [r7, #0]
 800ab8e:	4649      	mov	r1, r9
 800ab90:	414b      	adcs	r3, r1
 800ab92:	607b      	str	r3, [r7, #4]
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aba0:	4659      	mov	r1, fp
 800aba2:	00cb      	lsls	r3, r1, #3
 800aba4:	4651      	mov	r1, sl
 800aba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abaa:	4651      	mov	r1, sl
 800abac:	00ca      	lsls	r2, r1, #3
 800abae:	4610      	mov	r0, r2
 800abb0:	4619      	mov	r1, r3
 800abb2:	4603      	mov	r3, r0
 800abb4:	4642      	mov	r2, r8
 800abb6:	189b      	adds	r3, r3, r2
 800abb8:	66bb      	str	r3, [r7, #104]	; 0x68
 800abba:	464b      	mov	r3, r9
 800abbc:	460a      	mov	r2, r1
 800abbe:	eb42 0303 	adc.w	r3, r2, r3
 800abc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	663b      	str	r3, [r7, #96]	; 0x60
 800abce:	667a      	str	r2, [r7, #100]	; 0x64
 800abd0:	f04f 0200 	mov.w	r2, #0
 800abd4:	f04f 0300 	mov.w	r3, #0
 800abd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800abdc:	4649      	mov	r1, r9
 800abde:	008b      	lsls	r3, r1, #2
 800abe0:	4641      	mov	r1, r8
 800abe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abe6:	4641      	mov	r1, r8
 800abe8:	008a      	lsls	r2, r1, #2
 800abea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800abee:	f7f6 f805 	bl	8000bfc <__aeabi_uldivmod>
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	4b0d      	ldr	r3, [pc, #52]	; (800ac2c <UART_SetConfig+0x4e4>)
 800abf8:	fba3 1302 	umull	r1, r3, r3, r2
 800abfc:	095b      	lsrs	r3, r3, #5
 800abfe:	2164      	movs	r1, #100	; 0x64
 800ac00:	fb01 f303 	mul.w	r3, r1, r3
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	011b      	lsls	r3, r3, #4
 800ac08:	3332      	adds	r3, #50	; 0x32
 800ac0a:	4a08      	ldr	r2, [pc, #32]	; (800ac2c <UART_SetConfig+0x4e4>)
 800ac0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac10:	095b      	lsrs	r3, r3, #5
 800ac12:	f003 020f 	and.w	r2, r3, #15
 800ac16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4422      	add	r2, r4
 800ac1e:	609a      	str	r2, [r3, #8]
}
 800ac20:	bf00      	nop
 800ac22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac26:	46bd      	mov	sp, r7
 800ac28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac2c:	51eb851f 	.word	0x51eb851f

0800ac30 <__NVIC_SetPriority>:
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	6039      	str	r1, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	db0a      	blt.n	800ac5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	490c      	ldr	r1, [pc, #48]	; (800ac7c <__NVIC_SetPriority+0x4c>)
 800ac4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac4e:	0112      	lsls	r2, r2, #4
 800ac50:	b2d2      	uxtb	r2, r2
 800ac52:	440b      	add	r3, r1
 800ac54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac58:	e00a      	b.n	800ac70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	4908      	ldr	r1, [pc, #32]	; (800ac80 <__NVIC_SetPriority+0x50>)
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	f003 030f 	and.w	r3, r3, #15
 800ac66:	3b04      	subs	r3, #4
 800ac68:	0112      	lsls	r2, r2, #4
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	440b      	add	r3, r1
 800ac6e:	761a      	strb	r2, [r3, #24]
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	e000e100 	.word	0xe000e100
 800ac80:	e000ed00 	.word	0xe000ed00

0800ac84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ac84:	b580      	push	{r7, lr}
 800ac86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac88:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <SysTick_Handler+0x1c>)
 800ac8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac8c:	f001 fcfe 	bl	800c68c <xTaskGetSchedulerState>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d001      	beq.n	800ac9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ac96:	f002 fae7 	bl	800d268 <xPortSysTickHandler>
  }
}
 800ac9a:	bf00      	nop
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	e000e010 	.word	0xe000e010

0800aca4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aca4:	b580      	push	{r7, lr}
 800aca6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aca8:	2100      	movs	r1, #0
 800acaa:	f06f 0004 	mvn.w	r0, #4
 800acae:	f7ff ffbf 	bl	800ac30 <__NVIC_SetPriority>
#endif
}
 800acb2:	bf00      	nop
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acbe:	f3ef 8305 	mrs	r3, IPSR
 800acc2:	603b      	str	r3, [r7, #0]
  return(result);
 800acc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d003      	beq.n	800acd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800acca:	f06f 0305 	mvn.w	r3, #5
 800acce:	607b      	str	r3, [r7, #4]
 800acd0:	e00c      	b.n	800acec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800acd2:	4b0a      	ldr	r3, [pc, #40]	; (800acfc <osKernelInitialize+0x44>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d105      	bne.n	800ace6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acda:	4b08      	ldr	r3, [pc, #32]	; (800acfc <osKernelInitialize+0x44>)
 800acdc:	2201      	movs	r2, #1
 800acde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	607b      	str	r3, [r7, #4]
 800ace4:	e002      	b.n	800acec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ace6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800acec:	687b      	ldr	r3, [r7, #4]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	370c      	adds	r7, #12
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	200005a0 	.word	0x200005a0

0800ad00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad06:	f3ef 8305 	mrs	r3, IPSR
 800ad0a:	603b      	str	r3, [r7, #0]
  return(result);
 800ad0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ad12:	f06f 0305 	mvn.w	r3, #5
 800ad16:	607b      	str	r3, [r7, #4]
 800ad18:	e010      	b.n	800ad3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad1a:	4b0b      	ldr	r3, [pc, #44]	; (800ad48 <osKernelStart+0x48>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d109      	bne.n	800ad36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad22:	f7ff ffbf 	bl	800aca4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad26:	4b08      	ldr	r3, [pc, #32]	; (800ad48 <osKernelStart+0x48>)
 800ad28:	2202      	movs	r2, #2
 800ad2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad2c:	f001 f866 	bl	800bdfc <vTaskStartScheduler>
      stat = osOK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	607b      	str	r3, [r7, #4]
 800ad34:	e002      	b.n	800ad3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ad36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad3c:	687b      	ldr	r3, [r7, #4]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	200005a0 	.word	0x200005a0

0800ad4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08e      	sub	sp, #56	; 0x38
 800ad50:	af04      	add	r7, sp, #16
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad5c:	f3ef 8305 	mrs	r3, IPSR
 800ad60:	617b      	str	r3, [r7, #20]
  return(result);
 800ad62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d17e      	bne.n	800ae66 <osThreadNew+0x11a>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d07b      	beq.n	800ae66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad6e:	2380      	movs	r3, #128	; 0x80
 800ad70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad72:	2318      	movs	r3, #24
 800ad74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ad7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d045      	beq.n	800ae12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <osThreadNew+0x48>
        name = attr->name;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d008      	beq.n	800adba <osThreadNew+0x6e>
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	2b38      	cmp	r3, #56	; 0x38
 800adac:	d805      	bhi.n	800adba <osThreadNew+0x6e>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <osThreadNew+0x72>
        return (NULL);
 800adba:	2300      	movs	r3, #0
 800adbc:	e054      	b.n	800ae68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	089b      	lsrs	r3, r3, #2
 800adcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00e      	beq.n	800adf4 <osThreadNew+0xa8>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	2b5b      	cmp	r3, #91	; 0x5b
 800addc:	d90a      	bls.n	800adf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d006      	beq.n	800adf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d002      	beq.n	800adf4 <osThreadNew+0xa8>
        mem = 1;
 800adee:	2301      	movs	r3, #1
 800adf0:	61bb      	str	r3, [r7, #24]
 800adf2:	e010      	b.n	800ae16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10c      	bne.n	800ae16 <osThreadNew+0xca>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d108      	bne.n	800ae16 <osThreadNew+0xca>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d104      	bne.n	800ae16 <osThreadNew+0xca>
          mem = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	61bb      	str	r3, [r7, #24]
 800ae10:	e001      	b.n	800ae16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ae12:	2300      	movs	r3, #0
 800ae14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d110      	bne.n	800ae3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae24:	9202      	str	r2, [sp, #8]
 800ae26:	9301      	str	r3, [sp, #4]
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	6a3a      	ldr	r2, [r7, #32]
 800ae30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 fe0c 	bl	800ba50 <xTaskCreateStatic>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	613b      	str	r3, [r7, #16]
 800ae3c:	e013      	b.n	800ae66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d110      	bne.n	800ae66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	f107 0310 	add.w	r3, r7, #16
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 fe57 	bl	800bb0a <xTaskCreate>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d001      	beq.n	800ae66 <osThreadNew+0x11a>
            hTask = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae66:	693b      	ldr	r3, [r7, #16]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3728      	adds	r7, #40	; 0x28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae78:	f3ef 8305 	mrs	r3, IPSR
 800ae7c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <osDelay+0x1c>
    stat = osErrorISR;
 800ae84:	f06f 0305 	mvn.w	r3, #5
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	e007      	b.n	800ae9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <osDelay+0x2c>
      vTaskDelay(ticks);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 ff7c 	bl	800bd94 <vTaskDelay>
    }
  }

  return (stat);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4a07      	ldr	r2, [pc, #28]	; (800aed4 <vApplicationGetIdleTaskMemory+0x2c>)
 800aeb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	4a06      	ldr	r2, [pc, #24]	; (800aed8 <vApplicationGetIdleTaskMemory+0x30>)
 800aebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2280      	movs	r2, #128	; 0x80
 800aec4:	601a      	str	r2, [r3, #0]
}
 800aec6:	bf00      	nop
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	200005a4 	.word	0x200005a4
 800aed8:	20000600 	.word	0x20000600

0800aedc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4a07      	ldr	r2, [pc, #28]	; (800af08 <vApplicationGetTimerTaskMemory+0x2c>)
 800aeec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	4a06      	ldr	r2, [pc, #24]	; (800af0c <vApplicationGetTimerTaskMemory+0x30>)
 800aef2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aefa:	601a      	str	r2, [r3, #0]
}
 800aefc:	bf00      	nop
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	20000800 	.word	0x20000800
 800af0c:	2000085c 	.word	0x2000085c

0800af10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f103 0208 	add.w	r2, r3, #8
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f103 0208 	add.w	r2, r3, #8
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f103 0208 	add.w	r2, r3, #8
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af5e:	bf00      	nop
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr

0800af6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af6a:	b480      	push	{r7}
 800af6c:	b085      	sub	sp, #20
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	601a      	str	r2, [r3, #0]
}
 800afa6:	bf00      	nop
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afb2:	b480      	push	{r7}
 800afb4:	b085      	sub	sp, #20
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afc8:	d103      	bne.n	800afd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	e00c      	b.n	800afec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3308      	adds	r3, #8
 800afd6:	60fb      	str	r3, [r7, #12]
 800afd8:	e002      	b.n	800afe0 <vListInsert+0x2e>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d2f6      	bcs.n	800afda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	601a      	str	r2, [r3, #0]
}
 800b018:	bf00      	nop
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	6892      	ldr	r2, [r2, #8]
 800b03a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	6852      	ldr	r2, [r2, #4]
 800b044:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d103      	bne.n	800b058 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	689a      	ldr	r2, [r3, #8]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	1e5a      	subs	r2, r3, #1
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10a      	bne.n	800b0a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b09e:	bf00      	nop
 800b0a0:	e7fe      	b.n	800b0a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b0a2:	f002 f84f 	bl	800d144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ae:	68f9      	ldr	r1, [r7, #12]
 800b0b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0b2:	fb01 f303 	mul.w	r3, r1, r3
 800b0b6:	441a      	add	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	68f9      	ldr	r1, [r7, #12]
 800b0d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0d8:	fb01 f303 	mul.w	r3, r1, r3
 800b0dc:	441a      	add	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	22ff      	movs	r2, #255	; 0xff
 800b0e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	22ff      	movs	r2, #255	; 0xff
 800b0ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d114      	bne.n	800b122 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d01a      	beq.n	800b136 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	3310      	adds	r3, #16
 800b104:	4618      	mov	r0, r3
 800b106:	f001 f903 	bl	800c310 <xTaskRemoveFromEventList>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d012      	beq.n	800b136 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b110:	4b0c      	ldr	r3, [pc, #48]	; (800b144 <xQueueGenericReset+0xcc>)
 800b112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	e009      	b.n	800b136 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	3310      	adds	r3, #16
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff fef2 	bl	800af10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	3324      	adds	r3, #36	; 0x24
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff feed 	bl	800af10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b136:	f002 f835 	bl	800d1a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b13a:	2301      	movs	r3, #1
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	e000ed04 	.word	0xe000ed04

0800b148 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08e      	sub	sp, #56	; 0x38
 800b14c:	af02      	add	r7, sp, #8
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10a      	bne.n	800b172 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b16e:	bf00      	nop
 800b170:	e7fe      	b.n	800b170 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10a      	bne.n	800b18e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b18a:	bf00      	nop
 800b18c:	e7fe      	b.n	800b18c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <xQueueGenericCreateStatic+0x52>
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d001      	beq.n	800b19e <xQueueGenericCreateStatic+0x56>
 800b19a:	2301      	movs	r3, #1
 800b19c:	e000      	b.n	800b1a0 <xQueueGenericCreateStatic+0x58>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10a      	bne.n	800b1ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	623b      	str	r3, [r7, #32]
}
 800b1b6:	bf00      	nop
 800b1b8:	e7fe      	b.n	800b1b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <xQueueGenericCreateStatic+0x7e>
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <xQueueGenericCreateStatic+0x82>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <xQueueGenericCreateStatic+0x84>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	61fb      	str	r3, [r7, #28]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b1e6:	2350      	movs	r3, #80	; 0x50
 800b1e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b50      	cmp	r3, #80	; 0x50
 800b1ee:	d00a      	beq.n	800b206 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	61bb      	str	r3, [r7, #24]
}
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b206:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00d      	beq.n	800b22e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b214:	2201      	movs	r2, #1
 800b216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b21a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	4613      	mov	r3, r2
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	68b9      	ldr	r1, [r7, #8]
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f000 f805 	bl	800b238 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b230:	4618      	mov	r0, r3
 800b232:	3730      	adds	r7, #48	; 0x30
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d103      	bne.n	800b254 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	e002      	b.n	800b25a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b266:	2101      	movs	r1, #1
 800b268:	69b8      	ldr	r0, [r7, #24]
 800b26a:	f7ff ff05 	bl	800b078 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	78fa      	ldrb	r2, [r7, #3]
 800b272:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b276:	bf00      	nop
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b08e      	sub	sp, #56	; 0x38
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b28e:	2300      	movs	r3, #0
 800b290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <xQueueGenericSend+0x32>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d103      	bne.n	800b2c0 <xQueueGenericSend+0x40>
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <xQueueGenericSend+0x44>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <xQueueGenericSend+0x46>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10a      	bne.n	800b2e0 <xQueueGenericSend+0x60>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d103      	bne.n	800b2ee <xQueueGenericSend+0x6e>
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d101      	bne.n	800b2f2 <xQueueGenericSend+0x72>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e000      	b.n	800b2f4 <xQueueGenericSend+0x74>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <xQueueGenericSend+0x8e>
	__asm volatile
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	623b      	str	r3, [r7, #32]
}
 800b30a:	bf00      	nop
 800b30c:	e7fe      	b.n	800b30c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b30e:	f001 f9bd 	bl	800c68c <xTaskGetSchedulerState>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d102      	bne.n	800b31e <xQueueGenericSend+0x9e>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <xQueueGenericSend+0xa2>
 800b31e:	2301      	movs	r3, #1
 800b320:	e000      	b.n	800b324 <xQueueGenericSend+0xa4>
 800b322:	2300      	movs	r3, #0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <xQueueGenericSend+0xbe>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	61fb      	str	r3, [r7, #28]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b33e:	f001 ff01 	bl	800d144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d302      	bcc.n	800b354 <xQueueGenericSend+0xd4>
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b02      	cmp	r3, #2
 800b352:	d129      	bne.n	800b3a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	68b9      	ldr	r1, [r7, #8]
 800b358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b35a:	f000 fa0b 	bl	800b774 <prvCopyDataToQueue>
 800b35e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	d010      	beq.n	800b38a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	3324      	adds	r3, #36	; 0x24
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 ffcf 	bl	800c310 <xTaskRemoveFromEventList>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d013      	beq.n	800b3a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b378:	4b3f      	ldr	r3, [pc, #252]	; (800b478 <xQueueGenericSend+0x1f8>)
 800b37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	e00a      	b.n	800b3a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d007      	beq.n	800b3a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b390:	4b39      	ldr	r3, [pc, #228]	; (800b478 <xQueueGenericSend+0x1f8>)
 800b392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3a0:	f001 ff00 	bl	800d1a4 <vPortExitCritical>
				return pdPASS;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e063      	b.n	800b470 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d103      	bne.n	800b3b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3ae:	f001 fef9 	bl	800d1a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	e05c      	b.n	800b470 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d106      	bne.n	800b3ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3bc:	f107 0314 	add.w	r3, r7, #20
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f001 f809 	bl	800c3d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3ca:	f001 feeb 	bl	800d1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3ce:	f000 fd7b 	bl	800bec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3d2:	f001 feb7 	bl	800d144 <vPortEnterCritical>
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3dc:	b25b      	sxtb	r3, r3
 800b3de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3e2:	d103      	bne.n	800b3ec <xQueueGenericSend+0x16c>
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3f2:	b25b      	sxtb	r3, r3
 800b3f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3f8:	d103      	bne.n	800b402 <xQueueGenericSend+0x182>
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b402:	f001 fecf 	bl	800d1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b406:	1d3a      	adds	r2, r7, #4
 800b408:	f107 0314 	add.w	r3, r7, #20
 800b40c:	4611      	mov	r1, r2
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 fff8 	bl	800c404 <xTaskCheckForTimeOut>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d124      	bne.n	800b464 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b41a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b41c:	f000 faa2 	bl	800b964 <prvIsQueueFull>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d018      	beq.n	800b458 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b428:	3310      	adds	r3, #16
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	4611      	mov	r1, r2
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 ff1e 	bl	800c270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b436:	f000 fa2d 	bl	800b894 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b43a:	f000 fd53 	bl	800bee4 <xTaskResumeAll>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	f47f af7c 	bne.w	800b33e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b446:	4b0c      	ldr	r3, [pc, #48]	; (800b478 <xQueueGenericSend+0x1f8>)
 800b448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b44c:	601a      	str	r2, [r3, #0]
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	e772      	b.n	800b33e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b45a:	f000 fa1b 	bl	800b894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b45e:	f000 fd41 	bl	800bee4 <xTaskResumeAll>
 800b462:	e76c      	b.n	800b33e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b466:	f000 fa15 	bl	800b894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b46a:	f000 fd3b 	bl	800bee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b46e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b470:	4618      	mov	r0, r3
 800b472:	3738      	adds	r7, #56	; 0x38
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b090      	sub	sp, #64	; 0x40
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	607a      	str	r2, [r7, #4]
 800b488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10a      	bne.n	800b4aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b4a6:	bf00      	nop
 800b4a8:	e7fe      	b.n	800b4a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d103      	bne.n	800b4b8 <xQueueGenericSendFromISR+0x3c>
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <xQueueGenericSendFromISR+0x40>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e000      	b.n	800b4be <xQueueGenericSendFromISR+0x42>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10a      	bne.n	800b4d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d103      	bne.n	800b4e6 <xQueueGenericSendFromISR+0x6a>
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d101      	bne.n	800b4ea <xQueueGenericSendFromISR+0x6e>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e000      	b.n	800b4ec <xQueueGenericSendFromISR+0x70>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10a      	bne.n	800b506 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	623b      	str	r3, [r7, #32]
}
 800b502:	bf00      	nop
 800b504:	e7fe      	b.n	800b504 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b506:	f001 feff 	bl	800d308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b50a:	f3ef 8211 	mrs	r2, BASEPRI
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	61fa      	str	r2, [r7, #28]
 800b520:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b522:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b524:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52e:	429a      	cmp	r2, r3
 800b530:	d302      	bcc.n	800b538 <xQueueGenericSendFromISR+0xbc>
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b02      	cmp	r3, #2
 800b536:	d12f      	bne.n	800b598 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b546:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b54e:	f000 f911 	bl	800b774 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b552:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b55a:	d112      	bne.n	800b582 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	2b00      	cmp	r3, #0
 800b562:	d016      	beq.n	800b592 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	3324      	adds	r3, #36	; 0x24
 800b568:	4618      	mov	r0, r3
 800b56a:	f000 fed1 	bl	800c310 <xTaskRemoveFromEventList>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00e      	beq.n	800b592 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00b      	beq.n	800b592 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2201      	movs	r2, #1
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	e007      	b.n	800b592 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b586:	3301      	adds	r3, #1
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	b25a      	sxtb	r2, r3
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b592:	2301      	movs	r3, #1
 800b594:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b596:	e001      	b.n	800b59c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b598:	2300      	movs	r3, #0
 800b59a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3740      	adds	r7, #64	; 0x40
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08c      	sub	sp, #48	; 0x30
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10a      	bne.n	800b5e4 <xQueueReceive+0x30>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	623b      	str	r3, [r7, #32]
}
 800b5e0:	bf00      	nop
 800b5e2:	e7fe      	b.n	800b5e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d103      	bne.n	800b5f2 <xQueueReceive+0x3e>
 800b5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <xQueueReceive+0x42>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e000      	b.n	800b5f8 <xQueueReceive+0x44>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10a      	bne.n	800b612 <xQueueReceive+0x5e>
	__asm volatile
 800b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	61fb      	str	r3, [r7, #28]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b612:	f001 f83b 	bl	800c68c <xTaskGetSchedulerState>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <xQueueReceive+0x6e>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <xQueueReceive+0x72>
 800b622:	2301      	movs	r3, #1
 800b624:	e000      	b.n	800b628 <xQueueReceive+0x74>
 800b626:	2300      	movs	r3, #0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <xQueueReceive+0x8e>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	61bb      	str	r3, [r7, #24]
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b642:	f001 fd7f 	bl	800d144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d01f      	beq.n	800b692 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b652:	68b9      	ldr	r1, [r7, #8]
 800b654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b656:	f000 f8f7 	bl	800b848 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65c:	1e5a      	subs	r2, r3, #1
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00f      	beq.n	800b68a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66c:	3310      	adds	r3, #16
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 fe4e 	bl	800c310 <xTaskRemoveFromEventList>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d007      	beq.n	800b68a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b67a:	4b3d      	ldr	r3, [pc, #244]	; (800b770 <xQueueReceive+0x1bc>)
 800b67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b68a:	f001 fd8b 	bl	800d1a4 <vPortExitCritical>
				return pdPASS;
 800b68e:	2301      	movs	r3, #1
 800b690:	e069      	b.n	800b766 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d103      	bne.n	800b6a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b698:	f001 fd84 	bl	800d1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b69c:	2300      	movs	r3, #0
 800b69e:	e062      	b.n	800b766 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d106      	bne.n	800b6b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6a6:	f107 0310 	add.w	r3, r7, #16
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fe94 	bl	800c3d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6b4:	f001 fd76 	bl	800d1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6b8:	f000 fc06 	bl	800bec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6bc:	f001 fd42 	bl	800d144 <vPortEnterCritical>
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6c6:	b25b      	sxtb	r3, r3
 800b6c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6cc:	d103      	bne.n	800b6d6 <xQueueReceive+0x122>
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6dc:	b25b      	sxtb	r3, r3
 800b6de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6e2:	d103      	bne.n	800b6ec <xQueueReceive+0x138>
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6ec:	f001 fd5a 	bl	800d1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6f0:	1d3a      	adds	r2, r7, #4
 800b6f2:	f107 0310 	add.w	r3, r7, #16
 800b6f6:	4611      	mov	r1, r2
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 fe83 	bl	800c404 <xTaskCheckForTimeOut>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d123      	bne.n	800b74c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b706:	f000 f917 	bl	800b938 <prvIsQueueEmpty>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d017      	beq.n	800b740 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	3324      	adds	r3, #36	; 0x24
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	4611      	mov	r1, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 fda9 	bl	800c270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b71e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b720:	f000 f8b8 	bl	800b894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b724:	f000 fbde 	bl	800bee4 <xTaskResumeAll>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d189      	bne.n	800b642 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b72e:	4b10      	ldr	r3, [pc, #64]	; (800b770 <xQueueReceive+0x1bc>)
 800b730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	e780      	b.n	800b642 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b742:	f000 f8a7 	bl	800b894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b746:	f000 fbcd 	bl	800bee4 <xTaskResumeAll>
 800b74a:	e77a      	b.n	800b642 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b74e:	f000 f8a1 	bl	800b894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b752:	f000 fbc7 	bl	800bee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b758:	f000 f8ee 	bl	800b938 <prvIsQueueEmpty>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f43f af6f 	beq.w	800b642 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b766:	4618      	mov	r0, r3
 800b768:	3730      	adds	r7, #48	; 0x30
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	e000ed04 	.word	0xe000ed04

0800b774 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b780:	2300      	movs	r3, #0
 800b782:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b788:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10d      	bne.n	800b7ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d14d      	bne.n	800b836 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 ff92 	bl	800c6c8 <xTaskPriorityDisinherit>
 800b7a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	609a      	str	r2, [r3, #8]
 800b7ac:	e043      	b.n	800b836 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d119      	bne.n	800b7e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6858      	ldr	r0, [r3, #4]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7bc:	461a      	mov	r2, r3
 800b7be:	68b9      	ldr	r1, [r7, #8]
 800b7c0:	f002 fbf0 	bl	800dfa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	685a      	ldr	r2, [r3, #4]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7cc:	441a      	add	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d32b      	bcc.n	800b836 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	605a      	str	r2, [r3, #4]
 800b7e6:	e026      	b.n	800b836 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	68d8      	ldr	r0, [r3, #12]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	f002 fbd6 	bl	800dfa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	68da      	ldr	r2, [r3, #12]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b800:	425b      	negs	r3, r3
 800b802:	441a      	add	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	68da      	ldr	r2, [r3, #12]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	429a      	cmp	r2, r3
 800b812:	d207      	bcs.n	800b824 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	689a      	ldr	r2, [r3, #8]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81c:	425b      	negs	r3, r3
 800b81e:	441a      	add	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d105      	bne.n	800b836 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	3b01      	subs	r3, #1
 800b834:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b83e:	697b      	ldr	r3, [r7, #20]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b856:	2b00      	cmp	r3, #0
 800b858:	d018      	beq.n	800b88c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	68da      	ldr	r2, [r3, #12]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b862:	441a      	add	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68da      	ldr	r2, [r3, #12]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	429a      	cmp	r2, r3
 800b872:	d303      	bcc.n	800b87c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	68d9      	ldr	r1, [r3, #12]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b884:	461a      	mov	r2, r3
 800b886:	6838      	ldr	r0, [r7, #0]
 800b888:	f002 fb8c 	bl	800dfa4 <memcpy>
	}
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b89c:	f001 fc52 	bl	800d144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8a8:	e011      	b.n	800b8ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d012      	beq.n	800b8d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	3324      	adds	r3, #36	; 0x24
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 fd2a 	bl	800c310 <xTaskRemoveFromEventList>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b8c2:	f000 fe01 	bl	800c4c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b8c6:	7bfb      	ldrb	r3, [r7, #15]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	dce9      	bgt.n	800b8aa <prvUnlockQueue+0x16>
 800b8d6:	e000      	b.n	800b8da <prvUnlockQueue+0x46>
					break;
 800b8d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	22ff      	movs	r2, #255	; 0xff
 800b8de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b8e2:	f001 fc5f 	bl	800d1a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b8e6:	f001 fc2d 	bl	800d144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8f2:	e011      	b.n	800b918 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d012      	beq.n	800b922 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	3310      	adds	r3, #16
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fd05 	bl	800c310 <xTaskRemoveFromEventList>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b90c:	f000 fddc 	bl	800c4c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b910:	7bbb      	ldrb	r3, [r7, #14]
 800b912:	3b01      	subs	r3, #1
 800b914:	b2db      	uxtb	r3, r3
 800b916:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	dce9      	bgt.n	800b8f4 <prvUnlockQueue+0x60>
 800b920:	e000      	b.n	800b924 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b922:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	22ff      	movs	r2, #255	; 0xff
 800b928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b92c:	f001 fc3a 	bl	800d1a4 <vPortExitCritical>
}
 800b930:	bf00      	nop
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b940:	f001 fc00 	bl	800d144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d102      	bne.n	800b952 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b94c:	2301      	movs	r3, #1
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	e001      	b.n	800b956 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b952:	2300      	movs	r3, #0
 800b954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b956:	f001 fc25 	bl	800d1a4 <vPortExitCritical>

	return xReturn;
 800b95a:	68fb      	ldr	r3, [r7, #12]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b96c:	f001 fbea 	bl	800d144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b978:	429a      	cmp	r2, r3
 800b97a:	d102      	bne.n	800b982 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b97c:	2301      	movs	r3, #1
 800b97e:	60fb      	str	r3, [r7, #12]
 800b980:	e001      	b.n	800b986 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b982:	2300      	movs	r3, #0
 800b984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b986:	f001 fc0d 	bl	800d1a4 <vPortExitCritical>

	return xReturn;
 800b98a:	68fb      	ldr	r3, [r7, #12]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b99e:	2300      	movs	r3, #0
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	e014      	b.n	800b9ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b9a4:	4a0f      	ldr	r2, [pc, #60]	; (800b9e4 <vQueueAddToRegistry+0x50>)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10b      	bne.n	800b9c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b9b0:	490c      	ldr	r1, [pc, #48]	; (800b9e4 <vQueueAddToRegistry+0x50>)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b9ba:	4a0a      	ldr	r2, [pc, #40]	; (800b9e4 <vQueueAddToRegistry+0x50>)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	00db      	lsls	r3, r3, #3
 800b9c0:	4413      	add	r3, r2
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b9c6:	e006      	b.n	800b9d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2b07      	cmp	r3, #7
 800b9d2:	d9e7      	bls.n	800b9a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b9d4:	bf00      	nop
 800b9d6:	bf00      	nop
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	20000c5c 	.word	0x20000c5c

0800b9e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b9f8:	f001 fba4 	bl	800d144 <vPortEnterCritical>
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba02:	b25b      	sxtb	r3, r3
 800ba04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba08:	d103      	bne.n	800ba12 <vQueueWaitForMessageRestricted+0x2a>
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba18:	b25b      	sxtb	r3, r3
 800ba1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba1e:	d103      	bne.n	800ba28 <vQueueWaitForMessageRestricted+0x40>
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba28:	f001 fbbc 	bl	800d1a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d106      	bne.n	800ba42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	3324      	adds	r3, #36	; 0x24
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	68b9      	ldr	r1, [r7, #8]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f000 fc3b 	bl	800c2b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ba42:	6978      	ldr	r0, [r7, #20]
 800ba44:	f7ff ff26 	bl	800b894 <prvUnlockQueue>
	}
 800ba48:	bf00      	nop
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b08e      	sub	sp, #56	; 0x38
 800ba54:	af04      	add	r7, sp, #16
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
 800ba5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ba5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10a      	bne.n	800ba7a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ba64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba68:	f383 8811 	msr	BASEPRI, r3
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f3bf 8f4f 	dsb	sy
 800ba74:	623b      	str	r3, [r7, #32]
}
 800ba76:	bf00      	nop
 800ba78:	e7fe      	b.n	800ba78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10a      	bne.n	800ba96 <xTaskCreateStatic+0x46>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	61fb      	str	r3, [r7, #28]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba96:	235c      	movs	r3, #92	; 0x5c
 800ba98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	2b5c      	cmp	r3, #92	; 0x5c
 800ba9e:	d00a      	beq.n	800bab6 <xTaskCreateStatic+0x66>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	61bb      	str	r3, [r7, #24]
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bab6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baba:	2b00      	cmp	r3, #0
 800babc:	d01e      	beq.n	800bafc <xTaskCreateStatic+0xac>
 800babe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d01b      	beq.n	800bafc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bacc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	2202      	movs	r2, #2
 800bad2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bad6:	2300      	movs	r3, #0
 800bad8:	9303      	str	r3, [sp, #12]
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800badc:	9302      	str	r3, [sp, #8]
 800bade:	f107 0314 	add.w	r3, r7, #20
 800bae2:	9301      	str	r3, [sp, #4]
 800bae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 f850 	bl	800bb94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800baf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baf6:	f000 f8dd 	bl	800bcb4 <prvAddNewTaskToReadyList>
 800bafa:	e001      	b.n	800bb00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bafc:	2300      	movs	r3, #0
 800bafe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bb00:	697b      	ldr	r3, [r7, #20]
	}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3728      	adds	r7, #40	; 0x28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b08c      	sub	sp, #48	; 0x30
 800bb0e:	af04      	add	r7, sp, #16
 800bb10:	60f8      	str	r0, [r7, #12]
 800bb12:	60b9      	str	r1, [r7, #8]
 800bb14:	603b      	str	r3, [r7, #0]
 800bb16:	4613      	mov	r3, r2
 800bb18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f001 fc32 	bl	800d388 <pvPortMalloc>
 800bb24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00e      	beq.n	800bb4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bb2c:	205c      	movs	r0, #92	; 0x5c
 800bb2e:	f001 fc2b 	bl	800d388 <pvPortMalloc>
 800bb32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	631a      	str	r2, [r3, #48]	; 0x30
 800bb40:	e005      	b.n	800bb4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bb42:	6978      	ldr	r0, [r7, #20]
 800bb44:	f001 fcec 	bl	800d520 <vPortFree>
 800bb48:	e001      	b.n	800bb4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d017      	beq.n	800bb84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bb5c:	88fa      	ldrh	r2, [r7, #6]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	9303      	str	r3, [sp, #12]
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	9302      	str	r3, [sp, #8]
 800bb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f000 f80e 	bl	800bb94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bb78:	69f8      	ldr	r0, [r7, #28]
 800bb7a:	f000 f89b 	bl	800bcb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	61bb      	str	r3, [r7, #24]
 800bb82:	e002      	b.n	800bb8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb8a:	69bb      	ldr	r3, [r7, #24]
	}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3720      	adds	r7, #32
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b088      	sub	sp, #32
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
 800bba0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	461a      	mov	r2, r3
 800bbac:	21a5      	movs	r1, #165	; 0xa5
 800bbae:	f002 f9c5 	bl	800df3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	f023 0307 	bic.w	r3, r3, #7
 800bbca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	f003 0307 	and.w	r3, r3, #7
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <prvInitialiseNewTask+0x58>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	617b      	str	r3, [r7, #20]
}
 800bbe8:	bf00      	nop
 800bbea:	e7fe      	b.n	800bbea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d01f      	beq.n	800bc32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	61fb      	str	r3, [r7, #28]
 800bbf6:	e012      	b.n	800bc1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	7819      	ldrb	r1, [r3, #0]
 800bc00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	4413      	add	r3, r2
 800bc06:	3334      	adds	r3, #52	; 0x34
 800bc08:	460a      	mov	r2, r1
 800bc0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	4413      	add	r3, r2
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d006      	beq.n	800bc26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	61fb      	str	r3, [r7, #28]
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	2b0f      	cmp	r3, #15
 800bc22:	d9e9      	bls.n	800bbf8 <prvInitialiseNewTask+0x64>
 800bc24:	e000      	b.n	800bc28 <prvInitialiseNewTask+0x94>
			{
				break;
 800bc26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc30:	e003      	b.n	800bc3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3c:	2b37      	cmp	r3, #55	; 0x37
 800bc3e:	d901      	bls.n	800bc44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bc40:	2337      	movs	r3, #55	; 0x37
 800bc42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	2200      	movs	r2, #0
 800bc54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc58:	3304      	adds	r3, #4
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7ff f978 	bl	800af50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc62:	3318      	adds	r3, #24
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7ff f973 	bl	800af50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	2200      	movs	r2, #0
 800bc84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	68f9      	ldr	r1, [r7, #12]
 800bc92:	69b8      	ldr	r0, [r7, #24]
 800bc94:	f001 f928 	bl	800cee8 <pxPortInitialiseStack>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcaa:	bf00      	nop
 800bcac:	3720      	adds	r7, #32
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
	...

0800bcb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bcbc:	f001 fa42 	bl	800d144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bcc0:	4b2d      	ldr	r3, [pc, #180]	; (800bd78 <prvAddNewTaskToReadyList+0xc4>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	4a2c      	ldr	r2, [pc, #176]	; (800bd78 <prvAddNewTaskToReadyList+0xc4>)
 800bcc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bcca:	4b2c      	ldr	r3, [pc, #176]	; (800bd7c <prvAddNewTaskToReadyList+0xc8>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d109      	bne.n	800bce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bcd2:	4a2a      	ldr	r2, [pc, #168]	; (800bd7c <prvAddNewTaskToReadyList+0xc8>)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bcd8:	4b27      	ldr	r3, [pc, #156]	; (800bd78 <prvAddNewTaskToReadyList+0xc4>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d110      	bne.n	800bd02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bce0:	f000 fc16 	bl	800c510 <prvInitialiseTaskLists>
 800bce4:	e00d      	b.n	800bd02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bce6:	4b26      	ldr	r3, [pc, #152]	; (800bd80 <prvAddNewTaskToReadyList+0xcc>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d109      	bne.n	800bd02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bcee:	4b23      	ldr	r3, [pc, #140]	; (800bd7c <prvAddNewTaskToReadyList+0xc8>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d802      	bhi.n	800bd02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bcfc:	4a1f      	ldr	r2, [pc, #124]	; (800bd7c <prvAddNewTaskToReadyList+0xc8>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bd02:	4b20      	ldr	r3, [pc, #128]	; (800bd84 <prvAddNewTaskToReadyList+0xd0>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	3301      	adds	r3, #1
 800bd08:	4a1e      	ldr	r2, [pc, #120]	; (800bd84 <prvAddNewTaskToReadyList+0xd0>)
 800bd0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bd0c:	4b1d      	ldr	r3, [pc, #116]	; (800bd84 <prvAddNewTaskToReadyList+0xd0>)
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd18:	4b1b      	ldr	r3, [pc, #108]	; (800bd88 <prvAddNewTaskToReadyList+0xd4>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d903      	bls.n	800bd28 <prvAddNewTaskToReadyList+0x74>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	4a18      	ldr	r2, [pc, #96]	; (800bd88 <prvAddNewTaskToReadyList+0xd4>)
 800bd26:	6013      	str	r3, [r2, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	4413      	add	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4a15      	ldr	r2, [pc, #84]	; (800bd8c <prvAddNewTaskToReadyList+0xd8>)
 800bd36:	441a      	add	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4610      	mov	r0, r2
 800bd40:	f7ff f913 	bl	800af6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bd44:	f001 fa2e 	bl	800d1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bd48:	4b0d      	ldr	r3, [pc, #52]	; (800bd80 <prvAddNewTaskToReadyList+0xcc>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00e      	beq.n	800bd6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bd50:	4b0a      	ldr	r3, [pc, #40]	; (800bd7c <prvAddNewTaskToReadyList+0xc8>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d207      	bcs.n	800bd6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bd5e:	4b0c      	ldr	r3, [pc, #48]	; (800bd90 <prvAddNewTaskToReadyList+0xdc>)
 800bd60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd64:	601a      	str	r2, [r3, #0]
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd6e:	bf00      	nop
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20001170 	.word	0x20001170
 800bd7c:	20000c9c 	.word	0x20000c9c
 800bd80:	2000117c 	.word	0x2000117c
 800bd84:	2000118c 	.word	0x2000118c
 800bd88:	20001178 	.word	0x20001178
 800bd8c:	20000ca0 	.word	0x20000ca0
 800bd90:	e000ed04 	.word	0xe000ed04

0800bd94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d017      	beq.n	800bdd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bda6:	4b13      	ldr	r3, [pc, #76]	; (800bdf4 <vTaskDelay+0x60>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <vTaskDelay+0x30>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	60bb      	str	r3, [r7, #8]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bdc4:	f000 f880 	bl	800bec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bdc8:	2100      	movs	r1, #0
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fcea 	bl	800c7a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bdd0:	f000 f888 	bl	800bee4 <xTaskResumeAll>
 800bdd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d107      	bne.n	800bdec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bddc:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <vTaskDelay+0x64>)
 800bdde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdec:	bf00      	nop
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20001198 	.word	0x20001198
 800bdf8:	e000ed04 	.word	0xe000ed04

0800bdfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08a      	sub	sp, #40	; 0x28
 800be00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be02:	2300      	movs	r3, #0
 800be04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be06:	2300      	movs	r3, #0
 800be08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be0a:	463a      	mov	r2, r7
 800be0c:	1d39      	adds	r1, r7, #4
 800be0e:	f107 0308 	add.w	r3, r7, #8
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff f848 	bl	800aea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	9202      	str	r2, [sp, #8]
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	2300      	movs	r3, #0
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	2300      	movs	r3, #0
 800be28:	460a      	mov	r2, r1
 800be2a:	4921      	ldr	r1, [pc, #132]	; (800beb0 <vTaskStartScheduler+0xb4>)
 800be2c:	4821      	ldr	r0, [pc, #132]	; (800beb4 <vTaskStartScheduler+0xb8>)
 800be2e:	f7ff fe0f 	bl	800ba50 <xTaskCreateStatic>
 800be32:	4603      	mov	r3, r0
 800be34:	4a20      	ldr	r2, [pc, #128]	; (800beb8 <vTaskStartScheduler+0xbc>)
 800be36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be38:	4b1f      	ldr	r3, [pc, #124]	; (800beb8 <vTaskStartScheduler+0xbc>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be40:	2301      	movs	r3, #1
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e001      	b.n	800be4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be46:	2300      	movs	r3, #0
 800be48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d102      	bne.n	800be56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800be50:	f000 fcfc 	bl	800c84c <xTimerCreateTimerTask>
 800be54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d116      	bne.n	800be8a <vTaskStartScheduler+0x8e>
	__asm volatile
 800be5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be60:	f383 8811 	msr	BASEPRI, r3
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	613b      	str	r3, [r7, #16]
}
 800be6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be70:	4b12      	ldr	r3, [pc, #72]	; (800bebc <vTaskStartScheduler+0xc0>)
 800be72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be78:	4b11      	ldr	r3, [pc, #68]	; (800bec0 <vTaskStartScheduler+0xc4>)
 800be7a:	2201      	movs	r2, #1
 800be7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be7e:	4b11      	ldr	r3, [pc, #68]	; (800bec4 <vTaskStartScheduler+0xc8>)
 800be80:	2200      	movs	r2, #0
 800be82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be84:	f001 f8bc 	bl	800d000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be88:	e00e      	b.n	800bea8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be90:	d10a      	bne.n	800bea8 <vTaskStartScheduler+0xac>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	60fb      	str	r3, [r7, #12]
}
 800bea4:	bf00      	nop
 800bea6:	e7fe      	b.n	800bea6 <vTaskStartScheduler+0xaa>
}
 800bea8:	bf00      	nop
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	0800e8ec 	.word	0x0800e8ec
 800beb4:	0800c4e1 	.word	0x0800c4e1
 800beb8:	20001194 	.word	0x20001194
 800bebc:	20001190 	.word	0x20001190
 800bec0:	2000117c 	.word	0x2000117c
 800bec4:	20001174 	.word	0x20001174

0800bec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bec8:	b480      	push	{r7}
 800beca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800becc:	4b04      	ldr	r3, [pc, #16]	; (800bee0 <vTaskSuspendAll+0x18>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3301      	adds	r3, #1
 800bed2:	4a03      	ldr	r2, [pc, #12]	; (800bee0 <vTaskSuspendAll+0x18>)
 800bed4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bed6:	bf00      	nop
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	20001198 	.word	0x20001198

0800bee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800beea:	2300      	movs	r3, #0
 800beec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800beee:	2300      	movs	r3, #0
 800bef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bef2:	4b42      	ldr	r3, [pc, #264]	; (800bffc <xTaskResumeAll+0x118>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10a      	bne.n	800bf10 <xTaskResumeAll+0x2c>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	603b      	str	r3, [r7, #0]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf10:	f001 f918 	bl	800d144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf14:	4b39      	ldr	r3, [pc, #228]	; (800bffc <xTaskResumeAll+0x118>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	4a38      	ldr	r2, [pc, #224]	; (800bffc <xTaskResumeAll+0x118>)
 800bf1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf1e:	4b37      	ldr	r3, [pc, #220]	; (800bffc <xTaskResumeAll+0x118>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d162      	bne.n	800bfec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf26:	4b36      	ldr	r3, [pc, #216]	; (800c000 <xTaskResumeAll+0x11c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d05e      	beq.n	800bfec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf2e:	e02f      	b.n	800bf90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf30:	4b34      	ldr	r3, [pc, #208]	; (800c004 <xTaskResumeAll+0x120>)
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	3318      	adds	r3, #24
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff f871 	bl	800b024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	3304      	adds	r3, #4
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff f86c 	bl	800b024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf50:	4b2d      	ldr	r3, [pc, #180]	; (800c008 <xTaskResumeAll+0x124>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d903      	bls.n	800bf60 <xTaskResumeAll+0x7c>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5c:	4a2a      	ldr	r2, [pc, #168]	; (800c008 <xTaskResumeAll+0x124>)
 800bf5e:	6013      	str	r3, [r2, #0]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf64:	4613      	mov	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4a27      	ldr	r2, [pc, #156]	; (800c00c <xTaskResumeAll+0x128>)
 800bf6e:	441a      	add	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3304      	adds	r3, #4
 800bf74:	4619      	mov	r1, r3
 800bf76:	4610      	mov	r0, r2
 800bf78:	f7fe fff7 	bl	800af6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf80:	4b23      	ldr	r3, [pc, #140]	; (800c010 <xTaskResumeAll+0x12c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d302      	bcc.n	800bf90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bf8a:	4b22      	ldr	r3, [pc, #136]	; (800c014 <xTaskResumeAll+0x130>)
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf90:	4b1c      	ldr	r3, [pc, #112]	; (800c004 <xTaskResumeAll+0x120>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1cb      	bne.n	800bf30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d001      	beq.n	800bfa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf9e:	f000 fb55 	bl	800c64c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bfa2:	4b1d      	ldr	r3, [pc, #116]	; (800c018 <xTaskResumeAll+0x134>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d010      	beq.n	800bfd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bfae:	f000 f847 	bl	800c040 <xTaskIncrementTick>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bfb8:	4b16      	ldr	r3, [pc, #88]	; (800c014 <xTaskResumeAll+0x130>)
 800bfba:	2201      	movs	r2, #1
 800bfbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1f1      	bne.n	800bfae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bfca:	4b13      	ldr	r3, [pc, #76]	; (800c018 <xTaskResumeAll+0x134>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bfd0:	4b10      	ldr	r3, [pc, #64]	; (800c014 <xTaskResumeAll+0x130>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d009      	beq.n	800bfec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bfdc:	4b0f      	ldr	r3, [pc, #60]	; (800c01c <xTaskResumeAll+0x138>)
 800bfde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfec:	f001 f8da 	bl	800d1a4 <vPortExitCritical>

	return xAlreadyYielded;
 800bff0:	68bb      	ldr	r3, [r7, #8]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	20001198 	.word	0x20001198
 800c000:	20001170 	.word	0x20001170
 800c004:	20001130 	.word	0x20001130
 800c008:	20001178 	.word	0x20001178
 800c00c:	20000ca0 	.word	0x20000ca0
 800c010:	20000c9c 	.word	0x20000c9c
 800c014:	20001184 	.word	0x20001184
 800c018:	20001180 	.word	0x20001180
 800c01c:	e000ed04 	.word	0xe000ed04

0800c020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c026:	4b05      	ldr	r3, [pc, #20]	; (800c03c <xTaskGetTickCount+0x1c>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c02c:	687b      	ldr	r3, [r7, #4]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	20001174 	.word	0x20001174

0800c040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c046:	2300      	movs	r3, #0
 800c048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c04a:	4b4f      	ldr	r3, [pc, #316]	; (800c188 <xTaskIncrementTick+0x148>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f040 808f 	bne.w	800c172 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c054:	4b4d      	ldr	r3, [pc, #308]	; (800c18c <xTaskIncrementTick+0x14c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3301      	adds	r3, #1
 800c05a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c05c:	4a4b      	ldr	r2, [pc, #300]	; (800c18c <xTaskIncrementTick+0x14c>)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d120      	bne.n	800c0aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c068:	4b49      	ldr	r3, [pc, #292]	; (800c190 <xTaskIncrementTick+0x150>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00a      	beq.n	800c088 <xTaskIncrementTick+0x48>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	603b      	str	r3, [r7, #0]
}
 800c084:	bf00      	nop
 800c086:	e7fe      	b.n	800c086 <xTaskIncrementTick+0x46>
 800c088:	4b41      	ldr	r3, [pc, #260]	; (800c190 <xTaskIncrementTick+0x150>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	4b41      	ldr	r3, [pc, #260]	; (800c194 <xTaskIncrementTick+0x154>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a3f      	ldr	r2, [pc, #252]	; (800c190 <xTaskIncrementTick+0x150>)
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	4a3f      	ldr	r2, [pc, #252]	; (800c194 <xTaskIncrementTick+0x154>)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6013      	str	r3, [r2, #0]
 800c09c:	4b3e      	ldr	r3, [pc, #248]	; (800c198 <xTaskIncrementTick+0x158>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	4a3d      	ldr	r2, [pc, #244]	; (800c198 <xTaskIncrementTick+0x158>)
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	f000 fad1 	bl	800c64c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c0aa:	4b3c      	ldr	r3, [pc, #240]	; (800c19c <xTaskIncrementTick+0x15c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d349      	bcc.n	800c148 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0b4:	4b36      	ldr	r3, [pc, #216]	; (800c190 <xTaskIncrementTick+0x150>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d104      	bne.n	800c0c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0be:	4b37      	ldr	r3, [pc, #220]	; (800c19c <xTaskIncrementTick+0x15c>)
 800c0c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0c4:	601a      	str	r2, [r3, #0]
					break;
 800c0c6:	e03f      	b.n	800c148 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c8:	4b31      	ldr	r3, [pc, #196]	; (800c190 <xTaskIncrementTick+0x150>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c0d8:	693a      	ldr	r2, [r7, #16]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d203      	bcs.n	800c0e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c0e0:	4a2e      	ldr	r2, [pc, #184]	; (800c19c <xTaskIncrementTick+0x15c>)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c0e6:	e02f      	b.n	800c148 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe ff99 	bl	800b024 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	3318      	adds	r3, #24
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe ff90 	bl	800b024 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c108:	4b25      	ldr	r3, [pc, #148]	; (800c1a0 <xTaskIncrementTick+0x160>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d903      	bls.n	800c118 <xTaskIncrementTick+0xd8>
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c114:	4a22      	ldr	r2, [pc, #136]	; (800c1a0 <xTaskIncrementTick+0x160>)
 800c116:	6013      	str	r3, [r2, #0]
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11c:	4613      	mov	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4a1f      	ldr	r2, [pc, #124]	; (800c1a4 <xTaskIncrementTick+0x164>)
 800c126:	441a      	add	r2, r3
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	3304      	adds	r3, #4
 800c12c:	4619      	mov	r1, r3
 800c12e:	4610      	mov	r0, r2
 800c130:	f7fe ff1b 	bl	800af6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c138:	4b1b      	ldr	r3, [pc, #108]	; (800c1a8 <xTaskIncrementTick+0x168>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13e:	429a      	cmp	r2, r3
 800c140:	d3b8      	bcc.n	800c0b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c142:	2301      	movs	r3, #1
 800c144:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c146:	e7b5      	b.n	800c0b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c148:	4b17      	ldr	r3, [pc, #92]	; (800c1a8 <xTaskIncrementTick+0x168>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14e:	4915      	ldr	r1, [pc, #84]	; (800c1a4 <xTaskIncrementTick+0x164>)
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	440b      	add	r3, r1
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d901      	bls.n	800c164 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c160:	2301      	movs	r3, #1
 800c162:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c164:	4b11      	ldr	r3, [pc, #68]	; (800c1ac <xTaskIncrementTick+0x16c>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d007      	beq.n	800c17c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c16c:	2301      	movs	r3, #1
 800c16e:	617b      	str	r3, [r7, #20]
 800c170:	e004      	b.n	800c17c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c172:	4b0f      	ldr	r3, [pc, #60]	; (800c1b0 <xTaskIncrementTick+0x170>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3301      	adds	r3, #1
 800c178:	4a0d      	ldr	r2, [pc, #52]	; (800c1b0 <xTaskIncrementTick+0x170>)
 800c17a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c17c:	697b      	ldr	r3, [r7, #20]
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20001198 	.word	0x20001198
 800c18c:	20001174 	.word	0x20001174
 800c190:	20001128 	.word	0x20001128
 800c194:	2000112c 	.word	0x2000112c
 800c198:	20001188 	.word	0x20001188
 800c19c:	20001190 	.word	0x20001190
 800c1a0:	20001178 	.word	0x20001178
 800c1a4:	20000ca0 	.word	0x20000ca0
 800c1a8:	20000c9c 	.word	0x20000c9c
 800c1ac:	20001184 	.word	0x20001184
 800c1b0:	20001180 	.word	0x20001180

0800c1b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c1ba:	4b28      	ldr	r3, [pc, #160]	; (800c25c <vTaskSwitchContext+0xa8>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d003      	beq.n	800c1ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c1c2:	4b27      	ldr	r3, [pc, #156]	; (800c260 <vTaskSwitchContext+0xac>)
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c1c8:	e041      	b.n	800c24e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c1ca:	4b25      	ldr	r3, [pc, #148]	; (800c260 <vTaskSwitchContext+0xac>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1d0:	4b24      	ldr	r3, [pc, #144]	; (800c264 <vTaskSwitchContext+0xb0>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	60fb      	str	r3, [r7, #12]
 800c1d6:	e010      	b.n	800c1fa <vTaskSwitchContext+0x46>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10a      	bne.n	800c1f4 <vTaskSwitchContext+0x40>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	607b      	str	r3, [r7, #4]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <vTaskSwitchContext+0x3e>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	60fb      	str	r3, [r7, #12]
 800c1fa:	491b      	ldr	r1, [pc, #108]	; (800c268 <vTaskSwitchContext+0xb4>)
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	4613      	mov	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	440b      	add	r3, r1
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d0e4      	beq.n	800c1d8 <vTaskSwitchContext+0x24>
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	4613      	mov	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4a13      	ldr	r2, [pc, #76]	; (800c268 <vTaskSwitchContext+0xb4>)
 800c21a:	4413      	add	r3, r2
 800c21c:	60bb      	str	r3, [r7, #8]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	685a      	ldr	r2, [r3, #4]
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	605a      	str	r2, [r3, #4]
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	3308      	adds	r3, #8
 800c230:	429a      	cmp	r2, r3
 800c232:	d104      	bne.n	800c23e <vTaskSwitchContext+0x8a>
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	685a      	ldr	r2, [r3, #4]
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	605a      	str	r2, [r3, #4]
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	4a09      	ldr	r2, [pc, #36]	; (800c26c <vTaskSwitchContext+0xb8>)
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	4a06      	ldr	r2, [pc, #24]	; (800c264 <vTaskSwitchContext+0xb0>)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6013      	str	r3, [r2, #0]
}
 800c24e:	bf00      	nop
 800c250:	3714      	adds	r7, #20
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	20001198 	.word	0x20001198
 800c260:	20001184 	.word	0x20001184
 800c264:	20001178 	.word	0x20001178
 800c268:	20000ca0 	.word	0x20000ca0
 800c26c:	20000c9c 	.word	0x20000c9c

0800c270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10a      	bne.n	800c296 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	60fb      	str	r3, [r7, #12]
}
 800c292:	bf00      	nop
 800c294:	e7fe      	b.n	800c294 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c296:	4b07      	ldr	r3, [pc, #28]	; (800c2b4 <vTaskPlaceOnEventList+0x44>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3318      	adds	r3, #24
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f7fe fe87 	bl	800afb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	6838      	ldr	r0, [r7, #0]
 800c2a8:	f000 fa7c 	bl	800c7a4 <prvAddCurrentTaskToDelayedList>
}
 800c2ac:	bf00      	nop
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20000c9c 	.word	0x20000c9c

0800c2b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d10a      	bne.n	800c2e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	617b      	str	r3, [r7, #20]
}
 800c2dc:	bf00      	nop
 800c2de:	e7fe      	b.n	800c2de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <vTaskPlaceOnEventListRestricted+0x54>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3318      	adds	r3, #24
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f7fe fe3e 	bl	800af6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d002      	beq.n	800c2fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c2f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c2fa:	6879      	ldr	r1, [r7, #4]
 800c2fc:	68b8      	ldr	r0, [r7, #8]
 800c2fe:	f000 fa51 	bl	800c7a4 <prvAddCurrentTaskToDelayedList>
	}
 800c302:	bf00      	nop
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	20000c9c 	.word	0x20000c9c

0800c310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10a      	bne.n	800c33c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	60fb      	str	r3, [r7, #12]
}
 800c338:	bf00      	nop
 800c33a:	e7fe      	b.n	800c33a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	3318      	adds	r3, #24
 800c340:	4618      	mov	r0, r3
 800c342:	f7fe fe6f 	bl	800b024 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c346:	4b1e      	ldr	r3, [pc, #120]	; (800c3c0 <xTaskRemoveFromEventList+0xb0>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d11d      	bne.n	800c38a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	3304      	adds	r3, #4
 800c352:	4618      	mov	r0, r3
 800c354:	f7fe fe66 	bl	800b024 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c35c:	4b19      	ldr	r3, [pc, #100]	; (800c3c4 <xTaskRemoveFromEventList+0xb4>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	429a      	cmp	r2, r3
 800c362:	d903      	bls.n	800c36c <xTaskRemoveFromEventList+0x5c>
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c368:	4a16      	ldr	r2, [pc, #88]	; (800c3c4 <xTaskRemoveFromEventList+0xb4>)
 800c36a:	6013      	str	r3, [r2, #0]
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c370:	4613      	mov	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4a13      	ldr	r2, [pc, #76]	; (800c3c8 <xTaskRemoveFromEventList+0xb8>)
 800c37a:	441a      	add	r2, r3
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	3304      	adds	r3, #4
 800c380:	4619      	mov	r1, r3
 800c382:	4610      	mov	r0, r2
 800c384:	f7fe fdf1 	bl	800af6a <vListInsertEnd>
 800c388:	e005      	b.n	800c396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	3318      	adds	r3, #24
 800c38e:	4619      	mov	r1, r3
 800c390:	480e      	ldr	r0, [pc, #56]	; (800c3cc <xTaskRemoveFromEventList+0xbc>)
 800c392:	f7fe fdea 	bl	800af6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c39a:	4b0d      	ldr	r3, [pc, #52]	; (800c3d0 <xTaskRemoveFromEventList+0xc0>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d905      	bls.n	800c3b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c3a8:	4b0a      	ldr	r3, [pc, #40]	; (800c3d4 <xTaskRemoveFromEventList+0xc4>)
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	e001      	b.n	800c3b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c3b4:	697b      	ldr	r3, [r7, #20]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	20001198 	.word	0x20001198
 800c3c4:	20001178 	.word	0x20001178
 800c3c8:	20000ca0 	.word	0x20000ca0
 800c3cc:	20001130 	.word	0x20001130
 800c3d0:	20000c9c 	.word	0x20000c9c
 800c3d4:	20001184 	.word	0x20001184

0800c3d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c3e0:	4b06      	ldr	r3, [pc, #24]	; (800c3fc <vTaskInternalSetTimeOutState+0x24>)
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <vTaskInternalSetTimeOutState+0x28>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	605a      	str	r2, [r3, #4]
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	20001188 	.word	0x20001188
 800c400:	20001174 	.word	0x20001174

0800c404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b088      	sub	sp, #32
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10a      	bne.n	800c42a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c418:	f383 8811 	msr	BASEPRI, r3
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	f3bf 8f4f 	dsb	sy
 800c424:	613b      	str	r3, [r7, #16]
}
 800c426:	bf00      	nop
 800c428:	e7fe      	b.n	800c428 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10a      	bne.n	800c446 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	60fb      	str	r3, [r7, #12]
}
 800c442:	bf00      	nop
 800c444:	e7fe      	b.n	800c444 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c446:	f000 fe7d 	bl	800d144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c44a:	4b1d      	ldr	r3, [pc, #116]	; (800c4c0 <xTaskCheckForTimeOut+0xbc>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	69ba      	ldr	r2, [r7, #24]
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c462:	d102      	bne.n	800c46a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c464:	2300      	movs	r3, #0
 800c466:	61fb      	str	r3, [r7, #28]
 800c468:	e023      	b.n	800c4b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	4b15      	ldr	r3, [pc, #84]	; (800c4c4 <xTaskCheckForTimeOut+0xc0>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	d007      	beq.n	800c486 <xTaskCheckForTimeOut+0x82>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	69ba      	ldr	r2, [r7, #24]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d302      	bcc.n	800c486 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c480:	2301      	movs	r3, #1
 800c482:	61fb      	str	r3, [r7, #28]
 800c484:	e015      	b.n	800c4b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d20b      	bcs.n	800c4a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	1ad2      	subs	r2, r2, r3
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7ff ff9b 	bl	800c3d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	61fb      	str	r3, [r7, #28]
 800c4a6:	e004      	b.n	800c4b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c4b2:	f000 fe77 	bl	800d1a4 <vPortExitCritical>

	return xReturn;
 800c4b6:	69fb      	ldr	r3, [r7, #28]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3720      	adds	r7, #32
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20001174 	.word	0x20001174
 800c4c4:	20001188 	.word	0x20001188

0800c4c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4cc:	4b03      	ldr	r3, [pc, #12]	; (800c4dc <vTaskMissedYield+0x14>)
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	601a      	str	r2, [r3, #0]
}
 800c4d2:	bf00      	nop
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr
 800c4dc:	20001184 	.word	0x20001184

0800c4e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c4e8:	f000 f852 	bl	800c590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c4ec:	4b06      	ldr	r3, [pc, #24]	; (800c508 <prvIdleTask+0x28>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d9f9      	bls.n	800c4e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c4f4:	4b05      	ldr	r3, [pc, #20]	; (800c50c <prvIdleTask+0x2c>)
 800c4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4fa:	601a      	str	r2, [r3, #0]
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c504:	e7f0      	b.n	800c4e8 <prvIdleTask+0x8>
 800c506:	bf00      	nop
 800c508:	20000ca0 	.word	0x20000ca0
 800c50c:	e000ed04 	.word	0xe000ed04

0800c510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c516:	2300      	movs	r3, #0
 800c518:	607b      	str	r3, [r7, #4]
 800c51a:	e00c      	b.n	800c536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	4613      	mov	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4413      	add	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4a12      	ldr	r2, [pc, #72]	; (800c570 <prvInitialiseTaskLists+0x60>)
 800c528:	4413      	add	r3, r2
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fe fcf0 	bl	800af10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3301      	adds	r3, #1
 800c534:	607b      	str	r3, [r7, #4]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b37      	cmp	r3, #55	; 0x37
 800c53a:	d9ef      	bls.n	800c51c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c53c:	480d      	ldr	r0, [pc, #52]	; (800c574 <prvInitialiseTaskLists+0x64>)
 800c53e:	f7fe fce7 	bl	800af10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c542:	480d      	ldr	r0, [pc, #52]	; (800c578 <prvInitialiseTaskLists+0x68>)
 800c544:	f7fe fce4 	bl	800af10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c548:	480c      	ldr	r0, [pc, #48]	; (800c57c <prvInitialiseTaskLists+0x6c>)
 800c54a:	f7fe fce1 	bl	800af10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c54e:	480c      	ldr	r0, [pc, #48]	; (800c580 <prvInitialiseTaskLists+0x70>)
 800c550:	f7fe fcde 	bl	800af10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c554:	480b      	ldr	r0, [pc, #44]	; (800c584 <prvInitialiseTaskLists+0x74>)
 800c556:	f7fe fcdb 	bl	800af10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c55a:	4b0b      	ldr	r3, [pc, #44]	; (800c588 <prvInitialiseTaskLists+0x78>)
 800c55c:	4a05      	ldr	r2, [pc, #20]	; (800c574 <prvInitialiseTaskLists+0x64>)
 800c55e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c560:	4b0a      	ldr	r3, [pc, #40]	; (800c58c <prvInitialiseTaskLists+0x7c>)
 800c562:	4a05      	ldr	r2, [pc, #20]	; (800c578 <prvInitialiseTaskLists+0x68>)
 800c564:	601a      	str	r2, [r3, #0]
}
 800c566:	bf00      	nop
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20000ca0 	.word	0x20000ca0
 800c574:	20001100 	.word	0x20001100
 800c578:	20001114 	.word	0x20001114
 800c57c:	20001130 	.word	0x20001130
 800c580:	20001144 	.word	0x20001144
 800c584:	2000115c 	.word	0x2000115c
 800c588:	20001128 	.word	0x20001128
 800c58c:	2000112c 	.word	0x2000112c

0800c590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c596:	e019      	b.n	800c5cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c598:	f000 fdd4 	bl	800d144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c59c:	4b10      	ldr	r3, [pc, #64]	; (800c5e0 <prvCheckTasksWaitingTermination+0x50>)
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe fd3b 	bl	800b024 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c5ae:	4b0d      	ldr	r3, [pc, #52]	; (800c5e4 <prvCheckTasksWaitingTermination+0x54>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	4a0b      	ldr	r2, [pc, #44]	; (800c5e4 <prvCheckTasksWaitingTermination+0x54>)
 800c5b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c5b8:	4b0b      	ldr	r3, [pc, #44]	; (800c5e8 <prvCheckTasksWaitingTermination+0x58>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	4a0a      	ldr	r2, [pc, #40]	; (800c5e8 <prvCheckTasksWaitingTermination+0x58>)
 800c5c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c5c2:	f000 fdef 	bl	800d1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f810 	bl	800c5ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5cc:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <prvCheckTasksWaitingTermination+0x58>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1e1      	bne.n	800c598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	20001144 	.word	0x20001144
 800c5e4:	20001170 	.word	0x20001170
 800c5e8:	20001158 	.word	0x20001158

0800c5ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d108      	bne.n	800c610 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c602:	4618      	mov	r0, r3
 800c604:	f000 ff8c 	bl	800d520 <vPortFree>
				vPortFree( pxTCB );
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 ff89 	bl	800d520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c60e:	e018      	b.n	800c642 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c616:	2b01      	cmp	r3, #1
 800c618:	d103      	bne.n	800c622 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 ff80 	bl	800d520 <vPortFree>
	}
 800c620:	e00f      	b.n	800c642 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c628:	2b02      	cmp	r3, #2
 800c62a:	d00a      	beq.n	800c642 <prvDeleteTCB+0x56>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	60fb      	str	r3, [r7, #12]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <prvDeleteTCB+0x54>
	}
 800c642:	bf00      	nop
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
	...

0800c64c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c652:	4b0c      	ldr	r3, [pc, #48]	; (800c684 <prvResetNextTaskUnblockTime+0x38>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d104      	bne.n	800c666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c65c:	4b0a      	ldr	r3, [pc, #40]	; (800c688 <prvResetNextTaskUnblockTime+0x3c>)
 800c65e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c664:	e008      	b.n	800c678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c666:	4b07      	ldr	r3, [pc, #28]	; (800c684 <prvResetNextTaskUnblockTime+0x38>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	4a04      	ldr	r2, [pc, #16]	; (800c688 <prvResetNextTaskUnblockTime+0x3c>)
 800c676:	6013      	str	r3, [r2, #0]
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr
 800c684:	20001128 	.word	0x20001128
 800c688:	20001190 	.word	0x20001190

0800c68c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c692:	4b0b      	ldr	r3, [pc, #44]	; (800c6c0 <xTaskGetSchedulerState+0x34>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d102      	bne.n	800c6a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c69a:	2301      	movs	r3, #1
 800c69c:	607b      	str	r3, [r7, #4]
 800c69e:	e008      	b.n	800c6b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6a0:	4b08      	ldr	r3, [pc, #32]	; (800c6c4 <xTaskGetSchedulerState+0x38>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d102      	bne.n	800c6ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	607b      	str	r3, [r7, #4]
 800c6ac:	e001      	b.n	800c6b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c6b2:	687b      	ldr	r3, [r7, #4]
	}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	2000117c 	.word	0x2000117c
 800c6c4:	20001198 	.word	0x20001198

0800c6c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d056      	beq.n	800c78c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c6de:	4b2e      	ldr	r3, [pc, #184]	; (800c798 <xTaskPriorityDisinherit+0xd0>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	693a      	ldr	r2, [r7, #16]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d00a      	beq.n	800c6fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	60fb      	str	r3, [r7, #12]
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10a      	bne.n	800c71c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	60bb      	str	r3, [r7, #8]
}
 800c718:	bf00      	nop
 800c71a:	e7fe      	b.n	800c71a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c720:	1e5a      	subs	r2, r3, #1
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c72e:	429a      	cmp	r2, r3
 800c730:	d02c      	beq.n	800c78c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c736:	2b00      	cmp	r3, #0
 800c738:	d128      	bne.n	800c78c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	3304      	adds	r3, #4
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe fc70 	bl	800b024 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c750:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c75c:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <xTaskPriorityDisinherit+0xd4>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	d903      	bls.n	800c76c <xTaskPriorityDisinherit+0xa4>
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c768:	4a0c      	ldr	r2, [pc, #48]	; (800c79c <xTaskPriorityDisinherit+0xd4>)
 800c76a:	6013      	str	r3, [r2, #0]
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c770:	4613      	mov	r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	4413      	add	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4a09      	ldr	r2, [pc, #36]	; (800c7a0 <xTaskPriorityDisinherit+0xd8>)
 800c77a:	441a      	add	r2, r3
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	3304      	adds	r3, #4
 800c780:	4619      	mov	r1, r3
 800c782:	4610      	mov	r0, r2
 800c784:	f7fe fbf1 	bl	800af6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c788:	2301      	movs	r3, #1
 800c78a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c78c:	697b      	ldr	r3, [r7, #20]
	}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	20000c9c 	.word	0x20000c9c
 800c79c:	20001178 	.word	0x20001178
 800c7a0:	20000ca0 	.word	0x20000ca0

0800c7a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c7ae:	4b21      	ldr	r3, [pc, #132]	; (800c834 <prvAddCurrentTaskToDelayedList+0x90>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7b4:	4b20      	ldr	r3, [pc, #128]	; (800c838 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe fc32 	bl	800b024 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7c6:	d10a      	bne.n	800c7de <prvAddCurrentTaskToDelayedList+0x3a>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d007      	beq.n	800c7de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7ce:	4b1a      	ldr	r3, [pc, #104]	; (800c838 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3304      	adds	r3, #4
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	4819      	ldr	r0, [pc, #100]	; (800c83c <prvAddCurrentTaskToDelayedList+0x98>)
 800c7d8:	f7fe fbc7 	bl	800af6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7dc:	e026      	b.n	800c82c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7e6:	4b14      	ldr	r3, [pc, #80]	; (800c838 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d209      	bcs.n	800c80a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7f6:	4b12      	ldr	r3, [pc, #72]	; (800c840 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	4b0f      	ldr	r3, [pc, #60]	; (800c838 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	3304      	adds	r3, #4
 800c800:	4619      	mov	r1, r3
 800c802:	4610      	mov	r0, r2
 800c804:	f7fe fbd5 	bl	800afb2 <vListInsert>
}
 800c808:	e010      	b.n	800c82c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c80a:	4b0e      	ldr	r3, [pc, #56]	; (800c844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <prvAddCurrentTaskToDelayedList+0x94>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	3304      	adds	r3, #4
 800c814:	4619      	mov	r1, r3
 800c816:	4610      	mov	r0, r2
 800c818:	f7fe fbcb 	bl	800afb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c81c:	4b0a      	ldr	r3, [pc, #40]	; (800c848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	429a      	cmp	r2, r3
 800c824:	d202      	bcs.n	800c82c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c826:	4a08      	ldr	r2, [pc, #32]	; (800c848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	6013      	str	r3, [r2, #0]
}
 800c82c:	bf00      	nop
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	20001174 	.word	0x20001174
 800c838:	20000c9c 	.word	0x20000c9c
 800c83c:	2000115c 	.word	0x2000115c
 800c840:	2000112c 	.word	0x2000112c
 800c844:	20001128 	.word	0x20001128
 800c848:	20001190 	.word	0x20001190

0800c84c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b08a      	sub	sp, #40	; 0x28
 800c850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c852:	2300      	movs	r3, #0
 800c854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c856:	f000 fb07 	bl	800ce68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c85a:	4b1c      	ldr	r3, [pc, #112]	; (800c8cc <xTimerCreateTimerTask+0x80>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d021      	beq.n	800c8a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c866:	2300      	movs	r3, #0
 800c868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c86a:	1d3a      	adds	r2, r7, #4
 800c86c:	f107 0108 	add.w	r1, r7, #8
 800c870:	f107 030c 	add.w	r3, r7, #12
 800c874:	4618      	mov	r0, r3
 800c876:	f7fe fb31 	bl	800aedc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c87a:	6879      	ldr	r1, [r7, #4]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	9202      	str	r2, [sp, #8]
 800c882:	9301      	str	r3, [sp, #4]
 800c884:	2302      	movs	r3, #2
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	2300      	movs	r3, #0
 800c88a:	460a      	mov	r2, r1
 800c88c:	4910      	ldr	r1, [pc, #64]	; (800c8d0 <xTimerCreateTimerTask+0x84>)
 800c88e:	4811      	ldr	r0, [pc, #68]	; (800c8d4 <xTimerCreateTimerTask+0x88>)
 800c890:	f7ff f8de 	bl	800ba50 <xTaskCreateStatic>
 800c894:	4603      	mov	r3, r0
 800c896:	4a10      	ldr	r2, [pc, #64]	; (800c8d8 <xTimerCreateTimerTask+0x8c>)
 800c898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c89a:	4b0f      	ldr	r3, [pc, #60]	; (800c8d8 <xTimerCreateTimerTask+0x8c>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	613b      	str	r3, [r7, #16]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c8c2:	697b      	ldr	r3, [r7, #20]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	200011cc 	.word	0x200011cc
 800c8d0:	0800e8f4 	.word	0x0800e8f4
 800c8d4:	0800ca11 	.word	0x0800ca11
 800c8d8:	200011d0 	.word	0x200011d0

0800c8dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10a      	bne.n	800c90a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	623b      	str	r3, [r7, #32]
}
 800c906:	bf00      	nop
 800c908:	e7fe      	b.n	800c908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c90a:	4b1a      	ldr	r3, [pc, #104]	; (800c974 <xTimerGenericCommand+0x98>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d02a      	beq.n	800c968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2b05      	cmp	r3, #5
 800c922:	dc18      	bgt.n	800c956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c924:	f7ff feb2 	bl	800c68c <xTaskGetSchedulerState>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d109      	bne.n	800c942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c92e:	4b11      	ldr	r3, [pc, #68]	; (800c974 <xTimerGenericCommand+0x98>)
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	f107 0110 	add.w	r1, r7, #16
 800c936:	2300      	movs	r3, #0
 800c938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c93a:	f7fe fca1 	bl	800b280 <xQueueGenericSend>
 800c93e:	6278      	str	r0, [r7, #36]	; 0x24
 800c940:	e012      	b.n	800c968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c942:	4b0c      	ldr	r3, [pc, #48]	; (800c974 <xTimerGenericCommand+0x98>)
 800c944:	6818      	ldr	r0, [r3, #0]
 800c946:	f107 0110 	add.w	r1, r7, #16
 800c94a:	2300      	movs	r3, #0
 800c94c:	2200      	movs	r2, #0
 800c94e:	f7fe fc97 	bl	800b280 <xQueueGenericSend>
 800c952:	6278      	str	r0, [r7, #36]	; 0x24
 800c954:	e008      	b.n	800c968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c956:	4b07      	ldr	r3, [pc, #28]	; (800c974 <xTimerGenericCommand+0x98>)
 800c958:	6818      	ldr	r0, [r3, #0]
 800c95a:	f107 0110 	add.w	r1, r7, #16
 800c95e:	2300      	movs	r3, #0
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	f7fe fd8b 	bl	800b47c <xQueueGenericSendFromISR>
 800c966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3728      	adds	r7, #40	; 0x28
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	200011cc 	.word	0x200011cc

0800c978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b088      	sub	sp, #32
 800c97c:	af02      	add	r7, sp, #8
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c982:	4b22      	ldr	r3, [pc, #136]	; (800ca0c <prvProcessExpiredTimer+0x94>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	3304      	adds	r3, #4
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe fb47 	bl	800b024 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d022      	beq.n	800c9ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	699a      	ldr	r2, [r3, #24]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	18d1      	adds	r1, r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	6978      	ldr	r0, [r7, #20]
 800c9b2:	f000 f8d1 	bl	800cb58 <prvInsertTimerInActiveList>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01f      	beq.n	800c9fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	6978      	ldr	r0, [r7, #20]
 800c9c8:	f7ff ff88 	bl	800c8dc <xTimerGenericCommand>
 800c9cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d113      	bne.n	800c9fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	60fb      	str	r3, [r7, #12]
}
 800c9e6:	bf00      	nop
 800c9e8:	e7fe      	b.n	800c9e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9f0:	f023 0301 	bic.w	r3, r3, #1
 800c9f4:	b2da      	uxtb	r2, r3
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	6a1b      	ldr	r3, [r3, #32]
 800ca00:	6978      	ldr	r0, [r7, #20]
 800ca02:	4798      	blx	r3
}
 800ca04:	bf00      	nop
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	200011c4 	.word	0x200011c4

0800ca10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca18:	f107 0308 	add.w	r3, r7, #8
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 f857 	bl	800cad0 <prvGetNextExpireTime>
 800ca22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	4619      	mov	r1, r3
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f000 f803 	bl	800ca34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ca2e:	f000 f8d5 	bl	800cbdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca32:	e7f1      	b.n	800ca18 <prvTimerTask+0x8>

0800ca34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca3e:	f7ff fa43 	bl	800bec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca42:	f107 0308 	add.w	r3, r7, #8
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 f866 	bl	800cb18 <prvSampleTimeNow>
 800ca4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d130      	bne.n	800cab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10a      	bne.n	800ca70 <prvProcessTimerOrBlockTask+0x3c>
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d806      	bhi.n	800ca70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca62:	f7ff fa3f 	bl	800bee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca66:	68f9      	ldr	r1, [r7, #12]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7ff ff85 	bl	800c978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca6e:	e024      	b.n	800caba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d008      	beq.n	800ca88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca76:	4b13      	ldr	r3, [pc, #76]	; (800cac4 <prvProcessTimerOrBlockTask+0x90>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d101      	bne.n	800ca84 <prvProcessTimerOrBlockTask+0x50>
 800ca80:	2301      	movs	r3, #1
 800ca82:	e000      	b.n	800ca86 <prvProcessTimerOrBlockTask+0x52>
 800ca84:	2300      	movs	r3, #0
 800ca86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca88:	4b0f      	ldr	r3, [pc, #60]	; (800cac8 <prvProcessTimerOrBlockTask+0x94>)
 800ca8a:	6818      	ldr	r0, [r3, #0]
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	4619      	mov	r1, r3
 800ca96:	f7fe ffa7 	bl	800b9e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca9a:	f7ff fa23 	bl	800bee4 <xTaskResumeAll>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10a      	bne.n	800caba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800caa4:	4b09      	ldr	r3, [pc, #36]	; (800cacc <prvProcessTimerOrBlockTask+0x98>)
 800caa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	f3bf 8f6f 	isb	sy
}
 800cab4:	e001      	b.n	800caba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cab6:	f7ff fa15 	bl	800bee4 <xTaskResumeAll>
}
 800caba:	bf00      	nop
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	200011c8 	.word	0x200011c8
 800cac8:	200011cc 	.word	0x200011cc
 800cacc:	e000ed04 	.word	0xe000ed04

0800cad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cad8:	4b0e      	ldr	r3, [pc, #56]	; (800cb14 <prvGetNextExpireTime+0x44>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d101      	bne.n	800cae6 <prvGetNextExpireTime+0x16>
 800cae2:	2201      	movs	r2, #1
 800cae4:	e000      	b.n	800cae8 <prvGetNextExpireTime+0x18>
 800cae6:	2200      	movs	r2, #0
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d105      	bne.n	800cb00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800caf4:	4b07      	ldr	r3, [pc, #28]	; (800cb14 <prvGetNextExpireTime+0x44>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	60fb      	str	r3, [r7, #12]
 800cafe:	e001      	b.n	800cb04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cb00:	2300      	movs	r3, #0
 800cb02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cb04:	68fb      	ldr	r3, [r7, #12]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	200011c4 	.word	0x200011c4

0800cb18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cb20:	f7ff fa7e 	bl	800c020 <xTaskGetTickCount>
 800cb24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cb26:	4b0b      	ldr	r3, [pc, #44]	; (800cb54 <prvSampleTimeNow+0x3c>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d205      	bcs.n	800cb3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb30:	f000 f936 	bl	800cda0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2201      	movs	r2, #1
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	e002      	b.n	800cb42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb42:	4a04      	ldr	r2, [pc, #16]	; (800cb54 <prvSampleTimeNow+0x3c>)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb48:	68fb      	ldr	r3, [r7, #12]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	200011d4 	.word	0x200011d4

0800cb58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
 800cb64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb66:	2300      	movs	r3, #0
 800cb68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d812      	bhi.n	800cba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	1ad2      	subs	r2, r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	699b      	ldr	r3, [r3, #24]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d302      	bcc.n	800cb92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	617b      	str	r3, [r7, #20]
 800cb90:	e01b      	b.n	800cbca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb92:	4b10      	ldr	r3, [pc, #64]	; (800cbd4 <prvInsertTimerInActiveList+0x7c>)
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	3304      	adds	r3, #4
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	f7fe fa08 	bl	800afb2 <vListInsert>
 800cba2:	e012      	b.n	800cbca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d206      	bcs.n	800cbba <prvInsertTimerInActiveList+0x62>
 800cbac:	68ba      	ldr	r2, [r7, #8]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d302      	bcc.n	800cbba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	617b      	str	r3, [r7, #20]
 800cbb8:	e007      	b.n	800cbca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbba:	4b07      	ldr	r3, [pc, #28]	; (800cbd8 <prvInsertTimerInActiveList+0x80>)
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	f7fe f9f4 	bl	800afb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cbca:	697b      	ldr	r3, [r7, #20]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3718      	adds	r7, #24
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	200011c8 	.word	0x200011c8
 800cbd8:	200011c4 	.word	0x200011c4

0800cbdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b08e      	sub	sp, #56	; 0x38
 800cbe0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbe2:	e0ca      	b.n	800cd7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	da18      	bge.n	800cc1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cbea:	1d3b      	adds	r3, r7, #4
 800cbec:	3304      	adds	r3, #4
 800cbee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10a      	bne.n	800cc0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	61fb      	str	r3, [r7, #28]
}
 800cc08:	bf00      	nop
 800cc0a:	e7fe      	b.n	800cc0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc12:	6850      	ldr	r0, [r2, #4]
 800cc14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc16:	6892      	ldr	r2, [r2, #8]
 800cc18:	4611      	mov	r1, r2
 800cc1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f2c0 80ab 	blt.w	800cd7a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d004      	beq.n	800cc3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc32:	3304      	adds	r3, #4
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fe f9f5 	bl	800b024 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc3a:	463b      	mov	r3, r7
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff ff6b 	bl	800cb18 <prvSampleTimeNow>
 800cc42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b09      	cmp	r3, #9
 800cc48:	f200 8096 	bhi.w	800cd78 <prvProcessReceivedCommands+0x19c>
 800cc4c:	a201      	add	r2, pc, #4	; (adr r2, 800cc54 <prvProcessReceivedCommands+0x78>)
 800cc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc52:	bf00      	nop
 800cc54:	0800cc7d 	.word	0x0800cc7d
 800cc58:	0800cc7d 	.word	0x0800cc7d
 800cc5c:	0800cc7d 	.word	0x0800cc7d
 800cc60:	0800ccf1 	.word	0x0800ccf1
 800cc64:	0800cd05 	.word	0x0800cd05
 800cc68:	0800cd4f 	.word	0x0800cd4f
 800cc6c:	0800cc7d 	.word	0x0800cc7d
 800cc70:	0800cc7d 	.word	0x0800cc7d
 800cc74:	0800ccf1 	.word	0x0800ccf1
 800cc78:	0800cd05 	.word	0x0800cd05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc82:	f043 0301 	orr.w	r3, r3, #1
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	18d1      	adds	r1, r2, r3
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc9c:	f7ff ff5c 	bl	800cb58 <prvInsertTimerInActiveList>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d069      	beq.n	800cd7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d05e      	beq.n	800cd7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc0:	699b      	ldr	r3, [r3, #24]
 800ccc2:	441a      	add	r2, r3
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	2100      	movs	r1, #0
 800cccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccce:	f7ff fe05 	bl	800c8dc <xTimerGenericCommand>
 800ccd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d14f      	bne.n	800cd7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	61bb      	str	r3, [r7, #24]
}
 800ccec:	bf00      	nop
 800ccee:	e7fe      	b.n	800ccee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccf6:	f023 0301 	bic.w	r3, r3, #1
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cd02:	e03a      	b.n	800cd7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd0a:	f043 0301 	orr.w	r3, r3, #1
 800cd0e:	b2da      	uxtb	r2, r3
 800cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1e:	699b      	ldr	r3, [r3, #24]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10a      	bne.n	800cd3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	617b      	str	r3, [r7, #20]
}
 800cd36:	bf00      	nop
 800cd38:	e7fe      	b.n	800cd38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3c:	699a      	ldr	r2, [r3, #24]
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd40:	18d1      	adds	r1, r2, r3
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd48:	f7ff ff06 	bl	800cb58 <prvInsertTimerInActiveList>
					break;
 800cd4c:	e015      	b.n	800cd7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd54:	f003 0302 	and.w	r3, r3, #2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d103      	bne.n	800cd64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cd5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd5e:	f000 fbdf 	bl	800d520 <vPortFree>
 800cd62:	e00a      	b.n	800cd7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd6a:	f023 0301 	bic.w	r3, r3, #1
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd76:	e000      	b.n	800cd7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cd78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd7a:	4b08      	ldr	r3, [pc, #32]	; (800cd9c <prvProcessReceivedCommands+0x1c0>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	1d39      	adds	r1, r7, #4
 800cd80:	2200      	movs	r2, #0
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe fc16 	bl	800b5b4 <xQueueReceive>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f47f af2a 	bne.w	800cbe4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cd90:	bf00      	nop
 800cd92:	bf00      	nop
 800cd94:	3730      	adds	r7, #48	; 0x30
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	200011cc 	.word	0x200011cc

0800cda0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cda6:	e048      	b.n	800ce3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cda8:	4b2d      	ldr	r3, [pc, #180]	; (800ce60 <prvSwitchTimerLists+0xc0>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdb2:	4b2b      	ldr	r3, [pc, #172]	; (800ce60 <prvSwitchTimerLists+0xc0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fe f92f 	bl	800b024 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdd4:	f003 0304 	and.w	r3, r3, #4
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d02e      	beq.n	800ce3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	693a      	ldr	r2, [r7, #16]
 800cde2:	4413      	add	r3, r2
 800cde4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d90e      	bls.n	800ce0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdfa:	4b19      	ldr	r3, [pc, #100]	; (800ce60 <prvSwitchTimerLists+0xc0>)
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3304      	adds	r3, #4
 800ce02:	4619      	mov	r1, r3
 800ce04:	4610      	mov	r0, r2
 800ce06:	f7fe f8d4 	bl	800afb2 <vListInsert>
 800ce0a:	e016      	b.n	800ce3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	2300      	movs	r3, #0
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	2100      	movs	r1, #0
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f7ff fd60 	bl	800c8dc <xTimerGenericCommand>
 800ce1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10a      	bne.n	800ce3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ce24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce28:	f383 8811 	msr	BASEPRI, r3
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f3bf 8f4f 	dsb	sy
 800ce34:	603b      	str	r3, [r7, #0]
}
 800ce36:	bf00      	nop
 800ce38:	e7fe      	b.n	800ce38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce3a:	4b09      	ldr	r3, [pc, #36]	; (800ce60 <prvSwitchTimerLists+0xc0>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1b1      	bne.n	800cda8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce44:	4b06      	ldr	r3, [pc, #24]	; (800ce60 <prvSwitchTimerLists+0xc0>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce4a:	4b06      	ldr	r3, [pc, #24]	; (800ce64 <prvSwitchTimerLists+0xc4>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a04      	ldr	r2, [pc, #16]	; (800ce60 <prvSwitchTimerLists+0xc0>)
 800ce50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce52:	4a04      	ldr	r2, [pc, #16]	; (800ce64 <prvSwitchTimerLists+0xc4>)
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	6013      	str	r3, [r2, #0]
}
 800ce58:	bf00      	nop
 800ce5a:	3718      	adds	r7, #24
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	200011c4 	.word	0x200011c4
 800ce64:	200011c8 	.word	0x200011c8

0800ce68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce6e:	f000 f969 	bl	800d144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce72:	4b15      	ldr	r3, [pc, #84]	; (800cec8 <prvCheckForValidListAndQueue+0x60>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d120      	bne.n	800cebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce7a:	4814      	ldr	r0, [pc, #80]	; (800cecc <prvCheckForValidListAndQueue+0x64>)
 800ce7c:	f7fe f848 	bl	800af10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce80:	4813      	ldr	r0, [pc, #76]	; (800ced0 <prvCheckForValidListAndQueue+0x68>)
 800ce82:	f7fe f845 	bl	800af10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce86:	4b13      	ldr	r3, [pc, #76]	; (800ced4 <prvCheckForValidListAndQueue+0x6c>)
 800ce88:	4a10      	ldr	r2, [pc, #64]	; (800cecc <prvCheckForValidListAndQueue+0x64>)
 800ce8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce8c:	4b12      	ldr	r3, [pc, #72]	; (800ced8 <prvCheckForValidListAndQueue+0x70>)
 800ce8e:	4a10      	ldr	r2, [pc, #64]	; (800ced0 <prvCheckForValidListAndQueue+0x68>)
 800ce90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce92:	2300      	movs	r3, #0
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	4b11      	ldr	r3, [pc, #68]	; (800cedc <prvCheckForValidListAndQueue+0x74>)
 800ce98:	4a11      	ldr	r2, [pc, #68]	; (800cee0 <prvCheckForValidListAndQueue+0x78>)
 800ce9a:	2110      	movs	r1, #16
 800ce9c:	200a      	movs	r0, #10
 800ce9e:	f7fe f953 	bl	800b148 <xQueueGenericCreateStatic>
 800cea2:	4603      	mov	r3, r0
 800cea4:	4a08      	ldr	r2, [pc, #32]	; (800cec8 <prvCheckForValidListAndQueue+0x60>)
 800cea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cea8:	4b07      	ldr	r3, [pc, #28]	; (800cec8 <prvCheckForValidListAndQueue+0x60>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ceb0:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <prvCheckForValidListAndQueue+0x60>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	490b      	ldr	r1, [pc, #44]	; (800cee4 <prvCheckForValidListAndQueue+0x7c>)
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fe fd6c 	bl	800b994 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cebc:	f000 f972 	bl	800d1a4 <vPortExitCritical>
}
 800cec0:	bf00      	nop
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	200011cc 	.word	0x200011cc
 800cecc:	2000119c 	.word	0x2000119c
 800ced0:	200011b0 	.word	0x200011b0
 800ced4:	200011c4 	.word	0x200011c4
 800ced8:	200011c8 	.word	0x200011c8
 800cedc:	20001278 	.word	0x20001278
 800cee0:	200011d8 	.word	0x200011d8
 800cee4:	0800e8fc 	.word	0x0800e8fc

0800cee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	3b04      	subs	r3, #4
 800cef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3b04      	subs	r3, #4
 800cf06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	f023 0201 	bic.w	r2, r3, #1
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3b04      	subs	r3, #4
 800cf16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf18:	4a0c      	ldr	r2, [pc, #48]	; (800cf4c <pxPortInitialiseStack+0x64>)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	3b14      	subs	r3, #20
 800cf22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3b04      	subs	r3, #4
 800cf2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f06f 0202 	mvn.w	r2, #2
 800cf36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	3b20      	subs	r3, #32
 800cf3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	0800cf51 	.word	0x0800cf51

0800cf50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf5a:	4b12      	ldr	r3, [pc, #72]	; (800cfa4 <prvTaskExitError+0x54>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf62:	d00a      	beq.n	800cf7a <prvTaskExitError+0x2a>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	60fb      	str	r3, [r7, #12]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <prvTaskExitError+0x28>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	60bb      	str	r3, [r7, #8]
}
 800cf8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf8e:	bf00      	nop
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0fc      	beq.n	800cf90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf96:	bf00      	nop
 800cf98:	bf00      	nop
 800cf9a:	3714      	adds	r7, #20
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	2000014c 	.word	0x2000014c
	...

0800cfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cfb0:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <pxCurrentTCBConst2>)
 800cfb2:	6819      	ldr	r1, [r3, #0]
 800cfb4:	6808      	ldr	r0, [r1, #0]
 800cfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfba:	f380 8809 	msr	PSP, r0
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f04f 0000 	mov.w	r0, #0
 800cfc6:	f380 8811 	msr	BASEPRI, r0
 800cfca:	4770      	bx	lr
 800cfcc:	f3af 8000 	nop.w

0800cfd0 <pxCurrentTCBConst2>:
 800cfd0:	20000c9c 	.word	0x20000c9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop

0800cfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cfd8:	4808      	ldr	r0, [pc, #32]	; (800cffc <prvPortStartFirstTask+0x24>)
 800cfda:	6800      	ldr	r0, [r0, #0]
 800cfdc:	6800      	ldr	r0, [r0, #0]
 800cfde:	f380 8808 	msr	MSP, r0
 800cfe2:	f04f 0000 	mov.w	r0, #0
 800cfe6:	f380 8814 	msr	CONTROL, r0
 800cfea:	b662      	cpsie	i
 800cfec:	b661      	cpsie	f
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	df00      	svc	0
 800cff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cffa:	bf00      	nop
 800cffc:	e000ed08 	.word	0xe000ed08

0800d000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d006:	4b46      	ldr	r3, [pc, #280]	; (800d120 <xPortStartScheduler+0x120>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a46      	ldr	r2, [pc, #280]	; (800d124 <xPortStartScheduler+0x124>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d10a      	bne.n	800d026 <xPortStartScheduler+0x26>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	613b      	str	r3, [r7, #16]
}
 800d022:	bf00      	nop
 800d024:	e7fe      	b.n	800d024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d026:	4b3e      	ldr	r3, [pc, #248]	; (800d120 <xPortStartScheduler+0x120>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a3f      	ldr	r2, [pc, #252]	; (800d128 <xPortStartScheduler+0x128>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d10a      	bne.n	800d046 <xPortStartScheduler+0x46>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	60fb      	str	r3, [r7, #12]
}
 800d042:	bf00      	nop
 800d044:	e7fe      	b.n	800d044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d046:	4b39      	ldr	r3, [pc, #228]	; (800d12c <xPortStartScheduler+0x12c>)
 800d048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	22ff      	movs	r2, #255	; 0xff
 800d056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d060:	78fb      	ldrb	r3, [r7, #3]
 800d062:	b2db      	uxtb	r3, r3
 800d064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	4b31      	ldr	r3, [pc, #196]	; (800d130 <xPortStartScheduler+0x130>)
 800d06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d06e:	4b31      	ldr	r3, [pc, #196]	; (800d134 <xPortStartScheduler+0x134>)
 800d070:	2207      	movs	r2, #7
 800d072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d074:	e009      	b.n	800d08a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d076:	4b2f      	ldr	r3, [pc, #188]	; (800d134 <xPortStartScheduler+0x134>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	4a2d      	ldr	r2, [pc, #180]	; (800d134 <xPortStartScheduler+0x134>)
 800d07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d080:	78fb      	ldrb	r3, [r7, #3]
 800d082:	b2db      	uxtb	r3, r3
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	b2db      	uxtb	r3, r3
 800d088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d08a:	78fb      	ldrb	r3, [r7, #3]
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d092:	2b80      	cmp	r3, #128	; 0x80
 800d094:	d0ef      	beq.n	800d076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d096:	4b27      	ldr	r3, [pc, #156]	; (800d134 <xPortStartScheduler+0x134>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f1c3 0307 	rsb	r3, r3, #7
 800d09e:	2b04      	cmp	r3, #4
 800d0a0:	d00a      	beq.n	800d0b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	60bb      	str	r3, [r7, #8]
}
 800d0b4:	bf00      	nop
 800d0b6:	e7fe      	b.n	800d0b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d0b8:	4b1e      	ldr	r3, [pc, #120]	; (800d134 <xPortStartScheduler+0x134>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	021b      	lsls	r3, r3, #8
 800d0be:	4a1d      	ldr	r2, [pc, #116]	; (800d134 <xPortStartScheduler+0x134>)
 800d0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d0c2:	4b1c      	ldr	r3, [pc, #112]	; (800d134 <xPortStartScheduler+0x134>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d0ca:	4a1a      	ldr	r2, [pc, #104]	; (800d134 <xPortStartScheduler+0x134>)
 800d0cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0d6:	4b18      	ldr	r3, [pc, #96]	; (800d138 <xPortStartScheduler+0x138>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a17      	ldr	r2, [pc, #92]	; (800d138 <xPortStartScheduler+0x138>)
 800d0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0e2:	4b15      	ldr	r3, [pc, #84]	; (800d138 <xPortStartScheduler+0x138>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a14      	ldr	r2, [pc, #80]	; (800d138 <xPortStartScheduler+0x138>)
 800d0e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d0ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0ee:	f000 f8dd 	bl	800d2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0f2:	4b12      	ldr	r3, [pc, #72]	; (800d13c <xPortStartScheduler+0x13c>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0f8:	f000 f8fc 	bl	800d2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0fc:	4b10      	ldr	r3, [pc, #64]	; (800d140 <xPortStartScheduler+0x140>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a0f      	ldr	r2, [pc, #60]	; (800d140 <xPortStartScheduler+0x140>)
 800d102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d108:	f7ff ff66 	bl	800cfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d10c:	f7ff f852 	bl	800c1b4 <vTaskSwitchContext>
	prvTaskExitError();
 800d110:	f7ff ff1e 	bl	800cf50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3718      	adds	r7, #24
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	e000ed00 	.word	0xe000ed00
 800d124:	410fc271 	.word	0x410fc271
 800d128:	410fc270 	.word	0x410fc270
 800d12c:	e000e400 	.word	0xe000e400
 800d130:	200012c8 	.word	0x200012c8
 800d134:	200012cc 	.word	0x200012cc
 800d138:	e000ed20 	.word	0xe000ed20
 800d13c:	2000014c 	.word	0x2000014c
 800d140:	e000ef34 	.word	0xe000ef34

0800d144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	607b      	str	r3, [r7, #4]
}
 800d15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d15e:	4b0f      	ldr	r3, [pc, #60]	; (800d19c <vPortEnterCritical+0x58>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	4a0d      	ldr	r2, [pc, #52]	; (800d19c <vPortEnterCritical+0x58>)
 800d166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d168:	4b0c      	ldr	r3, [pc, #48]	; (800d19c <vPortEnterCritical+0x58>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d10f      	bne.n	800d190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d170:	4b0b      	ldr	r3, [pc, #44]	; (800d1a0 <vPortEnterCritical+0x5c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00a      	beq.n	800d190 <vPortEnterCritical+0x4c>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	603b      	str	r3, [r7, #0]
}
 800d18c:	bf00      	nop
 800d18e:	e7fe      	b.n	800d18e <vPortEnterCritical+0x4a>
	}
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	2000014c 	.word	0x2000014c
 800d1a0:	e000ed04 	.word	0xe000ed04

0800d1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d1aa:	4b12      	ldr	r3, [pc, #72]	; (800d1f4 <vPortExitCritical+0x50>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10a      	bne.n	800d1c8 <vPortExitCritical+0x24>
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	f383 8811 	msr	BASEPRI, r3
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	607b      	str	r3, [r7, #4]
}
 800d1c4:	bf00      	nop
 800d1c6:	e7fe      	b.n	800d1c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d1c8:	4b0a      	ldr	r3, [pc, #40]	; (800d1f4 <vPortExitCritical+0x50>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	4a09      	ldr	r2, [pc, #36]	; (800d1f4 <vPortExitCritical+0x50>)
 800d1d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1d2:	4b08      	ldr	r3, [pc, #32]	; (800d1f4 <vPortExitCritical+0x50>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d105      	bne.n	800d1e6 <vPortExitCritical+0x42>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	f383 8811 	msr	BASEPRI, r3
}
 800d1e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1e6:	bf00      	nop
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	2000014c 	.word	0x2000014c
	...

0800d200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d200:	f3ef 8009 	mrs	r0, PSP
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	4b15      	ldr	r3, [pc, #84]	; (800d260 <pxCurrentTCBConst>)
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	f01e 0f10 	tst.w	lr, #16
 800d210:	bf08      	it	eq
 800d212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21a:	6010      	str	r0, [r2, #0]
 800d21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d220:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d224:	f380 8811 	msr	BASEPRI, r0
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	f7fe ffc0 	bl	800c1b4 <vTaskSwitchContext>
 800d234:	f04f 0000 	mov.w	r0, #0
 800d238:	f380 8811 	msr	BASEPRI, r0
 800d23c:	bc09      	pop	{r0, r3}
 800d23e:	6819      	ldr	r1, [r3, #0]
 800d240:	6808      	ldr	r0, [r1, #0]
 800d242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d246:	f01e 0f10 	tst.w	lr, #16
 800d24a:	bf08      	it	eq
 800d24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d250:	f380 8809 	msr	PSP, r0
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	f3af 8000 	nop.w

0800d260 <pxCurrentTCBConst>:
 800d260:	20000c9c 	.word	0x20000c9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop

0800d268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	607b      	str	r3, [r7, #4]
}
 800d280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d282:	f7fe fedd 	bl	800c040 <xTaskIncrementTick>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d003      	beq.n	800d294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d28c:	4b06      	ldr	r3, [pc, #24]	; (800d2a8 <xPortSysTickHandler+0x40>)
 800d28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	2300      	movs	r3, #0
 800d296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	f383 8811 	msr	BASEPRI, r3
}
 800d29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	e000ed04 	.word	0xe000ed04

0800d2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	; (800d2e0 <vPortSetupTimerInterrupt+0x34>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d2b6:	4b0b      	ldr	r3, [pc, #44]	; (800d2e4 <vPortSetupTimerInterrupt+0x38>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d2bc:	4b0a      	ldr	r3, [pc, #40]	; (800d2e8 <vPortSetupTimerInterrupt+0x3c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a0a      	ldr	r2, [pc, #40]	; (800d2ec <vPortSetupTimerInterrupt+0x40>)
 800d2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2c6:	099b      	lsrs	r3, r3, #6
 800d2c8:	4a09      	ldr	r2, [pc, #36]	; (800d2f0 <vPortSetupTimerInterrupt+0x44>)
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d2ce:	4b04      	ldr	r3, [pc, #16]	; (800d2e0 <vPortSetupTimerInterrupt+0x34>)
 800d2d0:	2207      	movs	r2, #7
 800d2d2:	601a      	str	r2, [r3, #0]
}
 800d2d4:	bf00      	nop
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	e000e010 	.word	0xe000e010
 800d2e4:	e000e018 	.word	0xe000e018
 800d2e8:	20000140 	.word	0x20000140
 800d2ec:	10624dd3 	.word	0x10624dd3
 800d2f0:	e000e014 	.word	0xe000e014

0800d2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d304 <vPortEnableVFP+0x10>
 800d2f8:	6801      	ldr	r1, [r0, #0]
 800d2fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d2fe:	6001      	str	r1, [r0, #0]
 800d300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d302:	bf00      	nop
 800d304:	e000ed88 	.word	0xe000ed88

0800d308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d30e:	f3ef 8305 	mrs	r3, IPSR
 800d312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2b0f      	cmp	r3, #15
 800d318:	d914      	bls.n	800d344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d31a:	4a17      	ldr	r2, [pc, #92]	; (800d378 <vPortValidateInterruptPriority+0x70>)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	4413      	add	r3, r2
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d324:	4b15      	ldr	r3, [pc, #84]	; (800d37c <vPortValidateInterruptPriority+0x74>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	7afa      	ldrb	r2, [r7, #11]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d20a      	bcs.n	800d344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	607b      	str	r3, [r7, #4]
}
 800d340:	bf00      	nop
 800d342:	e7fe      	b.n	800d342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d344:	4b0e      	ldr	r3, [pc, #56]	; (800d380 <vPortValidateInterruptPriority+0x78>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d34c:	4b0d      	ldr	r3, [pc, #52]	; (800d384 <vPortValidateInterruptPriority+0x7c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	429a      	cmp	r2, r3
 800d352:	d90a      	bls.n	800d36a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d358:	f383 8811 	msr	BASEPRI, r3
 800d35c:	f3bf 8f6f 	isb	sy
 800d360:	f3bf 8f4f 	dsb	sy
 800d364:	603b      	str	r3, [r7, #0]
}
 800d366:	bf00      	nop
 800d368:	e7fe      	b.n	800d368 <vPortValidateInterruptPriority+0x60>
	}
 800d36a:	bf00      	nop
 800d36c:	3714      	adds	r7, #20
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	e000e3f0 	.word	0xe000e3f0
 800d37c:	200012c8 	.word	0x200012c8
 800d380:	e000ed0c 	.word	0xe000ed0c
 800d384:	200012cc 	.word	0x200012cc

0800d388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b08a      	sub	sp, #40	; 0x28
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d390:	2300      	movs	r3, #0
 800d392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d394:	f7fe fd98 	bl	800bec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d398:	4b5b      	ldr	r3, [pc, #364]	; (800d508 <pvPortMalloc+0x180>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d101      	bne.n	800d3a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3a0:	f000 f920 	bl	800d5e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3a4:	4b59      	ldr	r3, [pc, #356]	; (800d50c <pvPortMalloc+0x184>)
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f040 8093 	bne.w	800d4d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01d      	beq.n	800d3f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d3b8:	2208      	movs	r2, #8
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4413      	add	r3, r2
 800d3be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f003 0307 	and.w	r3, r3, #7
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d014      	beq.n	800d3f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f023 0307 	bic.w	r3, r3, #7
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f003 0307 	and.w	r3, r3, #7
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00a      	beq.n	800d3f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	617b      	str	r3, [r7, #20]
}
 800d3f0:	bf00      	nop
 800d3f2:	e7fe      	b.n	800d3f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d06e      	beq.n	800d4d8 <pvPortMalloc+0x150>
 800d3fa:	4b45      	ldr	r3, [pc, #276]	; (800d510 <pvPortMalloc+0x188>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	429a      	cmp	r2, r3
 800d402:	d869      	bhi.n	800d4d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d404:	4b43      	ldr	r3, [pc, #268]	; (800d514 <pvPortMalloc+0x18c>)
 800d406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d408:	4b42      	ldr	r3, [pc, #264]	; (800d514 <pvPortMalloc+0x18c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d40e:	e004      	b.n	800d41a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	429a      	cmp	r2, r3
 800d422:	d903      	bls.n	800d42c <pvPortMalloc+0xa4>
 800d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1f1      	bne.n	800d410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d42c:	4b36      	ldr	r3, [pc, #216]	; (800d508 <pvPortMalloc+0x180>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d432:	429a      	cmp	r2, r3
 800d434:	d050      	beq.n	800d4d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2208      	movs	r2, #8
 800d43c:	4413      	add	r3, r2
 800d43e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	1ad2      	subs	r2, r2, r3
 800d450:	2308      	movs	r3, #8
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	429a      	cmp	r2, r3
 800d456:	d91f      	bls.n	800d498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4413      	add	r3, r2
 800d45e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	f003 0307 	and.w	r3, r3, #7
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00a      	beq.n	800d480 <pvPortMalloc+0xf8>
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	613b      	str	r3, [r7, #16]
}
 800d47c:	bf00      	nop
 800d47e:	e7fe      	b.n	800d47e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	685a      	ldr	r2, [r3, #4]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	1ad2      	subs	r2, r2, r3
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d492:	69b8      	ldr	r0, [r7, #24]
 800d494:	f000 f908 	bl	800d6a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d498:	4b1d      	ldr	r3, [pc, #116]	; (800d510 <pvPortMalloc+0x188>)
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	4a1b      	ldr	r2, [pc, #108]	; (800d510 <pvPortMalloc+0x188>)
 800d4a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4a6:	4b1a      	ldr	r3, [pc, #104]	; (800d510 <pvPortMalloc+0x188>)
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	4b1b      	ldr	r3, [pc, #108]	; (800d518 <pvPortMalloc+0x190>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d203      	bcs.n	800d4ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d4b2:	4b17      	ldr	r3, [pc, #92]	; (800d510 <pvPortMalloc+0x188>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a18      	ldr	r2, [pc, #96]	; (800d518 <pvPortMalloc+0x190>)
 800d4b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	4b13      	ldr	r3, [pc, #76]	; (800d50c <pvPortMalloc+0x184>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	431a      	orrs	r2, r3
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d4ce:	4b13      	ldr	r3, [pc, #76]	; (800d51c <pvPortMalloc+0x194>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	4a11      	ldr	r2, [pc, #68]	; (800d51c <pvPortMalloc+0x194>)
 800d4d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4d8:	f7fe fd04 	bl	800bee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	f003 0307 	and.w	r3, r3, #7
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00a      	beq.n	800d4fc <pvPortMalloc+0x174>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	60fb      	str	r3, [r7, #12]
}
 800d4f8:	bf00      	nop
 800d4fa:	e7fe      	b.n	800d4fa <pvPortMalloc+0x172>
	return pvReturn;
 800d4fc:	69fb      	ldr	r3, [r7, #28]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3728      	adds	r7, #40	; 0x28
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20004ed8 	.word	0x20004ed8
 800d50c:	20004eec 	.word	0x20004eec
 800d510:	20004edc 	.word	0x20004edc
 800d514:	20004ed0 	.word	0x20004ed0
 800d518:	20004ee0 	.word	0x20004ee0
 800d51c:	20004ee4 	.word	0x20004ee4

0800d520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d04d      	beq.n	800d5ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d532:	2308      	movs	r3, #8
 800d534:	425b      	negs	r3, r3
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	4413      	add	r3, r2
 800d53a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	4b24      	ldr	r3, [pc, #144]	; (800d5d8 <vPortFree+0xb8>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4013      	ands	r3, r2
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10a      	bne.n	800d564 <vPortFree+0x44>
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	60fb      	str	r3, [r7, #12]
}
 800d560:	bf00      	nop
 800d562:	e7fe      	b.n	800d562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00a      	beq.n	800d582 <vPortFree+0x62>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	60bb      	str	r3, [r7, #8]
}
 800d57e:	bf00      	nop
 800d580:	e7fe      	b.n	800d580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	685a      	ldr	r2, [r3, #4]
 800d586:	4b14      	ldr	r3, [pc, #80]	; (800d5d8 <vPortFree+0xb8>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4013      	ands	r3, r2
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d01e      	beq.n	800d5ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d11a      	bne.n	800d5ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	685a      	ldr	r2, [r3, #4]
 800d59c:	4b0e      	ldr	r3, [pc, #56]	; (800d5d8 <vPortFree+0xb8>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	43db      	mvns	r3, r3
 800d5a2:	401a      	ands	r2, r3
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d5a8:	f7fe fc8e 	bl	800bec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	4b0a      	ldr	r3, [pc, #40]	; (800d5dc <vPortFree+0xbc>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	4a09      	ldr	r2, [pc, #36]	; (800d5dc <vPortFree+0xbc>)
 800d5b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d5ba:	6938      	ldr	r0, [r7, #16]
 800d5bc:	f000 f874 	bl	800d6a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d5c0:	4b07      	ldr	r3, [pc, #28]	; (800d5e0 <vPortFree+0xc0>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	4a06      	ldr	r2, [pc, #24]	; (800d5e0 <vPortFree+0xc0>)
 800d5c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d5ca:	f7fe fc8b 	bl	800bee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d5ce:	bf00      	nop
 800d5d0:	3718      	adds	r7, #24
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20004eec 	.word	0x20004eec
 800d5dc:	20004edc 	.word	0x20004edc
 800d5e0:	20004ee8 	.word	0x20004ee8

0800d5e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d5ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5f0:	4b27      	ldr	r3, [pc, #156]	; (800d690 <prvHeapInit+0xac>)
 800d5f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f003 0307 	and.w	r3, r3, #7
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00c      	beq.n	800d618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3307      	adds	r3, #7
 800d602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f023 0307 	bic.w	r3, r3, #7
 800d60a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d60c:	68ba      	ldr	r2, [r7, #8]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	4a1f      	ldr	r2, [pc, #124]	; (800d690 <prvHeapInit+0xac>)
 800d614:	4413      	add	r3, r2
 800d616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d61c:	4a1d      	ldr	r2, [pc, #116]	; (800d694 <prvHeapInit+0xb0>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d622:	4b1c      	ldr	r3, [pc, #112]	; (800d694 <prvHeapInit+0xb0>)
 800d624:	2200      	movs	r2, #0
 800d626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	4413      	add	r3, r2
 800d62e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d630:	2208      	movs	r2, #8
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	1a9b      	subs	r3, r3, r2
 800d636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f023 0307 	bic.w	r3, r3, #7
 800d63e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	4a15      	ldr	r2, [pc, #84]	; (800d698 <prvHeapInit+0xb4>)
 800d644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d646:	4b14      	ldr	r3, [pc, #80]	; (800d698 <prvHeapInit+0xb4>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2200      	movs	r2, #0
 800d64c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d64e:	4b12      	ldr	r3, [pc, #72]	; (800d698 <prvHeapInit+0xb4>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2200      	movs	r2, #0
 800d654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	68fa      	ldr	r2, [r7, #12]
 800d65e:	1ad2      	subs	r2, r2, r3
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d664:	4b0c      	ldr	r3, [pc, #48]	; (800d698 <prvHeapInit+0xb4>)
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	4a0a      	ldr	r2, [pc, #40]	; (800d69c <prvHeapInit+0xb8>)
 800d672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	4a09      	ldr	r2, [pc, #36]	; (800d6a0 <prvHeapInit+0xbc>)
 800d67a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d67c:	4b09      	ldr	r3, [pc, #36]	; (800d6a4 <prvHeapInit+0xc0>)
 800d67e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d682:	601a      	str	r2, [r3, #0]
}
 800d684:	bf00      	nop
 800d686:	3714      	adds	r7, #20
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr
 800d690:	200012d0 	.word	0x200012d0
 800d694:	20004ed0 	.word	0x20004ed0
 800d698:	20004ed8 	.word	0x20004ed8
 800d69c:	20004ee0 	.word	0x20004ee0
 800d6a0:	20004edc 	.word	0x20004edc
 800d6a4:	20004eec 	.word	0x20004eec

0800d6a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d6b0:	4b28      	ldr	r3, [pc, #160]	; (800d754 <prvInsertBlockIntoFreeList+0xac>)
 800d6b2:	60fb      	str	r3, [r7, #12]
 800d6b4:	e002      	b.n	800d6bc <prvInsertBlockIntoFreeList+0x14>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d8f7      	bhi.n	800d6b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d108      	bne.n	800d6ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	441a      	add	r2, r3
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	441a      	add	r2, r3
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d118      	bne.n	800d730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681a      	ldr	r2, [r3, #0]
 800d702:	4b15      	ldr	r3, [pc, #84]	; (800d758 <prvInsertBlockIntoFreeList+0xb0>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	429a      	cmp	r2, r3
 800d708:	d00d      	beq.n	800d726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	685a      	ldr	r2, [r3, #4]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	441a      	add	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	e008      	b.n	800d738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d726:	4b0c      	ldr	r3, [pc, #48]	; (800d758 <prvInsertBlockIntoFreeList+0xb0>)
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	e003      	b.n	800d738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d002      	beq.n	800d746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d746:	bf00      	nop
 800d748:	3714      	adds	r7, #20
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	20004ed0 	.word	0x20004ed0
 800d758:	20004ed8 	.word	0x20004ed8

0800d75c <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08a      	sub	sp, #40	; 0x28
 800d760:	af04      	add	r7, sp, #16
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	460b      	mov	r3, r1
 800d766:	607a      	str	r2, [r7, #4]
 800d768:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	b2db      	uxtb	r3, r3
 800d772:	011b      	lsls	r3, r3, #4
 800d774:	b2db      	uxtb	r3, r3
 800d776:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800d778:	7afb      	ldrb	r3, [r7, #11]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d101      	bne.n	800d782 <_ICM20948_SelectUserBank+0x26>
 800d77e:	2368      	movs	r3, #104	; 0x68
 800d780:	e000      	b.n	800d784 <_ICM20948_SelectUserBank+0x28>
 800d782:	2369      	movs	r3, #105	; 0x69
 800d784:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800d786:	7dbb      	ldrb	r3, [r7, #22]
 800d788:	b29b      	uxth	r3, r3
 800d78a:	005b      	lsls	r3, r3, #1
 800d78c:	b299      	uxth	r1, r3
 800d78e:	230a      	movs	r3, #10
 800d790:	9302      	str	r3, [sp, #8]
 800d792:	2301      	movs	r3, #1
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	f107 0315 	add.w	r3, r7, #21
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	2301      	movs	r3, #1
 800d79e:	227f      	movs	r2, #127	; 0x7f
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f7f9 f845 	bl	8006830 <HAL_I2C_Mem_Write>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800d7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3718      	adds	r7, #24
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b088      	sub	sp, #32
 800d7b8:	af04      	add	r7, sp, #16
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	4608      	mov	r0, r1
 800d7be:	4611      	mov	r1, r2
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	70fb      	strb	r3, [r7, #3]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	70bb      	strb	r3, [r7, #2]
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800d7d2:	78fb      	ldrb	r3, [r7, #3]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d101      	bne.n	800d7dc <_ICM20948_WriteByte+0x28>
 800d7d8:	2368      	movs	r3, #104	; 0x68
 800d7da:	e000      	b.n	800d7de <_ICM20948_WriteByte+0x2a>
 800d7dc:	2369      	movs	r3, #105	; 0x69
 800d7de:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800d7e0:	7bbb      	ldrb	r3, [r7, #14]
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	b299      	uxth	r1, r3
 800d7e8:	78bb      	ldrb	r3, [r7, #2]
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	230a      	movs	r3, #10
 800d7ee:	9302      	str	r3, [sp, #8]
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	9301      	str	r3, [sp, #4]
 800d7f4:	1c7b      	adds	r3, r7, #1
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f7f9 f818 	bl	8006830 <HAL_I2C_Mem_Write>
 800d800:	4603      	mov	r3, r0
 800d802:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800d804:	7bfb      	ldrb	r3, [r7, #15]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3710      	adds	r7, #16
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b084      	sub	sp, #16
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	4608      	mov	r0, r1
 800d818:	4611      	mov	r1, r2
 800d81a:	461a      	mov	r2, r3
 800d81c:	4603      	mov	r3, r0
 800d81e:	70fb      	strb	r3, [r7, #3]
 800d820:	460b      	mov	r3, r1
 800d822:	70bb      	strb	r3, [r7, #2]
 800d824:	4613      	mov	r3, r2
 800d826:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800d82c:	78fb      	ldrb	r3, [r7, #3]
 800d82e:	2200      	movs	r2, #0
 800d830:	4619      	mov	r1, r3
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7ff ff92 	bl	800d75c <_ICM20948_SelectUserBank>
 800d838:	4603      	mov	r3, r0
 800d83a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800d83c:	78f9      	ldrb	r1, [r7, #3]
 800d83e:	2380      	movs	r3, #128	; 0x80
 800d840:	2206      	movs	r2, #6
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff ffb6 	bl	800d7b4 <_ICM20948_WriteByte>
 800d848:	4603      	mov	r3, r0
 800d84a:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800d84c:	20c8      	movs	r0, #200	; 0xc8
 800d84e:	f7f7 ff91 	bl	8005774 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800d852:	78f9      	ldrb	r1, [r7, #3]
 800d854:	2301      	movs	r3, #1
 800d856:	2206      	movs	r2, #6
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff ffab 	bl	800d7b4 <_ICM20948_WriteByte>
 800d85e:	4603      	mov	r3, r0
 800d860:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800d862:	78f9      	ldrb	r1, [r7, #3]
 800d864:	2300      	movs	r3, #0
 800d866:	2207      	movs	r2, #7
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff ffa3 	bl	800d7b4 <_ICM20948_WriteByte>
 800d86e:	4603      	mov	r3, r0
 800d870:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800d872:	78fb      	ldrb	r3, [r7, #3]
 800d874:	2202      	movs	r2, #2
 800d876:	4619      	mov	r1, r3
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7ff ff6f 	bl	800d75c <_ICM20948_SelectUserBank>
 800d87e:	4603      	mov	r3, r0
 800d880:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800d882:	78bb      	ldrb	r3, [r7, #2]
 800d884:	005b      	lsls	r3, r3, #1
 800d886:	b25b      	sxtb	r3, r3
 800d888:	f043 0319 	orr.w	r3, r3, #25
 800d88c:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	78f9      	ldrb	r1, [r7, #3]
 800d892:	2201      	movs	r2, #1
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f7ff ff8d 	bl	800d7b4 <_ICM20948_WriteByte>
 800d89a:	4603      	mov	r3, r0
 800d89c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800d89e:	78f9      	ldrb	r1, [r7, #3]
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	2253      	movs	r2, #83	; 0x53
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff ff85 	bl	800d7b4 <_ICM20948_WriteByte>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800d8ae:	78f9      	ldrb	r1, [r7, #3]
 800d8b0:	2304      	movs	r3, #4
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7ff ff7d 	bl	800d7b4 <_ICM20948_WriteByte>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800d8be:	787b      	ldrb	r3, [r7, #1]
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	b25b      	sxtb	r3, r3
 800d8c4:	f043 0319 	orr.w	r3, r3, #25
 800d8c8:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	78f9      	ldrb	r1, [r7, #3]
 800d8ce:	2214      	movs	r2, #20
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7ff ff6f 	bl	800d7b4 <_ICM20948_WriteByte>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800d8da:	78f9      	ldrb	r1, [r7, #3]
 800d8dc:	2304      	movs	r3, #4
 800d8de:	2211      	movs	r2, #17
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff ff67 	bl	800d7b4 <_ICM20948_WriteByte>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800d8ea:	78fb      	ldrb	r3, [r7, #3]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7ff ff33 	bl	800d75c <_ICM20948_SelectUserBank>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800d8fa:	78f9      	ldrb	r1, [r7, #3]
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	220f      	movs	r2, #15
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff ff57 	bl	800d7b4 <_ICM20948_WriteByte>
 800d906:	4603      	mov	r3, r0
 800d908:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800d90a:	2208      	movs	r2, #8
 800d90c:	2131      	movs	r1, #49	; 0x31
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 f806 	bl	800d920 <_AK09918_WriteByte>
 800d914:	4603      	mov	r3, r0
 800d916:	73fb      	strb	r3, [r7, #15]
}
 800d918:	bf00      	nop
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b088      	sub	sp, #32
 800d924:	af04      	add	r7, sp, #16
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	70fb      	strb	r3, [r7, #3]
 800d92c:	4613      	mov	r3, r2
 800d92e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800d930:	2300      	movs	r3, #0
 800d932:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800d934:	78fb      	ldrb	r3, [r7, #3]
 800d936:	b29a      	uxth	r2, r3
 800d938:	230a      	movs	r3, #10
 800d93a:	9302      	str	r3, [sp, #8]
 800d93c:	2301      	movs	r3, #1
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	1cbb      	adds	r3, r7, #2
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	2301      	movs	r3, #1
 800d946:	2118      	movs	r1, #24
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7f8 ff71 	bl	8006830 <HAL_I2C_Mem_Write>
 800d94e:	4603      	mov	r3, r0
 800d950:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800d952:	7bfb      	ldrb	r3, [r7, #15]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800d962:	2300      	movs	r3, #0
 800d964:	71fb      	strb	r3, [r7, #7]
 800d966:	e026      	b.n	800d9b6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800d968:	79fb      	ldrb	r3, [r7, #7]
 800d96a:	3b50      	subs	r3, #80	; 0x50
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2100      	movs	r1, #0
 800d970:	4618      	mov	r0, r3
 800d972:	f000 f82b 	bl	800d9cc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800d976:	2100      	movs	r1, #0
 800d978:	2000      	movs	r0, #0
 800d97a:	f000 f827 	bl	800d9cc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800d97e:	2100      	movs	r1, #0
 800d980:	2010      	movs	r0, #16
 800d982:	f000 f823 	bl	800d9cc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800d986:	2300      	movs	r3, #0
 800d988:	71bb      	strb	r3, [r7, #6]
 800d98a:	e00d      	b.n	800d9a8 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800d98c:	79ba      	ldrb	r2, [r7, #6]
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	490d      	ldr	r1, [pc, #52]	; (800d9c8 <OLED_Refresh_Gram+0x6c>)
 800d992:	00d2      	lsls	r2, r2, #3
 800d994:	440a      	add	r2, r1
 800d996:	4413      	add	r3, r2
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	2101      	movs	r1, #1
 800d99c:	4618      	mov	r0, r3
 800d99e:	f000 f815 	bl	800d9cc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800d9a2:	79bb      	ldrb	r3, [r7, #6]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	71bb      	strb	r3, [r7, #6]
 800d9a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	daed      	bge.n	800d98c <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	71fb      	strb	r3, [r7, #7]
 800d9b6:	79fb      	ldrb	r3, [r7, #7]
 800d9b8:	2b07      	cmp	r3, #7
 800d9ba:	d9d5      	bls.n	800d968 <OLED_Refresh_Gram+0xc>
	}
}
 800d9bc:	bf00      	nop
 800d9be:	bf00      	nop
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	20004ef0 	.word	0x20004ef0

0800d9cc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	460a      	mov	r2, r1
 800d9d6:	71fb      	strb	r3, [r7, #7]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800d9dc:	79bb      	ldrb	r3, [r7, #6]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d006      	beq.n	800d9f0 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d9e8:	481c      	ldr	r0, [pc, #112]	; (800da5c <OLED_WR_Byte+0x90>)
 800d9ea:	f7f8 fdc3 	bl	8006574 <HAL_GPIO_WritePin>
 800d9ee:	e005      	b.n	800d9fc <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d9f6:	4819      	ldr	r0, [pc, #100]	; (800da5c <OLED_WR_Byte+0x90>)
 800d9f8:	f7f8 fdbc 	bl	8006574 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
 800da00:	e01e      	b.n	800da40 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800da02:	2200      	movs	r2, #0
 800da04:	2120      	movs	r1, #32
 800da06:	4815      	ldr	r0, [pc, #84]	; (800da5c <OLED_WR_Byte+0x90>)
 800da08:	f7f8 fdb4 	bl	8006574 <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800da0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da10:	2b00      	cmp	r3, #0
 800da12:	da05      	bge.n	800da20 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800da14:	2201      	movs	r2, #1
 800da16:	2140      	movs	r1, #64	; 0x40
 800da18:	4810      	ldr	r0, [pc, #64]	; (800da5c <OLED_WR_Byte+0x90>)
 800da1a:	f7f8 fdab 	bl	8006574 <HAL_GPIO_WritePin>
 800da1e:	e004      	b.n	800da2a <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800da20:	2200      	movs	r2, #0
 800da22:	2140      	movs	r1, #64	; 0x40
 800da24:	480d      	ldr	r0, [pc, #52]	; (800da5c <OLED_WR_Byte+0x90>)
 800da26:	f7f8 fda5 	bl	8006574 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800da2a:	2201      	movs	r2, #1
 800da2c:	2120      	movs	r1, #32
 800da2e:	480b      	ldr	r0, [pc, #44]	; (800da5c <OLED_WR_Byte+0x90>)
 800da30:	f7f8 fda0 	bl	8006574 <HAL_GPIO_WritePin>
		dat <<= 1;
 800da34:	79fb      	ldrb	r3, [r7, #7]
 800da36:	005b      	lsls	r3, r3, #1
 800da38:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
 800da3c:	3301      	adds	r3, #1
 800da3e:	73fb      	strb	r3, [r7, #15]
 800da40:	7bfb      	ldrb	r3, [r7, #15]
 800da42:	2b07      	cmp	r3, #7
 800da44:	d9dd      	bls.n	800da02 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800da46:	2201      	movs	r2, #1
 800da48:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da4c:	4803      	ldr	r0, [pc, #12]	; (800da5c <OLED_WR_Byte+0x90>)
 800da4e:	f7f8 fd91 	bl	8006574 <HAL_GPIO_WritePin>
}
 800da52:	bf00      	nop
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	40021000 	.word	0x40021000

0800da60 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800da66:	2300      	movs	r3, #0
 800da68:	71fb      	strb	r3, [r7, #7]
 800da6a:	e014      	b.n	800da96 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800da6c:	2300      	movs	r3, #0
 800da6e:	71bb      	strb	r3, [r7, #6]
 800da70:	e00a      	b.n	800da88 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800da72:	79ba      	ldrb	r2, [r7, #6]
 800da74:	79fb      	ldrb	r3, [r7, #7]
 800da76:	490c      	ldr	r1, [pc, #48]	; (800daa8 <OLED_Clear+0x48>)
 800da78:	00d2      	lsls	r2, r2, #3
 800da7a:	440a      	add	r2, r1
 800da7c:	4413      	add	r3, r2
 800da7e:	2200      	movs	r2, #0
 800da80:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800da82:	79bb      	ldrb	r3, [r7, #6]
 800da84:	3301      	adds	r3, #1
 800da86:	71bb      	strb	r3, [r7, #6]
 800da88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	daf0      	bge.n	800da72 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800da90:	79fb      	ldrb	r3, [r7, #7]
 800da92:	3301      	adds	r3, #1
 800da94:	71fb      	strb	r3, [r7, #7]
 800da96:	79fb      	ldrb	r3, [r7, #7]
 800da98:	2b07      	cmp	r3, #7
 800da9a:	d9e7      	bls.n	800da6c <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800da9c:	f7ff ff5e 	bl	800d95c <OLED_Refresh_Gram>
}
 800daa0:	bf00      	nop
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	20004ef0 	.word	0x20004ef0

0800daac <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	4603      	mov	r3, r0
 800dab4:	71fb      	strb	r3, [r7, #7]
 800dab6:	460b      	mov	r3, r1
 800dab8:	71bb      	strb	r3, [r7, #6]
 800daba:	4613      	mov	r3, r2
 800dabc:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800dac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	db41      	blt.n	800db4e <OLED_DrawPoint+0xa2>
 800daca:	79bb      	ldrb	r3, [r7, #6]
 800dacc:	2b3f      	cmp	r3, #63	; 0x3f
 800dace:	d83e      	bhi.n	800db4e <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800dad0:	79bb      	ldrb	r3, [r7, #6]
 800dad2:	08db      	lsrs	r3, r3, #3
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	f1c3 0307 	rsb	r3, r3, #7
 800dada:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800dadc:	79bb      	ldrb	r3, [r7, #6]
 800dade:	f003 0307 	and.w	r3, r3, #7
 800dae2:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800dae4:	7b7b      	ldrb	r3, [r7, #13]
 800dae6:	f1c3 0307 	rsb	r3, r3, #7
 800daea:	2201      	movs	r2, #1
 800daec:	fa02 f303 	lsl.w	r3, r2, r3
 800daf0:	73fb      	strb	r3, [r7, #15]
	if (t)
 800daf2:	797b      	ldrb	r3, [r7, #5]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d012      	beq.n	800db1e <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800daf8:	79fa      	ldrb	r2, [r7, #7]
 800dafa:	7bbb      	ldrb	r3, [r7, #14]
 800dafc:	4917      	ldr	r1, [pc, #92]	; (800db5c <OLED_DrawPoint+0xb0>)
 800dafe:	00d2      	lsls	r2, r2, #3
 800db00:	440a      	add	r2, r1
 800db02:	4413      	add	r3, r2
 800db04:	7818      	ldrb	r0, [r3, #0]
 800db06:	79fa      	ldrb	r2, [r7, #7]
 800db08:	7bbb      	ldrb	r3, [r7, #14]
 800db0a:	7bf9      	ldrb	r1, [r7, #15]
 800db0c:	4301      	orrs	r1, r0
 800db0e:	b2c8      	uxtb	r0, r1
 800db10:	4912      	ldr	r1, [pc, #72]	; (800db5c <OLED_DrawPoint+0xb0>)
 800db12:	00d2      	lsls	r2, r2, #3
 800db14:	440a      	add	r2, r1
 800db16:	4413      	add	r3, r2
 800db18:	4602      	mov	r2, r0
 800db1a:	701a      	strb	r2, [r3, #0]
 800db1c:	e018      	b.n	800db50 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800db1e:	79fa      	ldrb	r2, [r7, #7]
 800db20:	7bbb      	ldrb	r3, [r7, #14]
 800db22:	490e      	ldr	r1, [pc, #56]	; (800db5c <OLED_DrawPoint+0xb0>)
 800db24:	00d2      	lsls	r2, r2, #3
 800db26:	440a      	add	r2, r1
 800db28:	4413      	add	r3, r2
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	b25a      	sxtb	r2, r3
 800db2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db32:	43db      	mvns	r3, r3
 800db34:	b25b      	sxtb	r3, r3
 800db36:	4013      	ands	r3, r2
 800db38:	b259      	sxtb	r1, r3
 800db3a:	79fa      	ldrb	r2, [r7, #7]
 800db3c:	7bbb      	ldrb	r3, [r7, #14]
 800db3e:	b2c8      	uxtb	r0, r1
 800db40:	4906      	ldr	r1, [pc, #24]	; (800db5c <OLED_DrawPoint+0xb0>)
 800db42:	00d2      	lsls	r2, r2, #3
 800db44:	440a      	add	r2, r1
 800db46:	4413      	add	r3, r2
 800db48:	4602      	mov	r2, r0
 800db4a:	701a      	strb	r2, [r3, #0]
 800db4c:	e000      	b.n	800db50 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800db4e:	bf00      	nop
}
 800db50:	3714      	adds	r7, #20
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	20004ef0 	.word	0x20004ef0

0800db60 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800db60:	b590      	push	{r4, r7, lr}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
 800db66:	4604      	mov	r4, r0
 800db68:	4608      	mov	r0, r1
 800db6a:	4611      	mov	r1, r2
 800db6c:	461a      	mov	r2, r3
 800db6e:	4623      	mov	r3, r4
 800db70:	71fb      	strb	r3, [r7, #7]
 800db72:	4603      	mov	r3, r0
 800db74:	71bb      	strb	r3, [r7, #6]
 800db76:	460b      	mov	r3, r1
 800db78:	717b      	strb	r3, [r7, #5]
 800db7a:	4613      	mov	r3, r2
 800db7c:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800db7e:	79bb      	ldrb	r3, [r7, #6]
 800db80:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800db82:	797b      	ldrb	r3, [r7, #5]
 800db84:	3b20      	subs	r3, #32
 800db86:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800db88:	2300      	movs	r3, #0
 800db8a:	73bb      	strb	r3, [r7, #14]
 800db8c:	e04d      	b.n	800dc2a <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800db8e:	793b      	ldrb	r3, [r7, #4]
 800db90:	2b0c      	cmp	r3, #12
 800db92:	d10b      	bne.n	800dbac <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800db94:	797a      	ldrb	r2, [r7, #5]
 800db96:	7bb9      	ldrb	r1, [r7, #14]
 800db98:	4828      	ldr	r0, [pc, #160]	; (800dc3c <OLED_ShowChar+0xdc>)
 800db9a:	4613      	mov	r3, r2
 800db9c:	005b      	lsls	r3, r3, #1
 800db9e:	4413      	add	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4403      	add	r3, r0
 800dba4:	440b      	add	r3, r1
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	73fb      	strb	r3, [r7, #15]
 800dbaa:	e007      	b.n	800dbbc <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800dbac:	797a      	ldrb	r2, [r7, #5]
 800dbae:	7bbb      	ldrb	r3, [r7, #14]
 800dbb0:	4923      	ldr	r1, [pc, #140]	; (800dc40 <OLED_ShowChar+0xe0>)
 800dbb2:	0112      	lsls	r2, r2, #4
 800dbb4:	440a      	add	r2, r1
 800dbb6:	4413      	add	r3, r2
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	737b      	strb	r3, [r7, #13]
 800dbc0:	e02d      	b.n	800dc1e <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800dbc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	da07      	bge.n	800dbda <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800dbca:	f897 2020 	ldrb.w	r2, [r7, #32]
 800dbce:	79b9      	ldrb	r1, [r7, #6]
 800dbd0:	79fb      	ldrb	r3, [r7, #7]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff ff6a 	bl	800daac <OLED_DrawPoint>
 800dbd8:	e00c      	b.n	800dbf4 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800dbda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	bf0c      	ite	eq
 800dbe2:	2301      	moveq	r3, #1
 800dbe4:	2300      	movne	r3, #0
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	461a      	mov	r2, r3
 800dbea:	79b9      	ldrb	r1, [r7, #6]
 800dbec:	79fb      	ldrb	r3, [r7, #7]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7ff ff5c 	bl	800daac <OLED_DrawPoint>
			temp <<= 1;
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	73fb      	strb	r3, [r7, #15]
			y++;
 800dbfa:	79bb      	ldrb	r3, [r7, #6]
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800dc00:	79ba      	ldrb	r2, [r7, #6]
 800dc02:	7b3b      	ldrb	r3, [r7, #12]
 800dc04:	1ad2      	subs	r2, r2, r3
 800dc06:	793b      	ldrb	r3, [r7, #4]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d105      	bne.n	800dc18 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800dc0c:	7b3b      	ldrb	r3, [r7, #12]
 800dc0e:	71bb      	strb	r3, [r7, #6]
				x++;
 800dc10:	79fb      	ldrb	r3, [r7, #7]
 800dc12:	3301      	adds	r3, #1
 800dc14:	71fb      	strb	r3, [r7, #7]
				break;
 800dc16:	e005      	b.n	800dc24 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800dc18:	7b7b      	ldrb	r3, [r7, #13]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	737b      	strb	r3, [r7, #13]
 800dc1e:	7b7b      	ldrb	r3, [r7, #13]
 800dc20:	2b07      	cmp	r3, #7
 800dc22:	d9ce      	bls.n	800dbc2 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800dc24:	7bbb      	ldrb	r3, [r7, #14]
 800dc26:	3301      	adds	r3, #1
 800dc28:	73bb      	strb	r3, [r7, #14]
 800dc2a:	7bba      	ldrb	r2, [r7, #14]
 800dc2c:	793b      	ldrb	r3, [r7, #4]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d3ad      	bcc.n	800db8e <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800dc32:	bf00      	nop
 800dc34:	bf00      	nop
 800dc36:	3714      	adds	r7, #20
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd90      	pop	{r4, r7, pc}
 800dc3c:	0800eacc 	.word	0x0800eacc
 800dc40:	0800ef40 	.word	0x0800ef40

0800dc44 <oled_pow>:

uint32_t oled_pow(uint8_t m, uint8_t n)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	460a      	mov	r2, r1
 800dc4e:	71fb      	strb	r3, [r7, #7]
 800dc50:	4613      	mov	r3, r2
 800dc52:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800dc54:	2301      	movs	r3, #1
 800dc56:	60fb      	str	r3, [r7, #12]
	while (n--)
 800dc58:	e004      	b.n	800dc64 <oled_pow+0x20>
		result *= m;
 800dc5a:	79fa      	ldrb	r2, [r7, #7]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	fb02 f303 	mul.w	r3, r2, r3
 800dc62:	60fb      	str	r3, [r7, #12]
	while (n--)
 800dc64:	79bb      	ldrb	r3, [r7, #6]
 800dc66:	1e5a      	subs	r2, r3, #1
 800dc68:	71ba      	strb	r2, [r7, #6]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1f5      	bne.n	800dc5a <oled_pow+0x16>
	return result;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 800dc7c:	b590      	push	{r4, r7, lr}
 800dc7e:	b087      	sub	sp, #28
 800dc80:	af02      	add	r7, sp, #8
 800dc82:	603a      	str	r2, [r7, #0]
 800dc84:	461a      	mov	r2, r3
 800dc86:	4603      	mov	r3, r0
 800dc88:	71fb      	strb	r3, [r7, #7]
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	71bb      	strb	r3, [r7, #6]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800dc92:	2300      	movs	r3, #0
 800dc94:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 800dc96:	2300      	movs	r3, #0
 800dc98:	73fb      	strb	r3, [r7, #15]
 800dc9a:	e051      	b.n	800dd40 <OLED_ShowNumber+0xc4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 800dc9c:	797a      	ldrb	r2, [r7, #5]
 800dc9e:	7bfb      	ldrb	r3, [r7, #15]
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	3b01      	subs	r3, #1
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	4619      	mov	r1, r3
 800dcaa:	200a      	movs	r0, #10
 800dcac:	f7ff ffca 	bl	800dc44 <oled_pow>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcb8:	4b26      	ldr	r3, [pc, #152]	; (800dd54 <OLED_ShowNumber+0xd8>)
 800dcba:	fba3 2301 	umull	r2, r3, r3, r1
 800dcbe:	08da      	lsrs	r2, r3, #3
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4413      	add	r3, r2
 800dcc6:	005b      	lsls	r3, r3, #1
 800dcc8:	1aca      	subs	r2, r1, r3
 800dcca:	4613      	mov	r3, r2
 800dccc:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 800dcce:	7bbb      	ldrb	r3, [r7, #14]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d11d      	bne.n	800dd10 <OLED_ShowNumber+0x94>
 800dcd4:	7bfa      	ldrb	r2, [r7, #15]
 800dcd6:	797b      	ldrb	r3, [r7, #5]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	da18      	bge.n	800dd10 <OLED_ShowNumber+0x94>
		{
			if (temp == 0)
 800dcde:	7b7b      	ldrb	r3, [r7, #13]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d113      	bne.n	800dd0c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ', size, 1);
 800dce4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dce8:	085b      	lsrs	r3, r3, #1
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	7bfa      	ldrb	r2, [r7, #15]
 800dcee:	fb12 f303 	smulbb	r3, r2, r3
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	79fb      	ldrb	r3, [r7, #7]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	b2d8      	uxtb	r0, r3
 800dcfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcfe:	79b9      	ldrb	r1, [r7, #6]
 800dd00:	2201      	movs	r2, #1
 800dd02:	9200      	str	r2, [sp, #0]
 800dd04:	2220      	movs	r2, #32
 800dd06:	f7ff ff2b 	bl	800db60 <OLED_ShowChar>
				continue;
 800dd0a:	e016      	b.n	800dd3a <OLED_ShowNumber+0xbe>
			}
			else
				enshow = 1;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	73bb      	strb	r3, [r7, #14]
		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
 800dd10:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd14:	085b      	lsrs	r3, r3, #1
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	7bfa      	ldrb	r2, [r7, #15]
 800dd1a:	fb12 f303 	smulbb	r3, r2, r3
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	79fb      	ldrb	r3, [r7, #7]
 800dd22:	4413      	add	r3, r2
 800dd24:	b2d8      	uxtb	r0, r3
 800dd26:	7b7b      	ldrb	r3, [r7, #13]
 800dd28:	3330      	adds	r3, #48	; 0x30
 800dd2a:	b2da      	uxtb	r2, r3
 800dd2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dd30:	79b9      	ldrb	r1, [r7, #6]
 800dd32:	2401      	movs	r4, #1
 800dd34:	9400      	str	r4, [sp, #0]
 800dd36:	f7ff ff13 	bl	800db60 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	73fb      	strb	r3, [r7, #15]
 800dd40:	7bfa      	ldrb	r2, [r7, #15]
 800dd42:	797b      	ldrb	r3, [r7, #5]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d3a9      	bcc.n	800dc9c <OLED_ShowNumber+0x20>
	}
}
 800dd48:	bf00      	nop
 800dd4a:	bf00      	nop
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd90      	pop	{r4, r7, pc}
 800dd52:	bf00      	nop
 800dd54:	cccccccd 	.word	0xcccccccd

0800dd58 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af02      	add	r7, sp, #8
 800dd5e:	4603      	mov	r3, r0
 800dd60:	603a      	str	r2, [r7, #0]
 800dd62:	71fb      	strb	r3, [r7, #7]
 800dd64:	460b      	mov	r3, r1
 800dd66:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800dd68:	e01f      	b.n	800ddaa <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800dd6a:	79fb      	ldrb	r3, [r7, #7]
 800dd6c:	2b7a      	cmp	r3, #122	; 0x7a
 800dd6e:	d904      	bls.n	800dd7a <OLED_ShowString+0x22>
		{
			x = 0;
 800dd70:	2300      	movs	r3, #0
 800dd72:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800dd74:	79bb      	ldrb	r3, [r7, #6]
 800dd76:	3310      	adds	r3, #16
 800dd78:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800dd7a:	79bb      	ldrb	r3, [r7, #6]
 800dd7c:	2b3a      	cmp	r3, #58	; 0x3a
 800dd7e:	d905      	bls.n	800dd8c <OLED_ShowString+0x34>
		{
			y = x = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	71fb      	strb	r3, [r7, #7]
 800dd84:	79fb      	ldrb	r3, [r7, #7]
 800dd86:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800dd88:	f7ff fe6a 	bl	800da60 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	781a      	ldrb	r2, [r3, #0]
 800dd90:	79b9      	ldrb	r1, [r7, #6]
 800dd92:	79f8      	ldrb	r0, [r7, #7]
 800dd94:	2301      	movs	r3, #1
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	230c      	movs	r3, #12
 800dd9a:	f7ff fee1 	bl	800db60 <OLED_ShowChar>
		x += 8;
 800dd9e:	79fb      	ldrb	r3, [r7, #7]
 800dda0:	3308      	adds	r3, #8
 800dda2:	71fb      	strb	r3, [r7, #7]
		p++;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	3301      	adds	r3, #1
 800dda8:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1db      	bne.n	800dd6a <OLED_ShowString+0x12>
	}
}
 800ddb2:	bf00      	nop
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800ddc0:	f7f9 fbb2 	bl	8007528 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800ddc4:	4b41      	ldr	r3, [pc, #260]	; (800decc <OLED_Init+0x110>)
 800ddc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc8:	4a40      	ldr	r2, [pc, #256]	; (800decc <OLED_Init+0x110>)
 800ddca:	f023 0301 	bic.w	r3, r3, #1
 800ddce:	6713      	str	r3, [r2, #112]	; 0x70
 800ddd0:	4b3e      	ldr	r3, [pc, #248]	; (800decc <OLED_Init+0x110>)
 800ddd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd4:	4a3d      	ldr	r2, [pc, #244]	; (800decc <OLED_Init+0x110>)
 800ddd6:	f023 0304 	bic.w	r3, r3, #4
 800ddda:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800dddc:	f7f9 fbb8 	bl	8007550 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800dde0:	2200      	movs	r2, #0
 800dde2:	2180      	movs	r1, #128	; 0x80
 800dde4:	483a      	ldr	r0, [pc, #232]	; (800ded0 <OLED_Init+0x114>)
 800dde6:	f7f8 fbc5 	bl	8006574 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800ddea:	2064      	movs	r0, #100	; 0x64
 800ddec:	f7f7 fcc2 	bl	8005774 <HAL_Delay>
	OLED_RST_Set();
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	2180      	movs	r1, #128	; 0x80
 800ddf4:	4836      	ldr	r0, [pc, #216]	; (800ded0 <OLED_Init+0x114>)
 800ddf6:	f7f8 fbbd 	bl	8006574 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	20ae      	movs	r0, #174	; 0xae
 800ddfe:	f7ff fde5 	bl	800d9cc <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800de02:	2100      	movs	r1, #0
 800de04:	20d5      	movs	r0, #213	; 0xd5
 800de06:	f7ff fde1 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800de0a:	2100      	movs	r1, #0
 800de0c:	2050      	movs	r0, #80	; 0x50
 800de0e:	f7ff fddd 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800de12:	2100      	movs	r1, #0
 800de14:	20a8      	movs	r0, #168	; 0xa8
 800de16:	f7ff fdd9 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800de1a:	2100      	movs	r1, #0
 800de1c:	203f      	movs	r0, #63	; 0x3f
 800de1e:	f7ff fdd5 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800de22:	2100      	movs	r1, #0
 800de24:	20d3      	movs	r0, #211	; 0xd3
 800de26:	f7ff fdd1 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800de2a:	2100      	movs	r1, #0
 800de2c:	2000      	movs	r0, #0
 800de2e:	f7ff fdcd 	bl	800d9cc <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800de32:	2100      	movs	r1, #0
 800de34:	2040      	movs	r0, #64	; 0x40
 800de36:	f7ff fdc9 	bl	800d9cc <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800de3a:	2100      	movs	r1, #0
 800de3c:	208d      	movs	r0, #141	; 0x8d
 800de3e:	f7ff fdc5 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800de42:	2100      	movs	r1, #0
 800de44:	2014      	movs	r0, #20
 800de46:	f7ff fdc1 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800de4a:	2100      	movs	r1, #0
 800de4c:	2020      	movs	r0, #32
 800de4e:	f7ff fdbd 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800de52:	2100      	movs	r1, #0
 800de54:	2002      	movs	r0, #2
 800de56:	f7ff fdb9 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800de5a:	2100      	movs	r1, #0
 800de5c:	20a1      	movs	r0, #161	; 0xa1
 800de5e:	f7ff fdb5 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800de62:	2100      	movs	r1, #0
 800de64:	20c0      	movs	r0, #192	; 0xc0
 800de66:	f7ff fdb1 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800de6a:	2100      	movs	r1, #0
 800de6c:	20da      	movs	r0, #218	; 0xda
 800de6e:	f7ff fdad 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800de72:	2100      	movs	r1, #0
 800de74:	2012      	movs	r0, #18
 800de76:	f7ff fda9 	bl	800d9cc <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800de7a:	2100      	movs	r1, #0
 800de7c:	2081      	movs	r0, #129	; 0x81
 800de7e:	f7ff fda5 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800de82:	2100      	movs	r1, #0
 800de84:	20ef      	movs	r0, #239	; 0xef
 800de86:	f7ff fda1 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800de8a:	2100      	movs	r1, #0
 800de8c:	20d9      	movs	r0, #217	; 0xd9
 800de8e:	f7ff fd9d 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800de92:	2100      	movs	r1, #0
 800de94:	20f1      	movs	r0, #241	; 0xf1
 800de96:	f7ff fd99 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800de9a:	2100      	movs	r1, #0
 800de9c:	20db      	movs	r0, #219	; 0xdb
 800de9e:	f7ff fd95 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800dea2:	2100      	movs	r1, #0
 800dea4:	2030      	movs	r0, #48	; 0x30
 800dea6:	f7ff fd91 	bl	800d9cc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800deaa:	2100      	movs	r1, #0
 800deac:	20a4      	movs	r0, #164	; 0xa4
 800deae:	f7ff fd8d 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800deb2:	2100      	movs	r1, #0
 800deb4:	20a6      	movs	r0, #166	; 0xa6
 800deb6:	f7ff fd89 	bl	800d9cc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800deba:	2100      	movs	r1, #0
 800debc:	20af      	movs	r0, #175	; 0xaf
 800debe:	f7ff fd85 	bl	800d9cc <OLED_WR_Byte>
	OLED_Clear();
 800dec2:	f7ff fdcd 	bl	800da60 <OLED_Clear>
 800dec6:	bf00      	nop
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	40023800 	.word	0x40023800
 800ded0:	40021000 	.word	0x40021000

0800ded4 <sniprintf>:
 800ded4:	b40c      	push	{r2, r3}
 800ded6:	b530      	push	{r4, r5, lr}
 800ded8:	4b17      	ldr	r3, [pc, #92]	; (800df38 <sniprintf+0x64>)
 800deda:	1e0c      	subs	r4, r1, #0
 800dedc:	681d      	ldr	r5, [r3, #0]
 800dede:	b09d      	sub	sp, #116	; 0x74
 800dee0:	da08      	bge.n	800def4 <sniprintf+0x20>
 800dee2:	238b      	movs	r3, #139	; 0x8b
 800dee4:	602b      	str	r3, [r5, #0]
 800dee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800deea:	b01d      	add	sp, #116	; 0x74
 800deec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800def0:	b002      	add	sp, #8
 800def2:	4770      	bx	lr
 800def4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800def8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800defc:	bf14      	ite	ne
 800defe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800df02:	4623      	moveq	r3, r4
 800df04:	9304      	str	r3, [sp, #16]
 800df06:	9307      	str	r3, [sp, #28]
 800df08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df0c:	9002      	str	r0, [sp, #8]
 800df0e:	9006      	str	r0, [sp, #24]
 800df10:	f8ad 3016 	strh.w	r3, [sp, #22]
 800df14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800df16:	ab21      	add	r3, sp, #132	; 0x84
 800df18:	a902      	add	r1, sp, #8
 800df1a:	4628      	mov	r0, r5
 800df1c:	9301      	str	r3, [sp, #4]
 800df1e:	f000 f8a9 	bl	800e074 <_svfiprintf_r>
 800df22:	1c43      	adds	r3, r0, #1
 800df24:	bfbc      	itt	lt
 800df26:	238b      	movlt	r3, #139	; 0x8b
 800df28:	602b      	strlt	r3, [r5, #0]
 800df2a:	2c00      	cmp	r4, #0
 800df2c:	d0dd      	beq.n	800deea <sniprintf+0x16>
 800df2e:	9b02      	ldr	r3, [sp, #8]
 800df30:	2200      	movs	r2, #0
 800df32:	701a      	strb	r2, [r3, #0]
 800df34:	e7d9      	b.n	800deea <sniprintf+0x16>
 800df36:	bf00      	nop
 800df38:	2000019c 	.word	0x2000019c

0800df3c <memset>:
 800df3c:	4402      	add	r2, r0
 800df3e:	4603      	mov	r3, r0
 800df40:	4293      	cmp	r3, r2
 800df42:	d100      	bne.n	800df46 <memset+0xa>
 800df44:	4770      	bx	lr
 800df46:	f803 1b01 	strb.w	r1, [r3], #1
 800df4a:	e7f9      	b.n	800df40 <memset+0x4>

0800df4c <__errno>:
 800df4c:	4b01      	ldr	r3, [pc, #4]	; (800df54 <__errno+0x8>)
 800df4e:	6818      	ldr	r0, [r3, #0]
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	2000019c 	.word	0x2000019c

0800df58 <__libc_init_array>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	4d0d      	ldr	r5, [pc, #52]	; (800df90 <__libc_init_array+0x38>)
 800df5c:	4c0d      	ldr	r4, [pc, #52]	; (800df94 <__libc_init_array+0x3c>)
 800df5e:	1b64      	subs	r4, r4, r5
 800df60:	10a4      	asrs	r4, r4, #2
 800df62:	2600      	movs	r6, #0
 800df64:	42a6      	cmp	r6, r4
 800df66:	d109      	bne.n	800df7c <__libc_init_array+0x24>
 800df68:	4d0b      	ldr	r5, [pc, #44]	; (800df98 <__libc_init_array+0x40>)
 800df6a:	4c0c      	ldr	r4, [pc, #48]	; (800df9c <__libc_init_array+0x44>)
 800df6c:	f000 fc6a 	bl	800e844 <_init>
 800df70:	1b64      	subs	r4, r4, r5
 800df72:	10a4      	asrs	r4, r4, #2
 800df74:	2600      	movs	r6, #0
 800df76:	42a6      	cmp	r6, r4
 800df78:	d105      	bne.n	800df86 <__libc_init_array+0x2e>
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
 800df7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800df80:	4798      	blx	r3
 800df82:	3601      	adds	r6, #1
 800df84:	e7ee      	b.n	800df64 <__libc_init_array+0xc>
 800df86:	f855 3b04 	ldr.w	r3, [r5], #4
 800df8a:	4798      	blx	r3
 800df8c:	3601      	adds	r6, #1
 800df8e:	e7f2      	b.n	800df76 <__libc_init_array+0x1e>
 800df90:	0800f56c 	.word	0x0800f56c
 800df94:	0800f56c 	.word	0x0800f56c
 800df98:	0800f56c 	.word	0x0800f56c
 800df9c:	0800f570 	.word	0x0800f570

0800dfa0 <__retarget_lock_acquire_recursive>:
 800dfa0:	4770      	bx	lr

0800dfa2 <__retarget_lock_release_recursive>:
 800dfa2:	4770      	bx	lr

0800dfa4 <memcpy>:
 800dfa4:	440a      	add	r2, r1
 800dfa6:	4291      	cmp	r1, r2
 800dfa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dfac:	d100      	bne.n	800dfb0 <memcpy+0xc>
 800dfae:	4770      	bx	lr
 800dfb0:	b510      	push	{r4, lr}
 800dfb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfba:	4291      	cmp	r1, r2
 800dfbc:	d1f9      	bne.n	800dfb2 <memcpy+0xe>
 800dfbe:	bd10      	pop	{r4, pc}

0800dfc0 <__ssputs_r>:
 800dfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc4:	688e      	ldr	r6, [r1, #8]
 800dfc6:	461f      	mov	r7, r3
 800dfc8:	42be      	cmp	r6, r7
 800dfca:	680b      	ldr	r3, [r1, #0]
 800dfcc:	4682      	mov	sl, r0
 800dfce:	460c      	mov	r4, r1
 800dfd0:	4690      	mov	r8, r2
 800dfd2:	d82c      	bhi.n	800e02e <__ssputs_r+0x6e>
 800dfd4:	898a      	ldrh	r2, [r1, #12]
 800dfd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfda:	d026      	beq.n	800e02a <__ssputs_r+0x6a>
 800dfdc:	6965      	ldr	r5, [r4, #20]
 800dfde:	6909      	ldr	r1, [r1, #16]
 800dfe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfe4:	eba3 0901 	sub.w	r9, r3, r1
 800dfe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfec:	1c7b      	adds	r3, r7, #1
 800dfee:	444b      	add	r3, r9
 800dff0:	106d      	asrs	r5, r5, #1
 800dff2:	429d      	cmp	r5, r3
 800dff4:	bf38      	it	cc
 800dff6:	461d      	movcc	r5, r3
 800dff8:	0553      	lsls	r3, r2, #21
 800dffa:	d527      	bpl.n	800e04c <__ssputs_r+0x8c>
 800dffc:	4629      	mov	r1, r5
 800dffe:	f000 f957 	bl	800e2b0 <_malloc_r>
 800e002:	4606      	mov	r6, r0
 800e004:	b360      	cbz	r0, 800e060 <__ssputs_r+0xa0>
 800e006:	6921      	ldr	r1, [r4, #16]
 800e008:	464a      	mov	r2, r9
 800e00a:	f7ff ffcb 	bl	800dfa4 <memcpy>
 800e00e:	89a3      	ldrh	r3, [r4, #12]
 800e010:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e018:	81a3      	strh	r3, [r4, #12]
 800e01a:	6126      	str	r6, [r4, #16]
 800e01c:	6165      	str	r5, [r4, #20]
 800e01e:	444e      	add	r6, r9
 800e020:	eba5 0509 	sub.w	r5, r5, r9
 800e024:	6026      	str	r6, [r4, #0]
 800e026:	60a5      	str	r5, [r4, #8]
 800e028:	463e      	mov	r6, r7
 800e02a:	42be      	cmp	r6, r7
 800e02c:	d900      	bls.n	800e030 <__ssputs_r+0x70>
 800e02e:	463e      	mov	r6, r7
 800e030:	6820      	ldr	r0, [r4, #0]
 800e032:	4632      	mov	r2, r6
 800e034:	4641      	mov	r1, r8
 800e036:	f000 fb86 	bl	800e746 <memmove>
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	1b9b      	subs	r3, r3, r6
 800e03e:	60a3      	str	r3, [r4, #8]
 800e040:	6823      	ldr	r3, [r4, #0]
 800e042:	4433      	add	r3, r6
 800e044:	6023      	str	r3, [r4, #0]
 800e046:	2000      	movs	r0, #0
 800e048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e04c:	462a      	mov	r2, r5
 800e04e:	f000 fb4b 	bl	800e6e8 <_realloc_r>
 800e052:	4606      	mov	r6, r0
 800e054:	2800      	cmp	r0, #0
 800e056:	d1e0      	bne.n	800e01a <__ssputs_r+0x5a>
 800e058:	6921      	ldr	r1, [r4, #16]
 800e05a:	4650      	mov	r0, sl
 800e05c:	f000 fb9e 	bl	800e79c <_free_r>
 800e060:	230c      	movs	r3, #12
 800e062:	f8ca 3000 	str.w	r3, [sl]
 800e066:	89a3      	ldrh	r3, [r4, #12]
 800e068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e06c:	81a3      	strh	r3, [r4, #12]
 800e06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e072:	e7e9      	b.n	800e048 <__ssputs_r+0x88>

0800e074 <_svfiprintf_r>:
 800e074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e078:	4698      	mov	r8, r3
 800e07a:	898b      	ldrh	r3, [r1, #12]
 800e07c:	061b      	lsls	r3, r3, #24
 800e07e:	b09d      	sub	sp, #116	; 0x74
 800e080:	4607      	mov	r7, r0
 800e082:	460d      	mov	r5, r1
 800e084:	4614      	mov	r4, r2
 800e086:	d50e      	bpl.n	800e0a6 <_svfiprintf_r+0x32>
 800e088:	690b      	ldr	r3, [r1, #16]
 800e08a:	b963      	cbnz	r3, 800e0a6 <_svfiprintf_r+0x32>
 800e08c:	2140      	movs	r1, #64	; 0x40
 800e08e:	f000 f90f 	bl	800e2b0 <_malloc_r>
 800e092:	6028      	str	r0, [r5, #0]
 800e094:	6128      	str	r0, [r5, #16]
 800e096:	b920      	cbnz	r0, 800e0a2 <_svfiprintf_r+0x2e>
 800e098:	230c      	movs	r3, #12
 800e09a:	603b      	str	r3, [r7, #0]
 800e09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0a0:	e0d0      	b.n	800e244 <_svfiprintf_r+0x1d0>
 800e0a2:	2340      	movs	r3, #64	; 0x40
 800e0a4:	616b      	str	r3, [r5, #20]
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e0aa:	2320      	movs	r3, #32
 800e0ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0b4:	2330      	movs	r3, #48	; 0x30
 800e0b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e25c <_svfiprintf_r+0x1e8>
 800e0ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0be:	f04f 0901 	mov.w	r9, #1
 800e0c2:	4623      	mov	r3, r4
 800e0c4:	469a      	mov	sl, r3
 800e0c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0ca:	b10a      	cbz	r2, 800e0d0 <_svfiprintf_r+0x5c>
 800e0cc:	2a25      	cmp	r2, #37	; 0x25
 800e0ce:	d1f9      	bne.n	800e0c4 <_svfiprintf_r+0x50>
 800e0d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e0d4:	d00b      	beq.n	800e0ee <_svfiprintf_r+0x7a>
 800e0d6:	465b      	mov	r3, fp
 800e0d8:	4622      	mov	r2, r4
 800e0da:	4629      	mov	r1, r5
 800e0dc:	4638      	mov	r0, r7
 800e0de:	f7ff ff6f 	bl	800dfc0 <__ssputs_r>
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	f000 80a9 	beq.w	800e23a <_svfiprintf_r+0x1c6>
 800e0e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0ea:	445a      	add	r2, fp
 800e0ec:	9209      	str	r2, [sp, #36]	; 0x24
 800e0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f000 80a1 	beq.w	800e23a <_svfiprintf_r+0x1c6>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e102:	f10a 0a01 	add.w	sl, sl, #1
 800e106:	9304      	str	r3, [sp, #16]
 800e108:	9307      	str	r3, [sp, #28]
 800e10a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e10e:	931a      	str	r3, [sp, #104]	; 0x68
 800e110:	4654      	mov	r4, sl
 800e112:	2205      	movs	r2, #5
 800e114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e118:	4850      	ldr	r0, [pc, #320]	; (800e25c <_svfiprintf_r+0x1e8>)
 800e11a:	f7f2 f859 	bl	80001d0 <memchr>
 800e11e:	9a04      	ldr	r2, [sp, #16]
 800e120:	b9d8      	cbnz	r0, 800e15a <_svfiprintf_r+0xe6>
 800e122:	06d0      	lsls	r0, r2, #27
 800e124:	bf44      	itt	mi
 800e126:	2320      	movmi	r3, #32
 800e128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e12c:	0711      	lsls	r1, r2, #28
 800e12e:	bf44      	itt	mi
 800e130:	232b      	movmi	r3, #43	; 0x2b
 800e132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e136:	f89a 3000 	ldrb.w	r3, [sl]
 800e13a:	2b2a      	cmp	r3, #42	; 0x2a
 800e13c:	d015      	beq.n	800e16a <_svfiprintf_r+0xf6>
 800e13e:	9a07      	ldr	r2, [sp, #28]
 800e140:	4654      	mov	r4, sl
 800e142:	2000      	movs	r0, #0
 800e144:	f04f 0c0a 	mov.w	ip, #10
 800e148:	4621      	mov	r1, r4
 800e14a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e14e:	3b30      	subs	r3, #48	; 0x30
 800e150:	2b09      	cmp	r3, #9
 800e152:	d94d      	bls.n	800e1f0 <_svfiprintf_r+0x17c>
 800e154:	b1b0      	cbz	r0, 800e184 <_svfiprintf_r+0x110>
 800e156:	9207      	str	r2, [sp, #28]
 800e158:	e014      	b.n	800e184 <_svfiprintf_r+0x110>
 800e15a:	eba0 0308 	sub.w	r3, r0, r8
 800e15e:	fa09 f303 	lsl.w	r3, r9, r3
 800e162:	4313      	orrs	r3, r2
 800e164:	9304      	str	r3, [sp, #16]
 800e166:	46a2      	mov	sl, r4
 800e168:	e7d2      	b.n	800e110 <_svfiprintf_r+0x9c>
 800e16a:	9b03      	ldr	r3, [sp, #12]
 800e16c:	1d19      	adds	r1, r3, #4
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	9103      	str	r1, [sp, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	bfbb      	ittet	lt
 800e176:	425b      	neglt	r3, r3
 800e178:	f042 0202 	orrlt.w	r2, r2, #2
 800e17c:	9307      	strge	r3, [sp, #28]
 800e17e:	9307      	strlt	r3, [sp, #28]
 800e180:	bfb8      	it	lt
 800e182:	9204      	strlt	r2, [sp, #16]
 800e184:	7823      	ldrb	r3, [r4, #0]
 800e186:	2b2e      	cmp	r3, #46	; 0x2e
 800e188:	d10c      	bne.n	800e1a4 <_svfiprintf_r+0x130>
 800e18a:	7863      	ldrb	r3, [r4, #1]
 800e18c:	2b2a      	cmp	r3, #42	; 0x2a
 800e18e:	d134      	bne.n	800e1fa <_svfiprintf_r+0x186>
 800e190:	9b03      	ldr	r3, [sp, #12]
 800e192:	1d1a      	adds	r2, r3, #4
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	9203      	str	r2, [sp, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	bfb8      	it	lt
 800e19c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e1a0:	3402      	adds	r4, #2
 800e1a2:	9305      	str	r3, [sp, #20]
 800e1a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e26c <_svfiprintf_r+0x1f8>
 800e1a8:	7821      	ldrb	r1, [r4, #0]
 800e1aa:	2203      	movs	r2, #3
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	f7f2 f80f 	bl	80001d0 <memchr>
 800e1b2:	b138      	cbz	r0, 800e1c4 <_svfiprintf_r+0x150>
 800e1b4:	9b04      	ldr	r3, [sp, #16]
 800e1b6:	eba0 000a 	sub.w	r0, r0, sl
 800e1ba:	2240      	movs	r2, #64	; 0x40
 800e1bc:	4082      	lsls	r2, r0
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	3401      	adds	r4, #1
 800e1c2:	9304      	str	r3, [sp, #16]
 800e1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1c8:	4825      	ldr	r0, [pc, #148]	; (800e260 <_svfiprintf_r+0x1ec>)
 800e1ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1ce:	2206      	movs	r2, #6
 800e1d0:	f7f1 fffe 	bl	80001d0 <memchr>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d038      	beq.n	800e24a <_svfiprintf_r+0x1d6>
 800e1d8:	4b22      	ldr	r3, [pc, #136]	; (800e264 <_svfiprintf_r+0x1f0>)
 800e1da:	bb1b      	cbnz	r3, 800e224 <_svfiprintf_r+0x1b0>
 800e1dc:	9b03      	ldr	r3, [sp, #12]
 800e1de:	3307      	adds	r3, #7
 800e1e0:	f023 0307 	bic.w	r3, r3, #7
 800e1e4:	3308      	adds	r3, #8
 800e1e6:	9303      	str	r3, [sp, #12]
 800e1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ea:	4433      	add	r3, r6
 800e1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ee:	e768      	b.n	800e0c2 <_svfiprintf_r+0x4e>
 800e1f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1f4:	460c      	mov	r4, r1
 800e1f6:	2001      	movs	r0, #1
 800e1f8:	e7a6      	b.n	800e148 <_svfiprintf_r+0xd4>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	3401      	adds	r4, #1
 800e1fe:	9305      	str	r3, [sp, #20]
 800e200:	4619      	mov	r1, r3
 800e202:	f04f 0c0a 	mov.w	ip, #10
 800e206:	4620      	mov	r0, r4
 800e208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e20c:	3a30      	subs	r2, #48	; 0x30
 800e20e:	2a09      	cmp	r2, #9
 800e210:	d903      	bls.n	800e21a <_svfiprintf_r+0x1a6>
 800e212:	2b00      	cmp	r3, #0
 800e214:	d0c6      	beq.n	800e1a4 <_svfiprintf_r+0x130>
 800e216:	9105      	str	r1, [sp, #20]
 800e218:	e7c4      	b.n	800e1a4 <_svfiprintf_r+0x130>
 800e21a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e21e:	4604      	mov	r4, r0
 800e220:	2301      	movs	r3, #1
 800e222:	e7f0      	b.n	800e206 <_svfiprintf_r+0x192>
 800e224:	ab03      	add	r3, sp, #12
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	462a      	mov	r2, r5
 800e22a:	4b0f      	ldr	r3, [pc, #60]	; (800e268 <_svfiprintf_r+0x1f4>)
 800e22c:	a904      	add	r1, sp, #16
 800e22e:	4638      	mov	r0, r7
 800e230:	f3af 8000 	nop.w
 800e234:	1c42      	adds	r2, r0, #1
 800e236:	4606      	mov	r6, r0
 800e238:	d1d6      	bne.n	800e1e8 <_svfiprintf_r+0x174>
 800e23a:	89ab      	ldrh	r3, [r5, #12]
 800e23c:	065b      	lsls	r3, r3, #25
 800e23e:	f53f af2d 	bmi.w	800e09c <_svfiprintf_r+0x28>
 800e242:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e244:	b01d      	add	sp, #116	; 0x74
 800e246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24a:	ab03      	add	r3, sp, #12
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	462a      	mov	r2, r5
 800e250:	4b05      	ldr	r3, [pc, #20]	; (800e268 <_svfiprintf_r+0x1f4>)
 800e252:	a904      	add	r1, sp, #16
 800e254:	4638      	mov	r0, r7
 800e256:	f000 f919 	bl	800e48c <_printf_i>
 800e25a:	e7eb      	b.n	800e234 <_svfiprintf_r+0x1c0>
 800e25c:	0800f530 	.word	0x0800f530
 800e260:	0800f53a 	.word	0x0800f53a
 800e264:	00000000 	.word	0x00000000
 800e268:	0800dfc1 	.word	0x0800dfc1
 800e26c:	0800f536 	.word	0x0800f536

0800e270 <sbrk_aligned>:
 800e270:	b570      	push	{r4, r5, r6, lr}
 800e272:	4e0e      	ldr	r6, [pc, #56]	; (800e2ac <sbrk_aligned+0x3c>)
 800e274:	460c      	mov	r4, r1
 800e276:	6831      	ldr	r1, [r6, #0]
 800e278:	4605      	mov	r5, r0
 800e27a:	b911      	cbnz	r1, 800e282 <sbrk_aligned+0x12>
 800e27c:	f000 fa7e 	bl	800e77c <_sbrk_r>
 800e280:	6030      	str	r0, [r6, #0]
 800e282:	4621      	mov	r1, r4
 800e284:	4628      	mov	r0, r5
 800e286:	f000 fa79 	bl	800e77c <_sbrk_r>
 800e28a:	1c43      	adds	r3, r0, #1
 800e28c:	d00a      	beq.n	800e2a4 <sbrk_aligned+0x34>
 800e28e:	1cc4      	adds	r4, r0, #3
 800e290:	f024 0403 	bic.w	r4, r4, #3
 800e294:	42a0      	cmp	r0, r4
 800e296:	d007      	beq.n	800e2a8 <sbrk_aligned+0x38>
 800e298:	1a21      	subs	r1, r4, r0
 800e29a:	4628      	mov	r0, r5
 800e29c:	f000 fa6e 	bl	800e77c <_sbrk_r>
 800e2a0:	3001      	adds	r0, #1
 800e2a2:	d101      	bne.n	800e2a8 <sbrk_aligned+0x38>
 800e2a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	bd70      	pop	{r4, r5, r6, pc}
 800e2ac:	20005430 	.word	0x20005430

0800e2b0 <_malloc_r>:
 800e2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2b4:	1ccd      	adds	r5, r1, #3
 800e2b6:	f025 0503 	bic.w	r5, r5, #3
 800e2ba:	3508      	adds	r5, #8
 800e2bc:	2d0c      	cmp	r5, #12
 800e2be:	bf38      	it	cc
 800e2c0:	250c      	movcc	r5, #12
 800e2c2:	2d00      	cmp	r5, #0
 800e2c4:	4607      	mov	r7, r0
 800e2c6:	db01      	blt.n	800e2cc <_malloc_r+0x1c>
 800e2c8:	42a9      	cmp	r1, r5
 800e2ca:	d905      	bls.n	800e2d8 <_malloc_r+0x28>
 800e2cc:	230c      	movs	r3, #12
 800e2ce:	603b      	str	r3, [r7, #0]
 800e2d0:	2600      	movs	r6, #0
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e3ac <_malloc_r+0xfc>
 800e2dc:	f000 f9f8 	bl	800e6d0 <__malloc_lock>
 800e2e0:	f8d8 3000 	ldr.w	r3, [r8]
 800e2e4:	461c      	mov	r4, r3
 800e2e6:	bb5c      	cbnz	r4, 800e340 <_malloc_r+0x90>
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	4638      	mov	r0, r7
 800e2ec:	f7ff ffc0 	bl	800e270 <sbrk_aligned>
 800e2f0:	1c43      	adds	r3, r0, #1
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	d155      	bne.n	800e3a2 <_malloc_r+0xf2>
 800e2f6:	f8d8 4000 	ldr.w	r4, [r8]
 800e2fa:	4626      	mov	r6, r4
 800e2fc:	2e00      	cmp	r6, #0
 800e2fe:	d145      	bne.n	800e38c <_malloc_r+0xdc>
 800e300:	2c00      	cmp	r4, #0
 800e302:	d048      	beq.n	800e396 <_malloc_r+0xe6>
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	4631      	mov	r1, r6
 800e308:	4638      	mov	r0, r7
 800e30a:	eb04 0903 	add.w	r9, r4, r3
 800e30e:	f000 fa35 	bl	800e77c <_sbrk_r>
 800e312:	4581      	cmp	r9, r0
 800e314:	d13f      	bne.n	800e396 <_malloc_r+0xe6>
 800e316:	6821      	ldr	r1, [r4, #0]
 800e318:	1a6d      	subs	r5, r5, r1
 800e31a:	4629      	mov	r1, r5
 800e31c:	4638      	mov	r0, r7
 800e31e:	f7ff ffa7 	bl	800e270 <sbrk_aligned>
 800e322:	3001      	adds	r0, #1
 800e324:	d037      	beq.n	800e396 <_malloc_r+0xe6>
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	442b      	add	r3, r5
 800e32a:	6023      	str	r3, [r4, #0]
 800e32c:	f8d8 3000 	ldr.w	r3, [r8]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d038      	beq.n	800e3a6 <_malloc_r+0xf6>
 800e334:	685a      	ldr	r2, [r3, #4]
 800e336:	42a2      	cmp	r2, r4
 800e338:	d12b      	bne.n	800e392 <_malloc_r+0xe2>
 800e33a:	2200      	movs	r2, #0
 800e33c:	605a      	str	r2, [r3, #4]
 800e33e:	e00f      	b.n	800e360 <_malloc_r+0xb0>
 800e340:	6822      	ldr	r2, [r4, #0]
 800e342:	1b52      	subs	r2, r2, r5
 800e344:	d41f      	bmi.n	800e386 <_malloc_r+0xd6>
 800e346:	2a0b      	cmp	r2, #11
 800e348:	d917      	bls.n	800e37a <_malloc_r+0xca>
 800e34a:	1961      	adds	r1, r4, r5
 800e34c:	42a3      	cmp	r3, r4
 800e34e:	6025      	str	r5, [r4, #0]
 800e350:	bf18      	it	ne
 800e352:	6059      	strne	r1, [r3, #4]
 800e354:	6863      	ldr	r3, [r4, #4]
 800e356:	bf08      	it	eq
 800e358:	f8c8 1000 	streq.w	r1, [r8]
 800e35c:	5162      	str	r2, [r4, r5]
 800e35e:	604b      	str	r3, [r1, #4]
 800e360:	4638      	mov	r0, r7
 800e362:	f104 060b 	add.w	r6, r4, #11
 800e366:	f000 f9b9 	bl	800e6dc <__malloc_unlock>
 800e36a:	f026 0607 	bic.w	r6, r6, #7
 800e36e:	1d23      	adds	r3, r4, #4
 800e370:	1af2      	subs	r2, r6, r3
 800e372:	d0ae      	beq.n	800e2d2 <_malloc_r+0x22>
 800e374:	1b9b      	subs	r3, r3, r6
 800e376:	50a3      	str	r3, [r4, r2]
 800e378:	e7ab      	b.n	800e2d2 <_malloc_r+0x22>
 800e37a:	42a3      	cmp	r3, r4
 800e37c:	6862      	ldr	r2, [r4, #4]
 800e37e:	d1dd      	bne.n	800e33c <_malloc_r+0x8c>
 800e380:	f8c8 2000 	str.w	r2, [r8]
 800e384:	e7ec      	b.n	800e360 <_malloc_r+0xb0>
 800e386:	4623      	mov	r3, r4
 800e388:	6864      	ldr	r4, [r4, #4]
 800e38a:	e7ac      	b.n	800e2e6 <_malloc_r+0x36>
 800e38c:	4634      	mov	r4, r6
 800e38e:	6876      	ldr	r6, [r6, #4]
 800e390:	e7b4      	b.n	800e2fc <_malloc_r+0x4c>
 800e392:	4613      	mov	r3, r2
 800e394:	e7cc      	b.n	800e330 <_malloc_r+0x80>
 800e396:	230c      	movs	r3, #12
 800e398:	603b      	str	r3, [r7, #0]
 800e39a:	4638      	mov	r0, r7
 800e39c:	f000 f99e 	bl	800e6dc <__malloc_unlock>
 800e3a0:	e797      	b.n	800e2d2 <_malloc_r+0x22>
 800e3a2:	6025      	str	r5, [r4, #0]
 800e3a4:	e7dc      	b.n	800e360 <_malloc_r+0xb0>
 800e3a6:	605b      	str	r3, [r3, #4]
 800e3a8:	deff      	udf	#255	; 0xff
 800e3aa:	bf00      	nop
 800e3ac:	2000542c 	.word	0x2000542c

0800e3b0 <_printf_common>:
 800e3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b4:	4616      	mov	r6, r2
 800e3b6:	4699      	mov	r9, r3
 800e3b8:	688a      	ldr	r2, [r1, #8]
 800e3ba:	690b      	ldr	r3, [r1, #16]
 800e3bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	bfb8      	it	lt
 800e3c4:	4613      	movlt	r3, r2
 800e3c6:	6033      	str	r3, [r6, #0]
 800e3c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3cc:	4607      	mov	r7, r0
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	b10a      	cbz	r2, 800e3d6 <_printf_common+0x26>
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	6033      	str	r3, [r6, #0]
 800e3d6:	6823      	ldr	r3, [r4, #0]
 800e3d8:	0699      	lsls	r1, r3, #26
 800e3da:	bf42      	ittt	mi
 800e3dc:	6833      	ldrmi	r3, [r6, #0]
 800e3de:	3302      	addmi	r3, #2
 800e3e0:	6033      	strmi	r3, [r6, #0]
 800e3e2:	6825      	ldr	r5, [r4, #0]
 800e3e4:	f015 0506 	ands.w	r5, r5, #6
 800e3e8:	d106      	bne.n	800e3f8 <_printf_common+0x48>
 800e3ea:	f104 0a19 	add.w	sl, r4, #25
 800e3ee:	68e3      	ldr	r3, [r4, #12]
 800e3f0:	6832      	ldr	r2, [r6, #0]
 800e3f2:	1a9b      	subs	r3, r3, r2
 800e3f4:	42ab      	cmp	r3, r5
 800e3f6:	dc26      	bgt.n	800e446 <_printf_common+0x96>
 800e3f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3fc:	1e13      	subs	r3, r2, #0
 800e3fe:	6822      	ldr	r2, [r4, #0]
 800e400:	bf18      	it	ne
 800e402:	2301      	movne	r3, #1
 800e404:	0692      	lsls	r2, r2, #26
 800e406:	d42b      	bmi.n	800e460 <_printf_common+0xb0>
 800e408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e40c:	4649      	mov	r1, r9
 800e40e:	4638      	mov	r0, r7
 800e410:	47c0      	blx	r8
 800e412:	3001      	adds	r0, #1
 800e414:	d01e      	beq.n	800e454 <_printf_common+0xa4>
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	6922      	ldr	r2, [r4, #16]
 800e41a:	f003 0306 	and.w	r3, r3, #6
 800e41e:	2b04      	cmp	r3, #4
 800e420:	bf02      	ittt	eq
 800e422:	68e5      	ldreq	r5, [r4, #12]
 800e424:	6833      	ldreq	r3, [r6, #0]
 800e426:	1aed      	subeq	r5, r5, r3
 800e428:	68a3      	ldr	r3, [r4, #8]
 800e42a:	bf0c      	ite	eq
 800e42c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e430:	2500      	movne	r5, #0
 800e432:	4293      	cmp	r3, r2
 800e434:	bfc4      	itt	gt
 800e436:	1a9b      	subgt	r3, r3, r2
 800e438:	18ed      	addgt	r5, r5, r3
 800e43a:	2600      	movs	r6, #0
 800e43c:	341a      	adds	r4, #26
 800e43e:	42b5      	cmp	r5, r6
 800e440:	d11a      	bne.n	800e478 <_printf_common+0xc8>
 800e442:	2000      	movs	r0, #0
 800e444:	e008      	b.n	800e458 <_printf_common+0xa8>
 800e446:	2301      	movs	r3, #1
 800e448:	4652      	mov	r2, sl
 800e44a:	4649      	mov	r1, r9
 800e44c:	4638      	mov	r0, r7
 800e44e:	47c0      	blx	r8
 800e450:	3001      	adds	r0, #1
 800e452:	d103      	bne.n	800e45c <_printf_common+0xac>
 800e454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e45c:	3501      	adds	r5, #1
 800e45e:	e7c6      	b.n	800e3ee <_printf_common+0x3e>
 800e460:	18e1      	adds	r1, r4, r3
 800e462:	1c5a      	adds	r2, r3, #1
 800e464:	2030      	movs	r0, #48	; 0x30
 800e466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e46a:	4422      	add	r2, r4
 800e46c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e474:	3302      	adds	r3, #2
 800e476:	e7c7      	b.n	800e408 <_printf_common+0x58>
 800e478:	2301      	movs	r3, #1
 800e47a:	4622      	mov	r2, r4
 800e47c:	4649      	mov	r1, r9
 800e47e:	4638      	mov	r0, r7
 800e480:	47c0      	blx	r8
 800e482:	3001      	adds	r0, #1
 800e484:	d0e6      	beq.n	800e454 <_printf_common+0xa4>
 800e486:	3601      	adds	r6, #1
 800e488:	e7d9      	b.n	800e43e <_printf_common+0x8e>
	...

0800e48c <_printf_i>:
 800e48c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e490:	7e0f      	ldrb	r7, [r1, #24]
 800e492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e494:	2f78      	cmp	r7, #120	; 0x78
 800e496:	4691      	mov	r9, r2
 800e498:	4680      	mov	r8, r0
 800e49a:	460c      	mov	r4, r1
 800e49c:	469a      	mov	sl, r3
 800e49e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4a2:	d807      	bhi.n	800e4b4 <_printf_i+0x28>
 800e4a4:	2f62      	cmp	r7, #98	; 0x62
 800e4a6:	d80a      	bhi.n	800e4be <_printf_i+0x32>
 800e4a8:	2f00      	cmp	r7, #0
 800e4aa:	f000 80d4 	beq.w	800e656 <_printf_i+0x1ca>
 800e4ae:	2f58      	cmp	r7, #88	; 0x58
 800e4b0:	f000 80c0 	beq.w	800e634 <_printf_i+0x1a8>
 800e4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4bc:	e03a      	b.n	800e534 <_printf_i+0xa8>
 800e4be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4c2:	2b15      	cmp	r3, #21
 800e4c4:	d8f6      	bhi.n	800e4b4 <_printf_i+0x28>
 800e4c6:	a101      	add	r1, pc, #4	; (adr r1, 800e4cc <_printf_i+0x40>)
 800e4c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4cc:	0800e525 	.word	0x0800e525
 800e4d0:	0800e539 	.word	0x0800e539
 800e4d4:	0800e4b5 	.word	0x0800e4b5
 800e4d8:	0800e4b5 	.word	0x0800e4b5
 800e4dc:	0800e4b5 	.word	0x0800e4b5
 800e4e0:	0800e4b5 	.word	0x0800e4b5
 800e4e4:	0800e539 	.word	0x0800e539
 800e4e8:	0800e4b5 	.word	0x0800e4b5
 800e4ec:	0800e4b5 	.word	0x0800e4b5
 800e4f0:	0800e4b5 	.word	0x0800e4b5
 800e4f4:	0800e4b5 	.word	0x0800e4b5
 800e4f8:	0800e63d 	.word	0x0800e63d
 800e4fc:	0800e565 	.word	0x0800e565
 800e500:	0800e5f7 	.word	0x0800e5f7
 800e504:	0800e4b5 	.word	0x0800e4b5
 800e508:	0800e4b5 	.word	0x0800e4b5
 800e50c:	0800e65f 	.word	0x0800e65f
 800e510:	0800e4b5 	.word	0x0800e4b5
 800e514:	0800e565 	.word	0x0800e565
 800e518:	0800e4b5 	.word	0x0800e4b5
 800e51c:	0800e4b5 	.word	0x0800e4b5
 800e520:	0800e5ff 	.word	0x0800e5ff
 800e524:	682b      	ldr	r3, [r5, #0]
 800e526:	1d1a      	adds	r2, r3, #4
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	602a      	str	r2, [r5, #0]
 800e52c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e534:	2301      	movs	r3, #1
 800e536:	e09f      	b.n	800e678 <_printf_i+0x1ec>
 800e538:	6820      	ldr	r0, [r4, #0]
 800e53a:	682b      	ldr	r3, [r5, #0]
 800e53c:	0607      	lsls	r7, r0, #24
 800e53e:	f103 0104 	add.w	r1, r3, #4
 800e542:	6029      	str	r1, [r5, #0]
 800e544:	d501      	bpl.n	800e54a <_printf_i+0xbe>
 800e546:	681e      	ldr	r6, [r3, #0]
 800e548:	e003      	b.n	800e552 <_printf_i+0xc6>
 800e54a:	0646      	lsls	r6, r0, #25
 800e54c:	d5fb      	bpl.n	800e546 <_printf_i+0xba>
 800e54e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e552:	2e00      	cmp	r6, #0
 800e554:	da03      	bge.n	800e55e <_printf_i+0xd2>
 800e556:	232d      	movs	r3, #45	; 0x2d
 800e558:	4276      	negs	r6, r6
 800e55a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e55e:	485a      	ldr	r0, [pc, #360]	; (800e6c8 <_printf_i+0x23c>)
 800e560:	230a      	movs	r3, #10
 800e562:	e012      	b.n	800e58a <_printf_i+0xfe>
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	6820      	ldr	r0, [r4, #0]
 800e568:	1d19      	adds	r1, r3, #4
 800e56a:	6029      	str	r1, [r5, #0]
 800e56c:	0605      	lsls	r5, r0, #24
 800e56e:	d501      	bpl.n	800e574 <_printf_i+0xe8>
 800e570:	681e      	ldr	r6, [r3, #0]
 800e572:	e002      	b.n	800e57a <_printf_i+0xee>
 800e574:	0641      	lsls	r1, r0, #25
 800e576:	d5fb      	bpl.n	800e570 <_printf_i+0xe4>
 800e578:	881e      	ldrh	r6, [r3, #0]
 800e57a:	4853      	ldr	r0, [pc, #332]	; (800e6c8 <_printf_i+0x23c>)
 800e57c:	2f6f      	cmp	r7, #111	; 0x6f
 800e57e:	bf0c      	ite	eq
 800e580:	2308      	moveq	r3, #8
 800e582:	230a      	movne	r3, #10
 800e584:	2100      	movs	r1, #0
 800e586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e58a:	6865      	ldr	r5, [r4, #4]
 800e58c:	60a5      	str	r5, [r4, #8]
 800e58e:	2d00      	cmp	r5, #0
 800e590:	bfa2      	ittt	ge
 800e592:	6821      	ldrge	r1, [r4, #0]
 800e594:	f021 0104 	bicge.w	r1, r1, #4
 800e598:	6021      	strge	r1, [r4, #0]
 800e59a:	b90e      	cbnz	r6, 800e5a0 <_printf_i+0x114>
 800e59c:	2d00      	cmp	r5, #0
 800e59e:	d04b      	beq.n	800e638 <_printf_i+0x1ac>
 800e5a0:	4615      	mov	r5, r2
 800e5a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5a6:	fb03 6711 	mls	r7, r3, r1, r6
 800e5aa:	5dc7      	ldrb	r7, [r0, r7]
 800e5ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5b0:	4637      	mov	r7, r6
 800e5b2:	42bb      	cmp	r3, r7
 800e5b4:	460e      	mov	r6, r1
 800e5b6:	d9f4      	bls.n	800e5a2 <_printf_i+0x116>
 800e5b8:	2b08      	cmp	r3, #8
 800e5ba:	d10b      	bne.n	800e5d4 <_printf_i+0x148>
 800e5bc:	6823      	ldr	r3, [r4, #0]
 800e5be:	07de      	lsls	r6, r3, #31
 800e5c0:	d508      	bpl.n	800e5d4 <_printf_i+0x148>
 800e5c2:	6923      	ldr	r3, [r4, #16]
 800e5c4:	6861      	ldr	r1, [r4, #4]
 800e5c6:	4299      	cmp	r1, r3
 800e5c8:	bfde      	ittt	le
 800e5ca:	2330      	movle	r3, #48	; 0x30
 800e5cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e5d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e5d4:	1b52      	subs	r2, r2, r5
 800e5d6:	6122      	str	r2, [r4, #16]
 800e5d8:	f8cd a000 	str.w	sl, [sp]
 800e5dc:	464b      	mov	r3, r9
 800e5de:	aa03      	add	r2, sp, #12
 800e5e0:	4621      	mov	r1, r4
 800e5e2:	4640      	mov	r0, r8
 800e5e4:	f7ff fee4 	bl	800e3b0 <_printf_common>
 800e5e8:	3001      	adds	r0, #1
 800e5ea:	d14a      	bne.n	800e682 <_printf_i+0x1f6>
 800e5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5f0:	b004      	add	sp, #16
 800e5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	f043 0320 	orr.w	r3, r3, #32
 800e5fc:	6023      	str	r3, [r4, #0]
 800e5fe:	4833      	ldr	r0, [pc, #204]	; (800e6cc <_printf_i+0x240>)
 800e600:	2778      	movs	r7, #120	; 0x78
 800e602:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e606:	6823      	ldr	r3, [r4, #0]
 800e608:	6829      	ldr	r1, [r5, #0]
 800e60a:	061f      	lsls	r7, r3, #24
 800e60c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e610:	d402      	bmi.n	800e618 <_printf_i+0x18c>
 800e612:	065f      	lsls	r7, r3, #25
 800e614:	bf48      	it	mi
 800e616:	b2b6      	uxthmi	r6, r6
 800e618:	07df      	lsls	r7, r3, #31
 800e61a:	bf48      	it	mi
 800e61c:	f043 0320 	orrmi.w	r3, r3, #32
 800e620:	6029      	str	r1, [r5, #0]
 800e622:	bf48      	it	mi
 800e624:	6023      	strmi	r3, [r4, #0]
 800e626:	b91e      	cbnz	r6, 800e630 <_printf_i+0x1a4>
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	f023 0320 	bic.w	r3, r3, #32
 800e62e:	6023      	str	r3, [r4, #0]
 800e630:	2310      	movs	r3, #16
 800e632:	e7a7      	b.n	800e584 <_printf_i+0xf8>
 800e634:	4824      	ldr	r0, [pc, #144]	; (800e6c8 <_printf_i+0x23c>)
 800e636:	e7e4      	b.n	800e602 <_printf_i+0x176>
 800e638:	4615      	mov	r5, r2
 800e63a:	e7bd      	b.n	800e5b8 <_printf_i+0x12c>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	6826      	ldr	r6, [r4, #0]
 800e640:	6961      	ldr	r1, [r4, #20]
 800e642:	1d18      	adds	r0, r3, #4
 800e644:	6028      	str	r0, [r5, #0]
 800e646:	0635      	lsls	r5, r6, #24
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	d501      	bpl.n	800e650 <_printf_i+0x1c4>
 800e64c:	6019      	str	r1, [r3, #0]
 800e64e:	e002      	b.n	800e656 <_printf_i+0x1ca>
 800e650:	0670      	lsls	r0, r6, #25
 800e652:	d5fb      	bpl.n	800e64c <_printf_i+0x1c0>
 800e654:	8019      	strh	r1, [r3, #0]
 800e656:	2300      	movs	r3, #0
 800e658:	6123      	str	r3, [r4, #16]
 800e65a:	4615      	mov	r5, r2
 800e65c:	e7bc      	b.n	800e5d8 <_printf_i+0x14c>
 800e65e:	682b      	ldr	r3, [r5, #0]
 800e660:	1d1a      	adds	r2, r3, #4
 800e662:	602a      	str	r2, [r5, #0]
 800e664:	681d      	ldr	r5, [r3, #0]
 800e666:	6862      	ldr	r2, [r4, #4]
 800e668:	2100      	movs	r1, #0
 800e66a:	4628      	mov	r0, r5
 800e66c:	f7f1 fdb0 	bl	80001d0 <memchr>
 800e670:	b108      	cbz	r0, 800e676 <_printf_i+0x1ea>
 800e672:	1b40      	subs	r0, r0, r5
 800e674:	6060      	str	r0, [r4, #4]
 800e676:	6863      	ldr	r3, [r4, #4]
 800e678:	6123      	str	r3, [r4, #16]
 800e67a:	2300      	movs	r3, #0
 800e67c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e680:	e7aa      	b.n	800e5d8 <_printf_i+0x14c>
 800e682:	6923      	ldr	r3, [r4, #16]
 800e684:	462a      	mov	r2, r5
 800e686:	4649      	mov	r1, r9
 800e688:	4640      	mov	r0, r8
 800e68a:	47d0      	blx	sl
 800e68c:	3001      	adds	r0, #1
 800e68e:	d0ad      	beq.n	800e5ec <_printf_i+0x160>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	079b      	lsls	r3, r3, #30
 800e694:	d413      	bmi.n	800e6be <_printf_i+0x232>
 800e696:	68e0      	ldr	r0, [r4, #12]
 800e698:	9b03      	ldr	r3, [sp, #12]
 800e69a:	4298      	cmp	r0, r3
 800e69c:	bfb8      	it	lt
 800e69e:	4618      	movlt	r0, r3
 800e6a0:	e7a6      	b.n	800e5f0 <_printf_i+0x164>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	4632      	mov	r2, r6
 800e6a6:	4649      	mov	r1, r9
 800e6a8:	4640      	mov	r0, r8
 800e6aa:	47d0      	blx	sl
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	d09d      	beq.n	800e5ec <_printf_i+0x160>
 800e6b0:	3501      	adds	r5, #1
 800e6b2:	68e3      	ldr	r3, [r4, #12]
 800e6b4:	9903      	ldr	r1, [sp, #12]
 800e6b6:	1a5b      	subs	r3, r3, r1
 800e6b8:	42ab      	cmp	r3, r5
 800e6ba:	dcf2      	bgt.n	800e6a2 <_printf_i+0x216>
 800e6bc:	e7eb      	b.n	800e696 <_printf_i+0x20a>
 800e6be:	2500      	movs	r5, #0
 800e6c0:	f104 0619 	add.w	r6, r4, #25
 800e6c4:	e7f5      	b.n	800e6b2 <_printf_i+0x226>
 800e6c6:	bf00      	nop
 800e6c8:	0800f541 	.word	0x0800f541
 800e6cc:	0800f552 	.word	0x0800f552

0800e6d0 <__malloc_lock>:
 800e6d0:	4801      	ldr	r0, [pc, #4]	; (800e6d8 <__malloc_lock+0x8>)
 800e6d2:	f7ff bc65 	b.w	800dfa0 <__retarget_lock_acquire_recursive>
 800e6d6:	bf00      	nop
 800e6d8:	20005428 	.word	0x20005428

0800e6dc <__malloc_unlock>:
 800e6dc:	4801      	ldr	r0, [pc, #4]	; (800e6e4 <__malloc_unlock+0x8>)
 800e6de:	f7ff bc60 	b.w	800dfa2 <__retarget_lock_release_recursive>
 800e6e2:	bf00      	nop
 800e6e4:	20005428 	.word	0x20005428

0800e6e8 <_realloc_r>:
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	4680      	mov	r8, r0
 800e6ee:	4614      	mov	r4, r2
 800e6f0:	460e      	mov	r6, r1
 800e6f2:	b921      	cbnz	r1, 800e6fe <_realloc_r+0x16>
 800e6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	f7ff bdd9 	b.w	800e2b0 <_malloc_r>
 800e6fe:	b92a      	cbnz	r2, 800e70c <_realloc_r+0x24>
 800e700:	f000 f84c 	bl	800e79c <_free_r>
 800e704:	4625      	mov	r5, r4
 800e706:	4628      	mov	r0, r5
 800e708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e70c:	f000 f892 	bl	800e834 <_malloc_usable_size_r>
 800e710:	4284      	cmp	r4, r0
 800e712:	4607      	mov	r7, r0
 800e714:	d802      	bhi.n	800e71c <_realloc_r+0x34>
 800e716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e71a:	d812      	bhi.n	800e742 <_realloc_r+0x5a>
 800e71c:	4621      	mov	r1, r4
 800e71e:	4640      	mov	r0, r8
 800e720:	f7ff fdc6 	bl	800e2b0 <_malloc_r>
 800e724:	4605      	mov	r5, r0
 800e726:	2800      	cmp	r0, #0
 800e728:	d0ed      	beq.n	800e706 <_realloc_r+0x1e>
 800e72a:	42bc      	cmp	r4, r7
 800e72c:	4622      	mov	r2, r4
 800e72e:	4631      	mov	r1, r6
 800e730:	bf28      	it	cs
 800e732:	463a      	movcs	r2, r7
 800e734:	f7ff fc36 	bl	800dfa4 <memcpy>
 800e738:	4631      	mov	r1, r6
 800e73a:	4640      	mov	r0, r8
 800e73c:	f000 f82e 	bl	800e79c <_free_r>
 800e740:	e7e1      	b.n	800e706 <_realloc_r+0x1e>
 800e742:	4635      	mov	r5, r6
 800e744:	e7df      	b.n	800e706 <_realloc_r+0x1e>

0800e746 <memmove>:
 800e746:	4288      	cmp	r0, r1
 800e748:	b510      	push	{r4, lr}
 800e74a:	eb01 0402 	add.w	r4, r1, r2
 800e74e:	d902      	bls.n	800e756 <memmove+0x10>
 800e750:	4284      	cmp	r4, r0
 800e752:	4623      	mov	r3, r4
 800e754:	d807      	bhi.n	800e766 <memmove+0x20>
 800e756:	1e43      	subs	r3, r0, #1
 800e758:	42a1      	cmp	r1, r4
 800e75a:	d008      	beq.n	800e76e <memmove+0x28>
 800e75c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e760:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e764:	e7f8      	b.n	800e758 <memmove+0x12>
 800e766:	4402      	add	r2, r0
 800e768:	4601      	mov	r1, r0
 800e76a:	428a      	cmp	r2, r1
 800e76c:	d100      	bne.n	800e770 <memmove+0x2a>
 800e76e:	bd10      	pop	{r4, pc}
 800e770:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e774:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e778:	e7f7      	b.n	800e76a <memmove+0x24>
	...

0800e77c <_sbrk_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4d06      	ldr	r5, [pc, #24]	; (800e798 <_sbrk_r+0x1c>)
 800e780:	2300      	movs	r3, #0
 800e782:	4604      	mov	r4, r0
 800e784:	4608      	mov	r0, r1
 800e786:	602b      	str	r3, [r5, #0]
 800e788:	f7f6 ff40 	bl	800560c <_sbrk>
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	d102      	bne.n	800e796 <_sbrk_r+0x1a>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	b103      	cbz	r3, 800e796 <_sbrk_r+0x1a>
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	bd38      	pop	{r3, r4, r5, pc}
 800e798:	20005434 	.word	0x20005434

0800e79c <_free_r>:
 800e79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e79e:	2900      	cmp	r1, #0
 800e7a0:	d044      	beq.n	800e82c <_free_r+0x90>
 800e7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7a6:	9001      	str	r0, [sp, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e7ae:	bfb8      	it	lt
 800e7b0:	18e4      	addlt	r4, r4, r3
 800e7b2:	f7ff ff8d 	bl	800e6d0 <__malloc_lock>
 800e7b6:	4a1e      	ldr	r2, [pc, #120]	; (800e830 <_free_r+0x94>)
 800e7b8:	9801      	ldr	r0, [sp, #4]
 800e7ba:	6813      	ldr	r3, [r2, #0]
 800e7bc:	b933      	cbnz	r3, 800e7cc <_free_r+0x30>
 800e7be:	6063      	str	r3, [r4, #4]
 800e7c0:	6014      	str	r4, [r2, #0]
 800e7c2:	b003      	add	sp, #12
 800e7c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7c8:	f7ff bf88 	b.w	800e6dc <__malloc_unlock>
 800e7cc:	42a3      	cmp	r3, r4
 800e7ce:	d908      	bls.n	800e7e2 <_free_r+0x46>
 800e7d0:	6825      	ldr	r5, [r4, #0]
 800e7d2:	1961      	adds	r1, r4, r5
 800e7d4:	428b      	cmp	r3, r1
 800e7d6:	bf01      	itttt	eq
 800e7d8:	6819      	ldreq	r1, [r3, #0]
 800e7da:	685b      	ldreq	r3, [r3, #4]
 800e7dc:	1949      	addeq	r1, r1, r5
 800e7de:	6021      	streq	r1, [r4, #0]
 800e7e0:	e7ed      	b.n	800e7be <_free_r+0x22>
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	b10b      	cbz	r3, 800e7ec <_free_r+0x50>
 800e7e8:	42a3      	cmp	r3, r4
 800e7ea:	d9fa      	bls.n	800e7e2 <_free_r+0x46>
 800e7ec:	6811      	ldr	r1, [r2, #0]
 800e7ee:	1855      	adds	r5, r2, r1
 800e7f0:	42a5      	cmp	r5, r4
 800e7f2:	d10b      	bne.n	800e80c <_free_r+0x70>
 800e7f4:	6824      	ldr	r4, [r4, #0]
 800e7f6:	4421      	add	r1, r4
 800e7f8:	1854      	adds	r4, r2, r1
 800e7fa:	42a3      	cmp	r3, r4
 800e7fc:	6011      	str	r1, [r2, #0]
 800e7fe:	d1e0      	bne.n	800e7c2 <_free_r+0x26>
 800e800:	681c      	ldr	r4, [r3, #0]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	6053      	str	r3, [r2, #4]
 800e806:	440c      	add	r4, r1
 800e808:	6014      	str	r4, [r2, #0]
 800e80a:	e7da      	b.n	800e7c2 <_free_r+0x26>
 800e80c:	d902      	bls.n	800e814 <_free_r+0x78>
 800e80e:	230c      	movs	r3, #12
 800e810:	6003      	str	r3, [r0, #0]
 800e812:	e7d6      	b.n	800e7c2 <_free_r+0x26>
 800e814:	6825      	ldr	r5, [r4, #0]
 800e816:	1961      	adds	r1, r4, r5
 800e818:	428b      	cmp	r3, r1
 800e81a:	bf04      	itt	eq
 800e81c:	6819      	ldreq	r1, [r3, #0]
 800e81e:	685b      	ldreq	r3, [r3, #4]
 800e820:	6063      	str	r3, [r4, #4]
 800e822:	bf04      	itt	eq
 800e824:	1949      	addeq	r1, r1, r5
 800e826:	6021      	streq	r1, [r4, #0]
 800e828:	6054      	str	r4, [r2, #4]
 800e82a:	e7ca      	b.n	800e7c2 <_free_r+0x26>
 800e82c:	b003      	add	sp, #12
 800e82e:	bd30      	pop	{r4, r5, pc}
 800e830:	2000542c 	.word	0x2000542c

0800e834 <_malloc_usable_size_r>:
 800e834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e838:	1f18      	subs	r0, r3, #4
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	bfbc      	itt	lt
 800e83e:	580b      	ldrlt	r3, [r1, r0]
 800e840:	18c0      	addlt	r0, r0, r3
 800e842:	4770      	bx	lr

0800e844 <_init>:
 800e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e846:	bf00      	nop
 800e848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e84a:	bc08      	pop	{r3}
 800e84c:	469e      	mov	lr, r3
 800e84e:	4770      	bx	lr

0800e850 <_fini>:
 800e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e852:	bf00      	nop
 800e854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e856:	bc08      	pop	{r3}
 800e858:	469e      	mov	lr, r3
 800e85a:	4770      	bx	lr
