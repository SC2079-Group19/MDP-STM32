
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dccc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d08  0800de5c  0800de5c  0001de5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb64  0800eb64  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb64  0800eb64  0001eb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb6c  0800eb6c  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb6c  0800eb6c  0001eb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb70  0800eb70  0001eb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800eb74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a0  2**0
                  CONTENTS
 10 .bss          00005204  200001a0  200001a0  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200053a4  200053a4  000201a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cac6  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c67  00000000  00000000  0003ccd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019a0  00000000  00000000  00040940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000141c  00000000  00000000  000422e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005207  00000000  00000000  000436fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d769  00000000  00000000  00048903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc900  00000000  00000000  0006606c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000073f8  00000000  00000000  0014296c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00149d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a0 	.word	0x200001a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de44 	.word	0x0800de44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	0800de44 	.word	0x0800de44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f004 fac1 	bl	8005484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f967 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fc5d 	bl	80017c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fc31 	bl	8001770 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 f9bf 	bl	8001290 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fb83 	bl	800161c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fa87 	bl	8001428 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 f9e7 	bl	80012ec <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1e:	f000 fad7 	bl	80014d0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f22:	f000 fb45 	bl	80015b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f26:	f00c fa49 	bl	800d3bc <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	486f      	ldr	r0, [pc, #444]	; (80010f0 <main+0x1f8>)
 8000f32:	f00b ff6c 	bl	800ce0e <ICM20948_init>

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f36:	210c      	movs	r1, #12
 8000f38:	486e      	ldr	r0, [pc, #440]	; (80010f4 <main+0x1fc>)
 8000f3a:	f006 fc27 	bl	800778c <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	486d      	ldr	r0, [pc, #436]	; (80010f8 <main+0x200>)
 8000f42:	f006 fc23 	bl	800778c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f46:	2104      	movs	r1, #4
 8000f48:	486b      	ldr	r0, [pc, #428]	; (80010f8 <main+0x200>)
 8000f4a:	f006 fc1f 	bl	800778c <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f4e:	213c      	movs	r1, #60	; 0x3c
 8000f50:	486a      	ldr	r0, [pc, #424]	; (80010fc <main+0x204>)
 8000f52:	f006 ffb9 	bl	8007ec8 <HAL_TIM_Encoder_Start>

  // uart
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000f56:	4b6a      	ldr	r3, [pc, #424]	; (8001100 <main+0x208>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4969      	ldr	r1, [pc, #420]	; (8001104 <main+0x20c>)
 8000f60:	4869      	ldr	r0, [pc, #420]	; (8001108 <main+0x210>)
 8000f62:	f008 f9ca 	bl	80092fa <HAL_UART_Receive_IT>

  // ultrasonic
  HAL_TIM_Base_Start(&htim6);
 8000f66:	4869      	ldr	r0, [pc, #420]	; (800110c <main+0x214>)
 8000f68:	f006 fade 	bl	8007528 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4868      	ldr	r0, [pc, #416]	; (8001110 <main+0x218>)
 8000f70:	f006 fd2e 	bl	80079d0 <HAL_TIM_IC_Start_IT>

  // HAL_TIM_Base_Start(&htim1);

  __RESET_SERVO_TURN(&htim1);
 8000f74:	4b5f      	ldr	r3, [pc, #380]	; (80010f4 <main+0x1fc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2291      	movs	r2, #145	; 0x91
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f80:	f004 fac2 	bl	8005508 <HAL_Delay>

  // command queue initialization
  curCmd.index = 100;
 8000f84:	4b63      	ldr	r3, [pc, #396]	; (8001114 <main+0x21c>)
 8000f86:	2264      	movs	r2, #100	; 0x64
 8000f88:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f8a:	4b62      	ldr	r3, [pc, #392]	; (8001114 <main+0x21c>)
 8000f8c:	220a      	movs	r2, #10
 8000f8e:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8000f90:	4b61      	ldr	r3, [pc, #388]	; (8001118 <main+0x220>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <main+0x220>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	; (800111c <main+0x224>)
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <main+0x220>)
 8000fa2:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	e00c      	b.n	8000fc4 <main+0xcc>
  {
    Command cmd;
    cmd.index = 100;
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000fb2:	4a59      	ldr	r2, [pc, #356]	; (8001118 <main+0x220>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b55      	ldr	r3, [pc, #340]	; (800111c <main+0x224>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	dbec      	blt.n	8000faa <main+0xb2>
  }
  PIDConfigInit(&pidTSlow, 2.1, 0.045, 0.8);
 8000fd0:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8001120 <main+0x228>
 8000fd4:	eddf 0a53 	vldr	s1, [pc, #332]	; 8001124 <main+0x22c>
 8000fd8:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001128 <main+0x230>
 8000fdc:	4853      	ldr	r0, [pc, #332]	; (800112c <main+0x234>)
 8000fde:	f001 f93b 	bl	8002258 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.1, 0.045, 0.8);
 8000fe2:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8001120 <main+0x228>
 8000fe6:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001124 <main+0x22c>
 8000fea:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001128 <main+0x230>
 8000fee:	4850      	ldr	r0, [pc, #320]	; (8001130 <main+0x238>)
 8000ff0:	f001 f932 	bl	8002258 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.1, 0.05, 0.3);
 8000ff4:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8001134 <main+0x23c>
 8000ff8:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001138 <main+0x240>
 8000ffc:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800113c <main+0x244>
 8001000:	484f      	ldr	r0, [pc, #316]	; (8001140 <main+0x248>)
 8001002:	f001 f929 	bl	8002258 <PIDConfigInit>
  // TODO:overwrite curCmd for debugging individual task
  // curCmd.index = 1;
  // curCmd.val = 30;

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8001006:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <main+0x208>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	493d      	ldr	r1, [pc, #244]	; (8001104 <main+0x20c>)
 8001010:	483d      	ldr	r0, [pc, #244]	; (8001108 <main+0x210>)
 8001012:	f008 f972 	bl	80092fa <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <main+0x1fc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2291      	movs	r2, #145	; 0x91
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
 800101e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001022:	f004 fa71 	bl	8005508 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001026:	f009 f945 	bl	800a2b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 800102a:	4a46      	ldr	r2, [pc, #280]	; (8001144 <main+0x24c>)
 800102c:	2100      	movs	r1, #0
 800102e:	4846      	ldr	r0, [pc, #280]	; (8001148 <main+0x250>)
 8001030:	f009 f98a 	bl	800a348 <osThreadNew>
 8001034:	4603      	mov	r3, r0
 8001036:	4a45      	ldr	r2, [pc, #276]	; (800114c <main+0x254>)
 8001038:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 800103a:	4a45      	ldr	r2, [pc, #276]	; (8001150 <main+0x258>)
 800103c:	2100      	movs	r1, #0
 800103e:	4845      	ldr	r0, [pc, #276]	; (8001154 <main+0x25c>)
 8001040:	f009 f982 	bl	800a348 <osThreadNew>
 8001044:	4603      	mov	r3, r0
 8001046:	4a44      	ldr	r2, [pc, #272]	; (8001158 <main+0x260>)
 8001048:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 800104a:	4a44      	ldr	r2, [pc, #272]	; (800115c <main+0x264>)
 800104c:	2100      	movs	r1, #0
 800104e:	4844      	ldr	r0, [pc, #272]	; (8001160 <main+0x268>)
 8001050:	f009 f97a 	bl	800a348 <osThreadNew>
 8001054:	4603      	mov	r3, r0
 8001056:	4a43      	ldr	r2, [pc, #268]	; (8001164 <main+0x26c>)
 8001058:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 800105a:	4a43      	ldr	r2, [pc, #268]	; (8001168 <main+0x270>)
 800105c:	2100      	movs	r1, #0
 800105e:	4843      	ldr	r0, [pc, #268]	; (800116c <main+0x274>)
 8001060:	f009 f972 	bl	800a348 <osThreadNew>
 8001064:	4603      	mov	r3, r0
 8001066:	4a42      	ldr	r2, [pc, #264]	; (8001170 <main+0x278>)
 8001068:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 800106a:	4a42      	ldr	r2, [pc, #264]	; (8001174 <main+0x27c>)
 800106c:	2100      	movs	r1, #0
 800106e:	4842      	ldr	r0, [pc, #264]	; (8001178 <main+0x280>)
 8001070:	f009 f96a 	bl	800a348 <osThreadNew>
 8001074:	4603      	mov	r3, r0
 8001076:	4a41      	ldr	r2, [pc, #260]	; (800117c <main+0x284>)
 8001078:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 800107a:	4a41      	ldr	r2, [pc, #260]	; (8001180 <main+0x288>)
 800107c:	2100      	movs	r1, #0
 800107e:	4841      	ldr	r0, [pc, #260]	; (8001184 <main+0x28c>)
 8001080:	f009 f962 	bl	800a348 <osThreadNew>
 8001084:	4603      	mov	r3, r0
 8001086:	4a40      	ldr	r2, [pc, #256]	; (8001188 <main+0x290>)
 8001088:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 800108a:	4a40      	ldr	r2, [pc, #256]	; (800118c <main+0x294>)
 800108c:	2100      	movs	r1, #0
 800108e:	4840      	ldr	r0, [pc, #256]	; (8001190 <main+0x298>)
 8001090:	f009 f95a 	bl	800a348 <osThreadNew>
 8001094:	4603      	mov	r3, r0
 8001096:	4a3f      	ldr	r2, [pc, #252]	; (8001194 <main+0x29c>)
 8001098:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 800109a:	4a3f      	ldr	r2, [pc, #252]	; (8001198 <main+0x2a0>)
 800109c:	2100      	movs	r1, #0
 800109e:	483f      	ldr	r0, [pc, #252]	; (800119c <main+0x2a4>)
 80010a0:	f009 f952 	bl	800a348 <osThreadNew>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <main+0x2a8>)
 80010a8:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 80010aa:	4a3e      	ldr	r2, [pc, #248]	; (80011a4 <main+0x2ac>)
 80010ac:	2100      	movs	r1, #0
 80010ae:	483e      	ldr	r0, [pc, #248]	; (80011a8 <main+0x2b0>)
 80010b0:	f009 f94a 	bl	800a348 <osThreadNew>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a3d      	ldr	r2, [pc, #244]	; (80011ac <main+0x2b4>)
 80010b8:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80010ba:	4a3d      	ldr	r2, [pc, #244]	; (80011b0 <main+0x2b8>)
 80010bc:	2100      	movs	r1, #0
 80010be:	483d      	ldr	r0, [pc, #244]	; (80011b4 <main+0x2bc>)
 80010c0:	f009 f942 	bl	800a348 <osThreadNew>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <main+0x2c0>)
 80010c8:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80010ca:	4a3c      	ldr	r2, [pc, #240]	; (80011bc <main+0x2c4>)
 80010cc:	2100      	movs	r1, #0
 80010ce:	483c      	ldr	r0, [pc, #240]	; (80011c0 <main+0x2c8>)
 80010d0:	f009 f93a 	bl	800a348 <osThreadNew>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a3b      	ldr	r2, [pc, #236]	; (80011c4 <main+0x2cc>)
 80010d8:	6013      	str	r3, [r2, #0]

  /* creation of navArdObsTask */
  navArdObsTaskHandle = osThreadNew(runNavArdObsTask, NULL, &navArdObsTask_attributes);
 80010da:	4a3b      	ldr	r2, [pc, #236]	; (80011c8 <main+0x2d0>)
 80010dc:	2100      	movs	r1, #0
 80010de:	483b      	ldr	r0, [pc, #236]	; (80011cc <main+0x2d4>)
 80010e0:	f009 f932 	bl	800a348 <osThreadNew>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a3a      	ldr	r2, [pc, #232]	; (80011d0 <main+0x2d8>)
 80010e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010ea:	f009 f907 	bl	800a2fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <main+0x1f6>
 80010f0:	200001bc 	.word	0x200001bc
 80010f4:	20000210 	.word	0x20000210
 80010f8:	20000330 	.word	0x20000330
 80010fc:	20000258 	.word	0x20000258
 8001100:	20000000 	.word	0x20000000
 8001104:	200003ec 	.word	0x200003ec
 8001108:	20000378 	.word	0x20000378
 800110c:	200002e8 	.word	0x200002e8
 8001110:	200002a0 	.word	0x200002a0
 8001114:	2000042c 	.word	0x2000042c
 8001118:	200003f8 	.word	0x200003f8
 800111c:	20000001 	.word	0x20000001
 8001120:	3f4ccccd 	.word	0x3f4ccccd
 8001124:	3d3851ec 	.word	0x3d3851ec
 8001128:	40066666 	.word	0x40066666
 800112c:	2000047c 	.word	0x2000047c
 8001130:	20000468 	.word	0x20000468
 8001134:	3e99999a 	.word	0x3e99999a
 8001138:	3d4ccccd 	.word	0x3d4ccccd
 800113c:	3f8ccccd 	.word	0x3f8ccccd
 8001140:	20000490 	.word	0x20000490
 8001144:	0800df04 	.word	0x0800df04
 8001148:	080030a1 	.word	0x080030a1
 800114c:	200003bc 	.word	0x200003bc
 8001150:	0800df28 	.word	0x0800df28
 8001154:	08003171 	.word	0x08003171
 8001158:	200003c0 	.word	0x200003c0
 800115c:	0800df4c 	.word	0x0800df4c
 8001160:	080031b9 	.word	0x080031b9
 8001164:	200003c4 	.word	0x200003c4
 8001168:	0800df70 	.word	0x0800df70
 800116c:	080033f1 	.word	0x080033f1
 8001170:	200003c8 	.word	0x200003c8
 8001174:	0800df94 	.word	0x0800df94
 8001178:	0800363d 	.word	0x0800363d
 800117c:	200003cc 	.word	0x200003cc
 8001180:	0800dfb8 	.word	0x0800dfb8
 8001184:	08003a75 	.word	0x08003a75
 8001188:	200003d0 	.word	0x200003d0
 800118c:	0800dfdc 	.word	0x0800dfdc
 8001190:	08003ead 	.word	0x08003ead
 8001194:	200003d4 	.word	0x200003d4
 8001198:	0800e000 	.word	0x0800e000
 800119c:	080042e5 	.word	0x080042e5
 80011a0:	200003d8 	.word	0x200003d8
 80011a4:	0800e024 	.word	0x0800e024
 80011a8:	0800471d 	.word	0x0800471d
 80011ac:	200003dc 	.word	0x200003dc
 80011b0:	0800e048 	.word	0x0800e048
 80011b4:	080047f1 	.word	0x080047f1
 80011b8:	200003e0 	.word	0x200003e0
 80011bc:	0800e06c 	.word	0x0800e06c
 80011c0:	08004d09 	.word	0x08004d09
 80011c4:	200003e4 	.word	0x200003e4
 80011c8:	0800e090 	.word	0x0800e090
 80011cc:	08004df9 	.word	0x08004df9
 80011d0:	200003e8 	.word	0x200003e8

080011d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b094      	sub	sp, #80	; 0x50
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2230      	movs	r2, #48	; 0x30
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00c f9aa 	bl	800d53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <SystemClock_Config+0xb4>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <SystemClock_Config+0xb4>)
 8001202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <SystemClock_Config+0xb4>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <SystemClock_Config+0xb8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <SystemClock_Config+0xb8>)
 800121e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <SystemClock_Config+0xb8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001238:	2310      	movs	r3, #16
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4618      	mov	r0, r3
 8001246:	f005 fc95 	bl	8006b74 <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001250:	f003 fdec 	bl	8004e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001254:	230f      	movs	r3, #15
 8001256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fef8 	bl	8007064 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800127a:	f003 fdd7 	bl	8004e2c <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	; 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C1_Init+0x50>)
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <MX_I2C1_Init+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_I2C1_Init+0x50>)
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x58>)
 800129e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_I2C1_Init+0x50>)
 80012ce:	f004 fc69 	bl	8005ba4 <HAL_I2C_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d8:	f003 fda8 	bl	8004e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200001bc 	.word	0x200001bc
 80012e4:	40005400 	.word	0x40005400
 80012e8:	000186a0 	.word	0x000186a0

080012ec <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b096      	sub	sp, #88	; 0x58
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2220      	movs	r2, #32
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f00c f909 	bl	800d53c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <MX_TIM1_Init+0x134>)
 800132c:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <MX_TIM1_Init+0x138>)
 800132e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001330:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <MX_TIM1_Init+0x134>)
 8001332:	22a0      	movs	r2, #160	; 0xa0
 8001334:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <MX_TIM1_Init+0x134>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800133c:	4b38      	ldr	r3, [pc, #224]	; (8001420 <MX_TIM1_Init+0x134>)
 800133e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001342:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <MX_TIM1_Init+0x134>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800134a:	4b35      	ldr	r3, [pc, #212]	; (8001420 <MX_TIM1_Init+0x134>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001350:	4b33      	ldr	r3, [pc, #204]	; (8001420 <MX_TIM1_Init+0x134>)
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001356:	4832      	ldr	r0, [pc, #200]	; (8001420 <MX_TIM1_Init+0x134>)
 8001358:	f006 f896 	bl	8007488 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001362:	f003 fd63 	bl	8004e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001370:	4619      	mov	r1, r3
 8001372:	482b      	ldr	r0, [pc, #172]	; (8001420 <MX_TIM1_Init+0x134>)
 8001374:	f007 f89c 	bl	80084b0 <HAL_TIM_ConfigClockSource>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800137e:	f003 fd55 	bl	8004e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001382:	4827      	ldr	r0, [pc, #156]	; (8001420 <MX_TIM1_Init+0x134>)
 8001384:	f006 f9a8 	bl	80076d8 <HAL_TIM_PWM_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800138e:	f003 fd4d 	bl	8004e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800139a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800139e:	4619      	mov	r1, r3
 80013a0:	481f      	ldr	r0, [pc, #124]	; (8001420 <MX_TIM1_Init+0x134>)
 80013a2:	f007 fde9 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013ac:	f003 fd3e 	bl	8004e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b0:	2360      	movs	r3, #96	; 0x60
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	220c      	movs	r2, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	4813      	ldr	r0, [pc, #76]	; (8001420 <MX_TIM1_Init+0x134>)
 80013d2:	f006 ffab 	bl	800832c <HAL_TIM_PWM_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80013dc:	f003 fd26 	bl	8004e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_TIM1_Init+0x134>)
 8001404:	f007 fe34 	bl	8009070 <HAL_TIMEx_ConfigBreakDeadTime>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800140e:	f003 fd0d 	bl	8004e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_TIM1_Init+0x134>)
 8001414:	f003 fea4 	bl	8005160 <HAL_TIM_MspPostInit>
}
 8001418:	bf00      	nop
 800141a:	3758      	adds	r7, #88	; 0x58
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000210 	.word	0x20000210
 8001424:	40010000 	.word	0x40010000

08001428 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f00c f880 	bl	800d53c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_TIM2_Init+0xa4>)
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_TIM2_Init+0xa4>)
 800145a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800145e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800146c:	2303      	movs	r3, #3
 800146e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800147c:	230a      	movs	r3, #10
 800147e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001484:	2301      	movs	r3, #1
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800148c:	230a      	movs	r3, #10
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_TIM2_Init+0xa4>)
 8001498:	f006 fc70 	bl	8007d7c <HAL_TIM_Encoder_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014a2:	f003 fcc3 	bl	8004e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_TIM2_Init+0xa4>)
 80014b4:	f007 fd60 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014be:	f003 fcb5 	bl	8004e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 80014c2:	bf00      	nop
 80014c4:	3730      	adds	r7, #48	; 0x30
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000258 	.word	0x20000258

080014d0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_TIM3_Init+0xd8>)
 80014fc:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <MX_TIM3_Init+0xdc>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001502:	220f      	movs	r2, #15
 8001504:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001512:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001520:	4821      	ldr	r0, [pc, #132]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001522:	f005 ffb1 	bl	8007488 <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800152c:	f003 fc7e 	bl	8004e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001534:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001536:	f107 0318 	add.w	r3, r7, #24
 800153a:	4619      	mov	r1, r3
 800153c:	481a      	ldr	r0, [pc, #104]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800153e:	f006 ffb7 	bl	80084b0 <HAL_TIM_ConfigClockSource>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001548:	f003 fc70 	bl	8004e2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800154c:	4816      	ldr	r0, [pc, #88]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800154e:	f006 f9e5 	bl	800791c <HAL_TIM_IC_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001558:	f003 fc68 	bl	8004e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	480f      	ldr	r0, [pc, #60]	; (80015a8 <MX_TIM3_Init+0xd8>)
 800156c:	f007 fd04 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001576:	f003 fc59 	bl	8004e2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800157a:	230a      	movs	r3, #10
 800157c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800157e:	2301      	movs	r3, #1
 8001580:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	2204      	movs	r2, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM3_Init+0xd8>)
 8001592:	f006 fe2f 	bl	80081f4 <HAL_TIM_IC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800159c:	f003 fc46 	bl	8004e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002a0 	.word	0x200002a0
 80015ac:	40000400 	.word	0x40000400

080015b0 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_TIM6_Init+0x68>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c6:	220f      	movs	r2, #15
 80015c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_TIM6_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_TIM6_Init+0x64>)
 80015d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM6_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_TIM6_Init+0x64>)
 80015e0:	f005 ff52 	bl	8007488 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015ea:	f003 fc1f 	bl	8004e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_TIM6_Init+0x64>)
 80015fc:	f007 fcbc 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001606:	f003 fc11 	bl	8004e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002e8 	.word	0x200002e8
 8001618:	40001000 	.word	0x40001000

0800161c <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b096      	sub	sp, #88	; 0x58
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2220      	movs	r2, #32
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f00b ff71 	bl	800d53c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <MX_TIM8_Init+0x14c>)
 800165c:	4a43      	ldr	r2, [pc, #268]	; (800176c <MX_TIM8_Init+0x150>)
 800165e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 800166c:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <MX_TIM8_Init+0x14c>)
 800166e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001672:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <MX_TIM8_Init+0x14c>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001686:	4838      	ldr	r0, [pc, #224]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001688:	f005 fefe 	bl	8007488 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001692:	f003 fbcb 	bl	8004e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016a0:	4619      	mov	r1, r3
 80016a2:	4831      	ldr	r0, [pc, #196]	; (8001768 <MX_TIM8_Init+0x14c>)
 80016a4:	f006 ff04 	bl	80084b0 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016ae:	f003 fbbd 	bl	8004e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016b2:	482d      	ldr	r0, [pc, #180]	; (8001768 <MX_TIM8_Init+0x14c>)
 80016b4:	f006 f810 	bl	80076d8 <HAL_TIM_PWM_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016be:	f003 fbb5 	bl	8004e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016ce:	4619      	mov	r1, r3
 80016d0:	4825      	ldr	r0, [pc, #148]	; (8001768 <MX_TIM8_Init+0x14c>)
 80016d2:	f007 fc51 	bl	8008f78 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016dc:	f003 fba6 	bl	8004e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e0:	2360      	movs	r3, #96	; 0x60
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	4818      	ldr	r0, [pc, #96]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001706:	f006 fe11 	bl	800832c <HAL_TIM_PWM_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001710:	f003 fb8c 	bl	8004e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	2204      	movs	r2, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4812      	ldr	r0, [pc, #72]	; (8001768 <MX_TIM8_Init+0x14c>)
 800171e:	f006 fe05 	bl	800832c <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001728:	f003 fb80 	bl	8004e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_TIM8_Init+0x14c>)
 8001750:	f007 fc8e 	bl	8009070 <HAL_TIMEx_ConfigBreakDeadTime>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800175a:	f003 fb67 	bl	8004e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 800175e:	bf00      	nop
 8001760:	3758      	adds	r7, #88	; 0x58
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000330 	.word	0x20000330
 800176c:	40010400 	.word	0x40010400

08001770 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_USART3_UART_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a8:	f007 fcc8 	bl	800913c <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017b2:	f003 fb3b 	bl	8004e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000378 	.word	0x20000378
 80017c0:	40004800 	.word	0x40004800

080017c4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <MX_GPIO_Init+0xfc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a37      	ldr	r2, [pc, #220]	; (80018c0 <MX_GPIO_Init+0xfc>)
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <MX_GPIO_Init+0xfc>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <MX_GPIO_Init+0xfc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <MX_GPIO_Init+0xfc>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_GPIO_Init+0xfc>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <MX_GPIO_Init+0x100>)
 8001852:	f004 f98d 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	213c      	movs	r1, #60	; 0x3c
 800185a:	481b      	ldr	r0, [pc, #108]	; (80018c8 <MX_GPIO_Init+0x104>)
 800185c:	f004 f988 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin US_Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin;
 8001860:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4812      	ldr	r0, [pc, #72]	; (80018c4 <MX_GPIO_Init+0x100>)
 800187a:	f003 ffdd 	bl	8005838 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 800187e:	230c      	movs	r3, #12
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188a:	2302      	movs	r3, #2
 800188c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <MX_GPIO_Init+0x104>)
 8001896:	f003 ffcf 	bl	8005838 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 800189a:	2330      	movs	r3, #48	; 0x30
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_GPIO_Init+0x104>)
 80018b2:	f003 ffc1 	bl	8005838 <HAL_GPIO_Init>
}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40020000 	.word	0x40020000
 80018cc:	00000000 	.word	0x00000000

080018d0 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t US_diff = 0;
uint8_t Is_First_Captured = 0; // is the first value captured ?

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // if the interrupt source is channel2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7f1b      	ldrb	r3, [r3, #28]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	f040 808c 	bne.w	80019fa <HAL_TIM_IC_CaptureCallback+0x12a>
  {
    if (Is_First_Captured == 0) // if the first value is not captured
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x140>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11a      	bne.n	8001920 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 80018ea:	2104      	movs	r1, #4
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f006 fea7 	bl	8008640 <HAL_TIM_ReadCapturedValue>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a47      	ldr	r2, [pc, #284]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 80018f6:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;                                    // set the first captured as true
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x140>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
      // Now change the polarity to falling edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6a1a      	ldr	r2, [r3, #32]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800190c:	621a      	str	r2, [r3, #32]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	621a      	str	r2, [r3, #32]
      // set polarity to rising edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
    }
  }
}
 800191e:	e06c      	b.n	80019fa <HAL_TIM_IC_CaptureCallback+0x12a>
    else if (Is_First_Captured == 1) // if the first is already captured
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d168      	bne.n	80019fa <HAL_TIM_IC_CaptureCallback+0x12a>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001928:	2104      	movs	r1, #4
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f006 fe88 	bl	8008640 <HAL_TIM_ReadCapturedValue>
 8001930:	4603      	mov	r3, r0
 8001932:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001934:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);                           // reset the counter
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
      if (IC_Val2 > IC_Val1)
 800193e:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d90c      	bls.n	8001964 <HAL_TIM_IC_CaptureCallback+0x94>
        obsDist_US = IC_Val2 - IC_Val1;
 800194a:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800195e:	edc3 7a00 	vstr	s15, [r3]
 8001962:	e014      	b.n	800198e <HAL_TIM_IC_CaptureCallback+0xbe>
      else if (IC_Val1 > IC_Val2)
 8001964:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d90e      	bls.n	800198e <HAL_TIM_IC_CaptureCallback+0xbe>
        obsDist_US = (0xffff - IC_Val1) + IC_Val2;
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800197e:	33ff      	adds	r3, #255	; 0xff
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800198a:	edc3 7a00 	vstr	s15, [r3]
      obsDist_US = obsDist_US * .034 / 2;
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdd0 	bl	8000538 <__aeabi_f2d>
 8001998:	a31b      	add	r3, pc, #108	; (adr r3, 8001a08 <HAL_TIM_IC_CaptureCallback+0x138>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe23 	bl	80005e8 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b2:	f7fe ff43 	bl	800083c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f8cd 	bl	8000b5c <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x14c>)
 80019c6:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 0; // set it back to false
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x140>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a1a      	ldr	r2, [r3, #32]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019dc:	621a      	str	r2, [r3, #32]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a12      	ldr	r2, [r2, #32]
 80019e8:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x150>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x150>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0204 	bic.w	r2, r2, #4
 80019f8:	60da      	str	r2, [r3, #12]
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	b020c49c 	.word	0xb020c49c
 8001a0c:	3fa16872 	.word	0x3fa16872
 8001a10:	200004b0 	.word	0x200004b0
 8001a14:	200004a8 	.word	0x200004a8
 8001a18:	200004ac 	.word	0x200004ac
 8001a1c:	200004a4 	.word	0x200004a4
 8001a20:	200002a0 	.word	0x200002a0

08001a24 <HAL_UART_RxCpltCallback>:
int targetD = 5;
uint8_t tempDir = 1;
int8_t step = 0;
uint8_t turnMode = 2;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  // TODO: add delimeter at end of command
  //  prevent unused argument(s) compilation warning
  UNUSED(huart);
  int val;

  val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001a2c:	4b94      	ldr	r3, [pc, #592]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a2e:	789b      	ldrb	r3, [r3, #2]
 8001a30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b90      	ldr	r3, [pc, #576]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	3b30      	subs	r3, #48	; 0x30
 8001a44:	4413      	add	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
  if (aRxBuffer[4] >= '0' && aRxBuffer[4] <= '9')
 8001a48:	4b8d      	ldr	r3, [pc, #564]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a4a:	791b      	ldrb	r3, [r3, #4]
 8001a4c:	2b2f      	cmp	r3, #47	; 0x2f
 8001a4e:	d90e      	bls.n	8001a6e <HAL_UART_RxCpltCallback+0x4a>
 8001a50:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	2b39      	cmp	r3, #57	; 0x39
 8001a56:	d80a      	bhi.n	8001a6e <HAL_UART_RxCpltCallback+0x4a>
    // val += (aRxBuffer[4] - 48) * 100;
    val = val * 10 + (aRxBuffer[4] - 48);
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b86      	ldr	r3, [pc, #536]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	3b30      	subs	r3, #48	; 0x30
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]

  manualMode = 0;
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_UART_RxCpltCallback+0x260>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

  if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T')
 8001a74:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b53      	cmp	r3, #83	; 0x53
 8001a7a:	d159      	bne.n	8001b30 <HAL_UART_RxCpltCallback+0x10c>
 8001a7c:	4b80      	ldr	r3, [pc, #512]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2b54      	cmp	r3, #84	; 0x54
 8001a82:	d155      	bne.n	8001b30 <HAL_UART_RxCpltCallback+0x10c>
  { // only STOP can preempt any greedy task
    //		__ADD_COMMAND(cQueue, 0, 0); // stop
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001a84:	4b80      	ldr	r3, [pc, #512]	; (8001c88 <HAL_UART_RxCpltCallback+0x264>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a8c:	4b7e      	ldr	r3, [pc, #504]	; (8001c88 <HAL_UART_RxCpltCallback+0x264>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
 8001a94:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <HAL_UART_RxCpltCallback+0x268>)
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	4b7d      	ldr	r3, [pc, #500]	; (8001c90 <HAL_UART_RxCpltCallback+0x26c>)
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_UART_RxCpltCallback+0x268>)
 8001a9e:	220b      	movs	r2, #11
 8001aa0:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001aa2:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <HAL_UART_RxCpltCallback+0x270>)
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001aaa:	4b7b      	ldr	r3, [pc, #492]	; (8001c98 <HAL_UART_RxCpltCallback+0x274>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 8001ab0:	487a      	ldr	r0, [pc, #488]	; (8001c9c <HAL_UART_RxCpltCallback+0x278>)
 8001ab2:	f000 fbf2 	bl	800229a <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001ab6:	487a      	ldr	r0, [pc, #488]	; (8001ca0 <HAL_UART_RxCpltCallback+0x27c>)
 8001ab8:	f000 fbef 	bl	800229a <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001abc:	4879      	ldr	r0, [pc, #484]	; (8001ca4 <HAL_UART_RxCpltCallback+0x280>)
 8001abe:	f000 fbec 	bl	800229a <PIDConfigReset>
    curDistTick = 0;
 8001ac2:	4b79      	ldr	r3, [pc, #484]	; (8001ca8 <HAL_UART_RxCpltCallback+0x284>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001ac8:	4b78      	ldr	r3, [pc, #480]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b77      	ldr	r3, [pc, #476]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d112      	bne.n	8001afa <HAL_UART_RxCpltCallback+0xd6>
    {
      __CLEAR_CURCMD(curCmd);
 8001ad4:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001ad6:	2264      	movs	r2, #100	; 0x64
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	4b75      	ldr	r3, [pc, #468]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001ae0:	4a74      	ldr	r2, [pc, #464]	; (8001cb4 <HAL_UART_RxCpltCallback+0x290>)
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	4874      	ldr	r0, [pc, #464]	; (8001cb8 <HAL_UART_RxCpltCallback+0x294>)
 8001ae6:	f00b fcf5 	bl	800d4d4 <sniprintf>
 8001aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aee:	2206      	movs	r2, #6
 8001af0:	4972      	ldr	r1, [pc, #456]	; (8001cbc <HAL_UART_RxCpltCallback+0x298>)
 8001af2:	4873      	ldr	r0, [pc, #460]	; (8001cc0 <HAL_UART_RxCpltCallback+0x29c>)
 8001af4:	f007 fb6f 	bl	80091d6 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001af8:	e371      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001afa:	4b6c      	ldr	r3, [pc, #432]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001b00:	496a      	ldr	r1, [pc, #424]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b0c:	785b      	ldrb	r3, [r3, #1]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	4a66      	ldr	r2, [pc, #408]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b12:	7892      	ldrb	r2, [r2, #2]
 8001b14:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b18:	fb01 f202 	mul.w	r2, r1, r2
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b62      	ldr	r3, [pc, #392]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b22:	705a      	strb	r2, [r3, #1]
 8001b24:	4a67      	ldr	r2, [pc, #412]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001b26:	210f      	movs	r1, #15
 8001b28:	4863      	ldr	r0, [pc, #396]	; (8001cb8 <HAL_UART_RxCpltCallback+0x294>)
 8001b2a:	f00b fcd3 	bl	800d4d4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001b2e:	e356      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
    }
  }
  else if (aRxBuffer[0] == 'R' && aRxBuffer[1] == 'S')
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b52      	cmp	r3, #82	; 0x52
 8001b36:	d161      	bne.n	8001bfc <HAL_UART_RxCpltCallback+0x1d8>
 8001b38:	4b51      	ldr	r3, [pc, #324]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001b3a:	785b      	ldrb	r3, [r3, #1]
 8001b3c:	2b53      	cmp	r3, #83	; 0x53
 8001b3e:	d15d      	bne.n	8001bfc <HAL_UART_RxCpltCallback+0x1d8>
  {
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001b40:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <HAL_UART_RxCpltCallback+0x264>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
 8001b48:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <HAL_UART_RxCpltCallback+0x264>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b50:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <HAL_UART_RxCpltCallback+0x268>)
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	4b4e      	ldr	r3, [pc, #312]	; (8001c90 <HAL_UART_RxCpltCallback+0x26c>)
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_UART_RxCpltCallback+0x268>)
 8001b5a:	220b      	movs	r2, #11
 8001b5c:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <HAL_UART_RxCpltCallback+0x270>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001b66:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_UART_RxCpltCallback+0x274>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	801a      	strh	r2, [r3, #0]
    __RESET_SERVO_TURN(&htim1);
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2291      	movs	r2, #145	; 0x91
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
 8001b74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b78:	f003 fcc6 	bl	8005508 <HAL_Delay>
    PIDConfigReset(&pidTSlow);
 8001b7c:	4847      	ldr	r0, [pc, #284]	; (8001c9c <HAL_UART_RxCpltCallback+0x278>)
 8001b7e:	f000 fb8c 	bl	800229a <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001b82:	4847      	ldr	r0, [pc, #284]	; (8001ca0 <HAL_UART_RxCpltCallback+0x27c>)
 8001b84:	f000 fb89 	bl	800229a <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001b88:	4846      	ldr	r0, [pc, #280]	; (8001ca4 <HAL_UART_RxCpltCallback+0x280>)
 8001b8a:	f000 fb86 	bl	800229a <PIDConfigReset>
    curDistTick = 0;
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_UART_RxCpltCallback+0x284>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d112      	bne.n	8001bc6 <HAL_UART_RxCpltCallback+0x1a2>
    {
      __CLEAR_CURCMD(curCmd);
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001ba2:	2264      	movs	r2, #100	; 0x64
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001bac:	4a41      	ldr	r2, [pc, #260]	; (8001cb4 <HAL_UART_RxCpltCallback+0x290>)
 8001bae:	210f      	movs	r1, #15
 8001bb0:	4841      	ldr	r0, [pc, #260]	; (8001cb8 <HAL_UART_RxCpltCallback+0x294>)
 8001bb2:	f00b fc8f 	bl	800d4d4 <sniprintf>
 8001bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bba:	2206      	movs	r2, #6
 8001bbc:	493f      	ldr	r1, [pc, #252]	; (8001cbc <HAL_UART_RxCpltCallback+0x298>)
 8001bbe:	4840      	ldr	r0, [pc, #256]	; (8001cc0 <HAL_UART_RxCpltCallback+0x29c>)
 8001bc0:	f007 fb09 	bl	80091d6 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001bc4:	e30b      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	4a39      	ldr	r2, [pc, #228]	; (8001cb0 <HAL_UART_RxCpltCallback+0x28c>)
 8001bcc:	4937      	ldr	r1, [pc, #220]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bd8:	785b      	ldrb	r3, [r3, #1]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a33      	ldr	r2, [pc, #204]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bde:	7892      	ldrb	r2, [r2, #2]
 8001be0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001be4:	fb01 f202 	mul.w	r2, r1, r2
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001bee:	705a      	strb	r2, [r3, #1]
 8001bf0:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	4830      	ldr	r0, [pc, #192]	; (8001cb8 <HAL_UART_RxCpltCallback+0x294>)
 8001bf6:	f00b fc6d 	bl	800d4d4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001bfa:	e2f0      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
    }
  }
  else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b46      	cmp	r3, #70	; 0x46
 8001c02:	d165      	bne.n	8001cd0 <HAL_UART_RxCpltCallback+0x2ac>
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	2b57      	cmp	r3, #87	; 0x57
 8001c0a:	d003      	beq.n	8001c14 <HAL_UART_RxCpltCallback+0x1f0>
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	2b53      	cmp	r3, #83	; 0x53
 8001c12:	d15d      	bne.n	8001cd0 <HAL_UART_RxCpltCallback+0x2ac>
  { // FW or FS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c16:	789b      	ldrb	r3, [r3, #2]
 8001c18:	2b2d      	cmp	r3, #45	; 0x2d
 8001c1a:	d105      	bne.n	8001c28 <HAL_UART_RxCpltCallback+0x204>
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c1e:	78db      	ldrb	r3, [r3, #3]
 8001c20:	2b2d      	cmp	r3, #45	; 0x2d
 8001c22:	d101      	bne.n	8001c28 <HAL_UART_RxCpltCallback+0x204>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_UART_RxCpltCallback+0x206>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_UART_RxCpltCallback+0x260>)
 8001c2e:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_UART_RxCpltCallback+0x25c>)
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	2b53      	cmp	r3, #83	; 0x53
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_UART_RxCpltCallback+0x2a8>)
 8001c42:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 1, val);
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2201      	movs	r2, #1
 8001c50:	711a      	strb	r2, [r3, #4]
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	b291      	uxth	r1, r2
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	460a      	mov	r2, r1
 8001c62:	80da      	strh	r2, [r3, #6]
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c6c:	7892      	ldrb	r2, [r2, #2]
 8001c6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c72:	fb01 f202 	mul.w	r2, r1, r2
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_UART_RxCpltCallback+0x288>)
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e2ae      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
 8001c80:	200003ec 	.word	0x200003ec
 8001c84:	20000440 	.word	0x20000440
 8001c88:	20000330 	.word	0x20000330
 8001c8c:	20000134 	.word	0x20000134
 8001c90:	20000135 	.word	0x20000135
 8001c94:	20000448 	.word	0x20000448
 8001c98:	2000044e 	.word	0x2000044e
 8001c9c:	2000047c 	.word	0x2000047c
 8001ca0:	20000468 	.word	0x20000468
 8001ca4:	20000490 	.word	0x20000490
 8001ca8:	20000460 	.word	0x20000460
 8001cac:	200003f8 	.word	0x200003f8
 8001cb0:	2000042c 	.word	0x2000042c
 8001cb4:	0800ded4 	.word	0x0800ded4
 8001cb8:	20000430 	.word	0x20000430
 8001cbc:	0800dedc 	.word	0x0800dedc
 8001cc0:	20000378 	.word	0x20000378
 8001cc4:	0800dee4 	.word	0x0800dee4
 8001cc8:	20000210 	.word	0x20000210
 8001ccc:	20000136 	.word	0x20000136
  }
  else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001cd0:	4b96      	ldr	r3, [pc, #600]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b42      	cmp	r3, #66	; 0x42
 8001cd6:	d13d      	bne.n	8001d54 <HAL_UART_RxCpltCallback+0x330>
 8001cd8:	4b94      	ldr	r3, [pc, #592]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	2b57      	cmp	r3, #87	; 0x57
 8001cde:	d003      	beq.n	8001ce8 <HAL_UART_RxCpltCallback+0x2c4>
 8001ce0:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ce2:	785b      	ldrb	r3, [r3, #1]
 8001ce4:	2b53      	cmp	r3, #83	; 0x53
 8001ce6:	d135      	bne.n	8001d54 <HAL_UART_RxCpltCallback+0x330>
  { // BW or BS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ce8:	4b90      	ldr	r3, [pc, #576]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001cea:	789b      	ldrb	r3, [r3, #2]
 8001cec:	2b2d      	cmp	r3, #45	; 0x2d
 8001cee:	d105      	bne.n	8001cfc <HAL_UART_RxCpltCallback+0x2d8>
 8001cf0:	4b8e      	ldr	r3, [pc, #568]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001cf2:	78db      	ldrb	r3, [r3, #3]
 8001cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8001cf6:	d101      	bne.n	8001cfc <HAL_UART_RxCpltCallback+0x2d8>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_UART_RxCpltCallback+0x2da>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001d02:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001d04:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	2b53      	cmp	r3, #83	; 0x53
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <HAL_UART_RxCpltCallback+0x510>)
 8001d16:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 2, val);
 8001d18:	4b87      	ldr	r3, [pc, #540]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4a86      	ldr	r2, [pc, #536]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	2202      	movs	r2, #2
 8001d24:	711a      	strb	r2, [r3, #4]
 8001d26:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	b291      	uxth	r1, r2
 8001d2e:	4a82      	ldr	r2, [pc, #520]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	460a      	mov	r2, r1
 8001d36:	80da      	strh	r2, [r3, #6]
 8001d38:	4b7f      	ldr	r3, [pc, #508]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	4a7e      	ldr	r2, [pc, #504]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d40:	7892      	ldrb	r2, [r2, #2]
 8001d42:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d46:	fb01 f202 	mul.w	r2, r1, r2
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b7a      	ldr	r3, [pc, #488]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e244      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  }

  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L')
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b46      	cmp	r3, #70	; 0x46
 8001d5a:	d136      	bne.n	8001dca <HAL_UART_RxCpltCallback+0x3a6>
 8001d5c:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d5e:	785b      	ldrb	r3, [r3, #1]
 8001d60:	2b4c      	cmp	r3, #76	; 0x4c
 8001d62:	d132      	bne.n	8001dca <HAL_UART_RxCpltCallback+0x3a6>
  { // FL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001d64:	4b71      	ldr	r3, [pc, #452]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d66:	789b      	ldrb	r3, [r3, #2]
 8001d68:	2b2d      	cmp	r3, #45	; 0x2d
 8001d6a:	d105      	bne.n	8001d78 <HAL_UART_RxCpltCallback+0x354>
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001d6e:	78db      	ldrb	r3, [r3, #3]
 8001d70:	2b2d      	cmp	r3, #45	; 0x2d
 8001d72:	d101      	bne.n	8001d78 <HAL_UART_RxCpltCallback+0x354>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_UART_RxCpltCallback+0x356>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001d7e:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x368>
 8001d88:	2103      	movs	r1, #3
 8001d8a:	e000      	b.n	8001d8e <HAL_UART_RxCpltCallback+0x36a>
 8001d8c:	2107      	movs	r1, #7
 8001d8e:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4a69      	ldr	r2, [pc, #420]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	460a      	mov	r2, r1
 8001d9a:	711a      	strb	r2, [r3, #4]
 8001d9c:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	b291      	uxth	r1, r2
 8001da4:	4a64      	ldr	r2, [pc, #400]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	460a      	mov	r2, r1
 8001dac:	80da      	strh	r2, [r3, #6]
 8001dae:	4b62      	ldr	r3, [pc, #392]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a60      	ldr	r2, [pc, #384]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001db6:	7892      	ldrb	r2, [r2, #2]
 8001db8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dbc:	fb01 f202 	mul.w	r2, r1, r2
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e209      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  }
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R')
 8001dca:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b46      	cmp	r3, #70	; 0x46
 8001dd0:	d136      	bne.n	8001e40 <HAL_UART_RxCpltCallback+0x41c>
 8001dd2:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001dd4:	785b      	ldrb	r3, [r3, #1]
 8001dd6:	2b52      	cmp	r3, #82	; 0x52
 8001dd8:	d132      	bne.n	8001e40 <HAL_UART_RxCpltCallback+0x41c>
  { // FR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001dda:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ddc:	789b      	ldrb	r3, [r3, #2]
 8001dde:	2b2d      	cmp	r3, #45	; 0x2d
 8001de0:	d105      	bne.n	8001dee <HAL_UART_RxCpltCallback+0x3ca>
 8001de2:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001de4:	78db      	ldrb	r3, [r3, #3]
 8001de6:	2b2d      	cmp	r3, #45	; 0x2d
 8001de8:	d101      	bne.n	8001dee <HAL_UART_RxCpltCallback+0x3ca>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_UART_RxCpltCallback+0x3cc>
 8001dee:	2300      	movs	r3, #0
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001df4:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001df6:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_RxCpltCallback+0x3de>
 8001dfe:	2104      	movs	r1, #4
 8001e00:	e000      	b.n	8001e04 <HAL_UART_RxCpltCallback+0x3e0>
 8001e02:	2108      	movs	r1, #8
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	460a      	mov	r2, r1
 8001e10:	711a      	strb	r2, [r3, #4]
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	b291      	uxth	r1, r2
 8001e1a:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	460a      	mov	r2, r1
 8001e22:	80da      	strh	r2, [r3, #6]
 8001e24:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e2c:	7892      	ldrb	r2, [r2, #2]
 8001e2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e32:	fb01 f202 	mul.w	r2, r1, r2
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e1ce      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L')
 8001e40:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b42      	cmp	r3, #66	; 0x42
 8001e46:	d136      	bne.n	8001eb6 <HAL_UART_RxCpltCallback+0x492>
 8001e48:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	2b4c      	cmp	r3, #76	; 0x4c
 8001e4e:	d132      	bne.n	8001eb6 <HAL_UART_RxCpltCallback+0x492>
  { // BL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001e52:	789b      	ldrb	r3, [r3, #2]
 8001e54:	2b2d      	cmp	r3, #45	; 0x2d
 8001e56:	d105      	bne.n	8001e64 <HAL_UART_RxCpltCallback+0x440>
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001e5a:	78db      	ldrb	r3, [r3, #3]
 8001e5c:	2b2d      	cmp	r3, #45	; 0x2d
 8001e5e:	d101      	bne.n	8001e64 <HAL_UART_RxCpltCallback+0x440>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x442>
 8001e64:	2300      	movs	r3, #0
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001e6a:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8001e6c:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_UART_RxCpltCallback+0x454>
 8001e74:	2105      	movs	r1, #5
 8001e76:	e000      	b.n	8001e7a <HAL_UART_RxCpltCallback+0x456>
 8001e78:	2109      	movs	r1, #9
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	460a      	mov	r2, r1
 8001e86:	711a      	strb	r2, [r3, #4]
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b291      	uxth	r1, r2
 8001e90:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	460a      	mov	r2, r1
 8001e98:	80da      	strh	r2, [r3, #6]
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001ea2:	7892      	ldrb	r2, [r2, #2]
 8001ea4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ea8:	fb01 f202 	mul.w	r2, r1, r2
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e193      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R')
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b42      	cmp	r3, #66	; 0x42
 8001ebc:	d13e      	bne.n	8001f3c <HAL_UART_RxCpltCallback+0x518>
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	2b52      	cmp	r3, #82	; 0x52
 8001ec4:	d13a      	bne.n	8001f3c <HAL_UART_RxCpltCallback+0x518>
  { // BR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ec8:	789b      	ldrb	r3, [r3, #2]
 8001eca:	2b2d      	cmp	r3, #45	; 0x2d
 8001ecc:	d105      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x4b6>
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_UART_RxCpltCallback+0x508>)
 8001ed0:	78db      	ldrb	r3, [r3, #3]
 8001ed2:	2b2d      	cmp	r3, #45	; 0x2d
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x4b6>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_UART_RxCpltCallback+0x4b8>
 8001eda:	2300      	movs	r3, #0
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001ee0:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_UART_RxCpltCallback+0x50c>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_UART_RxCpltCallback+0x4ca>
 8001eea:	2106      	movs	r1, #6
 8001eec:	e000      	b.n	8001ef0 <HAL_UART_RxCpltCallback+0x4cc>
 8001eee:	210a      	movs	r1, #10
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	460a      	mov	r2, r1
 8001efc:	711a      	strb	r2, [r3, #4]
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	b291      	uxth	r1, r2
 8001f06:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	80da      	strh	r2, [r3, #6]
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f18:	7892      	ldrb	r2, [r2, #2]
 8001f1a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f1e:	fb01 f202 	mul.w	r2, r1, r2
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_UART_RxCpltCallback+0x514>)
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e158      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
 8001f2c:	200003ec 	.word	0x200003ec
 8001f30:	20000440 	.word	0x20000440
 8001f34:	20000136 	.word	0x20000136
 8001f38:	200003f8 	.word	0x200003f8
  }
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L')
 8001f3c:	4b95      	ldr	r3, [pc, #596]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b54      	cmp	r3, #84	; 0x54
 8001f42:	d121      	bne.n	8001f88 <HAL_UART_RxCpltCallback+0x564>
 8001f44:	4b93      	ldr	r3, [pc, #588]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8001f46:	785b      	ldrb	r3, [r3, #1]
 8001f48:	2b4c      	cmp	r3, #76	; 0x4c
 8001f4a:	d11d      	bne.n	8001f88 <HAL_UART_RxCpltCallback+0x564>
    __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 8001f4c:	4b92      	ldr	r3, [pc, #584]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4a91      	ldr	r2, [pc, #580]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	220b      	movs	r2, #11
 8001f58:	711a      	strb	r2, [r3, #4]
 8001f5a:	4b8f      	ldr	r3, [pc, #572]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	b291      	uxth	r1, r2
 8001f62:	4a8d      	ldr	r2, [pc, #564]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	460a      	mov	r2, r1
 8001f6a:	80da      	strh	r2, [r3, #6]
 8001f6c:	4b8a      	ldr	r3, [pc, #552]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	4a89      	ldr	r2, [pc, #548]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001f74:	7892      	ldrb	r2, [r2, #2]
 8001f76:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f7a:	fb01 f202 	mul.w	r2, r1, r2
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b85      	ldr	r3, [pc, #532]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e12a      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R')
 8001f88:	4b82      	ldr	r3, [pc, #520]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b54      	cmp	r3, #84	; 0x54
 8001f8e:	d121      	bne.n	8001fd4 <HAL_UART_RxCpltCallback+0x5b0>
 8001f90:	4b80      	ldr	r3, [pc, #512]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	2b52      	cmp	r3, #82	; 0x52
 8001f96:	d11d      	bne.n	8001fd4 <HAL_UART_RxCpltCallback+0x5b0>
    __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 8001f98:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4a7e      	ldr	r2, [pc, #504]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	711a      	strb	r2, [r3, #4]
 8001fa6:	4b7c      	ldr	r3, [pc, #496]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	b291      	uxth	r1, r2
 8001fae:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	80da      	strh	r2, [r3, #6]
 8001fb8:	4b77      	ldr	r3, [pc, #476]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4a76      	ldr	r2, [pc, #472]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001fc0:	7892      	ldrb	r2, [r2, #2]
 8001fc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fc6:	fb01 f202 	mul.w	r2, r1, r2
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b72      	ldr	r3, [pc, #456]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e104      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R')
 8001fd4:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b49      	cmp	r3, #73	; 0x49
 8001fda:	d121      	bne.n	8002020 <HAL_UART_RxCpltCallback+0x5fc>
 8001fdc:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	2b52      	cmp	r3, #82	; 0x52
 8001fe2:	d11d      	bne.n	8002020 <HAL_UART_RxCpltCallback+0x5fc>
    __ADD_COMMAND(cQueue, 13, val); // test IR sensor
 8001fe4:	4b6c      	ldr	r3, [pc, #432]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4a6b      	ldr	r2, [pc, #428]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	220d      	movs	r2, #13
 8001ff0:	711a      	strb	r2, [r3, #4]
 8001ff2:	4b69      	ldr	r3, [pc, #420]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	b291      	uxth	r1, r2
 8001ffa:	4a67      	ldr	r2, [pc, #412]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	460a      	mov	r2, r1
 8002002:	80da      	strh	r2, [r3, #6]
 8002004:	4b64      	ldr	r3, [pc, #400]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a63      	ldr	r2, [pc, #396]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800200c:	7892      	ldrb	r2, [r2, #2]
 800200e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002012:	fb01 f202 	mul.w	r2, r1, r2
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e0de      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T')
 8002020:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b44      	cmp	r3, #68	; 0x44
 8002026:	d121      	bne.n	800206c <HAL_UART_RxCpltCallback+0x648>
 8002028:	4b5a      	ldr	r3, [pc, #360]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	2b54      	cmp	r3, #84	; 0x54
 800202e:	d11d      	bne.n	800206c <HAL_UART_RxCpltCallback+0x648>
    __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	220e      	movs	r2, #14
 800203c:	711a      	strb	r2, [r3, #4]
 800203e:	4b56      	ldr	r3, [pc, #344]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	b291      	uxth	r1, r2
 8002046:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	460a      	mov	r2, r1
 800204e:	80da      	strh	r2, [r3, #6]
 8002050:	4b51      	ldr	r3, [pc, #324]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002058:	7892      	ldrb	r2, [r2, #2]
 800205a:	fb93 f1f2 	sdiv	r1, r3, r2
 800205e:	fb01 f202 	mul.w	r2, r1, r2
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e0b8      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'Z' && aRxBuffer[1] == 'Z')
 800206c:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b5a      	cmp	r3, #90	; 0x5a
 8002072:	d121      	bne.n	80020b8 <HAL_UART_RxCpltCallback+0x694>
 8002074:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8002076:	785b      	ldrb	r3, [r3, #1]
 8002078:	2b5a      	cmp	r3, #90	; 0x5a
 800207a:	d11d      	bne.n	80020b8 <HAL_UART_RxCpltCallback+0x694>
    __ADD_COMMAND(cQueue, 15, val); // ZZ buzzer
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4a45      	ldr	r2, [pc, #276]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	220f      	movs	r2, #15
 8002088:	711a      	strb	r2, [r3, #4]
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	b291      	uxth	r1, r2
 8002092:	4a41      	ldr	r2, [pc, #260]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	460a      	mov	r2, r1
 800209a:	80da      	strh	r2, [r3, #6]
 800209c:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 80020a4:	7892      	ldrb	r2, [r2, #2]
 80020a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80020aa:	fb01 f202 	mul.w	r2, r1, r2
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	e092      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'X')
 80020b8:	4b36      	ldr	r3, [pc, #216]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b57      	cmp	r3, #87	; 0x57
 80020be:	d121      	bne.n	8002104 <HAL_UART_RxCpltCallback+0x6e0>
 80020c0:	4b34      	ldr	r3, [pc, #208]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 80020c2:	785b      	ldrb	r3, [r3, #1]
 80020c4:	2b58      	cmp	r3, #88	; 0x58
 80020c6:	d11d      	bne.n	8002104 <HAL_UART_RxCpltCallback+0x6e0>
    __ADD_COMMAND(cQueue, 16, val); // WN fastest path
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4a32      	ldr	r2, [pc, #200]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	2210      	movs	r2, #16
 80020d4:	711a      	strb	r2, [r3, #4]
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	b291      	uxth	r1, r2
 80020de:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	460a      	mov	r2, r1
 80020e6:	80da      	strh	r2, [r3, #6]
 80020e8:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	4a2a      	ldr	r2, [pc, #168]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 80020f0:	7892      	ldrb	r2, [r2, #2]
 80020f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80020f6:	fb01 f202 	mul.w	r2, r1, r2
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002100:	701a      	strb	r2, [r3, #0]
 8002102:	e06c      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'W' && aRxBuffer[1] == 'N')
 8002104:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b57      	cmp	r3, #87	; 0x57
 800210a:	d121      	bne.n	8002150 <HAL_UART_RxCpltCallback+0x72c>
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b4e      	cmp	r3, #78	; 0x4e
 8002112:	d11d      	bne.n	8002150 <HAL_UART_RxCpltCallback+0x72c>
    __ADD_COMMAND(cQueue, 17, val); // WN fastest path v2
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	2211      	movs	r2, #17
 8002120:	711a      	strb	r2, [r3, #4]
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	b291      	uxth	r1, r2
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	460a      	mov	r2, r1
 8002132:	80da      	strh	r2, [r3, #6]
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800213c:	7892      	ldrb	r2, [r2, #2]
 800213e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002142:	fb01 f202 	mul.w	r2, r1, r2
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e046      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
  else if (aRxBuffer[0] == 'A')
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_UART_RxCpltCallback+0x770>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b41      	cmp	r3, #65	; 0x41
 8002156:	d121      	bne.n	800219c <HAL_UART_RxCpltCallback+0x778>
    __ADD_COMMAND(cQueue, 88, val); // anti-clockwise rotation with variable
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	2258      	movs	r2, #88	; 0x58
 8002164:	711a      	strb	r2, [r3, #4]
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	b291      	uxth	r1, r2
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	460a      	mov	r2, r1
 8002176:	80da      	strh	r2, [r3, #6]
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a06      	ldr	r2, [pc, #24]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002180:	7892      	ldrb	r2, [r2, #2]
 8002182:	fb93 f1f2 	sdiv	r1, r3, r2
 8002186:	fb01 f202 	mul.w	r2, r1, r2
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_UART_RxCpltCallback+0x774>)
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e024      	b.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
 8002194:	200003ec 	.word	0x200003ec
 8002198:	200003f8 	.word	0x200003f8
  else if (aRxBuffer[0] == 'C')
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_UART_RxCpltCallback+0x818>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b43      	cmp	r3, #67	; 0x43
 80021a2:	d11c      	bne.n	80021de <HAL_UART_RxCpltCallback+0x7ba>
    __ADD_COMMAND(cQueue, 89, val); // clockwise rotation with variable
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	2259      	movs	r2, #89	; 0x59
 80021b0:	711a      	strb	r2, [r3, #4]
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	b291      	uxth	r1, r2
 80021ba:	4a21      	ldr	r2, [pc, #132]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	460a      	mov	r2, r1
 80021c2:	80da      	strh	r2, [r3, #6]
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021cc:	7892      	ldrb	r2, [r2, #2]
 80021ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80021d2:	fb01 f202 	mul.w	r2, r1, r2
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021dc:	701a      	strb	r2, [r3, #0]

  if (!__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d019      	beq.n	800221e <HAL_UART_RxCpltCallback+0x7fa>
  {
    __READ_COMMAND(cQueue, curCmd, rxMsg);
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021ec:	785b      	ldrb	r3, [r3, #1]
 80021ee:	4a15      	ldr	r2, [pc, #84]	; (8002244 <HAL_UART_RxCpltCallback+0x820>)
 80021f0:	4913      	ldr	r1, [pc, #76]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	3301      	adds	r3, #1
 8002200:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 8002202:	7892      	ldrb	r2, [r2, #2]
 8002204:	fb93 f1f2 	sdiv	r1, r3, r2
 8002208:	fb01 f202 	mul.w	r2, r1, r2
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_UART_RxCpltCallback+0x81c>)
 8002212:	705a      	strb	r2, [r3, #1]
 8002214:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <HAL_UART_RxCpltCallback+0x824>)
 8002216:	210f      	movs	r1, #15
 8002218:	480c      	ldr	r0, [pc, #48]	; (800224c <HAL_UART_RxCpltCallback+0x828>)
 800221a:	f00b f95b 	bl	800d4d4 <sniprintf>
  }

  // clear aRx buffer
  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_UART_RxCpltCallback+0x82c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_UART_RxCpltCallback+0x830>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	4903      	ldr	r1, [pc, #12]	; (800223c <HAL_UART_RxCpltCallback+0x818>)
 800222e:	4808      	ldr	r0, [pc, #32]	; (8002250 <HAL_UART_RxCpltCallback+0x82c>)
 8002230:	f007 f863 	bl	80092fa <HAL_UART_Receive_IT>
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200003ec 	.word	0x200003ec
 8002240:	200003f8 	.word	0x200003f8
 8002244:	2000042c 	.word	0x2000042c
 8002248:	0800dee4 	.word	0x0800dee4
 800224c:	20000430 	.word	0x20000430
 8002250:	20000378 	.word	0x20000378
 8002254:	20000000 	.word	0x20000000

08002258 <PIDConfigInit>:

// pid
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	ed87 0a02 	vstr	s0, [r7, #8]
 8002264:	edc7 0a01 	vstr	s1, [r7, #4]
 8002268:	ed87 1a00 	vstr	s2, [r7]
  cfg->Kp = Kp;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	601a      	str	r2, [r3, #0]
  cfg->Ki = Ki;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	605a      	str	r2, [r3, #4]
  cfg->Kd = Kd;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	609a      	str	r2, [r3, #8]
  cfg->ek1 = 0;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <PIDConfigReset>:

void PIDConfigReset(PIDConfig *cfg)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HCSR04_Read>:

void HCSR04_Read(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ca:	481a      	ldr	r0, [pc, #104]	; (8002334 <HCSR04_Read+0x74>)
 80022cc:	f003 fc50 	bl	8005b70 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HCSR04_Read+0x78>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2200      	movs	r2, #0
 80022d6:	625a      	str	r2, [r3, #36]	; 0x24
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HCSR04_Read+0x78>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	2b31      	cmp	r3, #49	; 0x31
 80022e0:	d9fa      	bls.n	80022d8 <HCSR04_Read+0x18>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e8:	4812      	ldr	r0, [pc, #72]	; (8002334 <HCSR04_Read+0x74>)
 80022ea:	f003 fc41 	bl	8005b70 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 10);                                            // wait for 10 us
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HCSR04_Read+0x78>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HCSR04_Read+0x78>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	d9fa      	bls.n	80022f6 <HCSR04_Read+0x36>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002306:	480b      	ldr	r0, [pc, #44]	; (8002334 <HCSR04_Read+0x74>)
 8002308:	f003 fc32 	bl	8005b70 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HCSR04_Read+0x78>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2200      	movs	r2, #0
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HCSR04_Read+0x78>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b31      	cmp	r3, #49	; 0x31
 800231c:	d9fa      	bls.n	8002314 <HCSR04_Read+0x54>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <HCSR04_Read+0x7c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HCSR04_Read+0x7c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0204 	orr.w	r2, r2, #4
 800232c:	60da      	str	r2, [r3, #12]
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	200002e8 	.word	0x200002e8
 800233c:	200002a0 	.word	0x200002a0

08002340 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;

void StraightLineMove(const uint8_t speedMode)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af04      	add	r7, sp, #16
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]

  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 800234a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	2302      	movs	r3, #2
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	4ba9      	ldr	r3, [pc, #676]	; (80025fc <StraightLineMove+0x2bc>)
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2301      	movs	r3, #1
 800235a:	2237      	movs	r2, #55	; 0x37
 800235c:	21d0      	movs	r1, #208	; 0xd0
 800235e:	48a8      	ldr	r0, [pc, #672]	; (8002600 <StraightLineMove+0x2c0>)
 8002360:	f003 fe5e 	bl	8006020 <HAL_I2C_Mem_Read>
 8002364:	4ba5      	ldr	r3, [pc, #660]	; (80025fc <StraightLineMove+0x2bc>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	b21a      	sxth	r2, r3
 800236c:	4ba3      	ldr	r3, [pc, #652]	; (80025fc <StraightLineMove+0x2bc>)
 800236e:	785b      	ldrb	r3, [r3, #1]
 8002370:	b21b      	sxth	r3, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	b21a      	sxth	r2, r3
 8002376:	4ba3      	ldr	r3, [pc, #652]	; (8002604 <StraightLineMove+0x2c4>)
 8002378:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 800237a:	4ba3      	ldr	r3, [pc, #652]	; (8002608 <StraightLineMove+0x2c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b10      	cmp	r3, #16
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	b25a      	sxtb	r2, r3
 8002390:	4b9e      	ldr	r3, [pc, #632]	; (800260c <StraightLineMove+0x2cc>)
 8002392:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 8002394:	4b9b      	ldr	r3, [pc, #620]	; (8002604 <StraightLineMove+0x2c4>)
 8002396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239a:	f113 0f04 	cmn.w	r3, #4
 800239e:	db04      	blt.n	80023aa <StraightLineMove+0x6a>
 80023a0:	4b98      	ldr	r3, [pc, #608]	; (8002604 <StraightLineMove+0x2c4>)
 80023a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a6:	2b0b      	cmp	r3, #11
 80023a8:	dd07      	ble.n	80023ba <StraightLineMove+0x7a>
 80023aa:	4b96      	ldr	r3, [pc, #600]	; (8002604 <StraightLineMove+0x2c4>)
 80023ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023b8:	e001      	b.n	80023be <StraightLineMove+0x7e>
 80023ba:	eddf 7a95 	vldr	s15, [pc, #596]	; 8002610 <StraightLineMove+0x2d0>
 80023be:	4b95      	ldr	r3, [pc, #596]	; (8002614 <StraightLineMove+0x2d4>)
 80023c0:	ed93 7a00 	vldr	s14, [r3]
 80023c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023c8:	4b92      	ldr	r3, [pc, #584]	; (8002614 <StraightLineMove+0x2d4>)
 80023ca:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d164      	bne.n	800249e <StraightLineMove+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80023d4:	4b90      	ldr	r3, [pc, #576]	; (8002618 <StraightLineMove+0x2d8>)
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	4b8e      	ldr	r3, [pc, #568]	; (8002614 <StraightLineMove+0x2d4>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e4:	4b8c      	ldr	r3, [pc, #560]	; (8002618 <StraightLineMove+0x2d8>)
 80023e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80023ea:	4b8b      	ldr	r3, [pc, #556]	; (8002618 <StraightLineMove+0x2d8>)
 80023ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80023f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f8:	4b87      	ldr	r3, [pc, #540]	; (8002618 <StraightLineMove+0x2d8>)
 80023fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80023fe:	4b86      	ldr	r3, [pc, #536]	; (8002618 <StraightLineMove+0x2d8>)
 8002400:	ed93 6a03 	vldr	s12, [r3, #12]
 8002404:	4b83      	ldr	r3, [pc, #524]	; (8002614 <StraightLineMove+0x2d4>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800240e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241a:	ee17 2a90 	vmov	r2, s15
 800241e:	4b7f      	ldr	r3, [pc, #508]	; (800261c <StraightLineMove+0x2dc>)
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	4b7c      	ldr	r3, [pc, #496]	; (8002614 <StraightLineMove+0x2d4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7c      	ldr	r2, [pc, #496]	; (8002618 <StraightLineMove+0x2d8>)
 8002428:	60d3      	str	r3, [r2, #12]
 800242a:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <StraightLineMove+0x2d8>)
 800242c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002430:	4b78      	ldr	r3, [pc, #480]	; (8002614 <StraightLineMove+0x2d4>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243a:	4b77      	ldr	r3, [pc, #476]	; (8002618 <StraightLineMove+0x2d8>)
 800243c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002440:	4b76      	ldr	r3, [pc, #472]	; (800261c <StraightLineMove+0x2dc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002448:	dc06      	bgt.n	8002458 <StraightLineMove+0x118>
 800244a:	4b74      	ldr	r3, [pc, #464]	; (800261c <StraightLineMove+0x2dc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a74      	ldr	r2, [pc, #464]	; (8002620 <StraightLineMove+0x2e0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	bfb8      	it	lt
 8002454:	4613      	movlt	r3, r2
 8002456:	e001      	b.n	800245c <StraightLineMove+0x11c>
 8002458:	f44f 7316 	mov.w	r3, #600	; 0x258
 800245c:	4a6f      	ldr	r2, [pc, #444]	; (800261c <StraightLineMove+0x2dc>)
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <StraightLineMove+0x2cc>)
 8002462:	f993 3000 	ldrsb.w	r3, [r3]
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b6c      	ldr	r3, [pc, #432]	; (800261c <StraightLineMove+0x2dc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	fb12 f303 	smulbb	r3, r2, r3
 8002472:	b29b      	uxth	r3, r3
 8002474:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8002478:	b29a      	uxth	r2, r3
 800247a:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <StraightLineMove+0x2e4>)
 800247c:	801a      	strh	r2, [r3, #0]
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <StraightLineMove+0x2cc>)
 8002480:	f993 3000 	ldrsb.w	r3, [r3]
 8002484:	b29a      	uxth	r2, r3
 8002486:	4b65      	ldr	r3, [pc, #404]	; (800261c <StraightLineMove+0x2dc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	fb12 f303 	smulbb	r3, r2, r3
 8002490:	b29b      	uxth	r3, r3
 8002492:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b63      	ldr	r3, [pc, #396]	; (8002628 <StraightLineMove+0x2e8>)
 800249a:	801a      	strh	r2, [r3, #0]
 800249c:	e0ef      	b.n	800267e <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_2)
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d165      	bne.n	8002570 <StraightLineMove+0x230>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 80024a4:	4b61      	ldr	r3, [pc, #388]	; (800262c <StraightLineMove+0x2ec>)
 80024a6:	ed93 7a00 	vldr	s14, [r3]
 80024aa:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <StraightLineMove+0x2d4>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b4:	4b5d      	ldr	r3, [pc, #372]	; (800262c <StraightLineMove+0x2ec>)
 80024b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80024ba:	4b5c      	ldr	r3, [pc, #368]	; (800262c <StraightLineMove+0x2ec>)
 80024bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80024c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c8:	4b58      	ldr	r3, [pc, #352]	; (800262c <StraightLineMove+0x2ec>)
 80024ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80024ce:	4b57      	ldr	r3, [pc, #348]	; (800262c <StraightLineMove+0x2ec>)
 80024d0:	ed93 6a03 	vldr	s12, [r3, #12]
 80024d4:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <StraightLineMove+0x2d4>)
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ea:	ee17 2a90 	vmov	r2, s15
 80024ee:	4b4b      	ldr	r3, [pc, #300]	; (800261c <StraightLineMove+0x2dc>)
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	4b48      	ldr	r3, [pc, #288]	; (8002614 <StraightLineMove+0x2d4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a4d      	ldr	r2, [pc, #308]	; (800262c <StraightLineMove+0x2ec>)
 80024f8:	60d3      	str	r3, [r2, #12]
 80024fa:	4b4c      	ldr	r3, [pc, #304]	; (800262c <StraightLineMove+0x2ec>)
 80024fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8002500:	4b44      	ldr	r3, [pc, #272]	; (8002614 <StraightLineMove+0x2d4>)
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	4b48      	ldr	r3, [pc, #288]	; (800262c <StraightLineMove+0x2ec>)
 800250c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002510:	4b42      	ldr	r3, [pc, #264]	; (800261c <StraightLineMove+0x2dc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002518:	dc06      	bgt.n	8002528 <StraightLineMove+0x1e8>
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <StraightLineMove+0x2dc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a44      	ldr	r2, [pc, #272]	; (8002630 <StraightLineMove+0x2f0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bfb8      	it	lt
 8002524:	4613      	movlt	r3, r2
 8002526:	e001      	b.n	800252c <StraightLineMove+0x1ec>
 8002528:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800252c:	4a3b      	ldr	r2, [pc, #236]	; (800261c <StraightLineMove+0x2dc>)
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b36      	ldr	r3, [pc, #216]	; (800260c <StraightLineMove+0x2cc>)
 8002532:	f993 3000 	ldrsb.w	r3, [r3]
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b38      	ldr	r3, [pc, #224]	; (800261c <StraightLineMove+0x2dc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	fb12 f303 	smulbb	r3, r2, r3
 8002542:	b29b      	uxth	r3, r3
 8002544:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b36      	ldr	r3, [pc, #216]	; (8002624 <StraightLineMove+0x2e4>)
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	4b2f      	ldr	r3, [pc, #188]	; (800260c <StraightLineMove+0x2cc>)
 8002550:	f993 3000 	ldrsb.w	r3, [r3]
 8002554:	b29a      	uxth	r2, r3
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <StraightLineMove+0x2dc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	fb12 f303 	smulbb	r3, r2, r3
 8002560:	b29b      	uxth	r3, r3
 8002562:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002566:	3308      	adds	r3, #8
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <StraightLineMove+0x2e8>)
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	e086      	b.n	800267e <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_1)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b01      	cmp	r3, #1
 8002574:	f040 8083 	bne.w	800267e <StraightLineMove+0x33e>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <StraightLineMove+0x2f4>)
 800257a:	ed93 7a00 	vldr	s14, [r3]
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <StraightLineMove+0x2d4>)
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <StraightLineMove+0x2f4>)
 800258a:	edd3 6a01 	vldr	s13, [r3, #4]
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <StraightLineMove+0x2f4>)
 8002590:	edd3 7a04 	vldr	s15, [r3, #16]
 8002594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <StraightLineMove+0x2f4>)
 800259e:	edd3 6a02 	vldr	s13, [r3, #8]
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <StraightLineMove+0x2f4>)
 80025a4:	ed93 6a03 	vldr	s12, [r3, #12]
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <StraightLineMove+0x2d4>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80025b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025be:	ee17 2a90 	vmov	r2, s15
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <StraightLineMove+0x2dc>)
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <StraightLineMove+0x2d4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <StraightLineMove+0x2f4>)
 80025cc:	60d3      	str	r3, [r2, #12]
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <StraightLineMove+0x2f4>)
 80025d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <StraightLineMove+0x2d4>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <StraightLineMove+0x2f4>)
 80025e0:	edc3 7a04 	vstr	s15, [r3, #16]
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <StraightLineMove+0x2dc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80025ec:	dc24      	bgt.n	8002638 <StraightLineMove+0x2f8>
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <StraightLineMove+0x2dc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a0f      	ldr	r2, [pc, #60]	; (8002630 <StraightLineMove+0x2f0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	bfb8      	it	lt
 80025f8:	4613      	movlt	r3, r2
 80025fa:	e01f      	b.n	800263c <StraightLineMove+0x2fc>
 80025fc:	2000044c 	.word	0x2000044c
 8002600:	200001bc 	.word	0x200001bc
 8002604:	2000044e 	.word	0x2000044e
 8002608:	20000258 	.word	0x20000258
 800260c:	2000013c 	.word	0x2000013c
 8002610:	00000000 	.word	0x00000000
 8002614:	20000448 	.word	0x20000448
 8002618:	2000047c 	.word	0x2000047c
 800261c:	200004b8 	.word	0x200004b8
 8002620:	fffffda8 	.word	0xfffffda8
 8002624:	20000450 	.word	0x20000450
 8002628:	20000452 	.word	0x20000452
 800262c:	20000490 	.word	0x20000490
 8002630:	fffffd44 	.word	0xfffffd44
 8002634:	20000468 	.word	0x20000468
 8002638:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800263c:	4a17      	ldr	r2, [pc, #92]	; (800269c <StraightLineMove+0x35c>)
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <StraightLineMove+0x360>)
 8002642:	f993 3000 	ldrsb.w	r3, [r3]
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <StraightLineMove+0x35c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	fb12 f303 	smulbb	r3, r2, r3
 8002652:	b29b      	uxth	r3, r3
 8002654:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002658:	b29a      	uxth	r2, r3
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <StraightLineMove+0x364>)
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <StraightLineMove+0x360>)
 8002660:	f993 3000 	ldrsb.w	r3, [r3]
 8002664:	b29a      	uxth	r2, r3
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <StraightLineMove+0x35c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	fb12 f303 	smulbb	r3, r2, r3
 8002670:	b29b      	uxth	r3, r3
 8002672:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002676:	330c      	adds	r3, #12
 8002678:	b29a      	uxth	r2, r3
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <StraightLineMove+0x368>)
 800267c:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <StraightLineMove+0x364>)
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <StraightLineMove+0x36c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	635a      	str	r2, [r3, #52]	; 0x34
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <StraightLineMove+0x368>)
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <StraightLineMove+0x36c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200004b8 	.word	0x200004b8
 80026a0:	2000013c 	.word	0x2000013c
 80026a4:	20000450 	.word	0x20000450
 80026a8:	20000452 	.word	0x20000452
 80026ac:	20000330 	.word	0x20000330

080026b0 <RobotMoveDist>:

void RobotMoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
 80026bc:	4613      	mov	r3, r2
 80026be:	70bb      	strb	r3, [r7, #2]
  {
    angleNow = 0;
 80026c0:	4ba1      	ldr	r3, [pc, #644]	; (8002948 <RobotMoveDist+0x298>)
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 80026c8:	4ba0      	ldr	r3, [pc, #640]	; (800294c <RobotMoveDist+0x29c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 80026ce:	48a0      	ldr	r0, [pc, #640]	; (8002950 <RobotMoveDist+0x2a0>)
 80026d0:	f7ff fde3 	bl	800229a <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 80026d4:	489f      	ldr	r0, [pc, #636]	; (8002954 <RobotMoveDist+0x2a4>)
 80026d6:	f7ff fde0 	bl	800229a <PIDConfigReset>
    PIDConfigReset(&pidFast);
 80026da:	489f      	ldr	r0, [pc, #636]	; (8002958 <RobotMoveDist+0x2a8>)
 80026dc:	f7ff fddd 	bl	800229a <PIDConfigReset>
    curDistTick = 0;
 80026e0:	4b9e      	ldr	r3, [pc, #632]	; (800295c <RobotMoveDist+0x2ac>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	801a      	strh	r2, [r3, #0]

    __GET_TARGETTICK(*targetDist, targetDistTick);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fd ff24 	bl	8000538 <__aeabi_f2d>
 80026f0:	a38f      	add	r3, pc, #572	; (adr r3, 8002930 <RobotMoveDist+0x280>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	f7fd ff77 	bl	80005e8 <__aeabi_dmul>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	a38d      	add	r3, pc, #564	; (adr r3, 8002938 <RobotMoveDist+0x288>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fd fdb6 	bl	8000278 <__aeabi_dsub>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	4b91      	ldr	r3, [pc, #580]	; (8002960 <RobotMoveDist+0x2b0>)
 800271a:	f7fe f88f 	bl	800083c <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	4b8e      	ldr	r3, [pc, #568]	; (8002964 <RobotMoveDist+0x2b4>)
 800272c:	f7fd ff5c 	bl	80005e8 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	4b8a      	ldr	r3, [pc, #552]	; (8002968 <RobotMoveDist+0x2b8>)
 800273e:	f7fd fd9b 	bl	8000278 <__aeabi_dsub>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe f9e7 	bl	8000b1c <__aeabi_d2uiz>
 800274e:	4603      	mov	r3, r0
 8002750:	b29a      	uxth	r2, r3
 8002752:	4b86      	ldr	r3, [pc, #536]	; (800296c <RobotMoveDist+0x2bc>)
 8002754:	801a      	strh	r2, [r3, #0]

    last_curTask_tick = HAL_GetTick();
 8002756:	f002 fecb 	bl	80054f0 <HAL_GetTick>
 800275a:	4603      	mov	r3, r0
 800275c:	4a84      	ldr	r2, [pc, #528]	; (8002970 <RobotMoveDist+0x2c0>)
 800275e:	6013      	str	r3, [r2, #0]
    __SET_MOTOR_DIRECTION(dir);
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	2104      	movs	r1, #4
 8002770:	4880      	ldr	r0, [pc, #512]	; (8002974 <RobotMoveDist+0x2c4>)
 8002772:	f003 f9fd 	bl	8005b70 <HAL_GPIO_WritePin>
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	2108      	movs	r1, #8
 8002786:	487b      	ldr	r0, [pc, #492]	; (8002974 <RobotMoveDist+0x2c4>)
 8002788:	f003 f9f2 	bl	8005b70 <HAL_GPIO_WritePin>
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	2120      	movs	r1, #32
 800279c:	4875      	ldr	r0, [pc, #468]	; (8002974 <RobotMoveDist+0x2c4>)
 800279e:	f003 f9e7 	bl	8005b70 <HAL_GPIO_WritePin>
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf14      	ite	ne
 80027a8:	2301      	movne	r3, #1
 80027aa:	2300      	moveq	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	2110      	movs	r1, #16
 80027b2:	4870      	ldr	r0, [pc, #448]	; (8002974 <RobotMoveDist+0x2c4>)
 80027b4:	f003 f9dc 	bl	8005b70 <HAL_GPIO_WritePin>
    __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 80027b8:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <RobotMoveDist+0x2c8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b6e      	ldr	r3, [pc, #440]	; (800297c <RobotMoveDist+0x2cc>)
 80027c2:	801a      	strh	r2, [r3, #0]
    do
    {
      __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 80027c4:	4b6c      	ldr	r3, [pc, #432]	; (8002978 <RobotMoveDist+0x2c8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <RobotMoveDist+0x2c8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d117      	bne.n	800280a <RobotMoveDist+0x15a>
 80027da:	4b68      	ldr	r3, [pc, #416]	; (800297c <RobotMoveDist+0x2cc>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d806      	bhi.n	80027f4 <RobotMoveDist+0x144>
 80027e6:	4b65      	ldr	r3, [pc, #404]	; (800297c <RobotMoveDist+0x2cc>)
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	e007      	b.n	8002804 <RobotMoveDist+0x154>
 80027f4:	4b61      	ldr	r3, [pc, #388]	; (800297c <RobotMoveDist+0x2cc>)
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29b      	uxth	r3, r3
 8002804:	4a5e      	ldr	r2, [pc, #376]	; (8002980 <RobotMoveDist+0x2d0>)
 8002806:	8013      	strh	r3, [r2, #0]
 8002808:	e016      	b.n	8002838 <RobotMoveDist+0x188>
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <RobotMoveDist+0x2cc>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4293      	cmp	r3, r2
 8002814:	d306      	bcc.n	8002824 <RobotMoveDist+0x174>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b58      	ldr	r3, [pc, #352]	; (800297c <RobotMoveDist+0x2cc>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	b29b      	uxth	r3, r3
 8002822:	e007      	b.n	8002834 <RobotMoveDist+0x184>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	b29a      	uxth	r2, r3
 8002828:	4b54      	ldr	r3, [pc, #336]	; (800297c <RobotMoveDist+0x2cc>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29b      	uxth	r3, r3
 8002834:	4a52      	ldr	r2, [pc, #328]	; (8002980 <RobotMoveDist+0x2d0>)
 8002836:	8013      	strh	r3, [r2, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	b29a      	uxth	r2, r3
 800283c:	4b4f      	ldr	r3, [pc, #316]	; (800297c <RobotMoveDist+0x2cc>)
 800283e:	801a      	strh	r2, [r3, #0]
      curDistTick += dist_dL;
 8002840:	4b46      	ldr	r3, [pc, #280]	; (800295c <RobotMoveDist+0x2ac>)
 8002842:	881a      	ldrh	r2, [r3, #0]
 8002844:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <RobotMoveDist+0x2d0>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	4413      	add	r3, r2
 800284a:	b29a      	uxth	r2, r3
 800284c:	4b43      	ldr	r3, [pc, #268]	; (800295c <RobotMoveDist+0x2ac>)
 800284e:	801a      	strh	r2, [r3, #0]

      osDelay(10);
 8002850:	200a      	movs	r0, #10
 8002852:	f007 fe0b 	bl	800a46c <osDelay>

      if (curDistTick >= targetDistTick)
 8002856:	4b41      	ldr	r3, [pc, #260]	; (800295c <RobotMoveDist+0x2ac>)
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	4b44      	ldr	r3, [pc, #272]	; (800296c <RobotMoveDist+0x2bc>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	f080 80a5 	bcs.w	80029ae <RobotMoveDist+0x2fe>
        break;

      if (HAL_GetTick() - last_curTask_tick >= 10)
 8002864:	f002 fe44 	bl	80054f0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	4b41      	ldr	r3, [pc, #260]	; (8002970 <RobotMoveDist+0x2c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b09      	cmp	r3, #9
 8002872:	d9a7      	bls.n	80027c4 <RobotMoveDist+0x114>
      {
        if (speedMode == SPEED_MODE_T)
 8002874:	78bb      	ldrb	r3, [r7, #2]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <RobotMoveDist+0x1d2>
        {
          StraightLineMove(SPEED_MODE_T);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff fd60 	bl	8002340 <StraightLineMove>
 8002880:	e08f      	b.n	80029a2 <RobotMoveDist+0x2f2>
        }
        else
        {
          speedScale = abs(curDistTick - targetDistTick) / 1100; // start to slow down at last 1100 ticks (?cm)
 8002882:	4b36      	ldr	r3, [pc, #216]	; (800295c <RobotMoveDist+0x2ac>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	4b38      	ldr	r3, [pc, #224]	; (800296c <RobotMoveDist+0x2bc>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	bfb8      	it	lt
 8002892:	425b      	neglt	r3, r3
 8002894:	4a3b      	ldr	r2, [pc, #236]	; (8002984 <RobotMoveDist+0x2d4>)
 8002896:	fb82 1203 	smull	r1, r2, r2, r3
 800289a:	1252      	asrs	r2, r2, #9
 800289c:	17db      	asrs	r3, r3, #31
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a8:	4b37      	ldr	r3, [pc, #220]	; (8002988 <RobotMoveDist+0x2d8>)
 80028aa:	edc3 7a00 	vstr	s15, [r3]
          if (speedMode == SPEED_MODE_1)
 80028ae:	78bb      	ldrb	r3, [r7, #2]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d11e      	bne.n	80028f2 <RobotMoveDist+0x242>
            speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 80028b4:	4b34      	ldr	r3, [pc, #208]	; (8002988 <RobotMoveDist+0x2d8>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	dd02      	ble.n	80028ce <RobotMoveDist+0x21e>
 80028c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028cc:	e00e      	b.n	80028ec <RobotMoveDist+0x23c>
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <RobotMoveDist+0x2d8>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80028d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	d502      	bpl.n	80028e8 <RobotMoveDist+0x238>
 80028e2:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80028e6:	e001      	b.n	80028ec <RobotMoveDist+0x23c>
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <RobotMoveDist+0x2d8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a26      	ldr	r2, [pc, #152]	; (8002988 <RobotMoveDist+0x2d8>)
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e052      	b.n	8002998 <RobotMoveDist+0x2e8>
          else if (speedMode == SPEED_MODE_2)
 80028f2:	78bb      	ldrb	r3, [r7, #2]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d14f      	bne.n	8002998 <RobotMoveDist+0x2e8>
            speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <RobotMoveDist+0x2d8>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	dd02      	ble.n	8002912 <RobotMoveDist+0x262>
 800290c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002910:	e040      	b.n	8002994 <RobotMoveDist+0x2e4>
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <RobotMoveDist+0x2d8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe0e 	bl	8000538 <__aeabi_f2d>
 800291c:	a308      	add	r3, pc, #32	; (adr r3, 8002940 <RobotMoveDist+0x290>)
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f7fe f8d3 	bl	8000acc <__aeabi_dcmplt>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d031      	beq.n	8002990 <RobotMoveDist+0x2e0>
 800292c:	4b17      	ldr	r3, [pc, #92]	; (800298c <RobotMoveDist+0x2dc>)
 800292e:	e031      	b.n	8002994 <RobotMoveDist+0x2e4>
 8002930:	fc66b22a 	.word	0xfc66b22a
 8002934:	3ff266ac 	.word	0x3ff266ac
 8002938:	bb2526f8 	.word	0xbb2526f8
 800293c:	3feee3d4 	.word	0x3feee3d4
 8002940:	9999999a 	.word	0x9999999a
 8002944:	3fd99999 	.word	0x3fd99999
 8002948:	20000448 	.word	0x20000448
 800294c:	2000044e 	.word	0x2000044e
 8002950:	2000047c 	.word	0x2000047c
 8002954:	20000468 	.word	0x20000468
 8002958:	20000490 	.word	0x20000490
 800295c:	20000460 	.word	0x20000460
 8002960:	40340000 	.word	0x40340000
 8002964:	4094a000 	.word	0x4094a000
 8002968:	40240000 	.word	0x40240000
 800296c:	20000462 	.word	0x20000462
 8002970:	20000454 	.word	0x20000454
 8002974:	40020000 	.word	0x40020000
 8002978:	20000258 	.word	0x20000258
 800297c:	20000466 	.word	0x20000466
 8002980:	20000464 	.word	0x20000464
 8002984:	77280773 	.word	0x77280773
 8002988:	20000138 	.word	0x20000138
 800298c:	3ecccccd 	.word	0x3ecccccd
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <RobotMoveDist+0x318>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <RobotMoveDist+0x318>)
 8002996:	6013      	str	r3, [r2, #0]
          StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002998:	78bb      	ldrb	r3, [r7, #2]
 800299a:	490b      	ldr	r1, [pc, #44]	; (80029c8 <RobotMoveDist+0x318>)
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f819 	bl	80029d4 <StraightLineMoveSpeedScale>
        }

        last_curTask_tick = HAL_GetTick();
 80029a2:	f002 fda5 	bl	80054f0 <HAL_GetTick>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4a08      	ldr	r2, [pc, #32]	; (80029cc <RobotMoveDist+0x31c>)
 80029aa:	6013      	str	r3, [r2, #0]
      __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 80029ac:	e70a      	b.n	80027c4 <RobotMoveDist+0x114>
        break;
 80029ae:	bf00      	nop
      }
    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <RobotMoveDist+0x320>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <RobotMoveDist+0x320>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2200      	movs	r2, #0
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000138 	.word	0x20000138
 80029cc:	20000454 	.word	0x20000454
 80029d0:	20000330 	.word	0x20000330

080029d4 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float *speedScale)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af04      	add	r7, sp, #16
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 80029e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	2302      	movs	r3, #2
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	4b9b      	ldr	r3, [pc, #620]	; (8002c58 <StraightLineMoveSpeedScale+0x284>)
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2301      	movs	r3, #1
 80029f0:	2237      	movs	r2, #55	; 0x37
 80029f2:	21d0      	movs	r1, #208	; 0xd0
 80029f4:	4899      	ldr	r0, [pc, #612]	; (8002c5c <StraightLineMoveSpeedScale+0x288>)
 80029f6:	f003 fb13 	bl	8006020 <HAL_I2C_Mem_Read>
 80029fa:	4b97      	ldr	r3, [pc, #604]	; (8002c58 <StraightLineMoveSpeedScale+0x284>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	b21a      	sxth	r2, r3
 8002a02:	4b95      	ldr	r3, [pc, #596]	; (8002c58 <StraightLineMoveSpeedScale+0x284>)
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	4b94      	ldr	r3, [pc, #592]	; (8002c60 <StraightLineMoveSpeedScale+0x28c>)
 8002a0e:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 8002a10:	4b94      	ldr	r3, [pc, #592]	; (8002c64 <StraightLineMoveSpeedScale+0x290>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d101      	bne.n	8002a22 <StraightLineMoveSpeedScale+0x4e>
 8002a1e:	2201      	movs	r2, #1
 8002a20:	e001      	b.n	8002a26 <StraightLineMoveSpeedScale+0x52>
 8002a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a26:	4b90      	ldr	r3, [pc, #576]	; (8002c68 <StraightLineMoveSpeedScale+0x294>)
 8002a28:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002a2a:	4b8d      	ldr	r3, [pc, #564]	; (8002c60 <StraightLineMoveSpeedScale+0x28c>)
 8002a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a30:	f113 0f04 	cmn.w	r3, #4
 8002a34:	db04      	blt.n	8002a40 <StraightLineMoveSpeedScale+0x6c>
 8002a36:	4b8a      	ldr	r3, [pc, #552]	; (8002c60 <StraightLineMoveSpeedScale+0x28c>)
 8002a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3c:	2b0b      	cmp	r3, #11
 8002a3e:	dd07      	ble.n	8002a50 <StraightLineMoveSpeedScale+0x7c>
 8002a40:	4b87      	ldr	r3, [pc, #540]	; (8002c60 <StraightLineMoveSpeedScale+0x28c>)
 8002a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	e001      	b.n	8002a54 <StraightLineMoveSpeedScale+0x80>
 8002a50:	eddf 7a86 	vldr	s15, [pc, #536]	; 8002c6c <StraightLineMoveSpeedScale+0x298>
 8002a54:	4b86      	ldr	r3, [pc, #536]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002a56:	ed93 7a00 	vldr	s14, [r3]
 8002a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a5e:	4b84      	ldr	r3, [pc, #528]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002a60:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d165      	bne.n	8002b36 <StraightLineMoveSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002a6a:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <StraightLineMoveSpeedScale+0x2a0>)
 8002a6c:	ed93 7a00 	vldr	s14, [r3]
 8002a70:	4b7f      	ldr	r3, [pc, #508]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a7a:	4b7e      	ldr	r3, [pc, #504]	; (8002c74 <StraightLineMoveSpeedScale+0x2a0>)
 8002a7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a80:	4b7c      	ldr	r3, [pc, #496]	; (8002c74 <StraightLineMoveSpeedScale+0x2a0>)
 8002a82:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8e:	4b79      	ldr	r3, [pc, #484]	; (8002c74 <StraightLineMoveSpeedScale+0x2a0>)
 8002a90:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a94:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <StraightLineMoveSpeedScale+0x2a0>)
 8002a96:	ed93 6a03 	vldr	s12, [r3, #12]
 8002a9a:	4b75      	ldr	r3, [pc, #468]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab0:	ee17 2a90 	vmov	r2, s15
 8002ab4:	4b70      	ldr	r3, [pc, #448]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6d      	ldr	r2, [pc, #436]	; (8002c74 <StraightLineMoveSpeedScale+0x2a0>)
 8002abe:	60d3      	str	r3, [r2, #12]
 8002ac0:	4b6c      	ldr	r3, [pc, #432]	; (8002c74 <StraightLineMoveSpeedScale+0x2a0>)
 8002ac2:	ed93 7a04 	vldr	s14, [r3, #16]
 8002ac6:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <StraightLineMoveSpeedScale+0x2a0>)
 8002ad2:	edc3 7a04 	vstr	s15, [r3, #16]
 8002ad6:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002ade:	dc06      	bgt.n	8002aee <StraightLineMoveSpeedScale+0x11a>
 8002ae0:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a65      	ldr	r2, [pc, #404]	; (8002c7c <StraightLineMoveSpeedScale+0x2a8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	bfb8      	it	lt
 8002aea:	4613      	movlt	r3, r2
 8002aec:	e001      	b.n	8002af2 <StraightLineMoveSpeedScale+0x11e>
 8002aee:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002af2:	4a61      	ldr	r2, [pc, #388]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <StraightLineMoveSpeedScale+0x294>)
 8002af8:	f993 3000 	ldrsb.w	r3, [r3]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	fb12 f303 	smulbb	r3, r2, r3
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <StraightLineMoveSpeedScale+0x2ac>)
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	4b54      	ldr	r3, [pc, #336]	; (8002c68 <StraightLineMoveSpeedScale+0x294>)
 8002b16:	f993 3000 	ldrsb.w	r3, [r3]
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	fb12 f303 	smulbb	r3, r2, r3
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b54      	ldr	r3, [pc, #336]	; (8002c84 <StraightLineMoveSpeedScale+0x2b0>)
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	e067      	b.n	8002c06 <StraightLineMoveSpeedScale+0x232>
  else if (speedMode == SPEED_MODE_2)
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d164      	bne.n	8002c06 <StraightLineMoveSpeedScale+0x232>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8002b3c:	4b52      	ldr	r3, [pc, #328]	; (8002c88 <StraightLineMoveSpeedScale+0x2b4>)
 8002b3e:	ed93 7a00 	vldr	s14, [r3]
 8002b42:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4c:	4b4e      	ldr	r3, [pc, #312]	; (8002c88 <StraightLineMoveSpeedScale+0x2b4>)
 8002b4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b52:	4b4d      	ldr	r3, [pc, #308]	; (8002c88 <StraightLineMoveSpeedScale+0x2b4>)
 8002b54:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b60:	4b49      	ldr	r3, [pc, #292]	; (8002c88 <StraightLineMoveSpeedScale+0x2b4>)
 8002b62:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b66:	4b48      	ldr	r3, [pc, #288]	; (8002c88 <StraightLineMoveSpeedScale+0x2b4>)
 8002b68:	ed93 6a03 	vldr	s12, [r3, #12]
 8002b6c:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b82:	ee17 2a90 	vmov	r2, s15
 8002b86:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3e      	ldr	r2, [pc, #248]	; (8002c88 <StraightLineMoveSpeedScale+0x2b4>)
 8002b90:	60d3      	str	r3, [r2, #12]
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <StraightLineMoveSpeedScale+0x2b4>)
 8002b94:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b98:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <StraightLineMoveSpeedScale+0x29c>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <StraightLineMoveSpeedScale+0x2b4>)
 8002ba4:	edc3 7a04 	vstr	s15, [r3, #16]
 8002ba8:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002bb0:	dc06      	bgt.n	8002bc0 <StraightLineMoveSpeedScale+0x1ec>
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a31      	ldr	r2, [pc, #196]	; (8002c7c <StraightLineMoveSpeedScale+0x2a8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	bfb8      	it	lt
 8002bbc:	4613      	movlt	r3, r2
 8002bbe:	e001      	b.n	8002bc4 <StraightLineMoveSpeedScale+0x1f0>
 8002bc0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002bc4:	4a2c      	ldr	r2, [pc, #176]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <StraightLineMoveSpeedScale+0x294>)
 8002bca:	f993 3000 	ldrsb.w	r3, [r3]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	fb12 f303 	smulbb	r3, r2, r3
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <StraightLineMoveSpeedScale+0x2ac>)
 8002be4:	801a      	strh	r2, [r3, #0]
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <StraightLineMoveSpeedScale+0x294>)
 8002be8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <StraightLineMoveSpeedScale+0x2a4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	fb12 f303 	smulbb	r3, r2, r3
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002bfe:	3308      	adds	r3, #8
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <StraightLineMoveSpeedScale+0x2b0>)
 8002c04:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <StraightLineMoveSpeedScale+0x2ac>)
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	edd3 7a00 	vldr	s15, [r3]
 8002c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <StraightLineMoveSpeedScale+0x2b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c24:	ee17 2a90 	vmov	r2, s15
 8002c28:	635a      	str	r2, [r3, #52]	; 0x34
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <StraightLineMoveSpeedScale+0x2b0>)
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <StraightLineMoveSpeedScale+0x2b8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c48:	ee17 2a90 	vmov	r2, s15
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000044c 	.word	0x2000044c
 8002c5c:	200001bc 	.word	0x200001bc
 8002c60:	2000044e 	.word	0x2000044e
 8002c64:	20000258 	.word	0x20000258
 8002c68:	2000013c 	.word	0x2000013c
 8002c6c:	00000000 	.word	0x00000000
 8002c70:	20000448 	.word	0x20000448
 8002c74:	20000468 	.word	0x20000468
 8002c78:	200004b8 	.word	0x200004b8
 8002c7c:	fffffd44 	.word	0xfffffd44
 8002c80:	20000450 	.word	0x20000450
 8002c84:	20000452 	.word	0x20000452
 8002c88:	20000490 	.word	0x20000490
 8002c8c:	20000330 	.word	0x20000330

08002c90 <RobotTurn>:

void RobotTurn(float *targetAngle)
{
 8002c90:	b5b0      	push	{r4, r5, r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af04      	add	r7, sp, #16
 8002c96:	6078      	str	r0, [r7, #4]
  angleNow = 0;
 8002c98:	4b4b      	ldr	r3, [pc, #300]	; (8002dc8 <RobotTurn+0x138>)
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <RobotTurn+0x13c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8002ca6:	f002 fc23 	bl	80054f0 <HAL_GetTick>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4a48      	ldr	r2, [pc, #288]	; (8002dd0 <RobotTurn+0x140>)
 8002cae:	6013      	str	r3, [r2, #0]
  do
  {
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002cb0:	f002 fc1e 	bl	80054f0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <RobotTurn+0x140>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d9f7      	bls.n	8002cb0 <RobotTurn+0x20>
    { // sample gyro every 10ms
      __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8002cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc4:	9302      	str	r3, [sp, #8]
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <RobotTurn+0x144>)
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	2237      	movs	r2, #55	; 0x37
 8002cd2:	21d0      	movs	r1, #208	; 0xd0
 8002cd4:	4840      	ldr	r0, [pc, #256]	; (8002dd8 <RobotTurn+0x148>)
 8002cd6:	f003 f9a3 	bl	8006020 <HAL_I2C_Mem_Read>
 8002cda:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <RobotTurn+0x144>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	b21a      	sxth	r2, r3
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <RobotTurn+0x144>)
 8002ce4:	785b      	ldrb	r3, [r3, #1]
 8002ce6:	b21b      	sxth	r3, r3
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <RobotTurn+0x13c>)
 8002cee:	801a      	strh	r2, [r3, #0]
      angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002cf0:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <RobotTurn+0x138>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc1f 	bl	8000538 <__aeabi_f2d>
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	460d      	mov	r5, r1
 8002cfe:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <RobotTurn+0x13c>)
 8002d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fc05 	bl	8000514 <__aeabi_i2d>
 8002d0a:	a32b      	add	r3, pc, #172	; (adr r3, 8002db8 <RobotTurn+0x128>)
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f7fd fd94 	bl	800083c <__aeabi_ddiv>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	a328      	add	r3, pc, #160	; (adr r3, 8002dc0 <RobotTurn+0x130>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	f7fd fc61 	bl	80005e8 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f7fd faa5 	bl	800027c <__adddf3>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f7fd ff0f 	bl	8000b5c <__aeabi_d2f>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <RobotTurn+0x138>)
 8002d42:	6013      	str	r3, [r2, #0]
      if (abs(angleNow - *targetAngle) < 0.01)
 8002d44:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <RobotTurn+0x138>)
 8002d46:	ed93 7a00 	vldr	s14, [r3]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d58:	ee17 3a90 	vmov	r3, s15
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0d      	blt.n	8002d7c <RobotTurn+0xec>
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <RobotTurn+0x138>)
 8002d62:	ed93 7a00 	vldr	s14, [r3]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d74:	ee17 3a90 	vmov	r3, s15
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	dd05      	ble.n	8002d88 <RobotTurn+0xf8>
        break;
      last_curTask_tick = HAL_GetTick();
 8002d7c:	f002 fbb8 	bl	80054f0 <HAL_GetTick>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <RobotTurn+0x140>)
 8002d84:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002d86:	e793      	b.n	8002cb0 <RobotTurn+0x20>
        break;
 8002d88:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <RobotTurn+0x14c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <RobotTurn+0x14c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
  __RESET_SERVO_TURN(&htim1);
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <RobotTurn+0x150>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2291      	movs	r2, #145	; 0x91
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
 8002da2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002da6:	f002 fbaf 	bl	8005508 <HAL_Delay>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	f3af 8000 	nop.w
 8002db8:	66666666 	.word	0x66666666
 8002dbc:	40306666 	.word	0x40306666
 8002dc0:	47ae147b 	.word	0x47ae147b
 8002dc4:	3f847ae1 	.word	0x3f847ae1
 8002dc8:	20000448 	.word	0x20000448
 8002dcc:	2000044e 	.word	0x2000044e
 8002dd0:	20000454 	.word	0x20000454
 8002dd4:	2000044c 	.word	0x2000044c
 8002dd8:	200001bc 	.word	0x200001bc
 8002ddc:	20000330 	.word	0x20000330
 8002de0:	20000210 	.word	0x20000210
 8002de4:	00000000 	.word	0x00000000

08002de8 <RobotMoveDistObstacle>:

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float *targetDist, const uint8_t speedMode)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  angleNow = 0;
 8002df4:	4b9c      	ldr	r3, [pc, #624]	; (8003068 <RobotMoveDistObstacle+0x280>)
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8002dfc:	4b9b      	ldr	r3, [pc, #620]	; (800306c <RobotMoveDistObstacle+0x284>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 8002e02:	489b      	ldr	r0, [pc, #620]	; (8003070 <RobotMoveDistObstacle+0x288>)
 8002e04:	f7ff fa49 	bl	800229a <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8002e08:	489a      	ldr	r0, [pc, #616]	; (8003074 <RobotMoveDistObstacle+0x28c>)
 8002e0a:	f7ff fa46 	bl	800229a <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8002e0e:	489a      	ldr	r0, [pc, #616]	; (8003078 <RobotMoveDistObstacle+0x290>)
 8002e10:	f7ff fa43 	bl	800229a <PIDConfigReset>
  obsDist_US = 1000;
 8002e14:	4b99      	ldr	r3, [pc, #612]	; (800307c <RobotMoveDistObstacle+0x294>)
 8002e16:	4a9a      	ldr	r2, [pc, #616]	; (8003080 <RobotMoveDistObstacle+0x298>)
 8002e18:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002e1a:	2104      	movs	r1, #4
 8002e1c:	4899      	ldr	r0, [pc, #612]	; (8003084 <RobotMoveDistObstacle+0x29c>)
 8002e1e:	f004 fdd7 	bl	80079d0 <HAL_TIM_IC_Start_IT>
  last_curTask_tick = HAL_GetTick();
 8002e22:	f002 fb65 	bl	80054f0 <HAL_GetTick>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a97      	ldr	r2, [pc, #604]	; (8003088 <RobotMoveDistObstacle+0x2a0>)
 8002e2a:	6013      	str	r3, [r2, #0]
    // HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
    // __delay_us(&htim6, 10);                                            // wait for 10us
    // HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
    // __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);

    HCSR04_Read();
 8002e2c:	f7ff fa48 	bl	80022c0 <HCSR04_Read>

    osDelay(10); // give timer interrupt chance to update obsDist_US value
 8002e30:	200a      	movs	r0, #10
 8002e32:	f007 fb1b 	bl	800a46c <osDelay>
    if (abs(*targetDist - obsDist_US) < 0.1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	ed93 7a00 	vldr	s14, [r3]
 8002e3c:	4b8f      	ldr	r3, [pc, #572]	; (800307c <RobotMoveDistObstacle+0x294>)
 8002e3e:	edd3 7a00 	vldr	s15, [r3]
 8002e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e4a:	ee17 3a90 	vmov	r3, s15
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0e      	blt.n	8002e70 <RobotMoveDistObstacle+0x88>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	ed93 7a00 	vldr	s14, [r3]
 8002e58:	4b88      	ldr	r3, [pc, #544]	; (800307c <RobotMoveDistObstacle+0x294>)
 8002e5a:	edd3 7a00 	vldr	s15, [r3]
 8002e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e66:	ee17 3a90 	vmov	r3, s15
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f340 80e6 	ble.w	800303c <RobotMoveDistObstacle+0x254>
      break;
    __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	ed93 7a00 	vldr	s14, [r3]
 8002e76:	4b81      	ldr	r3, [pc, #516]	; (800307c <RobotMoveDistObstacle+0x294>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	bf94      	ite	ls
 8002e86:	2301      	movls	r3, #1
 8002e88:	2300      	movhi	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	2104      	movs	r1, #4
 8002e98:	487c      	ldr	r0, [pc, #496]	; (800308c <RobotMoveDistObstacle+0x2a4>)
 8002e9a:	f002 fe69 	bl	8005b70 <HAL_GPIO_WritePin>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	ed93 7a00 	vldr	s14, [r3]
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <RobotMoveDistObstacle+0x294>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	bf94      	ite	ls
 8002eb4:	2301      	movls	r3, #1
 8002eb6:	2300      	movhi	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2108      	movs	r1, #8
 8002ebe:	4873      	ldr	r0, [pc, #460]	; (800308c <RobotMoveDistObstacle+0x2a4>)
 8002ec0:	f002 fe56 	bl	8005b70 <HAL_GPIO_WritePin>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	ed93 7a00 	vldr	s14, [r3]
 8002eca:	4b6c      	ldr	r3, [pc, #432]	; (800307c <RobotMoveDistObstacle+0x294>)
 8002ecc:	edd3 7a00 	vldr	s15, [r3]
 8002ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	bf94      	ite	ls
 8002eda:	2301      	movls	r3, #1
 8002edc:	2300      	movhi	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f083 0301 	eor.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2120      	movs	r1, #32
 8002eec:	4867      	ldr	r0, [pc, #412]	; (800308c <RobotMoveDistObstacle+0x2a4>)
 8002eee:	f002 fe3f 	bl	8005b70 <HAL_GPIO_WritePin>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	ed93 7a00 	vldr	s14, [r3]
 8002ef8:	4b60      	ldr	r3, [pc, #384]	; (800307c <RobotMoveDistObstacle+0x294>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2110      	movs	r1, #16
 8002f12:	485e      	ldr	r0, [pc, #376]	; (800308c <RobotMoveDistObstacle+0x2a4>)
 8002f14:	f002 fe2c 	bl	8005b70 <HAL_GPIO_WritePin>
    if (HAL_GetTick() - last_curTask_tick >= 20)
 8002f18:	f002 faea 	bl	80054f0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b5a      	ldr	r3, [pc, #360]	; (8003088 <RobotMoveDistObstacle+0x2a0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b13      	cmp	r3, #19
 8002f26:	d981      	bls.n	8002e2c <RobotMoveDistObstacle+0x44>
    {
      //		  speedScale = 1;
      if (speedMode == SPEED_MODE_1)
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d13f      	bne.n	8002fae <RobotMoveDistObstacle+0x1c6>
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8002f2e:	4b53      	ldr	r3, [pc, #332]	; (800307c <RobotMoveDistObstacle+0x294>)
 8002f30:	ed93 7a00 	vldr	s14, [r3]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	edd3 7a00 	vldr	s15, [r3]
 8002f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f42:	ee17 3a90 	vmov	r3, s15
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bfb8      	it	lt
 8002f4a:	425b      	neglt	r3, r3
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <RobotMoveDistObstacle+0x2a8>)
 8002f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8002f52:	441a      	add	r2, r3
 8002f54:	10d2      	asrs	r2, r2, #3
 8002f56:	17db      	asrs	r3, r3, #31
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f62:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8002f64:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002f68:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7a:	dd02      	ble.n	8002f82 <RobotMoveDistObstacle+0x19a>
 8002f7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002f80:	e00e      	b.n	8002fa0 <RobotMoveDistObstacle+0x1b8>
 8002f82:	4b44      	ldr	r3, [pc, #272]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8002f84:	edd3 7a00 	vldr	s15, [r3]
 8002f88:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f94:	d502      	bpl.n	8002f9c <RobotMoveDistObstacle+0x1b4>
 8002f96:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002f9a:	e001      	b.n	8002fa0 <RobotMoveDistObstacle+0x1b8>
 8002f9c:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a3c      	ldr	r2, [pc, #240]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8002fa2:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 8002fa4:	493b      	ldr	r1, [pc, #236]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7ff fd14 	bl	80029d4 <StraightLineMoveSpeedScale>
 8002fac:	e040      	b.n	8003030 <RobotMoveDistObstacle+0x248>
      }
      else
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8002fae:	4b33      	ldr	r3, [pc, #204]	; (800307c <RobotMoveDistObstacle+0x294>)
 8002fb0:	ed93 7a00 	vldr	s14, [r3]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc2:	ee17 3a90 	vmov	r3, s15
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bfb8      	it	lt
 8002fca:	425b      	neglt	r3, r3
 8002fcc:	4a30      	ldr	r2, [pc, #192]	; (8003090 <RobotMoveDistObstacle+0x2a8>)
 8002fce:	fb82 1203 	smull	r1, r2, r2, r3
 8002fd2:	441a      	add	r2, r3
 8002fd4:	10d2      	asrs	r2, r2, #3
 8002fd6:	17db      	asrs	r3, r3, #31
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8002fe4:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	dd02      	ble.n	8003002 <RobotMoveDistObstacle+0x21a>
 8002ffc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003000:	e010      	b.n	8003024 <RobotMoveDistObstacle+0x23c>
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa96 	bl	8000538 <__aeabi_f2d>
 800300c:	a314      	add	r3, pc, #80	; (adr r3, 8003060 <RobotMoveDistObstacle+0x278>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd fd5b 	bl	8000acc <__aeabi_dcmplt>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <RobotMoveDistObstacle+0x238>
 800301c:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <RobotMoveDistObstacle+0x2b0>)
 800301e:	e001      	b.n	8003024 <RobotMoveDistObstacle+0x23c>
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1b      	ldr	r2, [pc, #108]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 8003026:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 8003028:	491a      	ldr	r1, [pc, #104]	; (8003094 <RobotMoveDistObstacle+0x2ac>)
 800302a:	2002      	movs	r0, #2
 800302c:	f7ff fcd2 	bl	80029d4 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8003030:	f002 fa5e 	bl	80054f0 <HAL_GetTick>
 8003034:	4603      	mov	r3, r0
 8003036:	4a14      	ldr	r2, [pc, #80]	; (8003088 <RobotMoveDistObstacle+0x2a0>)
 8003038:	6013      	str	r3, [r2, #0]
    HCSR04_Read();
 800303a:	e6f7      	b.n	8002e2c <RobotMoveDistObstacle+0x44>
      break;
 800303c:	bf00      	nop
    }

  } while (1);

  __SET_MOTOR_DUTY(&htim8, 0, 0);
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <RobotMoveDistObstacle+0x2b4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <RobotMoveDistObstacle+0x2b4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 800304e:	2104      	movs	r1, #4
 8003050:	480c      	ldr	r0, [pc, #48]	; (8003084 <RobotMoveDistObstacle+0x29c>)
 8003052:	f004 fde5 	bl	8007c20 <HAL_TIM_IC_Stop_IT>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	9999999a 	.word	0x9999999a
 8003064:	3fd99999 	.word	0x3fd99999
 8003068:	20000448 	.word	0x20000448
 800306c:	2000044e 	.word	0x2000044e
 8003070:	2000047c 	.word	0x2000047c
 8003074:	20000468 	.word	0x20000468
 8003078:	20000490 	.word	0x20000490
 800307c:	200004a4 	.word	0x200004a4
 8003080:	447a0000 	.word	0x447a0000
 8003084:	200002a0 	.word	0x200002a0
 8003088:	20000454 	.word	0x20000454
 800308c:	40020000 	.word	0x40020000
 8003090:	88888889 	.word	0x88888889
 8003094:	20000138 	.word	0x20000138
 8003098:	3ecccccd 	.word	0x3ecccccd
 800309c:	20000330 	.word	0x20000330

080030a0 <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08e      	sub	sp, #56	; 0x38
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  // HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  int cnt1 = 0, cnt2 = 0, diff = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
 80030ac:	2300      	movs	r3, #0
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b0:	2300      	movs	r3, #0
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30

  uint32_t tick = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80030b8:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <runEncoder+0xc4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
  tick = HAL_GetTick();
 80030c0:	f002 fa16 	bl	80054f0 <HAL_GetTick>
 80030c4:	62f8      	str	r0, [r7, #44]	; 0x2c

  // uint8_t encoderBuffer[20];
  uint8_t speedBuffer[20];
  uint8_t directionBuffer[10];
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <runEncoder+0xc4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	b25a      	sxtb	r2, r3
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <runEncoder+0xc8>)
 80030de:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */

  for (;;)
  {
    // HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
    if (HAL_GetTick() - tick > 1000L)
 80030e0:	f002 fa06 	bl	80054f0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ee:	d935      	bls.n	800315c <runEncoder+0xbc>
    {
      cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <runEncoder+0xc4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <runEncoder+0xc4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b10      	cmp	r3, #16
 8003104:	d110      	bne.n	8003128 <runEncoder+0x88>
      {
        if (cnt2 < cnt1)
 8003106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	429a      	cmp	r2, r3
 800310c:	da04      	bge.n	8003118 <runEncoder+0x78>
        {
          diff = cnt1 - cnt2;
 800310e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
 8003116:	e017      	b.n	8003148 <runEncoder+0xa8>
        }
        else
          diff = (65535 - cnt2) + cnt1;
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800311e:	33ff      	adds	r3, #255	; 0xff
 8003120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003122:	4413      	add	r3, r2
 8003124:	633b      	str	r3, [r7, #48]	; 0x30
 8003126:	e00f      	b.n	8003148 <runEncoder+0xa8>
      }
      else
      {
        if (cnt2 > cnt1)
 8003128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	429a      	cmp	r2, r3
 800312e:	dd04      	ble.n	800313a <runEncoder+0x9a>
        {
          diff = cnt2 - cnt1;
 8003130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
 8003138:	e006      	b.n	8003148 <runEncoder+0xa8>
        }
        else
          diff = (65535 - cnt1) + cnt2;
 800313a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003140:	33ff      	adds	r3, #255	; 0xff
 8003142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003144:	4413      	add	r3, r2
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
      }
      curSpeed = diff;
 8003148:	4a08      	ldr	r2, [pc, #32]	; (800316c <runEncoder+0xcc>)
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	6013      	str	r3, [r2, #0]
      // OLED_ShowString(0, 0, speedBuffer);
      // sprintf(directionBuffer, "Dir:%5d\0", dir);
      // OLED_ShowString(0, 15, directionBuffer);

      // OLED_Refresh_Gram();
      cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <runEncoder+0xc4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
      tick = HAL_GetTick();
 8003156:	f002 f9cb 	bl	80054f0 <HAL_GetTick>
 800315a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }

    osDelay(100);
 800315c:	2064      	movs	r0, #100	; 0x64
 800315e:	f007 f985 	bl	800a46c <osDelay>
    if (HAL_GetTick() - tick > 1000L)
 8003162:	e7bd      	b.n	80030e0 <runEncoder+0x40>
 8003164:	20000258 	.word	0x20000258
 8003168:	2000013c 	.word	0x2000013c
 800316c:	20000458 	.word	0x20000458

08003170 <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af02      	add	r7, sp, #8
 8003176:	6078      	str	r0, [r7, #4]
    //  OLED_ShowString(0, 40, (char *)ch);

    // uart received cmd
    // __ACK_TASK_DONE(&huart3, rxMsg);
    // HAL_UART_Transmit(&huart3, aRxBuffer, RX_BUFFER_SIZE, 0xFFFF);
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 8003178:	4a0d      	ldr	r2, [pc, #52]	; (80031b0 <runOledTask+0x40>)
 800317a:	2128      	movs	r1, #40	; 0x28
 800317c:	2000      	movs	r0, #0
 800317e:	f00a f8eb 	bl	800d358 <OLED_ShowString>

    HCSR04_Read();
 8003182:	f7ff f89d 	bl	80022c0 <HCSR04_Read>
    OLED_ShowNumber(0, 0, obsDist_US, 5, 12);
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <runOledTask+0x44>)
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003190:	230c      	movs	r3, #12
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2305      	movs	r3, #5
 8003196:	ee17 2a90 	vmov	r2, s15
 800319a:	2100      	movs	r1, #0
 800319c:	2000      	movs	r0, #0
 800319e:	f00a f86d 	bl	800d27c <OLED_ShowNumber>

    OLED_Refresh_Gram();
 80031a2:	f009 fedb 	bl	800cf5c <OLED_Refresh_Gram>
    osDelay(1000);
 80031a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031aa:	f007 f95f 	bl	800a46c <osDelay>
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 80031ae:	e7e3      	b.n	8003178 <runOledTask+0x8>
 80031b0:	200003ec 	.word	0x200003ec
 80031b4:	200004a4 	.word	0x200004a4

080031b8 <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFWTask */
  // float targetAngle = 90;
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_FOREWARD)
 80031c0:	4b75      	ldr	r3, [pc, #468]	; (8003398 <runFWTask+0x1e0>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <runFWTask+0x18>
      osDelay(100);
 80031c8:	2064      	movs	r0, #100	; 0x64
 80031ca:	f007 f94f 	bl	800a46c <osDelay>
 80031ce:	e7f7      	b.n	80031c0 <runFWTask+0x8>
    else
    {
      targetDist = 0;
 80031d0:	4b72      	ldr	r3, [pc, #456]	; (800339c <runFWTask+0x1e4>)
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 80031d8:	4b71      	ldr	r3, [pc, #452]	; (80033a0 <runFWTask+0x1e8>)
 80031da:	2200      	movs	r2, #0
 80031dc:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 80031de:	4b71      	ldr	r3, [pc, #452]	; (80033a4 <runFWTask+0x1ec>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d062      	beq.n	80032ac <runFWTask+0xf4>
      {

        angleNow = 0;
 80031e6:	4b70      	ldr	r3, [pc, #448]	; (80033a8 <runFWTask+0x1f0>)
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 80031ee:	4b6f      	ldr	r3, [pc, #444]	; (80033ac <runFWTask+0x1f4>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 80031f4:	486e      	ldr	r0, [pc, #440]	; (80033b0 <runFWTask+0x1f8>)
 80031f6:	f7ff f850 	bl	800229a <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 80031fa:	486e      	ldr	r0, [pc, #440]	; (80033b4 <runFWTask+0x1fc>)
 80031fc:	f7ff f84d 	bl	800229a <PIDConfigReset>
        PIDConfigReset(&pidFast);
 8003200:	486d      	ldr	r0, [pc, #436]	; (80033b8 <runFWTask+0x200>)
 8003202:	f7ff f84a 	bl	800229a <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003206:	2200      	movs	r2, #0
 8003208:	2104      	movs	r1, #4
 800320a:	486c      	ldr	r0, [pc, #432]	; (80033bc <runFWTask+0x204>)
 800320c:	f002 fcb0 	bl	8005b70 <HAL_GPIO_WritePin>
 8003210:	2201      	movs	r2, #1
 8003212:	2108      	movs	r1, #8
 8003214:	4869      	ldr	r0, [pc, #420]	; (80033bc <runFWTask+0x204>)
 8003216:	f002 fcab 	bl	8005b70 <HAL_GPIO_WritePin>
 800321a:	2200      	movs	r2, #0
 800321c:	2120      	movs	r1, #32
 800321e:	4867      	ldr	r0, [pc, #412]	; (80033bc <runFWTask+0x204>)
 8003220:	f002 fca6 	bl	8005b70 <HAL_GPIO_WritePin>
 8003224:	2201      	movs	r2, #1
 8003226:	2110      	movs	r1, #16
 8003228:	4864      	ldr	r0, [pc, #400]	; (80033bc <runFWTask+0x204>)
 800322a:	f002 fca1 	bl	8005b70 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 800322e:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <runFWTask+0x208>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	635a      	str	r2, [r3, #52]	; 0x34
 8003236:	4b62      	ldr	r3, [pc, #392]	; (80033c0 <runFWTask+0x208>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
 800323e:	4b56      	ldr	r3, [pc, #344]	; (8003398 <runFWTask+0x1e0>)
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	4b60      	ldr	r3, [pc, #384]	; (80033c4 <runFWTask+0x20c>)
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	4b54      	ldr	r3, [pc, #336]	; (8003398 <runFWTask+0x1e0>)
 8003248:	220b      	movs	r2, #11
 800324a:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 800324c:	4b5e      	ldr	r3, [pc, #376]	; (80033c8 <runFWTask+0x210>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 8003252:	4b5e      	ldr	r3, [pc, #376]	; (80033cc <runFWTask+0x214>)
 8003254:	2264      	movs	r2, #100	; 0x64
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	4b5c      	ldr	r3, [pc, #368]	; (80033cc <runFWTask+0x214>)
 800325a:	2200      	movs	r2, #0
 800325c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800325e:	4a5c      	ldr	r2, [pc, #368]	; (80033d0 <runFWTask+0x218>)
 8003260:	210f      	movs	r1, #15
 8003262:	485c      	ldr	r0, [pc, #368]	; (80033d4 <runFWTask+0x21c>)
 8003264:	f00a f936 	bl	800d4d4 <sniprintf>
 8003268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800326c:	2206      	movs	r2, #6
 800326e:	495a      	ldr	r1, [pc, #360]	; (80033d8 <runFWTask+0x220>)
 8003270:	485a      	ldr	r0, [pc, #360]	; (80033dc <runFWTask+0x224>)
 8003272:	f005 ffb0 	bl	80091d6 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 8003276:	f002 f93b 	bl	80054f0 <HAL_GetTick>
 800327a:	4603      	mov	r3, r0
 800327c:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <runFWTask+0x228>)
 800327e:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 8003280:	4b48      	ldr	r3, [pc, #288]	; (80033a4 <runFWTask+0x1ec>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8085 	beq.w	8003394 <runFWTask+0x1dc>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 800328a:	f002 f931 	bl	80054f0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <runFWTask+0x228>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b09      	cmp	r3, #9
 8003298:	d9f2      	bls.n	8003280 <runFWTask+0xc8>
          {
            StraightLineMove(SPEED_MODE_T);
 800329a:	2000      	movs	r0, #0
 800329c:	f7ff f850 	bl	8002340 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 80032a0:	f002 f926 	bl	80054f0 <HAL_GetTick>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4a4e      	ldr	r2, [pc, #312]	; (80033e0 <runFWTask+0x228>)
 80032a8:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 80032aa:	e7e9      	b.n	8003280 <runFWTask+0xc8>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 80032ac:	4b47      	ldr	r3, [pc, #284]	; (80033cc <runFWTask+0x214>)
 80032ae:	885b      	ldrh	r3, [r3, #2]
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b8:	4b38      	ldr	r3, [pc, #224]	; (800339c <runFWTask+0x1e4>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <runFWTask+0x1e4>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80032c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	d802      	bhi.n	80032d8 <runFWTask+0x120>
          moveMode = SLOW;
 80032d2:	4b44      	ldr	r3, [pc, #272]	; (80033e4 <runFWTask+0x22c>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]

        if (moveMode == SLOW)
 80032d8:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <runFWTask+0x22c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <runFWTask+0x134>
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 80032e0:	2201      	movs	r2, #1
 80032e2:	2101      	movs	r1, #1
 80032e4:	482d      	ldr	r0, [pc, #180]	; (800339c <runFWTask+0x1e4>)
 80032e6:	f7ff f9e3 	bl	80026b0 <RobotMoveDist>
 80032ea:	e004      	b.n	80032f6 <runFWTask+0x13e>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_2);
 80032ec:	2202      	movs	r2, #2
 80032ee:	2101      	movs	r1, #1
 80032f0:	482a      	ldr	r0, [pc, #168]	; (800339c <runFWTask+0x1e4>)
 80032f2:	f7ff f9dd 	bl	80026b0 <RobotMoveDist>
          // OLED_ShowString(40, 40, (uint8_t *)"FW");
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <runFWTask+0x208>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	635a      	str	r2, [r3, #52]	; 0x34
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <runFWTask+0x208>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2200      	movs	r2, #0
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <runFWTask+0x1e0>)
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <runFWTask+0x20c>)
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <runFWTask+0x1e0>)
 8003310:	220b      	movs	r2, #11
 8003312:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <runFWTask+0x210>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800331a:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <runFWTask+0x230>)
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <runFWTask+0x230>)
 8003320:	785b      	ldrb	r3, [r3, #1]
 8003322:	429a      	cmp	r2, r3
 8003324:	d11b      	bne.n	800335e <runFWTask+0x1a6>
        {
          __CLEAR_CURCMD(curCmd);
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <runFWTask+0x214>)
 8003328:	2264      	movs	r2, #100	; 0x64
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <runFWTask+0x214>)
 800332e:	2200      	movs	r2, #0
 8003330:	805a      	strh	r2, [r3, #2]
          HAL_UART_Transmit(&huart3, (char *)(curTask), 6, 0xFFFF);
 8003332:	4b19      	ldr	r3, [pc, #100]	; (8003398 <runFWTask+0x1e0>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	4619      	mov	r1, r3
 8003338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800333c:	2206      	movs	r2, #6
 800333e:	4827      	ldr	r0, [pc, #156]	; (80033dc <runFWTask+0x224>)
 8003340:	f005 ff49 	bl	80091d6 <HAL_UART_Transmit>
          __ACK_TASK_DONE(&huart3, rxMsg);
 8003344:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <runFWTask+0x218>)
 8003346:	210f      	movs	r1, #15
 8003348:	4822      	ldr	r0, [pc, #136]	; (80033d4 <runFWTask+0x21c>)
 800334a:	f00a f8c3 	bl	800d4d4 <sniprintf>
 800334e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003352:	2206      	movs	r2, #6
 8003354:	4920      	ldr	r1, [pc, #128]	; (80033d8 <runFWTask+0x220>)
 8003356:	4821      	ldr	r0, [pc, #132]	; (80033dc <runFWTask+0x224>)
 8003358:	f005 ff3d 	bl	80091d6 <HAL_UART_Transmit>
 800335c:	e730      	b.n	80031c0 <runFWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <runFWTask+0x230>)
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <runFWTask+0x214>)
 8003364:	4920      	ldr	r1, [pc, #128]	; (80033e8 <runFWTask+0x230>)
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <runFWTask+0x230>)
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	3301      	adds	r3, #1
 8003374:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <runFWTask+0x230>)
 8003376:	7892      	ldrb	r2, [r2, #2]
 8003378:	fb93 f1f2 	sdiv	r1, r3, r2
 800337c:	fb01 f202 	mul.w	r2, r1, r2
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	b2da      	uxtb	r2, r3
 8003384:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <runFWTask+0x230>)
 8003386:	705a      	strb	r2, [r3, #1]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <runFWTask+0x234>)
 800338a:	210f      	movs	r1, #15
 800338c:	4811      	ldr	r0, [pc, #68]	; (80033d4 <runFWTask+0x21c>)
 800338e:	f00a f8a1 	bl	800d4d4 <sniprintf>
 8003392:	e715      	b.n	80031c0 <runFWTask+0x8>
            break;
 8003394:	bf00      	nop
    if (curTask != TASK_MOVE_FOREWARD)
 8003396:	e713      	b.n	80031c0 <runFWTask+0x8>
 8003398:	20000134 	.word	0x20000134
 800339c:	2000045c 	.word	0x2000045c
 80033a0:	20000462 	.word	0x20000462
 80033a4:	20000440 	.word	0x20000440
 80033a8:	20000448 	.word	0x20000448
 80033ac:	2000044e 	.word	0x2000044e
 80033b0:	2000047c 	.word	0x2000047c
 80033b4:	20000468 	.word	0x20000468
 80033b8:	20000490 	.word	0x20000490
 80033bc:	40020000 	.word	0x40020000
 80033c0:	20000330 	.word	0x20000330
 80033c4:	20000135 	.word	0x20000135
 80033c8:	200004b4 	.word	0x200004b4
 80033cc:	2000042c 	.word	0x2000042c
 80033d0:	0800ded4 	.word	0x0800ded4
 80033d4:	20000430 	.word	0x20000430
 80033d8:	0800dedc 	.word	0x0800dedc
 80033dc:	20000378 	.word	0x20000378
 80033e0:	20000454 	.word	0x20000454
 80033e4:	20000136 	.word	0x20000136
 80033e8:	200003f8 	.word	0x200003f8
 80033ec:	0800dee4 	.word	0x0800dee4

080033f0 <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 80033f8:	4b7a      	ldr	r3, [pc, #488]	; (80035e4 <runBWTask+0x1f4>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d003      	beq.n	8003408 <runBWTask+0x18>
      osDelay(100);
 8003400:	2064      	movs	r0, #100	; 0x64
 8003402:	f007 f833 	bl	800a46c <osDelay>
 8003406:	e7f7      	b.n	80033f8 <runBWTask+0x8>
    else
    {
      targetDist = 0;
 8003408:	4b77      	ldr	r3, [pc, #476]	; (80035e8 <runBWTask+0x1f8>)
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 8003410:	4b76      	ldr	r3, [pc, #472]	; (80035ec <runBWTask+0x1fc>)
 8003412:	2200      	movs	r2, #0
 8003414:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <runBWTask+0x200>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d062      	beq.n	80034e4 <runBWTask+0xf4>
      {

        angleNow = 0;
 800341e:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <runBWTask+0x204>)
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 8003426:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <runBWTask+0x208>)
 8003428:	2200      	movs	r2, #0
 800342a:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 800342c:	4873      	ldr	r0, [pc, #460]	; (80035fc <runBWTask+0x20c>)
 800342e:	f7fe ff34 	bl	800229a <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 8003432:	4873      	ldr	r0, [pc, #460]	; (8003600 <runBWTask+0x210>)
 8003434:	f7fe ff31 	bl	800229a <PIDConfigReset>
        PIDConfigReset(&pidFast);
 8003438:	4872      	ldr	r0, [pc, #456]	; (8003604 <runBWTask+0x214>)
 800343a:	f7fe ff2e 	bl	800229a <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 800343e:	2201      	movs	r2, #1
 8003440:	2104      	movs	r1, #4
 8003442:	4871      	ldr	r0, [pc, #452]	; (8003608 <runBWTask+0x218>)
 8003444:	f002 fb94 	bl	8005b70 <HAL_GPIO_WritePin>
 8003448:	2200      	movs	r2, #0
 800344a:	2108      	movs	r1, #8
 800344c:	486e      	ldr	r0, [pc, #440]	; (8003608 <runBWTask+0x218>)
 800344e:	f002 fb8f 	bl	8005b70 <HAL_GPIO_WritePin>
 8003452:	2201      	movs	r2, #1
 8003454:	2120      	movs	r1, #32
 8003456:	486c      	ldr	r0, [pc, #432]	; (8003608 <runBWTask+0x218>)
 8003458:	f002 fb8a 	bl	8005b70 <HAL_GPIO_WritePin>
 800345c:	2200      	movs	r2, #0
 800345e:	2110      	movs	r1, #16
 8003460:	4869      	ldr	r0, [pc, #420]	; (8003608 <runBWTask+0x218>)
 8003462:	f002 fb85 	bl	8005b70 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 8003466:	4b69      	ldr	r3, [pc, #420]	; (800360c <runBWTask+0x21c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	635a      	str	r2, [r3, #52]	; 0x34
 800346e:	4b67      	ldr	r3, [pc, #412]	; (800360c <runBWTask+0x21c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	639a      	str	r2, [r3, #56]	; 0x38
 8003476:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <runBWTask+0x1f4>)
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	4b65      	ldr	r3, [pc, #404]	; (8003610 <runBWTask+0x220>)
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <runBWTask+0x1f4>)
 8003480:	220b      	movs	r2, #11
 8003482:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8003484:	4b63      	ldr	r3, [pc, #396]	; (8003614 <runBWTask+0x224>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 800348a:	4b63      	ldr	r3, [pc, #396]	; (8003618 <runBWTask+0x228>)
 800348c:	2264      	movs	r2, #100	; 0x64
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <runBWTask+0x228>)
 8003492:	2200      	movs	r2, #0
 8003494:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8003496:	4a61      	ldr	r2, [pc, #388]	; (800361c <runBWTask+0x22c>)
 8003498:	210f      	movs	r1, #15
 800349a:	4861      	ldr	r0, [pc, #388]	; (8003620 <runBWTask+0x230>)
 800349c:	f00a f81a 	bl	800d4d4 <sniprintf>
 80034a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034a4:	2206      	movs	r2, #6
 80034a6:	495f      	ldr	r1, [pc, #380]	; (8003624 <runBWTask+0x234>)
 80034a8:	485f      	ldr	r0, [pc, #380]	; (8003628 <runBWTask+0x238>)
 80034aa:	f005 fe94 	bl	80091d6 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 80034ae:	f002 f81f 	bl	80054f0 <HAL_GetTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4a5d      	ldr	r2, [pc, #372]	; (800362c <runBWTask+0x23c>)
 80034b6:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <runBWTask+0x200>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 808e 	beq.w	80035de <runBWTask+0x1ee>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 80034c2:	f002 f815 	bl	80054f0 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b58      	ldr	r3, [pc, #352]	; (800362c <runBWTask+0x23c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b09      	cmp	r3, #9
 80034d0:	d9f2      	bls.n	80034b8 <runBWTask+0xc8>
          {
            StraightLineMove(SPEED_MODE_T);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f7fe ff34 	bl	8002340 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 80034d8:	f002 f80a 	bl	80054f0 <HAL_GetTick>
 80034dc:	4603      	mov	r3, r0
 80034de:	4a53      	ldr	r2, [pc, #332]	; (800362c <runBWTask+0x23c>)
 80034e0:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 80034e2:	e7e9      	b.n	80034b8 <runBWTask+0xc8>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 80034e4:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <runBWTask+0x228>)
 80034e6:	885b      	ldrh	r3, [r3, #2]
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f0:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <runBWTask+0x1f8>)
 80034f2:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 80034f6:	4b3c      	ldr	r3, [pc, #240]	; (80035e8 <runBWTask+0x1f8>)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003508:	d802      	bhi.n	8003510 <runBWTask+0x120>
          moveMode = SLOW;
 800350a:	4b49      	ldr	r3, [pc, #292]	; (8003630 <runBWTask+0x240>)
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]

        if (moveMode == SLOW)
 8003510:	4b47      	ldr	r3, [pc, #284]	; (8003630 <runBWTask+0x240>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <runBWTask+0x134>
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_1);
 8003518:	2201      	movs	r2, #1
 800351a:	2100      	movs	r1, #0
 800351c:	4832      	ldr	r0, [pc, #200]	; (80035e8 <runBWTask+0x1f8>)
 800351e:	f7ff f8c7 	bl	80026b0 <RobotMoveDist>
 8003522:	e004      	b.n	800352e <runBWTask+0x13e>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_2);
 8003524:	2202      	movs	r2, #2
 8003526:	2100      	movs	r1, #0
 8003528:	482f      	ldr	r0, [pc, #188]	; (80035e8 <runBWTask+0x1f8>)
 800352a:	f7ff f8c1 	bl	80026b0 <RobotMoveDist>
          // OLED_ShowString(40, 40, (uint8_t *)"BW");
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <runBWTask+0x21c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2200      	movs	r2, #0
 8003534:	635a      	str	r2, [r3, #52]	; 0x34
 8003536:	4b35      	ldr	r3, [pc, #212]	; (800360c <runBWTask+0x21c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
 800353e:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <runBWTask+0x1f4>)
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	4b33      	ldr	r3, [pc, #204]	; (8003610 <runBWTask+0x220>)
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <runBWTask+0x1f4>)
 8003548:	220b      	movs	r2, #11
 800354a:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <runBWTask+0x224>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <runBWTask+0x244>)
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <runBWTask+0x244>)
 8003558:	785b      	ldrb	r3, [r3, #1]
 800355a:	429a      	cmp	r2, r3
 800355c:	d11b      	bne.n	8003596 <runBWTask+0x1a6>
        {
          __CLEAR_CURCMD(curCmd);
 800355e:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <runBWTask+0x228>)
 8003560:	2264      	movs	r2, #100	; 0x64
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <runBWTask+0x228>)
 8003566:	2200      	movs	r2, #0
 8003568:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 800356a:	4a2c      	ldr	r2, [pc, #176]	; (800361c <runBWTask+0x22c>)
 800356c:	210f      	movs	r1, #15
 800356e:	482c      	ldr	r0, [pc, #176]	; (8003620 <runBWTask+0x230>)
 8003570:	f009 ffb0 	bl	800d4d4 <sniprintf>
 8003574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003578:	2206      	movs	r2, #6
 800357a:	492a      	ldr	r1, [pc, #168]	; (8003624 <runBWTask+0x234>)
 800357c:	482a      	ldr	r0, [pc, #168]	; (8003628 <runBWTask+0x238>)
 800357e:	f005 fe2a 	bl	80091d6 <HAL_UART_Transmit>
          HAL_UART_Transmit(&huart3, (uint8_t *)(curTask), 6, 0xFFFF);
 8003582:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <runBWTask+0x1f4>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	4619      	mov	r1, r3
 8003588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800358c:	2206      	movs	r2, #6
 800358e:	4826      	ldr	r0, [pc, #152]	; (8003628 <runBWTask+0x238>)
 8003590:	f005 fe21 	bl	80091d6 <HAL_UART_Transmit>
 8003594:	e019      	b.n	80035ca <runBWTask+0x1da>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003596:	4b27      	ldr	r3, [pc, #156]	; (8003634 <runBWTask+0x244>)
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <runBWTask+0x228>)
 800359c:	4925      	ldr	r1, [pc, #148]	; (8003634 <runBWTask+0x244>)
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <runBWTask+0x244>)
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	3301      	adds	r3, #1
 80035ac:	4a21      	ldr	r2, [pc, #132]	; (8003634 <runBWTask+0x244>)
 80035ae:	7892      	ldrb	r2, [r2, #2]
 80035b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80035b4:	fb01 f202 	mul.w	r2, r1, r2
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <runBWTask+0x244>)
 80035be:	705a      	strb	r2, [r3, #1]
 80035c0:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <runBWTask+0x248>)
 80035c2:	210f      	movs	r1, #15
 80035c4:	4816      	ldr	r0, [pc, #88]	; (8003620 <runBWTask+0x230>)
 80035c6:	f009 ff85 	bl	800d4d4 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t *)(curTask), 6, 0xFFFF);
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <runBWTask+0x1f4>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035d4:	2206      	movs	r2, #6
 80035d6:	4814      	ldr	r0, [pc, #80]	; (8003628 <runBWTask+0x238>)
 80035d8:	f005 fdfd 	bl	80091d6 <HAL_UART_Transmit>
 80035dc:	e70c      	b.n	80033f8 <runBWTask+0x8>
            break;
 80035de:	bf00      	nop
    if (curTask != TASK_MOVE_BACKWARD)
 80035e0:	e70a      	b.n	80033f8 <runBWTask+0x8>
 80035e2:	bf00      	nop
 80035e4:	20000134 	.word	0x20000134
 80035e8:	2000045c 	.word	0x2000045c
 80035ec:	20000462 	.word	0x20000462
 80035f0:	20000440 	.word	0x20000440
 80035f4:	20000448 	.word	0x20000448
 80035f8:	2000044e 	.word	0x2000044e
 80035fc:	2000047c 	.word	0x2000047c
 8003600:	20000468 	.word	0x20000468
 8003604:	20000490 	.word	0x20000490
 8003608:	40020000 	.word	0x40020000
 800360c:	20000330 	.word	0x20000330
 8003610:	20000135 	.word	0x20000135
 8003614:	200004b4 	.word	0x200004b4
 8003618:	2000042c 	.word	0x2000042c
 800361c:	0800ded4 	.word	0x0800ded4
 8003620:	20000430 	.word	0x20000430
 8003624:	0800dedc 	.word	0x0800dedc
 8003628:	20000378 	.word	0x20000378
 800362c:	20000454 	.word	0x20000454
 8003630:	20000136 	.word	0x20000136
 8003634:	200003f8 	.word	0x200003f8
 8003638:	0800dee4 	.word	0x0800dee4

0800363c <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */

  // for OLED refresh when debugging
  osDelay(100);
 8003644:	2064      	movs	r0, #100	; 0x64
 8003646:	f006 ff11 	bl	800a46c <osDelay>

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 800364a:	4b9d      	ldr	r3, [pc, #628]	; (80038c0 <runFLTask+0x284>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d003      	beq.n	800365a <runFLTask+0x1e>
      osDelay(100);
 8003652:	2064      	movs	r0, #100	; 0x64
 8003654:	f006 ff0a 	bl	800a46c <osDelay>
 8003658:	e7f7      	b.n	800364a <runFLTask+0xe>
    else
    {

      switch (curCmd.val)
 800365a:	4b9a      	ldr	r3, [pc, #616]	; (80038c4 <runFLTask+0x288>)
 800365c:	885b      	ldrh	r3, [r3, #2]
 800365e:	2b14      	cmp	r3, #20
 8003660:	f000 8081 	beq.w	8003766 <runFLTask+0x12a>
 8003664:	2b1e      	cmp	r3, #30
 8003666:	f040 8107 	bne.w	8003878 <runFLTask+0x23c>
      {
      case 30: // FL30 (4x2)
        __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 800366a:	4b97      	ldr	r3, [pc, #604]	; (80038c8 <runFLTask+0x28c>)
 800366c:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003670:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80038cc <runFLTask+0x290>
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	dd01      	ble.n	8003682 <runFLTask+0x46>
 800367e:	23e1      	movs	r3, #225	; 0xe1
 8003680:	e012      	b.n	80036a8 <runFLTask+0x6c>
 8003682:	4b91      	ldr	r3, [pc, #580]	; (80038c8 <runFLTask+0x28c>)
 8003684:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8003688:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80038d0 <runFLTask+0x294>
 800368c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003694:	d501      	bpl.n	800369a <runFLTask+0x5e>
 8003696:	2355      	movs	r3, #85	; 0x55
 8003698:	e006      	b.n	80036a8 <runFLTask+0x6c>
 800369a:	4b8b      	ldr	r3, [pc, #556]	; (80038c8 <runFLTask+0x28c>)
 800369c:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80036a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a4:	ee17 3a90 	vmov	r3, s15
 80036a8:	4a8a      	ldr	r2, [pc, #552]	; (80038d4 <runFLTask+0x298>)
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80036b2:	f001 ff29 	bl	8005508 <HAL_Delay>
 80036b6:	4b84      	ldr	r3, [pc, #528]	; (80038c8 <runFLTask+0x28c>)
 80036b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80036bc:	4a86      	ldr	r2, [pc, #536]	; (80038d8 <runFLTask+0x29c>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b81      	ldr	r3, [pc, #516]	; (80038c8 <runFLTask+0x28c>)
 80036c2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bf0c      	ite	eq
 80036ca:	2301      	moveq	r3, #1
 80036cc:	2300      	movne	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	2104      	movs	r1, #4
 80036d4:	4881      	ldr	r0, [pc, #516]	; (80038dc <runFLTask+0x2a0>)
 80036d6:	f002 fa4b 	bl	8005b70 <HAL_GPIO_WritePin>
 80036da:	4b7b      	ldr	r3, [pc, #492]	; (80038c8 <runFLTask+0x28c>)
 80036dc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	2108      	movs	r1, #8
 80036ee:	487b      	ldr	r0, [pc, #492]	; (80038dc <runFLTask+0x2a0>)
 80036f0:	f002 fa3e 	bl	8005b70 <HAL_GPIO_WritePin>
 80036f4:	4b74      	ldr	r3, [pc, #464]	; (80038c8 <runFLTask+0x28c>)
 80036f6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	2120      	movs	r1, #32
 8003708:	4874      	ldr	r0, [pc, #464]	; (80038dc <runFLTask+0x2a0>)
 800370a:	f002 fa31 	bl	8005b70 <HAL_GPIO_WritePin>
 800370e:	4b6e      	ldr	r3, [pc, #440]	; (80038c8 <runFLTask+0x28c>)
 8003710:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	2110      	movs	r1, #16
 8003722:	486e      	ldr	r0, [pc, #440]	; (80038dc <runFLTask+0x2a0>)
 8003724:	f002 fa24 	bl	8005b70 <HAL_GPIO_WritePin>
 8003728:	4b67      	ldr	r3, [pc, #412]	; (80038c8 <runFLTask+0x28c>)
 800372a:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 800372e:	4b6c      	ldr	r3, [pc, #432]	; (80038e0 <runFLTask+0x2a4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	635a      	str	r2, [r3, #52]	; 0x34
 8003734:	4b64      	ldr	r3, [pc, #400]	; (80038c8 <runFLTask+0x28c>)
 8003736:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 800373a:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <runFLTask+0x2a4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
        // OLED_ShowString(0, 50, (uint8_t *)"FL30");
        RobotTurn(&targetAngle);
 8003740:	4865      	ldr	r0, [pc, #404]	; (80038d8 <runFLTask+0x29c>)
 8003742:	f7ff faa5 	bl	8002c90 <RobotTurn>
        osDelay(10);
 8003746:	200a      	movs	r0, #10
 8003748:	f006 fe90 	bl	800a46c <osDelay>
        targetDist = 4;
 800374c:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <runFLTask+0x2a8>)
 800374e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003752:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003754:	2200      	movs	r2, #0
 8003756:	2101      	movs	r1, #1
 8003758:	4862      	ldr	r0, [pc, #392]	; (80038e4 <runFLTask+0x2a8>)
 800375a:	f7fe ffa9 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 800375e:	200a      	movs	r0, #10
 8003760:	f006 fe84 	bl	800a46c <osDelay>
        break;
 8003764:	e126      	b.n	80039b4 <runFLTask+0x378>
      case 20: // FL20 (outdoor 3x1)
        targetDist = 4;
 8003766:	4b5f      	ldr	r3, [pc, #380]	; (80038e4 <runFLTask+0x2a8>)
 8003768:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800376c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800376e:	2200      	movs	r2, #0
 8003770:	2101      	movs	r1, #1
 8003772:	485c      	ldr	r0, [pc, #368]	; (80038e4 <runFLTask+0x2a8>)
 8003774:	f7fe ff9c 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8003778:	200a      	movs	r0, #10
 800377a:	f006 fe77 	bl	800a46c <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 800377e:	4b52      	ldr	r3, [pc, #328]	; (80038c8 <runFLTask+0x28c>)
 8003780:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003784:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80038cc <runFLTask+0x290>
 8003788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	dd01      	ble.n	8003796 <runFLTask+0x15a>
 8003792:	23e1      	movs	r3, #225	; 0xe1
 8003794:	e012      	b.n	80037bc <runFLTask+0x180>
 8003796:	4b4c      	ldr	r3, [pc, #304]	; (80038c8 <runFLTask+0x28c>)
 8003798:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800379c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80038d0 <runFLTask+0x294>
 80037a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a8:	d501      	bpl.n	80037ae <runFLTask+0x172>
 80037aa:	2355      	movs	r3, #85	; 0x55
 80037ac:	e006      	b.n	80037bc <runFLTask+0x180>
 80037ae:	4b46      	ldr	r3, [pc, #280]	; (80038c8 <runFLTask+0x28c>)
 80037b0:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80037b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b8:	ee17 3a90 	vmov	r3, s15
 80037bc:	4a45      	ldr	r2, [pc, #276]	; (80038d4 <runFLTask+0x298>)
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
 80037c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037c6:	f001 fe9f 	bl	8005508 <HAL_Delay>
 80037ca:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <runFLTask+0x28c>)
 80037cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80037d0:	4a41      	ldr	r2, [pc, #260]	; (80038d8 <runFLTask+0x29c>)
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	4b3c      	ldr	r3, [pc, #240]	; (80038c8 <runFLTask+0x28c>)
 80037d6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	2104      	movs	r1, #4
 80037e8:	483c      	ldr	r0, [pc, #240]	; (80038dc <runFLTask+0x2a0>)
 80037ea:	f002 f9c1 	bl	8005b70 <HAL_GPIO_WritePin>
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <runFLTask+0x28c>)
 80037f0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	2108      	movs	r1, #8
 8003802:	4836      	ldr	r0, [pc, #216]	; (80038dc <runFLTask+0x2a0>)
 8003804:	f002 f9b4 	bl	8005b70 <HAL_GPIO_WritePin>
 8003808:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <runFLTask+0x28c>)
 800380a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	2120      	movs	r1, #32
 800381c:	482f      	ldr	r0, [pc, #188]	; (80038dc <runFLTask+0x2a0>)
 800381e:	f002 f9a7 	bl	8005b70 <HAL_GPIO_WritePin>
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <runFLTask+0x28c>)
 8003824:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	2110      	movs	r1, #16
 8003836:	4829      	ldr	r0, [pc, #164]	; (80038dc <runFLTask+0x2a0>)
 8003838:	f002 f99a 	bl	8005b70 <HAL_GPIO_WritePin>
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <runFLTask+0x28c>)
 800383e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <runFLTask+0x2a4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	635a      	str	r2, [r3, #52]	; 0x34
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <runFLTask+0x28c>)
 800384a:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <runFLTask+0x2a4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003854:	4820      	ldr	r0, [pc, #128]	; (80038d8 <runFLTask+0x29c>)
 8003856:	f7ff fa1b 	bl	8002c90 <RobotTurn>
        osDelay(10);
 800385a:	200a      	movs	r0, #10
 800385c:	f006 fe06 	bl	800a46c <osDelay>
        targetDist = 7;
 8003860:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <runFLTask+0x2a8>)
 8003862:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <runFLTask+0x2ac>)
 8003864:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003866:	2200      	movs	r2, #0
 8003868:	2101      	movs	r1, #1
 800386a:	481e      	ldr	r0, [pc, #120]	; (80038e4 <runFLTask+0x2a8>)
 800386c:	f7fe ff20 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8003870:	200a      	movs	r0, #10
 8003872:	f006 fdfb 	bl	800a46c <osDelay>
        break;
 8003876:	e09d      	b.n	80039b4 <runFLTask+0x378>
      default: // FL00 (indoor 3x1)
        targetDist = 4;
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <runFLTask+0x2a8>)
 800387a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800387e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003880:	2200      	movs	r2, #0
 8003882:	2101      	movs	r1, #1
 8003884:	4817      	ldr	r0, [pc, #92]	; (80038e4 <runFLTask+0x2a8>)
 8003886:	f7fe ff13 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 800388a:	200a      	movs	r0, #10
 800388c:	f006 fdee 	bl	800a46c <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 8003890:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <runFLTask+0x28c>)
 8003892:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003896:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80038cc <runFLTask+0x290>
 800389a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a2:	dd01      	ble.n	80038a8 <runFLTask+0x26c>
 80038a4:	23e1      	movs	r3, #225	; 0xe1
 80038a6:	e028      	b.n	80038fa <runFLTask+0x2be>
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <runFLTask+0x28c>)
 80038aa:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80038ae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80038d0 <runFLTask+0x294>
 80038b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ba:	d517      	bpl.n	80038ec <runFLTask+0x2b0>
 80038bc:	2355      	movs	r3, #85	; 0x55
 80038be:	e01c      	b.n	80038fa <runFLTask+0x2be>
 80038c0:	20000134 	.word	0x20000134
 80038c4:	2000042c 	.word	0x2000042c
 80038c8:	20000004 	.word	0x20000004
 80038cc:	43610000 	.word	0x43610000
 80038d0:	42aa0000 	.word	0x42aa0000
 80038d4:	20000210 	.word	0x20000210
 80038d8:	20000444 	.word	0x20000444
 80038dc:	40020000 	.word	0x40020000
 80038e0:	20000330 	.word	0x20000330
 80038e4:	2000045c 	.word	0x2000045c
 80038e8:	40e00000 	.word	0x40e00000
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <runFLTask+0x3f4>)
 80038ee:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 3a90 	vmov	r3, s15
 80038fa:	4a4e      	ldr	r2, [pc, #312]	; (8003a34 <runFLTask+0x3f8>)
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003904:	f001 fe00 	bl	8005508 <HAL_Delay>
 8003908:	4b49      	ldr	r3, [pc, #292]	; (8003a30 <runFLTask+0x3f4>)
 800390a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800390c:	4a4a      	ldr	r2, [pc, #296]	; (8003a38 <runFLTask+0x3fc>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <runFLTask+0x3f4>)
 8003912:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	2104      	movs	r1, #4
 8003924:	4845      	ldr	r0, [pc, #276]	; (8003a3c <runFLTask+0x400>)
 8003926:	f002 f923 	bl	8005b70 <HAL_GPIO_WritePin>
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <runFLTask+0x3f4>)
 800392c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	2108      	movs	r1, #8
 800393e:	483f      	ldr	r0, [pc, #252]	; (8003a3c <runFLTask+0x400>)
 8003940:	f002 f916 	bl	8005b70 <HAL_GPIO_WritePin>
 8003944:	4b3a      	ldr	r3, [pc, #232]	; (8003a30 <runFLTask+0x3f4>)
 8003946:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800394a:	2b00      	cmp	r3, #0
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	2120      	movs	r1, #32
 8003958:	4838      	ldr	r0, [pc, #224]	; (8003a3c <runFLTask+0x400>)
 800395a:	f002 f909 	bl	8005b70 <HAL_GPIO_WritePin>
 800395e:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <runFLTask+0x3f4>)
 8003960:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	2110      	movs	r1, #16
 8003972:	4832      	ldr	r0, [pc, #200]	; (8003a3c <runFLTask+0x400>)
 8003974:	f002 f8fc 	bl	8005b70 <HAL_GPIO_WritePin>
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <runFLTask+0x3f4>)
 800397a:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 800397e:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <runFLTask+0x404>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	635a      	str	r2, [r3, #52]	; 0x34
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <runFLTask+0x3f4>)
 8003986:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800398a:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <runFLTask+0x404>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003990:	4829      	ldr	r0, [pc, #164]	; (8003a38 <runFLTask+0x3fc>)
 8003992:	f7ff f97d 	bl	8002c90 <RobotTurn>
        osDelay(10);
 8003996:	200a      	movs	r0, #10
 8003998:	f006 fd68 	bl	800a46c <osDelay>
        targetDist = 7;
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <runFLTask+0x408>)
 800399e:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <runFLTask+0x40c>)
 80039a0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2101      	movs	r1, #1
 80039a6:	4827      	ldr	r0, [pc, #156]	; (8003a44 <runFLTask+0x408>)
 80039a8:	f7fe fe82 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 80039ac:	200a      	movs	r0, #10
 80039ae:	f006 fd5d 	bl	800a46c <osDelay>
        break;
 80039b2:	bf00      	nop
      }
      clickOnce = 0;
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <runFLTask+0x410>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 80039ba:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <runFLTask+0x414>)
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <runFLTask+0x418>)
 80039c0:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <runFLTask+0x414>)
 80039c4:	220b      	movs	r2, #11
 80039c6:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <runFLTask+0x41c>)
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <runFLTask+0x41c>)
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d112      	bne.n	80039fa <runFLTask+0x3be>
      {
        __CLEAR_CURCMD(curCmd);
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <runFLTask+0x420>)
 80039d6:	2264      	movs	r2, #100	; 0x64
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <runFLTask+0x420>)
 80039dc:	2200      	movs	r2, #0
 80039de:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80039e0:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <runFLTask+0x424>)
 80039e2:	210f      	movs	r1, #15
 80039e4:	481f      	ldr	r0, [pc, #124]	; (8003a64 <runFLTask+0x428>)
 80039e6:	f009 fd75 	bl	800d4d4 <sniprintf>
 80039ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039ee:	2206      	movs	r2, #6
 80039f0:	491d      	ldr	r1, [pc, #116]	; (8003a68 <runFLTask+0x42c>)
 80039f2:	481e      	ldr	r0, [pc, #120]	; (8003a6c <runFLTask+0x430>)
 80039f4:	f005 fbef 	bl	80091d6 <HAL_UART_Transmit>
 80039f8:	e627      	b.n	800364a <runFLTask+0xe>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <runFLTask+0x41c>)
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <runFLTask+0x420>)
 8003a00:	4915      	ldr	r1, [pc, #84]	; (8003a58 <runFLTask+0x41c>)
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <runFLTask+0x41c>)
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <runFLTask+0x41c>)
 8003a12:	7892      	ldrb	r2, [r2, #2]
 8003a14:	fb93 f1f2 	sdiv	r1, r3, r2
 8003a18:	fb01 f202 	mul.w	r2, r1, r2
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <runFLTask+0x41c>)
 8003a22:	705a      	strb	r2, [r3, #1]
 8003a24:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <runFLTask+0x434>)
 8003a26:	210f      	movs	r1, #15
 8003a28:	480e      	ldr	r0, [pc, #56]	; (8003a64 <runFLTask+0x428>)
 8003a2a:	f009 fd53 	bl	800d4d4 <sniprintf>
    if (curTask != TASK_FL)
 8003a2e:	e60c      	b.n	800364a <runFLTask+0xe>
 8003a30:	20000004 	.word	0x20000004
 8003a34:	20000210 	.word	0x20000210
 8003a38:	20000444 	.word	0x20000444
 8003a3c:	40020000 	.word	0x40020000
 8003a40:	20000330 	.word	0x20000330
 8003a44:	2000045c 	.word	0x2000045c
 8003a48:	40e00000 	.word	0x40e00000
 8003a4c:	200004b4 	.word	0x200004b4
 8003a50:	20000134 	.word	0x20000134
 8003a54:	20000135 	.word	0x20000135
 8003a58:	200003f8 	.word	0x200003f8
 8003a5c:	2000042c 	.word	0x2000042c
 8003a60:	0800ded4 	.word	0x0800ded4
 8003a64:	20000430 	.word	0x20000430
 8003a68:	0800dedc 	.word	0x0800dedc
 8003a6c:	20000378 	.word	0x20000378
 8003a70:	0800dee4 	.word	0x0800dee4

08003a74 <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 8003a7c:	4b9d      	ldr	r3, [pc, #628]	; (8003cf4 <runFRTask+0x280>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d003      	beq.n	8003a8c <runFRTask+0x18>
      osDelay(100);
 8003a84:	2064      	movs	r0, #100	; 0x64
 8003a86:	f006 fcf1 	bl	800a46c <osDelay>
 8003a8a:	e7f7      	b.n	8003a7c <runFRTask+0x8>
    else
    {

      switch (curCmd.val)
 8003a8c:	4b9a      	ldr	r3, [pc, #616]	; (8003cf8 <runFRTask+0x284>)
 8003a8e:	885b      	ldrh	r3, [r3, #2]
 8003a90:	2b14      	cmp	r3, #20
 8003a92:	f000 8081 	beq.w	8003b98 <runFRTask+0x124>
 8003a96:	2b1e      	cmp	r3, #30
 8003a98:	f040 8107 	bne.w	8003caa <runFRTask+0x236>
      {
      case 30: // FR30 (4x2)
        __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8003a9c:	4b97      	ldr	r3, [pc, #604]	; (8003cfc <runFRTask+0x288>)
 8003a9e:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003aa2:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8003d00 <runFRTask+0x28c>
 8003aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aae:	dd01      	ble.n	8003ab4 <runFRTask+0x40>
 8003ab0:	23e1      	movs	r3, #225	; 0xe1
 8003ab2:	e012      	b.n	8003ada <runFRTask+0x66>
 8003ab4:	4b91      	ldr	r3, [pc, #580]	; (8003cfc <runFRTask+0x288>)
 8003ab6:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003aba:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003d04 <runFRTask+0x290>
 8003abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	d501      	bpl.n	8003acc <runFRTask+0x58>
 8003ac8:	2355      	movs	r3, #85	; 0x55
 8003aca:	e006      	b.n	8003ada <runFRTask+0x66>
 8003acc:	4b8b      	ldr	r3, [pc, #556]	; (8003cfc <runFRTask+0x288>)
 8003ace:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad6:	ee17 3a90 	vmov	r3, s15
 8003ada:	4a8b      	ldr	r2, [pc, #556]	; (8003d08 <runFRTask+0x294>)
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003ae4:	f001 fd10 	bl	8005508 <HAL_Delay>
 8003ae8:	4b84      	ldr	r3, [pc, #528]	; (8003cfc <runFRTask+0x288>)
 8003aea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003aee:	4a87      	ldr	r2, [pc, #540]	; (8003d0c <runFRTask+0x298>)
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <runFRTask+0x288>)
 8003af4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	2104      	movs	r1, #4
 8003b06:	4882      	ldr	r0, [pc, #520]	; (8003d10 <runFRTask+0x29c>)
 8003b08:	f002 f832 	bl	8005b70 <HAL_GPIO_WritePin>
 8003b0c:	4b7b      	ldr	r3, [pc, #492]	; (8003cfc <runFRTask+0x288>)
 8003b0e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2108      	movs	r1, #8
 8003b20:	487b      	ldr	r0, [pc, #492]	; (8003d10 <runFRTask+0x29c>)
 8003b22:	f002 f825 	bl	8005b70 <HAL_GPIO_WritePin>
 8003b26:	4b75      	ldr	r3, [pc, #468]	; (8003cfc <runFRTask+0x288>)
 8003b28:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	2120      	movs	r1, #32
 8003b3a:	4875      	ldr	r0, [pc, #468]	; (8003d10 <runFRTask+0x29c>)
 8003b3c:	f002 f818 	bl	8005b70 <HAL_GPIO_WritePin>
 8003b40:	4b6e      	ldr	r3, [pc, #440]	; (8003cfc <runFRTask+0x288>)
 8003b42:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	2110      	movs	r1, #16
 8003b54:	486e      	ldr	r0, [pc, #440]	; (8003d10 <runFRTask+0x29c>)
 8003b56:	f002 f80b 	bl	8005b70 <HAL_GPIO_WritePin>
 8003b5a:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <runFRTask+0x288>)
 8003b5c:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8003b60:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <runFRTask+0x2a0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34
 8003b66:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <runFRTask+0x288>)
 8003b68:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8003b6c:	4b69      	ldr	r3, [pc, #420]	; (8003d14 <runFRTask+0x2a0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
        // OLED_ShowString(0, 50, (uint8_t *)"FR30");
        RobotTurn(&targetAngle);
 8003b72:	4866      	ldr	r0, [pc, #408]	; (8003d0c <runFRTask+0x298>)
 8003b74:	f7ff f88c 	bl	8002c90 <RobotTurn>
        osDelay(10);
 8003b78:	200a      	movs	r0, #10
 8003b7a:	f006 fc77 	bl	800a46c <osDelay>
        targetDist = 4;
 8003b7e:	4b66      	ldr	r3, [pc, #408]	; (8003d18 <runFRTask+0x2a4>)
 8003b80:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003b84:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003b86:	2200      	movs	r2, #0
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4863      	ldr	r0, [pc, #396]	; (8003d18 <runFRTask+0x2a4>)
 8003b8c:	f7fe fd90 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8003b90:	200a      	movs	r0, #10
 8003b92:	f006 fc6b 	bl	800a46c <osDelay>
        break;
 8003b96:	e128      	b.n	8003dea <runFRTask+0x376>
      case 20: // FR20 (outdoor 3x1)
        targetDist = 4;
 8003b98:	4b5f      	ldr	r3, [pc, #380]	; (8003d18 <runFRTask+0x2a4>)
 8003b9a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003b9e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	485c      	ldr	r0, [pc, #368]	; (8003d18 <runFRTask+0x2a4>)
 8003ba6:	f7fe fd83 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8003baa:	200a      	movs	r0, #10
 8003bac:	f006 fc5e 	bl	800a46c <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 8003bb0:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <runFRTask+0x288>)
 8003bb2:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003bb6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003d00 <runFRTask+0x28c>
 8003bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc2:	dd01      	ble.n	8003bc8 <runFRTask+0x154>
 8003bc4:	23e1      	movs	r3, #225	; 0xe1
 8003bc6:	e012      	b.n	8003bee <runFRTask+0x17a>
 8003bc8:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <runFRTask+0x288>)
 8003bca:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003bce:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003d04 <runFRTask+0x290>
 8003bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	d501      	bpl.n	8003be0 <runFRTask+0x16c>
 8003bdc:	2355      	movs	r3, #85	; 0x55
 8003bde:	e006      	b.n	8003bee <runFRTask+0x17a>
 8003be0:	4b46      	ldr	r3, [pc, #280]	; (8003cfc <runFRTask+0x288>)
 8003be2:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bea:	ee17 3a90 	vmov	r3, s15
 8003bee:	4a46      	ldr	r2, [pc, #280]	; (8003d08 <runFRTask+0x294>)
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003bf8:	f001 fc86 	bl	8005508 <HAL_Delay>
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <runFRTask+0x288>)
 8003bfe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c02:	4a42      	ldr	r2, [pc, #264]	; (8003d0c <runFRTask+0x298>)
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <runFRTask+0x288>)
 8003c08:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	2104      	movs	r1, #4
 8003c1a:	483d      	ldr	r0, [pc, #244]	; (8003d10 <runFRTask+0x29c>)
 8003c1c:	f001 ffa8 	bl	8005b70 <HAL_GPIO_WritePin>
 8003c20:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <runFRTask+0x288>)
 8003c22:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	2108      	movs	r1, #8
 8003c34:	4836      	ldr	r0, [pc, #216]	; (8003d10 <runFRTask+0x29c>)
 8003c36:	f001 ff9b 	bl	8005b70 <HAL_GPIO_WritePin>
 8003c3a:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <runFRTask+0x288>)
 8003c3c:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2120      	movs	r1, #32
 8003c4e:	4830      	ldr	r0, [pc, #192]	; (8003d10 <runFRTask+0x29c>)
 8003c50:	f001 ff8e 	bl	8005b70 <HAL_GPIO_WritePin>
 8003c54:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <runFRTask+0x288>)
 8003c56:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	2110      	movs	r1, #16
 8003c68:	4829      	ldr	r0, [pc, #164]	; (8003d10 <runFRTask+0x29c>)
 8003c6a:	f001 ff81 	bl	8005b70 <HAL_GPIO_WritePin>
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <runFRTask+0x288>)
 8003c70:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <runFRTask+0x2a0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <runFRTask+0x288>)
 8003c7c:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8003c80:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <runFRTask+0x2a0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003c86:	4821      	ldr	r0, [pc, #132]	; (8003d0c <runFRTask+0x298>)
 8003c88:	f7ff f802 	bl	8002c90 <RobotTurn>
        osDelay(10);
 8003c8c:	200a      	movs	r0, #10
 8003c8e:	f006 fbed 	bl	800a46c <osDelay>
        targetDist = 7;
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <runFRTask+0x2a4>)
 8003c94:	4a21      	ldr	r2, [pc, #132]	; (8003d1c <runFRTask+0x2a8>)
 8003c96:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	481e      	ldr	r0, [pc, #120]	; (8003d18 <runFRTask+0x2a4>)
 8003c9e:	f7fe fd07 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8003ca2:	200a      	movs	r0, #10
 8003ca4:	f006 fbe2 	bl	800a46c <osDelay>
        break;
 8003ca8:	e09f      	b.n	8003dea <runFRTask+0x376>
      default: // FR00 (indoor 3x1)
        targetDist = 4;
 8003caa:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <runFRTask+0x2a4>)
 8003cac:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003cb0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4818      	ldr	r0, [pc, #96]	; (8003d18 <runFRTask+0x2a4>)
 8003cb8:	f7fe fcfa 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8003cbc:	200a      	movs	r0, #10
 8003cbe:	f006 fbd5 	bl	800a46c <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <runFRTask+0x288>)
 8003cc4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003cc8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003d00 <runFRTask+0x28c>
 8003ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd4:	dd01      	ble.n	8003cda <runFRTask+0x266>
 8003cd6:	23e1      	movs	r3, #225	; 0xe1
 8003cd8:	e029      	b.n	8003d2e <runFRTask+0x2ba>
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <runFRTask+0x288>)
 8003cdc:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003ce0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003d04 <runFRTask+0x290>
 8003ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cec:	d518      	bpl.n	8003d20 <runFRTask+0x2ac>
 8003cee:	2355      	movs	r3, #85	; 0x55
 8003cf0:	e01d      	b.n	8003d2e <runFRTask+0x2ba>
 8003cf2:	bf00      	nop
 8003cf4:	20000134 	.word	0x20000134
 8003cf8:	2000042c 	.word	0x2000042c
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	43610000 	.word	0x43610000
 8003d04:	42aa0000 	.word	0x42aa0000
 8003d08:	20000210 	.word	0x20000210
 8003d0c:	20000444 	.word	0x20000444
 8003d10:	40020000 	.word	0x40020000
 8003d14:	20000330 	.word	0x20000330
 8003d18:	2000045c 	.word	0x2000045c
 8003d1c:	40e00000 	.word	0x40e00000
 8003d20:	4b51      	ldr	r3, [pc, #324]	; (8003e68 <runFRTask+0x3f4>)
 8003d22:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d2a:	ee17 3a90 	vmov	r3, s15
 8003d2e:	4a4f      	ldr	r2, [pc, #316]	; (8003e6c <runFRTask+0x3f8>)
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	6413      	str	r3, [r2, #64]	; 0x40
 8003d34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003d38:	f001 fbe6 	bl	8005508 <HAL_Delay>
 8003d3c:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <runFRTask+0x3f4>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	4a4b      	ldr	r2, [pc, #300]	; (8003e70 <runFRTask+0x3fc>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b48      	ldr	r3, [pc, #288]	; (8003e68 <runFRTask+0x3f4>)
 8003d48:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	2104      	movs	r1, #4
 8003d5a:	4846      	ldr	r0, [pc, #280]	; (8003e74 <runFRTask+0x400>)
 8003d5c:	f001 ff08 	bl	8005b70 <HAL_GPIO_WritePin>
 8003d60:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <runFRTask+0x3f4>)
 8003d62:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf14      	ite	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	2300      	moveq	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	2108      	movs	r1, #8
 8003d74:	483f      	ldr	r0, [pc, #252]	; (8003e74 <runFRTask+0x400>)
 8003d76:	f001 fefb 	bl	8005b70 <HAL_GPIO_WritePin>
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <runFRTask+0x3f4>)
 8003d7c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2120      	movs	r1, #32
 8003d8e:	4839      	ldr	r0, [pc, #228]	; (8003e74 <runFRTask+0x400>)
 8003d90:	f001 feee 	bl	8005b70 <HAL_GPIO_WritePin>
 8003d94:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <runFRTask+0x3f4>)
 8003d96:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf14      	ite	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	2300      	moveq	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	2110      	movs	r1, #16
 8003da8:	4832      	ldr	r0, [pc, #200]	; (8003e74 <runFRTask+0x400>)
 8003daa:	f001 fee1 	bl	8005b70 <HAL_GPIO_WritePin>
 8003dae:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <runFRTask+0x3f4>)
 8003db0:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8003db4:	4b30      	ldr	r3, [pc, #192]	; (8003e78 <runFRTask+0x404>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dba:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <runFRTask+0x3f4>)
 8003dbc:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003dc0:	4b2d      	ldr	r3, [pc, #180]	; (8003e78 <runFRTask+0x404>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003dc6:	482a      	ldr	r0, [pc, #168]	; (8003e70 <runFRTask+0x3fc>)
 8003dc8:	f7fe ff62 	bl	8002c90 <RobotTurn>
        osDelay(10);
 8003dcc:	200a      	movs	r0, #10
 8003dce:	f006 fb4d 	bl	800a46c <osDelay>
        targetDist = 7;
 8003dd2:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <runFRTask+0x408>)
 8003dd4:	4a2a      	ldr	r2, [pc, #168]	; (8003e80 <runFRTask+0x40c>)
 8003dd6:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4827      	ldr	r0, [pc, #156]	; (8003e7c <runFRTask+0x408>)
 8003dde:	f7fe fc67 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8003de2:	200a      	movs	r0, #10
 8003de4:	f006 fb42 	bl	800a46c <osDelay>
        break;
 8003de8:	bf00      	nop
      }
      clickOnce = 0;
 8003dea:	4b26      	ldr	r3, [pc, #152]	; (8003e84 <runFRTask+0x410>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8003df0:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <runFRTask+0x414>)
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <runFRTask+0x418>)
 8003df6:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8003df8:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <runFRTask+0x414>)
 8003dfa:	220b      	movs	r2, #11
 8003dfc:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <runFRTask+0x41c>)
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <runFRTask+0x41c>)
 8003e04:	785b      	ldrb	r3, [r3, #1]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d112      	bne.n	8003e30 <runFRTask+0x3bc>
      {
        __CLEAR_CURCMD(curCmd);
 8003e0a:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <runFRTask+0x420>)
 8003e0c:	2264      	movs	r2, #100	; 0x64
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <runFRTask+0x420>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8003e16:	4a20      	ldr	r2, [pc, #128]	; (8003e98 <runFRTask+0x424>)
 8003e18:	210f      	movs	r1, #15
 8003e1a:	4820      	ldr	r0, [pc, #128]	; (8003e9c <runFRTask+0x428>)
 8003e1c:	f009 fb5a 	bl	800d4d4 <sniprintf>
 8003e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e24:	2206      	movs	r2, #6
 8003e26:	491e      	ldr	r1, [pc, #120]	; (8003ea0 <runFRTask+0x42c>)
 8003e28:	481e      	ldr	r0, [pc, #120]	; (8003ea4 <runFRTask+0x430>)
 8003e2a:	f005 f9d4 	bl	80091d6 <HAL_UART_Transmit>
 8003e2e:	e625      	b.n	8003a7c <runFRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <runFRTask+0x41c>)
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <runFRTask+0x420>)
 8003e36:	4916      	ldr	r1, [pc, #88]	; (8003e90 <runFRTask+0x41c>)
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <runFRTask+0x41c>)
 8003e42:	785b      	ldrb	r3, [r3, #1]
 8003e44:	3301      	adds	r3, #1
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <runFRTask+0x41c>)
 8003e48:	7892      	ldrb	r2, [r2, #2]
 8003e4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e4e:	fb01 f202 	mul.w	r2, r1, r2
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <runFRTask+0x41c>)
 8003e58:	705a      	strb	r2, [r3, #1]
 8003e5a:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <runFRTask+0x434>)
 8003e5c:	210f      	movs	r1, #15
 8003e5e:	480f      	ldr	r0, [pc, #60]	; (8003e9c <runFRTask+0x428>)
 8003e60:	f009 fb38 	bl	800d4d4 <sniprintf>
    if (curTask != TASK_FR)
 8003e64:	e60a      	b.n	8003a7c <runFRTask+0x8>
 8003e66:	bf00      	nop
 8003e68:	20000004 	.word	0x20000004
 8003e6c:	20000210 	.word	0x20000210
 8003e70:	20000444 	.word	0x20000444
 8003e74:	40020000 	.word	0x40020000
 8003e78:	20000330 	.word	0x20000330
 8003e7c:	2000045c 	.word	0x2000045c
 8003e80:	40e00000 	.word	0x40e00000
 8003e84:	200004b4 	.word	0x200004b4
 8003e88:	20000134 	.word	0x20000134
 8003e8c:	20000135 	.word	0x20000135
 8003e90:	200003f8 	.word	0x200003f8
 8003e94:	2000042c 	.word	0x2000042c
 8003e98:	0800ded4 	.word	0x0800ded4
 8003e9c:	20000430 	.word	0x20000430
 8003ea0:	0800dedc 	.word	0x0800dedc
 8003ea4:	20000378 	.word	0x20000378
 8003ea8:	0800dee4 	.word	0x0800dee4

08003eac <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 8003eb4:	4b9d      	ldr	r3, [pc, #628]	; (800412c <runBLTask+0x280>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d003      	beq.n	8003ec4 <runBLTask+0x18>
      osDelay(100);
 8003ebc:	2064      	movs	r0, #100	; 0x64
 8003ebe:	f006 fad5 	bl	800a46c <osDelay>
 8003ec2:	e7f7      	b.n	8003eb4 <runBLTask+0x8>
    else
    {

      switch (curCmd.val)
 8003ec4:	4b9a      	ldr	r3, [pc, #616]	; (8004130 <runBLTask+0x284>)
 8003ec6:	885b      	ldrh	r3, [r3, #2]
 8003ec8:	2b14      	cmp	r3, #20
 8003eca:	f000 8081 	beq.w	8003fd0 <runBLTask+0x124>
 8003ece:	2b1e      	cmp	r3, #30
 8003ed0:	f040 8107 	bne.w	80040e2 <runBLTask+0x236>
      {
      case 30: // BL30 (4x2)
        __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 8003ed4:	4b97      	ldr	r3, [pc, #604]	; (8004134 <runBLTask+0x288>)
 8003ed6:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8003eda:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8004138 <runBLTask+0x28c>
 8003ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee6:	dd01      	ble.n	8003eec <runBLTask+0x40>
 8003ee8:	23e1      	movs	r3, #225	; 0xe1
 8003eea:	e012      	b.n	8003f12 <runBLTask+0x66>
 8003eec:	4b91      	ldr	r3, [pc, #580]	; (8004134 <runBLTask+0x288>)
 8003eee:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8003ef2:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800413c <runBLTask+0x290>
 8003ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003efe:	d501      	bpl.n	8003f04 <runBLTask+0x58>
 8003f00:	2355      	movs	r3, #85	; 0x55
 8003f02:	e006      	b.n	8003f12 <runBLTask+0x66>
 8003f04:	4b8b      	ldr	r3, [pc, #556]	; (8004134 <runBLTask+0x288>)
 8003f06:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8003f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0e:	ee17 3a90 	vmov	r3, s15
 8003f12:	4a8b      	ldr	r2, [pc, #556]	; (8004140 <runBLTask+0x294>)
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	6413      	str	r3, [r2, #64]	; 0x40
 8003f18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003f1c:	f001 faf4 	bl	8005508 <HAL_Delay>
 8003f20:	4b84      	ldr	r3, [pc, #528]	; (8004134 <runBLTask+0x288>)
 8003f22:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003f26:	4a87      	ldr	r2, [pc, #540]	; (8004144 <runBLTask+0x298>)
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b82      	ldr	r3, [pc, #520]	; (8004134 <runBLTask+0x288>)
 8003f2c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	4882      	ldr	r0, [pc, #520]	; (8004148 <runBLTask+0x29c>)
 8003f40:	f001 fe16 	bl	8005b70 <HAL_GPIO_WritePin>
 8003f44:	4b7b      	ldr	r3, [pc, #492]	; (8004134 <runBLTask+0x288>)
 8003f46:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	2108      	movs	r1, #8
 8003f58:	487b      	ldr	r0, [pc, #492]	; (8004148 <runBLTask+0x29c>)
 8003f5a:	f001 fe09 	bl	8005b70 <HAL_GPIO_WritePin>
 8003f5e:	4b75      	ldr	r3, [pc, #468]	; (8004134 <runBLTask+0x288>)
 8003f60:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2120      	movs	r1, #32
 8003f72:	4875      	ldr	r0, [pc, #468]	; (8004148 <runBLTask+0x29c>)
 8003f74:	f001 fdfc 	bl	8005b70 <HAL_GPIO_WritePin>
 8003f78:	4b6e      	ldr	r3, [pc, #440]	; (8004134 <runBLTask+0x288>)
 8003f7a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2110      	movs	r1, #16
 8003f8c:	486e      	ldr	r0, [pc, #440]	; (8004148 <runBLTask+0x29c>)
 8003f8e:	f001 fdef 	bl	8005b70 <HAL_GPIO_WritePin>
 8003f92:	4b68      	ldr	r3, [pc, #416]	; (8004134 <runBLTask+0x288>)
 8003f94:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 8003f98:	4b6c      	ldr	r3, [pc, #432]	; (800414c <runBLTask+0x2a0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f9e:	4b65      	ldr	r3, [pc, #404]	; (8004134 <runBLTask+0x288>)
 8003fa0:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8003fa4:	4b69      	ldr	r3, [pc, #420]	; (800414c <runBLTask+0x2a0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8003faa:	4866      	ldr	r0, [pc, #408]	; (8004144 <runBLTask+0x298>)
 8003fac:	f7fe fe70 	bl	8002c90 <RobotTurn>
        osDelay(10);
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	f006 fa5b 	bl	800a46c <osDelay>
        targetDist = 4;
 8003fb6:	4b66      	ldr	r3, [pc, #408]	; (8004150 <runBLTask+0x2a4>)
 8003fb8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003fbc:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4863      	ldr	r0, [pc, #396]	; (8004150 <runBLTask+0x2a4>)
 8003fc4:	f7fe fb74 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8003fc8:	200a      	movs	r0, #10
 8003fca:	f006 fa4f 	bl	800a46c <osDelay>
        break;
 8003fce:	e128      	b.n	8004222 <runBLTask+0x376>
      case 20: // BL20 (outdoor 3x1)
        targetDist = 4;
 8003fd0:	4b5f      	ldr	r3, [pc, #380]	; (8004150 <runBLTask+0x2a4>)
 8003fd2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8003fd6:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2100      	movs	r1, #0
 8003fdc:	485c      	ldr	r0, [pc, #368]	; (8004150 <runBLTask+0x2a4>)
 8003fde:	f7fe fb67 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8003fe2:	200a      	movs	r0, #10
 8003fe4:	f006 fa42 	bl	800a46c <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 8003fe8:	4b52      	ldr	r3, [pc, #328]	; (8004134 <runBLTask+0x288>)
 8003fea:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003fee:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004138 <runBLTask+0x28c>
 8003ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffa:	dd01      	ble.n	8004000 <runBLTask+0x154>
 8003ffc:	23e1      	movs	r3, #225	; 0xe1
 8003ffe:	e012      	b.n	8004026 <runBLTask+0x17a>
 8004000:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <runBLTask+0x288>)
 8004002:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8004006:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800413c <runBLTask+0x290>
 800400a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	d501      	bpl.n	8004018 <runBLTask+0x16c>
 8004014:	2355      	movs	r3, #85	; 0x55
 8004016:	e006      	b.n	8004026 <runBLTask+0x17a>
 8004018:	4b46      	ldr	r3, [pc, #280]	; (8004134 <runBLTask+0x288>)
 800401a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800401e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004022:	ee17 3a90 	vmov	r3, s15
 8004026:	4a46      	ldr	r2, [pc, #280]	; (8004140 <runBLTask+0x294>)
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	6413      	str	r3, [r2, #64]	; 0x40
 800402c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004030:	f001 fa6a 	bl	8005508 <HAL_Delay>
 8004034:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <runBLTask+0x288>)
 8004036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800403a:	4a42      	ldr	r2, [pc, #264]	; (8004144 <runBLTask+0x298>)
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b3d      	ldr	r3, [pc, #244]	; (8004134 <runBLTask+0x288>)
 8004040:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	2104      	movs	r1, #4
 8004052:	483d      	ldr	r0, [pc, #244]	; (8004148 <runBLTask+0x29c>)
 8004054:	f001 fd8c 	bl	8005b70 <HAL_GPIO_WritePin>
 8004058:	4b36      	ldr	r3, [pc, #216]	; (8004134 <runBLTask+0x288>)
 800405a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800405e:	2b00      	cmp	r3, #0
 8004060:	bf14      	ite	ne
 8004062:	2301      	movne	r3, #1
 8004064:	2300      	moveq	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	2108      	movs	r1, #8
 800406c:	4836      	ldr	r0, [pc, #216]	; (8004148 <runBLTask+0x29c>)
 800406e:	f001 fd7f 	bl	8005b70 <HAL_GPIO_WritePin>
 8004072:	4b30      	ldr	r3, [pc, #192]	; (8004134 <runBLTask+0x288>)
 8004074:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	2120      	movs	r1, #32
 8004086:	4830      	ldr	r0, [pc, #192]	; (8004148 <runBLTask+0x29c>)
 8004088:	f001 fd72 	bl	8005b70 <HAL_GPIO_WritePin>
 800408c:	4b29      	ldr	r3, [pc, #164]	; (8004134 <runBLTask+0x288>)
 800408e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	2110      	movs	r1, #16
 80040a0:	4829      	ldr	r0, [pc, #164]	; (8004148 <runBLTask+0x29c>)
 80040a2:	f001 fd65 	bl	8005b70 <HAL_GPIO_WritePin>
 80040a6:	4b23      	ldr	r3, [pc, #140]	; (8004134 <runBLTask+0x288>)
 80040a8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80040ac:	4b27      	ldr	r3, [pc, #156]	; (800414c <runBLTask+0x2a0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	635a      	str	r2, [r3, #52]	; 0x34
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <runBLTask+0x288>)
 80040b4:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80040b8:	4b24      	ldr	r3, [pc, #144]	; (800414c <runBLTask+0x2a0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80040be:	4821      	ldr	r0, [pc, #132]	; (8004144 <runBLTask+0x298>)
 80040c0:	f7fe fde6 	bl	8002c90 <RobotTurn>
        osDelay(10);
 80040c4:	200a      	movs	r0, #10
 80040c6:	f006 f9d1 	bl	800a46c <osDelay>
        targetDist = 7;
 80040ca:	4b21      	ldr	r3, [pc, #132]	; (8004150 <runBLTask+0x2a4>)
 80040cc:	4a21      	ldr	r2, [pc, #132]	; (8004154 <runBLTask+0x2a8>)
 80040ce:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80040d0:	2200      	movs	r2, #0
 80040d2:	2100      	movs	r1, #0
 80040d4:	481e      	ldr	r0, [pc, #120]	; (8004150 <runBLTask+0x2a4>)
 80040d6:	f7fe faeb 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 80040da:	200a      	movs	r0, #10
 80040dc:	f006 f9c6 	bl	800a46c <osDelay>
        break;
 80040e0:	e09f      	b.n	8004222 <runBLTask+0x376>
      default: // BL00 (indoor 3x1)
        targetDist = 4;
 80040e2:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <runBLTask+0x2a4>)
 80040e4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80040e8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80040ea:	2200      	movs	r2, #0
 80040ec:	2100      	movs	r1, #0
 80040ee:	4818      	ldr	r0, [pc, #96]	; (8004150 <runBLTask+0x2a4>)
 80040f0:	f7fe fade 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 80040f4:	200a      	movs	r0, #10
 80040f6:	f006 f9b9 	bl	800a46c <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <runBLTask+0x288>)
 80040fc:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004100:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004138 <runBLTask+0x28c>
 8004104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410c:	dd01      	ble.n	8004112 <runBLTask+0x266>
 800410e:	23e1      	movs	r3, #225	; 0xe1
 8004110:	e029      	b.n	8004166 <runBLTask+0x2ba>
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <runBLTask+0x288>)
 8004114:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004118:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800413c <runBLTask+0x290>
 800411c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	d518      	bpl.n	8004158 <runBLTask+0x2ac>
 8004126:	2355      	movs	r3, #85	; 0x55
 8004128:	e01d      	b.n	8004166 <runBLTask+0x2ba>
 800412a:	bf00      	nop
 800412c:	20000134 	.word	0x20000134
 8004130:	2000042c 	.word	0x2000042c
 8004134:	20000004 	.word	0x20000004
 8004138:	43610000 	.word	0x43610000
 800413c:	42aa0000 	.word	0x42aa0000
 8004140:	20000210 	.word	0x20000210
 8004144:	20000444 	.word	0x20000444
 8004148:	40020000 	.word	0x40020000
 800414c:	20000330 	.word	0x20000330
 8004150:	2000045c 	.word	0x2000045c
 8004154:	40e00000 	.word	0x40e00000
 8004158:	4b51      	ldr	r3, [pc, #324]	; (80042a0 <runBLTask+0x3f4>)
 800415a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800415e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004162:	ee17 3a90 	vmov	r3, s15
 8004166:	4a4f      	ldr	r2, [pc, #316]	; (80042a4 <runBLTask+0x3f8>)
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	6413      	str	r3, [r2, #64]	; 0x40
 800416c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004170:	f001 f9ca 	bl	8005508 <HAL_Delay>
 8004174:	4b4a      	ldr	r3, [pc, #296]	; (80042a0 <runBLTask+0x3f4>)
 8004176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800417a:	4a4b      	ldr	r2, [pc, #300]	; (80042a8 <runBLTask+0x3fc>)
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b48      	ldr	r3, [pc, #288]	; (80042a0 <runBLTask+0x3f4>)
 8004180:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	2104      	movs	r1, #4
 8004192:	4846      	ldr	r0, [pc, #280]	; (80042ac <runBLTask+0x400>)
 8004194:	f001 fcec 	bl	8005b70 <HAL_GPIO_WritePin>
 8004198:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <runBLTask+0x3f4>)
 800419a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf14      	ite	ne
 80041a2:	2301      	movne	r3, #1
 80041a4:	2300      	moveq	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	2108      	movs	r1, #8
 80041ac:	483f      	ldr	r0, [pc, #252]	; (80042ac <runBLTask+0x400>)
 80041ae:	f001 fcdf 	bl	8005b70 <HAL_GPIO_WritePin>
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <runBLTask+0x3f4>)
 80041b4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	2120      	movs	r1, #32
 80041c6:	4839      	ldr	r0, [pc, #228]	; (80042ac <runBLTask+0x400>)
 80041c8:	f001 fcd2 	bl	8005b70 <HAL_GPIO_WritePin>
 80041cc:	4b34      	ldr	r3, [pc, #208]	; (80042a0 <runBLTask+0x3f4>)
 80041ce:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	2110      	movs	r1, #16
 80041e0:	4832      	ldr	r0, [pc, #200]	; (80042ac <runBLTask+0x400>)
 80041e2:	f001 fcc5 	bl	8005b70 <HAL_GPIO_WritePin>
 80041e6:	4b2e      	ldr	r3, [pc, #184]	; (80042a0 <runBLTask+0x3f4>)
 80041e8:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 80041ec:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <runBLTask+0x404>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <runBLTask+0x3f4>)
 80041f4:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 80041f8:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <runBLTask+0x404>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80041fe:	482a      	ldr	r0, [pc, #168]	; (80042a8 <runBLTask+0x3fc>)
 8004200:	f7fe fd46 	bl	8002c90 <RobotTurn>
        osDelay(10);
 8004204:	200a      	movs	r0, #10
 8004206:	f006 f931 	bl	800a46c <osDelay>
        targetDist = 7;
 800420a:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <runBLTask+0x408>)
 800420c:	4a2a      	ldr	r2, [pc, #168]	; (80042b8 <runBLTask+0x40c>)
 800420e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004210:	2200      	movs	r2, #0
 8004212:	2100      	movs	r1, #0
 8004214:	4827      	ldr	r0, [pc, #156]	; (80042b4 <runBLTask+0x408>)
 8004216:	f7fe fa4b 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 800421a:	200a      	movs	r0, #10
 800421c:	f006 f926 	bl	800a46c <osDelay>
        break;
 8004220:	bf00      	nop
      }
      clickOnce = 0;
 8004222:	4b26      	ldr	r3, [pc, #152]	; (80042bc <runBLTask+0x410>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <runBLTask+0x414>)
 800422a:	781a      	ldrb	r2, [r3, #0]
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <runBLTask+0x418>)
 800422e:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004230:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <runBLTask+0x414>)
 8004232:	220b      	movs	r2, #11
 8004234:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004236:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <runBLTask+0x41c>)
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <runBLTask+0x41c>)
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	429a      	cmp	r2, r3
 8004240:	d112      	bne.n	8004268 <runBLTask+0x3bc>
      {
        __CLEAR_CURCMD(curCmd);
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <runBLTask+0x420>)
 8004244:	2264      	movs	r2, #100	; 0x64
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <runBLTask+0x420>)
 800424a:	2200      	movs	r2, #0
 800424c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800424e:	4a20      	ldr	r2, [pc, #128]	; (80042d0 <runBLTask+0x424>)
 8004250:	210f      	movs	r1, #15
 8004252:	4820      	ldr	r0, [pc, #128]	; (80042d4 <runBLTask+0x428>)
 8004254:	f009 f93e 	bl	800d4d4 <sniprintf>
 8004258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800425c:	2206      	movs	r2, #6
 800425e:	491e      	ldr	r1, [pc, #120]	; (80042d8 <runBLTask+0x42c>)
 8004260:	481e      	ldr	r0, [pc, #120]	; (80042dc <runBLTask+0x430>)
 8004262:	f004 ffb8 	bl	80091d6 <HAL_UART_Transmit>
 8004266:	e625      	b.n	8003eb4 <runBLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004268:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <runBLTask+0x41c>)
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	4a17      	ldr	r2, [pc, #92]	; (80042cc <runBLTask+0x420>)
 800426e:	4916      	ldr	r1, [pc, #88]	; (80042c8 <runBLTask+0x41c>)
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <runBLTask+0x41c>)
 800427a:	785b      	ldrb	r3, [r3, #1]
 800427c:	3301      	adds	r3, #1
 800427e:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <runBLTask+0x41c>)
 8004280:	7892      	ldrb	r2, [r2, #2]
 8004282:	fb93 f1f2 	sdiv	r1, r3, r2
 8004286:	fb01 f202 	mul.w	r2, r1, r2
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <runBLTask+0x41c>)
 8004290:	705a      	strb	r2, [r3, #1]
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <runBLTask+0x434>)
 8004294:	210f      	movs	r1, #15
 8004296:	480f      	ldr	r0, [pc, #60]	; (80042d4 <runBLTask+0x428>)
 8004298:	f009 f91c 	bl	800d4d4 <sniprintf>
    if (curTask != TASK_BL)
 800429c:	e60a      	b.n	8003eb4 <runBLTask+0x8>
 800429e:	bf00      	nop
 80042a0:	20000004 	.word	0x20000004
 80042a4:	20000210 	.word	0x20000210
 80042a8:	20000444 	.word	0x20000444
 80042ac:	40020000 	.word	0x40020000
 80042b0:	20000330 	.word	0x20000330
 80042b4:	2000045c 	.word	0x2000045c
 80042b8:	40e00000 	.word	0x40e00000
 80042bc:	200004b4 	.word	0x200004b4
 80042c0:	20000134 	.word	0x20000134
 80042c4:	20000135 	.word	0x20000135
 80042c8:	200003f8 	.word	0x200003f8
 80042cc:	2000042c 	.word	0x2000042c
 80042d0:	0800ded4 	.word	0x0800ded4
 80042d4:	20000430 	.word	0x20000430
 80042d8:	0800dedc 	.word	0x0800dedc
 80042dc:	20000378 	.word	0x20000378
 80042e0:	0800dee4 	.word	0x0800dee4

080042e4 <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 80042ec:	4b9d      	ldr	r3, [pc, #628]	; (8004564 <runBRTask+0x280>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b05      	cmp	r3, #5
 80042f2:	d003      	beq.n	80042fc <runBRTask+0x18>
      osDelay(100);
 80042f4:	2064      	movs	r0, #100	; 0x64
 80042f6:	f006 f8b9 	bl	800a46c <osDelay>
 80042fa:	e7f7      	b.n	80042ec <runBRTask+0x8>
    else
    {

      switch (curCmd.val)
 80042fc:	4b9a      	ldr	r3, [pc, #616]	; (8004568 <runBRTask+0x284>)
 80042fe:	885b      	ldrh	r3, [r3, #2]
 8004300:	2b14      	cmp	r3, #20
 8004302:	f000 8081 	beq.w	8004408 <runBRTask+0x124>
 8004306:	2b1e      	cmp	r3, #30
 8004308:	f040 8107 	bne.w	800451a <runBRTask+0x236>
      {
      case 30: // BR30 (4x2)
        __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 800430c:	4b97      	ldr	r3, [pc, #604]	; (800456c <runBRTask+0x288>)
 800430e:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8004312:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8004570 <runBRTask+0x28c>
 8004316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431e:	dd01      	ble.n	8004324 <runBRTask+0x40>
 8004320:	23e1      	movs	r3, #225	; 0xe1
 8004322:	e012      	b.n	800434a <runBRTask+0x66>
 8004324:	4b91      	ldr	r3, [pc, #580]	; (800456c <runBRTask+0x288>)
 8004326:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 800432a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8004574 <runBRTask+0x290>
 800432e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004336:	d501      	bpl.n	800433c <runBRTask+0x58>
 8004338:	2355      	movs	r3, #85	; 0x55
 800433a:	e006      	b.n	800434a <runBRTask+0x66>
 800433c:	4b8b      	ldr	r3, [pc, #556]	; (800456c <runBRTask+0x288>)
 800433e:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8004342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004346:	ee17 3a90 	vmov	r3, s15
 800434a:	4a8b      	ldr	r2, [pc, #556]	; (8004578 <runBRTask+0x294>)
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	6413      	str	r3, [r2, #64]	; 0x40
 8004350:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004354:	f001 f8d8 	bl	8005508 <HAL_Delay>
 8004358:	4b84      	ldr	r3, [pc, #528]	; (800456c <runBRTask+0x288>)
 800435a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800435e:	4a87      	ldr	r2, [pc, #540]	; (800457c <runBRTask+0x298>)
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b82      	ldr	r3, [pc, #520]	; (800456c <runBRTask+0x288>)
 8004364:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	2104      	movs	r1, #4
 8004376:	4882      	ldr	r0, [pc, #520]	; (8004580 <runBRTask+0x29c>)
 8004378:	f001 fbfa 	bl	8005b70 <HAL_GPIO_WritePin>
 800437c:	4b7b      	ldr	r3, [pc, #492]	; (800456c <runBRTask+0x288>)
 800437e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	2108      	movs	r1, #8
 8004390:	487b      	ldr	r0, [pc, #492]	; (8004580 <runBRTask+0x29c>)
 8004392:	f001 fbed 	bl	8005b70 <HAL_GPIO_WritePin>
 8004396:	4b75      	ldr	r3, [pc, #468]	; (800456c <runBRTask+0x288>)
 8004398:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	2120      	movs	r1, #32
 80043aa:	4875      	ldr	r0, [pc, #468]	; (8004580 <runBRTask+0x29c>)
 80043ac:	f001 fbe0 	bl	8005b70 <HAL_GPIO_WritePin>
 80043b0:	4b6e      	ldr	r3, [pc, #440]	; (800456c <runBRTask+0x288>)
 80043b2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bf14      	ite	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	2300      	moveq	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	2110      	movs	r1, #16
 80043c4:	486e      	ldr	r0, [pc, #440]	; (8004580 <runBRTask+0x29c>)
 80043c6:	f001 fbd3 	bl	8005b70 <HAL_GPIO_WritePin>
 80043ca:	4b68      	ldr	r3, [pc, #416]	; (800456c <runBRTask+0x288>)
 80043cc:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 80043d0:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <runBRTask+0x2a0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	635a      	str	r2, [r3, #52]	; 0x34
 80043d6:	4b65      	ldr	r3, [pc, #404]	; (800456c <runBRTask+0x288>)
 80043d8:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 80043dc:	4b69      	ldr	r3, [pc, #420]	; (8004584 <runBRTask+0x2a0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80043e2:	4866      	ldr	r0, [pc, #408]	; (800457c <runBRTask+0x298>)
 80043e4:	f7fe fc54 	bl	8002c90 <RobotTurn>
        osDelay(10);
 80043e8:	200a      	movs	r0, #10
 80043ea:	f006 f83f 	bl	800a46c <osDelay>
        targetDist = 4;
 80043ee:	4b66      	ldr	r3, [pc, #408]	; (8004588 <runBRTask+0x2a4>)
 80043f0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80043f4:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2100      	movs	r1, #0
 80043fa:	4863      	ldr	r0, [pc, #396]	; (8004588 <runBRTask+0x2a4>)
 80043fc:	f7fe f958 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8004400:	200a      	movs	r0, #10
 8004402:	f006 f833 	bl	800a46c <osDelay>
        break;
 8004406:	e128      	b.n	800465a <runBRTask+0x376>
      case 20: // BR20 (outdoor 3x1)
        targetDist = 4;
 8004408:	4b5f      	ldr	r3, [pc, #380]	; (8004588 <runBRTask+0x2a4>)
 800440a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800440e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004410:	2200      	movs	r2, #0
 8004412:	2100      	movs	r1, #0
 8004414:	485c      	ldr	r0, [pc, #368]	; (8004588 <runBRTask+0x2a4>)
 8004416:	f7fe f94b 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 800441a:	200a      	movs	r0, #10
 800441c:	f006 f826 	bl	800a46c <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 8004420:	4b52      	ldr	r3, [pc, #328]	; (800456c <runBRTask+0x288>)
 8004422:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8004426:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004570 <runBRTask+0x28c>
 800442a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004432:	dd01      	ble.n	8004438 <runBRTask+0x154>
 8004434:	23e1      	movs	r3, #225	; 0xe1
 8004436:	e012      	b.n	800445e <runBRTask+0x17a>
 8004438:	4b4c      	ldr	r3, [pc, #304]	; (800456c <runBRTask+0x288>)
 800443a:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800443e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004574 <runBRTask+0x290>
 8004442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444a:	d501      	bpl.n	8004450 <runBRTask+0x16c>
 800444c:	2355      	movs	r3, #85	; 0x55
 800444e:	e006      	b.n	800445e <runBRTask+0x17a>
 8004450:	4b46      	ldr	r3, [pc, #280]	; (800456c <runBRTask+0x288>)
 8004452:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8004456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445a:	ee17 3a90 	vmov	r3, s15
 800445e:	4a46      	ldr	r2, [pc, #280]	; (8004578 <runBRTask+0x294>)
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	6413      	str	r3, [r2, #64]	; 0x40
 8004464:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004468:	f001 f84e 	bl	8005508 <HAL_Delay>
 800446c:	4b3f      	ldr	r3, [pc, #252]	; (800456c <runBRTask+0x288>)
 800446e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004472:	4a42      	ldr	r2, [pc, #264]	; (800457c <runBRTask+0x298>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <runBRTask+0x288>)
 8004478:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	2104      	movs	r1, #4
 800448a:	483d      	ldr	r0, [pc, #244]	; (8004580 <runBRTask+0x29c>)
 800448c:	f001 fb70 	bl	8005b70 <HAL_GPIO_WritePin>
 8004490:	4b36      	ldr	r3, [pc, #216]	; (800456c <runBRTask+0x288>)
 8004492:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf14      	ite	ne
 800449a:	2301      	movne	r3, #1
 800449c:	2300      	moveq	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	2108      	movs	r1, #8
 80044a4:	4836      	ldr	r0, [pc, #216]	; (8004580 <runBRTask+0x29c>)
 80044a6:	f001 fb63 	bl	8005b70 <HAL_GPIO_WritePin>
 80044aa:	4b30      	ldr	r3, [pc, #192]	; (800456c <runBRTask+0x288>)
 80044ac:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	2120      	movs	r1, #32
 80044be:	4830      	ldr	r0, [pc, #192]	; (8004580 <runBRTask+0x29c>)
 80044c0:	f001 fb56 	bl	8005b70 <HAL_GPIO_WritePin>
 80044c4:	4b29      	ldr	r3, [pc, #164]	; (800456c <runBRTask+0x288>)
 80044c6:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bf14      	ite	ne
 80044ce:	2301      	movne	r3, #1
 80044d0:	2300      	moveq	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	2110      	movs	r1, #16
 80044d8:	4829      	ldr	r0, [pc, #164]	; (8004580 <runBRTask+0x29c>)
 80044da:	f001 fb49 	bl	8005b70 <HAL_GPIO_WritePin>
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <runBRTask+0x288>)
 80044e0:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <runBRTask+0x2a0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <runBRTask+0x288>)
 80044ec:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80044f0:	4b24      	ldr	r3, [pc, #144]	; (8004584 <runBRTask+0x2a0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80044f6:	4821      	ldr	r0, [pc, #132]	; (800457c <runBRTask+0x298>)
 80044f8:	f7fe fbca 	bl	8002c90 <RobotTurn>
        osDelay(10);
 80044fc:	200a      	movs	r0, #10
 80044fe:	f005 ffb5 	bl	800a46c <osDelay>
        targetDist = 7;
 8004502:	4b21      	ldr	r3, [pc, #132]	; (8004588 <runBRTask+0x2a4>)
 8004504:	4a21      	ldr	r2, [pc, #132]	; (800458c <runBRTask+0x2a8>)
 8004506:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004508:	2200      	movs	r2, #0
 800450a:	2100      	movs	r1, #0
 800450c:	481e      	ldr	r0, [pc, #120]	; (8004588 <runBRTask+0x2a4>)
 800450e:	f7fe f8cf 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8004512:	200a      	movs	r0, #10
 8004514:	f005 ffaa 	bl	800a46c <osDelay>
        break;
 8004518:	e09f      	b.n	800465a <runBRTask+0x376>
      default: // BR00 (indoor 3x1)
        targetDist = 4;
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <runBRTask+0x2a4>)
 800451c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004520:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004522:	2200      	movs	r2, #0
 8004524:	2100      	movs	r1, #0
 8004526:	4818      	ldr	r0, [pc, #96]	; (8004588 <runBRTask+0x2a4>)
 8004528:	f7fe f8c2 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 800452c:	200a      	movs	r0, #10
 800452e:	f005 ff9d 	bl	800a46c <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 8004532:	4b0e      	ldr	r3, [pc, #56]	; (800456c <runBRTask+0x288>)
 8004534:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004538:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004570 <runBRTask+0x28c>
 800453c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004544:	dd01      	ble.n	800454a <runBRTask+0x266>
 8004546:	23e1      	movs	r3, #225	; 0xe1
 8004548:	e029      	b.n	800459e <runBRTask+0x2ba>
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <runBRTask+0x288>)
 800454c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004550:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004574 <runBRTask+0x290>
 8004554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455c:	d518      	bpl.n	8004590 <runBRTask+0x2ac>
 800455e:	2355      	movs	r3, #85	; 0x55
 8004560:	e01d      	b.n	800459e <runBRTask+0x2ba>
 8004562:	bf00      	nop
 8004564:	20000134 	.word	0x20000134
 8004568:	2000042c 	.word	0x2000042c
 800456c:	20000004 	.word	0x20000004
 8004570:	43610000 	.word	0x43610000
 8004574:	42aa0000 	.word	0x42aa0000
 8004578:	20000210 	.word	0x20000210
 800457c:	20000444 	.word	0x20000444
 8004580:	40020000 	.word	0x40020000
 8004584:	20000330 	.word	0x20000330
 8004588:	2000045c 	.word	0x2000045c
 800458c:	40e00000 	.word	0x40e00000
 8004590:	4b51      	ldr	r3, [pc, #324]	; (80046d8 <runBRTask+0x3f4>)
 8004592:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459a:	ee17 3a90 	vmov	r3, s15
 800459e:	4a4f      	ldr	r2, [pc, #316]	; (80046dc <runBRTask+0x3f8>)
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	6413      	str	r3, [r2, #64]	; 0x40
 80045a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80045a8:	f000 ffae 	bl	8005508 <HAL_Delay>
 80045ac:	4b4a      	ldr	r3, [pc, #296]	; (80046d8 <runBRTask+0x3f4>)
 80045ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045b2:	4a4b      	ldr	r2, [pc, #300]	; (80046e0 <runBRTask+0x3fc>)
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	4b48      	ldr	r3, [pc, #288]	; (80046d8 <runBRTask+0x3f4>)
 80045b8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	2104      	movs	r1, #4
 80045ca:	4846      	ldr	r0, [pc, #280]	; (80046e4 <runBRTask+0x400>)
 80045cc:	f001 fad0 	bl	8005b70 <HAL_GPIO_WritePin>
 80045d0:	4b41      	ldr	r3, [pc, #260]	; (80046d8 <runBRTask+0x3f4>)
 80045d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	2108      	movs	r1, #8
 80045e4:	483f      	ldr	r0, [pc, #252]	; (80046e4 <runBRTask+0x400>)
 80045e6:	f001 fac3 	bl	8005b70 <HAL_GPIO_WritePin>
 80045ea:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <runBRTask+0x3f4>)
 80045ec:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	2120      	movs	r1, #32
 80045fe:	4839      	ldr	r0, [pc, #228]	; (80046e4 <runBRTask+0x400>)
 8004600:	f001 fab6 	bl	8005b70 <HAL_GPIO_WritePin>
 8004604:	4b34      	ldr	r3, [pc, #208]	; (80046d8 <runBRTask+0x3f4>)
 8004606:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf14      	ite	ne
 800460e:	2301      	movne	r3, #1
 8004610:	2300      	moveq	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	2110      	movs	r1, #16
 8004618:	4832      	ldr	r0, [pc, #200]	; (80046e4 <runBRTask+0x400>)
 800461a:	f001 faa9 	bl	8005b70 <HAL_GPIO_WritePin>
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <runBRTask+0x3f4>)
 8004620:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8004624:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <runBRTask+0x404>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	635a      	str	r2, [r3, #52]	; 0x34
 800462a:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <runBRTask+0x3f4>)
 800462c:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <runBRTask+0x404>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004636:	482a      	ldr	r0, [pc, #168]	; (80046e0 <runBRTask+0x3fc>)
 8004638:	f7fe fb2a 	bl	8002c90 <RobotTurn>
        osDelay(10);
 800463c:	200a      	movs	r0, #10
 800463e:	f005 ff15 	bl	800a46c <osDelay>
        targetDist = 7;
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <runBRTask+0x408>)
 8004644:	4a2a      	ldr	r2, [pc, #168]	; (80046f0 <runBRTask+0x40c>)
 8004646:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004648:	2200      	movs	r2, #0
 800464a:	2100      	movs	r1, #0
 800464c:	4827      	ldr	r0, [pc, #156]	; (80046ec <runBRTask+0x408>)
 800464e:	f7fe f82f 	bl	80026b0 <RobotMoveDist>
        osDelay(10);
 8004652:	200a      	movs	r0, #10
 8004654:	f005 ff0a 	bl	800a46c <osDelay>
        break;
 8004658:	bf00      	nop
      }
      clickOnce = 0;
 800465a:	4b26      	ldr	r3, [pc, #152]	; (80046f4 <runBRTask+0x410>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <runBRTask+0x414>)
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	4b25      	ldr	r3, [pc, #148]	; (80046fc <runBRTask+0x418>)
 8004666:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004668:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <runBRTask+0x414>)
 800466a:	220b      	movs	r2, #11
 800466c:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <runBRTask+0x41c>)
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	4b23      	ldr	r3, [pc, #140]	; (8004700 <runBRTask+0x41c>)
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	429a      	cmp	r2, r3
 8004678:	d112      	bne.n	80046a0 <runBRTask+0x3bc>
      {
        __CLEAR_CURCMD(curCmd);
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <runBRTask+0x420>)
 800467c:	2264      	movs	r2, #100	; 0x64
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	4b20      	ldr	r3, [pc, #128]	; (8004704 <runBRTask+0x420>)
 8004682:	2200      	movs	r2, #0
 8004684:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004686:	4a20      	ldr	r2, [pc, #128]	; (8004708 <runBRTask+0x424>)
 8004688:	210f      	movs	r1, #15
 800468a:	4820      	ldr	r0, [pc, #128]	; (800470c <runBRTask+0x428>)
 800468c:	f008 ff22 	bl	800d4d4 <sniprintf>
 8004690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004694:	2206      	movs	r2, #6
 8004696:	491e      	ldr	r1, [pc, #120]	; (8004710 <runBRTask+0x42c>)
 8004698:	481e      	ldr	r0, [pc, #120]	; (8004714 <runBRTask+0x430>)
 800469a:	f004 fd9c 	bl	80091d6 <HAL_UART_Transmit>
 800469e:	e625      	b.n	80042ec <runBRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80046a0:	4b17      	ldr	r3, [pc, #92]	; (8004700 <runBRTask+0x41c>)
 80046a2:	785b      	ldrb	r3, [r3, #1]
 80046a4:	4a17      	ldr	r2, [pc, #92]	; (8004704 <runBRTask+0x420>)
 80046a6:	4916      	ldr	r1, [pc, #88]	; (8004700 <runBRTask+0x41c>)
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <runBRTask+0x41c>)
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	3301      	adds	r3, #1
 80046b6:	4a12      	ldr	r2, [pc, #72]	; (8004700 <runBRTask+0x41c>)
 80046b8:	7892      	ldrb	r2, [r2, #2]
 80046ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80046be:	fb01 f202 	mul.w	r2, r1, r2
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <runBRTask+0x41c>)
 80046c8:	705a      	strb	r2, [r3, #1]
 80046ca:	4a13      	ldr	r2, [pc, #76]	; (8004718 <runBRTask+0x434>)
 80046cc:	210f      	movs	r1, #15
 80046ce:	480f      	ldr	r0, [pc, #60]	; (800470c <runBRTask+0x428>)
 80046d0:	f008 ff00 	bl	800d4d4 <sniprintf>
    if (curTask != TASK_BR)
 80046d4:	e60a      	b.n	80042ec <runBRTask+0x8>
 80046d6:	bf00      	nop
 80046d8:	20000004 	.word	0x20000004
 80046dc:	20000210 	.word	0x20000210
 80046e0:	20000444 	.word	0x20000444
 80046e4:	40020000 	.word	0x40020000
 80046e8:	20000330 	.word	0x20000330
 80046ec:	2000045c 	.word	0x2000045c
 80046f0:	40e00000 	.word	0x40e00000
 80046f4:	200004b4 	.word	0x200004b4
 80046f8:	20000134 	.word	0x20000134
 80046fc:	20000135 	.word	0x20000135
 8004700:	200003f8 	.word	0x200003f8
 8004704:	2000042c 	.word	0x2000042c
 8004708:	0800ded4 	.word	0x0800ded4
 800470c:	20000430 	.word	0x20000430
 8004710:	0800dedc 	.word	0x0800dedc
 8004714:	20000378 	.word	0x20000378
 8004718:	0800dee4 	.word	0x0800dee4

0800471c <runADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
  for (;;)
  {
    if (curTask != TASK_ADC)
 8004724:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <runADCTask+0xa4>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d004      	beq.n	8004736 <runADCTask+0x1a>
      osDelay(1000);
 800472c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004730:	f005 fe9c 	bl	800a46c <osDelay>
 8004734:	e7f6      	b.n	8004724 <runADCTask+0x8>
    else
    {
      //			dataPoint = 0; IR_data_raw_acc = 0; obsDist_IR = 1000;
      //			last_curTask_tick = HAL_GetTick();
      __PEND_CURCMD(curCmd);
 8004736:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <runADCTask+0xa8>)
 8004738:	2263      	movs	r2, #99	; 0x63
 800473a:	701a      	strb	r2, [r3, #0]
      targetDist = 40;
 800473c:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <runADCTask+0xac>)
 800473e:	4a23      	ldr	r2, [pc, #140]	; (80047cc <runADCTask+0xb0>)
 8004740:	601a      	str	r2, [r3, #0]
      //			  osDelay(5);
      //			} while (1);
      //
      //		  __ON_TASK_END(&htim8, prevTask, curTask);
      //		  HAL_ADC_Stop(&hadc1);
      clickOnce = 0;
 8004742:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <runADCTask+0xb4>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004748:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <runADCTask+0xa4>)
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <runADCTask+0xb8>)
 800474e:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <runADCTask+0xa4>)
 8004752:	220b      	movs	r2, #11
 8004754:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004756:	4b20      	ldr	r3, [pc, #128]	; (80047d8 <runADCTask+0xbc>)
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <runADCTask+0xbc>)
 800475c:	785b      	ldrb	r3, [r3, #1]
 800475e:	429a      	cmp	r2, r3
 8004760:	d112      	bne.n	8004788 <runADCTask+0x6c>
      {
        __CLEAR_CURCMD(curCmd);
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <runADCTask+0xa8>)
 8004764:	2264      	movs	r2, #100	; 0x64
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <runADCTask+0xa8>)
 800476a:	2200      	movs	r2, #0
 800476c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800476e:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <runADCTask+0xc0>)
 8004770:	210f      	movs	r1, #15
 8004772:	481b      	ldr	r0, [pc, #108]	; (80047e0 <runADCTask+0xc4>)
 8004774:	f008 feae 	bl	800d4d4 <sniprintf>
 8004778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800477c:	2206      	movs	r2, #6
 800477e:	4919      	ldr	r1, [pc, #100]	; (80047e4 <runADCTask+0xc8>)
 8004780:	4819      	ldr	r0, [pc, #100]	; (80047e8 <runADCTask+0xcc>)
 8004782:	f004 fd28 	bl	80091d6 <HAL_UART_Transmit>
 8004786:	e7cd      	b.n	8004724 <runADCTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004788:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <runADCTask+0xbc>)
 800478a:	785b      	ldrb	r3, [r3, #1]
 800478c:	4a0d      	ldr	r2, [pc, #52]	; (80047c4 <runADCTask+0xa8>)
 800478e:	4912      	ldr	r1, [pc, #72]	; (80047d8 <runADCTask+0xbc>)
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	440b      	add	r3, r1
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <runADCTask+0xbc>)
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	3301      	adds	r3, #1
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <runADCTask+0xbc>)
 80047a0:	7892      	ldrb	r2, [r2, #2]
 80047a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80047a6:	fb01 f202 	mul.w	r2, r1, r2
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <runADCTask+0xbc>)
 80047b0:	705a      	strb	r2, [r3, #1]
 80047b2:	4a0e      	ldr	r2, [pc, #56]	; (80047ec <runADCTask+0xd0>)
 80047b4:	210f      	movs	r1, #15
 80047b6:	480a      	ldr	r0, [pc, #40]	; (80047e0 <runADCTask+0xc4>)
 80047b8:	f008 fe8c 	bl	800d4d4 <sniprintf>
    if (curTask != TASK_ADC)
 80047bc:	e7b2      	b.n	8004724 <runADCTask+0x8>
 80047be:	bf00      	nop
 80047c0:	20000134 	.word	0x20000134
 80047c4:	2000042c 	.word	0x2000042c
 80047c8:	2000045c 	.word	0x2000045c
 80047cc:	42200000 	.word	0x42200000
 80047d0:	200004b4 	.word	0x200004b4
 80047d4:	20000135 	.word	0x20000135
 80047d8:	200003f8 	.word	0x200003f8
 80047dc:	0800ded4 	.word	0x0800ded4
 80047e0:	20000430 	.word	0x20000430
 80047e4:	0800dedc 	.word	0x0800dedc
 80047e8:	20000378 	.word	0x20000378
 80047ec:	0800dee4 	.word	0x0800dee4

080047f0 <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 80047f8:	4bc6      	ldr	r3, [pc, #792]	; (8004b14 <runCmdTask+0x324>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	2b63      	cmp	r3, #99	; 0x63
 8004800:	f200 8265 	bhi.w	8004cce <runCmdTask+0x4de>
 8004804:	a201      	add	r2, pc, #4	; (adr r2, 800480c <runCmdTask+0x1c>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	0800499d 	.word	0x0800499d
 8004810:	080049ab 	.word	0x080049ab
 8004814:	080049b9 	.word	0x080049b9
 8004818:	080049b9 	.word	0x080049b9
 800481c:	080049b9 	.word	0x080049b9
 8004820:	080049b9 	.word	0x080049b9
 8004824:	08004b89 	.word	0x08004b89
 8004828:	08004b97 	.word	0x08004b97
 800482c:	08004ba5 	.word	0x08004ba5
 8004830:	08004bb3 	.word	0x08004bb3
 8004834:	08004bc1 	.word	0x08004bc1
 8004838:	08004bc1 	.word	0x08004bc1
 800483c:	08004c09 	.word	0x08004c09
 8004840:	08004c11 	.word	0x08004c11
 8004844:	08004ccf 	.word	0x08004ccf
 8004848:	08004ccf 	.word	0x08004ccf
 800484c:	08004ccf 	.word	0x08004ccf
 8004850:	08004ccf 	.word	0x08004ccf
 8004854:	08004ccf 	.word	0x08004ccf
 8004858:	08004ccf 	.word	0x08004ccf
 800485c:	08004ccf 	.word	0x08004ccf
 8004860:	08004ccf 	.word	0x08004ccf
 8004864:	08004ccf 	.word	0x08004ccf
 8004868:	08004ccf 	.word	0x08004ccf
 800486c:	08004ccf 	.word	0x08004ccf
 8004870:	08004ccf 	.word	0x08004ccf
 8004874:	08004ccf 	.word	0x08004ccf
 8004878:	08004ccf 	.word	0x08004ccf
 800487c:	08004ccf 	.word	0x08004ccf
 8004880:	08004ccf 	.word	0x08004ccf
 8004884:	08004ccf 	.word	0x08004ccf
 8004888:	08004ccf 	.word	0x08004ccf
 800488c:	08004ccf 	.word	0x08004ccf
 8004890:	08004ccf 	.word	0x08004ccf
 8004894:	08004ccf 	.word	0x08004ccf
 8004898:	08004ccf 	.word	0x08004ccf
 800489c:	08004ccf 	.word	0x08004ccf
 80048a0:	08004ccf 	.word	0x08004ccf
 80048a4:	08004ccf 	.word	0x08004ccf
 80048a8:	08004ccf 	.word	0x08004ccf
 80048ac:	08004ccf 	.word	0x08004ccf
 80048b0:	08004ccf 	.word	0x08004ccf
 80048b4:	08004ccf 	.word	0x08004ccf
 80048b8:	08004ccf 	.word	0x08004ccf
 80048bc:	08004ccf 	.word	0x08004ccf
 80048c0:	08004ccf 	.word	0x08004ccf
 80048c4:	08004ccf 	.word	0x08004ccf
 80048c8:	08004ccf 	.word	0x08004ccf
 80048cc:	08004ccf 	.word	0x08004ccf
 80048d0:	08004ccf 	.word	0x08004ccf
 80048d4:	08004ccf 	.word	0x08004ccf
 80048d8:	08004ccf 	.word	0x08004ccf
 80048dc:	08004ccf 	.word	0x08004ccf
 80048e0:	08004ccf 	.word	0x08004ccf
 80048e4:	08004ccf 	.word	0x08004ccf
 80048e8:	08004ccf 	.word	0x08004ccf
 80048ec:	08004ccf 	.word	0x08004ccf
 80048f0:	08004ccf 	.word	0x08004ccf
 80048f4:	08004ccf 	.word	0x08004ccf
 80048f8:	08004ccf 	.word	0x08004ccf
 80048fc:	08004ccf 	.word	0x08004ccf
 8004900:	08004ccf 	.word	0x08004ccf
 8004904:	08004ccf 	.word	0x08004ccf
 8004908:	08004ccf 	.word	0x08004ccf
 800490c:	08004ccf 	.word	0x08004ccf
 8004910:	08004ccf 	.word	0x08004ccf
 8004914:	08004ccf 	.word	0x08004ccf
 8004918:	08004ccf 	.word	0x08004ccf
 800491c:	08004ccf 	.word	0x08004ccf
 8004920:	08004ccf 	.word	0x08004ccf
 8004924:	08004ccf 	.word	0x08004ccf
 8004928:	08004ccf 	.word	0x08004ccf
 800492c:	08004ccf 	.word	0x08004ccf
 8004930:	08004ccf 	.word	0x08004ccf
 8004934:	08004ccf 	.word	0x08004ccf
 8004938:	08004ccf 	.word	0x08004ccf
 800493c:	08004ccf 	.word	0x08004ccf
 8004940:	08004ccf 	.word	0x08004ccf
 8004944:	08004ccf 	.word	0x08004ccf
 8004948:	08004ccf 	.word	0x08004ccf
 800494c:	08004ccf 	.word	0x08004ccf
 8004950:	08004ccf 	.word	0x08004ccf
 8004954:	08004ccf 	.word	0x08004ccf
 8004958:	08004ccf 	.word	0x08004ccf
 800495c:	08004ccf 	.word	0x08004ccf
 8004960:	08004ccf 	.word	0x08004ccf
 8004964:	08004ccf 	.word	0x08004ccf
 8004968:	08004c1f 	.word	0x08004c1f
 800496c:	08004c1f 	.word	0x08004c1f
 8004970:	08004ccf 	.word	0x08004ccf
 8004974:	08004ccf 	.word	0x08004ccf
 8004978:	08004ccf 	.word	0x08004ccf
 800497c:	08004ccf 	.word	0x08004ccf
 8004980:	08004ccf 	.word	0x08004ccf
 8004984:	08004ccf 	.word	0x08004ccf
 8004988:	08004ccf 	.word	0x08004ccf
 800498c:	08004ccf 	.word	0x08004ccf
 8004990:	08004ccf 	.word	0x08004ccf
 8004994:	08004ccf 	.word	0x08004ccf
 8004998:	08004ccf 	.word	0x08004ccf
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
      curTask = TASK_MOVE_FOREWARD;
 800499c:	4b5e      	ldr	r3, [pc, #376]	; (8004b18 <runCmdTask+0x328>)
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 80049a2:	4b5c      	ldr	r3, [pc, #368]	; (8004b14 <runCmdTask+0x324>)
 80049a4:	2263      	movs	r2, #99	; 0x63
 80049a6:	701a      	strb	r2, [r3, #0]
      break;
 80049a8:	e192      	b.n	8004cd0 <runCmdTask+0x4e0>
    case 2: // BW
      curTask = TASK_MOVE_BACKWARD;
 80049aa:	4b5b      	ldr	r3, [pc, #364]	; (8004b18 <runCmdTask+0x328>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 80049b0:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <runCmdTask+0x324>)
 80049b2:	2263      	movs	r2, #99	; 0x63
 80049b4:	701a      	strb	r2, [r3, #0]
      break;
 80049b6:	e18b      	b.n	8004cd0 <runCmdTask+0x4e0>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 80049b8:	4b56      	ldr	r3, [pc, #344]	; (8004b14 <runCmdTask+0x324>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	4a57      	ldr	r2, [pc, #348]	; (8004b1c <runCmdTask+0x32c>)
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4413      	add	r3, r2
 80049c2:	3304      	adds	r3, #4
 80049c4:	edd3 7a00 	vldr	s15, [r3]
 80049c8:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004b20 <runCmdTask+0x330>
 80049cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d4:	dd01      	ble.n	80049da <runCmdTask+0x1ea>
 80049d6:	23e1      	movs	r3, #225	; 0xe1
 80049d8:	e01c      	b.n	8004a14 <runCmdTask+0x224>
 80049da:	4b4e      	ldr	r3, [pc, #312]	; (8004b14 <runCmdTask+0x324>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	4a4f      	ldr	r2, [pc, #316]	; (8004b1c <runCmdTask+0x32c>)
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	4413      	add	r3, r2
 80049e4:	3304      	adds	r3, #4
 80049e6:	edd3 7a00 	vldr	s15, [r3]
 80049ea:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004b24 <runCmdTask+0x334>
 80049ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f6:	d501      	bpl.n	80049fc <runCmdTask+0x20c>
 80049f8:	2355      	movs	r3, #85	; 0x55
 80049fa:	e00b      	b.n	8004a14 <runCmdTask+0x224>
 80049fc:	4b45      	ldr	r3, [pc, #276]	; (8004b14 <runCmdTask+0x324>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	4a46      	ldr	r2, [pc, #280]	; (8004b1c <runCmdTask+0x32c>)
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	4413      	add	r3, r2
 8004a06:	3304      	adds	r3, #4
 8004a08:	edd3 7a00 	vldr	s15, [r3]
 8004a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a10:	ee17 3a90 	vmov	r3, s15
 8004a14:	4a44      	ldr	r2, [pc, #272]	; (8004b28 <runCmdTask+0x338>)
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004a1e:	f000 fd73 	bl	8005508 <HAL_Delay>
 8004a22:	4b3c      	ldr	r3, [pc, #240]	; (8004b14 <runCmdTask+0x324>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	4a3d      	ldr	r2, [pc, #244]	; (8004b1c <runCmdTask+0x32c>)
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a3e      	ldr	r2, [pc, #248]	; (8004b2c <runCmdTask+0x33c>)
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b37      	ldr	r3, [pc, #220]	; (8004b14 <runCmdTask+0x324>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	4a38      	ldr	r2, [pc, #224]	; (8004b1c <runCmdTask+0x32c>)
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	4413      	add	r3, r2
 8004a3e:	330c      	adds	r3, #12
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2104      	movs	r1, #4
 8004a50:	4837      	ldr	r0, [pc, #220]	; (8004b30 <runCmdTask+0x340>)
 8004a52:	f001 f88d 	bl	8005b70 <HAL_GPIO_WritePin>
 8004a56:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <runCmdTask+0x324>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	4a30      	ldr	r2, [pc, #192]	; (8004b1c <runCmdTask+0x32c>)
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	4413      	add	r3, r2
 8004a60:	330c      	adds	r3, #12
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2108      	movs	r1, #8
 8004a72:	482f      	ldr	r0, [pc, #188]	; (8004b30 <runCmdTask+0x340>)
 8004a74:	f001 f87c 	bl	8005b70 <HAL_GPIO_WritePin>
 8004a78:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <runCmdTask+0x324>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	4a27      	ldr	r2, [pc, #156]	; (8004b1c <runCmdTask+0x32c>)
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	4413      	add	r3, r2
 8004a82:	330c      	adds	r3, #12
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	2120      	movs	r1, #32
 8004a94:	4826      	ldr	r0, [pc, #152]	; (8004b30 <runCmdTask+0x340>)
 8004a96:	f001 f86b 	bl	8005b70 <HAL_GPIO_WritePin>
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <runCmdTask+0x324>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <runCmdTask+0x32c>)
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	4413      	add	r3, r2
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	2110      	movs	r1, #16
 8004ab6:	481e      	ldr	r0, [pc, #120]	; (8004b30 <runCmdTask+0x340>)
 8004ab8:	f001 f85a 	bl	8005b70 <HAL_GPIO_WritePin>
 8004abc:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <runCmdTask+0x324>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <runCmdTask+0x32c>)
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <runCmdTask+0x344>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <runCmdTask+0x324>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <runCmdTask+0x32c>)
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <runCmdTask+0x344>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <runCmdTask+0x348>)
 8004ae4:	781a      	ldrb	r2, [r3, #0]
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <runCmdTask+0x348>)
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d12e      	bne.n	8004b4c <runCmdTask+0x35c>
      {
        __CLEAR_CURCMD(curCmd);
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <runCmdTask+0x324>)
 8004af0:	2264      	movs	r2, #100	; 0x64
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <runCmdTask+0x324>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004afa:	4a10      	ldr	r2, [pc, #64]	; (8004b3c <runCmdTask+0x34c>)
 8004afc:	210f      	movs	r1, #15
 8004afe:	4810      	ldr	r0, [pc, #64]	; (8004b40 <runCmdTask+0x350>)
 8004b00:	f008 fce8 	bl	800d4d4 <sniprintf>
 8004b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b08:	2206      	movs	r2, #6
 8004b0a:	490e      	ldr	r1, [pc, #56]	; (8004b44 <runCmdTask+0x354>)
 8004b0c:	480e      	ldr	r0, [pc, #56]	; (8004b48 <runCmdTask+0x358>)
 8004b0e:	f004 fb62 	bl	80091d6 <HAL_UART_Transmit>
 8004b12:	e035      	b.n	8004b80 <runCmdTask+0x390>
 8004b14:	2000042c 	.word	0x2000042c
 8004b18:	20000134 	.word	0x20000134
 8004b1c:	20000004 	.word	0x20000004
 8004b20:	43610000 	.word	0x43610000
 8004b24:	42aa0000 	.word	0x42aa0000
 8004b28:	20000210 	.word	0x20000210
 8004b2c:	20000444 	.word	0x20000444
 8004b30:	40020000 	.word	0x40020000
 8004b34:	20000330 	.word	0x20000330
 8004b38:	200003f8 	.word	0x200003f8
 8004b3c:	0800ded4 	.word	0x0800ded4
 8004b40:	20000430 	.word	0x20000430
 8004b44:	0800dedc 	.word	0x0800dedc
 8004b48:	20000378 	.word	0x20000378
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004b4c:	4b62      	ldr	r3, [pc, #392]	; (8004cd8 <runCmdTask+0x4e8>)
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	4a62      	ldr	r2, [pc, #392]	; (8004cdc <runCmdTask+0x4ec>)
 8004b52:	4961      	ldr	r1, [pc, #388]	; (8004cd8 <runCmdTask+0x4e8>)
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <runCmdTask+0x4e8>)
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	3301      	adds	r3, #1
 8004b62:	4a5d      	ldr	r2, [pc, #372]	; (8004cd8 <runCmdTask+0x4e8>)
 8004b64:	7892      	ldrb	r2, [r2, #2]
 8004b66:	fb93 f1f2 	sdiv	r1, r3, r2
 8004b6a:	fb01 f202 	mul.w	r2, r1, r2
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <runCmdTask+0x4e8>)
 8004b74:	705a      	strb	r2, [r3, #1]
 8004b76:	4a5a      	ldr	r2, [pc, #360]	; (8004ce0 <runCmdTask+0x4f0>)
 8004b78:	210f      	movs	r1, #15
 8004b7a:	485a      	ldr	r0, [pc, #360]	; (8004ce4 <runCmdTask+0x4f4>)
 8004b7c:	f008 fcaa 	bl	800d4d4 <sniprintf>
      __PEND_CURCMD(curCmd);
 8004b80:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <runCmdTask+0x4ec>)
 8004b82:	2263      	movs	r2, #99	; 0x63
 8004b84:	701a      	strb	r2, [r3, #0]
      break;
 8004b86:	e0a3      	b.n	8004cd0 <runCmdTask+0x4e0>
    case 7: // FL
      curTask = TASK_FL;
 8004b88:	4b57      	ldr	r3, [pc, #348]	; (8004ce8 <runCmdTask+0x4f8>)
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004b8e:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <runCmdTask+0x4ec>)
 8004b90:	2263      	movs	r2, #99	; 0x63
 8004b92:	701a      	strb	r2, [r3, #0]
      break;
 8004b94:	e09c      	b.n	8004cd0 <runCmdTask+0x4e0>
    case 8: // FR
      curTask = TASK_FR;
 8004b96:	4b54      	ldr	r3, [pc, #336]	; (8004ce8 <runCmdTask+0x4f8>)
 8004b98:	2203      	movs	r2, #3
 8004b9a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004b9c:	4b4f      	ldr	r3, [pc, #316]	; (8004cdc <runCmdTask+0x4ec>)
 8004b9e:	2263      	movs	r2, #99	; 0x63
 8004ba0:	701a      	strb	r2, [r3, #0]
      break;
 8004ba2:	e095      	b.n	8004cd0 <runCmdTask+0x4e0>
    case 9: // BL
      curTask = TASK_BL;
 8004ba4:	4b50      	ldr	r3, [pc, #320]	; (8004ce8 <runCmdTask+0x4f8>)
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004baa:	4b4c      	ldr	r3, [pc, #304]	; (8004cdc <runCmdTask+0x4ec>)
 8004bac:	2263      	movs	r2, #99	; 0x63
 8004bae:	701a      	strb	r2, [r3, #0]
      break;
 8004bb0:	e08e      	b.n	8004cd0 <runCmdTask+0x4e0>
    case 10: // BR
      curTask = TASK_BR;
 8004bb2:	4b4d      	ldr	r3, [pc, #308]	; (8004ce8 <runCmdTask+0x4f8>)
 8004bb4:	2205      	movs	r2, #5
 8004bb6:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004bb8:	4b48      	ldr	r3, [pc, #288]	; (8004cdc <runCmdTask+0x4ec>)
 8004bba:	2263      	movs	r2, #99	; 0x63
 8004bbc:	701a      	strb	r2, [r3, #0]
      break;
 8004bbe:	e087      	b.n	8004cd0 <runCmdTask+0x4e0>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8004bc0:	4b46      	ldr	r3, [pc, #280]	; (8004cdc <runCmdTask+0x4ec>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b0b      	cmp	r3, #11
 8004bc6:	d004      	beq.n	8004bd2 <runCmdTask+0x3e2>
 8004bc8:	4b48      	ldr	r3, [pc, #288]	; (8004cec <runCmdTask+0x4fc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	22e1      	movs	r2, #225	; 0xe1
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
 8004bd0:	e003      	b.n	8004bda <runCmdTask+0x3ea>
 8004bd2:	4b46      	ldr	r3, [pc, #280]	; (8004cec <runCmdTask+0x4fc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2255      	movs	r2, #85	; 0x55
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8004bda:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004bde:	f000 fc93 	bl	8005508 <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 8004be2:	4b3e      	ldr	r3, [pc, #248]	; (8004cdc <runCmdTask+0x4ec>)
 8004be4:	2264      	movs	r2, #100	; 0x64
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	4b3c      	ldr	r3, [pc, #240]	; (8004cdc <runCmdTask+0x4ec>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8004bee:	4a40      	ldr	r2, [pc, #256]	; (8004cf0 <runCmdTask+0x500>)
 8004bf0:	210f      	movs	r1, #15
 8004bf2:	483c      	ldr	r0, [pc, #240]	; (8004ce4 <runCmdTask+0x4f4>)
 8004bf4:	f008 fc6e 	bl	800d4d4 <sniprintf>
 8004bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bfc:	2206      	movs	r2, #6
 8004bfe:	493d      	ldr	r1, [pc, #244]	; (8004cf4 <runCmdTask+0x504>)
 8004c00:	483d      	ldr	r0, [pc, #244]	; (8004cf8 <runCmdTask+0x508>)
 8004c02:	f004 fae8 	bl	80091d6 <HAL_UART_Transmit>
      break;
 8004c06:	e063      	b.n	8004cd0 <runCmdTask+0x4e0>
    case 13: // debug IR sensor
      curTask = TASK_ADC;
 8004c08:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <runCmdTask+0x4f8>)
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	701a      	strb	r2, [r3, #0]
      break;
 8004c0e:	e05f      	b.n	8004cd0 <runCmdTask+0x4e0>
    case 14: // DT move until specified distance from obstacle
      curTask = TASK_MOVE_OBS;
 8004c10:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <runCmdTask+0x4f8>)
 8004c12:	2209      	movs	r2, #9
 8004c14:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8004c16:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <runCmdTask+0x4ec>)
 8004c18:	2263      	movs	r2, #99	; 0x63
 8004c1a:	701a      	strb	r2, [r3, #0]
      break;
 8004c1c:	e058      	b.n	8004cd0 <runCmdTask+0x4e0>
    //   curTask = TASK_FASTESTPATH_V2;
    //   __PEND_CURCMD(curCmd);
    //   break;
    case 88: // Axxx, rotate left by xxx degree
    case 89: // Cxxx, rotate right by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 8004c1e:	4b2f      	ldr	r3, [pc, #188]	; (8004cdc <runCmdTask+0x4ec>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b58      	cmp	r3, #88	; 0x58
 8004c24:	d004      	beq.n	8004c30 <runCmdTask+0x440>
 8004c26:	4b31      	ldr	r3, [pc, #196]	; (8004cec <runCmdTask+0x4fc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	22e1      	movs	r2, #225	; 0xe1
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c2e:	e003      	b.n	8004c38 <runCmdTask+0x448>
 8004c30:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <runCmdTask+0x4fc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2255      	movs	r2, #85	; 0x55
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40
 8004c38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004c3c:	f000 fc64 	bl	8005508 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004c40:	2200      	movs	r2, #0
 8004c42:	2104      	movs	r1, #4
 8004c44:	482d      	ldr	r0, [pc, #180]	; (8004cfc <runCmdTask+0x50c>)
 8004c46:	f000 ff93 	bl	8005b70 <HAL_GPIO_WritePin>
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	2108      	movs	r1, #8
 8004c4e:	482b      	ldr	r0, [pc, #172]	; (8004cfc <runCmdTask+0x50c>)
 8004c50:	f000 ff8e 	bl	8005b70 <HAL_GPIO_WritePin>
 8004c54:	2200      	movs	r2, #0
 8004c56:	2120      	movs	r1, #32
 8004c58:	4828      	ldr	r0, [pc, #160]	; (8004cfc <runCmdTask+0x50c>)
 8004c5a:	f000 ff89 	bl	8005b70 <HAL_GPIO_WritePin>
 8004c5e:	2201      	movs	r2, #1
 8004c60:	2110      	movs	r1, #16
 8004c62:	4826      	ldr	r0, [pc, #152]	; (8004cfc <runCmdTask+0x50c>)
 8004c64:	f000 ff84 	bl	8005b70 <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 8004c68:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <runCmdTask+0x4ec>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b58      	cmp	r3, #88	; 0x58
 8004c6e:	d113      	bne.n	8004c98 <runCmdTask+0x4a8>
      {
        targetAngle = curCmd.val;
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <runCmdTask+0x4ec>)
 8004c72:	885b      	ldrh	r3, [r3, #2]
 8004c74:	ee07 3a90 	vmov	s15, r3
 8004c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7c:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <runCmdTask+0x510>)
 8004c7e:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 800, 1200);
 8004c82:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <runCmdTask+0x514>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <runCmdTask+0x514>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
 8004c96:	e013      	b.n	8004cc0 <runCmdTask+0x4d0>
      }
      else
      {
        targetAngle = -curCmd.val;
 8004c98:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <runCmdTask+0x4ec>)
 8004c9a:	885b      	ldrh	r3, [r3, #2]
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca6:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <runCmdTask+0x510>)
 8004ca8:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1200, 800);
 8004cac:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <runCmdTask+0x514>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8004cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8004cb6:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <runCmdTask+0x514>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <runCmdTask+0x4ec>)
 8004cc2:	2263      	movs	r2, #99	; 0x63
 8004cc4:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8004cc6:	480e      	ldr	r0, [pc, #56]	; (8004d00 <runCmdTask+0x510>)
 8004cc8:	f7fd ffe2 	bl	8002c90 <RobotTurn>
      break;
 8004ccc:	e000      	b.n	8004cd0 <runCmdTask+0x4e0>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8004cce:	bf00      	nop
    }
    osDelay(1);
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f005 fbcb 	bl	800a46c <osDelay>
    switch (curCmd.index)
 8004cd6:	e58f      	b.n	80047f8 <runCmdTask+0x8>
 8004cd8:	200003f8 	.word	0x200003f8
 8004cdc:	2000042c 	.word	0x2000042c
 8004ce0:	0800dee4 	.word	0x0800dee4
 8004ce4:	20000430 	.word	0x20000430
 8004ce8:	20000134 	.word	0x20000134
 8004cec:	20000210 	.word	0x20000210
 8004cf0:	0800ded4 	.word	0x0800ded4
 8004cf4:	0800dedc 	.word	0x0800dedc
 8004cf8:	20000378 	.word	0x20000378
 8004cfc:	40020000 	.word	0x40020000
 8004d00:	20000444 	.word	0x20000444
 8004d04:	20000330 	.word	0x20000330

08004d08 <runMoveDistObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS)
 8004d10:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <runMoveDistObsTask+0xc0>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b09      	cmp	r3, #9
 8004d16:	d004      	beq.n	8004d22 <runMoveDistObsTask+0x1a>
      osDelay(1000);
 8004d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d1c:	f005 fba6 	bl	800a46c <osDelay>
 8004d20:	e7f6      	b.n	8004d10 <runMoveDistObsTask+0x8>
    else
    {
      targetDist = (float)curCmd.val;
 8004d22:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <runMoveDistObsTask+0xc4>)
 8004d24:	885b      	ldrh	r3, [r3, #2]
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <runMoveDistObsTask+0xc8>)
 8004d30:	edc3 7a00 	vstr	s15, [r3]
      RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8004d34:	2102      	movs	r1, #2
 8004d36:	4826      	ldr	r0, [pc, #152]	; (8004dd0 <runMoveDistObsTask+0xc8>)
 8004d38:	f7fe f856 	bl	8002de8 <RobotMoveDistObstacle>

      __ON_TASK_END(&htim8, prevTask, curTask);
 8004d3c:	4b25      	ldr	r3, [pc, #148]	; (8004dd4 <runMoveDistObsTask+0xcc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2200      	movs	r2, #0
 8004d42:	635a      	str	r2, [r3, #52]	; 0x34
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <runMoveDistObsTask+0xcc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d4c:	4b1e      	ldr	r3, [pc, #120]	; (8004dc8 <runMoveDistObsTask+0xc0>)
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <runMoveDistObsTask+0xd0>)
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <runMoveDistObsTask+0xc0>)
 8004d56:	220b      	movs	r2, #11
 8004d58:	701a      	strb	r2, [r3, #0]
      clickOnce = 0;
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <runMoveDistObsTask+0xd4>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004d60:	4b1f      	ldr	r3, [pc, #124]	; (8004de0 <runMoveDistObsTask+0xd8>)
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	4b1e      	ldr	r3, [pc, #120]	; (8004de0 <runMoveDistObsTask+0xd8>)
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d112      	bne.n	8004d92 <runMoveDistObsTask+0x8a>
      {
        __CLEAR_CURCMD(curCmd);
 8004d6c:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <runMoveDistObsTask+0xc4>)
 8004d6e:	2264      	movs	r2, #100	; 0x64
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <runMoveDistObsTask+0xc4>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004d78:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <runMoveDistObsTask+0xdc>)
 8004d7a:	210f      	movs	r1, #15
 8004d7c:	481a      	ldr	r0, [pc, #104]	; (8004de8 <runMoveDistObsTask+0xe0>)
 8004d7e:	f008 fba9 	bl	800d4d4 <sniprintf>
 8004d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d86:	2206      	movs	r2, #6
 8004d88:	4918      	ldr	r1, [pc, #96]	; (8004dec <runMoveDistObsTask+0xe4>)
 8004d8a:	4819      	ldr	r0, [pc, #100]	; (8004df0 <runMoveDistObsTask+0xe8>)
 8004d8c:	f004 fa23 	bl	80091d6 <HAL_UART_Transmit>
 8004d90:	e7be      	b.n	8004d10 <runMoveDistObsTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004d92:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <runMoveDistObsTask+0xd8>)
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <runMoveDistObsTask+0xc4>)
 8004d98:	4911      	ldr	r1, [pc, #68]	; (8004de0 <runMoveDistObsTask+0xd8>)
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <runMoveDistObsTask+0xd8>)
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <runMoveDistObsTask+0xd8>)
 8004daa:	7892      	ldrb	r2, [r2, #2]
 8004dac:	fb93 f1f2 	sdiv	r1, r3, r2
 8004db0:	fb01 f202 	mul.w	r2, r1, r2
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <runMoveDistObsTask+0xd8>)
 8004dba:	705a      	strb	r2, [r3, #1]
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <runMoveDistObsTask+0xec>)
 8004dbe:	210f      	movs	r1, #15
 8004dc0:	4809      	ldr	r0, [pc, #36]	; (8004de8 <runMoveDistObsTask+0xe0>)
 8004dc2:	f008 fb87 	bl	800d4d4 <sniprintf>
    if (curTask != TASK_MOVE_OBS)
 8004dc6:	e7a3      	b.n	8004d10 <runMoveDistObsTask+0x8>
 8004dc8:	20000134 	.word	0x20000134
 8004dcc:	2000042c 	.word	0x2000042c
 8004dd0:	2000045c 	.word	0x2000045c
 8004dd4:	20000330 	.word	0x20000330
 8004dd8:	20000135 	.word	0x20000135
 8004ddc:	200004b4 	.word	0x200004b4
 8004de0:	200003f8 	.word	0x200003f8
 8004de4:	0800ded4 	.word	0x0800ded4
 8004de8:	20000430 	.word	0x20000430
 8004dec:	0800dedc 	.word	0x0800dedc
 8004df0:	20000378 	.word	0x20000378
 8004df4:	0800dee4 	.word	0x0800dee4

08004df8 <runNavArdObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runNavArdObsTask */
void runNavArdObsTask(void *argument)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runNavArdObsTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8004e00:	2001      	movs	r0, #1
 8004e02:	f005 fb33 	bl	800a46c <osDelay>
 8004e06:	e7fb      	b.n	8004e00 <runNavArdObsTask+0x8>

08004e08 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d101      	bne.n	8004e1e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8004e1a:	f000 fb55 	bl	80054c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40000800 	.word	0x40000800

08004e2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e30:	b672      	cpsid	i
}
 8004e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e34:	e7fe      	b.n	8004e34 <Error_Handler+0x8>
	...

08004e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <HAL_MspInit+0x54>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <HAL_MspInit+0x54>)
 8004e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <HAL_MspInit+0x54>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_MspInit+0x54>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <HAL_MspInit+0x54>)
 8004e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6a:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <HAL_MspInit+0x54>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e76:	2200      	movs	r2, #0
 8004e78:	210f      	movs	r1, #15
 8004e7a:	f06f 0001 	mvn.w	r0, #1
 8004e7e:	f000 fc1f 	bl	80056c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800

08004e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	; 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e98:	f107 0314 	add.w	r3, r7, #20
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	605a      	str	r2, [r3, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <HAL_I2C_MspInit+0x84>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d12c      	bne.n	8004f0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <HAL_I2C_MspInit+0x88>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <HAL_I2C_MspInit+0x88>)
 8004ebc:	f043 0302 	orr.w	r3, r3, #2
 8004ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <HAL_I2C_MspInit+0x88>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ece:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ed4:	2312      	movs	r3, #18
 8004ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004edc:	2303      	movs	r3, #3
 8004ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	4619      	mov	r1, r3
 8004eea:	480c      	ldr	r0, [pc, #48]	; (8004f1c <HAL_I2C_MspInit+0x8c>)
 8004eec:	f000 fca4 	bl	8005838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <HAL_I2C_MspInit+0x88>)
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	4a07      	ldr	r2, [pc, #28]	; (8004f18 <HAL_I2C_MspInit+0x88>)
 8004efa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004efe:	6413      	str	r3, [r2, #64]	; 0x40
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_I2C_MspInit+0x88>)
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f0c:	bf00      	nop
 8004f0e:	3728      	adds	r7, #40	; 0x28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40005400 	.word	0x40005400
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40020400 	.word	0x40020400

08004f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08e      	sub	sp, #56	; 0x38
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a4e      	ldr	r2, [pc, #312]	; (8005078 <HAL_TIM_Base_MspInit+0x158>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d116      	bne.n	8004f70 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	623b      	str	r3, [r7, #32]
 8004f46:	4b4d      	ldr	r3, [pc, #308]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	4a4c      	ldr	r2, [pc, #304]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6453      	str	r3, [r2, #68]	; 0x44
 8004f52:	4b4a      	ldr	r3, [pc, #296]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2105      	movs	r1, #5
 8004f62:	201b      	movs	r0, #27
 8004f64:	f000 fbac 	bl	80056c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004f68:	201b      	movs	r0, #27
 8004f6a:	f000 fbc5 	bl	80056f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004f6e:	e07e      	b.n	800506e <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a42      	ldr	r2, [pc, #264]	; (8005080 <HAL_TIM_Base_MspInit+0x160>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d134      	bne.n	8004fe4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	4b3f      	ldr	r3, [pc, #252]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	4a3e      	ldr	r2, [pc, #248]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004f84:	f043 0302 	orr.w	r3, r3, #2
 8004f88:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8a:	4b3c      	ldr	r3, [pc, #240]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	4b38      	ldr	r3, [pc, #224]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	4a37      	ldr	r2, [pc, #220]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004fa0:	f043 0302 	orr.w	r3, r3, #2
 8004fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa6:	4b35      	ldr	r3, [pc, #212]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = US_Echo_Pin;
 8004fb2:	2320      	movs	r3, #32
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(US_Echo_GPIO_Port, &GPIO_InitStruct);
 8004fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fca:	4619      	mov	r1, r3
 8004fcc:	482d      	ldr	r0, [pc, #180]	; (8005084 <HAL_TIM_Base_MspInit+0x164>)
 8004fce:	f000 fc33 	bl	8005838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2105      	movs	r1, #5
 8004fd6:	201d      	movs	r0, #29
 8004fd8:	f000 fb72 	bl	80056c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004fdc:	201d      	movs	r0, #29
 8004fde:	f000 fb8b 	bl	80056f8 <HAL_NVIC_EnableIRQ>
}
 8004fe2:	e044      	b.n	800506e <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM6)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a27      	ldr	r2, [pc, #156]	; (8005088 <HAL_TIM_Base_MspInit+0x168>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10e      	bne.n	800500c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	4b22      	ldr	r3, [pc, #136]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	4a21      	ldr	r2, [pc, #132]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8004ff8:	f043 0310 	orr.w	r3, r3, #16
 8004ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffe:	4b1f      	ldr	r3, [pc, #124]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	697b      	ldr	r3, [r7, #20]
}
 800500a:	e030      	b.n	800506e <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM8)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1e      	ldr	r2, [pc, #120]	; (800508c <HAL_TIM_Base_MspInit+0x16c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d12b      	bne.n	800506e <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	4b18      	ldr	r3, [pc, #96]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	4a17      	ldr	r2, [pc, #92]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8005020:	f043 0302 	orr.w	r3, r3, #2
 8005024:	6453      	str	r3, [r2, #68]	; 0x44
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	4a10      	ldr	r2, [pc, #64]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 800503c:	f043 0304 	orr.w	r3, r3, #4
 8005040:	6313      	str	r3, [r2, #48]	; 0x30
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <HAL_TIM_Base_MspInit+0x15c>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800504e:	23c0      	movs	r3, #192	; 0xc0
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005052:	2302      	movs	r3, #2
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005056:	2300      	movs	r3, #0
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505a:	2300      	movs	r3, #0
 800505c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800505e:	2303      	movs	r3, #3
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005066:	4619      	mov	r1, r3
 8005068:	4809      	ldr	r0, [pc, #36]	; (8005090 <HAL_TIM_Base_MspInit+0x170>)
 800506a:	f000 fbe5 	bl	8005838 <HAL_GPIO_Init>
}
 800506e:	bf00      	nop
 8005070:	3738      	adds	r7, #56	; 0x38
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	40023800 	.word	0x40023800
 8005080:	40000400 	.word	0x40000400
 8005084:	40020400 	.word	0x40020400
 8005088:	40001000 	.word	0x40001000
 800508c:	40010400 	.word	0x40010400
 8005090:	40020800 	.word	0x40020800

08005094 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	609a      	str	r2, [r3, #8]
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d14a      	bne.n	800514c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	4b26      	ldr	r3, [pc, #152]	; (8005154 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	4a25      	ldr	r2, [pc, #148]	; (8005154 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6413      	str	r3, [r2, #64]	; 0x40
 80050c6:	4b23      	ldr	r3, [pc, #140]	; (8005154 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	6313      	str	r3, [r2, #48]	; 0x30
 80050e2:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	4b18      	ldr	r3, [pc, #96]	; (8005154 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <HAL_TIM_Encoder_MspInit+0xc0>)
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	6313      	str	r3, [r2, #48]	; 0x30
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <HAL_TIM_Encoder_MspInit+0xc0>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	60bb      	str	r3, [r7, #8]
 8005108:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800510a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005110:	2302      	movs	r3, #2
 8005112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005118:	2300      	movs	r3, #0
 800511a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800511c:	2301      	movs	r3, #1
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005120:	f107 0314 	add.w	r3, r7, #20
 8005124:	4619      	mov	r1, r3
 8005126:	480c      	ldr	r0, [pc, #48]	; (8005158 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005128:	f000 fb86 	bl	8005838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800512c:	2308      	movs	r3, #8
 800512e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005130:	2302      	movs	r3, #2
 8005132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005134:	2300      	movs	r3, #0
 8005136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005138:	2300      	movs	r3, #0
 800513a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800513c:	2301      	movs	r3, #1
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005140:	f107 0314 	add.w	r3, r7, #20
 8005144:	4619      	mov	r1, r3
 8005146:	4805      	ldr	r0, [pc, #20]	; (800515c <HAL_TIM_Encoder_MspInit+0xc8>)
 8005148:	f000 fb76 	bl	8005838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800514c:	bf00      	nop
 800514e:	3728      	adds	r7, #40	; 0x28
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40023800 	.word	0x40023800
 8005158:	40020000 	.word	0x40020000
 800515c:	40020400 	.word	0x40020400

08005160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005168:	f107 030c 	add.w	r3, r7, #12
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	609a      	str	r2, [r3, #8]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a12      	ldr	r2, [pc, #72]	; (80051c8 <HAL_TIM_MspPostInit+0x68>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d11e      	bne.n	80051c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_TIM_MspPostInit+0x6c>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4a10      	ldr	r2, [pc, #64]	; (80051cc <HAL_TIM_MspPostInit+0x6c>)
 800518c:	f043 0310 	orr.w	r3, r3, #16
 8005190:	6313      	str	r3, [r2, #48]	; 0x30
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_TIM_MspPostInit+0x6c>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800519e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a4:	2302      	movs	r3, #2
 80051a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ac:	2300      	movs	r3, #0
 80051ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80051b0:	2301      	movs	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051b4:	f107 030c 	add.w	r3, r7, #12
 80051b8:	4619      	mov	r1, r3
 80051ba:	4805      	ldr	r0, [pc, #20]	; (80051d0 <HAL_TIM_MspPostInit+0x70>)
 80051bc:	f000 fb3c 	bl	8005838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80051c0:	bf00      	nop
 80051c2:	3720      	adds	r7, #32
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40021000 	.word	0x40021000

080051d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <HAL_UART_MspInit+0x94>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d134      	bne.n	8005260 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	4b1c      	ldr	r3, [pc, #112]	; (800526c <HAL_UART_MspInit+0x98>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a1b      	ldr	r2, [pc, #108]	; (800526c <HAL_UART_MspInit+0x98>)
 8005200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b19      	ldr	r3, [pc, #100]	; (800526c <HAL_UART_MspInit+0x98>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <HAL_UART_MspInit+0x98>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	4a14      	ldr	r2, [pc, #80]	; (800526c <HAL_UART_MspInit+0x98>)
 800521c:	f043 0304 	orr.w	r3, r3, #4
 8005220:	6313      	str	r3, [r2, #48]	; 0x30
 8005222:	4b12      	ldr	r3, [pc, #72]	; (800526c <HAL_UART_MspInit+0x98>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800522e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005234:	2302      	movs	r3, #2
 8005236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800523c:	2303      	movs	r3, #3
 800523e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005240:	2307      	movs	r3, #7
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	4619      	mov	r1, r3
 800524a:	4809      	ldr	r0, [pc, #36]	; (8005270 <HAL_UART_MspInit+0x9c>)
 800524c:	f000 faf4 	bl	8005838 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005250:	2200      	movs	r2, #0
 8005252:	2105      	movs	r1, #5
 8005254:	2027      	movs	r0, #39	; 0x27
 8005256:	f000 fa33 	bl	80056c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800525a:	2027      	movs	r0, #39	; 0x27
 800525c:	f000 fa4c 	bl	80056f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005260:	bf00      	nop
 8005262:	3728      	adds	r7, #40	; 0x28
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40004800 	.word	0x40004800
 800526c:	40023800 	.word	0x40023800
 8005270:	40020800 	.word	0x40020800

08005274 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08c      	sub	sp, #48	; 0x30
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8005284:	2200      	movs	r2, #0
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	201e      	movs	r0, #30
 800528a:	f000 fa19 	bl	80056c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800528e:	201e      	movs	r0, #30
 8005290:	f000 fa32 	bl	80056f8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	4b1e      	ldr	r3, [pc, #120]	; (8005314 <HAL_InitTick+0xa0>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <HAL_InitTick+0xa0>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	6413      	str	r3, [r2, #64]	; 0x40
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <HAL_InitTick+0xa0>)
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052b0:	f107 0210 	add.w	r2, r7, #16
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f002 f8b2 	bl	8007424 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80052c0:	f002 f888 	bl	80073d4 <HAL_RCC_GetPCLK1Freq>
 80052c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	4a13      	ldr	r2, [pc, #76]	; (8005318 <HAL_InitTick+0xa4>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	0c9b      	lsrs	r3, r3, #18
 80052d0:	3b01      	subs	r3, #1
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80052d4:	4b11      	ldr	r3, [pc, #68]	; (800531c <HAL_InitTick+0xa8>)
 80052d6:	4a12      	ldr	r2, [pc, #72]	; (8005320 <HAL_InitTick+0xac>)
 80052d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <HAL_InitTick+0xa8>)
 80052dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052e0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80052e2:	4a0e      	ldr	r2, [pc, #56]	; (800531c <HAL_InitTick+0xa8>)
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <HAL_InitTick+0xa8>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_InitTick+0xa8>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80052f4:	4809      	ldr	r0, [pc, #36]	; (800531c <HAL_InitTick+0xa8>)
 80052f6:	f002 f8c7 	bl	8007488 <HAL_TIM_Base_Init>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8005300:	4806      	ldr	r0, [pc, #24]	; (800531c <HAL_InitTick+0xa8>)
 8005302:	f002 f979 	bl	80075f8 <HAL_TIM_Base_Start_IT>
 8005306:	4603      	mov	r3, r0
 8005308:	e000      	b.n	800530c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
}
 800530c:	4618      	mov	r0, r3
 800530e:	3730      	adds	r7, #48	; 0x30
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	431bde83 	.word	0x431bde83
 800531c:	200004bc 	.word	0x200004bc
 8005320:	40000800 	.word	0x40000800

08005324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005328:	e7fe      	b.n	8005328 <NMI_Handler+0x4>

0800532a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800532e:	e7fe      	b.n	800532e <HardFault_Handler+0x4>

08005330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005334:	e7fe      	b.n	8005334 <MemManage_Handler+0x4>

08005336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800533a:	e7fe      	b.n	800533a <BusFault_Handler+0x4>

0800533c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005340:	e7fe      	b.n	8005340 <UsageFault_Handler+0x4>

08005342 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005342:	b480      	push	{r7}
 8005344:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005354:	4802      	ldr	r0, [pc, #8]	; (8005360 <TIM1_CC_IRQHandler+0x10>)
 8005356:	f002 fe45 	bl	8007fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000210 	.word	0x20000210

08005364 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005368:	4802      	ldr	r0, [pc, #8]	; (8005374 <TIM3_IRQHandler+0x10>)
 800536a:	f002 fe3b 	bl	8007fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	200002a0 	.word	0x200002a0

08005378 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800537c:	4802      	ldr	r0, [pc, #8]	; (8005388 <TIM4_IRQHandler+0x10>)
 800537e:	f002 fe31 	bl	8007fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200004bc 	.word	0x200004bc

0800538c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005390:	4802      	ldr	r0, [pc, #8]	; (800539c <USART3_IRQHandler+0x10>)
 8005392:	f003 ffe3 	bl	800935c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000378 	.word	0x20000378

080053a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <_sbrk+0x5c>)
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <_sbrk+0x60>)
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053b4:	4b13      	ldr	r3, [pc, #76]	; (8005404 <_sbrk+0x64>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <_sbrk+0x64>)
 80053be:	4a12      	ldr	r2, [pc, #72]	; (8005408 <_sbrk+0x68>)
 80053c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <_sbrk+0x64>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d207      	bcs.n	80053e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053d0:	f008 f8bc 	bl	800d54c <__errno>
 80053d4:	4603      	mov	r3, r0
 80053d6:	220c      	movs	r2, #12
 80053d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053de:	e009      	b.n	80053f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <_sbrk+0x64>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <_sbrk+0x64>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	4a05      	ldr	r2, [pc, #20]	; (8005404 <_sbrk+0x64>)
 80053f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053f2:	68fb      	ldr	r3, [r7, #12]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20020000 	.word	0x20020000
 8005400:	00000400 	.word	0x00000400
 8005404:	20000504 	.word	0x20000504
 8005408:	200053a8 	.word	0x200053a8

0800540c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <SystemInit+0x20>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	4a05      	ldr	r2, [pc, #20]	; (800542c <SystemInit+0x20>)
 8005418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800541c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	e000ed00 	.word	0xe000ed00

08005430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005468 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005434:	480d      	ldr	r0, [pc, #52]	; (800546c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005436:	490e      	ldr	r1, [pc, #56]	; (8005470 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005438:	4a0e      	ldr	r2, [pc, #56]	; (8005474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800543a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800543c:	e002      	b.n	8005444 <LoopCopyDataInit>

0800543e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800543e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005442:	3304      	adds	r3, #4

08005444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005448:	d3f9      	bcc.n	800543e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800544a:	4a0b      	ldr	r2, [pc, #44]	; (8005478 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800544c:	4c0b      	ldr	r4, [pc, #44]	; (800547c <LoopFillZerobss+0x26>)
  movs r3, #0
 800544e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005450:	e001      	b.n	8005456 <LoopFillZerobss>

08005452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005454:	3204      	adds	r2, #4

08005456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005458:	d3fb      	bcc.n	8005452 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800545a:	f7ff ffd7 	bl	800540c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800545e:	f008 f87b 	bl	800d558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005462:	f7fb fd49 	bl	8000ef8 <main>
  bx  lr    
 8005466:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800546c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005470:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8005474:	0800eb74 	.word	0x0800eb74
  ldr r2, =_sbss
 8005478:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 800547c:	200053a4 	.word	0x200053a4

08005480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005480:	e7fe      	b.n	8005480 <ADC_IRQHandler>
	...

08005484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005488:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <HAL_Init+0x40>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <HAL_Init+0x40>)
 800548e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <HAL_Init+0x40>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <HAL_Init+0x40>)
 800549a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800549e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <HAL_Init+0x40>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <HAL_Init+0x40>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054ac:	2003      	movs	r0, #3
 80054ae:	f000 f8fc 	bl	80056aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054b2:	200f      	movs	r0, #15
 80054b4:	f7ff fede 	bl	8005274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054b8:	f7ff fcbe 	bl	8004e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40023c00 	.word	0x40023c00

080054c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <HAL_IncTick+0x20>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <HAL_IncTick+0x24>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4413      	add	r3, r2
 80054d8:	4a04      	ldr	r2, [pc, #16]	; (80054ec <HAL_IncTick+0x24>)
 80054da:	6013      	str	r3, [r2, #0]
}
 80054dc:	bf00      	nop
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000148 	.word	0x20000148
 80054ec:	20000508 	.word	0x20000508

080054f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return uwTick;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <HAL_GetTick+0x14>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000508 	.word	0x20000508

08005508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005510:	f7ff ffee 	bl	80054f0 <HAL_GetTick>
 8005514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005520:	d005      	beq.n	800552e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <HAL_Delay+0x44>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800552e:	bf00      	nop
 8005530:	f7ff ffde 	bl	80054f0 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	429a      	cmp	r2, r3
 800553e:	d8f7      	bhi.n	8005530 <HAL_Delay+0x28>
  {
  }
}
 8005540:	bf00      	nop
 8005542:	bf00      	nop
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000148 	.word	0x20000148

08005550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <__NVIC_SetPriorityGrouping+0x44>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800556c:	4013      	ands	r3, r2
 800556e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800557c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005582:	4a04      	ldr	r2, [pc, #16]	; (8005594 <__NVIC_SetPriorityGrouping+0x44>)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	60d3      	str	r3, [r2, #12]
}
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	e000ed00 	.word	0xe000ed00

08005598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <__NVIC_GetPriorityGrouping+0x18>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	f003 0307 	and.w	r3, r3, #7
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	e000ed00 	.word	0xe000ed00

080055b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	db0b      	blt.n	80055de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	f003 021f 	and.w	r2, r3, #31
 80055cc:	4907      	ldr	r1, [pc, #28]	; (80055ec <__NVIC_EnableIRQ+0x38>)
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	2001      	movs	r0, #1
 80055d6:	fa00 f202 	lsl.w	r2, r0, r2
 80055da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	e000e100 	.word	0xe000e100

080055f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	6039      	str	r1, [r7, #0]
 80055fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005600:	2b00      	cmp	r3, #0
 8005602:	db0a      	blt.n	800561a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	490c      	ldr	r1, [pc, #48]	; (800563c <__NVIC_SetPriority+0x4c>)
 800560a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560e:	0112      	lsls	r2, r2, #4
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	440b      	add	r3, r1
 8005614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005618:	e00a      	b.n	8005630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	4908      	ldr	r1, [pc, #32]	; (8005640 <__NVIC_SetPriority+0x50>)
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	3b04      	subs	r3, #4
 8005628:	0112      	lsls	r2, r2, #4
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	440b      	add	r3, r1
 800562e:	761a      	strb	r2, [r3, #24]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000e100 	.word	0xe000e100
 8005640:	e000ed00 	.word	0xe000ed00

08005644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f1c3 0307 	rsb	r3, r3, #7
 800565e:	2b04      	cmp	r3, #4
 8005660:	bf28      	it	cs
 8005662:	2304      	movcs	r3, #4
 8005664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3304      	adds	r3, #4
 800566a:	2b06      	cmp	r3, #6
 800566c:	d902      	bls.n	8005674 <NVIC_EncodePriority+0x30>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3b03      	subs	r3, #3
 8005672:	e000      	b.n	8005676 <NVIC_EncodePriority+0x32>
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43da      	mvns	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	401a      	ands	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800568c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	43d9      	mvns	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800569c:	4313      	orrs	r3, r2
         );
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3724      	adds	r7, #36	; 0x24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff ff4c 	bl	8005550 <__NVIC_SetPriorityGrouping>
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056d2:	f7ff ff61 	bl	8005598 <__NVIC_GetPriorityGrouping>
 80056d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	6978      	ldr	r0, [r7, #20]
 80056de:	f7ff ffb1 	bl	8005644 <NVIC_EncodePriority>
 80056e2:	4602      	mov	r2, r0
 80056e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff ff80 	bl	80055f0 <__NVIC_SetPriority>
}
 80056f0:	bf00      	nop
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff ff54 	bl	80055b4 <__NVIC_EnableIRQ>
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005722:	f7ff fee5 	bl	80054f0 <HAL_GetTick>
 8005726:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d008      	beq.n	8005746 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e052      	b.n	80057ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0216 	bic.w	r2, r2, #22
 8005754:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005764:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d103      	bne.n	8005776 <HAL_DMA_Abort+0x62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0208 	bic.w	r2, r2, #8
 8005784:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005796:	e013      	b.n	80057c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005798:	f7ff feaa 	bl	80054f0 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b05      	cmp	r3, #5
 80057a4:	d90c      	bls.n	80057c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2203      	movs	r2, #3
 80057b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e015      	b.n	80057ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e4      	bne.n	8005798 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	223f      	movs	r2, #63	; 0x3f
 80057d4:	409a      	lsls	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d004      	beq.n	8005812 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2280      	movs	r2, #128	; 0x80
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e00c      	b.n	800582c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2205      	movs	r2, #5
 8005816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	e16b      	b.n	8005b2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005854:	2201      	movs	r2, #1
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4013      	ands	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	429a      	cmp	r2, r3
 800586e:	f040 815a 	bne.w	8005b26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b01      	cmp	r3, #1
 800587c:	d005      	beq.n	800588a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005886:	2b02      	cmp	r3, #2
 8005888:	d130      	bne.n	80058ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	2203      	movs	r2, #3
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058c0:	2201      	movs	r2, #1
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 0201 	and.w	r2, r3, #1
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d017      	beq.n	8005928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	2203      	movs	r2, #3
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	43db      	mvns	r3, r3
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4013      	ands	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d123      	bne.n	800597c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	08da      	lsrs	r2, r3, #3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3208      	adds	r2, #8
 800593c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	220f      	movs	r2, #15
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4313      	orrs	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	08da      	lsrs	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3208      	adds	r2, #8
 8005976:	69b9      	ldr	r1, [r7, #24]
 8005978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	2203      	movs	r2, #3
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	43db      	mvns	r3, r3
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4013      	ands	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 0203 	and.w	r2, r3, #3
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80b4 	beq.w	8005b26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	4b60      	ldr	r3, [pc, #384]	; (8005b44 <HAL_GPIO_Init+0x30c>)
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	4a5f      	ldr	r2, [pc, #380]	; (8005b44 <HAL_GPIO_Init+0x30c>)
 80059c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059cc:	6453      	str	r3, [r2, #68]	; 0x44
 80059ce:	4b5d      	ldr	r3, [pc, #372]	; (8005b44 <HAL_GPIO_Init+0x30c>)
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059da:	4a5b      	ldr	r2, [pc, #364]	; (8005b48 <HAL_GPIO_Init+0x310>)
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	089b      	lsrs	r3, r3, #2
 80059e0:	3302      	adds	r3, #2
 80059e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	220f      	movs	r2, #15
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a52      	ldr	r2, [pc, #328]	; (8005b4c <HAL_GPIO_Init+0x314>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d02b      	beq.n	8005a5e <HAL_GPIO_Init+0x226>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a51      	ldr	r2, [pc, #324]	; (8005b50 <HAL_GPIO_Init+0x318>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d025      	beq.n	8005a5a <HAL_GPIO_Init+0x222>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a50      	ldr	r2, [pc, #320]	; (8005b54 <HAL_GPIO_Init+0x31c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01f      	beq.n	8005a56 <HAL_GPIO_Init+0x21e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a4f      	ldr	r2, [pc, #316]	; (8005b58 <HAL_GPIO_Init+0x320>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d019      	beq.n	8005a52 <HAL_GPIO_Init+0x21a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a4e      	ldr	r2, [pc, #312]	; (8005b5c <HAL_GPIO_Init+0x324>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d013      	beq.n	8005a4e <HAL_GPIO_Init+0x216>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a4d      	ldr	r2, [pc, #308]	; (8005b60 <HAL_GPIO_Init+0x328>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00d      	beq.n	8005a4a <HAL_GPIO_Init+0x212>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a4c      	ldr	r2, [pc, #304]	; (8005b64 <HAL_GPIO_Init+0x32c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <HAL_GPIO_Init+0x20e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a4b      	ldr	r2, [pc, #300]	; (8005b68 <HAL_GPIO_Init+0x330>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d101      	bne.n	8005a42 <HAL_GPIO_Init+0x20a>
 8005a3e:	2307      	movs	r3, #7
 8005a40:	e00e      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a42:	2308      	movs	r3, #8
 8005a44:	e00c      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a46:	2306      	movs	r3, #6
 8005a48:	e00a      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a4a:	2305      	movs	r3, #5
 8005a4c:	e008      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a4e:	2304      	movs	r3, #4
 8005a50:	e006      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a52:	2303      	movs	r3, #3
 8005a54:	e004      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e002      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <HAL_GPIO_Init+0x228>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	f002 0203 	and.w	r2, r2, #3
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	4093      	lsls	r3, r2
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a70:	4935      	ldr	r1, [pc, #212]	; (8005b48 <HAL_GPIO_Init+0x310>)
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	3302      	adds	r3, #2
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a7e:	4b3b      	ldr	r3, [pc, #236]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aa2:	4a32      	ldr	r2, [pc, #200]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005aa8:	4b30      	ldr	r3, [pc, #192]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005acc:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ad2:	4b26      	ldr	r3, [pc, #152]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005af6:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005afc:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	43db      	mvns	r3, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b20:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <HAL_GPIO_Init+0x334>)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	f67f ae90 	bls.w	8005854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	3724      	adds	r7, #36	; 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40013800 	.word	0x40013800
 8005b4c:	40020000 	.word	0x40020000
 8005b50:	40020400 	.word	0x40020400
 8005b54:	40020800 	.word	0x40020800
 8005b58:	40020c00 	.word	0x40020c00
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40021400 	.word	0x40021400
 8005b64:	40021800 	.word	0x40021800
 8005b68:	40021c00 	.word	0x40021c00
 8005b6c:	40013c00 	.word	0x40013c00

08005b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	807b      	strh	r3, [r7, #2]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b80:	787b      	ldrb	r3, [r7, #1]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b8c:	e003      	b.n	8005b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b8e:	887b      	ldrh	r3, [r7, #2]
 8005b90:	041a      	lsls	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	619a      	str	r2, [r3, #24]
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e12b      	b.n	8005e0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff f960 	bl	8004e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c08:	f001 fbe4 	bl	80073d4 <HAL_RCC_GetPCLK1Freq>
 8005c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a81      	ldr	r2, [pc, #516]	; (8005e18 <HAL_I2C_Init+0x274>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d807      	bhi.n	8005c28 <HAL_I2C_Init+0x84>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a80      	ldr	r2, [pc, #512]	; (8005e1c <HAL_I2C_Init+0x278>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	bf94      	ite	ls
 8005c20:	2301      	movls	r3, #1
 8005c22:	2300      	movhi	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e006      	b.n	8005c36 <HAL_I2C_Init+0x92>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4a7d      	ldr	r2, [pc, #500]	; (8005e20 <HAL_I2C_Init+0x27c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	bf94      	ite	ls
 8005c30:	2301      	movls	r3, #1
 8005c32:	2300      	movhi	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e0e7      	b.n	8005e0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a78      	ldr	r2, [pc, #480]	; (8005e24 <HAL_I2C_Init+0x280>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	0c9b      	lsrs	r3, r3, #18
 8005c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4a6a      	ldr	r2, [pc, #424]	; (8005e18 <HAL_I2C_Init+0x274>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d802      	bhi.n	8005c78 <HAL_I2C_Init+0xd4>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3301      	adds	r3, #1
 8005c76:	e009      	b.n	8005c8c <HAL_I2C_Init+0xe8>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	4a69      	ldr	r2, [pc, #420]	; (8005e28 <HAL_I2C_Init+0x284>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	099b      	lsrs	r3, r3, #6
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	495c      	ldr	r1, [pc, #368]	; (8005e18 <HAL_I2C_Init+0x274>)
 8005ca8:	428b      	cmp	r3, r1
 8005caa:	d819      	bhi.n	8005ce0 <HAL_I2C_Init+0x13c>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1e59      	subs	r1, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cba:	1c59      	adds	r1, r3, #1
 8005cbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cc0:	400b      	ands	r3, r1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_I2C_Init+0x138>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1e59      	subs	r1, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cda:	e051      	b.n	8005d80 <HAL_I2C_Init+0x1dc>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	e04f      	b.n	8005d80 <HAL_I2C_Init+0x1dc>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d111      	bne.n	8005d0c <HAL_I2C_Init+0x168>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1e58      	subs	r0, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6859      	ldr	r1, [r3, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	440b      	add	r3, r1
 8005cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	e012      	b.n	8005d32 <HAL_I2C_Init+0x18e>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	1e58      	subs	r0, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6859      	ldr	r1, [r3, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	0099      	lsls	r1, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d22:	3301      	adds	r3, #1
 8005d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_Init+0x196>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e022      	b.n	8005d80 <HAL_I2C_Init+0x1dc>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10e      	bne.n	8005d60 <HAL_I2C_Init+0x1bc>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1e58      	subs	r0, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	440b      	add	r3, r1
 8005d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d54:	3301      	adds	r3, #1
 8005d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5e:	e00f      	b.n	8005d80 <HAL_I2C_Init+0x1dc>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1e58      	subs	r0, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6859      	ldr	r1, [r3, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	0099      	lsls	r1, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d76:	3301      	adds	r3, #1
 8005d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	6809      	ldr	r1, [r1, #0]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69da      	ldr	r2, [r3, #28]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6911      	ldr	r1, [r2, #16]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68d2      	ldr	r2, [r2, #12]
 8005dba:	4311      	orrs	r1, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	000186a0 	.word	0x000186a0
 8005e1c:	001e847f 	.word	0x001e847f
 8005e20:	003d08ff 	.word	0x003d08ff
 8005e24:	431bde83 	.word	0x431bde83
 8005e28:	10624dd3 	.word	0x10624dd3

08005e2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	817b      	strh	r3, [r7, #10]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	813b      	strh	r3, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e46:	f7ff fb53 	bl	80054f0 <HAL_GetTick>
 8005e4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	f040 80d9 	bne.w	800600c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	2319      	movs	r3, #25
 8005e60:	2201      	movs	r2, #1
 8005e62:	496d      	ldr	r1, [pc, #436]	; (8006018 <HAL_I2C_Mem_Write+0x1ec>)
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fc7f 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e70:	2302      	movs	r3, #2
 8005e72:	e0cc      	b.n	800600e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_I2C_Mem_Write+0x56>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e0c5      	b.n	800600e <HAL_I2C_Mem_Write+0x1e2>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d007      	beq.n	8005ea8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2221      	movs	r2, #33	; 0x21
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2240      	movs	r2, #64	; 0x40
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a3a      	ldr	r2, [r7, #32]
 8005ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a4d      	ldr	r2, [pc, #308]	; (800601c <HAL_I2C_Mem_Write+0x1f0>)
 8005ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eea:	88f8      	ldrh	r0, [r7, #6]
 8005eec:	893a      	ldrh	r2, [r7, #8]
 8005eee:	8979      	ldrh	r1, [r7, #10]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4603      	mov	r3, r0
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fab6 	bl	800646c <I2C_RequestMemoryWrite>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d052      	beq.n	8005fac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e081      	b.n	800600e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fd00 	bl	8006914 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00d      	beq.n	8005f36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d107      	bne.n	8005f32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e06b      	b.n	800600e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d11b      	bne.n	8005fac <HAL_I2C_Mem_Write+0x180>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d017      	beq.n	8005fac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	781a      	ldrb	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1aa      	bne.n	8005f0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fcec 	bl	8006996 <I2C_WaitOnBTFFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00d      	beq.n	8005fe0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d107      	bne.n	8005fdc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e016      	b.n	800600e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800600c:	2302      	movs	r3, #2
  }
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	00100002 	.word	0x00100002
 800601c:	ffff0000 	.word	0xffff0000

08006020 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08c      	sub	sp, #48	; 0x30
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	4608      	mov	r0, r1
 800602a:	4611      	mov	r1, r2
 800602c:	461a      	mov	r2, r3
 800602e:	4603      	mov	r3, r0
 8006030:	817b      	strh	r3, [r7, #10]
 8006032:	460b      	mov	r3, r1
 8006034:	813b      	strh	r3, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800603a:	f7ff fa59 	bl	80054f0 <HAL_GetTick>
 800603e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b20      	cmp	r3, #32
 800604a:	f040 8208 	bne.w	800645e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	2319      	movs	r3, #25
 8006054:	2201      	movs	r2, #1
 8006056:	497b      	ldr	r1, [pc, #492]	; (8006244 <HAL_I2C_Mem_Read+0x224>)
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fb85 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006064:	2302      	movs	r3, #2
 8006066:	e1fb      	b.n	8006460 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_I2C_Mem_Read+0x56>
 8006072:	2302      	movs	r3, #2
 8006074:	e1f4      	b.n	8006460 <HAL_I2C_Mem_Read+0x440>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b01      	cmp	r3, #1
 800608a:	d007      	beq.n	800609c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2222      	movs	r2, #34	; 0x22
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2240      	movs	r2, #64	; 0x40
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80060cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4a5b      	ldr	r2, [pc, #364]	; (8006248 <HAL_I2C_Mem_Read+0x228>)
 80060dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060de:	88f8      	ldrh	r0, [r7, #6]
 80060e0:	893a      	ldrh	r2, [r7, #8]
 80060e2:	8979      	ldrh	r1, [r7, #10]
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4603      	mov	r3, r0
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fa52 	bl	8006598 <I2C_RequestMemoryRead>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e1b0      	b.n	8006460 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d113      	bne.n	800612e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006106:	2300      	movs	r3, #0
 8006108:	623b      	str	r3, [r7, #32]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	623b      	str	r3, [r7, #32]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e184      	b.n	8006438 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	2b01      	cmp	r3, #1
 8006134:	d11b      	bne.n	800616e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e164      	b.n	8006438 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006172:	2b02      	cmp	r3, #2
 8006174:	d11b      	bne.n	80061ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006184:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	e144      	b.n	8006438 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ae:	2300      	movs	r3, #0
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061c4:	e138      	b.n	8006438 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	f200 80f1 	bhi.w	80063b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d123      	bne.n	8006220 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fc1b 	bl	8006a18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e139      	b.n	8006460 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800621e:	e10b      	b.n	8006438 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006224:	2b02      	cmp	r3, #2
 8006226:	d14e      	bne.n	80062c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	2200      	movs	r2, #0
 8006230:	4906      	ldr	r1, [pc, #24]	; (800624c <HAL_I2C_Mem_Read+0x22c>)
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fa98 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e10e      	b.n	8006460 <HAL_I2C_Mem_Read+0x440>
 8006242:	bf00      	nop
 8006244:	00100002 	.word	0x00100002
 8006248:	ffff0000 	.word	0xffff0000
 800624c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800625e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062c4:	e0b8      	b.n	8006438 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	2200      	movs	r2, #0
 80062ce:	4966      	ldr	r1, [pc, #408]	; (8006468 <HAL_I2C_Mem_Read+0x448>)
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fa49 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0bf      	b.n	8006460 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	2200      	movs	r2, #0
 800632a:	494f      	ldr	r1, [pc, #316]	; (8006468 <HAL_I2C_Mem_Read+0x448>)
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fa1b 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e091      	b.n	8006460 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800634a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063b0:	e042      	b.n	8006438 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fb2e 	bl	8006a18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e04c      	b.n	8006460 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b04      	cmp	r3, #4
 8006404:	d118      	bne.n	8006438 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643c:	2b00      	cmp	r3, #0
 800643e:	f47f aec2 	bne.w	80061c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e000      	b.n	8006460 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800645e:	2302      	movs	r3, #2
  }
}
 8006460:	4618      	mov	r0, r3
 8006462:	3728      	adds	r7, #40	; 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	00010004 	.word	0x00010004

0800646c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	4608      	mov	r0, r1
 8006476:	4611      	mov	r1, r2
 8006478:	461a      	mov	r2, r3
 800647a:	4603      	mov	r3, r0
 800647c:	817b      	strh	r3, [r7, #10]
 800647e:	460b      	mov	r3, r1
 8006480:	813b      	strh	r3, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006494:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2200      	movs	r2, #0
 800649e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f960 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064bc:	d103      	bne.n	80064c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e05f      	b.n	800658a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ca:	897b      	ldrh	r3, [r7, #10]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	6a3a      	ldr	r2, [r7, #32]
 80064de:	492d      	ldr	r1, [pc, #180]	; (8006594 <I2C_RequestMemoryWrite+0x128>)
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f998 	bl	8006816 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e04c      	b.n	800658a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	6a39      	ldr	r1, [r7, #32]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fa02 	bl	8006914 <I2C_WaitOnTXEFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00d      	beq.n	8006532 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	2b04      	cmp	r3, #4
 800651c:	d107      	bne.n	800652e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800652c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e02b      	b.n	800658a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d105      	bne.n	8006544 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006538:	893b      	ldrh	r3, [r7, #8]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	611a      	str	r2, [r3, #16]
 8006542:	e021      	b.n	8006588 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006544:	893b      	ldrh	r3, [r7, #8]
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	b29b      	uxth	r3, r3
 800654a:	b2da      	uxtb	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	6a39      	ldr	r1, [r7, #32]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f9dc 	bl	8006914 <I2C_WaitOnTXEFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00d      	beq.n	800657e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	2b04      	cmp	r3, #4
 8006568:	d107      	bne.n	800657a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006578:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e005      	b.n	800658a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800657e:	893b      	ldrh	r3, [r7, #8]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	00010002 	.word	0x00010002

08006598 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af02      	add	r7, sp, #8
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	4608      	mov	r0, r1
 80065a2:	4611      	mov	r1, r2
 80065a4:	461a      	mov	r2, r3
 80065a6:	4603      	mov	r3, r0
 80065a8:	817b      	strh	r3, [r7, #10]
 80065aa:	460b      	mov	r3, r1
 80065ac:	813b      	strh	r3, [r7, #8]
 80065ae:	4613      	mov	r3, r2
 80065b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	2200      	movs	r2, #0
 80065da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f8c2 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f8:	d103      	bne.n	8006602 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e0aa      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006606:	897b      	ldrh	r3, [r7, #10]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006614:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	6a3a      	ldr	r2, [r7, #32]
 800661a:	4952      	ldr	r1, [pc, #328]	; (8006764 <I2C_RequestMemoryRead+0x1cc>)
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f8fa 	bl	8006816 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e097      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006644:	6a39      	ldr	r1, [r7, #32]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f964 	bl	8006914 <I2C_WaitOnTXEFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00d      	beq.n	800666e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	2b04      	cmp	r3, #4
 8006658:	d107      	bne.n	800666a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006668:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e076      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d105      	bne.n	8006680 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006674:	893b      	ldrh	r3, [r7, #8]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	611a      	str	r2, [r3, #16]
 800667e:	e021      	b.n	80066c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006680:	893b      	ldrh	r3, [r7, #8]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	b29b      	uxth	r3, r3
 8006686:	b2da      	uxtb	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800668e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006690:	6a39      	ldr	r1, [r7, #32]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f93e 	bl	8006914 <I2C_WaitOnTXEFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d107      	bne.n	80066b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e050      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066ba:	893b      	ldrh	r3, [r7, #8]
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c6:	6a39      	ldr	r1, [r7, #32]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f923 	bl	8006914 <I2C_WaitOnTXEFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00d      	beq.n	80066f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d107      	bne.n	80066ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e035      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	2200      	movs	r2, #0
 8006708:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 f82b 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00d      	beq.n	8006734 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006726:	d103      	bne.n	8006730 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800672e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e013      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006734:	897b      	ldrh	r3, [r7, #10]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	b2da      	uxtb	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	4906      	ldr	r1, [pc, #24]	; (8006764 <I2C_RequestMemoryRead+0x1cc>)
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f863 	bl	8006816 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	00010002 	.word	0x00010002

08006768 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006778:	e025      	b.n	80067c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006780:	d021      	beq.n	80067c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006782:	f7fe feb5 	bl	80054f0 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d116      	bne.n	80067c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f043 0220 	orr.w	r2, r3, #32
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e023      	b.n	800680e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d10d      	bne.n	80067ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	43da      	mvns	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4013      	ands	r3, r2
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf0c      	ite	eq
 80067e2:	2301      	moveq	r3, #1
 80067e4:	2300      	movne	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	e00c      	b.n	8006806 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	43da      	mvns	r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4013      	ands	r3, r2
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bf0c      	ite	eq
 80067fe:	2301      	moveq	r3, #1
 8006800:	2300      	movne	r3, #0
 8006802:	b2db      	uxtb	r3, r3
 8006804:	461a      	mov	r2, r3
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	429a      	cmp	r2, r3
 800680a:	d0b6      	beq.n	800677a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006824:	e051      	b.n	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006834:	d123      	bne.n	800687e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006844:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800684e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f043 0204 	orr.w	r2, r3, #4
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e046      	b.n	800690c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006884:	d021      	beq.n	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006886:	f7fe fe33 	bl	80054f0 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	429a      	cmp	r2, r3
 8006894:	d302      	bcc.n	800689c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d116      	bne.n	80068ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	f043 0220 	orr.w	r2, r3, #32
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e020      	b.n	800690c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	0c1b      	lsrs	r3, r3, #16
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d10c      	bne.n	80068ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	43da      	mvns	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4013      	ands	r3, r2
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bf14      	ite	ne
 80068e6:	2301      	movne	r3, #1
 80068e8:	2300      	moveq	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	e00b      	b.n	8006906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	43da      	mvns	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d18d      	bne.n	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006920:	e02d      	b.n	800697e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f8ce 	bl	8006ac4 <I2C_IsAcknowledgeFailed>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e02d      	b.n	800698e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006938:	d021      	beq.n	800697e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fe fdd9 	bl	80054f0 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d116      	bne.n	800697e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f043 0220 	orr.w	r2, r3, #32
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e007      	b.n	800698e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d1ca      	bne.n	8006922 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069a2:	e02d      	b.n	8006a00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 f88d 	bl	8006ac4 <I2C_IsAcknowledgeFailed>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e02d      	b.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ba:	d021      	beq.n	8006a00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069bc:	f7fe fd98 	bl	80054f0 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d302      	bcc.n	80069d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d116      	bne.n	8006a00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	f043 0220 	orr.w	r2, r3, #32
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e007      	b.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d1ca      	bne.n	80069a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a24:	e042      	b.n	8006aac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d119      	bne.n	8006a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f06f 0210 	mvn.w	r2, #16
 8006a3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e029      	b.n	8006abc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a68:	f7fe fd42 	bl	80054f0 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d302      	bcc.n	8006a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d116      	bne.n	8006aac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	f043 0220 	orr.w	r2, r3, #32
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e007      	b.n	8006abc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d1b5      	bne.n	8006a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ada:	d11b      	bne.n	8006b14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ae4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	f043 0204 	orr.w	r2, r3, #4
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
	...

08006b24 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006b30:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <HAL_PWR_EnableBkUpAccess+0x24>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006b36:	687b      	ldr	r3, [r7, #4]
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	420e0020 	.word	0x420e0020
 8006b48:	40007000 	.word	0x40007000

08006b4c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006b52:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <HAL_PWR_DisableBkUpAccess+0x20>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006b58:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006b5e:	687b      	ldr	r3, [r7, #4]
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	420e0020 	.word	0x420e0020
 8006b70:	40007000 	.word	0x40007000

08006b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e267      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d075      	beq.n	8006c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b92:	4b88      	ldr	r3, [pc, #544]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d00c      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b9e:	4b85      	ldr	r3, [pc, #532]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d112      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006baa:	4b82      	ldr	r3, [pc, #520]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb6:	d10b      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb8:	4b7e      	ldr	r3, [pc, #504]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d05b      	beq.n	8006c7c <HAL_RCC_OscConfig+0x108>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d157      	bne.n	8006c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e242      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd8:	d106      	bne.n	8006be8 <HAL_RCC_OscConfig+0x74>
 8006bda:	4b76      	ldr	r3, [pc, #472]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a75      	ldr	r2, [pc, #468]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e01d      	b.n	8006c24 <HAL_RCC_OscConfig+0xb0>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bf0:	d10c      	bne.n	8006c0c <HAL_RCC_OscConfig+0x98>
 8006bf2:	4b70      	ldr	r3, [pc, #448]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6f      	ldr	r2, [pc, #444]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	4b6d      	ldr	r3, [pc, #436]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a6c      	ldr	r2, [pc, #432]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	e00b      	b.n	8006c24 <HAL_RCC_OscConfig+0xb0>
 8006c0c:	4b69      	ldr	r3, [pc, #420]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a68      	ldr	r2, [pc, #416]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	4b66      	ldr	r3, [pc, #408]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a65      	ldr	r2, [pc, #404]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d013      	beq.n	8006c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2c:	f7fe fc60 	bl	80054f0 <HAL_GetTick>
 8006c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c34:	f7fe fc5c 	bl	80054f0 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b64      	cmp	r3, #100	; 0x64
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e207      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c46:	4b5b      	ldr	r3, [pc, #364]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0f0      	beq.n	8006c34 <HAL_RCC_OscConfig+0xc0>
 8006c52:	e014      	b.n	8006c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c54:	f7fe fc4c 	bl	80054f0 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c5c:	f7fe fc48 	bl	80054f0 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b64      	cmp	r3, #100	; 0x64
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e1f3      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c6e:	4b51      	ldr	r3, [pc, #324]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0xe8>
 8006c7a:	e000      	b.n	8006c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d063      	beq.n	8006d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c8a:	4b4a      	ldr	r3, [pc, #296]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 030c 	and.w	r3, r3, #12
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c96:	4b47      	ldr	r3, [pc, #284]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d11c      	bne.n	8006cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ca2:	4b44      	ldr	r3, [pc, #272]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d116      	bne.n	8006cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cae:	4b41      	ldr	r3, [pc, #260]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x152>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d001      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e1c7      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc6:	4b3b      	ldr	r3, [pc, #236]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4937      	ldr	r1, [pc, #220]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cda:	e03a      	b.n	8006d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d020      	beq.n	8006d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ce4:	4b34      	ldr	r3, [pc, #208]	; (8006db8 <HAL_RCC_OscConfig+0x244>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cea:	f7fe fc01 	bl	80054f0 <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cf2:	f7fe fbfd 	bl	80054f0 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e1a8      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d04:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0f0      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d10:	4b28      	ldr	r3, [pc, #160]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	4925      	ldr	r1, [pc, #148]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	600b      	str	r3, [r1, #0]
 8006d24:	e015      	b.n	8006d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d26:	4b24      	ldr	r3, [pc, #144]	; (8006db8 <HAL_RCC_OscConfig+0x244>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fe fbe0 	bl	80054f0 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d34:	f7fe fbdc 	bl	80054f0 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e187      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d46:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f0      	bne.n	8006d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d036      	beq.n	8006dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d016      	beq.n	8006d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d66:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <HAL_RCC_OscConfig+0x248>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6c:	f7fe fbc0 	bl	80054f0 <HAL_GetTick>
 8006d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d74:	f7fe fbbc 	bl	80054f0 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e167      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0x200>
 8006d92:	e01b      	b.n	8006dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d94:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <HAL_RCC_OscConfig+0x248>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d9a:	f7fe fba9 	bl	80054f0 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006da0:	e00e      	b.n	8006dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006da2:	f7fe fba5 	bl	80054f0 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d907      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e150      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
 8006db4:	40023800 	.word	0x40023800
 8006db8:	42470000 	.word	0x42470000
 8006dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dc0:	4b88      	ldr	r3, [pc, #544]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1ea      	bne.n	8006da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8097 	beq.w	8006f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dde:	4b81      	ldr	r3, [pc, #516]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10f      	bne.n	8006e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dea:	2300      	movs	r3, #0
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	4b7d      	ldr	r3, [pc, #500]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	4a7c      	ldr	r2, [pc, #496]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dfa:	4b7a      	ldr	r3, [pc, #488]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e02:	60bb      	str	r3, [r7, #8]
 8006e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e06:	2301      	movs	r3, #1
 8006e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e0a:	4b77      	ldr	r3, [pc, #476]	; (8006fe8 <HAL_RCC_OscConfig+0x474>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d118      	bne.n	8006e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e16:	4b74      	ldr	r3, [pc, #464]	; (8006fe8 <HAL_RCC_OscConfig+0x474>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a73      	ldr	r2, [pc, #460]	; (8006fe8 <HAL_RCC_OscConfig+0x474>)
 8006e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e22:	f7fe fb65 	bl	80054f0 <HAL_GetTick>
 8006e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e28:	e008      	b.n	8006e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e2a:	f7fe fb61 	bl	80054f0 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e10c      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3c:	4b6a      	ldr	r3, [pc, #424]	; (8006fe8 <HAL_RCC_OscConfig+0x474>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0f0      	beq.n	8006e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d106      	bne.n	8006e5e <HAL_RCC_OscConfig+0x2ea>
 8006e50:	4b64      	ldr	r3, [pc, #400]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e54:	4a63      	ldr	r2, [pc, #396]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5c:	e01c      	b.n	8006e98 <HAL_RCC_OscConfig+0x324>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b05      	cmp	r3, #5
 8006e64:	d10c      	bne.n	8006e80 <HAL_RCC_OscConfig+0x30c>
 8006e66:	4b5f      	ldr	r3, [pc, #380]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	4a5e      	ldr	r2, [pc, #376]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e6c:	f043 0304 	orr.w	r3, r3, #4
 8006e70:	6713      	str	r3, [r2, #112]	; 0x70
 8006e72:	4b5c      	ldr	r3, [pc, #368]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	4a5b      	ldr	r2, [pc, #364]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7e:	e00b      	b.n	8006e98 <HAL_RCC_OscConfig+0x324>
 8006e80:	4b58      	ldr	r3, [pc, #352]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	4a57      	ldr	r2, [pc, #348]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e86:	f023 0301 	bic.w	r3, r3, #1
 8006e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8c:	4b55      	ldr	r3, [pc, #340]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e90:	4a54      	ldr	r2, [pc, #336]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e92:	f023 0304 	bic.w	r3, r3, #4
 8006e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d015      	beq.n	8006ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea0:	f7fe fb26 	bl	80054f0 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea6:	e00a      	b.n	8006ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea8:	f7fe fb22 	bl	80054f0 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e0cb      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ebe:	4b49      	ldr	r3, [pc, #292]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0ee      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x334>
 8006eca:	e014      	b.n	8006ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ecc:	f7fe fb10 	bl	80054f0 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed2:	e00a      	b.n	8006eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ed4:	f7fe fb0c 	bl	80054f0 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e0b5      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eea:	4b3e      	ldr	r3, [pc, #248]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1ee      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d105      	bne.n	8006f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efc:	4b39      	ldr	r3, [pc, #228]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	4a38      	ldr	r2, [pc, #224]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80a1 	beq.w	8007054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f12:	4b34      	ldr	r3, [pc, #208]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 030c 	and.w	r3, r3, #12
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d05c      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d141      	bne.n	8006faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f26:	4b31      	ldr	r3, [pc, #196]	; (8006fec <HAL_RCC_OscConfig+0x478>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2c:	f7fe fae0 	bl	80054f0 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f34:	f7fe fadc 	bl	80054f0 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e087      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f46:	4b27      	ldr	r3, [pc, #156]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f0      	bne.n	8006f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69da      	ldr	r2, [r3, #28]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	019b      	lsls	r3, r3, #6
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	041b      	lsls	r3, r3, #16
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	061b      	lsls	r3, r3, #24
 8006f76:	491b      	ldr	r1, [pc, #108]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f7c:	4b1b      	ldr	r3, [pc, #108]	; (8006fec <HAL_RCC_OscConfig+0x478>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f82:	f7fe fab5 	bl	80054f0 <HAL_GetTick>
 8006f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f88:	e008      	b.n	8006f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8a:	f7fe fab1 	bl	80054f0 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e05c      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9c:	4b11      	ldr	r3, [pc, #68]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0f0      	beq.n	8006f8a <HAL_RCC_OscConfig+0x416>
 8006fa8:	e054      	b.n	8007054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006faa:	4b10      	ldr	r3, [pc, #64]	; (8006fec <HAL_RCC_OscConfig+0x478>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb0:	f7fe fa9e 	bl	80054f0 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb8:	f7fe fa9a 	bl	80054f0 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e045      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x444>
 8006fd6:	e03d      	b.n	8007054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e038      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	40007000 	.word	0x40007000
 8006fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ff0:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <HAL_RCC_OscConfig+0x4ec>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d028      	beq.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007008:	429a      	cmp	r2, r3
 800700a:	d121      	bne.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007016:	429a      	cmp	r2, r3
 8007018:	d11a      	bne.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007020:	4013      	ands	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007028:	4293      	cmp	r3, r2
 800702a:	d111      	bne.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	3b01      	subs	r3, #1
 800703a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800703c:	429a      	cmp	r2, r3
 800703e:	d107      	bne.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800704c:	429a      	cmp	r2, r3
 800704e:	d001      	beq.n	8007054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40023800 	.word	0x40023800

08007064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0cc      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007078:	4b68      	ldr	r3, [pc, #416]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d90c      	bls.n	80070a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007086:	4b65      	ldr	r3, [pc, #404]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708e:	4b63      	ldr	r3, [pc, #396]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d001      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e0b8      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d020      	beq.n	80070ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b8:	4b59      	ldr	r3, [pc, #356]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	4a58      	ldr	r2, [pc, #352]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070d0:	4b53      	ldr	r3, [pc, #332]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	4a52      	ldr	r2, [pc, #328]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070dc:	4b50      	ldr	r3, [pc, #320]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	494d      	ldr	r1, [pc, #308]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d044      	beq.n	8007184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d107      	bne.n	8007112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007102:	4b47      	ldr	r3, [pc, #284]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d119      	bne.n	8007142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e07f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d003      	beq.n	8007122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800711e:	2b03      	cmp	r3, #3
 8007120:	d107      	bne.n	8007132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007122:	4b3f      	ldr	r3, [pc, #252]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e06f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007132:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e067      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007142:	4b37      	ldr	r3, [pc, #220]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f023 0203 	bic.w	r2, r3, #3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	4934      	ldr	r1, [pc, #208]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	4313      	orrs	r3, r2
 8007152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007154:	f7fe f9cc 	bl	80054f0 <HAL_GetTick>
 8007158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715a:	e00a      	b.n	8007172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800715c:	f7fe f9c8 	bl	80054f0 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f241 3288 	movw	r2, #5000	; 0x1388
 800716a:	4293      	cmp	r3, r2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e04f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007172:	4b2b      	ldr	r3, [pc, #172]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 020c 	and.w	r2, r3, #12
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	429a      	cmp	r2, r3
 8007182:	d1eb      	bne.n	800715c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007184:	4b25      	ldr	r3, [pc, #148]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d20c      	bcs.n	80071ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007192:	4b22      	ldr	r3, [pc, #136]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b20      	ldr	r3, [pc, #128]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e032      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b8:	4b19      	ldr	r3, [pc, #100]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4916      	ldr	r1, [pc, #88]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071d6:	4b12      	ldr	r3, [pc, #72]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	490e      	ldr	r1, [pc, #56]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071ea:	f000 f821 	bl	8007230 <HAL_RCC_GetSysClockFreq>
 80071ee:	4602      	mov	r2, r0
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	490a      	ldr	r1, [pc, #40]	; (8007224 <HAL_RCC_ClockConfig+0x1c0>)
 80071fc:	5ccb      	ldrb	r3, [r1, r3]
 80071fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007202:	4a09      	ldr	r2, [pc, #36]	; (8007228 <HAL_RCC_ClockConfig+0x1c4>)
 8007204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007206:	4b09      	ldr	r3, [pc, #36]	; (800722c <HAL_RCC_ClockConfig+0x1c8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe f832 	bl	8005274 <HAL_InitTick>

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40023c00 	.word	0x40023c00
 8007220:	40023800 	.word	0x40023800
 8007224:	0800e0b4 	.word	0x0800e0b4
 8007228:	20000140 	.word	0x20000140
 800722c:	20000144 	.word	0x20000144

08007230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007234:	b090      	sub	sp, #64	; 0x40
 8007236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	637b      	str	r3, [r7, #52]	; 0x34
 800723c:	2300      	movs	r3, #0
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007240:	2300      	movs	r3, #0
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007248:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 030c 	and.w	r3, r3, #12
 8007250:	2b08      	cmp	r3, #8
 8007252:	d00d      	beq.n	8007270 <HAL_RCC_GetSysClockFreq+0x40>
 8007254:	2b08      	cmp	r3, #8
 8007256:	f200 80a1 	bhi.w	800739c <HAL_RCC_GetSysClockFreq+0x16c>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <HAL_RCC_GetSysClockFreq+0x34>
 800725e:	2b04      	cmp	r3, #4
 8007260:	d003      	beq.n	800726a <HAL_RCC_GetSysClockFreq+0x3a>
 8007262:	e09b      	b.n	800739c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007264:	4b53      	ldr	r3, [pc, #332]	; (80073b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007266:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007268:	e09b      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800726a:	4b53      	ldr	r3, [pc, #332]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800726c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800726e:	e098      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007270:	4b4f      	ldr	r3, [pc, #316]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800727a:	4b4d      	ldr	r3, [pc, #308]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d028      	beq.n	80072d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007286:	4b4a      	ldr	r3, [pc, #296]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	099b      	lsrs	r3, r3, #6
 800728c:	2200      	movs	r2, #0
 800728e:	623b      	str	r3, [r7, #32]
 8007290:	627a      	str	r2, [r7, #36]	; 0x24
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007298:	2100      	movs	r1, #0
 800729a:	4b47      	ldr	r3, [pc, #284]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800729c:	fb03 f201 	mul.w	r2, r3, r1
 80072a0:	2300      	movs	r3, #0
 80072a2:	fb00 f303 	mul.w	r3, r0, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	4a43      	ldr	r2, [pc, #268]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80072aa:	fba0 1202 	umull	r1, r2, r0, r2
 80072ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072b0:	460a      	mov	r2, r1
 80072b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80072b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b6:	4413      	add	r3, r2
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072bc:	2200      	movs	r2, #0
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	61fa      	str	r2, [r7, #28]
 80072c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072ca:	f7f9 fc97 	bl	8000bfc <__aeabi_uldivmod>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4613      	mov	r3, r2
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d6:	e053      	b.n	8007380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072d8:	4b35      	ldr	r3, [pc, #212]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	099b      	lsrs	r3, r3, #6
 80072de:	2200      	movs	r2, #0
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	617a      	str	r2, [r7, #20]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80072ea:	f04f 0b00 	mov.w	fp, #0
 80072ee:	4652      	mov	r2, sl
 80072f0:	465b      	mov	r3, fp
 80072f2:	f04f 0000 	mov.w	r0, #0
 80072f6:	f04f 0100 	mov.w	r1, #0
 80072fa:	0159      	lsls	r1, r3, #5
 80072fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007300:	0150      	lsls	r0, r2, #5
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	ebb2 080a 	subs.w	r8, r2, sl
 800730a:	eb63 090b 	sbc.w	r9, r3, fp
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800731a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800731e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007322:	ebb2 0408 	subs.w	r4, r2, r8
 8007326:	eb63 0509 	sbc.w	r5, r3, r9
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	00eb      	lsls	r3, r5, #3
 8007334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007338:	00e2      	lsls	r2, r4, #3
 800733a:	4614      	mov	r4, r2
 800733c:	461d      	mov	r5, r3
 800733e:	eb14 030a 	adds.w	r3, r4, sl
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	eb45 030b 	adc.w	r3, r5, fp
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	f04f 0300 	mov.w	r3, #0
 8007352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007356:	4629      	mov	r1, r5
 8007358:	028b      	lsls	r3, r1, #10
 800735a:	4621      	mov	r1, r4
 800735c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007360:	4621      	mov	r1, r4
 8007362:	028a      	lsls	r2, r1, #10
 8007364:	4610      	mov	r0, r2
 8007366:	4619      	mov	r1, r3
 8007368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736a:	2200      	movs	r2, #0
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	60fa      	str	r2, [r7, #12]
 8007370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007374:	f7f9 fc42 	bl	8000bfc <__aeabi_uldivmod>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4613      	mov	r3, r2
 800737e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	0c1b      	lsrs	r3, r3, #16
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	3301      	adds	r3, #1
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800739a:	e002      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800739c:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800739e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3740      	adds	r7, #64	; 0x40
 80073a8:	46bd      	mov	sp, r7
 80073aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ae:	bf00      	nop
 80073b0:	40023800 	.word	0x40023800
 80073b4:	00f42400 	.word	0x00f42400
 80073b8:	017d7840 	.word	0x017d7840

080073bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80073c2:	681b      	ldr	r3, [r3, #0]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	20000140 	.word	0x20000140

080073d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073d8:	f7ff fff0 	bl	80073bc <HAL_RCC_GetHCLKFreq>
 80073dc:	4602      	mov	r2, r0
 80073de:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	0a9b      	lsrs	r3, r3, #10
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	4903      	ldr	r1, [pc, #12]	; (80073f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073ea:	5ccb      	ldrb	r3, [r1, r3]
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	40023800 	.word	0x40023800
 80073f8:	0800e0c4 	.word	0x0800e0c4

080073fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007400:	f7ff ffdc 	bl	80073bc <HAL_RCC_GetHCLKFreq>
 8007404:	4602      	mov	r2, r0
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	0b5b      	lsrs	r3, r3, #13
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	4903      	ldr	r1, [pc, #12]	; (8007420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007412:	5ccb      	ldrb	r3, [r1, r3]
 8007414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007418:	4618      	mov	r0, r3
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40023800 	.word	0x40023800
 8007420:	0800e0c4 	.word	0x0800e0c4

08007424 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	220f      	movs	r2, #15
 8007432:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007434:	4b12      	ldr	r3, [pc, #72]	; (8007480 <HAL_RCC_GetClockConfig+0x5c>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 0203 	and.w	r2, r3, #3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <HAL_RCC_GetClockConfig+0x5c>)
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800744c:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <HAL_RCC_GetClockConfig+0x5c>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007458:	4b09      	ldr	r3, [pc, #36]	; (8007480 <HAL_RCC_GetClockConfig+0x5c>)
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	08db      	lsrs	r3, r3, #3
 800745e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007466:	4b07      	ldr	r3, [pc, #28]	; (8007484 <HAL_RCC_GetClockConfig+0x60>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0207 	and.w	r2, r3, #7
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	601a      	str	r2, [r3, #0]
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	40023800 	.word	0x40023800
 8007484:	40023c00 	.word	0x40023c00

08007488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e041      	b.n	800751e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fd fd36 	bl	8004f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4619      	mov	r1, r3
 80074c6:	4610      	mov	r0, r2
 80074c8:	f001 f91c 	bl	8008704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b01      	cmp	r3, #1
 800753a:	d001      	beq.n	8007540 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e046      	b.n	80075ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a23      	ldr	r2, [pc, #140]	; (80075dc <HAL_TIM_Base_Start+0xb4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d022      	beq.n	8007598 <HAL_TIM_Base_Start+0x70>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755a:	d01d      	beq.n	8007598 <HAL_TIM_Base_Start+0x70>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1f      	ldr	r2, [pc, #124]	; (80075e0 <HAL_TIM_Base_Start+0xb8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d018      	beq.n	8007598 <HAL_TIM_Base_Start+0x70>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <HAL_TIM_Base_Start+0xbc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <HAL_TIM_Base_Start+0x70>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a1c      	ldr	r2, [pc, #112]	; (80075e8 <HAL_TIM_Base_Start+0xc0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00e      	beq.n	8007598 <HAL_TIM_Base_Start+0x70>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a1b      	ldr	r2, [pc, #108]	; (80075ec <HAL_TIM_Base_Start+0xc4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d009      	beq.n	8007598 <HAL_TIM_Base_Start+0x70>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a19      	ldr	r2, [pc, #100]	; (80075f0 <HAL_TIM_Base_Start+0xc8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d004      	beq.n	8007598 <HAL_TIM_Base_Start+0x70>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a18      	ldr	r2, [pc, #96]	; (80075f4 <HAL_TIM_Base_Start+0xcc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d111      	bne.n	80075bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b06      	cmp	r3, #6
 80075a8:	d010      	beq.n	80075cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0201 	orr.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ba:	e007      	b.n	80075cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40010400 	.word	0x40010400
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40001800 	.word	0x40001800

080075f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	d001      	beq.n	8007610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e04e      	b.n	80076ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a23      	ldr	r2, [pc, #140]	; (80076bc <HAL_TIM_Base_Start_IT+0xc4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d022      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763a:	d01d      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d018      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1e      	ldr	r2, [pc, #120]	; (80076c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a1c      	ldr	r2, [pc, #112]	; (80076c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00e      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a1b      	ldr	r2, [pc, #108]	; (80076cc <HAL_TIM_Base_Start_IT+0xd4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d009      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a19      	ldr	r2, [pc, #100]	; (80076d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <HAL_TIM_Base_Start_IT+0x80>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a18      	ldr	r2, [pc, #96]	; (80076d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d111      	bne.n	800769c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0307 	and.w	r3, r3, #7
 8007682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b06      	cmp	r3, #6
 8007688:	d010      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0201 	orr.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769a:	e007      	b.n	80076ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	40010000 	.word	0x40010000
 80076c0:	40000400 	.word	0x40000400
 80076c4:	40000800 	.word	0x40000800
 80076c8:	40000c00 	.word	0x40000c00
 80076cc:	40010400 	.word	0x40010400
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40001800 	.word	0x40001800

080076d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e041      	b.n	800776e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f839 	bl	8007776 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3304      	adds	r3, #4
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	f000 fff4 	bl	8008704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
	...

0800778c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <HAL_TIM_PWM_Start+0x24>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	bf14      	ite	ne
 80077a8:	2301      	movne	r3, #1
 80077aa:	2300      	moveq	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	e022      	b.n	80077f6 <HAL_TIM_PWM_Start+0x6a>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d109      	bne.n	80077ca <HAL_TIM_PWM_Start+0x3e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b01      	cmp	r3, #1
 80077c0:	bf14      	ite	ne
 80077c2:	2301      	movne	r3, #1
 80077c4:	2300      	moveq	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	e015      	b.n	80077f6 <HAL_TIM_PWM_Start+0x6a>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d109      	bne.n	80077e4 <HAL_TIM_PWM_Start+0x58>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b01      	cmp	r3, #1
 80077da:	bf14      	ite	ne
 80077dc:	2301      	movne	r3, #1
 80077de:	2300      	moveq	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	e008      	b.n	80077f6 <HAL_TIM_PWM_Start+0x6a>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	bf14      	ite	ne
 80077f0:	2301      	movne	r3, #1
 80077f2:	2300      	moveq	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e07c      	b.n	80078f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d104      	bne.n	800780e <HAL_TIM_PWM_Start+0x82>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800780c:	e013      	b.n	8007836 <HAL_TIM_PWM_Start+0xaa>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b04      	cmp	r3, #4
 8007812:	d104      	bne.n	800781e <HAL_TIM_PWM_Start+0x92>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800781c:	e00b      	b.n	8007836 <HAL_TIM_PWM_Start+0xaa>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b08      	cmp	r3, #8
 8007822:	d104      	bne.n	800782e <HAL_TIM_PWM_Start+0xa2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800782c:	e003      	b.n	8007836 <HAL_TIM_PWM_Start+0xaa>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2201      	movs	r2, #1
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f001 fb74 	bl	8008f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a2d      	ldr	r2, [pc, #180]	; (8007900 <HAL_TIM_PWM_Start+0x174>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_TIM_PWM_Start+0xcc>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a2c      	ldr	r2, [pc, #176]	; (8007904 <HAL_TIM_PWM_Start+0x178>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d101      	bne.n	800785c <HAL_TIM_PWM_Start+0xd0>
 8007858:	2301      	movs	r3, #1
 800785a:	e000      	b.n	800785e <HAL_TIM_PWM_Start+0xd2>
 800785c:	2300      	movs	r3, #0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a22      	ldr	r2, [pc, #136]	; (8007900 <HAL_TIM_PWM_Start+0x174>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d022      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x136>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007884:	d01d      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x136>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a1f      	ldr	r2, [pc, #124]	; (8007908 <HAL_TIM_PWM_Start+0x17c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d018      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x136>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1d      	ldr	r2, [pc, #116]	; (800790c <HAL_TIM_PWM_Start+0x180>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d013      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x136>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1c      	ldr	r2, [pc, #112]	; (8007910 <HAL_TIM_PWM_Start+0x184>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00e      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x136>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a16      	ldr	r2, [pc, #88]	; (8007904 <HAL_TIM_PWM_Start+0x178>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d009      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x136>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a18      	ldr	r2, [pc, #96]	; (8007914 <HAL_TIM_PWM_Start+0x188>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d004      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x136>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a16      	ldr	r2, [pc, #88]	; (8007918 <HAL_TIM_PWM_Start+0x18c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d111      	bne.n	80078e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b06      	cmp	r3, #6
 80078d2:	d010      	beq.n	80078f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e4:	e007      	b.n	80078f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0201 	orr.w	r2, r2, #1
 80078f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40010000 	.word	0x40010000
 8007904:	40010400 	.word	0x40010400
 8007908:	40000400 	.word	0x40000400
 800790c:	40000800 	.word	0x40000800
 8007910:	40000c00 	.word	0x40000c00
 8007914:	40014000 	.word	0x40014000
 8007918:	40001800 	.word	0x40001800

0800791c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e041      	b.n	80079b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f839 	bl	80079ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	f000 fed2 	bl	8008704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
	...

080079d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <HAL_TIM_IC_Start_IT+0x1e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	e013      	b.n	8007a16 <HAL_TIM_IC_Start_IT+0x46>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d104      	bne.n	80079fe <HAL_TIM_IC_Start_IT+0x2e>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	e00b      	b.n	8007a16 <HAL_TIM_IC_Start_IT+0x46>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d104      	bne.n	8007a0e <HAL_TIM_IC_Start_IT+0x3e>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	e003      	b.n	8007a16 <HAL_TIM_IC_Start_IT+0x46>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <HAL_TIM_IC_Start_IT+0x58>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	e013      	b.n	8007a50 <HAL_TIM_IC_Start_IT+0x80>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d104      	bne.n	8007a38 <HAL_TIM_IC_Start_IT+0x68>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	e00b      	b.n	8007a50 <HAL_TIM_IC_Start_IT+0x80>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d104      	bne.n	8007a48 <HAL_TIM_IC_Start_IT+0x78>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	e003      	b.n	8007a50 <HAL_TIM_IC_Start_IT+0x80>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d102      	bne.n	8007a5e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a58:	7b7b      	ldrb	r3, [r7, #13]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d001      	beq.n	8007a62 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e0cc      	b.n	8007bfc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d104      	bne.n	8007a72 <HAL_TIM_IC_Start_IT+0xa2>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a70:	e013      	b.n	8007a9a <HAL_TIM_IC_Start_IT+0xca>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d104      	bne.n	8007a82 <HAL_TIM_IC_Start_IT+0xb2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a80:	e00b      	b.n	8007a9a <HAL_TIM_IC_Start_IT+0xca>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d104      	bne.n	8007a92 <HAL_TIM_IC_Start_IT+0xc2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a90:	e003      	b.n	8007a9a <HAL_TIM_IC_Start_IT+0xca>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2202      	movs	r2, #2
 8007a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d104      	bne.n	8007aaa <HAL_TIM_IC_Start_IT+0xda>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aa8:	e013      	b.n	8007ad2 <HAL_TIM_IC_Start_IT+0x102>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d104      	bne.n	8007aba <HAL_TIM_IC_Start_IT+0xea>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ab8:	e00b      	b.n	8007ad2 <HAL_TIM_IC_Start_IT+0x102>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d104      	bne.n	8007aca <HAL_TIM_IC_Start_IT+0xfa>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ac8:	e003      	b.n	8007ad2 <HAL_TIM_IC_Start_IT+0x102>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2202      	movs	r2, #2
 8007ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b0c      	cmp	r3, #12
 8007ad6:	d841      	bhi.n	8007b5c <HAL_TIM_IC_Start_IT+0x18c>
 8007ad8:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <HAL_TIM_IC_Start_IT+0x110>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007b15 	.word	0x08007b15
 8007ae4:	08007b5d 	.word	0x08007b5d
 8007ae8:	08007b5d 	.word	0x08007b5d
 8007aec:	08007b5d 	.word	0x08007b5d
 8007af0:	08007b27 	.word	0x08007b27
 8007af4:	08007b5d 	.word	0x08007b5d
 8007af8:	08007b5d 	.word	0x08007b5d
 8007afc:	08007b5d 	.word	0x08007b5d
 8007b00:	08007b39 	.word	0x08007b39
 8007b04:	08007b5d 	.word	0x08007b5d
 8007b08:	08007b5d 	.word	0x08007b5d
 8007b0c:	08007b5d 	.word	0x08007b5d
 8007b10:	08007b4b 	.word	0x08007b4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0202 	orr.w	r2, r2, #2
 8007b22:	60da      	str	r2, [r3, #12]
      break;
 8007b24:	e01d      	b.n	8007b62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 0204 	orr.w	r2, r2, #4
 8007b34:	60da      	str	r2, [r3, #12]
      break;
 8007b36:	e014      	b.n	8007b62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0208 	orr.w	r2, r2, #8
 8007b46:	60da      	str	r2, [r3, #12]
      break;
 8007b48:	e00b      	b.n	8007b62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0210 	orr.w	r2, r2, #16
 8007b58:	60da      	str	r2, [r3, #12]
      break;
 8007b5a:	e002      	b.n	8007b62 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b60:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d148      	bne.n	8007bfa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 f9db 	bl	8008f2c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a22      	ldr	r2, [pc, #136]	; (8007c04 <HAL_TIM_IC_Start_IT+0x234>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d022      	beq.n	8007bc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d01d      	beq.n	8007bc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a1e      	ldr	r2, [pc, #120]	; (8007c08 <HAL_TIM_IC_Start_IT+0x238>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d018      	beq.n	8007bc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a1c      	ldr	r2, [pc, #112]	; (8007c0c <HAL_TIM_IC_Start_IT+0x23c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d013      	beq.n	8007bc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a1b      	ldr	r2, [pc, #108]	; (8007c10 <HAL_TIM_IC_Start_IT+0x240>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d00e      	beq.n	8007bc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a19      	ldr	r2, [pc, #100]	; (8007c14 <HAL_TIM_IC_Start_IT+0x244>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d009      	beq.n	8007bc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <HAL_TIM_IC_Start_IT+0x248>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d004      	beq.n	8007bc6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <HAL_TIM_IC_Start_IT+0x24c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d111      	bne.n	8007bea <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b06      	cmp	r3, #6
 8007bd6:	d010      	beq.n	8007bfa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be8:	e007      	b.n	8007bfa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0201 	orr.w	r2, r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40010000 	.word	0x40010000
 8007c08:	40000400 	.word	0x40000400
 8007c0c:	40000800 	.word	0x40000800
 8007c10:	40000c00 	.word	0x40000c00
 8007c14:	40010400 	.word	0x40010400
 8007c18:	40014000 	.word	0x40014000
 8007c1c:	40001800 	.word	0x40001800

08007c20 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b0c      	cmp	r3, #12
 8007c32:	d841      	bhi.n	8007cb8 <HAL_TIM_IC_Stop_IT+0x98>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <HAL_TIM_IC_Stop_IT+0x1c>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c71 	.word	0x08007c71
 8007c40:	08007cb9 	.word	0x08007cb9
 8007c44:	08007cb9 	.word	0x08007cb9
 8007c48:	08007cb9 	.word	0x08007cb9
 8007c4c:	08007c83 	.word	0x08007c83
 8007c50:	08007cb9 	.word	0x08007cb9
 8007c54:	08007cb9 	.word	0x08007cb9
 8007c58:	08007cb9 	.word	0x08007cb9
 8007c5c:	08007c95 	.word	0x08007c95
 8007c60:	08007cb9 	.word	0x08007cb9
 8007c64:	08007cb9 	.word	0x08007cb9
 8007c68:	08007cb9 	.word	0x08007cb9
 8007c6c:	08007ca7 	.word	0x08007ca7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0202 	bic.w	r2, r2, #2
 8007c7e:	60da      	str	r2, [r3, #12]
      break;
 8007c80:	e01d      	b.n	8007cbe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0204 	bic.w	r2, r2, #4
 8007c90:	60da      	str	r2, [r3, #12]
      break;
 8007c92:	e014      	b.n	8007cbe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0208 	bic.w	r2, r2, #8
 8007ca2:	60da      	str	r2, [r3, #12]
      break;
 8007ca4:	e00b      	b.n	8007cbe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0210 	bic.w	r2, r2, #16
 8007cb4:	60da      	str	r2, [r3, #12]
      break;
 8007cb6:	e002      	b.n	8007cbe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d156      	bne.n	8007d72 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f001 f92d 	bl	8008f2c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6a1a      	ldr	r2, [r3, #32]
 8007cd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10f      	bne.n	8007d02 <HAL_TIM_IC_Stop_IT+0xe2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	f240 4344 	movw	r3, #1092	; 0x444
 8007cec:	4013      	ands	r3, r2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d107      	bne.n	8007d02 <HAL_TIM_IC_Stop_IT+0xe2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f022 0201 	bic.w	r2, r2, #1
 8007d00:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d104      	bne.n	8007d12 <HAL_TIM_IC_Stop_IT+0xf2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d10:	e013      	b.n	8007d3a <HAL_TIM_IC_Stop_IT+0x11a>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	d104      	bne.n	8007d22 <HAL_TIM_IC_Stop_IT+0x102>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d20:	e00b      	b.n	8007d3a <HAL_TIM_IC_Stop_IT+0x11a>
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d104      	bne.n	8007d32 <HAL_TIM_IC_Stop_IT+0x112>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d30:	e003      	b.n	8007d3a <HAL_TIM_IC_Stop_IT+0x11a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <HAL_TIM_IC_Stop_IT+0x12a>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d48:	e013      	b.n	8007d72 <HAL_TIM_IC_Stop_IT+0x152>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d104      	bne.n	8007d5a <HAL_TIM_IC_Stop_IT+0x13a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d58:	e00b      	b.n	8007d72 <HAL_TIM_IC_Stop_IT+0x152>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d104      	bne.n	8007d6a <HAL_TIM_IC_Stop_IT+0x14a>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d68:	e003      	b.n	8007d72 <HAL_TIM_IC_Stop_IT+0x152>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e097      	b.n	8007ec0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7fd f975 	bl	8005094 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2202      	movs	r2, #2
 8007dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc0:	f023 0307 	bic.w	r3, r3, #7
 8007dc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f000 fc97 	bl	8008704 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e1c:	f023 030c 	bic.w	r3, r3, #12
 8007e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	011a      	lsls	r2, r3, #4
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	031b      	lsls	r3, r3, #12
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ed8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ee0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ee8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ef0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d110      	bne.n	8007f1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d102      	bne.n	8007f04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007efe:	7b7b      	ldrb	r3, [r7, #13]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d001      	beq.n	8007f08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e069      	b.n	8007fdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f18:	e031      	b.n	8007f7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d110      	bne.n	8007f42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d102      	bne.n	8007f2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f26:	7b3b      	ldrb	r3, [r7, #12]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d001      	beq.n	8007f30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e055      	b.n	8007fdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f40:	e01d      	b.n	8007f7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d108      	bne.n	8007f5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d105      	bne.n	8007f5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f4e:	7b7b      	ldrb	r3, [r7, #13]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d102      	bne.n	8007f5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f54:	7b3b      	ldrb	r3, [r7, #12]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d001      	beq.n	8007f5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e03e      	b.n	8007fdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2202      	movs	r2, #2
 8007f6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2202      	movs	r2, #2
 8007f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <HAL_TIM_Encoder_Start+0xc4>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d008      	beq.n	8007f9c <HAL_TIM_Encoder_Start+0xd4>
 8007f8a:	e00f      	b.n	8007fac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2201      	movs	r2, #1
 8007f92:	2100      	movs	r1, #0
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 ffc9 	bl	8008f2c <TIM_CCxChannelCmd>
      break;
 8007f9a:	e016      	b.n	8007fca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	2104      	movs	r1, #4
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 ffc1 	bl	8008f2c <TIM_CCxChannelCmd>
      break;
 8007faa:	e00e      	b.n	8007fca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 ffb9 	bl	8008f2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	2104      	movs	r1, #4
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 ffb2 	bl	8008f2c <TIM_CCxChannelCmd>
      break;
 8007fc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0201 	orr.w	r2, r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d122      	bne.n	8008040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b02      	cmp	r3, #2
 8008006:	d11b      	bne.n	8008040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f06f 0202 	mvn.w	r2, #2
 8008010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7f9 fc52 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 800802c:	e005      	b.n	800803a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fb4a 	bl	80086c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fb51 	bl	80086dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b04      	cmp	r3, #4
 800804c:	d122      	bne.n	8008094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b04      	cmp	r3, #4
 800805a:	d11b      	bne.n	8008094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0204 	mvn.w	r2, #4
 8008064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2202      	movs	r2, #2
 800806a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7f9 fc28 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 8008080:	e005      	b.n	800808e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fb20 	bl	80086c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fb27 	bl	80086dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0308 	and.w	r3, r3, #8
 800809e:	2b08      	cmp	r3, #8
 80080a0:	d122      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d11b      	bne.n	80080e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0208 	mvn.w	r2, #8
 80080b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2204      	movs	r2, #4
 80080be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7f9 fbfe 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 80080d4:	e005      	b.n	80080e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 faf6 	bl	80086c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fafd 	bl	80086dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0310 	and.w	r3, r3, #16
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	d122      	bne.n	800813c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0310 	and.w	r3, r3, #16
 8008100:	2b10      	cmp	r3, #16
 8008102:	d11b      	bne.n	800813c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0210 	mvn.w	r2, #16
 800810c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2208      	movs	r2, #8
 8008112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7f9 fbd4 	bl	80018d0 <HAL_TIM_IC_CaptureCallback>
 8008128:	e005      	b.n	8008136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 facc 	bl	80086c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fad3 	bl	80086dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b01      	cmp	r3, #1
 8008148:	d10e      	bne.n	8008168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b01      	cmp	r3, #1
 8008156:	d107      	bne.n	8008168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0201 	mvn.w	r2, #1
 8008160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fc fe50 	bl	8004e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d10e      	bne.n	8008194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008180:	2b80      	cmp	r3, #128	; 0x80
 8008182:	d107      	bne.n	8008194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800818c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 ffca 	bl	8009128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819e:	2b40      	cmp	r3, #64	; 0x40
 80081a0:	d10e      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d107      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa98 	bl	80086f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b20      	cmp	r3, #32
 80081cc:	d10e      	bne.n	80081ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d107      	bne.n	80081ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0220 	mvn.w	r2, #32
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 ff94 	bl	8009114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081ec:	bf00      	nop
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800820a:	2b01      	cmp	r3, #1
 800820c:	d101      	bne.n	8008212 <HAL_TIM_IC_ConfigChannel+0x1e>
 800820e:	2302      	movs	r3, #2
 8008210:	e088      	b.n	8008324 <HAL_TIM_IC_ConfigChannel+0x130>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d11b      	bne.n	8008258 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6818      	ldr	r0, [r3, #0]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	6819      	ldr	r1, [r3, #0]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f000 fcb8 	bl	8008ba4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699a      	ldr	r2, [r3, #24]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 020c 	bic.w	r2, r2, #12
 8008242:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6999      	ldr	r1, [r3, #24]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	689a      	ldr	r2, [r3, #8]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	619a      	str	r2, [r3, #24]
 8008256:	e060      	b.n	800831a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b04      	cmp	r3, #4
 800825c:	d11c      	bne.n	8008298 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	6819      	ldr	r1, [r3, #0]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	f000 fd3c 	bl	8008cea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008280:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6999      	ldr	r1, [r3, #24]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	021a      	lsls	r2, r3, #8
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	619a      	str	r2, [r3, #24]
 8008296:	e040      	b.n	800831a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b08      	cmp	r3, #8
 800829c:	d11b      	bne.n	80082d6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6819      	ldr	r1, [r3, #0]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f000 fd89 	bl	8008dc4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 020c 	bic.w	r2, r2, #12
 80082c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69d9      	ldr	r1, [r3, #28]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	430a      	orrs	r2, r1
 80082d2:	61da      	str	r2, [r3, #28]
 80082d4:	e021      	b.n	800831a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b0c      	cmp	r3, #12
 80082da:	d11c      	bne.n	8008316 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f000 fda6 	bl	8008e3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69da      	ldr	r2, [r3, #28]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	69d9      	ldr	r1, [r3, #28]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	021a      	lsls	r2, r3, #8
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	61da      	str	r2, [r3, #28]
 8008314:	e001      	b.n	800831a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008342:	2b01      	cmp	r3, #1
 8008344:	d101      	bne.n	800834a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008346:	2302      	movs	r3, #2
 8008348:	e0ae      	b.n	80084a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b0c      	cmp	r3, #12
 8008356:	f200 809f 	bhi.w	8008498 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	08008395 	.word	0x08008395
 8008364:	08008499 	.word	0x08008499
 8008368:	08008499 	.word	0x08008499
 800836c:	08008499 	.word	0x08008499
 8008370:	080083d5 	.word	0x080083d5
 8008374:	08008499 	.word	0x08008499
 8008378:	08008499 	.word	0x08008499
 800837c:	08008499 	.word	0x08008499
 8008380:	08008417 	.word	0x08008417
 8008384:	08008499 	.word	0x08008499
 8008388:	08008499 	.word	0x08008499
 800838c:	08008499 	.word	0x08008499
 8008390:	08008457 	.word	0x08008457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fa52 	bl	8008844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0208 	orr.w	r2, r2, #8
 80083ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0204 	bic.w	r2, r2, #4
 80083be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6999      	ldr	r1, [r3, #24]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	691a      	ldr	r2, [r3, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	619a      	str	r2, [r3, #24]
      break;
 80083d2:	e064      	b.n	800849e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 faa2 	bl	8008924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6999      	ldr	r1, [r3, #24]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	021a      	lsls	r2, r3, #8
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	430a      	orrs	r2, r1
 8008412:	619a      	str	r2, [r3, #24]
      break;
 8008414:	e043      	b.n	800849e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 faf7 	bl	8008a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0208 	orr.w	r2, r2, #8
 8008430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0204 	bic.w	r2, r2, #4
 8008440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69d9      	ldr	r1, [r3, #28]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	61da      	str	r2, [r3, #28]
      break;
 8008454:	e023      	b.n	800849e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fb4b 	bl	8008af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69d9      	ldr	r1, [r3, #28]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	021a      	lsls	r2, r3, #8
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	61da      	str	r2, [r3, #28]
      break;
 8008496:	e002      	b.n	800849e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
      break;
 800849c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_TIM_ConfigClockSource+0x1c>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e0b4      	b.n	8008636 <HAL_TIM_ConfigClockSource+0x186>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008504:	d03e      	beq.n	8008584 <HAL_TIM_ConfigClockSource+0xd4>
 8008506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850a:	f200 8087 	bhi.w	800861c <HAL_TIM_ConfigClockSource+0x16c>
 800850e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008512:	f000 8086 	beq.w	8008622 <HAL_TIM_ConfigClockSource+0x172>
 8008516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851a:	d87f      	bhi.n	800861c <HAL_TIM_ConfigClockSource+0x16c>
 800851c:	2b70      	cmp	r3, #112	; 0x70
 800851e:	d01a      	beq.n	8008556 <HAL_TIM_ConfigClockSource+0xa6>
 8008520:	2b70      	cmp	r3, #112	; 0x70
 8008522:	d87b      	bhi.n	800861c <HAL_TIM_ConfigClockSource+0x16c>
 8008524:	2b60      	cmp	r3, #96	; 0x60
 8008526:	d050      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x11a>
 8008528:	2b60      	cmp	r3, #96	; 0x60
 800852a:	d877      	bhi.n	800861c <HAL_TIM_ConfigClockSource+0x16c>
 800852c:	2b50      	cmp	r3, #80	; 0x50
 800852e:	d03c      	beq.n	80085aa <HAL_TIM_ConfigClockSource+0xfa>
 8008530:	2b50      	cmp	r3, #80	; 0x50
 8008532:	d873      	bhi.n	800861c <HAL_TIM_ConfigClockSource+0x16c>
 8008534:	2b40      	cmp	r3, #64	; 0x40
 8008536:	d058      	beq.n	80085ea <HAL_TIM_ConfigClockSource+0x13a>
 8008538:	2b40      	cmp	r3, #64	; 0x40
 800853a:	d86f      	bhi.n	800861c <HAL_TIM_ConfigClockSource+0x16c>
 800853c:	2b30      	cmp	r3, #48	; 0x30
 800853e:	d064      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x15a>
 8008540:	2b30      	cmp	r3, #48	; 0x30
 8008542:	d86b      	bhi.n	800861c <HAL_TIM_ConfigClockSource+0x16c>
 8008544:	2b20      	cmp	r3, #32
 8008546:	d060      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x15a>
 8008548:	2b20      	cmp	r3, #32
 800854a:	d867      	bhi.n	800861c <HAL_TIM_ConfigClockSource+0x16c>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d05c      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x15a>
 8008550:	2b10      	cmp	r3, #16
 8008552:	d05a      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x15a>
 8008554:	e062      	b.n	800861c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	6899      	ldr	r1, [r3, #8]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f000 fcc1 	bl	8008eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	609a      	str	r2, [r3, #8]
      break;
 8008582:	e04f      	b.n	8008624 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	6899      	ldr	r1, [r3, #8]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f000 fcaa 	bl	8008eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085a6:	609a      	str	r2, [r3, #8]
      break;
 80085a8:	e03c      	b.n	8008624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	6859      	ldr	r1, [r3, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f000 fb68 	bl	8008c8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2150      	movs	r1, #80	; 0x50
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fc77 	bl	8008eb6 <TIM_ITRx_SetConfig>
      break;
 80085c8:	e02c      	b.n	8008624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	6859      	ldr	r1, [r3, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f000 fbc4 	bl	8008d64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2160      	movs	r1, #96	; 0x60
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fc67 	bl	8008eb6 <TIM_ITRx_SetConfig>
      break;
 80085e8:	e01c      	b.n	8008624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6818      	ldr	r0, [r3, #0]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6859      	ldr	r1, [r3, #4]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	461a      	mov	r2, r3
 80085f8:	f000 fb48 	bl	8008c8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2140      	movs	r1, #64	; 0x40
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fc57 	bl	8008eb6 <TIM_ITRx_SetConfig>
      break;
 8008608:	e00c      	b.n	8008624 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4619      	mov	r1, r3
 8008614:	4610      	mov	r0, r2
 8008616:	f000 fc4e 	bl	8008eb6 <TIM_ITRx_SetConfig>
      break;
 800861a:	e003      	b.n	8008624 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	73fb      	strb	r3, [r7, #15]
      break;
 8008620:	e000      	b.n	8008624 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b0c      	cmp	r3, #12
 8008652:	d831      	bhi.n	80086b8 <HAL_TIM_ReadCapturedValue+0x78>
 8008654:	a201      	add	r2, pc, #4	; (adr r2, 800865c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	08008691 	.word	0x08008691
 8008660:	080086b9 	.word	0x080086b9
 8008664:	080086b9 	.word	0x080086b9
 8008668:	080086b9 	.word	0x080086b9
 800866c:	0800869b 	.word	0x0800869b
 8008670:	080086b9 	.word	0x080086b9
 8008674:	080086b9 	.word	0x080086b9
 8008678:	080086b9 	.word	0x080086b9
 800867c:	080086a5 	.word	0x080086a5
 8008680:	080086b9 	.word	0x080086b9
 8008684:	080086b9 	.word	0x080086b9
 8008688:	080086b9 	.word	0x080086b9
 800868c:	080086af 	.word	0x080086af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008696:	60fb      	str	r3, [r7, #12]

      break;
 8008698:	e00f      	b.n	80086ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	60fb      	str	r3, [r7, #12]

      break;
 80086a2:	e00a      	b.n	80086ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086aa:	60fb      	str	r3, [r7, #12]

      break;
 80086ac:	e005      	b.n	80086ba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	60fb      	str	r3, [r7, #12]

      break;
 80086b6:	e000      	b.n	80086ba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80086b8:	bf00      	nop
  }

  return tmpreg;
 80086ba:	68fb      	ldr	r3, [r7, #12]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a40      	ldr	r2, [pc, #256]	; (8008818 <TIM_Base_SetConfig+0x114>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d013      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008722:	d00f      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a3d      	ldr	r2, [pc, #244]	; (800881c <TIM_Base_SetConfig+0x118>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00b      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a3c      	ldr	r2, [pc, #240]	; (8008820 <TIM_Base_SetConfig+0x11c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d007      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a3b      	ldr	r2, [pc, #236]	; (8008824 <TIM_Base_SetConfig+0x120>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d003      	beq.n	8008744 <TIM_Base_SetConfig+0x40>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a3a      	ldr	r2, [pc, #232]	; (8008828 <TIM_Base_SetConfig+0x124>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d108      	bne.n	8008756 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a2f      	ldr	r2, [pc, #188]	; (8008818 <TIM_Base_SetConfig+0x114>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d02b      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008764:	d027      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a2c      	ldr	r2, [pc, #176]	; (800881c <TIM_Base_SetConfig+0x118>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d023      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2b      	ldr	r2, [pc, #172]	; (8008820 <TIM_Base_SetConfig+0x11c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d01f      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a2a      	ldr	r2, [pc, #168]	; (8008824 <TIM_Base_SetConfig+0x120>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d01b      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a29      	ldr	r2, [pc, #164]	; (8008828 <TIM_Base_SetConfig+0x124>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d017      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a28      	ldr	r2, [pc, #160]	; (800882c <TIM_Base_SetConfig+0x128>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a27      	ldr	r2, [pc, #156]	; (8008830 <TIM_Base_SetConfig+0x12c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00f      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a26      	ldr	r2, [pc, #152]	; (8008834 <TIM_Base_SetConfig+0x130>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00b      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a25      	ldr	r2, [pc, #148]	; (8008838 <TIM_Base_SetConfig+0x134>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d007      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a24      	ldr	r2, [pc, #144]	; (800883c <TIM_Base_SetConfig+0x138>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d003      	beq.n	80087b6 <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a23      	ldr	r2, [pc, #140]	; (8008840 <TIM_Base_SetConfig+0x13c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d108      	bne.n	80087c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a0a      	ldr	r2, [pc, #40]	; (8008818 <TIM_Base_SetConfig+0x114>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_Base_SetConfig+0xf8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <TIM_Base_SetConfig+0x124>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d103      	bne.n	8008804 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	615a      	str	r2, [r3, #20]
}
 800880a:	bf00      	nop
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00
 8008828:	40010400 	.word	0x40010400
 800882c:	40014000 	.word	0x40014000
 8008830:	40014400 	.word	0x40014400
 8008834:	40014800 	.word	0x40014800
 8008838:	40001800 	.word	0x40001800
 800883c:	40001c00 	.word	0x40001c00
 8008840:	40002000 	.word	0x40002000

08008844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	f023 0201 	bic.w	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0303 	bic.w	r3, r3, #3
 800887a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f023 0302 	bic.w	r3, r3, #2
 800888c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4313      	orrs	r3, r2
 8008896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a20      	ldr	r2, [pc, #128]	; (800891c <TIM_OC1_SetConfig+0xd8>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d003      	beq.n	80088a8 <TIM_OC1_SetConfig+0x64>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a1f      	ldr	r2, [pc, #124]	; (8008920 <TIM_OC1_SetConfig+0xdc>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d10c      	bne.n	80088c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f023 0308 	bic.w	r3, r3, #8
 80088ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f023 0304 	bic.w	r3, r3, #4
 80088c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a15      	ldr	r2, [pc, #84]	; (800891c <TIM_OC1_SetConfig+0xd8>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d003      	beq.n	80088d2 <TIM_OC1_SetConfig+0x8e>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a14      	ldr	r2, [pc, #80]	; (8008920 <TIM_OC1_SetConfig+0xdc>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d111      	bne.n	80088f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	621a      	str	r2, [r3, #32]
}
 8008910:	bf00      	nop
 8008912:	371c      	adds	r7, #28
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	40010000 	.word	0x40010000
 8008920:	40010400 	.word	0x40010400

08008924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	f023 0210 	bic.w	r2, r3, #16
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800895a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	021b      	lsls	r3, r3, #8
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4313      	orrs	r3, r2
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f023 0320 	bic.w	r3, r3, #32
 800896e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	011b      	lsls	r3, r3, #4
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4313      	orrs	r3, r2
 800897a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a22      	ldr	r2, [pc, #136]	; (8008a08 <TIM_OC2_SetConfig+0xe4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d003      	beq.n	800898c <TIM_OC2_SetConfig+0x68>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a21      	ldr	r2, [pc, #132]	; (8008a0c <TIM_OC2_SetConfig+0xe8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d10d      	bne.n	80089a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a17      	ldr	r2, [pc, #92]	; (8008a08 <TIM_OC2_SetConfig+0xe4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d003      	beq.n	80089b8 <TIM_OC2_SetConfig+0x94>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a16      	ldr	r2, [pc, #88]	; (8008a0c <TIM_OC2_SetConfig+0xe8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d113      	bne.n	80089e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4313      	orrs	r3, r2
 80089de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40010000 	.word	0x40010000
 8008a0c:	40010400 	.word	0x40010400

08008a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0303 	bic.w	r3, r3, #3
 8008a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	021b      	lsls	r3, r3, #8
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a21      	ldr	r2, [pc, #132]	; (8008af0 <TIM_OC3_SetConfig+0xe0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d003      	beq.n	8008a76 <TIM_OC3_SetConfig+0x66>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a20      	ldr	r2, [pc, #128]	; (8008af4 <TIM_OC3_SetConfig+0xe4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d10d      	bne.n	8008a92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a16      	ldr	r2, [pc, #88]	; (8008af0 <TIM_OC3_SetConfig+0xe0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d003      	beq.n	8008aa2 <TIM_OC3_SetConfig+0x92>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a15      	ldr	r2, [pc, #84]	; (8008af4 <TIM_OC3_SetConfig+0xe4>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d113      	bne.n	8008aca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	011b      	lsls	r3, r3, #4
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	621a      	str	r2, [r3, #32]
}
 8008ae4:	bf00      	nop
 8008ae6:	371c      	adds	r7, #28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	40010000 	.word	0x40010000
 8008af4:	40010400 	.word	0x40010400

08008af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	031b      	lsls	r3, r3, #12
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a12      	ldr	r2, [pc, #72]	; (8008b9c <TIM_OC4_SetConfig+0xa4>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d003      	beq.n	8008b60 <TIM_OC4_SetConfig+0x68>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a11      	ldr	r2, [pc, #68]	; (8008ba0 <TIM_OC4_SetConfig+0xa8>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d109      	bne.n	8008b74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	019b      	lsls	r3, r3, #6
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	621a      	str	r2, [r3, #32]
}
 8008b8e:	bf00      	nop
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	40010400 	.word	0x40010400

08008ba4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f023 0201 	bic.w	r2, r3, #1
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4a28      	ldr	r2, [pc, #160]	; (8008c70 <TIM_TI1_SetConfig+0xcc>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d01b      	beq.n	8008c0a <TIM_TI1_SetConfig+0x66>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd8:	d017      	beq.n	8008c0a <TIM_TI1_SetConfig+0x66>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	4a25      	ldr	r2, [pc, #148]	; (8008c74 <TIM_TI1_SetConfig+0xd0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d013      	beq.n	8008c0a <TIM_TI1_SetConfig+0x66>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4a24      	ldr	r2, [pc, #144]	; (8008c78 <TIM_TI1_SetConfig+0xd4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00f      	beq.n	8008c0a <TIM_TI1_SetConfig+0x66>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4a23      	ldr	r2, [pc, #140]	; (8008c7c <TIM_TI1_SetConfig+0xd8>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00b      	beq.n	8008c0a <TIM_TI1_SetConfig+0x66>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4a22      	ldr	r2, [pc, #136]	; (8008c80 <TIM_TI1_SetConfig+0xdc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d007      	beq.n	8008c0a <TIM_TI1_SetConfig+0x66>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4a21      	ldr	r2, [pc, #132]	; (8008c84 <TIM_TI1_SetConfig+0xe0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d003      	beq.n	8008c0a <TIM_TI1_SetConfig+0x66>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	4a20      	ldr	r2, [pc, #128]	; (8008c88 <TIM_TI1_SetConfig+0xe4>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d101      	bne.n	8008c0e <TIM_TI1_SetConfig+0x6a>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <TIM_TI1_SetConfig+0x6c>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d008      	beq.n	8008c26 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f023 0303 	bic.w	r3, r3, #3
 8008c1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	e003      	b.n	8008c2e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f043 0301 	orr.w	r3, r3, #1
 8008c2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f023 030a 	bic.w	r3, r3, #10
 8008c48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f003 030a 	and.w	r3, r3, #10
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	621a      	str	r2, [r3, #32]
}
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	40010000 	.word	0x40010000
 8008c74:	40000400 	.word	0x40000400
 8008c78:	40000800 	.word	0x40000800
 8008c7c:	40000c00 	.word	0x40000c00
 8008c80:	40010400 	.word	0x40010400
 8008c84:	40014000 	.word	0x40014000
 8008c88:	40001800 	.word	0x40001800

08008c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	f023 0201 	bic.w	r2, r3, #1
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f023 030a 	bic.w	r3, r3, #10
 8008cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	621a      	str	r2, [r3, #32]
}
 8008cde:	bf00      	nop
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b087      	sub	sp, #28
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	607a      	str	r2, [r7, #4]
 8008cf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	f023 0210 	bic.w	r2, r3, #16
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	031b      	lsls	r3, r3, #12
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	011b      	lsls	r3, r3, #4
 8008d42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	621a      	str	r2, [r3, #32]
}
 8008d58:	bf00      	nop
 8008d5a:	371c      	adds	r7, #28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b087      	sub	sp, #28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	f023 0210 	bic.w	r2, r3, #16
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	031b      	lsls	r3, r3, #12
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008da0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	621a      	str	r2, [r3, #32]
}
 8008db8:	bf00      	nop
 8008dba:	371c      	adds	r7, #28
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f023 0303 	bic.w	r3, r3, #3
 8008df0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	011b      	lsls	r3, r3, #4
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008e14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	621a      	str	r2, [r3, #32]
}
 8008e30:	bf00      	nop
 8008e32:	371c      	adds	r7, #28
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6a1b      	ldr	r3, [r3, #32]
 8008e60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	031b      	lsls	r3, r3, #12
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	031b      	lsls	r3, r3, #12
 8008e94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	621a      	str	r2, [r3, #32]
}
 8008eaa:	bf00      	nop
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b085      	sub	sp, #20
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	f043 0307 	orr.w	r3, r3, #7
 8008ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	609a      	str	r2, [r3, #8]
}
 8008ee0:	bf00      	nop
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	021a      	lsls	r2, r3, #8
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	697a      	ldr	r2, [r7, #20]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	609a      	str	r2, [r3, #8]
}
 8008f20:	bf00      	nop
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f003 031f 	and.w	r3, r3, #31
 8008f3e:	2201      	movs	r2, #1
 8008f40:	fa02 f303 	lsl.w	r3, r2, r3
 8008f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a1a      	ldr	r2, [r3, #32]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	401a      	ands	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6a1a      	ldr	r2, [r3, #32]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f003 031f 	and.w	r3, r3, #31
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	fa01 f303 	lsl.w	r3, r1, r3
 8008f64:	431a      	orrs	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	621a      	str	r2, [r3, #32]
}
 8008f6a:	bf00      	nop
 8008f6c:	371c      	adds	r7, #28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
	...

08008f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e05a      	b.n	8009046 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a21      	ldr	r2, [pc, #132]	; (8009054 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d022      	beq.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fdc:	d01d      	beq.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a1d      	ldr	r2, [pc, #116]	; (8009058 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d018      	beq.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a1b      	ldr	r2, [pc, #108]	; (800905c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d013      	beq.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a1a      	ldr	r2, [pc, #104]	; (8009060 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d00e      	beq.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a18      	ldr	r2, [pc, #96]	; (8009064 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d009      	beq.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a17      	ldr	r2, [pc, #92]	; (8009068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d004      	beq.n	800901a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a15      	ldr	r2, [pc, #84]	; (800906c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d10c      	bne.n	8009034 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	4313      	orrs	r3, r2
 800902a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	40010000 	.word	0x40010000
 8009058:	40000400 	.word	0x40000400
 800905c:	40000800 	.word	0x40000800
 8009060:	40000c00 	.word	0x40000c00
 8009064:	40010400 	.word	0x40010400
 8009068:	40014000 	.word	0x40014000
 800906c:	40001800 	.word	0x40001800

08009070 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009088:	2302      	movs	r3, #2
 800908a:	e03d      	b.n	8009108 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e03f      	b.n	80091ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7fc f836 	bl	80051d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2224      	movs	r2, #36	; 0x24
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800917e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fddf 	bl	8009d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	695a      	ldr	r2, [r3, #20]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b08a      	sub	sp, #40	; 0x28
 80091da:	af02      	add	r7, sp, #8
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	603b      	str	r3, [r7, #0]
 80091e2:	4613      	mov	r3, r2
 80091e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	d17c      	bne.n	80092f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <HAL_UART_Transmit+0x2c>
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e075      	b.n	80092f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_UART_Transmit+0x3e>
 8009210:	2302      	movs	r3, #2
 8009212:	e06e      	b.n	80092f2 <HAL_UART_Transmit+0x11c>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2221      	movs	r2, #33	; 0x21
 8009226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800922a:	f7fc f961 	bl	80054f0 <HAL_GetTick>
 800922e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	88fa      	ldrh	r2, [r7, #6]
 8009234:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	88fa      	ldrh	r2, [r7, #6]
 800923a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009244:	d108      	bne.n	8009258 <HAL_UART_Transmit+0x82>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	e003      	b.n	8009260 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800925c:	2300      	movs	r3, #0
 800925e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009268:	e02a      	b.n	80092c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2200      	movs	r2, #0
 8009272:	2180      	movs	r1, #128	; 0x80
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 fb1f 	bl	80098b8 <UART_WaitOnFlagUntilTimeout>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e036      	b.n	80092f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10b      	bne.n	80092a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	3302      	adds	r3, #2
 800929e:	61bb      	str	r3, [r7, #24]
 80092a0:	e007      	b.n	80092b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	781a      	ldrb	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	3301      	adds	r3, #1
 80092b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1cf      	bne.n	800926a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2200      	movs	r2, #0
 80092d2:	2140      	movs	r1, #64	; 0x40
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 faef 	bl	80098b8 <UART_WaitOnFlagUntilTimeout>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e006      	b.n	80092f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	e000      	b.n	80092f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80092f0:	2302      	movs	r3, #2
  }
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3720      	adds	r7, #32
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	4613      	mov	r3, r2
 8009306:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b20      	cmp	r3, #32
 8009312:	d11d      	bne.n	8009350 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <HAL_UART_Receive_IT+0x26>
 800931a:	88fb      	ldrh	r3, [r7, #6]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e016      	b.n	8009352 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800932a:	2b01      	cmp	r3, #1
 800932c:	d101      	bne.n	8009332 <HAL_UART_Receive_IT+0x38>
 800932e:	2302      	movs	r3, #2
 8009330:	e00f      	b.n	8009352 <HAL_UART_Receive_IT+0x58>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009340:	88fb      	ldrh	r3, [r7, #6]
 8009342:	461a      	mov	r2, r3
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 fb24 	bl	8009994 <UART_Start_Receive_IT>
 800934c:	4603      	mov	r3, r0
 800934e:	e000      	b.n	8009352 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009350:	2302      	movs	r3, #2
  }
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b0ba      	sub	sp, #232	; 0xe8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009382:	2300      	movs	r3, #0
 8009384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009388:	2300      	movs	r3, #0
 800938a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800938e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009392:	f003 030f 	and.w	r3, r3, #15
 8009396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800939a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10f      	bne.n	80093c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a6:	f003 0320 	and.w	r3, r3, #32
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <HAL_UART_IRQHandler+0x66>
 80093ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fc07 	bl	8009bce <UART_Receive_IT>
      return;
 80093c0:	e256      	b.n	8009870 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80093c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 80de 	beq.w	8009588 <HAL_UART_IRQHandler+0x22c>
 80093cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d106      	bne.n	80093e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80093d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 80d1 	beq.w	8009588 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <HAL_UART_IRQHandler+0xae>
 80093f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009402:	f043 0201 	orr.w	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800940a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <HAL_UART_IRQHandler+0xd2>
 8009416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f043 0202 	orr.w	r2, r3, #2
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800942e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00b      	beq.n	8009452 <HAL_UART_IRQHandler+0xf6>
 800943a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	f043 0204 	orr.w	r2, r3, #4
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d011      	beq.n	8009482 <HAL_UART_IRQHandler+0x126>
 800945e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009462:	f003 0320 	and.w	r3, r3, #32
 8009466:	2b00      	cmp	r3, #0
 8009468:	d105      	bne.n	8009476 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800946a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d005      	beq.n	8009482 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	f043 0208 	orr.w	r2, r3, #8
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 81ed 	beq.w	8009866 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800948c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b00      	cmp	r3, #0
 8009496:	d008      	beq.n	80094aa <HAL_UART_IRQHandler+0x14e>
 8009498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fb92 	bl	8009bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b4:	2b40      	cmp	r3, #64	; 0x40
 80094b6:	bf0c      	ite	eq
 80094b8:	2301      	moveq	r3, #1
 80094ba:	2300      	movne	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d103      	bne.n	80094d6 <HAL_UART_IRQHandler+0x17a>
 80094ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d04f      	beq.n	8009576 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa9a 	bl	8009a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e6:	2b40      	cmp	r3, #64	; 0x40
 80094e8:	d141      	bne.n	800956e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3314      	adds	r3, #20
 80094f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	3314      	adds	r3, #20
 8009512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009516:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800951a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800952e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1d9      	bne.n	80094ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	2b00      	cmp	r3, #0
 800953c:	d013      	beq.n	8009566 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009542:	4a7d      	ldr	r2, [pc, #500]	; (8009738 <HAL_UART_IRQHandler+0x3dc>)
 8009544:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954a:	4618      	mov	r0, r3
 800954c:	f7fc f952 	bl	80057f4 <HAL_DMA_Abort_IT>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d016      	beq.n	8009584 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009560:	4610      	mov	r0, r2
 8009562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009564:	e00e      	b.n	8009584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f990 	bl	800988c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956c:	e00a      	b.n	8009584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f98c 	bl	800988c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009574:	e006      	b.n	8009584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f988 	bl	800988c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009582:	e170      	b.n	8009866 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009584:	bf00      	nop
    return;
 8009586:	e16e      	b.n	8009866 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958c:	2b01      	cmp	r3, #1
 800958e:	f040 814a 	bne.w	8009826 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009596:	f003 0310 	and.w	r3, r3, #16
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 8143 	beq.w	8009826 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80095a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a4:	f003 0310 	and.w	r3, r3, #16
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 813c 	beq.w	8009826 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095ae:	2300      	movs	r3, #0
 80095b0:	60bb      	str	r3, [r7, #8]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60bb      	str	r3, [r7, #8]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	60bb      	str	r3, [r7, #8]
 80095c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ce:	2b40      	cmp	r3, #64	; 0x40
 80095d0:	f040 80b4 	bne.w	800973c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 8140 	beq.w	800986a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095f2:	429a      	cmp	r2, r3
 80095f4:	f080 8139 	bcs.w	800986a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800960a:	f000 8088 	beq.w	800971e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	330c      	adds	r3, #12
 8009614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800961c:	e853 3f00 	ldrex	r3, [r3]
 8009620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800962c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	330c      	adds	r3, #12
 8009636:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800963a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800963e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1d9      	bne.n	800960e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3314      	adds	r3, #20
 8009660:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009664:	e853 3f00 	ldrex	r3, [r3]
 8009668:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800966a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800966c:	f023 0301 	bic.w	r3, r3, #1
 8009670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3314      	adds	r3, #20
 800967a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800967e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009682:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009684:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009686:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e1      	bne.n	800965a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3314      	adds	r3, #20
 800969c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096a0:	e853 3f00 	ldrex	r3, [r3]
 80096a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3314      	adds	r3, #20
 80096b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e3      	bne.n	8009696 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	330c      	adds	r3, #12
 80096e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096ee:	f023 0310 	bic.w	r3, r3, #16
 80096f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	330c      	adds	r3, #12
 80096fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009700:	65ba      	str	r2, [r7, #88]	; 0x58
 8009702:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009704:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009708:	e841 2300 	strex	r3, r2, [r1]
 800970c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800970e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e3      	bne.n	80096dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009718:	4618      	mov	r0, r3
 800971a:	f7fb fffb 	bl	8005714 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009726:	b29b      	uxth	r3, r3
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	b29b      	uxth	r3, r3
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f8b6 	bl	80098a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009734:	e099      	b.n	800986a <HAL_UART_IRQHandler+0x50e>
 8009736:	bf00      	nop
 8009738:	08009ad7 	.word	0x08009ad7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009744:	b29b      	uxth	r3, r3
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009750:	b29b      	uxth	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 808b 	beq.w	800986e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800975c:	2b00      	cmp	r3, #0
 800975e:	f000 8086 	beq.w	800986e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	330c      	adds	r3, #12
 8009768:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009778:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	330c      	adds	r3, #12
 8009782:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009786:	647a      	str	r2, [r7, #68]	; 0x44
 8009788:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800978c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800978e:	e841 2300 	strex	r3, r2, [r1]
 8009792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1e3      	bne.n	8009762 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3314      	adds	r3, #20
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	e853 3f00 	ldrex	r3, [r3]
 80097a8:	623b      	str	r3, [r7, #32]
   return(result);
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	f023 0301 	bic.w	r3, r3, #1
 80097b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3314      	adds	r3, #20
 80097ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097be:	633a      	str	r2, [r7, #48]	; 0x30
 80097c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e3      	bne.n	800979a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	330c      	adds	r3, #12
 80097e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0310 	bic.w	r3, r3, #16
 80097f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	330c      	adds	r3, #12
 8009800:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009804:	61fa      	str	r2, [r7, #28]
 8009806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009808:	69b9      	ldr	r1, [r7, #24]
 800980a:	69fa      	ldr	r2, [r7, #28]
 800980c:	e841 2300 	strex	r3, r2, [r1]
 8009810:	617b      	str	r3, [r7, #20]
   return(result);
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e3      	bne.n	80097e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f83e 	bl	80098a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009824:	e023      	b.n	800986e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800982a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800982e:	2b00      	cmp	r3, #0
 8009830:	d009      	beq.n	8009846 <HAL_UART_IRQHandler+0x4ea>
 8009832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f95d 	bl	8009afe <UART_Transmit_IT>
    return;
 8009844:	e014      	b.n	8009870 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800984a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00e      	beq.n	8009870 <HAL_UART_IRQHandler+0x514>
 8009852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d008      	beq.n	8009870 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f99d 	bl	8009b9e <UART_EndTransmit_IT>
    return;
 8009864:	e004      	b.n	8009870 <HAL_UART_IRQHandler+0x514>
    return;
 8009866:	bf00      	nop
 8009868:	e002      	b.n	8009870 <HAL_UART_IRQHandler+0x514>
      return;
 800986a:	bf00      	nop
 800986c:	e000      	b.n	8009870 <HAL_UART_IRQHandler+0x514>
      return;
 800986e:	bf00      	nop
  }
}
 8009870:	37e8      	adds	r7, #232	; 0xe8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop

08009878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	460b      	mov	r3, r1
 80098aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b090      	sub	sp, #64	; 0x40
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	603b      	str	r3, [r7, #0]
 80098c4:	4613      	mov	r3, r2
 80098c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098c8:	e050      	b.n	800996c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098d0:	d04c      	beq.n	800996c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d007      	beq.n	80098e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80098d8:	f7fb fe0a 	bl	80054f0 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d241      	bcs.n	800996c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	330c      	adds	r3, #12
 80098ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009908:	637a      	str	r2, [r7, #52]	; 0x34
 800990a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800990e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e5      	bne.n	80098e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3314      	adds	r3, #20
 8009922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	613b      	str	r3, [r7, #16]
   return(result);
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f023 0301 	bic.w	r3, r3, #1
 8009932:	63bb      	str	r3, [r7, #56]	; 0x38
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3314      	adds	r3, #20
 800993a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800993c:	623a      	str	r2, [r7, #32]
 800993e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009940:	69f9      	ldr	r1, [r7, #28]
 8009942:	6a3a      	ldr	r2, [r7, #32]
 8009944:	e841 2300 	strex	r3, r2, [r1]
 8009948:	61bb      	str	r3, [r7, #24]
   return(result);
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e5      	bne.n	800991c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2220      	movs	r2, #32
 8009954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009968:	2303      	movs	r3, #3
 800996a:	e00f      	b.n	800998c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	4013      	ands	r3, r2
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	429a      	cmp	r2, r3
 800997a:	bf0c      	ite	eq
 800997c:	2301      	moveq	r3, #1
 800997e:	2300      	movne	r3, #0
 8009980:	b2db      	uxtb	r3, r3
 8009982:	461a      	mov	r2, r3
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	429a      	cmp	r2, r3
 8009988:	d09f      	beq.n	80098ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3740      	adds	r7, #64	; 0x40
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	88fa      	ldrh	r2, [r7, #6]
 80099ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	88fa      	ldrh	r2, [r7, #6]
 80099b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2222      	movs	r2, #34	; 0x22
 80099be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d007      	beq.n	80099e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68da      	ldr	r2, [r3, #12]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	695a      	ldr	r2, [r3, #20]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f042 0201 	orr.w	r2, r2, #1
 80099f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f042 0220 	orr.w	r2, r2, #32
 8009a00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b095      	sub	sp, #84	; 0x54
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	330c      	adds	r3, #12
 8009a36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a38:	643a      	str	r2, [r7, #64]	; 0x40
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a40:	e841 2300 	strex	r3, r2, [r1]
 8009a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e5      	bne.n	8009a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3314      	adds	r3, #20
 8009a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	e853 3f00 	ldrex	r3, [r3]
 8009a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3314      	adds	r3, #20
 8009a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a74:	e841 2300 	strex	r3, r2, [r1]
 8009a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e5      	bne.n	8009a4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d119      	bne.n	8009abc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	330c      	adds	r3, #12
 8009a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f023 0310 	bic.w	r3, r3, #16
 8009a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	330c      	adds	r3, #12
 8009aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aa8:	61ba      	str	r2, [r7, #24]
 8009aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6979      	ldr	r1, [r7, #20]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e5      	bne.n	8009a88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2220      	movs	r2, #32
 8009ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009aca:	bf00      	nop
 8009acc:	3754      	adds	r7, #84	; 0x54
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f7ff fecb 	bl	800988c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b085      	sub	sp, #20
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b21      	cmp	r3, #33	; 0x21
 8009b10:	d13e      	bne.n	8009b90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b1a:	d114      	bne.n	8009b46 <UART_Transmit_IT+0x48>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d110      	bne.n	8009b46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a1b      	ldr	r3, [r3, #32]
 8009b28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	1c9a      	adds	r2, r3, #2
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	621a      	str	r2, [r3, #32]
 8009b44:	e008      	b.n	8009b58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	1c59      	adds	r1, r3, #1
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6211      	str	r1, [r2, #32]
 8009b50:	781a      	ldrb	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	4619      	mov	r1, r3
 8009b66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10f      	bne.n	8009b8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68da      	ldr	r2, [r3, #12]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e000      	b.n	8009b92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b90:	2302      	movs	r3, #2
  }
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff fe5a 	bl	8009878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b08c      	sub	sp, #48	; 0x30
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b22      	cmp	r3, #34	; 0x22
 8009be0:	f040 80ab 	bne.w	8009d3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bec:	d117      	bne.n	8009c1e <UART_Receive_IT+0x50>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d113      	bne.n	8009c1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c16:	1c9a      	adds	r2, r3, #2
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8009c1c:	e026      	b.n	8009c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c30:	d007      	beq.n	8009c42 <UART_Receive_IT+0x74>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10a      	bne.n	8009c50 <UART_Receive_IT+0x82>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d106      	bne.n	8009c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4c:	701a      	strb	r2, [r3, #0]
 8009c4e:	e008      	b.n	8009c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c66:	1c5a      	adds	r2, r3, #1
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	3b01      	subs	r3, #1
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d15a      	bne.n	8009d36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 0220 	bic.w	r2, r2, #32
 8009c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68da      	ldr	r2, [r3, #12]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	695a      	ldr	r2, [r3, #20]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0201 	bic.w	r2, r2, #1
 8009cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d135      	bne.n	8009d2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	330c      	adds	r3, #12
 8009ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f023 0310 	bic.w	r3, r3, #16
 8009cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	330c      	adds	r3, #12
 8009ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce6:	623a      	str	r2, [r7, #32]
 8009ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cea:	69f9      	ldr	r1, [r7, #28]
 8009cec:	6a3a      	ldr	r2, [r7, #32]
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e5      	bne.n	8009cc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0310 	and.w	r3, r3, #16
 8009d04:	2b10      	cmp	r3, #16
 8009d06:	d10a      	bne.n	8009d1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fdbb 	bl	80098a0 <HAL_UARTEx_RxEventCallback>
 8009d2a:	e002      	b.n	8009d32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7f7 fe79 	bl	8001a24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e002      	b.n	8009d3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e000      	b.n	8009d3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009d3a:	2302      	movs	r3, #2
  }
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3730      	adds	r7, #48	; 0x30
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d48:	b0c0      	sub	sp, #256	; 0x100
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d60:	68d9      	ldr	r1, [r3, #12]
 8009d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	ea40 0301 	orr.w	r3, r0, r1
 8009d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	431a      	orrs	r2, r3
 8009d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009d9c:	f021 010c 	bic.w	r1, r1, #12
 8009da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009daa:	430b      	orrs	r3, r1
 8009dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbe:	6999      	ldr	r1, [r3, #24]
 8009dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	ea40 0301 	orr.w	r3, r0, r1
 8009dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b8f      	ldr	r3, [pc, #572]	; (800a010 <UART_SetConfig+0x2cc>)
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d005      	beq.n	8009de4 <UART_SetConfig+0xa0>
 8009dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	4b8d      	ldr	r3, [pc, #564]	; (800a014 <UART_SetConfig+0x2d0>)
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d104      	bne.n	8009dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009de4:	f7fd fb0a 	bl	80073fc <HAL_RCC_GetPCLK2Freq>
 8009de8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009dec:	e003      	b.n	8009df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009dee:	f7fd faf1 	bl	80073d4 <HAL_RCC_GetPCLK1Freq>
 8009df2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e00:	f040 810c 	bne.w	800a01c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e16:	4622      	mov	r2, r4
 8009e18:	462b      	mov	r3, r5
 8009e1a:	1891      	adds	r1, r2, r2
 8009e1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e1e:	415b      	adcs	r3, r3
 8009e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e26:	4621      	mov	r1, r4
 8009e28:	eb12 0801 	adds.w	r8, r2, r1
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	eb43 0901 	adc.w	r9, r3, r1
 8009e32:	f04f 0200 	mov.w	r2, #0
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e46:	4690      	mov	r8, r2
 8009e48:	4699      	mov	r9, r3
 8009e4a:	4623      	mov	r3, r4
 8009e4c:	eb18 0303 	adds.w	r3, r8, r3
 8009e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e54:	462b      	mov	r3, r5
 8009e56:	eb49 0303 	adc.w	r3, r9, r3
 8009e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e72:	460b      	mov	r3, r1
 8009e74:	18db      	adds	r3, r3, r3
 8009e76:	653b      	str	r3, [r7, #80]	; 0x50
 8009e78:	4613      	mov	r3, r2
 8009e7a:	eb42 0303 	adc.w	r3, r2, r3
 8009e7e:	657b      	str	r3, [r7, #84]	; 0x54
 8009e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009e88:	f7f6 feb8 	bl	8000bfc <__aeabi_uldivmod>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4b61      	ldr	r3, [pc, #388]	; (800a018 <UART_SetConfig+0x2d4>)
 8009e92:	fba3 2302 	umull	r2, r3, r3, r2
 8009e96:	095b      	lsrs	r3, r3, #5
 8009e98:	011c      	lsls	r4, r3, #4
 8009e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009eac:	4642      	mov	r2, r8
 8009eae:	464b      	mov	r3, r9
 8009eb0:	1891      	adds	r1, r2, r2
 8009eb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8009eb4:	415b      	adcs	r3, r3
 8009eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ebc:	4641      	mov	r1, r8
 8009ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8009ec2:	4649      	mov	r1, r9
 8009ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8009ec8:	f04f 0200 	mov.w	r2, #0
 8009ecc:	f04f 0300 	mov.w	r3, #0
 8009ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009edc:	4692      	mov	sl, r2
 8009ede:	469b      	mov	fp, r3
 8009ee0:	4643      	mov	r3, r8
 8009ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8009ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009eea:	464b      	mov	r3, r9
 8009eec:	eb4b 0303 	adc.w	r3, fp, r3
 8009ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	18db      	adds	r3, r3, r3
 8009f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8009f0e:	4613      	mov	r3, r2
 8009f10:	eb42 0303 	adc.w	r3, r2, r3
 8009f14:	647b      	str	r3, [r7, #68]	; 0x44
 8009f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f1e:	f7f6 fe6d 	bl	8000bfc <__aeabi_uldivmod>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4611      	mov	r1, r2
 8009f28:	4b3b      	ldr	r3, [pc, #236]	; (800a018 <UART_SetConfig+0x2d4>)
 8009f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8009f2e:	095b      	lsrs	r3, r3, #5
 8009f30:	2264      	movs	r2, #100	; 0x64
 8009f32:	fb02 f303 	mul.w	r3, r2, r3
 8009f36:	1acb      	subs	r3, r1, r3
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f3e:	4b36      	ldr	r3, [pc, #216]	; (800a018 <UART_SetConfig+0x2d4>)
 8009f40:	fba3 2302 	umull	r2, r3, r3, r2
 8009f44:	095b      	lsrs	r3, r3, #5
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f4c:	441c      	add	r4, r3
 8009f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f60:	4642      	mov	r2, r8
 8009f62:	464b      	mov	r3, r9
 8009f64:	1891      	adds	r1, r2, r2
 8009f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f68:	415b      	adcs	r3, r3
 8009f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f70:	4641      	mov	r1, r8
 8009f72:	1851      	adds	r1, r2, r1
 8009f74:	6339      	str	r1, [r7, #48]	; 0x30
 8009f76:	4649      	mov	r1, r9
 8009f78:	414b      	adcs	r3, r1
 8009f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	f04f 0300 	mov.w	r3, #0
 8009f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009f88:	4659      	mov	r1, fp
 8009f8a:	00cb      	lsls	r3, r1, #3
 8009f8c:	4651      	mov	r1, sl
 8009f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f92:	4651      	mov	r1, sl
 8009f94:	00ca      	lsls	r2, r1, #3
 8009f96:	4610      	mov	r0, r2
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4642      	mov	r2, r8
 8009f9e:	189b      	adds	r3, r3, r2
 8009fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fa4:	464b      	mov	r3, r9
 8009fa6:	460a      	mov	r2, r1
 8009fa8:	eb42 0303 	adc.w	r3, r2, r3
 8009fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	18db      	adds	r3, r3, r3
 8009fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fca:	4613      	mov	r3, r2
 8009fcc:	eb42 0303 	adc.w	r3, r2, r3
 8009fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009fda:	f7f6 fe0f 	bl	8000bfc <__aeabi_uldivmod>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <UART_SetConfig+0x2d4>)
 8009fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8009fe8:	095b      	lsrs	r3, r3, #5
 8009fea:	2164      	movs	r1, #100	; 0x64
 8009fec:	fb01 f303 	mul.w	r3, r1, r3
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	3332      	adds	r3, #50	; 0x32
 8009ff6:	4a08      	ldr	r2, [pc, #32]	; (800a018 <UART_SetConfig+0x2d4>)
 8009ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffc:	095b      	lsrs	r3, r3, #5
 8009ffe:	f003 0207 	and.w	r2, r3, #7
 800a002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4422      	add	r2, r4
 800a00a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a00c:	e106      	b.n	800a21c <UART_SetConfig+0x4d8>
 800a00e:	bf00      	nop
 800a010:	40011000 	.word	0x40011000
 800a014:	40011400 	.word	0x40011400
 800a018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a01c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a020:	2200      	movs	r2, #0
 800a022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a026:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a02a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a02e:	4642      	mov	r2, r8
 800a030:	464b      	mov	r3, r9
 800a032:	1891      	adds	r1, r2, r2
 800a034:	6239      	str	r1, [r7, #32]
 800a036:	415b      	adcs	r3, r3
 800a038:	627b      	str	r3, [r7, #36]	; 0x24
 800a03a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a03e:	4641      	mov	r1, r8
 800a040:	1854      	adds	r4, r2, r1
 800a042:	4649      	mov	r1, r9
 800a044:	eb43 0501 	adc.w	r5, r3, r1
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	f04f 0300 	mov.w	r3, #0
 800a050:	00eb      	lsls	r3, r5, #3
 800a052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a056:	00e2      	lsls	r2, r4, #3
 800a058:	4614      	mov	r4, r2
 800a05a:	461d      	mov	r5, r3
 800a05c:	4643      	mov	r3, r8
 800a05e:	18e3      	adds	r3, r4, r3
 800a060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a064:	464b      	mov	r3, r9
 800a066:	eb45 0303 	adc.w	r3, r5, r3
 800a06a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a06e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a07a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a07e:	f04f 0200 	mov.w	r2, #0
 800a082:	f04f 0300 	mov.w	r3, #0
 800a086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a08a:	4629      	mov	r1, r5
 800a08c:	008b      	lsls	r3, r1, #2
 800a08e:	4621      	mov	r1, r4
 800a090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a094:	4621      	mov	r1, r4
 800a096:	008a      	lsls	r2, r1, #2
 800a098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a09c:	f7f6 fdae 	bl	8000bfc <__aeabi_uldivmod>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4b60      	ldr	r3, [pc, #384]	; (800a228 <UART_SetConfig+0x4e4>)
 800a0a6:	fba3 2302 	umull	r2, r3, r3, r2
 800a0aa:	095b      	lsrs	r3, r3, #5
 800a0ac:	011c      	lsls	r4, r3, #4
 800a0ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	1891      	adds	r1, r2, r2
 800a0c6:	61b9      	str	r1, [r7, #24]
 800a0c8:	415b      	adcs	r3, r3
 800a0ca:	61fb      	str	r3, [r7, #28]
 800a0cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0d0:	4641      	mov	r1, r8
 800a0d2:	1851      	adds	r1, r2, r1
 800a0d4:	6139      	str	r1, [r7, #16]
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	414b      	adcs	r3, r1
 800a0da:	617b      	str	r3, [r7, #20]
 800a0dc:	f04f 0200 	mov.w	r2, #0
 800a0e0:	f04f 0300 	mov.w	r3, #0
 800a0e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a0e8:	4659      	mov	r1, fp
 800a0ea:	00cb      	lsls	r3, r1, #3
 800a0ec:	4651      	mov	r1, sl
 800a0ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0f2:	4651      	mov	r1, sl
 800a0f4:	00ca      	lsls	r2, r1, #3
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	189b      	adds	r3, r3, r2
 800a100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a104:	464b      	mov	r3, r9
 800a106:	460a      	mov	r2, r1
 800a108:	eb42 0303 	adc.w	r3, r2, r3
 800a10c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	67bb      	str	r3, [r7, #120]	; 0x78
 800a11a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	f04f 0300 	mov.w	r3, #0
 800a124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a128:	4649      	mov	r1, r9
 800a12a:	008b      	lsls	r3, r1, #2
 800a12c:	4641      	mov	r1, r8
 800a12e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a132:	4641      	mov	r1, r8
 800a134:	008a      	lsls	r2, r1, #2
 800a136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a13a:	f7f6 fd5f 	bl	8000bfc <__aeabi_uldivmod>
 800a13e:	4602      	mov	r2, r0
 800a140:	460b      	mov	r3, r1
 800a142:	4611      	mov	r1, r2
 800a144:	4b38      	ldr	r3, [pc, #224]	; (800a228 <UART_SetConfig+0x4e4>)
 800a146:	fba3 2301 	umull	r2, r3, r3, r1
 800a14a:	095b      	lsrs	r3, r3, #5
 800a14c:	2264      	movs	r2, #100	; 0x64
 800a14e:	fb02 f303 	mul.w	r3, r2, r3
 800a152:	1acb      	subs	r3, r1, r3
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	3332      	adds	r3, #50	; 0x32
 800a158:	4a33      	ldr	r2, [pc, #204]	; (800a228 <UART_SetConfig+0x4e4>)
 800a15a:	fba2 2303 	umull	r2, r3, r2, r3
 800a15e:	095b      	lsrs	r3, r3, #5
 800a160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a164:	441c      	add	r4, r3
 800a166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a16a:	2200      	movs	r2, #0
 800a16c:	673b      	str	r3, [r7, #112]	; 0x70
 800a16e:	677a      	str	r2, [r7, #116]	; 0x74
 800a170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a174:	4642      	mov	r2, r8
 800a176:	464b      	mov	r3, r9
 800a178:	1891      	adds	r1, r2, r2
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	415b      	adcs	r3, r3
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a184:	4641      	mov	r1, r8
 800a186:	1851      	adds	r1, r2, r1
 800a188:	6039      	str	r1, [r7, #0]
 800a18a:	4649      	mov	r1, r9
 800a18c:	414b      	adcs	r3, r1
 800a18e:	607b      	str	r3, [r7, #4]
 800a190:	f04f 0200 	mov.w	r2, #0
 800a194:	f04f 0300 	mov.w	r3, #0
 800a198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a19c:	4659      	mov	r1, fp
 800a19e:	00cb      	lsls	r3, r1, #3
 800a1a0:	4651      	mov	r1, sl
 800a1a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1a6:	4651      	mov	r1, sl
 800a1a8:	00ca      	lsls	r2, r1, #3
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	189b      	adds	r3, r3, r2
 800a1b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	460a      	mov	r2, r1
 800a1ba:	eb42 0303 	adc.w	r3, r2, r3
 800a1be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	663b      	str	r3, [r7, #96]	; 0x60
 800a1ca:	667a      	str	r2, [r7, #100]	; 0x64
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	f04f 0300 	mov.w	r3, #0
 800a1d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a1d8:	4649      	mov	r1, r9
 800a1da:	008b      	lsls	r3, r1, #2
 800a1dc:	4641      	mov	r1, r8
 800a1de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1e2:	4641      	mov	r1, r8
 800a1e4:	008a      	lsls	r2, r1, #2
 800a1e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a1ea:	f7f6 fd07 	bl	8000bfc <__aeabi_uldivmod>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4b0d      	ldr	r3, [pc, #52]	; (800a228 <UART_SetConfig+0x4e4>)
 800a1f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a1f8:	095b      	lsrs	r3, r3, #5
 800a1fa:	2164      	movs	r1, #100	; 0x64
 800a1fc:	fb01 f303 	mul.w	r3, r1, r3
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	011b      	lsls	r3, r3, #4
 800a204:	3332      	adds	r3, #50	; 0x32
 800a206:	4a08      	ldr	r2, [pc, #32]	; (800a228 <UART_SetConfig+0x4e4>)
 800a208:	fba2 2303 	umull	r2, r3, r2, r3
 800a20c:	095b      	lsrs	r3, r3, #5
 800a20e:	f003 020f 	and.w	r2, r3, #15
 800a212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4422      	add	r2, r4
 800a21a:	609a      	str	r2, [r3, #8]
}
 800a21c:	bf00      	nop
 800a21e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a222:	46bd      	mov	sp, r7
 800a224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a228:	51eb851f 	.word	0x51eb851f

0800a22c <__NVIC_SetPriority>:
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	6039      	str	r1, [r7, #0]
 800a236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	db0a      	blt.n	800a256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	b2da      	uxtb	r2, r3
 800a244:	490c      	ldr	r1, [pc, #48]	; (800a278 <__NVIC_SetPriority+0x4c>)
 800a246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a24a:	0112      	lsls	r2, r2, #4
 800a24c:	b2d2      	uxtb	r2, r2
 800a24e:	440b      	add	r3, r1
 800a250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a254:	e00a      	b.n	800a26c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	4908      	ldr	r1, [pc, #32]	; (800a27c <__NVIC_SetPriority+0x50>)
 800a25c:	79fb      	ldrb	r3, [r7, #7]
 800a25e:	f003 030f 	and.w	r3, r3, #15
 800a262:	3b04      	subs	r3, #4
 800a264:	0112      	lsls	r2, r2, #4
 800a266:	b2d2      	uxtb	r2, r2
 800a268:	440b      	add	r3, r1
 800a26a:	761a      	strb	r2, [r3, #24]
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	e000e100 	.word	0xe000e100
 800a27c:	e000ed00 	.word	0xe000ed00

0800a280 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <SysTick_Handler+0x1c>)
 800a286:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a288:	f001 fcfe 	bl	800bc88 <xTaskGetSchedulerState>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d001      	beq.n	800a296 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a292:	f002 fae9 	bl	800c868 <xPortSysTickHandler>
  }
}
 800a296:	bf00      	nop
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	e000e010 	.word	0xe000e010

0800a2a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	f06f 0004 	mvn.w	r0, #4
 800a2aa:	f7ff ffbf 	bl	800a22c <__NVIC_SetPriority>
#endif
}
 800a2ae:	bf00      	nop
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ba:	f3ef 8305 	mrs	r3, IPSR
 800a2be:	603b      	str	r3, [r7, #0]
  return(result);
 800a2c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a2c6:	f06f 0305 	mvn.w	r3, #5
 800a2ca:	607b      	str	r3, [r7, #4]
 800a2cc:	e00c      	b.n	800a2e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a2ce:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <osKernelInitialize+0x44>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d105      	bne.n	800a2e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a2d6:	4b08      	ldr	r3, [pc, #32]	; (800a2f8 <osKernelInitialize+0x44>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	607b      	str	r3, [r7, #4]
 800a2e0:	e002      	b.n	800a2e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a2e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2e8:	687b      	ldr	r3, [r7, #4]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	2000050c 	.word	0x2000050c

0800a2fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a302:	f3ef 8305 	mrs	r3, IPSR
 800a306:	603b      	str	r3, [r7, #0]
  return(result);
 800a308:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a30e:	f06f 0305 	mvn.w	r3, #5
 800a312:	607b      	str	r3, [r7, #4]
 800a314:	e010      	b.n	800a338 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a316:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <osKernelStart+0x48>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d109      	bne.n	800a332 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a31e:	f7ff ffbf 	bl	800a2a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a322:	4b08      	ldr	r3, [pc, #32]	; (800a344 <osKernelStart+0x48>)
 800a324:	2202      	movs	r2, #2
 800a326:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a328:	f001 f866 	bl	800b3f8 <vTaskStartScheduler>
      stat = osOK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	607b      	str	r3, [r7, #4]
 800a330:	e002      	b.n	800a338 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a336:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a338:	687b      	ldr	r3, [r7, #4]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	2000050c 	.word	0x2000050c

0800a348 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a348:	b580      	push	{r7, lr}
 800a34a:	b08e      	sub	sp, #56	; 0x38
 800a34c:	af04      	add	r7, sp, #16
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a354:	2300      	movs	r3, #0
 800a356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a358:	f3ef 8305 	mrs	r3, IPSR
 800a35c:	617b      	str	r3, [r7, #20]
  return(result);
 800a35e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a360:	2b00      	cmp	r3, #0
 800a362:	d17e      	bne.n	800a462 <osThreadNew+0x11a>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d07b      	beq.n	800a462 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a36a:	2380      	movs	r3, #128	; 0x80
 800a36c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a36e:	2318      	movs	r3, #24
 800a370:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a37a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d045      	beq.n	800a40e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <osThreadNew+0x48>
        name = attr->name;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d008      	beq.n	800a3b6 <osThreadNew+0x6e>
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	2b38      	cmp	r3, #56	; 0x38
 800a3a8:	d805      	bhi.n	800a3b6 <osThreadNew+0x6e>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <osThreadNew+0x72>
        return (NULL);
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e054      	b.n	800a464 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	089b      	lsrs	r3, r3, #2
 800a3c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00e      	beq.n	800a3f0 <osThreadNew+0xa8>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	2b5b      	cmp	r3, #91	; 0x5b
 800a3d8:	d90a      	bls.n	800a3f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d006      	beq.n	800a3f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <osThreadNew+0xa8>
        mem = 1;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	61bb      	str	r3, [r7, #24]
 800a3ee:	e010      	b.n	800a412 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10c      	bne.n	800a412 <osThreadNew+0xca>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d108      	bne.n	800a412 <osThreadNew+0xca>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d104      	bne.n	800a412 <osThreadNew+0xca>
          mem = 0;
 800a408:	2300      	movs	r3, #0
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	e001      	b.n	800a412 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d110      	bne.n	800a43a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a420:	9202      	str	r2, [sp, #8]
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	6a3a      	ldr	r2, [r7, #32]
 800a42c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 fe0c 	bl	800b04c <xTaskCreateStatic>
 800a434:	4603      	mov	r3, r0
 800a436:	613b      	str	r3, [r7, #16]
 800a438:	e013      	b.n	800a462 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d110      	bne.n	800a462 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	b29a      	uxth	r2, r3
 800a444:	f107 0310 	add.w	r3, r7, #16
 800a448:	9301      	str	r3, [sp, #4]
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 fe57 	bl	800b106 <xTaskCreate>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d001      	beq.n	800a462 <osThreadNew+0x11a>
            hTask = NULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a462:	693b      	ldr	r3, [r7, #16]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3728      	adds	r7, #40	; 0x28
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a474:	f3ef 8305 	mrs	r3, IPSR
 800a478:	60bb      	str	r3, [r7, #8]
  return(result);
 800a47a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d003      	beq.n	800a488 <osDelay+0x1c>
    stat = osErrorISR;
 800a480:	f06f 0305 	mvn.w	r3, #5
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e007      	b.n	800a498 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a488:	2300      	movs	r3, #0
 800a48a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 ff7c 	bl	800b390 <vTaskDelay>
    }
  }

  return (stat);
 800a498:	68fb      	ldr	r3, [r7, #12]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
	...

0800a4a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4a07      	ldr	r2, [pc, #28]	; (800a4d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a4b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	4a06      	ldr	r2, [pc, #24]	; (800a4d4 <vApplicationGetIdleTaskMemory+0x30>)
 800a4ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2280      	movs	r2, #128	; 0x80
 800a4c0:	601a      	str	r2, [r3, #0]
}
 800a4c2:	bf00      	nop
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	20000510 	.word	0x20000510
 800a4d4:	2000056c 	.word	0x2000056c

0800a4d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4a07      	ldr	r2, [pc, #28]	; (800a504 <vApplicationGetTimerTaskMemory+0x2c>)
 800a4e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	4a06      	ldr	r2, [pc, #24]	; (800a508 <vApplicationGetTimerTaskMemory+0x30>)
 800a4ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4f6:	601a      	str	r2, [r3, #0]
}
 800a4f8:	bf00      	nop
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	2000076c 	.word	0x2000076c
 800a508:	200007c8 	.word	0x200007c8

0800a50c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f103 0208 	add.w	r2, r3, #8
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f103 0208 	add.w	r2, r3, #8
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f103 0208 	add.w	r2, r3, #8
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a566:	b480      	push	{r7}
 800a568:	b085      	sub	sp, #20
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	1c5a      	adds	r2, r3, #1
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	601a      	str	r2, [r3, #0]
}
 800a5a2:	bf00      	nop
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b085      	sub	sp, #20
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5c4:	d103      	bne.n	800a5ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	e00c      	b.n	800a5e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	60fb      	str	r3, [r7, #12]
 800a5d4:	e002      	b.n	800a5dc <vListInsert+0x2e>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d2f6      	bcs.n	800a5d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	601a      	str	r2, [r3, #0]
}
 800a614:	bf00      	nop
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6892      	ldr	r2, [r2, #8]
 800a636:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	6852      	ldr	r2, [r2, #4]
 800a640:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d103      	bne.n	800a654 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689a      	ldr	r2, [r3, #8]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	1e5a      	subs	r2, r3, #1
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a69a:	bf00      	nop
 800a69c:	e7fe      	b.n	800a69c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a69e:	f002 f851 	bl	800c744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6aa:	68f9      	ldr	r1, [r7, #12]
 800a6ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6ae:	fb01 f303 	mul.w	r3, r1, r3
 800a6b2:	441a      	add	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	68f9      	ldr	r1, [r7, #12]
 800a6d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a6d4:	fb01 f303 	mul.w	r3, r1, r3
 800a6d8:	441a      	add	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	22ff      	movs	r2, #255	; 0xff
 800a6e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	22ff      	movs	r2, #255	; 0xff
 800a6ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d114      	bne.n	800a71e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d01a      	beq.n	800a732 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3310      	adds	r3, #16
 800a700:	4618      	mov	r0, r3
 800a702:	f001 f903 	bl	800b90c <xTaskRemoveFromEventList>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d012      	beq.n	800a732 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a70c:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <xQueueGenericReset+0xcc>)
 800a70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	e009      	b.n	800a732 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3310      	adds	r3, #16
 800a722:	4618      	mov	r0, r3
 800a724:	f7ff fef2 	bl	800a50c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	3324      	adds	r3, #36	; 0x24
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff feed 	bl	800a50c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a732:	f002 f837 	bl	800c7a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a736:	2301      	movs	r3, #1
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08e      	sub	sp, #56	; 0x38
 800a748:	af02      	add	r7, sp, #8
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10a      	bne.n	800a76e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10a      	bne.n	800a78a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a786:	bf00      	nop
 800a788:	e7fe      	b.n	800a788 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <xQueueGenericCreateStatic+0x52>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <xQueueGenericCreateStatic+0x56>
 800a796:	2301      	movs	r3, #1
 800a798:	e000      	b.n	800a79c <xQueueGenericCreateStatic+0x58>
 800a79a:	2300      	movs	r3, #0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10a      	bne.n	800a7b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	623b      	str	r3, [r7, #32]
}
 800a7b2:	bf00      	nop
 800a7b4:	e7fe      	b.n	800a7b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d102      	bne.n	800a7c2 <xQueueGenericCreateStatic+0x7e>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <xQueueGenericCreateStatic+0x82>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e000      	b.n	800a7c8 <xQueueGenericCreateStatic+0x84>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	61fb      	str	r3, [r7, #28]
}
 800a7de:	bf00      	nop
 800a7e0:	e7fe      	b.n	800a7e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a7e2:	2350      	movs	r3, #80	; 0x50
 800a7e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2b50      	cmp	r3, #80	; 0x50
 800a7ea:	d00a      	beq.n	800a802 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	61bb      	str	r3, [r7, #24]
}
 800a7fe:	bf00      	nop
 800a800:	e7fe      	b.n	800a800 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a802:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00d      	beq.n	800a82a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	2201      	movs	r2, #1
 800a812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a816:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	4613      	mov	r3, r2
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	68b9      	ldr	r1, [r7, #8]
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 f805 	bl	800a834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3730      	adds	r7, #48	; 0x30
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
 800a840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d103      	bne.n	800a850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	e002      	b.n	800a856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a862:	2101      	movs	r1, #1
 800a864:	69b8      	ldr	r0, [r7, #24]
 800a866:	f7ff ff05 	bl	800a674 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	78fa      	ldrb	r2, [r7, #3]
 800a86e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08e      	sub	sp, #56	; 0x38
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a88a:	2300      	movs	r3, #0
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xQueueGenericSend+0x32>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d103      	bne.n	800a8bc <xQueueGenericSend+0x40>
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <xQueueGenericSend+0x44>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <xQueueGenericSend+0x46>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10a      	bne.n	800a8dc <xQueueGenericSend+0x60>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d103      	bne.n	800a8ea <xQueueGenericSend+0x6e>
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <xQueueGenericSend+0x72>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e000      	b.n	800a8f0 <xQueueGenericSend+0x74>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10a      	bne.n	800a90a <xQueueGenericSend+0x8e>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	623b      	str	r3, [r7, #32]
}
 800a906:	bf00      	nop
 800a908:	e7fe      	b.n	800a908 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a90a:	f001 f9bd 	bl	800bc88 <xTaskGetSchedulerState>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <xQueueGenericSend+0x9e>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <xQueueGenericSend+0xa2>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e000      	b.n	800a920 <xQueueGenericSend+0xa4>
 800a91e:	2300      	movs	r3, #0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10a      	bne.n	800a93a <xQueueGenericSend+0xbe>
	__asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	61fb      	str	r3, [r7, #28]
}
 800a936:	bf00      	nop
 800a938:	e7fe      	b.n	800a938 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a93a:	f001 ff03 	bl	800c744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a946:	429a      	cmp	r2, r3
 800a948:	d302      	bcc.n	800a950 <xQueueGenericSend+0xd4>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d129      	bne.n	800a9a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	68b9      	ldr	r1, [r7, #8]
 800a954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a956:	f000 fa0b 	bl	800ad70 <prvCopyDataToQueue>
 800a95a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	2b00      	cmp	r3, #0
 800a962:	d010      	beq.n	800a986 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	3324      	adds	r3, #36	; 0x24
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 ffcf 	bl	800b90c <xTaskRemoveFromEventList>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d013      	beq.n	800a99c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a974:	4b3f      	ldr	r3, [pc, #252]	; (800aa74 <xQueueGenericSend+0x1f8>)
 800a976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	e00a      	b.n	800a99c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d007      	beq.n	800a99c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a98c:	4b39      	ldr	r3, [pc, #228]	; (800aa74 <xQueueGenericSend+0x1f8>)
 800a98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a99c:	f001 ff02 	bl	800c7a4 <vPortExitCritical>
				return pdPASS;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e063      	b.n	800aa6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d103      	bne.n	800a9b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9aa:	f001 fefb 	bl	800c7a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e05c      	b.n	800aa6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d106      	bne.n	800a9c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9b8:	f107 0314 	add.w	r3, r7, #20
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f001 f809 	bl	800b9d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9c6:	f001 feed 	bl	800c7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9ca:	f000 fd7b 	bl	800b4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9ce:	f001 feb9 	bl	800c744 <vPortEnterCritical>
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9d8:	b25b      	sxtb	r3, r3
 800a9da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9de:	d103      	bne.n	800a9e8 <xQueueGenericSend+0x16c>
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ee:	b25b      	sxtb	r3, r3
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9f4:	d103      	bne.n	800a9fe <xQueueGenericSend+0x182>
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9fe:	f001 fed1 	bl	800c7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa02:	1d3a      	adds	r2, r7, #4
 800aa04:	f107 0314 	add.w	r3, r7, #20
 800aa08:	4611      	mov	r1, r2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fff8 	bl	800ba00 <xTaskCheckForTimeOut>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d124      	bne.n	800aa60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa18:	f000 faa2 	bl	800af60 <prvIsQueueFull>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d018      	beq.n	800aa54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	3310      	adds	r3, #16
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	4611      	mov	r1, r2
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 ff1e 	bl	800b86c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa32:	f000 fa2d 	bl	800ae90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa36:	f000 fd53 	bl	800b4e0 <xTaskResumeAll>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f47f af7c 	bne.w	800a93a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa42:	4b0c      	ldr	r3, [pc, #48]	; (800aa74 <xQueueGenericSend+0x1f8>)
 800aa44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	e772      	b.n	800a93a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa56:	f000 fa1b 	bl	800ae90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa5a:	f000 fd41 	bl	800b4e0 <xTaskResumeAll>
 800aa5e:	e76c      	b.n	800a93a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa62:	f000 fa15 	bl	800ae90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa66:	f000 fd3b 	bl	800b4e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3738      	adds	r7, #56	; 0x38
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	e000ed04 	.word	0xe000ed04

0800aa78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b090      	sub	sp, #64	; 0x40
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10a      	bne.n	800aaa6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d103      	bne.n	800aab4 <xQueueGenericSendFromISR+0x3c>
 800aaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <xQueueGenericSendFromISR+0x40>
 800aab4:	2301      	movs	r3, #1
 800aab6:	e000      	b.n	800aaba <xQueueGenericSendFromISR+0x42>
 800aab8:	2300      	movs	r3, #0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10a      	bne.n	800aad4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d103      	bne.n	800aae2 <xQueueGenericSendFromISR+0x6a>
 800aada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <xQueueGenericSendFromISR+0x6e>
 800aae2:	2301      	movs	r3, #1
 800aae4:	e000      	b.n	800aae8 <xQueueGenericSendFromISR+0x70>
 800aae6:	2300      	movs	r3, #0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	623b      	str	r3, [r7, #32]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab02:	f001 ff01 	bl	800c908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab06:	f3ef 8211 	mrs	r2, BASEPRI
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	61fa      	str	r2, [r7, #28]
 800ab1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d302      	bcc.n	800ab34 <xQueueGenericSendFromISR+0xbc>
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d12f      	bne.n	800ab94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab4a:	f000 f911 	bl	800ad70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab56:	d112      	bne.n	800ab7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d016      	beq.n	800ab8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab62:	3324      	adds	r3, #36	; 0x24
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 fed1 	bl	800b90c <xTaskRemoveFromEventList>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00e      	beq.n	800ab8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00b      	beq.n	800ab8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	e007      	b.n	800ab8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab82:	3301      	adds	r3, #1
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	b25a      	sxtb	r2, r3
 800ab88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab92:	e001      	b.n	800ab98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab94:	2300      	movs	r3, #0
 800ab96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aba2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3740      	adds	r7, #64	; 0x40
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
	...

0800abb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08c      	sub	sp, #48	; 0x30
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800abbc:	2300      	movs	r3, #0
 800abbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10a      	bne.n	800abe0 <xQueueReceive+0x30>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	623b      	str	r3, [r7, #32]
}
 800abdc:	bf00      	nop
 800abde:	e7fe      	b.n	800abde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d103      	bne.n	800abee <xQueueReceive+0x3e>
 800abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <xQueueReceive+0x42>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <xQueueReceive+0x44>
 800abf2:	2300      	movs	r3, #0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10a      	bne.n	800ac0e <xQueueReceive+0x5e>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	61fb      	str	r3, [r7, #28]
}
 800ac0a:	bf00      	nop
 800ac0c:	e7fe      	b.n	800ac0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac0e:	f001 f83b 	bl	800bc88 <xTaskGetSchedulerState>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d102      	bne.n	800ac1e <xQueueReceive+0x6e>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <xQueueReceive+0x72>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e000      	b.n	800ac24 <xQueueReceive+0x74>
 800ac22:	2300      	movs	r3, #0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <xQueueReceive+0x8e>
	__asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	61bb      	str	r3, [r7, #24]
}
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac3e:	f001 fd81 	bl	800c744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d01f      	beq.n	800ac8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac4e:	68b9      	ldr	r1, [r7, #8]
 800ac50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac52:	f000 f8f7 	bl	800ae44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac58:	1e5a      	subs	r2, r3, #1
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00f      	beq.n	800ac86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	3310      	adds	r3, #16
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fe4e 	bl	800b90c <xTaskRemoveFromEventList>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d007      	beq.n	800ac86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac76:	4b3d      	ldr	r3, [pc, #244]	; (800ad6c <xQueueReceive+0x1bc>)
 800ac78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac86:	f001 fd8d 	bl	800c7a4 <vPortExitCritical>
				return pdPASS;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e069      	b.n	800ad62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d103      	bne.n	800ac9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac94:	f001 fd86 	bl	800c7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	e062      	b.n	800ad62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d106      	bne.n	800acb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aca2:	f107 0310 	add.w	r3, r7, #16
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fe94 	bl	800b9d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acac:	2301      	movs	r3, #1
 800acae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acb0:	f001 fd78 	bl	800c7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acb4:	f000 fc06 	bl	800b4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acb8:	f001 fd44 	bl	800c744 <vPortEnterCritical>
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acc2:	b25b      	sxtb	r3, r3
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc8:	d103      	bne.n	800acd2 <xQueueReceive+0x122>
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acd8:	b25b      	sxtb	r3, r3
 800acda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acde:	d103      	bne.n	800ace8 <xQueueReceive+0x138>
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ace8:	f001 fd5c 	bl	800c7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acec:	1d3a      	adds	r2, r7, #4
 800acee:	f107 0310 	add.w	r3, r7, #16
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 fe83 	bl	800ba00 <xTaskCheckForTimeOut>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d123      	bne.n	800ad48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad02:	f000 f917 	bl	800af34 <prvIsQueueEmpty>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d017      	beq.n	800ad3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	3324      	adds	r3, #36	; 0x24
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 fda9 	bl	800b86c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad1c:	f000 f8b8 	bl	800ae90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad20:	f000 fbde 	bl	800b4e0 <xTaskResumeAll>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d189      	bne.n	800ac3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad2a:	4b10      	ldr	r3, [pc, #64]	; (800ad6c <xQueueReceive+0x1bc>)
 800ad2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	e780      	b.n	800ac3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad3e:	f000 f8a7 	bl	800ae90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad42:	f000 fbcd 	bl	800b4e0 <xTaskResumeAll>
 800ad46:	e77a      	b.n	800ac3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad4a:	f000 f8a1 	bl	800ae90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad4e:	f000 fbc7 	bl	800b4e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad54:	f000 f8ee 	bl	800af34 <prvIsQueueEmpty>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f43f af6f 	beq.w	800ac3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3730      	adds	r7, #48	; 0x30
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	e000ed04 	.word	0xe000ed04

0800ad70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10d      	bne.n	800adaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d14d      	bne.n	800ae32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 ff92 	bl	800bcc4 <xTaskPriorityDisinherit>
 800ada0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	609a      	str	r2, [r3, #8]
 800ada8:	e043      	b.n	800ae32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d119      	bne.n	800ade4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6858      	ldr	r0, [r3, #4]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb8:	461a      	mov	r2, r3
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	f002 fbf2 	bl	800d5a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc8:	441a      	add	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	429a      	cmp	r2, r3
 800add8:	d32b      	bcc.n	800ae32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	605a      	str	r2, [r3, #4]
 800ade2:	e026      	b.n	800ae32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	68d8      	ldr	r0, [r3, #12]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adec:	461a      	mov	r2, r3
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	f002 fbd8 	bl	800d5a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	68da      	ldr	r2, [r3, #12]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfc:	425b      	negs	r3, r3
 800adfe:	441a      	add	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d207      	bcs.n	800ae20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	689a      	ldr	r2, [r3, #8]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae18:	425b      	negs	r3, r3
 800ae1a:	441a      	add	r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d105      	bne.n	800ae32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae3a:	697b      	ldr	r3, [r7, #20]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d018      	beq.n	800ae88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68da      	ldr	r2, [r3, #12]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	441a      	add	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	68da      	ldr	r2, [r3, #12]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d303      	bcc.n	800ae78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	68d9      	ldr	r1, [r3, #12]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae80:	461a      	mov	r2, r3
 800ae82:	6838      	ldr	r0, [r7, #0]
 800ae84:	f002 fb8e 	bl	800d5a4 <memcpy>
	}
}
 800ae88:	bf00      	nop
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae98:	f001 fc54 	bl	800c744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aea2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aea4:	e011      	b.n	800aeca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d012      	beq.n	800aed4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3324      	adds	r3, #36	; 0x24
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 fd2a 	bl	800b90c <xTaskRemoveFromEventList>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aebe:	f000 fe01 	bl	800bac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	dce9      	bgt.n	800aea6 <prvUnlockQueue+0x16>
 800aed2:	e000      	b.n	800aed6 <prvUnlockQueue+0x46>
					break;
 800aed4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	22ff      	movs	r2, #255	; 0xff
 800aeda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aede:	f001 fc61 	bl	800c7a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aee2:	f001 fc2f 	bl	800c744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeee:	e011      	b.n	800af14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d012      	beq.n	800af1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3310      	adds	r3, #16
 800aefc:	4618      	mov	r0, r3
 800aefe:	f000 fd05 	bl	800b90c <xTaskRemoveFromEventList>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af08:	f000 fddc 	bl	800bac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
 800af0e:	3b01      	subs	r3, #1
 800af10:	b2db      	uxtb	r3, r3
 800af12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dce9      	bgt.n	800aef0 <prvUnlockQueue+0x60>
 800af1c:	e000      	b.n	800af20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	22ff      	movs	r2, #255	; 0xff
 800af24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af28:	f001 fc3c 	bl	800c7a4 <vPortExitCritical>
}
 800af2c:	bf00      	nop
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af3c:	f001 fc02 	bl	800c744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af44:	2b00      	cmp	r3, #0
 800af46:	d102      	bne.n	800af4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af48:	2301      	movs	r3, #1
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	e001      	b.n	800af52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af4e:	2300      	movs	r3, #0
 800af50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af52:	f001 fc27 	bl	800c7a4 <vPortExitCritical>

	return xReturn;
 800af56:	68fb      	ldr	r3, [r7, #12]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af68:	f001 fbec 	bl	800c744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af74:	429a      	cmp	r2, r3
 800af76:	d102      	bne.n	800af7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af78:	2301      	movs	r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	e001      	b.n	800af82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af7e:	2300      	movs	r3, #0
 800af80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af82:	f001 fc0f 	bl	800c7a4 <vPortExitCritical>

	return xReturn;
 800af86:	68fb      	ldr	r3, [r7, #12]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	e014      	b.n	800afca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800afa0:	4a0f      	ldr	r2, [pc, #60]	; (800afe0 <vQueueAddToRegistry+0x50>)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10b      	bne.n	800afc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800afac:	490c      	ldr	r1, [pc, #48]	; (800afe0 <vQueueAddToRegistry+0x50>)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800afb6:	4a0a      	ldr	r2, [pc, #40]	; (800afe0 <vQueueAddToRegistry+0x50>)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	4413      	add	r3, r2
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800afc2:	e006      	b.n	800afd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3301      	adds	r3, #1
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b07      	cmp	r3, #7
 800afce:	d9e7      	bls.n	800afa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800afd0:	bf00      	nop
 800afd2:	bf00      	nop
 800afd4:	3714      	adds	r7, #20
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	20000bc8 	.word	0x20000bc8

0800afe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aff4:	f001 fba6 	bl	800c744 <vPortEnterCritical>
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800affe:	b25b      	sxtb	r3, r3
 800b000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b004:	d103      	bne.n	800b00e <vQueueWaitForMessageRestricted+0x2a>
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b014:	b25b      	sxtb	r3, r3
 800b016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b01a:	d103      	bne.n	800b024 <vQueueWaitForMessageRestricted+0x40>
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b024:	f001 fbbe 	bl	800c7a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d106      	bne.n	800b03e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	3324      	adds	r3, #36	; 0x24
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	68b9      	ldr	r1, [r7, #8]
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 fc3b 	bl	800b8b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b03e:	6978      	ldr	r0, [r7, #20]
 800b040:	f7ff ff26 	bl	800ae90 <prvUnlockQueue>
	}
 800b044:	bf00      	nop
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b08e      	sub	sp, #56	; 0x38
 800b050:	af04      	add	r7, sp, #16
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10a      	bne.n	800b076 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	623b      	str	r3, [r7, #32]
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <xTaskCreateStatic+0x46>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	61fb      	str	r3, [r7, #28]
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b092:	235c      	movs	r3, #92	; 0x5c
 800b094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2b5c      	cmp	r3, #92	; 0x5c
 800b09a:	d00a      	beq.n	800b0b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	61bb      	str	r3, [r7, #24]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d01e      	beq.n	800b0f8 <xTaskCreateStatic+0xac>
 800b0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01b      	beq.n	800b0f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	9303      	str	r3, [sp, #12]
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	9302      	str	r3, [sp, #8]
 800b0da:	f107 0314 	add.w	r3, r7, #20
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	68b9      	ldr	r1, [r7, #8]
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 f850 	bl	800b190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0f2:	f000 f8dd 	bl	800b2b0 <prvAddNewTaskToReadyList>
 800b0f6:	e001      	b.n	800b0fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0fc:	697b      	ldr	r3, [r7, #20]
	}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3728      	adds	r7, #40	; 0x28
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b106:	b580      	push	{r7, lr}
 800b108:	b08c      	sub	sp, #48	; 0x30
 800b10a:	af04      	add	r7, sp, #16
 800b10c:	60f8      	str	r0, [r7, #12]
 800b10e:	60b9      	str	r1, [r7, #8]
 800b110:	603b      	str	r3, [r7, #0]
 800b112:	4613      	mov	r3, r2
 800b114:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b116:	88fb      	ldrh	r3, [r7, #6]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 fc34 	bl	800c988 <pvPortMalloc>
 800b120:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00e      	beq.n	800b146 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b128:	205c      	movs	r0, #92	; 0x5c
 800b12a:	f001 fc2d 	bl	800c988 <pvPortMalloc>
 800b12e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	631a      	str	r2, [r3, #48]	; 0x30
 800b13c:	e005      	b.n	800b14a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b13e:	6978      	ldr	r0, [r7, #20]
 800b140:	f001 fcee 	bl	800cb20 <vPortFree>
 800b144:	e001      	b.n	800b14a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d017      	beq.n	800b180 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b158:	88fa      	ldrh	r2, [r7, #6]
 800b15a:	2300      	movs	r3, #0
 800b15c:	9303      	str	r3, [sp, #12]
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	9302      	str	r3, [sp, #8]
 800b162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	68b9      	ldr	r1, [r7, #8]
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f000 f80e 	bl	800b190 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b174:	69f8      	ldr	r0, [r7, #28]
 800b176:	f000 f89b 	bl	800b2b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b17a:	2301      	movs	r3, #1
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	e002      	b.n	800b186 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b184:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b186:	69bb      	ldr	r3, [r7, #24]
	}
 800b188:	4618      	mov	r0, r3
 800b18a:	3720      	adds	r7, #32
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b088      	sub	sp, #32
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	21a5      	movs	r1, #165	; 0xa5
 800b1aa:	f002 f9c7 	bl	800d53c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	f023 0307 	bic.w	r3, r3, #7
 800b1c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	f003 0307 	and.w	r3, r3, #7
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00a      	beq.n	800b1e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	617b      	str	r3, [r7, #20]
}
 800b1e4:	bf00      	nop
 800b1e6:	e7fe      	b.n	800b1e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d01f      	beq.n	800b22e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61fb      	str	r3, [r7, #28]
 800b1f2:	e012      	b.n	800b21a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	7819      	ldrb	r1, [r3, #0]
 800b1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	4413      	add	r3, r2
 800b202:	3334      	adds	r3, #52	; 0x34
 800b204:	460a      	mov	r2, r1
 800b206:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	4413      	add	r3, r2
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d006      	beq.n	800b222 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	3301      	adds	r3, #1
 800b218:	61fb      	str	r3, [r7, #28]
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	2b0f      	cmp	r3, #15
 800b21e:	d9e9      	bls.n	800b1f4 <prvInitialiseNewTask+0x64>
 800b220:	e000      	b.n	800b224 <prvInitialiseNewTask+0x94>
			{
				break;
 800b222:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b22c:	e003      	b.n	800b236 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	2200      	movs	r2, #0
 800b232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	2b37      	cmp	r3, #55	; 0x37
 800b23a:	d901      	bls.n	800b240 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b23c:	2337      	movs	r3, #55	; 0x37
 800b23e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b244:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b24a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	2200      	movs	r2, #0
 800b250:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	3304      	adds	r3, #4
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff f978 	bl	800a54c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25e:	3318      	adds	r3, #24
 800b260:	4618      	mov	r0, r3
 800b262:	f7ff f973 	bl	800a54c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b26a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b27a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	2200      	movs	r2, #0
 800b280:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b28a:	683a      	ldr	r2, [r7, #0]
 800b28c:	68f9      	ldr	r1, [r7, #12]
 800b28e:	69b8      	ldr	r0, [r7, #24]
 800b290:	f001 f928 	bl	800c4e4 <pxPortInitialiseStack>
 800b294:	4602      	mov	r2, r0
 800b296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b298:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2a6:	bf00      	nop
 800b2a8:	3720      	adds	r7, #32
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2b8:	f001 fa44 	bl	800c744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2bc:	4b2d      	ldr	r3, [pc, #180]	; (800b374 <prvAddNewTaskToReadyList+0xc4>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	4a2c      	ldr	r2, [pc, #176]	; (800b374 <prvAddNewTaskToReadyList+0xc4>)
 800b2c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2c6:	4b2c      	ldr	r3, [pc, #176]	; (800b378 <prvAddNewTaskToReadyList+0xc8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d109      	bne.n	800b2e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2ce:	4a2a      	ldr	r2, [pc, #168]	; (800b378 <prvAddNewTaskToReadyList+0xc8>)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2d4:	4b27      	ldr	r3, [pc, #156]	; (800b374 <prvAddNewTaskToReadyList+0xc4>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d110      	bne.n	800b2fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2dc:	f000 fc16 	bl	800bb0c <prvInitialiseTaskLists>
 800b2e0:	e00d      	b.n	800b2fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2e2:	4b26      	ldr	r3, [pc, #152]	; (800b37c <prvAddNewTaskToReadyList+0xcc>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d109      	bne.n	800b2fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2ea:	4b23      	ldr	r3, [pc, #140]	; (800b378 <prvAddNewTaskToReadyList+0xc8>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d802      	bhi.n	800b2fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2f8:	4a1f      	ldr	r2, [pc, #124]	; (800b378 <prvAddNewTaskToReadyList+0xc8>)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2fe:	4b20      	ldr	r3, [pc, #128]	; (800b380 <prvAddNewTaskToReadyList+0xd0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	4a1e      	ldr	r2, [pc, #120]	; (800b380 <prvAddNewTaskToReadyList+0xd0>)
 800b306:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b308:	4b1d      	ldr	r3, [pc, #116]	; (800b380 <prvAddNewTaskToReadyList+0xd0>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b314:	4b1b      	ldr	r3, [pc, #108]	; (800b384 <prvAddNewTaskToReadyList+0xd4>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d903      	bls.n	800b324 <prvAddNewTaskToReadyList+0x74>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	4a18      	ldr	r2, [pc, #96]	; (800b384 <prvAddNewTaskToReadyList+0xd4>)
 800b322:	6013      	str	r3, [r2, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4a15      	ldr	r2, [pc, #84]	; (800b388 <prvAddNewTaskToReadyList+0xd8>)
 800b332:	441a      	add	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3304      	adds	r3, #4
 800b338:	4619      	mov	r1, r3
 800b33a:	4610      	mov	r0, r2
 800b33c:	f7ff f913 	bl	800a566 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b340:	f001 fa30 	bl	800c7a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b344:	4b0d      	ldr	r3, [pc, #52]	; (800b37c <prvAddNewTaskToReadyList+0xcc>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00e      	beq.n	800b36a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b34c:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <prvAddNewTaskToReadyList+0xc8>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b356:	429a      	cmp	r2, r3
 800b358:	d207      	bcs.n	800b36a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b35a:	4b0c      	ldr	r3, [pc, #48]	; (800b38c <prvAddNewTaskToReadyList+0xdc>)
 800b35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b360:	601a      	str	r2, [r3, #0]
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b36a:	bf00      	nop
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	200010dc 	.word	0x200010dc
 800b378:	20000c08 	.word	0x20000c08
 800b37c:	200010e8 	.word	0x200010e8
 800b380:	200010f8 	.word	0x200010f8
 800b384:	200010e4 	.word	0x200010e4
 800b388:	20000c0c 	.word	0x20000c0c
 800b38c:	e000ed04 	.word	0xe000ed04

0800b390 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b398:	2300      	movs	r3, #0
 800b39a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d017      	beq.n	800b3d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3a2:	4b13      	ldr	r3, [pc, #76]	; (800b3f0 <vTaskDelay+0x60>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00a      	beq.n	800b3c0 <vTaskDelay+0x30>
	__asm volatile
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	f383 8811 	msr	BASEPRI, r3
 800b3b2:	f3bf 8f6f 	isb	sy
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	60bb      	str	r3, [r7, #8]
}
 800b3bc:	bf00      	nop
 800b3be:	e7fe      	b.n	800b3be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3c0:	f000 f880 	bl	800b4c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fcea 	bl	800bda0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3cc:	f000 f888 	bl	800b4e0 <xTaskResumeAll>
 800b3d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d107      	bne.n	800b3e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3d8:	4b06      	ldr	r3, [pc, #24]	; (800b3f4 <vTaskDelay+0x64>)
 800b3da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3e8:	bf00      	nop
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20001104 	.word	0x20001104
 800b3f4:	e000ed04 	.word	0xe000ed04

0800b3f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b08a      	sub	sp, #40	; 0x28
 800b3fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b402:	2300      	movs	r3, #0
 800b404:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b406:	463a      	mov	r2, r7
 800b408:	1d39      	adds	r1, r7, #4
 800b40a:	f107 0308 	add.w	r3, r7, #8
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff f848 	bl	800a4a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	9202      	str	r2, [sp, #8]
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	2300      	movs	r3, #0
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	2300      	movs	r3, #0
 800b424:	460a      	mov	r2, r1
 800b426:	4921      	ldr	r1, [pc, #132]	; (800b4ac <vTaskStartScheduler+0xb4>)
 800b428:	4821      	ldr	r0, [pc, #132]	; (800b4b0 <vTaskStartScheduler+0xb8>)
 800b42a:	f7ff fe0f 	bl	800b04c <xTaskCreateStatic>
 800b42e:	4603      	mov	r3, r0
 800b430:	4a20      	ldr	r2, [pc, #128]	; (800b4b4 <vTaskStartScheduler+0xbc>)
 800b432:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b434:	4b1f      	ldr	r3, [pc, #124]	; (800b4b4 <vTaskStartScheduler+0xbc>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	e001      	b.n	800b446 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b442:	2300      	movs	r3, #0
 800b444:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d102      	bne.n	800b452 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b44c:	f000 fcfc 	bl	800be48 <xTimerCreateTimerTask>
 800b450:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d116      	bne.n	800b486 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	613b      	str	r3, [r7, #16]
}
 800b46a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b46c:	4b12      	ldr	r3, [pc, #72]	; (800b4b8 <vTaskStartScheduler+0xc0>)
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b472:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b474:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <vTaskStartScheduler+0xc4>)
 800b476:	2201      	movs	r2, #1
 800b478:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b47a:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <vTaskStartScheduler+0xc8>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b480:	f001 f8be 	bl	800c600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b484:	e00e      	b.n	800b4a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b48c:	d10a      	bne.n	800b4a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	60fb      	str	r3, [r7, #12]
}
 800b4a0:	bf00      	nop
 800b4a2:	e7fe      	b.n	800b4a2 <vTaskStartScheduler+0xaa>
}
 800b4a4:	bf00      	nop
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	0800deec 	.word	0x0800deec
 800b4b0:	0800badd 	.word	0x0800badd
 800b4b4:	20001100 	.word	0x20001100
 800b4b8:	200010fc 	.word	0x200010fc
 800b4bc:	200010e8 	.word	0x200010e8
 800b4c0:	200010e0 	.word	0x200010e0

0800b4c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4c8:	4b04      	ldr	r3, [pc, #16]	; (800b4dc <vTaskSuspendAll+0x18>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	4a03      	ldr	r2, [pc, #12]	; (800b4dc <vTaskSuspendAll+0x18>)
 800b4d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4d2:	bf00      	nop
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	20001104 	.word	0x20001104

0800b4e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4ee:	4b42      	ldr	r3, [pc, #264]	; (800b5f8 <xTaskResumeAll+0x118>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10a      	bne.n	800b50c <xTaskResumeAll+0x2c>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	603b      	str	r3, [r7, #0]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b50c:	f001 f91a 	bl	800c744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b510:	4b39      	ldr	r3, [pc, #228]	; (800b5f8 <xTaskResumeAll+0x118>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3b01      	subs	r3, #1
 800b516:	4a38      	ldr	r2, [pc, #224]	; (800b5f8 <xTaskResumeAll+0x118>)
 800b518:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b51a:	4b37      	ldr	r3, [pc, #220]	; (800b5f8 <xTaskResumeAll+0x118>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d162      	bne.n	800b5e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b522:	4b36      	ldr	r3, [pc, #216]	; (800b5fc <xTaskResumeAll+0x11c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d05e      	beq.n	800b5e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b52a:	e02f      	b.n	800b58c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52c:	4b34      	ldr	r3, [pc, #208]	; (800b600 <xTaskResumeAll+0x120>)
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3318      	adds	r3, #24
 800b538:	4618      	mov	r0, r3
 800b53a:	f7ff f871 	bl	800a620 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	3304      	adds	r3, #4
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff f86c 	bl	800a620 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54c:	4b2d      	ldr	r3, [pc, #180]	; (800b604 <xTaskResumeAll+0x124>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	429a      	cmp	r2, r3
 800b552:	d903      	bls.n	800b55c <xTaskResumeAll+0x7c>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b558:	4a2a      	ldr	r2, [pc, #168]	; (800b604 <xTaskResumeAll+0x124>)
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b560:	4613      	mov	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	4a27      	ldr	r2, [pc, #156]	; (800b608 <xTaskResumeAll+0x128>)
 800b56a:	441a      	add	r2, r3
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3304      	adds	r3, #4
 800b570:	4619      	mov	r1, r3
 800b572:	4610      	mov	r0, r2
 800b574:	f7fe fff7 	bl	800a566 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b57c:	4b23      	ldr	r3, [pc, #140]	; (800b60c <xTaskResumeAll+0x12c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b582:	429a      	cmp	r2, r3
 800b584:	d302      	bcc.n	800b58c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b586:	4b22      	ldr	r3, [pc, #136]	; (800b610 <xTaskResumeAll+0x130>)
 800b588:	2201      	movs	r2, #1
 800b58a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b58c:	4b1c      	ldr	r3, [pc, #112]	; (800b600 <xTaskResumeAll+0x120>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1cb      	bne.n	800b52c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b59a:	f000 fb55 	bl	800bc48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b59e:	4b1d      	ldr	r3, [pc, #116]	; (800b614 <xTaskResumeAll+0x134>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d010      	beq.n	800b5cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5aa:	f000 f847 	bl	800b63c <xTaskIncrementTick>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b5b4:	4b16      	ldr	r3, [pc, #88]	; (800b610 <xTaskResumeAll+0x130>)
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1f1      	bne.n	800b5aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b5c6:	4b13      	ldr	r3, [pc, #76]	; (800b614 <xTaskResumeAll+0x134>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5cc:	4b10      	ldr	r3, [pc, #64]	; (800b610 <xTaskResumeAll+0x130>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d009      	beq.n	800b5e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5d8:	4b0f      	ldr	r3, [pc, #60]	; (800b618 <xTaskResumeAll+0x138>)
 800b5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5de:	601a      	str	r2, [r3, #0]
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5e8:	f001 f8dc 	bl	800c7a4 <vPortExitCritical>

	return xAlreadyYielded;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20001104 	.word	0x20001104
 800b5fc:	200010dc 	.word	0x200010dc
 800b600:	2000109c 	.word	0x2000109c
 800b604:	200010e4 	.word	0x200010e4
 800b608:	20000c0c 	.word	0x20000c0c
 800b60c:	20000c08 	.word	0x20000c08
 800b610:	200010f0 	.word	0x200010f0
 800b614:	200010ec 	.word	0x200010ec
 800b618:	e000ed04 	.word	0xe000ed04

0800b61c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b622:	4b05      	ldr	r3, [pc, #20]	; (800b638 <xTaskGetTickCount+0x1c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b628:	687b      	ldr	r3, [r7, #4]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	370c      	adds	r7, #12
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	200010e0 	.word	0x200010e0

0800b63c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b642:	2300      	movs	r3, #0
 800b644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b646:	4b4f      	ldr	r3, [pc, #316]	; (800b784 <xTaskIncrementTick+0x148>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f040 808f 	bne.w	800b76e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b650:	4b4d      	ldr	r3, [pc, #308]	; (800b788 <xTaskIncrementTick+0x14c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3301      	adds	r3, #1
 800b656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b658:	4a4b      	ldr	r2, [pc, #300]	; (800b788 <xTaskIncrementTick+0x14c>)
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d120      	bne.n	800b6a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b664:	4b49      	ldr	r3, [pc, #292]	; (800b78c <xTaskIncrementTick+0x150>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00a      	beq.n	800b684 <xTaskIncrementTick+0x48>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	603b      	str	r3, [r7, #0]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <xTaskIncrementTick+0x46>
 800b684:	4b41      	ldr	r3, [pc, #260]	; (800b78c <xTaskIncrementTick+0x150>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	4b41      	ldr	r3, [pc, #260]	; (800b790 <xTaskIncrementTick+0x154>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a3f      	ldr	r2, [pc, #252]	; (800b78c <xTaskIncrementTick+0x150>)
 800b690:	6013      	str	r3, [r2, #0]
 800b692:	4a3f      	ldr	r2, [pc, #252]	; (800b790 <xTaskIncrementTick+0x154>)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6013      	str	r3, [r2, #0]
 800b698:	4b3e      	ldr	r3, [pc, #248]	; (800b794 <xTaskIncrementTick+0x158>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3301      	adds	r3, #1
 800b69e:	4a3d      	ldr	r2, [pc, #244]	; (800b794 <xTaskIncrementTick+0x158>)
 800b6a0:	6013      	str	r3, [r2, #0]
 800b6a2:	f000 fad1 	bl	800bc48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6a6:	4b3c      	ldr	r3, [pc, #240]	; (800b798 <xTaskIncrementTick+0x15c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d349      	bcc.n	800b744 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6b0:	4b36      	ldr	r3, [pc, #216]	; (800b78c <xTaskIncrementTick+0x150>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d104      	bne.n	800b6c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ba:	4b37      	ldr	r3, [pc, #220]	; (800b798 <xTaskIncrementTick+0x15c>)
 800b6bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6c0:	601a      	str	r2, [r3, #0]
					break;
 800b6c2:	e03f      	b.n	800b744 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6c4:	4b31      	ldr	r3, [pc, #196]	; (800b78c <xTaskIncrementTick+0x150>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d203      	bcs.n	800b6e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6dc:	4a2e      	ldr	r2, [pc, #184]	; (800b798 <xTaskIncrementTick+0x15c>)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6e2:	e02f      	b.n	800b744 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7fe ff99 	bl	800a620 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d004      	beq.n	800b700 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	3318      	adds	r3, #24
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fe ff90 	bl	800a620 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b704:	4b25      	ldr	r3, [pc, #148]	; (800b79c <xTaskIncrementTick+0x160>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d903      	bls.n	800b714 <xTaskIncrementTick+0xd8>
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b710:	4a22      	ldr	r2, [pc, #136]	; (800b79c <xTaskIncrementTick+0x160>)
 800b712:	6013      	str	r3, [r2, #0]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b718:	4613      	mov	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4413      	add	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4a1f      	ldr	r2, [pc, #124]	; (800b7a0 <xTaskIncrementTick+0x164>)
 800b722:	441a      	add	r2, r3
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	3304      	adds	r3, #4
 800b728:	4619      	mov	r1, r3
 800b72a:	4610      	mov	r0, r2
 800b72c:	f7fe ff1b 	bl	800a566 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b734:	4b1b      	ldr	r3, [pc, #108]	; (800b7a4 <xTaskIncrementTick+0x168>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d3b8      	bcc.n	800b6b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b73e:	2301      	movs	r3, #1
 800b740:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b742:	e7b5      	b.n	800b6b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b744:	4b17      	ldr	r3, [pc, #92]	; (800b7a4 <xTaskIncrementTick+0x168>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74a:	4915      	ldr	r1, [pc, #84]	; (800b7a0 <xTaskIncrementTick+0x164>)
 800b74c:	4613      	mov	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	440b      	add	r3, r1
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d901      	bls.n	800b760 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b75c:	2301      	movs	r3, #1
 800b75e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b760:	4b11      	ldr	r3, [pc, #68]	; (800b7a8 <xTaskIncrementTick+0x16c>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d007      	beq.n	800b778 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	e004      	b.n	800b778 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b76e:	4b0f      	ldr	r3, [pc, #60]	; (800b7ac <xTaskIncrementTick+0x170>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	3301      	adds	r3, #1
 800b774:	4a0d      	ldr	r2, [pc, #52]	; (800b7ac <xTaskIncrementTick+0x170>)
 800b776:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b778:	697b      	ldr	r3, [r7, #20]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3718      	adds	r7, #24
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20001104 	.word	0x20001104
 800b788:	200010e0 	.word	0x200010e0
 800b78c:	20001094 	.word	0x20001094
 800b790:	20001098 	.word	0x20001098
 800b794:	200010f4 	.word	0x200010f4
 800b798:	200010fc 	.word	0x200010fc
 800b79c:	200010e4 	.word	0x200010e4
 800b7a0:	20000c0c 	.word	0x20000c0c
 800b7a4:	20000c08 	.word	0x20000c08
 800b7a8:	200010f0 	.word	0x200010f0
 800b7ac:	200010ec 	.word	0x200010ec

0800b7b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7b6:	4b28      	ldr	r3, [pc, #160]	; (800b858 <vTaskSwitchContext+0xa8>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7be:	4b27      	ldr	r3, [pc, #156]	; (800b85c <vTaskSwitchContext+0xac>)
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7c4:	e041      	b.n	800b84a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b7c6:	4b25      	ldr	r3, [pc, #148]	; (800b85c <vTaskSwitchContext+0xac>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7cc:	4b24      	ldr	r3, [pc, #144]	; (800b860 <vTaskSwitchContext+0xb0>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	e010      	b.n	800b7f6 <vTaskSwitchContext+0x46>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <vTaskSwitchContext+0x40>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	607b      	str	r3, [r7, #4]
}
 800b7ec:	bf00      	nop
 800b7ee:	e7fe      	b.n	800b7ee <vTaskSwitchContext+0x3e>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	60fb      	str	r3, [r7, #12]
 800b7f6:	491b      	ldr	r1, [pc, #108]	; (800b864 <vTaskSwitchContext+0xb4>)
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	4413      	add	r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	440b      	add	r3, r1
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d0e4      	beq.n	800b7d4 <vTaskSwitchContext+0x24>
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	4613      	mov	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4413      	add	r3, r2
 800b812:	009b      	lsls	r3, r3, #2
 800b814:	4a13      	ldr	r2, [pc, #76]	; (800b864 <vTaskSwitchContext+0xb4>)
 800b816:	4413      	add	r3, r2
 800b818:	60bb      	str	r3, [r7, #8]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	685a      	ldr	r2, [r3, #4]
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	605a      	str	r2, [r3, #4]
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	685a      	ldr	r2, [r3, #4]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	3308      	adds	r3, #8
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d104      	bne.n	800b83a <vTaskSwitchContext+0x8a>
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	685a      	ldr	r2, [r3, #4]
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	605a      	str	r2, [r3, #4]
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	4a09      	ldr	r2, [pc, #36]	; (800b868 <vTaskSwitchContext+0xb8>)
 800b842:	6013      	str	r3, [r2, #0]
 800b844:	4a06      	ldr	r2, [pc, #24]	; (800b860 <vTaskSwitchContext+0xb0>)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6013      	str	r3, [r2, #0]
}
 800b84a:	bf00      	nop
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	20001104 	.word	0x20001104
 800b85c:	200010f0 	.word	0x200010f0
 800b860:	200010e4 	.word	0x200010e4
 800b864:	20000c0c 	.word	0x20000c0c
 800b868:	20000c08 	.word	0x20000c08

0800b86c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	60fb      	str	r3, [r7, #12]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b892:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <vTaskPlaceOnEventList+0x44>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3318      	adds	r3, #24
 800b898:	4619      	mov	r1, r3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7fe fe87 	bl	800a5ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8a0:	2101      	movs	r1, #1
 800b8a2:	6838      	ldr	r0, [r7, #0]
 800b8a4:	f000 fa7c 	bl	800bda0 <prvAddCurrentTaskToDelayedList>
}
 800b8a8:	bf00      	nop
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000c08 	.word	0x20000c08

0800b8b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10a      	bne.n	800b8dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	617b      	str	r3, [r7, #20]
}
 800b8d8:	bf00      	nop
 800b8da:	e7fe      	b.n	800b8da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	; (800b908 <vTaskPlaceOnEventListRestricted+0x54>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3318      	adds	r3, #24
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f7fe fe3e 	bl	800a566 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b8f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b8f6:	6879      	ldr	r1, [r7, #4]
 800b8f8:	68b8      	ldr	r0, [r7, #8]
 800b8fa:	f000 fa51 	bl	800bda0 <prvAddCurrentTaskToDelayedList>
	}
 800b8fe:	bf00      	nop
 800b900:	3718      	adds	r7, #24
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	20000c08 	.word	0x20000c08

0800b90c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10a      	bne.n	800b938 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	60fb      	str	r3, [r7, #12]
}
 800b934:	bf00      	nop
 800b936:	e7fe      	b.n	800b936 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	3318      	adds	r3, #24
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fe fe6f 	bl	800a620 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b942:	4b1e      	ldr	r3, [pc, #120]	; (800b9bc <xTaskRemoveFromEventList+0xb0>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d11d      	bne.n	800b986 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fe fe66 	bl	800a620 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	4b19      	ldr	r3, [pc, #100]	; (800b9c0 <xTaskRemoveFromEventList+0xb4>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d903      	bls.n	800b968 <xTaskRemoveFromEventList+0x5c>
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b964:	4a16      	ldr	r2, [pc, #88]	; (800b9c0 <xTaskRemoveFromEventList+0xb4>)
 800b966:	6013      	str	r3, [r2, #0]
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4a13      	ldr	r2, [pc, #76]	; (800b9c4 <xTaskRemoveFromEventList+0xb8>)
 800b976:	441a      	add	r2, r3
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	3304      	adds	r3, #4
 800b97c:	4619      	mov	r1, r3
 800b97e:	4610      	mov	r0, r2
 800b980:	f7fe fdf1 	bl	800a566 <vListInsertEnd>
 800b984:	e005      	b.n	800b992 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	3318      	adds	r3, #24
 800b98a:	4619      	mov	r1, r3
 800b98c:	480e      	ldr	r0, [pc, #56]	; (800b9c8 <xTaskRemoveFromEventList+0xbc>)
 800b98e:	f7fe fdea 	bl	800a566 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b996:	4b0d      	ldr	r3, [pc, #52]	; (800b9cc <xTaskRemoveFromEventList+0xc0>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d905      	bls.n	800b9ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	; (800b9d0 <xTaskRemoveFromEventList+0xc4>)
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	e001      	b.n	800b9b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b9b0:	697b      	ldr	r3, [r7, #20]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3718      	adds	r7, #24
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20001104 	.word	0x20001104
 800b9c0:	200010e4 	.word	0x200010e4
 800b9c4:	20000c0c 	.word	0x20000c0c
 800b9c8:	2000109c 	.word	0x2000109c
 800b9cc:	20000c08 	.word	0x20000c08
 800b9d0:	200010f0 	.word	0x200010f0

0800b9d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9dc:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <vTaskInternalSetTimeOutState+0x24>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9e4:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <vTaskInternalSetTimeOutState+0x28>)
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	605a      	str	r2, [r3, #4]
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	200010f4 	.word	0x200010f4
 800b9fc:	200010e0 	.word	0x200010e0

0800ba00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b088      	sub	sp, #32
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	613b      	str	r3, [r7, #16]
}
 800ba22:	bf00      	nop
 800ba24:	e7fe      	b.n	800ba24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10a      	bne.n	800ba42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	60fb      	str	r3, [r7, #12]
}
 800ba3e:	bf00      	nop
 800ba40:	e7fe      	b.n	800ba40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba42:	f000 fe7f 	bl	800c744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba46:	4b1d      	ldr	r3, [pc, #116]	; (800babc <xTaskCheckForTimeOut+0xbc>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	69ba      	ldr	r2, [r7, #24]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba5e:	d102      	bne.n	800ba66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba60:	2300      	movs	r3, #0
 800ba62:	61fb      	str	r3, [r7, #28]
 800ba64:	e023      	b.n	800baae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	4b15      	ldr	r3, [pc, #84]	; (800bac0 <xTaskCheckForTimeOut+0xc0>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d007      	beq.n	800ba82 <xTaskCheckForTimeOut+0x82>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	69ba      	ldr	r2, [r7, #24]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d302      	bcc.n	800ba82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	61fb      	str	r3, [r7, #28]
 800ba80:	e015      	b.n	800baae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d20b      	bcs.n	800baa4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	1ad2      	subs	r2, r2, r3
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7ff ff9b 	bl	800b9d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	e004      	b.n	800baae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	2200      	movs	r2, #0
 800baa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800baaa:	2301      	movs	r3, #1
 800baac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800baae:	f000 fe79 	bl	800c7a4 <vPortExitCritical>

	return xReturn;
 800bab2:	69fb      	ldr	r3, [r7, #28]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3720      	adds	r7, #32
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	200010e0 	.word	0x200010e0
 800bac0:	200010f4 	.word	0x200010f4

0800bac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bac8:	4b03      	ldr	r3, [pc, #12]	; (800bad8 <vTaskMissedYield+0x14>)
 800baca:	2201      	movs	r2, #1
 800bacc:	601a      	str	r2, [r3, #0]
}
 800bace:	bf00      	nop
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	200010f0 	.word	0x200010f0

0800badc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bae4:	f000 f852 	bl	800bb8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bae8:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <prvIdleTask+0x28>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d9f9      	bls.n	800bae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800baf0:	4b05      	ldr	r3, [pc, #20]	; (800bb08 <prvIdleTask+0x2c>)
 800baf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb00:	e7f0      	b.n	800bae4 <prvIdleTask+0x8>
 800bb02:	bf00      	nop
 800bb04:	20000c0c 	.word	0x20000c0c
 800bb08:	e000ed04 	.word	0xe000ed04

0800bb0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb12:	2300      	movs	r3, #0
 800bb14:	607b      	str	r3, [r7, #4]
 800bb16:	e00c      	b.n	800bb32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4a12      	ldr	r2, [pc, #72]	; (800bb6c <prvInitialiseTaskLists+0x60>)
 800bb24:	4413      	add	r3, r2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fe fcf0 	bl	800a50c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	607b      	str	r3, [r7, #4]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b37      	cmp	r3, #55	; 0x37
 800bb36:	d9ef      	bls.n	800bb18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb38:	480d      	ldr	r0, [pc, #52]	; (800bb70 <prvInitialiseTaskLists+0x64>)
 800bb3a:	f7fe fce7 	bl	800a50c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb3e:	480d      	ldr	r0, [pc, #52]	; (800bb74 <prvInitialiseTaskLists+0x68>)
 800bb40:	f7fe fce4 	bl	800a50c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb44:	480c      	ldr	r0, [pc, #48]	; (800bb78 <prvInitialiseTaskLists+0x6c>)
 800bb46:	f7fe fce1 	bl	800a50c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb4a:	480c      	ldr	r0, [pc, #48]	; (800bb7c <prvInitialiseTaskLists+0x70>)
 800bb4c:	f7fe fcde 	bl	800a50c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb50:	480b      	ldr	r0, [pc, #44]	; (800bb80 <prvInitialiseTaskLists+0x74>)
 800bb52:	f7fe fcdb 	bl	800a50c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb56:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <prvInitialiseTaskLists+0x78>)
 800bb58:	4a05      	ldr	r2, [pc, #20]	; (800bb70 <prvInitialiseTaskLists+0x64>)
 800bb5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb5c:	4b0a      	ldr	r3, [pc, #40]	; (800bb88 <prvInitialiseTaskLists+0x7c>)
 800bb5e:	4a05      	ldr	r2, [pc, #20]	; (800bb74 <prvInitialiseTaskLists+0x68>)
 800bb60:	601a      	str	r2, [r3, #0]
}
 800bb62:	bf00      	nop
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000c0c 	.word	0x20000c0c
 800bb70:	2000106c 	.word	0x2000106c
 800bb74:	20001080 	.word	0x20001080
 800bb78:	2000109c 	.word	0x2000109c
 800bb7c:	200010b0 	.word	0x200010b0
 800bb80:	200010c8 	.word	0x200010c8
 800bb84:	20001094 	.word	0x20001094
 800bb88:	20001098 	.word	0x20001098

0800bb8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb92:	e019      	b.n	800bbc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb94:	f000 fdd6 	bl	800c744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb98:	4b10      	ldr	r3, [pc, #64]	; (800bbdc <prvCheckTasksWaitingTermination+0x50>)
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	3304      	adds	r3, #4
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe fd3b 	bl	800a620 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbaa:	4b0d      	ldr	r3, [pc, #52]	; (800bbe0 <prvCheckTasksWaitingTermination+0x54>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	4a0b      	ldr	r2, [pc, #44]	; (800bbe0 <prvCheckTasksWaitingTermination+0x54>)
 800bbb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbb4:	4b0b      	ldr	r3, [pc, #44]	; (800bbe4 <prvCheckTasksWaitingTermination+0x58>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	4a0a      	ldr	r2, [pc, #40]	; (800bbe4 <prvCheckTasksWaitingTermination+0x58>)
 800bbbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbbe:	f000 fdf1 	bl	800c7a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f810 	bl	800bbe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbc8:	4b06      	ldr	r3, [pc, #24]	; (800bbe4 <prvCheckTasksWaitingTermination+0x58>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1e1      	bne.n	800bb94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbd0:	bf00      	nop
 800bbd2:	bf00      	nop
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	200010b0 	.word	0x200010b0
 800bbe0:	200010dc 	.word	0x200010dc
 800bbe4:	200010c4 	.word	0x200010c4

0800bbe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d108      	bne.n	800bc0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 ff8e 	bl	800cb20 <vPortFree>
				vPortFree( pxTCB );
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 ff8b 	bl	800cb20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc0a:	e018      	b.n	800bc3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d103      	bne.n	800bc1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 ff82 	bl	800cb20 <vPortFree>
	}
 800bc1c:	e00f      	b.n	800bc3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d00a      	beq.n	800bc3e <prvDeleteTCB+0x56>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	60fb      	str	r3, [r7, #12]
}
 800bc3a:	bf00      	nop
 800bc3c:	e7fe      	b.n	800bc3c <prvDeleteTCB+0x54>
	}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
	...

0800bc48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc4e:	4b0c      	ldr	r3, [pc, #48]	; (800bc80 <prvResetNextTaskUnblockTime+0x38>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d104      	bne.n	800bc62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc58:	4b0a      	ldr	r3, [pc, #40]	; (800bc84 <prvResetNextTaskUnblockTime+0x3c>)
 800bc5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc60:	e008      	b.n	800bc74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc62:	4b07      	ldr	r3, [pc, #28]	; (800bc80 <prvResetNextTaskUnblockTime+0x38>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	4a04      	ldr	r2, [pc, #16]	; (800bc84 <prvResetNextTaskUnblockTime+0x3c>)
 800bc72:	6013      	str	r3, [r2, #0]
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	20001094 	.word	0x20001094
 800bc84:	200010fc 	.word	0x200010fc

0800bc88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc8e:	4b0b      	ldr	r3, [pc, #44]	; (800bcbc <xTaskGetSchedulerState+0x34>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d102      	bne.n	800bc9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc96:	2301      	movs	r3, #1
 800bc98:	607b      	str	r3, [r7, #4]
 800bc9a:	e008      	b.n	800bcae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc9c:	4b08      	ldr	r3, [pc, #32]	; (800bcc0 <xTaskGetSchedulerState+0x38>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d102      	bne.n	800bcaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bca4:	2302      	movs	r3, #2
 800bca6:	607b      	str	r3, [r7, #4]
 800bca8:	e001      	b.n	800bcae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcae:	687b      	ldr	r3, [r7, #4]
	}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	200010e8 	.word	0x200010e8
 800bcc0:	20001104 	.word	0x20001104

0800bcc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d056      	beq.n	800bd88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcda:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <xTaskPriorityDisinherit+0xd0>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	693a      	ldr	r2, [r7, #16]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d00a      	beq.n	800bcfa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	60fb      	str	r3, [r7, #12]
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10a      	bne.n	800bd18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	60bb      	str	r3, [r7, #8]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd1c:	1e5a      	subs	r2, r3, #1
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d02c      	beq.n	800bd88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d128      	bne.n	800bd88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fe fc70 	bl	800a620 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	4b0f      	ldr	r3, [pc, #60]	; (800bd98 <xTaskPriorityDisinherit+0xd4>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d903      	bls.n	800bd68 <xTaskPriorityDisinherit+0xa4>
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	4a0c      	ldr	r2, [pc, #48]	; (800bd98 <xTaskPriorityDisinherit+0xd4>)
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4a09      	ldr	r2, [pc, #36]	; (800bd9c <xTaskPriorityDisinherit+0xd8>)
 800bd76:	441a      	add	r2, r3
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	f7fe fbf1 	bl	800a566 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd84:	2301      	movs	r3, #1
 800bd86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd88:	697b      	ldr	r3, [r7, #20]
	}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20000c08 	.word	0x20000c08
 800bd98:	200010e4 	.word	0x200010e4
 800bd9c:	20000c0c 	.word	0x20000c0c

0800bda0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdaa:	4b21      	ldr	r3, [pc, #132]	; (800be30 <prvAddCurrentTaskToDelayedList+0x90>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdb0:	4b20      	ldr	r3, [pc, #128]	; (800be34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe fc32 	bl	800a620 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdc2:	d10a      	bne.n	800bdda <prvAddCurrentTaskToDelayedList+0x3a>
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d007      	beq.n	800bdda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdca:	4b1a      	ldr	r3, [pc, #104]	; (800be34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	3304      	adds	r3, #4
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4819      	ldr	r0, [pc, #100]	; (800be38 <prvAddCurrentTaskToDelayedList+0x98>)
 800bdd4:	f7fe fbc7 	bl	800a566 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdd8:	e026      	b.n	800be28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4413      	add	r3, r2
 800bde0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bde2:	4b14      	ldr	r3, [pc, #80]	; (800be34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d209      	bcs.n	800be06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdf2:	4b12      	ldr	r3, [pc, #72]	; (800be3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	4610      	mov	r0, r2
 800be00:	f7fe fbd5 	bl	800a5ae <vListInsert>
}
 800be04:	e010      	b.n	800be28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be06:	4b0e      	ldr	r3, [pc, #56]	; (800be40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	4b0a      	ldr	r3, [pc, #40]	; (800be34 <prvAddCurrentTaskToDelayedList+0x94>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	3304      	adds	r3, #4
 800be10:	4619      	mov	r1, r3
 800be12:	4610      	mov	r0, r2
 800be14:	f7fe fbcb 	bl	800a5ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be18:	4b0a      	ldr	r3, [pc, #40]	; (800be44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d202      	bcs.n	800be28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be22:	4a08      	ldr	r2, [pc, #32]	; (800be44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	6013      	str	r3, [r2, #0]
}
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	200010e0 	.word	0x200010e0
 800be34:	20000c08 	.word	0x20000c08
 800be38:	200010c8 	.word	0x200010c8
 800be3c:	20001098 	.word	0x20001098
 800be40:	20001094 	.word	0x20001094
 800be44:	200010fc 	.word	0x200010fc

0800be48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08a      	sub	sp, #40	; 0x28
 800be4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be4e:	2300      	movs	r3, #0
 800be50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be52:	f000 fb07 	bl	800c464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be56:	4b1c      	ldr	r3, [pc, #112]	; (800bec8 <xTimerCreateTimerTask+0x80>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d021      	beq.n	800bea2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be5e:	2300      	movs	r3, #0
 800be60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be66:	1d3a      	adds	r2, r7, #4
 800be68:	f107 0108 	add.w	r1, r7, #8
 800be6c:	f107 030c 	add.w	r3, r7, #12
 800be70:	4618      	mov	r0, r3
 800be72:	f7fe fb31 	bl	800a4d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be76:	6879      	ldr	r1, [r7, #4]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	9202      	str	r2, [sp, #8]
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	2302      	movs	r3, #2
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	2300      	movs	r3, #0
 800be86:	460a      	mov	r2, r1
 800be88:	4910      	ldr	r1, [pc, #64]	; (800becc <xTimerCreateTimerTask+0x84>)
 800be8a:	4811      	ldr	r0, [pc, #68]	; (800bed0 <xTimerCreateTimerTask+0x88>)
 800be8c:	f7ff f8de 	bl	800b04c <xTaskCreateStatic>
 800be90:	4603      	mov	r3, r0
 800be92:	4a10      	ldr	r2, [pc, #64]	; (800bed4 <xTimerCreateTimerTask+0x8c>)
 800be94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be96:	4b0f      	ldr	r3, [pc, #60]	; (800bed4 <xTimerCreateTimerTask+0x8c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d001      	beq.n	800bea2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be9e:	2301      	movs	r3, #1
 800bea0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10a      	bne.n	800bebe <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	613b      	str	r3, [r7, #16]
}
 800beba:	bf00      	nop
 800bebc:	e7fe      	b.n	800bebc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bebe:	697b      	ldr	r3, [r7, #20]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3718      	adds	r7, #24
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	20001138 	.word	0x20001138
 800becc:	0800def4 	.word	0x0800def4
 800bed0:	0800c00d 	.word	0x0800c00d
 800bed4:	2000113c 	.word	0x2000113c

0800bed8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08a      	sub	sp, #40	; 0x28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]
 800bee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10a      	bne.n	800bf06 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	623b      	str	r3, [r7, #32]
}
 800bf02:	bf00      	nop
 800bf04:	e7fe      	b.n	800bf04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf06:	4b1a      	ldr	r3, [pc, #104]	; (800bf70 <xTimerGenericCommand+0x98>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d02a      	beq.n	800bf64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b05      	cmp	r3, #5
 800bf1e:	dc18      	bgt.n	800bf52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf20:	f7ff feb2 	bl	800bc88 <xTaskGetSchedulerState>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d109      	bne.n	800bf3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf2a:	4b11      	ldr	r3, [pc, #68]	; (800bf70 <xTimerGenericCommand+0x98>)
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	f107 0110 	add.w	r1, r7, #16
 800bf32:	2300      	movs	r3, #0
 800bf34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf36:	f7fe fca1 	bl	800a87c <xQueueGenericSend>
 800bf3a:	6278      	str	r0, [r7, #36]	; 0x24
 800bf3c:	e012      	b.n	800bf64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf3e:	4b0c      	ldr	r3, [pc, #48]	; (800bf70 <xTimerGenericCommand+0x98>)
 800bf40:	6818      	ldr	r0, [r3, #0]
 800bf42:	f107 0110 	add.w	r1, r7, #16
 800bf46:	2300      	movs	r3, #0
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f7fe fc97 	bl	800a87c <xQueueGenericSend>
 800bf4e:	6278      	str	r0, [r7, #36]	; 0x24
 800bf50:	e008      	b.n	800bf64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf52:	4b07      	ldr	r3, [pc, #28]	; (800bf70 <xTimerGenericCommand+0x98>)
 800bf54:	6818      	ldr	r0, [r3, #0]
 800bf56:	f107 0110 	add.w	r1, r7, #16
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	f7fe fd8b 	bl	800aa78 <xQueueGenericSendFromISR>
 800bf62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3728      	adds	r7, #40	; 0x28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	20001138 	.word	0x20001138

0800bf74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af02      	add	r7, sp, #8
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf7e:	4b22      	ldr	r3, [pc, #136]	; (800c008 <prvProcessExpiredTimer+0x94>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fe fb47 	bl	800a620 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf98:	f003 0304 	and.w	r3, r3, #4
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d022      	beq.n	800bfe6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	699a      	ldr	r2, [r3, #24]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	18d1      	adds	r1, r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	6978      	ldr	r0, [r7, #20]
 800bfae:	f000 f8d1 	bl	800c154 <prvInsertTimerInActiveList>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d01f      	beq.n	800bff8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfb8:	2300      	movs	r3, #0
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	6978      	ldr	r0, [r7, #20]
 800bfc4:	f7ff ff88 	bl	800bed8 <xTimerGenericCommand>
 800bfc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d113      	bne.n	800bff8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	60fb      	str	r3, [r7, #12]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfec:	f023 0301 	bic.w	r3, r3, #1
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	6a1b      	ldr	r3, [r3, #32]
 800bffc:	6978      	ldr	r0, [r7, #20]
 800bffe:	4798      	blx	r3
}
 800c000:	bf00      	nop
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	20001130 	.word	0x20001130

0800c00c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c014:	f107 0308 	add.w	r3, r7, #8
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 f857 	bl	800c0cc <prvGetNextExpireTime>
 800c01e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	4619      	mov	r1, r3
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 f803 	bl	800c030 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c02a:	f000 f8d5 	bl	800c1d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c02e:	e7f1      	b.n	800c014 <prvTimerTask+0x8>

0800c030 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c03a:	f7ff fa43 	bl	800b4c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4618      	mov	r0, r3
 800c044:	f000 f866 	bl	800c114 <prvSampleTimeNow>
 800c048:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d130      	bne.n	800c0b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10a      	bne.n	800c06c <prvProcessTimerOrBlockTask+0x3c>
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d806      	bhi.n	800c06c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c05e:	f7ff fa3f 	bl	800b4e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c062:	68f9      	ldr	r1, [r7, #12]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f7ff ff85 	bl	800bf74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c06a:	e024      	b.n	800c0b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d008      	beq.n	800c084 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c072:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <prvProcessTimerOrBlockTask+0x90>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d101      	bne.n	800c080 <prvProcessTimerOrBlockTask+0x50>
 800c07c:	2301      	movs	r3, #1
 800c07e:	e000      	b.n	800c082 <prvProcessTimerOrBlockTask+0x52>
 800c080:	2300      	movs	r3, #0
 800c082:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c084:	4b0f      	ldr	r3, [pc, #60]	; (800c0c4 <prvProcessTimerOrBlockTask+0x94>)
 800c086:	6818      	ldr	r0, [r3, #0]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	4619      	mov	r1, r3
 800c092:	f7fe ffa7 	bl	800afe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c096:	f7ff fa23 	bl	800b4e0 <xTaskResumeAll>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10a      	bne.n	800c0b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c0a0:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <prvProcessTimerOrBlockTask+0x98>)
 800c0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	f3bf 8f6f 	isb	sy
}
 800c0b0:	e001      	b.n	800c0b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0b2:	f7ff fa15 	bl	800b4e0 <xTaskResumeAll>
}
 800c0b6:	bf00      	nop
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	20001134 	.word	0x20001134
 800c0c4:	20001138 	.word	0x20001138
 800c0c8:	e000ed04 	.word	0xe000ed04

0800c0cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0d4:	4b0e      	ldr	r3, [pc, #56]	; (800c110 <prvGetNextExpireTime+0x44>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d101      	bne.n	800c0e2 <prvGetNextExpireTime+0x16>
 800c0de:	2201      	movs	r2, #1
 800c0e0:	e000      	b.n	800c0e4 <prvGetNextExpireTime+0x18>
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d105      	bne.n	800c0fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <prvGetNextExpireTime+0x44>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68db      	ldr	r3, [r3, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	e001      	b.n	800c100 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c100:	68fb      	ldr	r3, [r7, #12]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	20001130 	.word	0x20001130

0800c114 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c11c:	f7ff fa7e 	bl	800b61c <xTaskGetTickCount>
 800c120:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c122:	4b0b      	ldr	r3, [pc, #44]	; (800c150 <prvSampleTimeNow+0x3c>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d205      	bcs.n	800c138 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c12c:	f000 f936 	bl	800c39c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	e002      	b.n	800c13e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c13e:	4a04      	ldr	r2, [pc, #16]	; (800c150 <prvSampleTimeNow+0x3c>)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c144:	68fb      	ldr	r3, [r7, #12]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	20001140 	.word	0x20001140

0800c154 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c162:	2300      	movs	r3, #0
 800c164:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	429a      	cmp	r2, r3
 800c178:	d812      	bhi.n	800c1a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	429a      	cmp	r2, r3
 800c186:	d302      	bcc.n	800c18e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c188:	2301      	movs	r3, #1
 800c18a:	617b      	str	r3, [r7, #20]
 800c18c:	e01b      	b.n	800c1c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c18e:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <prvInsertTimerInActiveList+0x7c>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3304      	adds	r3, #4
 800c196:	4619      	mov	r1, r3
 800c198:	4610      	mov	r0, r2
 800c19a:	f7fe fa08 	bl	800a5ae <vListInsert>
 800c19e:	e012      	b.n	800c1c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d206      	bcs.n	800c1b6 <prvInsertTimerInActiveList+0x62>
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d302      	bcc.n	800c1b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	617b      	str	r3, [r7, #20]
 800c1b4:	e007      	b.n	800c1c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1b6:	4b07      	ldr	r3, [pc, #28]	; (800c1d4 <prvInsertTimerInActiveList+0x80>)
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	4619      	mov	r1, r3
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	f7fe f9f4 	bl	800a5ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1c6:	697b      	ldr	r3, [r7, #20]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3718      	adds	r7, #24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	20001134 	.word	0x20001134
 800c1d4:	20001130 	.word	0x20001130

0800c1d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b08e      	sub	sp, #56	; 0x38
 800c1dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1de:	e0ca      	b.n	800c376 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	da18      	bge.n	800c218 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1e6:	1d3b      	adds	r3, r7, #4
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10a      	bne.n	800c208 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	61fb      	str	r3, [r7, #28]
}
 800c204:	bf00      	nop
 800c206:	e7fe      	b.n	800c206 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c20e:	6850      	ldr	r0, [r2, #4]
 800c210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c212:	6892      	ldr	r2, [r2, #8]
 800c214:	4611      	mov	r1, r2
 800c216:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f2c0 80ab 	blt.w	800c376 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	695b      	ldr	r3, [r3, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	3304      	adds	r3, #4
 800c230:	4618      	mov	r0, r3
 800c232:	f7fe f9f5 	bl	800a620 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c236:	463b      	mov	r3, r7
 800c238:	4618      	mov	r0, r3
 800c23a:	f7ff ff6b 	bl	800c114 <prvSampleTimeNow>
 800c23e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b09      	cmp	r3, #9
 800c244:	f200 8096 	bhi.w	800c374 <prvProcessReceivedCommands+0x19c>
 800c248:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <prvProcessReceivedCommands+0x78>)
 800c24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24e:	bf00      	nop
 800c250:	0800c279 	.word	0x0800c279
 800c254:	0800c279 	.word	0x0800c279
 800c258:	0800c279 	.word	0x0800c279
 800c25c:	0800c2ed 	.word	0x0800c2ed
 800c260:	0800c301 	.word	0x0800c301
 800c264:	0800c34b 	.word	0x0800c34b
 800c268:	0800c279 	.word	0x0800c279
 800c26c:	0800c279 	.word	0x0800c279
 800c270:	0800c2ed 	.word	0x0800c2ed
 800c274:	0800c301 	.word	0x0800c301
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c27e:	f043 0301 	orr.w	r3, r3, #1
 800c282:	b2da      	uxtb	r2, r3
 800c284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	18d1      	adds	r1, r2, r3
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c298:	f7ff ff5c 	bl	800c154 <prvInsertTimerInActiveList>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d069      	beq.n	800c376 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	6a1b      	ldr	r3, [r3, #32]
 800c2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2b0:	f003 0304 	and.w	r3, r3, #4
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d05e      	beq.n	800c376 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	441a      	add	r2, r3
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ca:	f7ff fe05 	bl	800bed8 <xTimerGenericCommand>
 800c2ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2d0:	6a3b      	ldr	r3, [r7, #32]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d14f      	bne.n	800c376 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	f383 8811 	msr	BASEPRI, r3
 800c2de:	f3bf 8f6f 	isb	sy
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	61bb      	str	r3, [r7, #24]
}
 800c2e8:	bf00      	nop
 800c2ea:	e7fe      	b.n	800c2ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2f2:	f023 0301 	bic.w	r3, r3, #1
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c2fe:	e03a      	b.n	800c376 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c306:	f043 0301 	orr.w	r3, r3, #1
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c316:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	617b      	str	r3, [r7, #20]
}
 800c332:	bf00      	nop
 800c334:	e7fe      	b.n	800c334 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c338:	699a      	ldr	r2, [r3, #24]
 800c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33c:	18d1      	adds	r1, r2, r3
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c344:	f7ff ff06 	bl	800c154 <prvInsertTimerInActiveList>
					break;
 800c348:	e015      	b.n	800c376 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c350:	f003 0302 	and.w	r3, r3, #2
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c35a:	f000 fbe1 	bl	800cb20 <vPortFree>
 800c35e:	e00a      	b.n	800c376 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c366:	f023 0301 	bic.w	r3, r3, #1
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c372:	e000      	b.n	800c376 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c374:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c376:	4b08      	ldr	r3, [pc, #32]	; (800c398 <prvProcessReceivedCommands+0x1c0>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	1d39      	adds	r1, r7, #4
 800c37c:	2200      	movs	r2, #0
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fe fc16 	bl	800abb0 <xQueueReceive>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	f47f af2a 	bne.w	800c1e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	3730      	adds	r7, #48	; 0x30
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20001138 	.word	0x20001138

0800c39c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b088      	sub	sp, #32
 800c3a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3a2:	e048      	b.n	800c436 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3a4:	4b2d      	ldr	r3, [pc, #180]	; (800c45c <prvSwitchTimerLists+0xc0>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ae:	4b2b      	ldr	r3, [pc, #172]	; (800c45c <prvSwitchTimerLists+0xc0>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fe f92f 	bl	800a620 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6a1b      	ldr	r3, [r3, #32]
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3d0:	f003 0304 	and.w	r3, r3, #4
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d02e      	beq.n	800c436 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	4413      	add	r3, r2
 800c3e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d90e      	bls.n	800c408 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3f6:	4b19      	ldr	r3, [pc, #100]	; (800c45c <prvSwitchTimerLists+0xc0>)
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	4619      	mov	r1, r3
 800c400:	4610      	mov	r0, r2
 800c402:	f7fe f8d4 	bl	800a5ae <vListInsert>
 800c406:	e016      	b.n	800c436 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c408:	2300      	movs	r3, #0
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	2300      	movs	r3, #0
 800c40e:	693a      	ldr	r2, [r7, #16]
 800c410:	2100      	movs	r1, #0
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f7ff fd60 	bl	800bed8 <xTimerGenericCommand>
 800c418:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	603b      	str	r3, [r7, #0]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c436:	4b09      	ldr	r3, [pc, #36]	; (800c45c <prvSwitchTimerLists+0xc0>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1b1      	bne.n	800c3a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c440:	4b06      	ldr	r3, [pc, #24]	; (800c45c <prvSwitchTimerLists+0xc0>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c446:	4b06      	ldr	r3, [pc, #24]	; (800c460 <prvSwitchTimerLists+0xc4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a04      	ldr	r2, [pc, #16]	; (800c45c <prvSwitchTimerLists+0xc0>)
 800c44c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c44e:	4a04      	ldr	r2, [pc, #16]	; (800c460 <prvSwitchTimerLists+0xc4>)
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	6013      	str	r3, [r2, #0]
}
 800c454:	bf00      	nop
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	20001130 	.word	0x20001130
 800c460:	20001134 	.word	0x20001134

0800c464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c46a:	f000 f96b 	bl	800c744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c46e:	4b15      	ldr	r3, [pc, #84]	; (800c4c4 <prvCheckForValidListAndQueue+0x60>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d120      	bne.n	800c4b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c476:	4814      	ldr	r0, [pc, #80]	; (800c4c8 <prvCheckForValidListAndQueue+0x64>)
 800c478:	f7fe f848 	bl	800a50c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c47c:	4813      	ldr	r0, [pc, #76]	; (800c4cc <prvCheckForValidListAndQueue+0x68>)
 800c47e:	f7fe f845 	bl	800a50c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c482:	4b13      	ldr	r3, [pc, #76]	; (800c4d0 <prvCheckForValidListAndQueue+0x6c>)
 800c484:	4a10      	ldr	r2, [pc, #64]	; (800c4c8 <prvCheckForValidListAndQueue+0x64>)
 800c486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c488:	4b12      	ldr	r3, [pc, #72]	; (800c4d4 <prvCheckForValidListAndQueue+0x70>)
 800c48a:	4a10      	ldr	r2, [pc, #64]	; (800c4cc <prvCheckForValidListAndQueue+0x68>)
 800c48c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c48e:	2300      	movs	r3, #0
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	4b11      	ldr	r3, [pc, #68]	; (800c4d8 <prvCheckForValidListAndQueue+0x74>)
 800c494:	4a11      	ldr	r2, [pc, #68]	; (800c4dc <prvCheckForValidListAndQueue+0x78>)
 800c496:	2110      	movs	r1, #16
 800c498:	200a      	movs	r0, #10
 800c49a:	f7fe f953 	bl	800a744 <xQueueGenericCreateStatic>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	4a08      	ldr	r2, [pc, #32]	; (800c4c4 <prvCheckForValidListAndQueue+0x60>)
 800c4a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c4a4:	4b07      	ldr	r3, [pc, #28]	; (800c4c4 <prvCheckForValidListAndQueue+0x60>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d005      	beq.n	800c4b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c4ac:	4b05      	ldr	r3, [pc, #20]	; (800c4c4 <prvCheckForValidListAndQueue+0x60>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	490b      	ldr	r1, [pc, #44]	; (800c4e0 <prvCheckForValidListAndQueue+0x7c>)
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fe fd6c 	bl	800af90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4b8:	f000 f974 	bl	800c7a4 <vPortExitCritical>
}
 800c4bc:	bf00      	nop
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20001138 	.word	0x20001138
 800c4c8:	20001108 	.word	0x20001108
 800c4cc:	2000111c 	.word	0x2000111c
 800c4d0:	20001130 	.word	0x20001130
 800c4d4:	20001134 	.word	0x20001134
 800c4d8:	200011e4 	.word	0x200011e4
 800c4dc:	20001144 	.word	0x20001144
 800c4e0:	0800defc 	.word	0x0800defc

0800c4e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	3b04      	subs	r3, #4
 800c4f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	3b04      	subs	r3, #4
 800c502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	f023 0201 	bic.w	r2, r3, #1
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	3b04      	subs	r3, #4
 800c512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c514:	4a0c      	ldr	r2, [pc, #48]	; (800c548 <pxPortInitialiseStack+0x64>)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	3b14      	subs	r3, #20
 800c51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	3b04      	subs	r3, #4
 800c52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f06f 0202 	mvn.w	r2, #2
 800c532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3b20      	subs	r3, #32
 800c538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c53a:	68fb      	ldr	r3, [r7, #12]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr
 800c548:	0800c54d 	.word	0x0800c54d

0800c54c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c556:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <prvTaskExitError+0x54>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c55e:	d00a      	beq.n	800c576 <prvTaskExitError+0x2a>
	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	60fb      	str	r3, [r7, #12]
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <prvTaskExitError+0x28>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	60bb      	str	r3, [r7, #8]
}
 800c588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c58a:	bf00      	nop
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d0fc      	beq.n	800c58c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c592:	bf00      	nop
 800c594:	bf00      	nop
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	2000014c 	.word	0x2000014c
	...

0800c5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5b0:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <pxCurrentTCBConst2>)
 800c5b2:	6819      	ldr	r1, [r3, #0]
 800c5b4:	6808      	ldr	r0, [r1, #0]
 800c5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ba:	f380 8809 	msr	PSP, r0
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f04f 0000 	mov.w	r0, #0
 800c5c6:	f380 8811 	msr	BASEPRI, r0
 800c5ca:	4770      	bx	lr
 800c5cc:	f3af 8000 	nop.w

0800c5d0 <pxCurrentTCBConst2>:
 800c5d0:	20000c08 	.word	0x20000c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop

0800c5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5d8:	4808      	ldr	r0, [pc, #32]	; (800c5fc <prvPortStartFirstTask+0x24>)
 800c5da:	6800      	ldr	r0, [r0, #0]
 800c5dc:	6800      	ldr	r0, [r0, #0]
 800c5de:	f380 8808 	msr	MSP, r0
 800c5e2:	f04f 0000 	mov.w	r0, #0
 800c5e6:	f380 8814 	msr	CONTROL, r0
 800c5ea:	b662      	cpsie	i
 800c5ec:	b661      	cpsie	f
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	df00      	svc	0
 800c5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5fa:	bf00      	nop
 800c5fc:	e000ed08 	.word	0xe000ed08

0800c600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c606:	4b46      	ldr	r3, [pc, #280]	; (800c720 <xPortStartScheduler+0x120>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a46      	ldr	r2, [pc, #280]	; (800c724 <xPortStartScheduler+0x124>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d10a      	bne.n	800c626 <xPortStartScheduler+0x26>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	613b      	str	r3, [r7, #16]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c626:	4b3e      	ldr	r3, [pc, #248]	; (800c720 <xPortStartScheduler+0x120>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a3f      	ldr	r2, [pc, #252]	; (800c728 <xPortStartScheduler+0x128>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d10a      	bne.n	800c646 <xPortStartScheduler+0x46>
	__asm volatile
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	60fb      	str	r3, [r7, #12]
}
 800c642:	bf00      	nop
 800c644:	e7fe      	b.n	800c644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c646:	4b39      	ldr	r3, [pc, #228]	; (800c72c <xPortStartScheduler+0x12c>)
 800c648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	22ff      	movs	r2, #255	; 0xff
 800c656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c660:	78fb      	ldrb	r3, [r7, #3]
 800c662:	b2db      	uxtb	r3, r3
 800c664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	4b31      	ldr	r3, [pc, #196]	; (800c730 <xPortStartScheduler+0x130>)
 800c66c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c66e:	4b31      	ldr	r3, [pc, #196]	; (800c734 <xPortStartScheduler+0x134>)
 800c670:	2207      	movs	r2, #7
 800c672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c674:	e009      	b.n	800c68a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c676:	4b2f      	ldr	r3, [pc, #188]	; (800c734 <xPortStartScheduler+0x134>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	4a2d      	ldr	r2, [pc, #180]	; (800c734 <xPortStartScheduler+0x134>)
 800c67e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	b2db      	uxtb	r3, r3
 800c684:	005b      	lsls	r3, r3, #1
 800c686:	b2db      	uxtb	r3, r3
 800c688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c68a:	78fb      	ldrb	r3, [r7, #3]
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c692:	2b80      	cmp	r3, #128	; 0x80
 800c694:	d0ef      	beq.n	800c676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c696:	4b27      	ldr	r3, [pc, #156]	; (800c734 <xPortStartScheduler+0x134>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f1c3 0307 	rsb	r3, r3, #7
 800c69e:	2b04      	cmp	r3, #4
 800c6a0:	d00a      	beq.n	800c6b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	60bb      	str	r3, [r7, #8]
}
 800c6b4:	bf00      	nop
 800c6b6:	e7fe      	b.n	800c6b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c6b8:	4b1e      	ldr	r3, [pc, #120]	; (800c734 <xPortStartScheduler+0x134>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	021b      	lsls	r3, r3, #8
 800c6be:	4a1d      	ldr	r2, [pc, #116]	; (800c734 <xPortStartScheduler+0x134>)
 800c6c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c6c2:	4b1c      	ldr	r3, [pc, #112]	; (800c734 <xPortStartScheduler+0x134>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c6ca:	4a1a      	ldr	r2, [pc, #104]	; (800c734 <xPortStartScheduler+0x134>)
 800c6cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6d6:	4b18      	ldr	r3, [pc, #96]	; (800c738 <xPortStartScheduler+0x138>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a17      	ldr	r2, [pc, #92]	; (800c738 <xPortStartScheduler+0x138>)
 800c6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6e2:	4b15      	ldr	r3, [pc, #84]	; (800c738 <xPortStartScheduler+0x138>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a14      	ldr	r2, [pc, #80]	; (800c738 <xPortStartScheduler+0x138>)
 800c6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c6ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6ee:	f000 f8dd 	bl	800c8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6f2:	4b12      	ldr	r3, [pc, #72]	; (800c73c <xPortStartScheduler+0x13c>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6f8:	f000 f8fc 	bl	800c8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6fc:	4b10      	ldr	r3, [pc, #64]	; (800c740 <xPortStartScheduler+0x140>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a0f      	ldr	r2, [pc, #60]	; (800c740 <xPortStartScheduler+0x140>)
 800c702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c708:	f7ff ff66 	bl	800c5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c70c:	f7ff f850 	bl	800b7b0 <vTaskSwitchContext>
	prvTaskExitError();
 800c710:	f7ff ff1c 	bl	800c54c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3718      	adds	r7, #24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	e000ed00 	.word	0xe000ed00
 800c724:	410fc271 	.word	0x410fc271
 800c728:	410fc270 	.word	0x410fc270
 800c72c:	e000e400 	.word	0xe000e400
 800c730:	20001234 	.word	0x20001234
 800c734:	20001238 	.word	0x20001238
 800c738:	e000ed20 	.word	0xe000ed20
 800c73c:	2000014c 	.word	0x2000014c
 800c740:	e000ef34 	.word	0xe000ef34

0800c744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	607b      	str	r3, [r7, #4]
}
 800c75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c75e:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <vPortEnterCritical+0x58>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	4a0d      	ldr	r2, [pc, #52]	; (800c79c <vPortEnterCritical+0x58>)
 800c766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c768:	4b0c      	ldr	r3, [pc, #48]	; (800c79c <vPortEnterCritical+0x58>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d10f      	bne.n	800c790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c770:	4b0b      	ldr	r3, [pc, #44]	; (800c7a0 <vPortEnterCritical+0x5c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	b2db      	uxtb	r3, r3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00a      	beq.n	800c790 <vPortEnterCritical+0x4c>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	603b      	str	r3, [r7, #0]
}
 800c78c:	bf00      	nop
 800c78e:	e7fe      	b.n	800c78e <vPortEnterCritical+0x4a>
	}
}
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	2000014c 	.word	0x2000014c
 800c7a0:	e000ed04 	.word	0xe000ed04

0800c7a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7aa:	4b12      	ldr	r3, [pc, #72]	; (800c7f4 <vPortExitCritical+0x50>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10a      	bne.n	800c7c8 <vPortExitCritical+0x24>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	607b      	str	r3, [r7, #4]
}
 800c7c4:	bf00      	nop
 800c7c6:	e7fe      	b.n	800c7c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c7c8:	4b0a      	ldr	r3, [pc, #40]	; (800c7f4 <vPortExitCritical+0x50>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	4a09      	ldr	r2, [pc, #36]	; (800c7f4 <vPortExitCritical+0x50>)
 800c7d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7d2:	4b08      	ldr	r3, [pc, #32]	; (800c7f4 <vPortExitCritical+0x50>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d105      	bne.n	800c7e6 <vPortExitCritical+0x42>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	f383 8811 	msr	BASEPRI, r3
}
 800c7e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7e6:	bf00      	nop
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	2000014c 	.word	0x2000014c
	...

0800c800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c800:	f3ef 8009 	mrs	r0, PSP
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	4b15      	ldr	r3, [pc, #84]	; (800c860 <pxCurrentTCBConst>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	f01e 0f10 	tst.w	lr, #16
 800c810:	bf08      	it	eq
 800c812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81a:	6010      	str	r0, [r2, #0]
 800c81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c824:	f380 8811 	msr	BASEPRI, r0
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f7fe ffbe 	bl	800b7b0 <vTaskSwitchContext>
 800c834:	f04f 0000 	mov.w	r0, #0
 800c838:	f380 8811 	msr	BASEPRI, r0
 800c83c:	bc09      	pop	{r0, r3}
 800c83e:	6819      	ldr	r1, [r3, #0]
 800c840:	6808      	ldr	r0, [r1, #0]
 800c842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c846:	f01e 0f10 	tst.w	lr, #16
 800c84a:	bf08      	it	eq
 800c84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c850:	f380 8809 	msr	PSP, r0
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	f3af 8000 	nop.w

0800c860 <pxCurrentTCBConst>:
 800c860:	20000c08 	.word	0x20000c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop

0800c868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	607b      	str	r3, [r7, #4]
}
 800c880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c882:	f7fe fedb 	bl	800b63c <xTaskIncrementTick>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d003      	beq.n	800c894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c88c:	4b06      	ldr	r3, [pc, #24]	; (800c8a8 <xPortSysTickHandler+0x40>)
 800c88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c892:	601a      	str	r2, [r3, #0]
 800c894:	2300      	movs	r3, #0
 800c896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	f383 8811 	msr	BASEPRI, r3
}
 800c89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c8a0:	bf00      	nop
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8b0:	4b0b      	ldr	r3, [pc, #44]	; (800c8e0 <vPortSetupTimerInterrupt+0x34>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8b6:	4b0b      	ldr	r3, [pc, #44]	; (800c8e4 <vPortSetupTimerInterrupt+0x38>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8bc:	4b0a      	ldr	r3, [pc, #40]	; (800c8e8 <vPortSetupTimerInterrupt+0x3c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a0a      	ldr	r2, [pc, #40]	; (800c8ec <vPortSetupTimerInterrupt+0x40>)
 800c8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c6:	099b      	lsrs	r3, r3, #6
 800c8c8:	4a09      	ldr	r2, [pc, #36]	; (800c8f0 <vPortSetupTimerInterrupt+0x44>)
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c8ce:	4b04      	ldr	r3, [pc, #16]	; (800c8e0 <vPortSetupTimerInterrupt+0x34>)
 800c8d0:	2207      	movs	r2, #7
 800c8d2:	601a      	str	r2, [r3, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	e000e010 	.word	0xe000e010
 800c8e4:	e000e018 	.word	0xe000e018
 800c8e8:	20000140 	.word	0x20000140
 800c8ec:	10624dd3 	.word	0x10624dd3
 800c8f0:	e000e014 	.word	0xe000e014

0800c8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c904 <vPortEnableVFP+0x10>
 800c8f8:	6801      	ldr	r1, [r0, #0]
 800c8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c8fe:	6001      	str	r1, [r0, #0]
 800c900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c902:	bf00      	nop
 800c904:	e000ed88 	.word	0xe000ed88

0800c908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c90e:	f3ef 8305 	mrs	r3, IPSR
 800c912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b0f      	cmp	r3, #15
 800c918:	d914      	bls.n	800c944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c91a:	4a17      	ldr	r2, [pc, #92]	; (800c978 <vPortValidateInterruptPriority+0x70>)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c924:	4b15      	ldr	r3, [pc, #84]	; (800c97c <vPortValidateInterruptPriority+0x74>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	7afa      	ldrb	r2, [r7, #11]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d20a      	bcs.n	800c944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	607b      	str	r3, [r7, #4]
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c944:	4b0e      	ldr	r3, [pc, #56]	; (800c980 <vPortValidateInterruptPriority+0x78>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c94c:	4b0d      	ldr	r3, [pc, #52]	; (800c984 <vPortValidateInterruptPriority+0x7c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	429a      	cmp	r2, r3
 800c952:	d90a      	bls.n	800c96a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	603b      	str	r3, [r7, #0]
}
 800c966:	bf00      	nop
 800c968:	e7fe      	b.n	800c968 <vPortValidateInterruptPriority+0x60>
	}
 800c96a:	bf00      	nop
 800c96c:	3714      	adds	r7, #20
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	e000e3f0 	.word	0xe000e3f0
 800c97c:	20001234 	.word	0x20001234
 800c980:	e000ed0c 	.word	0xe000ed0c
 800c984:	20001238 	.word	0x20001238

0800c988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08a      	sub	sp, #40	; 0x28
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c990:	2300      	movs	r3, #0
 800c992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c994:	f7fe fd96 	bl	800b4c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c998:	4b5b      	ldr	r3, [pc, #364]	; (800cb08 <pvPortMalloc+0x180>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9a0:	f000 f920 	bl	800cbe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9a4:	4b59      	ldr	r3, [pc, #356]	; (800cb0c <pvPortMalloc+0x184>)
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f040 8093 	bne.w	800cad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d01d      	beq.n	800c9f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c9b8:	2208      	movs	r2, #8
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4413      	add	r3, r2
 800c9be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f003 0307 	and.w	r3, r3, #7
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d014      	beq.n	800c9f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f023 0307 	bic.w	r3, r3, #7
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f003 0307 	and.w	r3, r3, #7
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00a      	beq.n	800c9f4 <pvPortMalloc+0x6c>
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	617b      	str	r3, [r7, #20]
}
 800c9f0:	bf00      	nop
 800c9f2:	e7fe      	b.n	800c9f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d06e      	beq.n	800cad8 <pvPortMalloc+0x150>
 800c9fa:	4b45      	ldr	r3, [pc, #276]	; (800cb10 <pvPortMalloc+0x188>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d869      	bhi.n	800cad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca04:	4b43      	ldr	r3, [pc, #268]	; (800cb14 <pvPortMalloc+0x18c>)
 800ca06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca08:	4b42      	ldr	r3, [pc, #264]	; (800cb14 <pvPortMalloc+0x18c>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca0e:	e004      	b.n	800ca1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d903      	bls.n	800ca2c <pvPortMalloc+0xa4>
 800ca24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1f1      	bne.n	800ca10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca2c:	4b36      	ldr	r3, [pc, #216]	; (800cb08 <pvPortMalloc+0x180>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d050      	beq.n	800cad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2208      	movs	r2, #8
 800ca3c:	4413      	add	r3, r2
 800ca3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	1ad2      	subs	r2, r2, r3
 800ca50:	2308      	movs	r3, #8
 800ca52:	005b      	lsls	r3, r3, #1
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d91f      	bls.n	800ca98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	f003 0307 	and.w	r3, r3, #7
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00a      	beq.n	800ca80 <pvPortMalloc+0xf8>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	613b      	str	r3, [r7, #16]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	685a      	ldr	r2, [r3, #4]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	1ad2      	subs	r2, r2, r3
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca92:	69b8      	ldr	r0, [r7, #24]
 800ca94:	f000 f908 	bl	800cca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca98:	4b1d      	ldr	r3, [pc, #116]	; (800cb10 <pvPortMalloc+0x188>)
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	4a1b      	ldr	r2, [pc, #108]	; (800cb10 <pvPortMalloc+0x188>)
 800caa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800caa6:	4b1a      	ldr	r3, [pc, #104]	; (800cb10 <pvPortMalloc+0x188>)
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	4b1b      	ldr	r3, [pc, #108]	; (800cb18 <pvPortMalloc+0x190>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d203      	bcs.n	800caba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cab2:	4b17      	ldr	r3, [pc, #92]	; (800cb10 <pvPortMalloc+0x188>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a18      	ldr	r2, [pc, #96]	; (800cb18 <pvPortMalloc+0x190>)
 800cab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	685a      	ldr	r2, [r3, #4]
 800cabe:	4b13      	ldr	r3, [pc, #76]	; (800cb0c <pvPortMalloc+0x184>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	431a      	orrs	r2, r3
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	2200      	movs	r2, #0
 800cacc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cace:	4b13      	ldr	r3, [pc, #76]	; (800cb1c <pvPortMalloc+0x194>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	3301      	adds	r3, #1
 800cad4:	4a11      	ldr	r2, [pc, #68]	; (800cb1c <pvPortMalloc+0x194>)
 800cad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cad8:	f7fe fd02 	bl	800b4e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	f003 0307 	and.w	r3, r3, #7
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00a      	beq.n	800cafc <pvPortMalloc+0x174>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	60fb      	str	r3, [r7, #12]
}
 800caf8:	bf00      	nop
 800cafa:	e7fe      	b.n	800cafa <pvPortMalloc+0x172>
	return pvReturn;
 800cafc:	69fb      	ldr	r3, [r7, #28]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3728      	adds	r7, #40	; 0x28
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	20004e44 	.word	0x20004e44
 800cb0c:	20004e58 	.word	0x20004e58
 800cb10:	20004e48 	.word	0x20004e48
 800cb14:	20004e3c 	.word	0x20004e3c
 800cb18:	20004e4c 	.word	0x20004e4c
 800cb1c:	20004e50 	.word	0x20004e50

0800cb20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d04d      	beq.n	800cbce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb32:	2308      	movs	r3, #8
 800cb34:	425b      	negs	r3, r3
 800cb36:	697a      	ldr	r2, [r7, #20]
 800cb38:	4413      	add	r3, r2
 800cb3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	685a      	ldr	r2, [r3, #4]
 800cb44:	4b24      	ldr	r3, [pc, #144]	; (800cbd8 <vPortFree+0xb8>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4013      	ands	r3, r2
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10a      	bne.n	800cb64 <vPortFree+0x44>
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	60fb      	str	r3, [r7, #12]
}
 800cb60:	bf00      	nop
 800cb62:	e7fe      	b.n	800cb62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00a      	beq.n	800cb82 <vPortFree+0x62>
	__asm volatile
 800cb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	60bb      	str	r3, [r7, #8]
}
 800cb7e:	bf00      	nop
 800cb80:	e7fe      	b.n	800cb80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	685a      	ldr	r2, [r3, #4]
 800cb86:	4b14      	ldr	r3, [pc, #80]	; (800cbd8 <vPortFree+0xb8>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d01e      	beq.n	800cbce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d11a      	bne.n	800cbce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	4b0e      	ldr	r3, [pc, #56]	; (800cbd8 <vPortFree+0xb8>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	43db      	mvns	r3, r3
 800cba2:	401a      	ands	r2, r3
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cba8:	f7fe fc8c 	bl	800b4c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	685a      	ldr	r2, [r3, #4]
 800cbb0:	4b0a      	ldr	r3, [pc, #40]	; (800cbdc <vPortFree+0xbc>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	4a09      	ldr	r2, [pc, #36]	; (800cbdc <vPortFree+0xbc>)
 800cbb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbba:	6938      	ldr	r0, [r7, #16]
 800cbbc:	f000 f874 	bl	800cca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cbc0:	4b07      	ldr	r3, [pc, #28]	; (800cbe0 <vPortFree+0xc0>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	4a06      	ldr	r2, [pc, #24]	; (800cbe0 <vPortFree+0xc0>)
 800cbc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cbca:	f7fe fc89 	bl	800b4e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbce:	bf00      	nop
 800cbd0:	3718      	adds	r7, #24
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	20004e58 	.word	0x20004e58
 800cbdc:	20004e48 	.word	0x20004e48
 800cbe0:	20004e54 	.word	0x20004e54

0800cbe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cbee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbf0:	4b27      	ldr	r3, [pc, #156]	; (800cc90 <prvHeapInit+0xac>)
 800cbf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f003 0307 	and.w	r3, r3, #7
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00c      	beq.n	800cc18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	3307      	adds	r3, #7
 800cc02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f023 0307 	bic.w	r3, r3, #7
 800cc0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	4a1f      	ldr	r2, [pc, #124]	; (800cc90 <prvHeapInit+0xac>)
 800cc14:	4413      	add	r3, r2
 800cc16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc1c:	4a1d      	ldr	r2, [pc, #116]	; (800cc94 <prvHeapInit+0xb0>)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc22:	4b1c      	ldr	r3, [pc, #112]	; (800cc94 <prvHeapInit+0xb0>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc30:	2208      	movs	r2, #8
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	1a9b      	subs	r3, r3, r2
 800cc36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f023 0307 	bic.w	r3, r3, #7
 800cc3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4a15      	ldr	r2, [pc, #84]	; (800cc98 <prvHeapInit+0xb4>)
 800cc44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc46:	4b14      	ldr	r3, [pc, #80]	; (800cc98 <prvHeapInit+0xb4>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc4e:	4b12      	ldr	r3, [pc, #72]	; (800cc98 <prvHeapInit+0xb4>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	1ad2      	subs	r2, r2, r3
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc64:	4b0c      	ldr	r3, [pc, #48]	; (800cc98 <prvHeapInit+0xb4>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	4a0a      	ldr	r2, [pc, #40]	; (800cc9c <prvHeapInit+0xb8>)
 800cc72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	4a09      	ldr	r2, [pc, #36]	; (800cca0 <prvHeapInit+0xbc>)
 800cc7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc7c:	4b09      	ldr	r3, [pc, #36]	; (800cca4 <prvHeapInit+0xc0>)
 800cc7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc82:	601a      	str	r2, [r3, #0]
}
 800cc84:	bf00      	nop
 800cc86:	3714      	adds	r7, #20
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr
 800cc90:	2000123c 	.word	0x2000123c
 800cc94:	20004e3c 	.word	0x20004e3c
 800cc98:	20004e44 	.word	0x20004e44
 800cc9c:	20004e4c 	.word	0x20004e4c
 800cca0:	20004e48 	.word	0x20004e48
 800cca4:	20004e58 	.word	0x20004e58

0800cca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccb0:	4b28      	ldr	r3, [pc, #160]	; (800cd54 <prvInsertBlockIntoFreeList+0xac>)
 800ccb2:	60fb      	str	r3, [r7, #12]
 800ccb4:	e002      	b.n	800ccbc <prvInsertBlockIntoFreeList+0x14>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	60fb      	str	r3, [r7, #12]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d8f7      	bhi.n	800ccb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d108      	bne.n	800ccea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	685a      	ldr	r2, [r3, #4]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	441a      	add	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	441a      	add	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d118      	bne.n	800cd30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	4b15      	ldr	r3, [pc, #84]	; (800cd58 <prvInsertBlockIntoFreeList+0xb0>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d00d      	beq.n	800cd26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	441a      	add	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	601a      	str	r2, [r3, #0]
 800cd24:	e008      	b.n	800cd38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd26:	4b0c      	ldr	r3, [pc, #48]	; (800cd58 <prvInsertBlockIntoFreeList+0xb0>)
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	e003      	b.n	800cd38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d002      	beq.n	800cd46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd46:	bf00      	nop
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	20004e3c 	.word	0x20004e3c
 800cd58:	20004e44 	.word	0x20004e44

0800cd5c <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08a      	sub	sp, #40	; 0x28
 800cd60:	af04      	add	r7, sp, #16
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	460b      	mov	r3, r1
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	011b      	lsls	r3, r3, #4
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800cd78:	7afb      	ldrb	r3, [r7, #11]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <_ICM20948_SelectUserBank+0x26>
 800cd7e:	2368      	movs	r3, #104	; 0x68
 800cd80:	e000      	b.n	800cd84 <_ICM20948_SelectUserBank+0x28>
 800cd82:	2369      	movs	r3, #105	; 0x69
 800cd84:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800cd86:	7dbb      	ldrb	r3, [r7, #22]
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	b299      	uxth	r1, r3
 800cd8e:	230a      	movs	r3, #10
 800cd90:	9302      	str	r3, [sp, #8]
 800cd92:	2301      	movs	r3, #1
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	f107 0315 	add.w	r3, r7, #21
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	227f      	movs	r2, #127	; 0x7f
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7f9 f843 	bl	8005e2c <HAL_I2C_Mem_Write>
 800cda6:	4603      	mov	r3, r0
 800cda8:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3718      	adds	r7, #24
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b088      	sub	sp, #32
 800cdb8:	af04      	add	r7, sp, #16
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	4608      	mov	r0, r1
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	70fb      	strb	r3, [r7, #3]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70bb      	strb	r3, [r7, #2]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800cdd2:	78fb      	ldrb	r3, [r7, #3]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d101      	bne.n	800cddc <_ICM20948_WriteByte+0x28>
 800cdd8:	2368      	movs	r3, #104	; 0x68
 800cdda:	e000      	b.n	800cdde <_ICM20948_WriteByte+0x2a>
 800cddc:	2369      	movs	r3, #105	; 0x69
 800cdde:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800cde0:	7bbb      	ldrb	r3, [r7, #14]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	005b      	lsls	r3, r3, #1
 800cde6:	b299      	uxth	r1, r3
 800cde8:	78bb      	ldrb	r3, [r7, #2]
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	230a      	movs	r3, #10
 800cdee:	9302      	str	r3, [sp, #8]
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	9301      	str	r3, [sp, #4]
 800cdf4:	1c7b      	adds	r3, r7, #1
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7f9 f816 	bl	8005e2c <HAL_I2C_Mem_Write>
 800ce00:	4603      	mov	r3, r0
 800ce02:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b084      	sub	sp, #16
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
 800ce16:	4608      	mov	r0, r1
 800ce18:	4611      	mov	r1, r2
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	70fb      	strb	r3, [r7, #3]
 800ce20:	460b      	mov	r3, r1
 800ce22:	70bb      	strb	r3, [r7, #2]
 800ce24:	4613      	mov	r3, r2
 800ce26:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800ce2c:	78fb      	ldrb	r3, [r7, #3]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff ff92 	bl	800cd5c <_ICM20948_SelectUserBank>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800ce3c:	78f9      	ldrb	r1, [r7, #3]
 800ce3e:	2380      	movs	r3, #128	; 0x80
 800ce40:	2206      	movs	r2, #6
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7ff ffb6 	bl	800cdb4 <_ICM20948_WriteByte>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800ce4c:	20c8      	movs	r0, #200	; 0xc8
 800ce4e:	f7f8 fb5b 	bl	8005508 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800ce52:	78f9      	ldrb	r1, [r7, #3]
 800ce54:	2301      	movs	r3, #1
 800ce56:	2206      	movs	r2, #6
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7ff ffab 	bl	800cdb4 <_ICM20948_WriteByte>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800ce62:	78f9      	ldrb	r1, [r7, #3]
 800ce64:	2300      	movs	r3, #0
 800ce66:	2207      	movs	r2, #7
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7ff ffa3 	bl	800cdb4 <_ICM20948_WriteByte>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800ce72:	78fb      	ldrb	r3, [r7, #3]
 800ce74:	2202      	movs	r2, #2
 800ce76:	4619      	mov	r1, r3
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f7ff ff6f 	bl	800cd5c <_ICM20948_SelectUserBank>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800ce82:	78bb      	ldrb	r3, [r7, #2]
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	b25b      	sxtb	r3, r3
 800ce88:	f043 0319 	orr.w	r3, r3, #25
 800ce8c:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	78f9      	ldrb	r1, [r7, #3]
 800ce92:	2201      	movs	r2, #1
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7ff ff8d 	bl	800cdb4 <_ICM20948_WriteByte>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800ce9e:	78f9      	ldrb	r1, [r7, #3]
 800cea0:	2303      	movs	r3, #3
 800cea2:	2253      	movs	r2, #83	; 0x53
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7ff ff85 	bl	800cdb4 <_ICM20948_WriteByte>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800ceae:	78f9      	ldrb	r1, [r7, #3]
 800ceb0:	2304      	movs	r3, #4
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7ff ff7d 	bl	800cdb4 <_ICM20948_WriteByte>
 800ceba:	4603      	mov	r3, r0
 800cebc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800cebe:	787b      	ldrb	r3, [r7, #1]
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	b25b      	sxtb	r3, r3
 800cec4:	f043 0319 	orr.w	r3, r3, #25
 800cec8:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	78f9      	ldrb	r1, [r7, #3]
 800cece:	2214      	movs	r2, #20
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f7ff ff6f 	bl	800cdb4 <_ICM20948_WriteByte>
 800ced6:	4603      	mov	r3, r0
 800ced8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800ceda:	78f9      	ldrb	r1, [r7, #3]
 800cedc:	2304      	movs	r3, #4
 800cede:	2211      	movs	r2, #17
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff ff67 	bl	800cdb4 <_ICM20948_WriteByte>
 800cee6:	4603      	mov	r3, r0
 800cee8:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800ceea:	78fb      	ldrb	r3, [r7, #3]
 800ceec:	2200      	movs	r2, #0
 800ceee:	4619      	mov	r1, r3
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7ff ff33 	bl	800cd5c <_ICM20948_SelectUserBank>
 800cef6:	4603      	mov	r3, r0
 800cef8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800cefa:	78f9      	ldrb	r1, [r7, #3]
 800cefc:	2302      	movs	r3, #2
 800cefe:	220f      	movs	r2, #15
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7ff ff57 	bl	800cdb4 <_ICM20948_WriteByte>
 800cf06:	4603      	mov	r3, r0
 800cf08:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	2131      	movs	r1, #49	; 0x31
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 f806 	bl	800cf20 <_AK09918_WriteByte>
 800cf14:	4603      	mov	r3, r0
 800cf16:	73fb      	strb	r3, [r7, #15]
}
 800cf18:	bf00      	nop
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b088      	sub	sp, #32
 800cf24:	af04      	add	r7, sp, #16
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	70fb      	strb	r3, [r7, #3]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800cf34:	78fb      	ldrb	r3, [r7, #3]
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	230a      	movs	r3, #10
 800cf3a:	9302      	str	r3, [sp, #8]
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	1cbb      	adds	r3, r7, #2
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	2301      	movs	r3, #1
 800cf46:	2118      	movs	r1, #24
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7f8 ff6f 	bl	8005e2c <HAL_I2C_Mem_Write>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800cf52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800cf62:	2300      	movs	r3, #0
 800cf64:	71fb      	strb	r3, [r7, #7]
 800cf66:	e026      	b.n	800cfb6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	3b50      	subs	r3, #80	; 0x50
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2100      	movs	r1, #0
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 f82b 	bl	800cfcc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800cf76:	2100      	movs	r1, #0
 800cf78:	2000      	movs	r0, #0
 800cf7a:	f000 f827 	bl	800cfcc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800cf7e:	2100      	movs	r1, #0
 800cf80:	2010      	movs	r0, #16
 800cf82:	f000 f823 	bl	800cfcc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800cf86:	2300      	movs	r3, #0
 800cf88:	71bb      	strb	r3, [r7, #6]
 800cf8a:	e00d      	b.n	800cfa8 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800cf8c:	79ba      	ldrb	r2, [r7, #6]
 800cf8e:	79fb      	ldrb	r3, [r7, #7]
 800cf90:	490d      	ldr	r1, [pc, #52]	; (800cfc8 <OLED_Refresh_Gram+0x6c>)
 800cf92:	00d2      	lsls	r2, r2, #3
 800cf94:	440a      	add	r2, r1
 800cf96:	4413      	add	r3, r2
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	2101      	movs	r1, #1
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 f815 	bl	800cfcc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800cfa2:	79bb      	ldrb	r3, [r7, #6]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	71bb      	strb	r3, [r7, #6]
 800cfa8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	daed      	bge.n	800cf8c <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800cfb0:	79fb      	ldrb	r3, [r7, #7]
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	71fb      	strb	r3, [r7, #7]
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	2b07      	cmp	r3, #7
 800cfba:	d9d5      	bls.n	800cf68 <OLED_Refresh_Gram+0xc>
	}
}
 800cfbc:	bf00      	nop
 800cfbe:	bf00      	nop
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20004e5c 	.word	0x20004e5c

0800cfcc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	460a      	mov	r2, r1
 800cfd6:	71fb      	strb	r3, [r7, #7]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800cfdc:	79bb      	ldrb	r3, [r7, #6]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d006      	beq.n	800cff0 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfe8:	481c      	ldr	r0, [pc, #112]	; (800d05c <OLED_WR_Byte+0x90>)
 800cfea:	f7f8 fdc1 	bl	8005b70 <HAL_GPIO_WritePin>
 800cfee:	e005      	b.n	800cffc <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800cff0:	2200      	movs	r2, #0
 800cff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cff6:	4819      	ldr	r0, [pc, #100]	; (800d05c <OLED_WR_Byte+0x90>)
 800cff8:	f7f8 fdba 	bl	8005b70 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800cffc:	2300      	movs	r3, #0
 800cffe:	73fb      	strb	r3, [r7, #15]
 800d000:	e01e      	b.n	800d040 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800d002:	2200      	movs	r2, #0
 800d004:	2120      	movs	r1, #32
 800d006:	4815      	ldr	r0, [pc, #84]	; (800d05c <OLED_WR_Byte+0x90>)
 800d008:	f7f8 fdb2 	bl	8005b70 <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800d00c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d010:	2b00      	cmp	r3, #0
 800d012:	da05      	bge.n	800d020 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800d014:	2201      	movs	r2, #1
 800d016:	2140      	movs	r1, #64	; 0x40
 800d018:	4810      	ldr	r0, [pc, #64]	; (800d05c <OLED_WR_Byte+0x90>)
 800d01a:	f7f8 fda9 	bl	8005b70 <HAL_GPIO_WritePin>
 800d01e:	e004      	b.n	800d02a <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800d020:	2200      	movs	r2, #0
 800d022:	2140      	movs	r1, #64	; 0x40
 800d024:	480d      	ldr	r0, [pc, #52]	; (800d05c <OLED_WR_Byte+0x90>)
 800d026:	f7f8 fda3 	bl	8005b70 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800d02a:	2201      	movs	r2, #1
 800d02c:	2120      	movs	r1, #32
 800d02e:	480b      	ldr	r0, [pc, #44]	; (800d05c <OLED_WR_Byte+0x90>)
 800d030:	f7f8 fd9e 	bl	8005b70 <HAL_GPIO_WritePin>
		dat <<= 1;
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800d03a:	7bfb      	ldrb	r3, [r7, #15]
 800d03c:	3301      	adds	r3, #1
 800d03e:	73fb      	strb	r3, [r7, #15]
 800d040:	7bfb      	ldrb	r3, [r7, #15]
 800d042:	2b07      	cmp	r3, #7
 800d044:	d9dd      	bls.n	800d002 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800d046:	2201      	movs	r2, #1
 800d048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d04c:	4803      	ldr	r0, [pc, #12]	; (800d05c <OLED_WR_Byte+0x90>)
 800d04e:	f7f8 fd8f 	bl	8005b70 <HAL_GPIO_WritePin>
}
 800d052:	bf00      	nop
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	40021000 	.word	0x40021000

0800d060 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800d066:	2300      	movs	r3, #0
 800d068:	71fb      	strb	r3, [r7, #7]
 800d06a:	e014      	b.n	800d096 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800d06c:	2300      	movs	r3, #0
 800d06e:	71bb      	strb	r3, [r7, #6]
 800d070:	e00a      	b.n	800d088 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800d072:	79ba      	ldrb	r2, [r7, #6]
 800d074:	79fb      	ldrb	r3, [r7, #7]
 800d076:	490c      	ldr	r1, [pc, #48]	; (800d0a8 <OLED_Clear+0x48>)
 800d078:	00d2      	lsls	r2, r2, #3
 800d07a:	440a      	add	r2, r1
 800d07c:	4413      	add	r3, r2
 800d07e:	2200      	movs	r2, #0
 800d080:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800d082:	79bb      	ldrb	r3, [r7, #6]
 800d084:	3301      	adds	r3, #1
 800d086:	71bb      	strb	r3, [r7, #6]
 800d088:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	daf0      	bge.n	800d072 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	3301      	adds	r3, #1
 800d094:	71fb      	strb	r3, [r7, #7]
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	2b07      	cmp	r3, #7
 800d09a:	d9e7      	bls.n	800d06c <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800d09c:	f7ff ff5e 	bl	800cf5c <OLED_Refresh_Gram>
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	20004e5c 	.word	0x20004e5c

0800d0ac <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	71bb      	strb	r3, [r7, #6]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800d0c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	db41      	blt.n	800d14e <OLED_DrawPoint+0xa2>
 800d0ca:	79bb      	ldrb	r3, [r7, #6]
 800d0cc:	2b3f      	cmp	r3, #63	; 0x3f
 800d0ce:	d83e      	bhi.n	800d14e <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800d0d0:	79bb      	ldrb	r3, [r7, #6]
 800d0d2:	08db      	lsrs	r3, r3, #3
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	f1c3 0307 	rsb	r3, r3, #7
 800d0da:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800d0dc:	79bb      	ldrb	r3, [r7, #6]
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800d0e4:	7b7b      	ldrb	r3, [r7, #13]
 800d0e6:	f1c3 0307 	rsb	r3, r3, #7
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f0:	73fb      	strb	r3, [r7, #15]
	if (t)
 800d0f2:	797b      	ldrb	r3, [r7, #5]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d012      	beq.n	800d11e <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800d0f8:	79fa      	ldrb	r2, [r7, #7]
 800d0fa:	7bbb      	ldrb	r3, [r7, #14]
 800d0fc:	4917      	ldr	r1, [pc, #92]	; (800d15c <OLED_DrawPoint+0xb0>)
 800d0fe:	00d2      	lsls	r2, r2, #3
 800d100:	440a      	add	r2, r1
 800d102:	4413      	add	r3, r2
 800d104:	7818      	ldrb	r0, [r3, #0]
 800d106:	79fa      	ldrb	r2, [r7, #7]
 800d108:	7bbb      	ldrb	r3, [r7, #14]
 800d10a:	7bf9      	ldrb	r1, [r7, #15]
 800d10c:	4301      	orrs	r1, r0
 800d10e:	b2c8      	uxtb	r0, r1
 800d110:	4912      	ldr	r1, [pc, #72]	; (800d15c <OLED_DrawPoint+0xb0>)
 800d112:	00d2      	lsls	r2, r2, #3
 800d114:	440a      	add	r2, r1
 800d116:	4413      	add	r3, r2
 800d118:	4602      	mov	r2, r0
 800d11a:	701a      	strb	r2, [r3, #0]
 800d11c:	e018      	b.n	800d150 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800d11e:	79fa      	ldrb	r2, [r7, #7]
 800d120:	7bbb      	ldrb	r3, [r7, #14]
 800d122:	490e      	ldr	r1, [pc, #56]	; (800d15c <OLED_DrawPoint+0xb0>)
 800d124:	00d2      	lsls	r2, r2, #3
 800d126:	440a      	add	r2, r1
 800d128:	4413      	add	r3, r2
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	b25a      	sxtb	r2, r3
 800d12e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d132:	43db      	mvns	r3, r3
 800d134:	b25b      	sxtb	r3, r3
 800d136:	4013      	ands	r3, r2
 800d138:	b259      	sxtb	r1, r3
 800d13a:	79fa      	ldrb	r2, [r7, #7]
 800d13c:	7bbb      	ldrb	r3, [r7, #14]
 800d13e:	b2c8      	uxtb	r0, r1
 800d140:	4906      	ldr	r1, [pc, #24]	; (800d15c <OLED_DrawPoint+0xb0>)
 800d142:	00d2      	lsls	r2, r2, #3
 800d144:	440a      	add	r2, r1
 800d146:	4413      	add	r3, r2
 800d148:	4602      	mov	r2, r0
 800d14a:	701a      	strb	r2, [r3, #0]
 800d14c:	e000      	b.n	800d150 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800d14e:	bf00      	nop
}
 800d150:	3714      	adds	r7, #20
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	20004e5c 	.word	0x20004e5c

0800d160 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800d160:	b590      	push	{r4, r7, lr}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	4611      	mov	r1, r2
 800d16c:	461a      	mov	r2, r3
 800d16e:	4623      	mov	r3, r4
 800d170:	71fb      	strb	r3, [r7, #7]
 800d172:	4603      	mov	r3, r0
 800d174:	71bb      	strb	r3, [r7, #6]
 800d176:	460b      	mov	r3, r1
 800d178:	717b      	strb	r3, [r7, #5]
 800d17a:	4613      	mov	r3, r2
 800d17c:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800d17e:	79bb      	ldrb	r3, [r7, #6]
 800d180:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800d182:	797b      	ldrb	r3, [r7, #5]
 800d184:	3b20      	subs	r3, #32
 800d186:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800d188:	2300      	movs	r3, #0
 800d18a:	73bb      	strb	r3, [r7, #14]
 800d18c:	e04d      	b.n	800d22a <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800d18e:	793b      	ldrb	r3, [r7, #4]
 800d190:	2b0c      	cmp	r3, #12
 800d192:	d10b      	bne.n	800d1ac <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800d194:	797a      	ldrb	r2, [r7, #5]
 800d196:	7bb9      	ldrb	r1, [r7, #14]
 800d198:	4828      	ldr	r0, [pc, #160]	; (800d23c <OLED_ShowChar+0xdc>)
 800d19a:	4613      	mov	r3, r2
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	4413      	add	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4403      	add	r3, r0
 800d1a4:	440b      	add	r3, r1
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	73fb      	strb	r3, [r7, #15]
 800d1aa:	e007      	b.n	800d1bc <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800d1ac:	797a      	ldrb	r2, [r7, #5]
 800d1ae:	7bbb      	ldrb	r3, [r7, #14]
 800d1b0:	4923      	ldr	r1, [pc, #140]	; (800d240 <OLED_ShowChar+0xe0>)
 800d1b2:	0112      	lsls	r2, r2, #4
 800d1b4:	440a      	add	r2, r1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800d1bc:	2300      	movs	r3, #0
 800d1be:	737b      	strb	r3, [r7, #13]
 800d1c0:	e02d      	b.n	800d21e <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800d1c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	da07      	bge.n	800d1da <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800d1ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d1ce:	79b9      	ldrb	r1, [r7, #6]
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7ff ff6a 	bl	800d0ac <OLED_DrawPoint>
 800d1d8:	e00c      	b.n	800d1f4 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800d1da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bf0c      	ite	eq
 800d1e2:	2301      	moveq	r3, #1
 800d1e4:	2300      	movne	r3, #0
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	79b9      	ldrb	r1, [r7, #6]
 800d1ec:	79fb      	ldrb	r3, [r7, #7]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7ff ff5c 	bl	800d0ac <OLED_DrawPoint>
			temp <<= 1;
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	73fb      	strb	r3, [r7, #15]
			y++;
 800d1fa:	79bb      	ldrb	r3, [r7, #6]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800d200:	79ba      	ldrb	r2, [r7, #6]
 800d202:	7b3b      	ldrb	r3, [r7, #12]
 800d204:	1ad2      	subs	r2, r2, r3
 800d206:	793b      	ldrb	r3, [r7, #4]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d105      	bne.n	800d218 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800d20c:	7b3b      	ldrb	r3, [r7, #12]
 800d20e:	71bb      	strb	r3, [r7, #6]
				x++;
 800d210:	79fb      	ldrb	r3, [r7, #7]
 800d212:	3301      	adds	r3, #1
 800d214:	71fb      	strb	r3, [r7, #7]
				break;
 800d216:	e005      	b.n	800d224 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800d218:	7b7b      	ldrb	r3, [r7, #13]
 800d21a:	3301      	adds	r3, #1
 800d21c:	737b      	strb	r3, [r7, #13]
 800d21e:	7b7b      	ldrb	r3, [r7, #13]
 800d220:	2b07      	cmp	r3, #7
 800d222:	d9ce      	bls.n	800d1c2 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800d224:	7bbb      	ldrb	r3, [r7, #14]
 800d226:	3301      	adds	r3, #1
 800d228:	73bb      	strb	r3, [r7, #14]
 800d22a:	7bba      	ldrb	r2, [r7, #14]
 800d22c:	793b      	ldrb	r3, [r7, #4]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d3ad      	bcc.n	800d18e <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800d232:	bf00      	nop
 800d234:	bf00      	nop
 800d236:	3714      	adds	r7, #20
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd90      	pop	{r4, r7, pc}
 800d23c:	0800e0cc 	.word	0x0800e0cc
 800d240:	0800e540 	.word	0x0800e540

0800d244 <oled_pow>:

uint32_t oled_pow(uint8_t m, uint8_t n)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	460a      	mov	r2, r1
 800d24e:	71fb      	strb	r3, [r7, #7]
 800d250:	4613      	mov	r3, r2
 800d252:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800d254:	2301      	movs	r3, #1
 800d256:	60fb      	str	r3, [r7, #12]
	while (n--)
 800d258:	e004      	b.n	800d264 <oled_pow+0x20>
		result *= m;
 800d25a:	79fa      	ldrb	r2, [r7, #7]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	fb02 f303 	mul.w	r3, r2, r3
 800d262:	60fb      	str	r3, [r7, #12]
	while (n--)
 800d264:	79bb      	ldrb	r3, [r7, #6]
 800d266:	1e5a      	subs	r2, r3, #1
 800d268:	71ba      	strb	r2, [r7, #6]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1f5      	bne.n	800d25a <oled_pow+0x16>
	return result;
 800d26e:	68fb      	ldr	r3, [r7, #12]
}
 800d270:	4618      	mov	r0, r3
 800d272:	3714      	adds	r7, #20
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b087      	sub	sp, #28
 800d280:	af02      	add	r7, sp, #8
 800d282:	603a      	str	r2, [r7, #0]
 800d284:	461a      	mov	r2, r3
 800d286:	4603      	mov	r3, r0
 800d288:	71fb      	strb	r3, [r7, #7]
 800d28a:	460b      	mov	r3, r1
 800d28c:	71bb      	strb	r3, [r7, #6]
 800d28e:	4613      	mov	r3, r2
 800d290:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 800d296:	2300      	movs	r3, #0
 800d298:	73fb      	strb	r3, [r7, #15]
 800d29a:	e051      	b.n	800d340 <OLED_ShowNumber+0xc4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 800d29c:	797a      	ldrb	r2, [r7, #5]
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	200a      	movs	r0, #10
 800d2ac:	f7ff ffca 	bl	800d244 <oled_pow>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2b8:	4b26      	ldr	r3, [pc, #152]	; (800d354 <OLED_ShowNumber+0xd8>)
 800d2ba:	fba3 2301 	umull	r2, r3, r3, r1
 800d2be:	08da      	lsrs	r2, r3, #3
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	005b      	lsls	r3, r3, #1
 800d2c8:	1aca      	subs	r2, r1, r3
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 800d2ce:	7bbb      	ldrb	r3, [r7, #14]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d11d      	bne.n	800d310 <OLED_ShowNumber+0x94>
 800d2d4:	7bfa      	ldrb	r2, [r7, #15]
 800d2d6:	797b      	ldrb	r3, [r7, #5]
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	da18      	bge.n	800d310 <OLED_ShowNumber+0x94>
		{
			if (temp == 0)
 800d2de:	7b7b      	ldrb	r3, [r7, #13]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d113      	bne.n	800d30c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ', size, 1);
 800d2e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2e8:	085b      	lsrs	r3, r3, #1
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	7bfa      	ldrb	r2, [r7, #15]
 800d2ee:	fb12 f303 	smulbb	r3, r2, r3
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	79fb      	ldrb	r3, [r7, #7]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	b2d8      	uxtb	r0, r3
 800d2fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2fe:	79b9      	ldrb	r1, [r7, #6]
 800d300:	2201      	movs	r2, #1
 800d302:	9200      	str	r2, [sp, #0]
 800d304:	2220      	movs	r2, #32
 800d306:	f7ff ff2b 	bl	800d160 <OLED_ShowChar>
				continue;
 800d30a:	e016      	b.n	800d33a <OLED_ShowNumber+0xbe>
			}
			else
				enshow = 1;
 800d30c:	2301      	movs	r3, #1
 800d30e:	73bb      	strb	r3, [r7, #14]
		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
 800d310:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d314:	085b      	lsrs	r3, r3, #1
 800d316:	b2db      	uxtb	r3, r3
 800d318:	7bfa      	ldrb	r2, [r7, #15]
 800d31a:	fb12 f303 	smulbb	r3, r2, r3
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	79fb      	ldrb	r3, [r7, #7]
 800d322:	4413      	add	r3, r2
 800d324:	b2d8      	uxtb	r0, r3
 800d326:	7b7b      	ldrb	r3, [r7, #13]
 800d328:	3330      	adds	r3, #48	; 0x30
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d330:	79b9      	ldrb	r1, [r7, #6]
 800d332:	2401      	movs	r4, #1
 800d334:	9400      	str	r4, [sp, #0]
 800d336:	f7ff ff13 	bl	800d160 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 800d33a:	7bfb      	ldrb	r3, [r7, #15]
 800d33c:	3301      	adds	r3, #1
 800d33e:	73fb      	strb	r3, [r7, #15]
 800d340:	7bfa      	ldrb	r2, [r7, #15]
 800d342:	797b      	ldrb	r3, [r7, #5]
 800d344:	429a      	cmp	r2, r3
 800d346:	d3a9      	bcc.n	800d29c <OLED_ShowNumber+0x20>
	}
}
 800d348:	bf00      	nop
 800d34a:	bf00      	nop
 800d34c:	3714      	adds	r7, #20
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd90      	pop	{r4, r7, pc}
 800d352:	bf00      	nop
 800d354:	cccccccd 	.word	0xcccccccd

0800d358 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af02      	add	r7, sp, #8
 800d35e:	4603      	mov	r3, r0
 800d360:	603a      	str	r2, [r7, #0]
 800d362:	71fb      	strb	r3, [r7, #7]
 800d364:	460b      	mov	r3, r1
 800d366:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800d368:	e01f      	b.n	800d3aa <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	2b7a      	cmp	r3, #122	; 0x7a
 800d36e:	d904      	bls.n	800d37a <OLED_ShowString+0x22>
		{
			x = 0;
 800d370:	2300      	movs	r3, #0
 800d372:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800d374:	79bb      	ldrb	r3, [r7, #6]
 800d376:	3310      	adds	r3, #16
 800d378:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800d37a:	79bb      	ldrb	r3, [r7, #6]
 800d37c:	2b3a      	cmp	r3, #58	; 0x3a
 800d37e:	d905      	bls.n	800d38c <OLED_ShowString+0x34>
		{
			y = x = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	71fb      	strb	r3, [r7, #7]
 800d384:	79fb      	ldrb	r3, [r7, #7]
 800d386:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800d388:	f7ff fe6a 	bl	800d060 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	781a      	ldrb	r2, [r3, #0]
 800d390:	79b9      	ldrb	r1, [r7, #6]
 800d392:	79f8      	ldrb	r0, [r7, #7]
 800d394:	2301      	movs	r3, #1
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	230c      	movs	r3, #12
 800d39a:	f7ff fee1 	bl	800d160 <OLED_ShowChar>
		x += 8;
 800d39e:	79fb      	ldrb	r3, [r7, #7]
 800d3a0:	3308      	adds	r3, #8
 800d3a2:	71fb      	strb	r3, [r7, #7]
		p++;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1db      	bne.n	800d36a <OLED_ShowString+0x12>
	}
}
 800d3b2:	bf00      	nop
 800d3b4:	bf00      	nop
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800d3c0:	f7f9 fbb0 	bl	8006b24 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800d3c4:	4b41      	ldr	r3, [pc, #260]	; (800d4cc <OLED_Init+0x110>)
 800d3c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c8:	4a40      	ldr	r2, [pc, #256]	; (800d4cc <OLED_Init+0x110>)
 800d3ca:	f023 0301 	bic.w	r3, r3, #1
 800d3ce:	6713      	str	r3, [r2, #112]	; 0x70
 800d3d0:	4b3e      	ldr	r3, [pc, #248]	; (800d4cc <OLED_Init+0x110>)
 800d3d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3d4:	4a3d      	ldr	r2, [pc, #244]	; (800d4cc <OLED_Init+0x110>)
 800d3d6:	f023 0304 	bic.w	r3, r3, #4
 800d3da:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800d3dc:	f7f9 fbb6 	bl	8006b4c <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	2180      	movs	r1, #128	; 0x80
 800d3e4:	483a      	ldr	r0, [pc, #232]	; (800d4d0 <OLED_Init+0x114>)
 800d3e6:	f7f8 fbc3 	bl	8005b70 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800d3ea:	2064      	movs	r0, #100	; 0x64
 800d3ec:	f7f8 f88c 	bl	8005508 <HAL_Delay>
	OLED_RST_Set();
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	2180      	movs	r1, #128	; 0x80
 800d3f4:	4836      	ldr	r0, [pc, #216]	; (800d4d0 <OLED_Init+0x114>)
 800d3f6:	f7f8 fbbb 	bl	8005b70 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800d3fa:	2100      	movs	r1, #0
 800d3fc:	20ae      	movs	r0, #174	; 0xae
 800d3fe:	f7ff fde5 	bl	800cfcc <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800d402:	2100      	movs	r1, #0
 800d404:	20d5      	movs	r0, #213	; 0xd5
 800d406:	f7ff fde1 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800d40a:	2100      	movs	r1, #0
 800d40c:	2050      	movs	r0, #80	; 0x50
 800d40e:	f7ff fddd 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800d412:	2100      	movs	r1, #0
 800d414:	20a8      	movs	r0, #168	; 0xa8
 800d416:	f7ff fdd9 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800d41a:	2100      	movs	r1, #0
 800d41c:	203f      	movs	r0, #63	; 0x3f
 800d41e:	f7ff fdd5 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800d422:	2100      	movs	r1, #0
 800d424:	20d3      	movs	r0, #211	; 0xd3
 800d426:	f7ff fdd1 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800d42a:	2100      	movs	r1, #0
 800d42c:	2000      	movs	r0, #0
 800d42e:	f7ff fdcd 	bl	800cfcc <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800d432:	2100      	movs	r1, #0
 800d434:	2040      	movs	r0, #64	; 0x40
 800d436:	f7ff fdc9 	bl	800cfcc <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800d43a:	2100      	movs	r1, #0
 800d43c:	208d      	movs	r0, #141	; 0x8d
 800d43e:	f7ff fdc5 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800d442:	2100      	movs	r1, #0
 800d444:	2014      	movs	r0, #20
 800d446:	f7ff fdc1 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800d44a:	2100      	movs	r1, #0
 800d44c:	2020      	movs	r0, #32
 800d44e:	f7ff fdbd 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800d452:	2100      	movs	r1, #0
 800d454:	2002      	movs	r0, #2
 800d456:	f7ff fdb9 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800d45a:	2100      	movs	r1, #0
 800d45c:	20a1      	movs	r0, #161	; 0xa1
 800d45e:	f7ff fdb5 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800d462:	2100      	movs	r1, #0
 800d464:	20c0      	movs	r0, #192	; 0xc0
 800d466:	f7ff fdb1 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800d46a:	2100      	movs	r1, #0
 800d46c:	20da      	movs	r0, #218	; 0xda
 800d46e:	f7ff fdad 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800d472:	2100      	movs	r1, #0
 800d474:	2012      	movs	r0, #18
 800d476:	f7ff fda9 	bl	800cfcc <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800d47a:	2100      	movs	r1, #0
 800d47c:	2081      	movs	r0, #129	; 0x81
 800d47e:	f7ff fda5 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800d482:	2100      	movs	r1, #0
 800d484:	20ef      	movs	r0, #239	; 0xef
 800d486:	f7ff fda1 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800d48a:	2100      	movs	r1, #0
 800d48c:	20d9      	movs	r0, #217	; 0xd9
 800d48e:	f7ff fd9d 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800d492:	2100      	movs	r1, #0
 800d494:	20f1      	movs	r0, #241	; 0xf1
 800d496:	f7ff fd99 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800d49a:	2100      	movs	r1, #0
 800d49c:	20db      	movs	r0, #219	; 0xdb
 800d49e:	f7ff fd95 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	2030      	movs	r0, #48	; 0x30
 800d4a6:	f7ff fd91 	bl	800cfcc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	20a4      	movs	r0, #164	; 0xa4
 800d4ae:	f7ff fd8d 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	20a6      	movs	r0, #166	; 0xa6
 800d4b6:	f7ff fd89 	bl	800cfcc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	20af      	movs	r0, #175	; 0xaf
 800d4be:	f7ff fd85 	bl	800cfcc <OLED_WR_Byte>
	OLED_Clear();
 800d4c2:	f7ff fdcd 	bl	800d060 <OLED_Clear>
 800d4c6:	bf00      	nop
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	40023800 	.word	0x40023800
 800d4d0:	40021000 	.word	0x40021000

0800d4d4 <sniprintf>:
 800d4d4:	b40c      	push	{r2, r3}
 800d4d6:	b530      	push	{r4, r5, lr}
 800d4d8:	4b17      	ldr	r3, [pc, #92]	; (800d538 <sniprintf+0x64>)
 800d4da:	1e0c      	subs	r4, r1, #0
 800d4dc:	681d      	ldr	r5, [r3, #0]
 800d4de:	b09d      	sub	sp, #116	; 0x74
 800d4e0:	da08      	bge.n	800d4f4 <sniprintf+0x20>
 800d4e2:	238b      	movs	r3, #139	; 0x8b
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4ea:	b01d      	add	sp, #116	; 0x74
 800d4ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4f0:	b002      	add	sp, #8
 800d4f2:	4770      	bx	lr
 800d4f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d4f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d4fc:	bf14      	ite	ne
 800d4fe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d502:	4623      	moveq	r3, r4
 800d504:	9304      	str	r3, [sp, #16]
 800d506:	9307      	str	r3, [sp, #28]
 800d508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d50c:	9002      	str	r0, [sp, #8]
 800d50e:	9006      	str	r0, [sp, #24]
 800d510:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d514:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d516:	ab21      	add	r3, sp, #132	; 0x84
 800d518:	a902      	add	r1, sp, #8
 800d51a:	4628      	mov	r0, r5
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	f000 f8a9 	bl	800d674 <_svfiprintf_r>
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	bfbc      	itt	lt
 800d526:	238b      	movlt	r3, #139	; 0x8b
 800d528:	602b      	strlt	r3, [r5, #0]
 800d52a:	2c00      	cmp	r4, #0
 800d52c:	d0dd      	beq.n	800d4ea <sniprintf+0x16>
 800d52e:	9b02      	ldr	r3, [sp, #8]
 800d530:	2200      	movs	r2, #0
 800d532:	701a      	strb	r2, [r3, #0]
 800d534:	e7d9      	b.n	800d4ea <sniprintf+0x16>
 800d536:	bf00      	nop
 800d538:	2000019c 	.word	0x2000019c

0800d53c <memset>:
 800d53c:	4402      	add	r2, r0
 800d53e:	4603      	mov	r3, r0
 800d540:	4293      	cmp	r3, r2
 800d542:	d100      	bne.n	800d546 <memset+0xa>
 800d544:	4770      	bx	lr
 800d546:	f803 1b01 	strb.w	r1, [r3], #1
 800d54a:	e7f9      	b.n	800d540 <memset+0x4>

0800d54c <__errno>:
 800d54c:	4b01      	ldr	r3, [pc, #4]	; (800d554 <__errno+0x8>)
 800d54e:	6818      	ldr	r0, [r3, #0]
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	2000019c 	.word	0x2000019c

0800d558 <__libc_init_array>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	4d0d      	ldr	r5, [pc, #52]	; (800d590 <__libc_init_array+0x38>)
 800d55c:	4c0d      	ldr	r4, [pc, #52]	; (800d594 <__libc_init_array+0x3c>)
 800d55e:	1b64      	subs	r4, r4, r5
 800d560:	10a4      	asrs	r4, r4, #2
 800d562:	2600      	movs	r6, #0
 800d564:	42a6      	cmp	r6, r4
 800d566:	d109      	bne.n	800d57c <__libc_init_array+0x24>
 800d568:	4d0b      	ldr	r5, [pc, #44]	; (800d598 <__libc_init_array+0x40>)
 800d56a:	4c0c      	ldr	r4, [pc, #48]	; (800d59c <__libc_init_array+0x44>)
 800d56c:	f000 fc6a 	bl	800de44 <_init>
 800d570:	1b64      	subs	r4, r4, r5
 800d572:	10a4      	asrs	r4, r4, #2
 800d574:	2600      	movs	r6, #0
 800d576:	42a6      	cmp	r6, r4
 800d578:	d105      	bne.n	800d586 <__libc_init_array+0x2e>
 800d57a:	bd70      	pop	{r4, r5, r6, pc}
 800d57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d580:	4798      	blx	r3
 800d582:	3601      	adds	r6, #1
 800d584:	e7ee      	b.n	800d564 <__libc_init_array+0xc>
 800d586:	f855 3b04 	ldr.w	r3, [r5], #4
 800d58a:	4798      	blx	r3
 800d58c:	3601      	adds	r6, #1
 800d58e:	e7f2      	b.n	800d576 <__libc_init_array+0x1e>
 800d590:	0800eb6c 	.word	0x0800eb6c
 800d594:	0800eb6c 	.word	0x0800eb6c
 800d598:	0800eb6c 	.word	0x0800eb6c
 800d59c:	0800eb70 	.word	0x0800eb70

0800d5a0 <__retarget_lock_acquire_recursive>:
 800d5a0:	4770      	bx	lr

0800d5a2 <__retarget_lock_release_recursive>:
 800d5a2:	4770      	bx	lr

0800d5a4 <memcpy>:
 800d5a4:	440a      	add	r2, r1
 800d5a6:	4291      	cmp	r1, r2
 800d5a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d5ac:	d100      	bne.n	800d5b0 <memcpy+0xc>
 800d5ae:	4770      	bx	lr
 800d5b0:	b510      	push	{r4, lr}
 800d5b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5ba:	4291      	cmp	r1, r2
 800d5bc:	d1f9      	bne.n	800d5b2 <memcpy+0xe>
 800d5be:	bd10      	pop	{r4, pc}

0800d5c0 <__ssputs_r>:
 800d5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c4:	688e      	ldr	r6, [r1, #8]
 800d5c6:	461f      	mov	r7, r3
 800d5c8:	42be      	cmp	r6, r7
 800d5ca:	680b      	ldr	r3, [r1, #0]
 800d5cc:	4682      	mov	sl, r0
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	4690      	mov	r8, r2
 800d5d2:	d82c      	bhi.n	800d62e <__ssputs_r+0x6e>
 800d5d4:	898a      	ldrh	r2, [r1, #12]
 800d5d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5da:	d026      	beq.n	800d62a <__ssputs_r+0x6a>
 800d5dc:	6965      	ldr	r5, [r4, #20]
 800d5de:	6909      	ldr	r1, [r1, #16]
 800d5e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5e4:	eba3 0901 	sub.w	r9, r3, r1
 800d5e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5ec:	1c7b      	adds	r3, r7, #1
 800d5ee:	444b      	add	r3, r9
 800d5f0:	106d      	asrs	r5, r5, #1
 800d5f2:	429d      	cmp	r5, r3
 800d5f4:	bf38      	it	cc
 800d5f6:	461d      	movcc	r5, r3
 800d5f8:	0553      	lsls	r3, r2, #21
 800d5fa:	d527      	bpl.n	800d64c <__ssputs_r+0x8c>
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	f000 f957 	bl	800d8b0 <_malloc_r>
 800d602:	4606      	mov	r6, r0
 800d604:	b360      	cbz	r0, 800d660 <__ssputs_r+0xa0>
 800d606:	6921      	ldr	r1, [r4, #16]
 800d608:	464a      	mov	r2, r9
 800d60a:	f7ff ffcb 	bl	800d5a4 <memcpy>
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d618:	81a3      	strh	r3, [r4, #12]
 800d61a:	6126      	str	r6, [r4, #16]
 800d61c:	6165      	str	r5, [r4, #20]
 800d61e:	444e      	add	r6, r9
 800d620:	eba5 0509 	sub.w	r5, r5, r9
 800d624:	6026      	str	r6, [r4, #0]
 800d626:	60a5      	str	r5, [r4, #8]
 800d628:	463e      	mov	r6, r7
 800d62a:	42be      	cmp	r6, r7
 800d62c:	d900      	bls.n	800d630 <__ssputs_r+0x70>
 800d62e:	463e      	mov	r6, r7
 800d630:	6820      	ldr	r0, [r4, #0]
 800d632:	4632      	mov	r2, r6
 800d634:	4641      	mov	r1, r8
 800d636:	f000 fb86 	bl	800dd46 <memmove>
 800d63a:	68a3      	ldr	r3, [r4, #8]
 800d63c:	1b9b      	subs	r3, r3, r6
 800d63e:	60a3      	str	r3, [r4, #8]
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	4433      	add	r3, r6
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	2000      	movs	r0, #0
 800d648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64c:	462a      	mov	r2, r5
 800d64e:	f000 fb4b 	bl	800dce8 <_realloc_r>
 800d652:	4606      	mov	r6, r0
 800d654:	2800      	cmp	r0, #0
 800d656:	d1e0      	bne.n	800d61a <__ssputs_r+0x5a>
 800d658:	6921      	ldr	r1, [r4, #16]
 800d65a:	4650      	mov	r0, sl
 800d65c:	f000 fb9e 	bl	800dd9c <_free_r>
 800d660:	230c      	movs	r3, #12
 800d662:	f8ca 3000 	str.w	r3, [sl]
 800d666:	89a3      	ldrh	r3, [r4, #12]
 800d668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d66c:	81a3      	strh	r3, [r4, #12]
 800d66e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d672:	e7e9      	b.n	800d648 <__ssputs_r+0x88>

0800d674 <_svfiprintf_r>:
 800d674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d678:	4698      	mov	r8, r3
 800d67a:	898b      	ldrh	r3, [r1, #12]
 800d67c:	061b      	lsls	r3, r3, #24
 800d67e:	b09d      	sub	sp, #116	; 0x74
 800d680:	4607      	mov	r7, r0
 800d682:	460d      	mov	r5, r1
 800d684:	4614      	mov	r4, r2
 800d686:	d50e      	bpl.n	800d6a6 <_svfiprintf_r+0x32>
 800d688:	690b      	ldr	r3, [r1, #16]
 800d68a:	b963      	cbnz	r3, 800d6a6 <_svfiprintf_r+0x32>
 800d68c:	2140      	movs	r1, #64	; 0x40
 800d68e:	f000 f90f 	bl	800d8b0 <_malloc_r>
 800d692:	6028      	str	r0, [r5, #0]
 800d694:	6128      	str	r0, [r5, #16]
 800d696:	b920      	cbnz	r0, 800d6a2 <_svfiprintf_r+0x2e>
 800d698:	230c      	movs	r3, #12
 800d69a:	603b      	str	r3, [r7, #0]
 800d69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6a0:	e0d0      	b.n	800d844 <_svfiprintf_r+0x1d0>
 800d6a2:	2340      	movs	r3, #64	; 0x40
 800d6a4:	616b      	str	r3, [r5, #20]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d6aa:	2320      	movs	r3, #32
 800d6ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6b4:	2330      	movs	r3, #48	; 0x30
 800d6b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d85c <_svfiprintf_r+0x1e8>
 800d6ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6be:	f04f 0901 	mov.w	r9, #1
 800d6c2:	4623      	mov	r3, r4
 800d6c4:	469a      	mov	sl, r3
 800d6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ca:	b10a      	cbz	r2, 800d6d0 <_svfiprintf_r+0x5c>
 800d6cc:	2a25      	cmp	r2, #37	; 0x25
 800d6ce:	d1f9      	bne.n	800d6c4 <_svfiprintf_r+0x50>
 800d6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d6d4:	d00b      	beq.n	800d6ee <_svfiprintf_r+0x7a>
 800d6d6:	465b      	mov	r3, fp
 800d6d8:	4622      	mov	r2, r4
 800d6da:	4629      	mov	r1, r5
 800d6dc:	4638      	mov	r0, r7
 800d6de:	f7ff ff6f 	bl	800d5c0 <__ssputs_r>
 800d6e2:	3001      	adds	r0, #1
 800d6e4:	f000 80a9 	beq.w	800d83a <_svfiprintf_r+0x1c6>
 800d6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6ea:	445a      	add	r2, fp
 800d6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f000 80a1 	beq.w	800d83a <_svfiprintf_r+0x1c6>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d702:	f10a 0a01 	add.w	sl, sl, #1
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	9307      	str	r3, [sp, #28]
 800d70a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d70e:	931a      	str	r3, [sp, #104]	; 0x68
 800d710:	4654      	mov	r4, sl
 800d712:	2205      	movs	r2, #5
 800d714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d718:	4850      	ldr	r0, [pc, #320]	; (800d85c <_svfiprintf_r+0x1e8>)
 800d71a:	f7f2 fd59 	bl	80001d0 <memchr>
 800d71e:	9a04      	ldr	r2, [sp, #16]
 800d720:	b9d8      	cbnz	r0, 800d75a <_svfiprintf_r+0xe6>
 800d722:	06d0      	lsls	r0, r2, #27
 800d724:	bf44      	itt	mi
 800d726:	2320      	movmi	r3, #32
 800d728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d72c:	0711      	lsls	r1, r2, #28
 800d72e:	bf44      	itt	mi
 800d730:	232b      	movmi	r3, #43	; 0x2b
 800d732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d736:	f89a 3000 	ldrb.w	r3, [sl]
 800d73a:	2b2a      	cmp	r3, #42	; 0x2a
 800d73c:	d015      	beq.n	800d76a <_svfiprintf_r+0xf6>
 800d73e:	9a07      	ldr	r2, [sp, #28]
 800d740:	4654      	mov	r4, sl
 800d742:	2000      	movs	r0, #0
 800d744:	f04f 0c0a 	mov.w	ip, #10
 800d748:	4621      	mov	r1, r4
 800d74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d74e:	3b30      	subs	r3, #48	; 0x30
 800d750:	2b09      	cmp	r3, #9
 800d752:	d94d      	bls.n	800d7f0 <_svfiprintf_r+0x17c>
 800d754:	b1b0      	cbz	r0, 800d784 <_svfiprintf_r+0x110>
 800d756:	9207      	str	r2, [sp, #28]
 800d758:	e014      	b.n	800d784 <_svfiprintf_r+0x110>
 800d75a:	eba0 0308 	sub.w	r3, r0, r8
 800d75e:	fa09 f303 	lsl.w	r3, r9, r3
 800d762:	4313      	orrs	r3, r2
 800d764:	9304      	str	r3, [sp, #16]
 800d766:	46a2      	mov	sl, r4
 800d768:	e7d2      	b.n	800d710 <_svfiprintf_r+0x9c>
 800d76a:	9b03      	ldr	r3, [sp, #12]
 800d76c:	1d19      	adds	r1, r3, #4
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	9103      	str	r1, [sp, #12]
 800d772:	2b00      	cmp	r3, #0
 800d774:	bfbb      	ittet	lt
 800d776:	425b      	neglt	r3, r3
 800d778:	f042 0202 	orrlt.w	r2, r2, #2
 800d77c:	9307      	strge	r3, [sp, #28]
 800d77e:	9307      	strlt	r3, [sp, #28]
 800d780:	bfb8      	it	lt
 800d782:	9204      	strlt	r2, [sp, #16]
 800d784:	7823      	ldrb	r3, [r4, #0]
 800d786:	2b2e      	cmp	r3, #46	; 0x2e
 800d788:	d10c      	bne.n	800d7a4 <_svfiprintf_r+0x130>
 800d78a:	7863      	ldrb	r3, [r4, #1]
 800d78c:	2b2a      	cmp	r3, #42	; 0x2a
 800d78e:	d134      	bne.n	800d7fa <_svfiprintf_r+0x186>
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	1d1a      	adds	r2, r3, #4
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	9203      	str	r2, [sp, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	bfb8      	it	lt
 800d79c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d7a0:	3402      	adds	r4, #2
 800d7a2:	9305      	str	r3, [sp, #20]
 800d7a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d86c <_svfiprintf_r+0x1f8>
 800d7a8:	7821      	ldrb	r1, [r4, #0]
 800d7aa:	2203      	movs	r2, #3
 800d7ac:	4650      	mov	r0, sl
 800d7ae:	f7f2 fd0f 	bl	80001d0 <memchr>
 800d7b2:	b138      	cbz	r0, 800d7c4 <_svfiprintf_r+0x150>
 800d7b4:	9b04      	ldr	r3, [sp, #16]
 800d7b6:	eba0 000a 	sub.w	r0, r0, sl
 800d7ba:	2240      	movs	r2, #64	; 0x40
 800d7bc:	4082      	lsls	r2, r0
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	3401      	adds	r4, #1
 800d7c2:	9304      	str	r3, [sp, #16]
 800d7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c8:	4825      	ldr	r0, [pc, #148]	; (800d860 <_svfiprintf_r+0x1ec>)
 800d7ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7ce:	2206      	movs	r2, #6
 800d7d0:	f7f2 fcfe 	bl	80001d0 <memchr>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d038      	beq.n	800d84a <_svfiprintf_r+0x1d6>
 800d7d8:	4b22      	ldr	r3, [pc, #136]	; (800d864 <_svfiprintf_r+0x1f0>)
 800d7da:	bb1b      	cbnz	r3, 800d824 <_svfiprintf_r+0x1b0>
 800d7dc:	9b03      	ldr	r3, [sp, #12]
 800d7de:	3307      	adds	r3, #7
 800d7e0:	f023 0307 	bic.w	r3, r3, #7
 800d7e4:	3308      	adds	r3, #8
 800d7e6:	9303      	str	r3, [sp, #12]
 800d7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ea:	4433      	add	r3, r6
 800d7ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ee:	e768      	b.n	800d6c2 <_svfiprintf_r+0x4e>
 800d7f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7f4:	460c      	mov	r4, r1
 800d7f6:	2001      	movs	r0, #1
 800d7f8:	e7a6      	b.n	800d748 <_svfiprintf_r+0xd4>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	3401      	adds	r4, #1
 800d7fe:	9305      	str	r3, [sp, #20]
 800d800:	4619      	mov	r1, r3
 800d802:	f04f 0c0a 	mov.w	ip, #10
 800d806:	4620      	mov	r0, r4
 800d808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d80c:	3a30      	subs	r2, #48	; 0x30
 800d80e:	2a09      	cmp	r2, #9
 800d810:	d903      	bls.n	800d81a <_svfiprintf_r+0x1a6>
 800d812:	2b00      	cmp	r3, #0
 800d814:	d0c6      	beq.n	800d7a4 <_svfiprintf_r+0x130>
 800d816:	9105      	str	r1, [sp, #20]
 800d818:	e7c4      	b.n	800d7a4 <_svfiprintf_r+0x130>
 800d81a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d81e:	4604      	mov	r4, r0
 800d820:	2301      	movs	r3, #1
 800d822:	e7f0      	b.n	800d806 <_svfiprintf_r+0x192>
 800d824:	ab03      	add	r3, sp, #12
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	462a      	mov	r2, r5
 800d82a:	4b0f      	ldr	r3, [pc, #60]	; (800d868 <_svfiprintf_r+0x1f4>)
 800d82c:	a904      	add	r1, sp, #16
 800d82e:	4638      	mov	r0, r7
 800d830:	f3af 8000 	nop.w
 800d834:	1c42      	adds	r2, r0, #1
 800d836:	4606      	mov	r6, r0
 800d838:	d1d6      	bne.n	800d7e8 <_svfiprintf_r+0x174>
 800d83a:	89ab      	ldrh	r3, [r5, #12]
 800d83c:	065b      	lsls	r3, r3, #25
 800d83e:	f53f af2d 	bmi.w	800d69c <_svfiprintf_r+0x28>
 800d842:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d844:	b01d      	add	sp, #116	; 0x74
 800d846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	462a      	mov	r2, r5
 800d850:	4b05      	ldr	r3, [pc, #20]	; (800d868 <_svfiprintf_r+0x1f4>)
 800d852:	a904      	add	r1, sp, #16
 800d854:	4638      	mov	r0, r7
 800d856:	f000 f919 	bl	800da8c <_printf_i>
 800d85a:	e7eb      	b.n	800d834 <_svfiprintf_r+0x1c0>
 800d85c:	0800eb30 	.word	0x0800eb30
 800d860:	0800eb3a 	.word	0x0800eb3a
 800d864:	00000000 	.word	0x00000000
 800d868:	0800d5c1 	.word	0x0800d5c1
 800d86c:	0800eb36 	.word	0x0800eb36

0800d870 <sbrk_aligned>:
 800d870:	b570      	push	{r4, r5, r6, lr}
 800d872:	4e0e      	ldr	r6, [pc, #56]	; (800d8ac <sbrk_aligned+0x3c>)
 800d874:	460c      	mov	r4, r1
 800d876:	6831      	ldr	r1, [r6, #0]
 800d878:	4605      	mov	r5, r0
 800d87a:	b911      	cbnz	r1, 800d882 <sbrk_aligned+0x12>
 800d87c:	f000 fa7e 	bl	800dd7c <_sbrk_r>
 800d880:	6030      	str	r0, [r6, #0]
 800d882:	4621      	mov	r1, r4
 800d884:	4628      	mov	r0, r5
 800d886:	f000 fa79 	bl	800dd7c <_sbrk_r>
 800d88a:	1c43      	adds	r3, r0, #1
 800d88c:	d00a      	beq.n	800d8a4 <sbrk_aligned+0x34>
 800d88e:	1cc4      	adds	r4, r0, #3
 800d890:	f024 0403 	bic.w	r4, r4, #3
 800d894:	42a0      	cmp	r0, r4
 800d896:	d007      	beq.n	800d8a8 <sbrk_aligned+0x38>
 800d898:	1a21      	subs	r1, r4, r0
 800d89a:	4628      	mov	r0, r5
 800d89c:	f000 fa6e 	bl	800dd7c <_sbrk_r>
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	d101      	bne.n	800d8a8 <sbrk_aligned+0x38>
 800d8a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	bd70      	pop	{r4, r5, r6, pc}
 800d8ac:	2000539c 	.word	0x2000539c

0800d8b0 <_malloc_r>:
 800d8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8b4:	1ccd      	adds	r5, r1, #3
 800d8b6:	f025 0503 	bic.w	r5, r5, #3
 800d8ba:	3508      	adds	r5, #8
 800d8bc:	2d0c      	cmp	r5, #12
 800d8be:	bf38      	it	cc
 800d8c0:	250c      	movcc	r5, #12
 800d8c2:	2d00      	cmp	r5, #0
 800d8c4:	4607      	mov	r7, r0
 800d8c6:	db01      	blt.n	800d8cc <_malloc_r+0x1c>
 800d8c8:	42a9      	cmp	r1, r5
 800d8ca:	d905      	bls.n	800d8d8 <_malloc_r+0x28>
 800d8cc:	230c      	movs	r3, #12
 800d8ce:	603b      	str	r3, [r7, #0]
 800d8d0:	2600      	movs	r6, #0
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d9ac <_malloc_r+0xfc>
 800d8dc:	f000 f9f8 	bl	800dcd0 <__malloc_lock>
 800d8e0:	f8d8 3000 	ldr.w	r3, [r8]
 800d8e4:	461c      	mov	r4, r3
 800d8e6:	bb5c      	cbnz	r4, 800d940 <_malloc_r+0x90>
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	4638      	mov	r0, r7
 800d8ec:	f7ff ffc0 	bl	800d870 <sbrk_aligned>
 800d8f0:	1c43      	adds	r3, r0, #1
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	d155      	bne.n	800d9a2 <_malloc_r+0xf2>
 800d8f6:	f8d8 4000 	ldr.w	r4, [r8]
 800d8fa:	4626      	mov	r6, r4
 800d8fc:	2e00      	cmp	r6, #0
 800d8fe:	d145      	bne.n	800d98c <_malloc_r+0xdc>
 800d900:	2c00      	cmp	r4, #0
 800d902:	d048      	beq.n	800d996 <_malloc_r+0xe6>
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	4631      	mov	r1, r6
 800d908:	4638      	mov	r0, r7
 800d90a:	eb04 0903 	add.w	r9, r4, r3
 800d90e:	f000 fa35 	bl	800dd7c <_sbrk_r>
 800d912:	4581      	cmp	r9, r0
 800d914:	d13f      	bne.n	800d996 <_malloc_r+0xe6>
 800d916:	6821      	ldr	r1, [r4, #0]
 800d918:	1a6d      	subs	r5, r5, r1
 800d91a:	4629      	mov	r1, r5
 800d91c:	4638      	mov	r0, r7
 800d91e:	f7ff ffa7 	bl	800d870 <sbrk_aligned>
 800d922:	3001      	adds	r0, #1
 800d924:	d037      	beq.n	800d996 <_malloc_r+0xe6>
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	442b      	add	r3, r5
 800d92a:	6023      	str	r3, [r4, #0]
 800d92c:	f8d8 3000 	ldr.w	r3, [r8]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d038      	beq.n	800d9a6 <_malloc_r+0xf6>
 800d934:	685a      	ldr	r2, [r3, #4]
 800d936:	42a2      	cmp	r2, r4
 800d938:	d12b      	bne.n	800d992 <_malloc_r+0xe2>
 800d93a:	2200      	movs	r2, #0
 800d93c:	605a      	str	r2, [r3, #4]
 800d93e:	e00f      	b.n	800d960 <_malloc_r+0xb0>
 800d940:	6822      	ldr	r2, [r4, #0]
 800d942:	1b52      	subs	r2, r2, r5
 800d944:	d41f      	bmi.n	800d986 <_malloc_r+0xd6>
 800d946:	2a0b      	cmp	r2, #11
 800d948:	d917      	bls.n	800d97a <_malloc_r+0xca>
 800d94a:	1961      	adds	r1, r4, r5
 800d94c:	42a3      	cmp	r3, r4
 800d94e:	6025      	str	r5, [r4, #0]
 800d950:	bf18      	it	ne
 800d952:	6059      	strne	r1, [r3, #4]
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	bf08      	it	eq
 800d958:	f8c8 1000 	streq.w	r1, [r8]
 800d95c:	5162      	str	r2, [r4, r5]
 800d95e:	604b      	str	r3, [r1, #4]
 800d960:	4638      	mov	r0, r7
 800d962:	f104 060b 	add.w	r6, r4, #11
 800d966:	f000 f9b9 	bl	800dcdc <__malloc_unlock>
 800d96a:	f026 0607 	bic.w	r6, r6, #7
 800d96e:	1d23      	adds	r3, r4, #4
 800d970:	1af2      	subs	r2, r6, r3
 800d972:	d0ae      	beq.n	800d8d2 <_malloc_r+0x22>
 800d974:	1b9b      	subs	r3, r3, r6
 800d976:	50a3      	str	r3, [r4, r2]
 800d978:	e7ab      	b.n	800d8d2 <_malloc_r+0x22>
 800d97a:	42a3      	cmp	r3, r4
 800d97c:	6862      	ldr	r2, [r4, #4]
 800d97e:	d1dd      	bne.n	800d93c <_malloc_r+0x8c>
 800d980:	f8c8 2000 	str.w	r2, [r8]
 800d984:	e7ec      	b.n	800d960 <_malloc_r+0xb0>
 800d986:	4623      	mov	r3, r4
 800d988:	6864      	ldr	r4, [r4, #4]
 800d98a:	e7ac      	b.n	800d8e6 <_malloc_r+0x36>
 800d98c:	4634      	mov	r4, r6
 800d98e:	6876      	ldr	r6, [r6, #4]
 800d990:	e7b4      	b.n	800d8fc <_malloc_r+0x4c>
 800d992:	4613      	mov	r3, r2
 800d994:	e7cc      	b.n	800d930 <_malloc_r+0x80>
 800d996:	230c      	movs	r3, #12
 800d998:	603b      	str	r3, [r7, #0]
 800d99a:	4638      	mov	r0, r7
 800d99c:	f000 f99e 	bl	800dcdc <__malloc_unlock>
 800d9a0:	e797      	b.n	800d8d2 <_malloc_r+0x22>
 800d9a2:	6025      	str	r5, [r4, #0]
 800d9a4:	e7dc      	b.n	800d960 <_malloc_r+0xb0>
 800d9a6:	605b      	str	r3, [r3, #4]
 800d9a8:	deff      	udf	#255	; 0xff
 800d9aa:	bf00      	nop
 800d9ac:	20005398 	.word	0x20005398

0800d9b0 <_printf_common>:
 800d9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b4:	4616      	mov	r6, r2
 800d9b6:	4699      	mov	r9, r3
 800d9b8:	688a      	ldr	r2, [r1, #8]
 800d9ba:	690b      	ldr	r3, [r1, #16]
 800d9bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	bfb8      	it	lt
 800d9c4:	4613      	movlt	r3, r2
 800d9c6:	6033      	str	r3, [r6, #0]
 800d9c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	b10a      	cbz	r2, 800d9d6 <_printf_common+0x26>
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	6033      	str	r3, [r6, #0]
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	0699      	lsls	r1, r3, #26
 800d9da:	bf42      	ittt	mi
 800d9dc:	6833      	ldrmi	r3, [r6, #0]
 800d9de:	3302      	addmi	r3, #2
 800d9e0:	6033      	strmi	r3, [r6, #0]
 800d9e2:	6825      	ldr	r5, [r4, #0]
 800d9e4:	f015 0506 	ands.w	r5, r5, #6
 800d9e8:	d106      	bne.n	800d9f8 <_printf_common+0x48>
 800d9ea:	f104 0a19 	add.w	sl, r4, #25
 800d9ee:	68e3      	ldr	r3, [r4, #12]
 800d9f0:	6832      	ldr	r2, [r6, #0]
 800d9f2:	1a9b      	subs	r3, r3, r2
 800d9f4:	42ab      	cmp	r3, r5
 800d9f6:	dc26      	bgt.n	800da46 <_printf_common+0x96>
 800d9f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9fc:	1e13      	subs	r3, r2, #0
 800d9fe:	6822      	ldr	r2, [r4, #0]
 800da00:	bf18      	it	ne
 800da02:	2301      	movne	r3, #1
 800da04:	0692      	lsls	r2, r2, #26
 800da06:	d42b      	bmi.n	800da60 <_printf_common+0xb0>
 800da08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da0c:	4649      	mov	r1, r9
 800da0e:	4638      	mov	r0, r7
 800da10:	47c0      	blx	r8
 800da12:	3001      	adds	r0, #1
 800da14:	d01e      	beq.n	800da54 <_printf_common+0xa4>
 800da16:	6823      	ldr	r3, [r4, #0]
 800da18:	6922      	ldr	r2, [r4, #16]
 800da1a:	f003 0306 	and.w	r3, r3, #6
 800da1e:	2b04      	cmp	r3, #4
 800da20:	bf02      	ittt	eq
 800da22:	68e5      	ldreq	r5, [r4, #12]
 800da24:	6833      	ldreq	r3, [r6, #0]
 800da26:	1aed      	subeq	r5, r5, r3
 800da28:	68a3      	ldr	r3, [r4, #8]
 800da2a:	bf0c      	ite	eq
 800da2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da30:	2500      	movne	r5, #0
 800da32:	4293      	cmp	r3, r2
 800da34:	bfc4      	itt	gt
 800da36:	1a9b      	subgt	r3, r3, r2
 800da38:	18ed      	addgt	r5, r5, r3
 800da3a:	2600      	movs	r6, #0
 800da3c:	341a      	adds	r4, #26
 800da3e:	42b5      	cmp	r5, r6
 800da40:	d11a      	bne.n	800da78 <_printf_common+0xc8>
 800da42:	2000      	movs	r0, #0
 800da44:	e008      	b.n	800da58 <_printf_common+0xa8>
 800da46:	2301      	movs	r3, #1
 800da48:	4652      	mov	r2, sl
 800da4a:	4649      	mov	r1, r9
 800da4c:	4638      	mov	r0, r7
 800da4e:	47c0      	blx	r8
 800da50:	3001      	adds	r0, #1
 800da52:	d103      	bne.n	800da5c <_printf_common+0xac>
 800da54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da5c:	3501      	adds	r5, #1
 800da5e:	e7c6      	b.n	800d9ee <_printf_common+0x3e>
 800da60:	18e1      	adds	r1, r4, r3
 800da62:	1c5a      	adds	r2, r3, #1
 800da64:	2030      	movs	r0, #48	; 0x30
 800da66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da6a:	4422      	add	r2, r4
 800da6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da74:	3302      	adds	r3, #2
 800da76:	e7c7      	b.n	800da08 <_printf_common+0x58>
 800da78:	2301      	movs	r3, #1
 800da7a:	4622      	mov	r2, r4
 800da7c:	4649      	mov	r1, r9
 800da7e:	4638      	mov	r0, r7
 800da80:	47c0      	blx	r8
 800da82:	3001      	adds	r0, #1
 800da84:	d0e6      	beq.n	800da54 <_printf_common+0xa4>
 800da86:	3601      	adds	r6, #1
 800da88:	e7d9      	b.n	800da3e <_printf_common+0x8e>
	...

0800da8c <_printf_i>:
 800da8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da90:	7e0f      	ldrb	r7, [r1, #24]
 800da92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da94:	2f78      	cmp	r7, #120	; 0x78
 800da96:	4691      	mov	r9, r2
 800da98:	4680      	mov	r8, r0
 800da9a:	460c      	mov	r4, r1
 800da9c:	469a      	mov	sl, r3
 800da9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800daa2:	d807      	bhi.n	800dab4 <_printf_i+0x28>
 800daa4:	2f62      	cmp	r7, #98	; 0x62
 800daa6:	d80a      	bhi.n	800dabe <_printf_i+0x32>
 800daa8:	2f00      	cmp	r7, #0
 800daaa:	f000 80d4 	beq.w	800dc56 <_printf_i+0x1ca>
 800daae:	2f58      	cmp	r7, #88	; 0x58
 800dab0:	f000 80c0 	beq.w	800dc34 <_printf_i+0x1a8>
 800dab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dabc:	e03a      	b.n	800db34 <_printf_i+0xa8>
 800dabe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dac2:	2b15      	cmp	r3, #21
 800dac4:	d8f6      	bhi.n	800dab4 <_printf_i+0x28>
 800dac6:	a101      	add	r1, pc, #4	; (adr r1, 800dacc <_printf_i+0x40>)
 800dac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dacc:	0800db25 	.word	0x0800db25
 800dad0:	0800db39 	.word	0x0800db39
 800dad4:	0800dab5 	.word	0x0800dab5
 800dad8:	0800dab5 	.word	0x0800dab5
 800dadc:	0800dab5 	.word	0x0800dab5
 800dae0:	0800dab5 	.word	0x0800dab5
 800dae4:	0800db39 	.word	0x0800db39
 800dae8:	0800dab5 	.word	0x0800dab5
 800daec:	0800dab5 	.word	0x0800dab5
 800daf0:	0800dab5 	.word	0x0800dab5
 800daf4:	0800dab5 	.word	0x0800dab5
 800daf8:	0800dc3d 	.word	0x0800dc3d
 800dafc:	0800db65 	.word	0x0800db65
 800db00:	0800dbf7 	.word	0x0800dbf7
 800db04:	0800dab5 	.word	0x0800dab5
 800db08:	0800dab5 	.word	0x0800dab5
 800db0c:	0800dc5f 	.word	0x0800dc5f
 800db10:	0800dab5 	.word	0x0800dab5
 800db14:	0800db65 	.word	0x0800db65
 800db18:	0800dab5 	.word	0x0800dab5
 800db1c:	0800dab5 	.word	0x0800dab5
 800db20:	0800dbff 	.word	0x0800dbff
 800db24:	682b      	ldr	r3, [r5, #0]
 800db26:	1d1a      	adds	r2, r3, #4
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	602a      	str	r2, [r5, #0]
 800db2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db34:	2301      	movs	r3, #1
 800db36:	e09f      	b.n	800dc78 <_printf_i+0x1ec>
 800db38:	6820      	ldr	r0, [r4, #0]
 800db3a:	682b      	ldr	r3, [r5, #0]
 800db3c:	0607      	lsls	r7, r0, #24
 800db3e:	f103 0104 	add.w	r1, r3, #4
 800db42:	6029      	str	r1, [r5, #0]
 800db44:	d501      	bpl.n	800db4a <_printf_i+0xbe>
 800db46:	681e      	ldr	r6, [r3, #0]
 800db48:	e003      	b.n	800db52 <_printf_i+0xc6>
 800db4a:	0646      	lsls	r6, r0, #25
 800db4c:	d5fb      	bpl.n	800db46 <_printf_i+0xba>
 800db4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800db52:	2e00      	cmp	r6, #0
 800db54:	da03      	bge.n	800db5e <_printf_i+0xd2>
 800db56:	232d      	movs	r3, #45	; 0x2d
 800db58:	4276      	negs	r6, r6
 800db5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db5e:	485a      	ldr	r0, [pc, #360]	; (800dcc8 <_printf_i+0x23c>)
 800db60:	230a      	movs	r3, #10
 800db62:	e012      	b.n	800db8a <_printf_i+0xfe>
 800db64:	682b      	ldr	r3, [r5, #0]
 800db66:	6820      	ldr	r0, [r4, #0]
 800db68:	1d19      	adds	r1, r3, #4
 800db6a:	6029      	str	r1, [r5, #0]
 800db6c:	0605      	lsls	r5, r0, #24
 800db6e:	d501      	bpl.n	800db74 <_printf_i+0xe8>
 800db70:	681e      	ldr	r6, [r3, #0]
 800db72:	e002      	b.n	800db7a <_printf_i+0xee>
 800db74:	0641      	lsls	r1, r0, #25
 800db76:	d5fb      	bpl.n	800db70 <_printf_i+0xe4>
 800db78:	881e      	ldrh	r6, [r3, #0]
 800db7a:	4853      	ldr	r0, [pc, #332]	; (800dcc8 <_printf_i+0x23c>)
 800db7c:	2f6f      	cmp	r7, #111	; 0x6f
 800db7e:	bf0c      	ite	eq
 800db80:	2308      	moveq	r3, #8
 800db82:	230a      	movne	r3, #10
 800db84:	2100      	movs	r1, #0
 800db86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db8a:	6865      	ldr	r5, [r4, #4]
 800db8c:	60a5      	str	r5, [r4, #8]
 800db8e:	2d00      	cmp	r5, #0
 800db90:	bfa2      	ittt	ge
 800db92:	6821      	ldrge	r1, [r4, #0]
 800db94:	f021 0104 	bicge.w	r1, r1, #4
 800db98:	6021      	strge	r1, [r4, #0]
 800db9a:	b90e      	cbnz	r6, 800dba0 <_printf_i+0x114>
 800db9c:	2d00      	cmp	r5, #0
 800db9e:	d04b      	beq.n	800dc38 <_printf_i+0x1ac>
 800dba0:	4615      	mov	r5, r2
 800dba2:	fbb6 f1f3 	udiv	r1, r6, r3
 800dba6:	fb03 6711 	mls	r7, r3, r1, r6
 800dbaa:	5dc7      	ldrb	r7, [r0, r7]
 800dbac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbb0:	4637      	mov	r7, r6
 800dbb2:	42bb      	cmp	r3, r7
 800dbb4:	460e      	mov	r6, r1
 800dbb6:	d9f4      	bls.n	800dba2 <_printf_i+0x116>
 800dbb8:	2b08      	cmp	r3, #8
 800dbba:	d10b      	bne.n	800dbd4 <_printf_i+0x148>
 800dbbc:	6823      	ldr	r3, [r4, #0]
 800dbbe:	07de      	lsls	r6, r3, #31
 800dbc0:	d508      	bpl.n	800dbd4 <_printf_i+0x148>
 800dbc2:	6923      	ldr	r3, [r4, #16]
 800dbc4:	6861      	ldr	r1, [r4, #4]
 800dbc6:	4299      	cmp	r1, r3
 800dbc8:	bfde      	ittt	le
 800dbca:	2330      	movle	r3, #48	; 0x30
 800dbcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dbd4:	1b52      	subs	r2, r2, r5
 800dbd6:	6122      	str	r2, [r4, #16]
 800dbd8:	f8cd a000 	str.w	sl, [sp]
 800dbdc:	464b      	mov	r3, r9
 800dbde:	aa03      	add	r2, sp, #12
 800dbe0:	4621      	mov	r1, r4
 800dbe2:	4640      	mov	r0, r8
 800dbe4:	f7ff fee4 	bl	800d9b0 <_printf_common>
 800dbe8:	3001      	adds	r0, #1
 800dbea:	d14a      	bne.n	800dc82 <_printf_i+0x1f6>
 800dbec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbf0:	b004      	add	sp, #16
 800dbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	f043 0320 	orr.w	r3, r3, #32
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	4833      	ldr	r0, [pc, #204]	; (800dccc <_printf_i+0x240>)
 800dc00:	2778      	movs	r7, #120	; 0x78
 800dc02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	6829      	ldr	r1, [r5, #0]
 800dc0a:	061f      	lsls	r7, r3, #24
 800dc0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc10:	d402      	bmi.n	800dc18 <_printf_i+0x18c>
 800dc12:	065f      	lsls	r7, r3, #25
 800dc14:	bf48      	it	mi
 800dc16:	b2b6      	uxthmi	r6, r6
 800dc18:	07df      	lsls	r7, r3, #31
 800dc1a:	bf48      	it	mi
 800dc1c:	f043 0320 	orrmi.w	r3, r3, #32
 800dc20:	6029      	str	r1, [r5, #0]
 800dc22:	bf48      	it	mi
 800dc24:	6023      	strmi	r3, [r4, #0]
 800dc26:	b91e      	cbnz	r6, 800dc30 <_printf_i+0x1a4>
 800dc28:	6823      	ldr	r3, [r4, #0]
 800dc2a:	f023 0320 	bic.w	r3, r3, #32
 800dc2e:	6023      	str	r3, [r4, #0]
 800dc30:	2310      	movs	r3, #16
 800dc32:	e7a7      	b.n	800db84 <_printf_i+0xf8>
 800dc34:	4824      	ldr	r0, [pc, #144]	; (800dcc8 <_printf_i+0x23c>)
 800dc36:	e7e4      	b.n	800dc02 <_printf_i+0x176>
 800dc38:	4615      	mov	r5, r2
 800dc3a:	e7bd      	b.n	800dbb8 <_printf_i+0x12c>
 800dc3c:	682b      	ldr	r3, [r5, #0]
 800dc3e:	6826      	ldr	r6, [r4, #0]
 800dc40:	6961      	ldr	r1, [r4, #20]
 800dc42:	1d18      	adds	r0, r3, #4
 800dc44:	6028      	str	r0, [r5, #0]
 800dc46:	0635      	lsls	r5, r6, #24
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	d501      	bpl.n	800dc50 <_printf_i+0x1c4>
 800dc4c:	6019      	str	r1, [r3, #0]
 800dc4e:	e002      	b.n	800dc56 <_printf_i+0x1ca>
 800dc50:	0670      	lsls	r0, r6, #25
 800dc52:	d5fb      	bpl.n	800dc4c <_printf_i+0x1c0>
 800dc54:	8019      	strh	r1, [r3, #0]
 800dc56:	2300      	movs	r3, #0
 800dc58:	6123      	str	r3, [r4, #16]
 800dc5a:	4615      	mov	r5, r2
 800dc5c:	e7bc      	b.n	800dbd8 <_printf_i+0x14c>
 800dc5e:	682b      	ldr	r3, [r5, #0]
 800dc60:	1d1a      	adds	r2, r3, #4
 800dc62:	602a      	str	r2, [r5, #0]
 800dc64:	681d      	ldr	r5, [r3, #0]
 800dc66:	6862      	ldr	r2, [r4, #4]
 800dc68:	2100      	movs	r1, #0
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f7f2 fab0 	bl	80001d0 <memchr>
 800dc70:	b108      	cbz	r0, 800dc76 <_printf_i+0x1ea>
 800dc72:	1b40      	subs	r0, r0, r5
 800dc74:	6060      	str	r0, [r4, #4]
 800dc76:	6863      	ldr	r3, [r4, #4]
 800dc78:	6123      	str	r3, [r4, #16]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc80:	e7aa      	b.n	800dbd8 <_printf_i+0x14c>
 800dc82:	6923      	ldr	r3, [r4, #16]
 800dc84:	462a      	mov	r2, r5
 800dc86:	4649      	mov	r1, r9
 800dc88:	4640      	mov	r0, r8
 800dc8a:	47d0      	blx	sl
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	d0ad      	beq.n	800dbec <_printf_i+0x160>
 800dc90:	6823      	ldr	r3, [r4, #0]
 800dc92:	079b      	lsls	r3, r3, #30
 800dc94:	d413      	bmi.n	800dcbe <_printf_i+0x232>
 800dc96:	68e0      	ldr	r0, [r4, #12]
 800dc98:	9b03      	ldr	r3, [sp, #12]
 800dc9a:	4298      	cmp	r0, r3
 800dc9c:	bfb8      	it	lt
 800dc9e:	4618      	movlt	r0, r3
 800dca0:	e7a6      	b.n	800dbf0 <_printf_i+0x164>
 800dca2:	2301      	movs	r3, #1
 800dca4:	4632      	mov	r2, r6
 800dca6:	4649      	mov	r1, r9
 800dca8:	4640      	mov	r0, r8
 800dcaa:	47d0      	blx	sl
 800dcac:	3001      	adds	r0, #1
 800dcae:	d09d      	beq.n	800dbec <_printf_i+0x160>
 800dcb0:	3501      	adds	r5, #1
 800dcb2:	68e3      	ldr	r3, [r4, #12]
 800dcb4:	9903      	ldr	r1, [sp, #12]
 800dcb6:	1a5b      	subs	r3, r3, r1
 800dcb8:	42ab      	cmp	r3, r5
 800dcba:	dcf2      	bgt.n	800dca2 <_printf_i+0x216>
 800dcbc:	e7eb      	b.n	800dc96 <_printf_i+0x20a>
 800dcbe:	2500      	movs	r5, #0
 800dcc0:	f104 0619 	add.w	r6, r4, #25
 800dcc4:	e7f5      	b.n	800dcb2 <_printf_i+0x226>
 800dcc6:	bf00      	nop
 800dcc8:	0800eb41 	.word	0x0800eb41
 800dccc:	0800eb52 	.word	0x0800eb52

0800dcd0 <__malloc_lock>:
 800dcd0:	4801      	ldr	r0, [pc, #4]	; (800dcd8 <__malloc_lock+0x8>)
 800dcd2:	f7ff bc65 	b.w	800d5a0 <__retarget_lock_acquire_recursive>
 800dcd6:	bf00      	nop
 800dcd8:	20005394 	.word	0x20005394

0800dcdc <__malloc_unlock>:
 800dcdc:	4801      	ldr	r0, [pc, #4]	; (800dce4 <__malloc_unlock+0x8>)
 800dcde:	f7ff bc60 	b.w	800d5a2 <__retarget_lock_release_recursive>
 800dce2:	bf00      	nop
 800dce4:	20005394 	.word	0x20005394

0800dce8 <_realloc_r>:
 800dce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcec:	4680      	mov	r8, r0
 800dcee:	4614      	mov	r4, r2
 800dcf0:	460e      	mov	r6, r1
 800dcf2:	b921      	cbnz	r1, 800dcfe <_realloc_r+0x16>
 800dcf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf8:	4611      	mov	r1, r2
 800dcfa:	f7ff bdd9 	b.w	800d8b0 <_malloc_r>
 800dcfe:	b92a      	cbnz	r2, 800dd0c <_realloc_r+0x24>
 800dd00:	f000 f84c 	bl	800dd9c <_free_r>
 800dd04:	4625      	mov	r5, r4
 800dd06:	4628      	mov	r0, r5
 800dd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0c:	f000 f892 	bl	800de34 <_malloc_usable_size_r>
 800dd10:	4284      	cmp	r4, r0
 800dd12:	4607      	mov	r7, r0
 800dd14:	d802      	bhi.n	800dd1c <_realloc_r+0x34>
 800dd16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd1a:	d812      	bhi.n	800dd42 <_realloc_r+0x5a>
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	4640      	mov	r0, r8
 800dd20:	f7ff fdc6 	bl	800d8b0 <_malloc_r>
 800dd24:	4605      	mov	r5, r0
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d0ed      	beq.n	800dd06 <_realloc_r+0x1e>
 800dd2a:	42bc      	cmp	r4, r7
 800dd2c:	4622      	mov	r2, r4
 800dd2e:	4631      	mov	r1, r6
 800dd30:	bf28      	it	cs
 800dd32:	463a      	movcs	r2, r7
 800dd34:	f7ff fc36 	bl	800d5a4 <memcpy>
 800dd38:	4631      	mov	r1, r6
 800dd3a:	4640      	mov	r0, r8
 800dd3c:	f000 f82e 	bl	800dd9c <_free_r>
 800dd40:	e7e1      	b.n	800dd06 <_realloc_r+0x1e>
 800dd42:	4635      	mov	r5, r6
 800dd44:	e7df      	b.n	800dd06 <_realloc_r+0x1e>

0800dd46 <memmove>:
 800dd46:	4288      	cmp	r0, r1
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	eb01 0402 	add.w	r4, r1, r2
 800dd4e:	d902      	bls.n	800dd56 <memmove+0x10>
 800dd50:	4284      	cmp	r4, r0
 800dd52:	4623      	mov	r3, r4
 800dd54:	d807      	bhi.n	800dd66 <memmove+0x20>
 800dd56:	1e43      	subs	r3, r0, #1
 800dd58:	42a1      	cmp	r1, r4
 800dd5a:	d008      	beq.n	800dd6e <memmove+0x28>
 800dd5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd60:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd64:	e7f8      	b.n	800dd58 <memmove+0x12>
 800dd66:	4402      	add	r2, r0
 800dd68:	4601      	mov	r1, r0
 800dd6a:	428a      	cmp	r2, r1
 800dd6c:	d100      	bne.n	800dd70 <memmove+0x2a>
 800dd6e:	bd10      	pop	{r4, pc}
 800dd70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd78:	e7f7      	b.n	800dd6a <memmove+0x24>
	...

0800dd7c <_sbrk_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4d06      	ldr	r5, [pc, #24]	; (800dd98 <_sbrk_r+0x1c>)
 800dd80:	2300      	movs	r3, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	4608      	mov	r0, r1
 800dd86:	602b      	str	r3, [r5, #0]
 800dd88:	f7f7 fb0a 	bl	80053a0 <_sbrk>
 800dd8c:	1c43      	adds	r3, r0, #1
 800dd8e:	d102      	bne.n	800dd96 <_sbrk_r+0x1a>
 800dd90:	682b      	ldr	r3, [r5, #0]
 800dd92:	b103      	cbz	r3, 800dd96 <_sbrk_r+0x1a>
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	bd38      	pop	{r3, r4, r5, pc}
 800dd98:	200053a0 	.word	0x200053a0

0800dd9c <_free_r>:
 800dd9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd9e:	2900      	cmp	r1, #0
 800dda0:	d044      	beq.n	800de2c <_free_r+0x90>
 800dda2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dda6:	9001      	str	r0, [sp, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f1a1 0404 	sub.w	r4, r1, #4
 800ddae:	bfb8      	it	lt
 800ddb0:	18e4      	addlt	r4, r4, r3
 800ddb2:	f7ff ff8d 	bl	800dcd0 <__malloc_lock>
 800ddb6:	4a1e      	ldr	r2, [pc, #120]	; (800de30 <_free_r+0x94>)
 800ddb8:	9801      	ldr	r0, [sp, #4]
 800ddba:	6813      	ldr	r3, [r2, #0]
 800ddbc:	b933      	cbnz	r3, 800ddcc <_free_r+0x30>
 800ddbe:	6063      	str	r3, [r4, #4]
 800ddc0:	6014      	str	r4, [r2, #0]
 800ddc2:	b003      	add	sp, #12
 800ddc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddc8:	f7ff bf88 	b.w	800dcdc <__malloc_unlock>
 800ddcc:	42a3      	cmp	r3, r4
 800ddce:	d908      	bls.n	800dde2 <_free_r+0x46>
 800ddd0:	6825      	ldr	r5, [r4, #0]
 800ddd2:	1961      	adds	r1, r4, r5
 800ddd4:	428b      	cmp	r3, r1
 800ddd6:	bf01      	itttt	eq
 800ddd8:	6819      	ldreq	r1, [r3, #0]
 800ddda:	685b      	ldreq	r3, [r3, #4]
 800dddc:	1949      	addeq	r1, r1, r5
 800ddde:	6021      	streq	r1, [r4, #0]
 800dde0:	e7ed      	b.n	800ddbe <_free_r+0x22>
 800dde2:	461a      	mov	r2, r3
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	b10b      	cbz	r3, 800ddec <_free_r+0x50>
 800dde8:	42a3      	cmp	r3, r4
 800ddea:	d9fa      	bls.n	800dde2 <_free_r+0x46>
 800ddec:	6811      	ldr	r1, [r2, #0]
 800ddee:	1855      	adds	r5, r2, r1
 800ddf0:	42a5      	cmp	r5, r4
 800ddf2:	d10b      	bne.n	800de0c <_free_r+0x70>
 800ddf4:	6824      	ldr	r4, [r4, #0]
 800ddf6:	4421      	add	r1, r4
 800ddf8:	1854      	adds	r4, r2, r1
 800ddfa:	42a3      	cmp	r3, r4
 800ddfc:	6011      	str	r1, [r2, #0]
 800ddfe:	d1e0      	bne.n	800ddc2 <_free_r+0x26>
 800de00:	681c      	ldr	r4, [r3, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	6053      	str	r3, [r2, #4]
 800de06:	440c      	add	r4, r1
 800de08:	6014      	str	r4, [r2, #0]
 800de0a:	e7da      	b.n	800ddc2 <_free_r+0x26>
 800de0c:	d902      	bls.n	800de14 <_free_r+0x78>
 800de0e:	230c      	movs	r3, #12
 800de10:	6003      	str	r3, [r0, #0]
 800de12:	e7d6      	b.n	800ddc2 <_free_r+0x26>
 800de14:	6825      	ldr	r5, [r4, #0]
 800de16:	1961      	adds	r1, r4, r5
 800de18:	428b      	cmp	r3, r1
 800de1a:	bf04      	itt	eq
 800de1c:	6819      	ldreq	r1, [r3, #0]
 800de1e:	685b      	ldreq	r3, [r3, #4]
 800de20:	6063      	str	r3, [r4, #4]
 800de22:	bf04      	itt	eq
 800de24:	1949      	addeq	r1, r1, r5
 800de26:	6021      	streq	r1, [r4, #0]
 800de28:	6054      	str	r4, [r2, #4]
 800de2a:	e7ca      	b.n	800ddc2 <_free_r+0x26>
 800de2c:	b003      	add	sp, #12
 800de2e:	bd30      	pop	{r4, r5, pc}
 800de30:	20005398 	.word	0x20005398

0800de34 <_malloc_usable_size_r>:
 800de34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de38:	1f18      	subs	r0, r3, #4
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	bfbc      	itt	lt
 800de3e:	580b      	ldrlt	r3, [r1, r0]
 800de40:	18c0      	addlt	r0, r0, r3
 800de42:	4770      	bx	lr

0800de44 <_init>:
 800de44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de46:	bf00      	nop
 800de48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4a:	bc08      	pop	{r3}
 800de4c:	469e      	mov	lr, r3
 800de4e:	4770      	bx	lr

0800de50 <_fini>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	bf00      	nop
 800de54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de56:	bc08      	pop	{r3}
 800de58:	469e      	mov	lr, r3
 800de5a:	4770      	bx	lr
